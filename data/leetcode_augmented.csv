description,Array,Dynamic Programming,String,Math,Tree,Depth-first Search,Greedy,Hash Table,Binary Search,Breadth-first Search,Sort,Two Pointers,Backtracking,Stack,Design,Graph,Bit Manipulation,Heap,Linked List,Recursion,Union Find,Sliding Window,Trie,Divide and Conquer,Segment Tree,Ordered Map,Queue,Minimax,Geometry,Binary Indexed Tree,Brainteaser,Topological Sort,Line Sweep,Random,Dequeue,Binary Search Tree,Suffix Array,Rolling Hash,Reservoir Sampling,Rejection Sampling,Memoization,OOP,Meet in the Middle
"Given an array of integers `nums` and an integer `target`, return indices of the two numbers such that they add up to `target`.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.


Example 1:
Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
Output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
Output: [0,1]

Constraints:
`2 <= nums.length <= 103`
`-109 <= nums[i] <= 109`
`-109 <= target <= 109`
Only one valid answer exists.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.


Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.


Example 2:
Input: l1 = [0], l2 = [0]
Output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

Constraints:
The number of nodes in each linked list is in the range `[1, 100]`.

`0 <= Node.val <= 9`
It is guaranteed that the list represents a number that does not have leading zeros.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, find the length of the longest substring without repeating characters.


Example 1:
Input: s = ""abcabcbb""
Output: 3
Explanation: The answer is ""abc"", with the length of 3.


Example 2:
Input: s = ""bbbbb""
Output: 1
Explanation: The answer is ""b"", with the length of 1.


Example 3:
Input: s = ""pwwkew""
Output: 3
Explanation: The answer is ""wke"", with the length of 3.

Notice that the answer must be a substring, ""pwke"" is a subsequence and not a substring.


Example 4:
Input: s = """"
Output: 0

Constraints:
`0 <= s.length <= 5 * 104`
`s` consists of English letters, digits, symbols and spaces.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sorted arrays `nums1` and `nums2` of size `m` and `n` respectively, return the median of the two sorted arrays.


Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: merged array = [1,2,3] and median is 2.


Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.


Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000

Example 4:
Input: nums1 = [], nums2 = [1]
Output: 1.00000

Example 5:
Input: nums1 = [2], nums2 = []
Output: 2.00000

Constraints:
`nums1.length == m`
`nums2.length == n`
`0 <= m <= 1000`
`0 <= n <= 1000`
`1 <= m + n <= 2000`
`-106 <= nums1[i], nums2[i] <= 106`
Follow up: The overall run time complexity should be `O(log (m+n))`.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the longest palindromic substring in `s`.


Example 1:
Input: s = ""babad""
Output: ""bab""
Note: ""aba"" is also a valid answer.


Example 2:
Input: s = ""cbbd""
Output: ""bb""

Example 3:
Input: s = ""a""
Output: ""a""

Example 4:
Input: s = ""ac""
Output: ""a""

Constraints:
`1 <= s.length <= 1000`
`s` consist of only digits and English letters (lower-case and/or upper-case),",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The string `""PAYPALISHIRING""` is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)
P   A   H   N
A P L S I I G
Y   I   R
And then read line by line: `""PAHNAPLSIIGYIR""`
Write the code that will take a string and make this conversion given a number of rows:
string convert(string s, int numRows);

Example 1:
Input: s = ""PAYPALISHIRING"", numRows = 3
Output: ""PAHNAPLSIIGYIR""

Example 2:
Input: s = ""PAYPALISHIRING"", numRows = 4
Output: ""PINALSIGYAHRPI""
Explanation:
P     I    N
A   L S  I G
Y A   H R
P     I

Example 3:
Input: s = ""A"", numRows = 1
Output: ""A""

Constraints:
`1 <= s.length <= 1000`
`s` consists of English letters (lower-case and upper-case), `','` and `'.'`.

`1 <= numRows <= 1000`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a signed 32-bit integer `x`, return `x` with its digits reversed. If reversing `x` causes the value to go outside the signed 32-bit integer range `[-231, 231 - 1]`, then return `0`.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).


Example 1:
Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

Example 3:
Input: x = 120
Output: 21

Example 4:
Input: x = 0
Output: 0

Constraints:
`-231 <= x <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to C/C++'s `atoi` function).

The algorithm for `myAtoi(string s)` is as follows:
Read in and ignore any leading whitespace.

Check if the next character (if not already at the end of the string) is `'-'` or `'+'`. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.

Read in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.

Convert these digits into an integer (i.e. `""123"" -> 123`, `""0032"" -> 32`). If no digits were read, then the integer is `0`. Change the sign as necessary (from step 2).

If the integer is out of the 32-bit signed integer range `[-231, 231 - 1]`, then clamp the integer so that it remains in the range. Specifically, integers less than `-231` should be clamped to `-231`, and integers greater than `231 - 1` should be clamped to `231 - 1`.

Return the integer as the final result.

Note:
Only the space character `' '` is considered a whitespace character.

Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.


Example 1:
Input: s = ""42""
Output: 42
Explanation: The underlined characters are what is read in, the caret is the current reader position.

Step 1: ""42"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""42"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""42"" (""42"" is read in)
           ^
The parsed integer is 42.

Since 42 is in the range [-231, 231 - 1], the final result is 42.


Example 2:
Input: s = ""   -42""
Output: -42
Explanation:
Step 1: ""   -42"" (leading whitespace is read and ignored)
            ^
Step 2: ""   -42"" ('-' is read, so the result should be negative)
             ^
Step 3: ""   -42"" (""42"" is read in)
               ^
The parsed integer is -42.

Since -42 is in the range [-231, 231 - 1], the final result is -42.


Example 3:
Input: s = ""4193 with words""
Output: 4193
Explanation:
Step 1: ""4193 with words"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""4193 with words"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""4193 with words"" (""4193"" is read in; reading stops because the next character is a non-digit)
             ^
The parsed integer is 4193.

Since 4193 is in the range [-231, 231 - 1], the final result is 4193.


Example 4:
Input: s = ""words and 987""
Output: 0
Explanation:
Step 1: ""words and 987"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""words and 987"" (no characters read because there is neither a '-' nor '+')
         ^
Step 3: ""words and 987"" (reading stops immediately because there is a non-digit 'w')
         ^
The parsed integer is 0 because no digits were read.

Since 0 is in the range [-231, 231 - 1], the final result is 0.


Example 5:
Input: s = ""-91283472332""
Output: -2147483648
Explanation:
Step 1: ""-91283472332"" (no characters read because there is no leading whitespace)
         ^
Step 2: ""-91283472332"" ('-' is read, so the result should be negative)
          ^
Step 3: ""-91283472332"" (""91283472332"" is read in)
                     ^
The parsed integer is -91283472332.

Since -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648. 

Constraints:
`0 <= s.length <= 200`
`s` consists of English letters (lower-case and upper-case), digits (`0-9`), `' '`, `'+'`, `'-'`, and `'.'`.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `x`, return `true` if `x` is palindrome integer.

An integer is a palindrome when it reads the same backward as forward. For example, `121` is palindrome while `123` is not.


Example 1:
Input: x = 121
Output: true

Example 2:
Input: x = -121
Output: false
Explanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.


Example 3:
Input: x = 10
Output: false
Explanation: Reads 01 from right to left. Therefore it is not a palindrome.


Example 4:
Input: x = -101
Output: false

Constraints:
`-231 <= x <= 231 - 1`
Follow up: Could you solve it without converting the integer to a string?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an input string (`s`) and a pattern (`p`), implement regular expression matching with support for `'.'` and `'*'` where:` `
`'.'` Matches any single character.​​​​
`'*'` Matches zero or more of the preceding element.

The matching should cover the entire input string (not partial).


Example 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:
Input: s = ""aa"", p = ""a*""
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes ""aa"".


Example 3:
Input: s = ""ab"", p = "".*""
Output: true
Explanation: "".*"" means ""zero or more (*) of any character (.)"".


Example 4:
Input: s = ""aab"", p = ""c*a*b""
Output: true
Explanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches ""aab"".


Example 5:
Input: s = ""mississippi"", p = ""mis*is*p*.""
Output: false

Constraints:
`0 <= s.length <= 20`
`0 <= p.length <= 30`
`s` contains only lowercase English letters.

`p` contains only lowercase English letters, `'.'`, and `'*'`.

It is guaranteed for each appearance of the character `'*'`, there will be a previous valid character to match.",0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` non-negative integers `a1, a2, ..., an` , where each represents a point at coordinate `(i, ai)`. `n` vertical lines are drawn such that the two endpoints of the line `i` is at `(i, ai)` and `(i, 0)`. Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.

Notice that you may not slant the container.


Example 1:
Input: height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.


Example 2:
Input: height = [1,1]
Output: 1

Example 3:
Input: height = [4,3,2,1,4]
Output: 16

Example 4:
Input: height = [1,2,1]
Output: 2

Constraints:
`n == height.length`
`2 <= n <= 105`
`0 <= height[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:
`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 
`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 
`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given an integer, convert it to a roman numeral.


Example 1:
Input: num = 3
Output: ""III""

Example 2:
Input: num = 4
Output: ""IV""

Example 3:
Input: num = 9
Output: ""IX""

Example 4:
Input: num = 58
Output: ""LVIII""
Explanation: L = 50, V = 5, III = 3.


Example 5:
Input: num = 1994
Output: ""MCMXCIV""
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


Constraints:
`1 <= num <= 3999`",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D` and `M`.

Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, `2` is written as `II` in Roman numeral, just two one's added together. `12` is written as `XII`, which is simply `X + II`. The number `27` is written as `XXVII`, which is `XX + V + II`.

Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not `IIII`. Instead, the number four is written as `IV`. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as `IX`. There are six instances where subtraction is used:
`I` can be placed before `V` (5) and `X` (10) to make 4 and 9. 
`X` can be placed before `L` (50) and `C` (100) to make 40 and 90. 
`C` can be placed before `D` (500) and `M` (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.


Example 1:
Input: s = ""III""
Output: 3

Example 2:
Input: s = ""IV""
Output: 4

Example 3:
Input: s = ""IX""
Output: 9

Example 4:
Input: s = ""LVIII""
Output: 58
Explanation: L = 50, V= 5, III = 3.


Example 5:
Input: s = ""MCMXCIV""
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


Constraints:
`1 <= s.length <= 15`
`s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.

It is guaranteed that `s` is a valid roman numeral in the range `[1, 3999]`.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function to find the longest common prefix string amongst an array of strings.

If there is no common prefix, return an empty string `""""`.


Example 1:
Input: strs = [""flower"",""flow"",""flight""]
Output: ""fl""

Example 2:
Input: strs = [""dog"",""racecar"",""car""]
Output: """"
Explanation: There is no common prefix among the input strings.


Constraints:
`0 <= strs.length <= 200`
`0 <= strs[i].length <= 200`
`strs[i]` consists of only lower-case English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, return all the triplets `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k`, and `j != k`, and `nums[i] + nums[j] + nums[k] == 0`.

Notice that the solution set must not contain duplicate triplets.


Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
Input: nums = []
Output: []

Example 3:
Input: nums = [0]
Output: []

Constraints:
`0 <= nums.length <= 3000`
`-105 <= nums[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of n integers and an integer `target`, find three integers in `nums` such that the sum is closest to `target`. Return the sum of the three integers. You may assume that each input would have exactly one solution.


Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).


Constraints:
`3 <= nums.length <= 10^3`
`-10^3 <= nums[i] <= 10^3`
`-10^4 <= target <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string containing digits from `2-9` inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.

A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.


Example 1:
Input: digits = ""23""
Output: [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]

Example 2:
Input: digits = """"
Output: []

Example 3:
Input: digits = ""2""
Output: [""a"",""b"",""c""]

Constraints:
`0 <= digits.length <= 4`
`digits[i]` is a digit in the range `['2', '9']`.",0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of n integers and an integer `target`, are there elements a, b, c, and d in `nums` such that a + b + c + d = `target`? Find all unique quadruplets in the array which gives the sum of `target`.

Notice that the solution set must not contain duplicate quadruplets.


Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [], target = 0
Output: []

Constraints:
`0 <= nums.length <= 200`
`-109 <= nums[i] <= 109`
`-109 <= target <= 109`",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a linked list, remove the `nth` node from the end of the list and return its head.

Follow up: Could you do this in one pass?

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
Output: []

Example 3:
Input: head = [1,2], n = 1
Output: [1]

Constraints:
The number of nodes in the list is `sz`.

`1 <= sz <= 30`
`0 <= Node.val <= 100`
`1 <= n <= sz`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` containing just the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine if the input string is valid.

An input string is valid if:
Open brackets must be closed by the same type of brackets.

Open brackets must be closed in the correct order.


Example 1:
Input: s = ""()""
Output: true

Example 2:
Input: s = ""()[]{}""
Output: true

Example 3:
Input: s = ""(]""
Output: false

Example 4:
Input: s = ""([)]""
Output: false

Example 5:
Input: s = ""{[]}""
Output: true

Constraints:
`1 <= s.length <= 104`
`s` consists of parentheses only `'()[]{}'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.


Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
Output: []

Example 3:
Input: l1 = [], l2 = [0]
Output: [0]

Constraints:
The number of nodes in both lists is in the range `[0, 50]`.

`-100 <= Node.val <= 100`
Both `l1` and `l2` are sorted in non-decreasing order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` pairs of parentheses, write a function to generate all combinations of well-formed parentheses.


Example 1:
Input: n = 3
Output: [""((()))"",""(()())"",""(())()"",""()(())"",""()()()""]

Example 2:
Input: n = 1
Output: [""()""]

Constraints:
`1 <= n <= 8`",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of `k` linked-lists `lists`, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.


Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6

Example 2:
Input: lists = []
Output: []

Example 3:
Input: lists = [[]]
Output: []

Constraints:
`k == lists.length`
`0 <= k <= 10^4`
`0 <= lists[i].length <= 500`
`-10^4 <= lists[i][j] <= 10^4`
`lists[i]` is sorted in ascending order.

The sum of `lists[i].length` won't exceed `10^4`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list, swap every two adjacent nodes and return its head.


Example 1:
Input: head = [1,2,3,4]
Output: [2,1,4,3]

Example 2:
Input: head = []
Output: []

Example 3:
Input: head = [1]
Output: [1]

Constraints:
The number of nodes in the list is in the range `[0, 100]`.

`0 <= Node.val <= 100`
Follow up: Can you solve the problem without modifying the values in the list's nodes? (i.e., Only nodes themselves may be changed.)",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.

k is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.

Follow up:
Could you solve the problem in `O(1)` extra memory space?
You may not alter the values in the list's nodes, only nodes itself may be changed.


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Example 3:
Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]

Example 4:
Input: head = [1], k = 1
Output: [1]

Constraints:
The number of nodes in the list is in the range `sz`.

`1 <= sz <= 5000`
`0 <= Node.val <= 1000`
`1 <= k <= sz`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:
Confused why the returned value is an integer but your answer is an array?
Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.

Internally you can think of this:
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);
// any modification to nums in your function would be known by the caller.

// using the length returned by your function, it prints the first len elements.

for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Example 1:
Input: nums = [1,1,2]
Output: 2, nums = [1,2]
Explanation: Your function should return length = `2`, with the first two elements of `nums` being `1` and `2` respectively. It doesn't matter what you leave beyond the returned length.


Example 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4]
Explanation: Your function should return length = `5`, with the first five elements of `nums` being modified to `0`, `1`, `2`, `3`, and `4` respectively. It doesn't matter what values are set beyond the returned length.


Constraints:
`0 <= nums.length <= 3 * 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in ascending order.",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array nums and a value `val`, remove all instances of that value in-place and return the new length.

Do not allocate extra space for another array, you must do this by modifying the input array in-place with `O(1)` extra memory.

The order of elements can be changed. It doesn't matter what you leave beyond the new length.

Clarification:
Confused why the returned value is an integer but your answer is an array?
Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.

Internally you can think of this:
// nums is passed in by reference. (i.e., without making a copy)
int len = removeElement(nums, val);
// any modification to nums in your function would be known by the caller.

// using the length returned by your function, it prints the first len elements.

for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Example 1:
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2]
Explanation: Your function should return length = 2, with the first two elements of nums being 2.

It doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.


Example 2:
Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0,3]
Explanation: Your function should return length = `5`, with the first five elements of `nums` containing `0`, `1`, `3`, `0`, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.


Constraints:
`0 <= nums.length <= 100`
`0 <= nums[i] <= 50`
`0 <= val <= 100`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement strStr().

Return the index of the first occurrence of needle in haystack, or `-1` if `needle` is not part of `haystack`.

Clarification:
What should we return when `needle` is an empty string? This is a great question to ask during an interview.

For the purpose of this problem, we will return 0 when `needle` is an empty string. This is consistent to C's strstr() and Java's indexOf().


Example 1:
Input: haystack = ""hello"", needle = ""ll""
Output: 2

Example 2:
Input: haystack = ""aaaaa"", needle = ""bba""
Output: -1

Example 3:
Input: haystack = """", needle = """"
Output: 0

Constraints:
`0 <= haystack.length, needle.length <= 5 * 104`
`haystack` and `needle` consist of only lower-case English characters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `dividend` and `divisor`, divide two integers without using multiplication, division, and mod operator.

Return the quotient after dividing `dividend` by `divisor`.

The integer division should truncate toward zero, which means losing its fractional part. For example, `truncate(8.345) = 8` and `truncate(-2.7335) = -2`.

Note: Assume we are dealing with an environment that could only store integers within the 32-bit signed integer range: `[−231, 231 − 1]`. For this problem, assume that your function returns `231 − 1` when the division result overflows.


Example 1:
Input: dividend = 10, divisor = 3
Output: 3
Explanation: 10/3 = truncate(3.33333..) = 3.


Example 2:
Input: dividend = 7, divisor = -3
Output: -2
Explanation: 7/-3 = truncate(-2.33333..) = -2.


Example 3:
Input: dividend = 0, divisor = 1
Output: 0

Example 4:
Input: dividend = 1, divisor = 1
Output: 1

Constraints:
`-231 <= dividend, divisor <= 231 - 1`
`divisor != 0`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` and an array of strings `words` of the same length. Return all starting indices of substring(s) in `s` that is a concatenation of each word in `words` exactly once, in any order, and without any intervening characters.

You can return the answer in any order.


Example 1:
Input: s = ""barfoothefoobarman"", words = [""foo"",""bar""]
Output: [0,9]
Explanation: Substrings starting at index 0 and 9 are ""barfoo"" and ""foobar"" respectively.

The output order does not matter, returning [9,0] is fine too.


Example 2:
Input: s = ""wordgoodgoodgoodbestword"", words = [""word"",""good"",""best"",""word""]
Output: []

Example 3:
Input: s = ""barfoofoobarthefoobarman"", words = [""bar"",""foo"",""the""]
Output: [6,9,12]

Constraints:
`1 <= s.length <= 104`
`s` consists of lower-case English letters.

`1 <= words.length <= 5000`
`1 <= words[i].length <= 30`
`words[i]` consists of lower-case English letters.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).

The replacement must be in place and use only constant extra memory.


Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]

Example 4:
Input: nums = [1]
Output: [1]

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string containing just the characters `'('` and `')'`, find the length of the longest valid (well-formed) parentheses substring.


Example 1:
Input: s = ""(()""
Output: 2
Explanation: The longest valid parentheses substring is ""()"".


Example 2:
Input: s = "")()())""
Output: 4
Explanation: The longest valid parentheses substring is ""()()"".


Example 3:
Input: s = """"
Output: 0

Constraints:
`0 <= s.length <= 3 * 104`
`s[i]` is `'('`, or `')'`.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an integer array `nums` sorted in ascending order (with distinct values).

Prior to being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,5,6,7]` might be rotated at pivot index `3` and become `[4,5,6,7,0,1,2]`.

Given the array `nums` after the rotation and an integer `target`, return the index of `target` if it is in `nums`, or `-1` if it is not in `nums`.


Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

Constraints:
`1 <= nums.length <= 5000`
`-104 <= nums[i] <= 104`
All values of `nums` are unique.

`nums` is guaranteed to be rotated at some pivot.

`-104 <= target <= 104`
Follow up: Can you achieve this in `O(log n)` time complexity?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` sorted in ascending order, find the starting and ending position of a given `target` value.

If `target` is not found in the array, return `[-1, -1]`.

Follow up: Could you write an algorithm with `O(log n)` runtime complexity?

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

Constraints:
`0 <= nums.length <= 105`
`-109 <= nums[i] <= 109`
`nums` is a non-decreasing array.

`-109 <= target <= 109`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.


Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

Example 4:
Input: nums = [1,3,5,6], target = 0
Output: 0

Example 5:
Input: nums = [1], target = 0
Output: 0

Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` contains distinct values sorted in ascending order.

`-104 <= target <= 104`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Determine if a `9 x 9` Sudoku board is valid. Only the filled cells need to be validated according to the following rules:
Each row must contain the digits `1-9` without repetition.

Each column must contain the digits `1-9` without repetition.

Each of the nine `3 x 3` sub-boxes of the grid must contain the digits `1-9` without repetition.

Note:
A Sudoku board (partially filled) could be valid but is not necessarily solvable.

Only the filled cells need to be validated according to the mentioned rules.


Example 1:
Input: board = 
[[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: true

Example 2:
Input: board = 
[[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: false

Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.


Constraints:
`board.length == 9`
`board[i].length == 9`
`board[i][j]` is a digit or `'.'`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a program to solve a Sudoku puzzle by filling the empty cells.

A sudoku solution must satisfy all of the following rules:
Each of the digits `1-9` must occur exactly once in each row.

Each of the digits `1-9` must occur exactly once in each column.

Each of the digits `1-9` must occur exactly once in each of the 9 `3x3` sub-boxes of the grid.

The `'.'` character indicates empty cells.


Example 1:
Input: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"",""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"",""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"",""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1"",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3"",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3"",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]
Explanation: The input board is shown above and the only valid solution is shown below:

Constraints:
`board.length == 9`
`board[i].length == 9`
`board[i][j]` is a digit or `'.'`.

It is guaranteed that the input board has only one solution.",0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The count-and-say sequence is a sequence of digit strings defined by the recursive formula:
`countAndSay(1) = ""1""`
`countAndSay(n)` is the way you would ""say"" the digit string from `countAndSay(n-1)`, which is then converted into a different digit string.

To determine how you ""say"" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.

For example, the saying and conversion for digit string `""3322251""`:
Given a positive integer `n`, return the `nth` term of the count-and-say sequence.


Example 1:
Input: n = 1
Output: ""1""
Explanation: This is the base case.


Example 2:
Input: n = 4
Output: ""1211""
Explanation:
countAndSay(1) = ""1""
countAndSay(2) = say ""1"" = one 1 = ""11""
countAndSay(3) = say ""11"" = two 1's = ""21""
countAndSay(4) = say ""21"" = one 2 + one 1 = ""12"" + ""11"" = ""1211""

Constraints:
`1 <= n <= 30`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of distinct integers `candidates` and a target integer `target`, return a list of all unique combinations of `candidates` where the chosen numbers sum to `target`. You may return the combinations in any order.

The same number may be chosen from `candidates` an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.

It is guaranteed that the number of unique combinations that sum up to `target` is less than `150` combinations for the given input.


Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
Explanation:
2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.

7 is a candidate, and 7 = 7.

These are the only two combinations.


Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
Output: []

Example 4:
Input: candidates = [1], target = 1
Output: [[1]]

Example 5:
Input: candidates = [1], target = 2
Output: [[1,1]]

Constraints:
`1 <= candidates.length <= 30`
`1 <= candidates[i] <= 200`
All elements of `candidates` are distinct.

`1 <= target <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations in `candidates` where the candidate numbers sum to `target`.

Each number in `candidates` may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.


Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]

Constraints:
`1 <= candidates.length <= 100`
`1 <= candidates[i] <= 50`
`1 <= target <= 30`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an unsorted integer array `nums`, find the smallest missing positive integer.


Example 1:
Input: nums = [1,2,0]
Output: 3

Example 2:
Input: nums = [3,4,-1,1]
Output: 2

Example 3:
Input: nums = [7,8,9,11,12]
Output: 1

Constraints:
`0 <= nums.length <= 300`
`-231 <= nums[i] <= 231 - 1`
Follow up: Could you implement an algorithm that runs in `O(n)` time and uses constant extra space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` non-negative integers representing an elevation map where the width of each bar is `1`, compute how much water it can trap after raining.


Example 1:
Input: height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.


Example 2:
Input: height = [4,2,0,3,2,5]
Output: 9

Constraints:
`n == height.length`
`0 <= n <= 3 * 104`
`0 <= height[i] <= 105`",1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as a string.

Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.


Example 1:
Input: num1 = ""2"", num2 = ""3""
Output: ""6""

Example 2:
Input: num1 = ""123"", num2 = ""456""
Output: ""56088""

Constraints:
`1 <= num1.length, num2.length <= 200`
`num1` and `num2` consist of digits only.

Both `num1` and `num2` do not contain any leading zero, except the number `0` itself.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an input string (`s`) and a pattern (`p`), implement wildcard pattern matching with support for `'?'` and `'*'` where:
`'?'` Matches any single character.

`'*'` Matches any sequence of characters (including the empty sequence).

The matching should cover the entire input string (not partial).


Example 1:
Input: s = ""aa"", p = ""a""
Output: false
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:
Input: s = ""aa"", p = ""*""
Output: true
Explanation: '*' matches any sequence.


Example 3:
Input: s = ""cb"", p = ""?a""
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.


Example 4:
Input: s = ""adceb"", p = ""*a*b""
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring ""dce"".


Example 5:
Input: s = ""acdcb"", p = ""a*c?b""
Output: false

Constraints:
`0 <= s.length, p.length <= 2000`
`s` contains only lowercase English letters.

`p` contains only lowercase English letters, `'?'` or `'*'`.",0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to reach the last index in the minimum number of jumps.

You can assume that you can always reach the last index.


Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:
Input: nums = [2,3,0,1,4]
Output: 2

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 105`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of distinct integers, return all the possible permutations. You can return the answer in any order.


Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
Input: nums = [1]
Output: [[1]]

Constraints:
`1 <= nums.length <= 6`
`-10 <= nums[i] <= 10`
All the integers of `nums` are unique.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a collection of numbers, `nums`, that might contain duplicates, return all possible unique permutations in any order.


Example 1:
Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Constraints:
`1 <= nums.length <= 8`
`-10 <= nums[i] <= 10`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an n x n 2D `matrix` representing an image, rotate the image by 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.


Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

Example 3:
Input: matrix = [[1]]
Output: [[1]]

Example 4:
Input: matrix = [[1,2],[3,4]]
Output: [[3,1],[4,2]]

Constraints:
`matrix.length == n`
`matrix[i].length == n`
`1 <= n <= 20`
`-1000 <= matrix[i][j] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `strs`, group the anagrams together. You can return the answer in any order.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.


Example 1:
Input: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]
Output: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]

Example 2:
Input: strs = [""""]
Output: [[""""]]

Example 3:
Input: strs = [""a""]
Output: [[""a""]]

Constraints:
`1 <= strs.length <= 104`
`0 <= strs[i].length <= 100`
`strs[i]` consists of lower-case English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement pow(x, n), which calculates `x` raised to the power `n` (i.e., `xn`).


Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

Constraints:
`-100.0 < x < 100.0`
`-231 <= n <= 231-1`
`-104 <= xn <= 104`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return all distinct solutions to the n-queens puzzle.

Each solution contains a distinct board configuration of the n-queens' placement, where `'Q'` and `'.'` both indicate a queen and an empty space, respectively.


Example 1:
Input: n = 4
Output: [["".Q.."",""...Q"",""Q..."",""..Q.""],[""..Q."",""Q..."",""...Q"","".Q..""]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above

Example 2:
Input: n = 1
Output: [[""Q""]]

Constraints:
`1 <= n <= 9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The n-queens puzzle is the problem of placing `n` queens on an `n x n` chessboard such that no two queens attack each other.

Given an integer `n`, return the number of distinct solutions to the n-queens puzzle.


Example 1:
Input: n = 4
Output: 2
Explanation: There are two distinct solutions to the 4-queens puzzle as shown.


Example 2:
Input: n = 1
Output: 1

Constraints:
`1 <= n <= 9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.


Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.


Example 2:
Input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

Constraints:
`1 <= nums.length <= 3 * 104`
`-105 <= nums[i] <= 105`
Follow up: If you have figured out the `O(n)` solution, try coding another solution using the divide and conquer approach, which is more subtle.",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` `matrix`, return all elements of the `matrix` in spiral order.


Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 10`
`-100 <= matrix[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of non-negative integers `nums`, you are initially positioned at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you are able to reach the last index.


Example 1:
Input: nums = [2,3,1,1,4]
Output: true
Explanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.


Example 2:
Input: nums = [3,2,1,0,4]
Output: false
Explanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.


Constraints:
`1 <= nums.length <= 3 * 104`
`0 <= nums[i] <= 105`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `intervals` where `intervals[i] = [starti, endi]`, merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.


Example 1:
Input: intervals = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].


Example 2:
Input: intervals = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: Intervals [1,4] and [4,5] are considered overlapping.


Constraints:
`1 <= intervals.length <= 104`
`intervals[i].length == 2`
`0 <= starti <= endi <= 104`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.


Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval `[4,8]` overlaps with `[3,5],[6,7],[8,10]`.


Example 3:
Input: intervals = [], newInterval = [5,7]
Output: [[5,7]]

Example 4:
Input: intervals = [[1,5]], newInterval = [2,3]
Output: [[1,5]]

Example 5:
Input: intervals = [[1,5]], newInterval = [2,7]
Output: [[1,7]]

Constraints:
`0 <= intervals.length <= 104`
`intervals[i].length == 2`
`0 <= intervals[i][0] <= intervals[i][1] <= 105`
`intervals` is sorted by `intervals[i][0]` in ascending order.

`newInterval.length == 2`
`0 <= newInterval[0] <= newInterval[1] <= 105`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` consists of some words separated by spaces, return the length of the last word in the string. If the last word does not exist, return `0`.

A word is a maximal substring consisting of non-space characters only.


Example 1:
Input: s = ""Hello World""
Output: 5

Example 2:
Input: s = "" ""
Output: 0

Constraints:
`1 <= s.length <= 104`
`s` consists of only English letters and spaces `' '`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `n`, generate an `n x n` `matrix` filled with elements from `1` to `n2` in spiral order.


Example 1:
Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

Example 2:
Input: n = 1
Output: [[1]]

Constraints:
`1 <= n <= 20`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The set `[1, 2, 3, ..., n]` contains a total of `n!` unique permutations.

By listing and labeling all of the permutations in order, we get the following sequence for `n = 3`:
`""123""`
`""132""`
`""213""`
`""231""`
`""312""`
`""321""`
Given `n` and `k`, return the `kth` permutation sequence.


Example 1:
Input: n = 3, k = 3
Output: ""213""

Example 2:
Input: n = 4, k = 9
Output: ""2314""

Example 3:
Input: n = 3, k = 1
Output: ""123""

Constraints:
`1 <= n <= 9`
`1 <= k <= n!`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a linked list, rotate the list to the right by `k` places.


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

Constraints:
The number of nodes in the list is in the range `[0, 500]`.

`-100 <= Node.val <= 100`
`0 <= k <= 2 * 109`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

How many possible unique paths are there?

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
Explanation:
From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Example 3:
Input: m = 7, n = 3
Output: 28

Example 4:
Input: m = 3, n = 3
Output: 6

Constraints:
`1 <= m, n <= 100`
It's guaranteed that the answer will be less than or equal to `2 * 109`.",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A robot is located at the top-left corner of a `m x n` grid (marked 'Start' in the diagram below).

The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).

Now consider if some obstacles are added to the grids. How many unique paths would there be?
An obstacle and space is marked as `1` and `0` respectively in the grid.


Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is one obstacle in the middle of the 3x3 grid above.

There are two ways to reach the bottom-right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

Constraints:
`m == obstacleGrid.length`
`n == obstacleGrid[i].length`
`1 <= m, n <= 100`
`obstacleGrid[i][j]` is `0` or `1`.",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m x n` `grid` filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.

Note: You can only move either down or right at any point in time.


Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.


Example 2:
Input: grid = [[1,2,3],[4,5,6]]
Output: 12

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`0 <= grid[i][j] <= 100`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A valid number can be split up into these components (in order):
A decimal number or an integer.

(Optional) An `'e'` or `'E'`, followed by an integer.

A decimal number can be split up into these components (in order):
(Optional) A sign character (either `'+'` or `'-'`).

One of the following formats:
	
At least one digit, followed by a dot `'.'`.

At least one digit, followed by a dot `'.'`, followed by at least one digit.

A dot `'.'`, followed by at least one digit.

An integer can be split up into these components (in order):
(Optional) A sign character (either `'+'` or `'-'`).

At least one digit.

For example, all the following are valid numbers: `[""2"", ""0089"", ""-0.1"", ""+3.14"", ""4."", ""-.9"", ""2e10"", ""-90E3"", ""3e+7"", ""+6e-1"", ""53.5e93"", ""-123.456e789""]`, while the following are not valid numbers: `[""abc"", ""1a"", ""1e"", ""e3"", ""99e2.5"", ""--6"", ""-+3"", ""95a54e53""]`.

Given a string `s`, return `true` if `s` is a valid number.


Example 1:
Input: s = ""0""
Output: true

Example 2:
Input: s = ""e""
Output: false

Example 3:
Input: s = "".""
Output: false

Example 4:
Input: s = "".1""
Output: true

Constraints:
`1 <= s.length <= 20`
`s` consists of only English letters (both uppercase and lowercase), digits (`0-9`), plus `'+'`, minus `'-'`, or dot `'.'`.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.

The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.


Example 1:
Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.


Example 2:
Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.


Example 3:
Input: digits = [0]
Output: [1]

Constraints:
`1 <= digits.length <= 100`
`0 <= digits[i] <= 9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two binary strings `a` and `b`, return their sum as a binary string.


Example 1:
Input: a = ""11"", b = ""1""
Output: ""100""

Example 2:
Input: a = ""1010"", b = ""1011""
Output: ""10101""

Constraints:
`1 <= a.length, b.length <= 104`
`a` and `b` consist only of `'0'` or `'1'` characters.

Each string does not contain leading zeros except for the zero itself.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of words and a width maxWidth, format the text such that each line has exactly maxWidth characters and is fully (left and right) justified.

You should pack your words in a greedy approach; that is, pack as many words as you can in each line. Pad extra spaces `' '` when necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces on a line do not divide evenly between words, the empty slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left justified and no extra space is inserted between words.

Note:
A word is defined as a character sequence consisting of non-space characters only.

Each word's length is guaranteed to be greater than 0 and not exceed maxWidth.

The input array `words` contains at least one word.


Example 1:
Input: words = [""This"", ""is"", ""an"", ""example"", ""of"", ""text"", ""justification.""], maxWidth = 16
Output:
[
   ""This    is    an"",
   ""example  of text"",
   ""justification.  ""
]

Example 2:
Input: words = [""What"",""must"",""be"",""acknowledgment"",""shall"",""be""], maxWidth = 16
Output:
[
  ""What   must   be"",
  ""acknowledgment  "",
  ""shall be        ""
]
Explanation: Note that the last line is ""shall be    "" instead of ""shall     be"", because the last line must be left-justified instead of fully-justified.

Note that the second line is also left-justified becase it contains only one word.


Example 3:
Input: words = [""Science"",""is"",""what"",""we"",""understand"",""well"",""enough"",""to"",""explain"",""to"",""a"",""computer."",""Art"",""is"",""everything"",""else"",""we"",""do""], maxWidth = 20
Output:
[
  ""Science  is  what we"",
  ""understand      well"",
  ""enough to explain to"",
  ""a  computer.  Art is"",
  ""everything  else  we"",
  ""do                  ""
]

Constraints:
`1 <= words.length <= 300`
`1 <= words[i].length <= 20`
`words[i]` consists of only English letters and symbols.

`1 <= maxWidth <= 100`
`words[i].length <= maxWidth`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer `x`, compute and return the square root of `x`.

Since the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.


Example 1:
Input: x = 4
Output: 2

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.


Constraints:
`0 <= x <= 231 - 1`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are climbing a staircase. It takes `n` steps to reach the top.

Each time you can either climb `1` or `2` steps. In how many distinct ways can you climb to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.

1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Explanation: There are three ways to climb to the top.

1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

Constraints:
`1 <= n <= 45`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `path`, which is an absolute path (starting with a slash `'/'`) to a file or directory in a Unix-style file system, convert it to the simplified canonical path.

In a Unix-style file system, a period `'.'` refers to the current directory, a double period `'..'` refers to the directory up a level, and any multiple consecutive slashes (i.e. `'//'`) are treated as a single slash `'/'`. For this problem, any other format of periods such as `'...'` are treated as file/directory names.

The canonical path should have the following format:
The path starts with a single slash `'/'`.

Any two directories are separated by a single slash `'/'`.

The path does not end with a trailing `'/'`.

The path only contains the directories on the path from the root directory to the target file or directory (i.e., no period `'.'` or double period `'..'`)
Return the simplified canonical path.


Example 1:
Input: path = ""/home/""
Output: ""/home""
Explanation: Note that there is no trailing slash after the last directory name.


Example 2:
Input: path = ""/../""
Output: ""/""
Explanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.


Example 3:
Input: path = ""/home//foo/""
Output: ""/home/foo""
Explanation: In the canonical path, multiple consecutive slashes are replaced by a single one.


Example 4:
Input: path = ""/a/./b/../../c/""
Output: ""/c""

Constraints:
`1 <= path.length <= 3000`
`path` consists of English letters, digits, period `'.'`, slash `'/'` or `'_'`.

`path` is a valid absolute Unix path.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `word1` and `word2`, return the minimum number of operations required to convert `word1` to `word2`.

You have the following three operations permitted on a word:
Insert a character
Delete a character
Replace a character

Example 1:
Input: word1 = ""horse"", word2 = ""ros""
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = ""intention"", word2 = ""execution""
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')

Constraints:
`0 <= word1.length, word2.length <= 500`
`word1` and `word2` consist of lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` matrix. If an element is 0, set its entire row and column to 0. Do it in-place.

Follow up:
A straight forward solution using O(mn) space is probably a bad idea.

A simple improvement uses O(m + n) space, but still not the best solution.

Could you devise a constant space solution?

Example 1:
Input: matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]

Constraints:
`m == matrix.length`
`n == matrix[0].length`
`1 <= m, n <= 200`
`-231 <= matrix[i][j] <= 231 - 1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an efficient algorithm that searches for a value in an `m x n` matrix. This matrix has the following properties:
Integers in each row are sorted from left to right.

The first integer of each row is greater than the last integer of the previous row.


Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
Output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
Output: false

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 100`
`-104 <= matrix[i][j], target <= 104`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` with `n` objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers `0`, `1`, and `2` to represent the color red, white, and blue, respectively.


Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Example 3:
Input: nums = [0]
Output: [0]

Example 4:
Input: nums = [1]
Output: [1]

Constraints:
`n == nums.length`
`1 <= n <= 300`
`nums[i]` is `0`, `1`, or `2`.

Follow up:
Could you solve this problem without using the library's sort function?
Could you come up with a one-pass algorithm using only `O(1)` constant space?",1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, return the minimum window in `s` which will contain all the characters in `t`. If there is no such window in `s` that covers all characters in `t`, return the empty string `""""`.

Note that If there is such a window, it is guaranteed that there will always be only one unique minimum window in `s`.


Example 1:
Input: s = ""ADOBECODEBANC"", t = ""ABC""
Output: ""BANC""

Example 2:
Input: s = ""a"", t = ""a""
Output: ""a""

Constraints:
`1 <= s.length, t.length <= 105`
`s` and `t` consist of English letters.

Follow up: Could you find an algorithm that runs in `O(n)` time?",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `n` and `k`, return all possible combinations of `k` numbers out of the range `[1, n]`.

You may return the answer in any order.


Example 1:
Input: n = 4, k = 2
Output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Example 2:
Input: n = 1, k = 1
Output: [[1]]

Constraints:
`1 <= n <= 20`
`1 <= k <= n`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.


Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:
`1 <= nums.length <= 10`
`-10 <= nums[i] <= 10`
All the numbers of `nums` are unique.",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` grid of characters `board` and a string `word`, return `true` if `word` exists in the grid.

The word can be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.


Example 1:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCCED""
Output: true

Example 2:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""SEE""
Output: true

Example 3:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"",""E"",""E""]], word = ""ABCB""
Output: false

Constraints:
`m == board.length`
`n = board[i].length`
`1 <= m, n <= 6`
`1 <= word.length <= 15`
`board` and `word` consists of only lowercase and uppercase English letters.

Follow up: Could you use search pruning to make your solution faster with a larger `board`?",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.

Do not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.

Clarification:
Confused why the returned value is an integer, but your answer is an array?
Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller.

Internally you can think of this:
// nums is passed in by reference. (i.e., without making a copy)
int len = removeDuplicates(nums);
// any modification to nums in your function would be known by the caller.

// using the length returned by your function, it prints the first len elements.

for (int i = 0; i < len; i++) {
    print(nums[i]);
}

Example 1:
Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = `5`, with the first five elements of `nums` being `1, 1, 2, 2` and 3 respectively. It doesn't matter what you leave beyond the returned length.


Example 2:
Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3]
Explanation: Your function should return length = `7`, with the first seven elements of `nums` being modified to `0`, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length.


Constraints:
`1 <= nums.length <= 3 * 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in ascending order.",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an integer array `nums` sorted in non-decreasing order (not necessarily with distinct values).

Before being passed to your function, `nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) such that the resulting array is `[nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0-indexed). For example, `[0,1,2,4,4,4,5,6,6,7]` might be rotated at pivot index `5` and become `[4,5,6,6,7,0,1,2,4,4]`.

Given the array `nums` after the rotation and an integer `target`, return `true` if `target` is in `nums`, or `false` if it is not in `nums`.


Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
Output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
Output: false

Constraints:
`1 <= nums.length <= 5000`
`-104 <= nums[i] <= 104`
`nums` is guaranteed to be rotated at some pivot.

`-104 <= target <= 104`
Follow up: This problem is the same as Search in Rotated Sorted Array, where `nums` may contain duplicates. Would this affect the runtime complexity? How and why?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.


Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

Example 2:
Input: head = [1,1,1,2,3]
Output: [2,3]

Constraints:
The number of nodes in the list is in the range `[0, 300]`.

`-100 <= Node.val <= 100`
The list is guaranteed to be sorted in ascending order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.


Example 1:
Input: head = [1,1,2]
Output: [1,2]

Example 2:
Input: head = [1,1,2,3,3]
Output: [1,2,3]

Constraints:
The number of nodes in the list is in the range `[0, 300]`.

`-100 <= Node.val <= 100`
The list is guaranteed to be sorted in ascending order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `heights` representing the histogram's bar height where the width of each bar is `1`, return the area of the largest rectangle in the histogram.


Example 1:
Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.

The largest rectangle is shown in the red area, which has an area = 10 units.


Example 2:
Input: heights = [2,4]
Output: 4

Constraints:
`1 <= heights.length <= 105`
`0 <= heights[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `rows x cols` binary `matrix` filled with `0`'s and `1`'s, find the largest rectangle containing only `1`'s and return its area.


Example 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 6
Explanation: The maximal rectangle is shown in the above picture.


Example 2:
Input: matrix = []
Output: 0

Example 3:
Input: matrix = [[""0""]]
Output: 0

Example 4:
Input: matrix = [[""1""]]
Output: 1

Example 5:
Input: matrix = [[""0"",""0""]]
Output: 0

Constraints:
`rows == matrix.length`
`cols == matrix[i].length`
`0 <= row, cols <= 200`
`matrix[i][j]` is `'0'` or `'1'`.",1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a linked list and a value `x`, partition it such that all nodes less than `x` come before nodes greater than or equal to `x`.

You should preserve the original relative order of the nodes in each of the two partitions.


Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:
Input: head = [2,1], x = 2
Output: [1,2]

Constraints:
The number of nodes in the list is in the range `[0, 200]`.

`-100 <= Node.val <= 100`
`-200 <= x <= 200`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can scramble a string s to get a string t using the following algorithm:
If the length of the string is 1, stop.

If the length of the string is > 1, do the following:
	
Split the string into two non-empty substrings at a random index, i.e., if the string is `s`, divide it to `x` and `y` where `s = x + y`.

Randomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, `s` may become `s = x + y` or `s = y + x`.

Apply step 1 recursively on each of the two substrings `x` and `y`.

Given two strings `s1` and `s2` of the same length, return `true` if `s2` is a scrambled string of `s1`, otherwise, return `false`.


Example 1:
Input: s1 = ""great"", s2 = ""rgeat""
Output: true
Explanation: One possible scenario applied on s1 is:
""great"" --> ""gr/eat"" // divide at random index.

""gr/eat"" --> ""gr/eat"" // random decision is not to swap the two substrings and keep them in order.

""gr/eat"" --> ""g/r / e/at"" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.

""g/r / e/at"" --> ""r/g / e/at"" // random decision was to swap the first substring and to keep the second substring in the same order.

""r/g / e/at"" --> ""r/g / e/ a/t"" // again apply the algorithm recursively, divide ""at"" to ""a/t"".

""r/g / e/ a/t"" --> ""r/g / e/ a/t"" // random decision is to keep both substrings in the same order.

The algorithm stops now and the result string is ""rgeat"" which is s2.

As there is one possible scenario that led s1 to be scrambled to s2, we return true.


Example 2:
Input: s1 = ""abcde"", s2 = ""caebd""
Output: false

Example 3:
Input: s1 = ""a"", s2 = ""a""
Output: true

Constraints:
`s1.length == s2.length`
`1 <= s1.length <= 30`
`s1` and `s2` consist of lower-case English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as one sorted array.

The number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. You may assume that `nums1` has a size equal to `m + n` such that it has enough space to hold additional elements from `nums2`.


Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
Output: [1]

Constraints:
`nums1.length == m + n`
`nums2.length == n`
`0 <= m, n <= 200`
`1 <= m + n <= 200`
`-109 <= nums1[i], nums2[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The gray code is a binary numeral system where two successive values differ in only one bit.

Given an integer `n` representing the total number of bits in the code, return any sequence of gray code.

A gray code sequence must begin with `0`.


Example 1:
Input: n = 2
Output: [0,1,3,2]
Explanation:
00 - 0
01 - 1
11 - 3
10 - 2
[0,2,3,1] is also a valid gray code sequence.

00 - 0
10 - 2
11 - 3
01 - 1

Example 2:
Input: n = 1
Output: [0,1]

Constraints:
`1 <= n <= 16`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` that may contain duplicates, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.


Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
Input: nums = [0]
Output: [[],[0]]

Constraints:
`1 <= nums.length <= 10`
`-10 <= nums[i] <= 10`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A message containing letters from `A-Z` can be encoded into numbers using the following mapping:
'A' -> ""1""
'B' -> ""2""
...

'Z' -> ""26""
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `""11106""` can be mapped into:
`""AAJF""` with the grouping `(1 1 10 6)`
`""KJF""` with the grouping `(11 10 6)`
Note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'F'` since `""6""` is different from `""06""`.

Given a string `s` containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.


Example 1:
Input: s = ""12""
Output: 2
Explanation: ""12"" could be decoded as ""AB"" (1 2) or ""L"" (12).


Example 2:
Input: s = ""226""
Output: 3
Explanation: ""226"" could be decoded as ""BZ"" (2 26), ""VF"" (22 6), or ""BBF"" (2 2 6).


Example 3:
Input: s = ""0""
Output: 0
Explanation: There is no character that is mapped to a number starting with 0.

The only valid mappings with 0 are 'J' -> ""10"" and 'T' -> ""20"", neither of which start with 0.

Hence, there are no valid ways to decode this since all digits need to be mapped.


Example 4:
Input: s = ""06""
Output: 0
Explanation: ""06"" cannot be mapped to ""F"" because of the leading zero (""6"" is different from ""06"").


Constraints:
`1 <= s.length <= 100`
`s` contains only digits and may contain leading zero(s).",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a singly linked list and two integers `left` and `right` where `left <= right`, reverse the nodes of the list from position `left` to position `right`, and return the reversed list.


Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

Constraints:
The number of nodes in the list is `n`.

`1 <= n <= 500`
`-500 <= Node.val <= 500`
`1 <= left <= right <= n`
Follow up: Could you do it in one pass?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` containing only digits, return all possible valid IP addresses that can be obtained from `s`. You can return them in any order.

A valid IP address consists of exactly four integers, each integer is between `0` and `255`, separated by single dots and cannot have leading zeros. For example, ""0.1.2.201"" and ""192.168.1.1"" are valid IP addresses and ""0.011.255.245"", ""192.168.1.312"" and ""192.168@1.1"" are invalid IP addresses. 

Example 1:
Input: s = ""25525511135""
Output: [""255.255.11.135"",""255.255.111.35""]

Example 2:
Input: s = ""0000""
Output: [""0.0.0.0""]

Example 3:
Input: s = ""1111""
Output: [""1.1.1.1""]

Example 4:
Input: s = ""010010""
Output: [""0.10.0.10"",""0.100.1.0""]

Example 5:
Input: s = ""101023""
Output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]

Constraints:
`0 <= s.length <= 3000`
`s` consists of digits only.",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the inorder traversal of its nodes' values.


Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [2,1]

Example 5:
Input: root = [1,null,2]
Output: [1,2]

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`
Follow up:
Recursive solution is trivial, could you do it iteratively?",0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return all the structurally unique BST's (binary search trees), which has exactly `n` nodes of unique values from `1` to `n`. Return the answer in any order.


Example 1:
Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]

Example 2:
Input: n = 1
Output: [[1]]

Constraints:
`1 <= n <= 8`",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the number of structurally unique BST's (binary search trees) which has exactly `n` nodes of unique values from `1` to `n`.


Example 1:
Input: n = 3
Output: 5

Example 2:
Input: n = 1
Output: 1

Constraints:
`1 <= n <= 19`",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given strings `s1`, `s2`, and `s3`, find whether `s3` is formed by an interleaving of `s1` and `s2`.

An interleaving of two strings `s` and `t` is a configuration where they are divided into non-empty substrings such that:
`s = s1 + s2 + ... + sn`
`t = t1 + t2 + ... + tm`
`|n - m| <= 1`
The interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`
Note: `a + b` is the concatenation of strings `a` and `b`.


Example 1:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac""
Output: true

Example 2:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc""
Output: false

Example 3:
Input: s1 = """", s2 = """", s3 = """"
Output: true

Constraints:
`0 <= s1.length, s2.length <= 100`
`0 <= s3.length <= 200`
`s1`, `s2`, and `s3` consist of lowercase English letters.

Follow up: Could you solve it using only `O(s2.length)` additional memory space?",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.

Follow up: A solution using `O(n)` space is pretty straight forward. Could you devise a constant space solution?

Example 1:
Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.


Example 2:
Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.


Constraints:
The number of nodes in the tree is in the range `[2, 1000]`.

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the roots of two binary trees `p` and `q`, write a function to check if they are the same or not.

Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.


Example 1:
Input: p = [1,2,3], q = [1,2,3]
Output: true

Example 2:
Input: p = [1,2], q = [1,null,2]
Output: false

Example 3:
Input: p = [1,2,1], q = [1,1,2]
Output: false

Constraints:
The number of nodes in both trees is in the range `[0, 100]`.

`-104 <= Node.val <= 104`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, check whether it is a mirror of itself (i.e., symmetric around its center).


Example 1:
Input: root = [1,2,2,3,4,4,3]
Output: true

Example 2:
Input: root = [1,2,2,null,3,null,3]
Output: false

Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`-100 <= Node.val <= 100`
Follow up: Could you solve it both recursively and iteratively?",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the level order traversal of its nodes' values. (i.e., from left to right, level by level).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the zigzag level order traversal of its nodes' values. (i.e., from left to right, then right to left for the next level and alternate between).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-100 <= Node.val <= 100`",0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:
Input: root = [1,null,2]
Output: 2

Example 3:
Input: root = []
Output: 0

Example 4:
Input: root = [0]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-100 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `preorder` and `inorder` where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return the binary tree.


Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]

Constraints:
`1 <= preorder.length <= 3000`
`inorder.length == preorder.length`
`-3000 <= preorder[i], inorder[i] <= 3000`
`preorder` and `inorder` consist of unique values.

Each value of `inorder` also appears in `preorder`.

`preorder` is guaranteed to be the preorder traversal of the tree.

`inorder` is guaranteed to be the inorder traversal of the tree.",1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `inorder` and `postorder` where `inorder` is the inorder traversal of a binary tree and `postorder` is the postorder traversal of the same tree, construct and return the binary tree.


Example 1:
Input: inorder = [9,3,15,20,7], postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: inorder = [-1], postorder = [-1]
Output: [-1]

Constraints:
`1 <= inorder.length <= 3000`
`postorder.length == inorder.length`
`-3000 <= inorder[i], postorder[i] <= 3000`
`inorder` and `postorder` consist of unique values.

Each value of `postorder` also appears in `inorder`.

`inorder` is guaranteed to be the inorder traversal of the tree.

`postorder` is guaranteed to be the postorder traversal of the tree.",1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the bottom-up level order traversal of its nodes' values. (i.e., from left to right, level by level from leaf to root).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]

Example 2:
Input: root = [1]
Output: [[1]]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` where the elements are sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.


Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:
Input: nums = [1,3]
Output: [3,1]
Explanation: [1,3] and [3,1] are both a height-balanced BSTs.


Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in a strictly increasing order.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.


Example 1:
Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.


Example 2:
Input: head = []
Output: []

Example 3:
Input: head = [0]
Output: [0]

Example 4:
Input: head = [1,3]
Output: [3,1]

Constraints:
The number of nodes in `head` is in the range `[0, 2 * 104]`.

`-10^5 <= Node.val <= 10^5`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, determine if it is height-balanced.

For this problem, a height-balanced binary tree is defined as:
a binary tree in which the left and right subtrees of every node differ in height by no more than 1.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
Output: false

Example 3:
Input: root = []
Output: true

Constraints:
The number of nodes in the tree is in the range `[0, 5000]`.

`-104 <= Node.val <= 104`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 2

Example 2:
Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5

Constraints:
The number of nodes in the tree is in the range `[0, 105]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree and an integer `targetSum`, return `true` if the tree has a root-to-leaf path such that adding up all the values along the path equals `targetSum`.

A leaf is a node with no children.


Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
Output: true

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: false

Example 3:
Input: root = [1,2], targetSum = 0
Output: false

Constraints:
The number of nodes in the tree is in the range `[0, 5000]`.

`-1000 <= Node.val <= 1000`
`-1000 <= targetSum <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree and an integer `targetSum`, return all root-to-leaf paths where each path's sum equals `targetSum`.

A leaf is a node with no children.


Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]

Example 2:
Input: root = [1,2,3], targetSum = 5
Output: []

Example 3:
Input: root = [1,2], targetSum = 0
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 5000]`.

`-1000 <= Node.val <= 1000`
`-1000 <= targetSum <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, flatten the tree into a ""linked list"":
The ""linked list"" should use the same `TreeNode` class where the `right` child pointer points to the next node in the list and the `left` child pointer is always `null`.

The ""linked list"" should be in the same order as a pre-order traversal of the binary tree.


Example 1:
Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [0]
Output: [0]

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-100 <= Node.val <= 100`
Follow up: Can you flatten the tree in-place (with `O(1)` extra space)?",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, return the number of distinct subsequences of `s` which equals `t`.

A string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the remaining characters' relative positions. (i.e., `""ACE""` is a subsequence of `""ABCDE""` while `""AEC""` is not).

It is guaranteed the answer fits on a 32-bit signed integer.


Example 1:
Input: s = ""rabbbit"", t = ""rabbit""
Output: 3
Explanation:
As shown below, there are 3 ways you can generate ""rabbit"" from S.

`rabbbit`
`rabbbit`
`rabbbit`

Example 2:
Input: s = ""babgbag"", t = ""bag""
Output: 5
Explanation:
As shown below, there are 5 ways you can generate ""bag"" from S.

`babgbag`
`babgbag`
`babgbag`
`babgbag`
`babgbag`

Constraints:
`1 <= s.length, t.length <= 1000`
`s` and `t` consist of English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:
struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

Follow up:
You may only use constant extra space.

Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.


Example 1:
Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.


Constraints:
The number of nodes in the given tree is less than `4096`.

`-1000 <= node.val <= 1000`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree
struct Node {
  int val;
  Node *left;
  Node *right;
  Node *next;
}
Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to `NULL`.

Initially, all next pointers are set to `NULL`.

Follow up:
You may only use constant extra space.

Recursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.


Example 1:
Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the above binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.


Constraints:
The number of nodes in the given tree is less than `6000`.

`-100 <= node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `numRows`, return the first numRows of Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Example 2:
Input: numRows = 1
Output: [[1]]

Constraints:
`1 <= numRows <= 30`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `rowIndex`, return the `rowIndexth` (0-indexed) row of the Pascal's triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it as shown:

Example 1:
Input: rowIndex = 3
Output: [1,3,3,1]

Example 2:
Input: rowIndex = 0
Output: [1]

Example 3:
Input: rowIndex = 1
Output: [1,1]

Constraints:
`0 <= rowIndex <= 33`
Follow up: Could you optimize your algorithm to use only `O(rowIndex)` extra space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `triangle` array, return the minimum path sum from top to bottom.

For each step, you may move to an adjacent number of the row below. More formally, if you are on index `i` on the current row, you may move to either index `i` or index `i + 1` on the next row.


Example 1:
Input: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).


Example 2:
Input: triangle = [[-10]]
Output: -10

Constraints:
`1 <= triangle.length <= 200`
`triangle[0].length == 1`
`triangle[i].length == triangle[i - 1].length + 1`
`-104 <= triangle[i][j] <= 104`
Follow up: Could you do this using only `O(n)` extra space, where `n` is the total number of rows in the triangle?",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return `0`.


Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.

Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.


Example 2:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transactions are done and the max profit = 0.


Constraints:
`1 <= prices.length <= 105`
`0 <= prices[i] <= 104`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 7
Explanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.

Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.


Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.

Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.


Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e., max profit = 0.


Constraints:
`1 <= prices.length <= 3 * 104`
`0 <= prices[i] <= 104`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete at most two transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.

Then buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.


Example 2:
Input: prices = [1,2,3,4,5]
Output: 4
Explanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.

Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.


Example 3:
Input: prices = [7,6,4,3,1]
Output: 0
Explanation: In this case, no transaction is done, i.e. max profit = 0.


Example 4:
Input: prices = [1]
Output: 0

Constraints:
`1 <= prices.length <= 105`
`0 <= prices[i] <= 105`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the `root` of a binary tree, return the maximum path sum of any path.


Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.


Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.


Constraints:
The number of nodes in the tree is in the range `[1, 3 * 104]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.


Example 1:
Input: s = ""A man, a plan, a canal: Panama""
Output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.


Example 2:
Input: s = ""race a car""
Output: false
Explanation: ""raceacar"" is not a palindrome.


Constraints:
`1 <= s.length <= 2 * 105`
`s` consists only of printable ASCII characters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:
Every adjacent pair of words differs by a single letter.

Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.

`sk == endWord`
Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return all the shortest transformation sequences from `beginWord` to `endWord`, or an empty list if no such sequence exists. Each sequence should be returned as a list of the words `[beginWord, s1, s2, ..., sk]`.


Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
Explanation: There are 2 shortest transformation sequences:
""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> ""cog""
""hit"" -> ""hot"" -> ""lot"" -> ""log"" -> ""cog""

Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: []
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.


Constraints:
`1 <= beginWord.length <= 10`
`endWord.length == beginWord.length`
`1 <= wordList.length <= 5000`
`wordList[i].length == beginWord.length`
`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.

`beginWord != endWord`
All the words in `wordList` are unique.",1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A transformation sequence from word `beginWord` to word `endWord` using a dictionary `wordList` is a sequence of words `beginWord -> s1 -> s2 -> ... -> sk` such that:
Every adjacent pair of words differs by a single letter.

Every `si` for `1 <= i <= k` is in `wordList`. Note that `beginWord` does not need to be in `wordList`.

`sk == endWord`
Given two words, `beginWord` and `endWord`, and a dictionary `wordList`, return the number of words in the shortest transformation sequence from `beginWord` to `endWord`, or `0` if no such sequence exists.


Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: 5
Explanation: One shortest transformation sequence is ""hit"" -> ""hot"" -> ""dot"" -> ""dog"" -> cog"", which is 5 words long.


Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
Output: 0
Explanation: The endWord ""cog"" is not in wordList, therefore there is no valid transformation sequence.


Constraints:
`1 <= beginWord.length <= 10`
`endWord.length == beginWord.length`
`1 <= wordList.length <= 5000`
`wordList[i].length == beginWord.length`
`beginWord`, `endWord`, and `wordList[i]` consist of lowercase English letters.

`beginWord != endWord`
All the words in `wordList` are unique.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an unsorted array of integers `nums`, return the length of the longest consecutive elements sequence.


Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest consecutive elements sequence is `[1, 2, 3, 4]`. Therefore its length is 4.


Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

Constraints:
`0 <= nums.length <= 104`
`-109 <= nums[i] <= 109`
Follow up: Could you implement the `O(n)` solution?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` of a binary tree containing digits from `0` to `9` only.

Each root-to-leaf path in the tree represents a number.

For example, the root-to-leaf path `1 -> 2 -> 3` represents the number `123`.

Return the total sum of all root-to-leaf numbers.

A leaf node is a node with no children.


Example 1:
Input: root = [1,2,3]
Output: 25
Explanation:
The root-to-leaf path `1->2` represents the number `12`.

The root-to-leaf path `1->3` represents the number `13`.

Therefore, sum = 12 + 13 = `25`.


Example 2:
Input: root = [4,9,0,5,1]
Output: 1026
Explanation:
The root-to-leaf path `4->9->5` represents the number 495.

The root-to-leaf path `4->9->1` represents the number 491.

The root-to-leaf path `4->0` represents the number 40.

Therefore, sum = 495 + 491 + 40 = `1026`.


Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`0 <= Node.val <= 9`
The depth of the tree will not exceed `10`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` matrix `board` containing `'X'` and `'O'`, capture all regions surrounded by `'X'`.

A region is captured by flipping all `'O'`s into `'X'`s in that surrounded region.


Example 1:
Input: board = [[""X"",""X"",""X"",""X""],[""X"",""O"",""O"",""X""],[""X"",""X"",""O"",""X""],[""X"",""O"",""X"",""X""]]
Output: [[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""O"",""X"",""X""]]
Explanation: Surrounded regions should not be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.


Example 2:
Input: board = [[""X""]]
Output: [[""X""]]

Constraints:
`m == board.length`
`n == board[i].length`
`1 <= m, n <= 200`
`board[i][j]` is `'X'` or `'O'`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, partition `s` such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of `s`.

A palindrome string is a string that reads the same backward as forward.


Example 1:
Input: s = ""aab""
Output: [[""a"",""a"",""b""],[""aa"",""b""]]

Example 2:
Input: s = ""a""
Output: [[""a""]]

Constraints:
`1 <= s.length <= 16`
`s` contains only lowercase English letters.",0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, partition `s` such that every substring of the partition is a palindrome.

Return the minimum cuts needed for a palindrome partitioning of `s`.


Example 1:
Input: s = ""aab""
Output: 1
Explanation: The palindrome partitioning [""aa"",""b""] could be produced using 1 cut.


Example 2:
Input: s = ""a""
Output: 0

Example 3:
Input: s = ""ab""
Output: 1

Constraints:
`1 <= s.length <= 2000`
`s` consists of lower-case English letters only.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a reference of a node in a connected undirected graph.

Return a deep copy (clone) of the graph.

Each node in the graph contains a val (`int`) and a list (`List[Node]`) of its neighbors.

class Node {
    public int val;
    public List<Node> neighbors;
}
Test case format:
For simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with `val = 1`, the second node with `val = 2`, and so on. The graph is represented in the test case using an adjacency list.

Adjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with `val = 1`. You must return the copy of the given node as a reference to the cloned graph.


Example 1:
Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.

1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).

2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).

3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).

4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).


Example 2:
Input: adjList = [[]]
Output: [[]]
Explanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.


Example 3:
Input: adjList = []
Output: []
Explanation: This an empty graph, it does not have any nodes.


Example 4:
Input: adjList = [[2],[1]]
Output: [[2],[1]]

Constraints:
`1 <= Node.val <= 100`
`Node.val` is unique for each node.

Number of Nodes will not exceed 100.

There is no repeated edges and no self-loops in the graph.

The Graph is connected and all nodes can be visited starting from the given node.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` gas stations along a circular route, where the amount of gas at the `ith` station is `gas[i]`.

You have a car with an unlimited gas tank and it costs `cost[i]` of gas to travel from the `ith` station to its next `(i + 1)th` station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays `gas` and `cost`, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return `-1`. If there exists a solution, it is guaranteed to be unique

Example 1:
Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
Explanation:
Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 4. Your tank = 4 - 1 + 5 = 8
Travel to station 0. Your tank = 8 - 2 + 1 = 7
Travel to station 1. Your tank = 7 - 3 + 2 = 6
Travel to station 2. Your tank = 6 - 4 + 3 = 5
Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.

Therefore, return 3 as the starting index.


Example 2:
Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
Explanation:
You can't start at station 0 or 1, as there is not enough gas to travel to the next station.

Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4
Travel to station 0. Your tank = 4 - 3 + 2 = 3
Travel to station 1. Your tank = 3 - 3 + 3 = 3
You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.

Therefore, you can't travel around the circuit once no matter where you start.


Constraints:
`gas.length == n`
`cost.length == n`
`1 <= n <= 104`
`0 <= gas[i], cost[i] <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` children standing in a line. Each child is assigned a rating value given in the integer array `ratings`.

You are giving candies to these children subjected to the following requirements:
Each child must have at least one candy.

Children with a higher rating get more candies than their neighbors.

Return the minimum number of candies you need to have to distribute the candies to the children.


Example 1:
Input: ratings = [1,0,2]
Output: 5
Explanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.


Example 2:
Input: ratings = [1,2,2]
Output: 4
Explanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.

The third child gets 1 candy because it satisfies the above two conditions.


Constraints:
`n == ratings.length`
`1 <= n <= 2 * 104`
`0 <= ratings[i] <= 2 * 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array of integers `nums`, every element appears twice except for one. Find that single one.

Follow up: Could you implement a solution with a linear runtime complexity and without using extra memory?

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
Input: nums = [1]
Output: 1

Constraints:
`1 <= nums.length <= 3 * 104`
`-3 * 104 <= nums[i] <= 3 * 104`
Each element in the array appears twice except for one element which appears only once.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` where every element appears three times except for one, which appears exactly once. Find the single element and return it.


Example 1:
Input: nums = [2,2,3,2]
Output: 3

Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99

Constraints:
`1 <= nums.length <= 3 * 104`
`-231 <= nums[i] <= 231 - 1`
Each element in `nums` appears exactly three times except for one element which appears once.

Follow up: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A linked list of length `n` is given such that each node contains an additional random pointer, which could point to any node in the list, or `null`.

Construct a deep copy of the list. The deep copy should consist of exactly `n` brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the `next` and `random` pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.

For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x.random --> y`.

Return the head of the copied linked list.

The linked list is represented in the input/output as a list of `n` nodes. Each node is represented as a pair of `[val, random_index]` where:
`val`: an integer representing `Node.val`
`random_index`: the index of the node (range from `0` to `n-1`) that the `random` pointer points to, or `null` if it does not point to any node.

Your code will only be given the `head` of the original linked list.


Example 1:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Example 2:
Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]

Example 3:
Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

Example 4:
Input: head = []
Output: []
Explanation: The given linked list is empty (null pointer), so return null.


Constraints:
`0 <= n <= 1000`
`-10000 <= Node.val <= 10000`
`Node.random` is `null` or is pointing to some node in the linked list.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and a dictionary of strings `wordDict`, return `true` if `s` can be segmented into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.


Example 1:
Input: s = ""leetcode"", wordDict = [""leet"",""code""]
Output: true
Explanation: Return true because ""leetcode"" can be segmented as ""leet code"".


Example 2:
Input: s = ""applepenapple"", wordDict = [""apple"",""pen""]
Output: true
Explanation: Return true because ""applepenapple"" can be segmented as ""apple pen apple"".

Note that you are allowed to reuse a dictionary word.


Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: false

Constraints:
`1 <= s.length <= 300`
`1 <= wordDict.length <= 1000`
`1 <= wordDict[i].length <= 20`
`s` and `wordDict[i]` consist of only lowercase English letters.

All the strings of `wordDict` are unique.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and a dictionary of strings `wordDict`, add spaces in `s` to construct a sentence where each word is a valid dictionary word. Return all such possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.


Example 1:
Input: s = ""catsanddog"", wordDict = [""cat"",""cats"",""and"",""sand"",""dog""]
Output: [""cats and dog"",""cat sand dog""]

Example 2:
Input: s = ""pineapplepenapple"", wordDict = [""apple"",""pen"",""applepen"",""pine"",""pineapple""]
Output: [""pine apple pen apple"",""pineapple pen apple"",""pine applepen apple""]
Explanation: Note that you are allowed to reuse a dictionary word.


Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
Output: []

Constraints:
`1 <= s.length <= 20`
`1 <= wordDict.length <= 1000`
`1 <= wordDict[i].length <= 10`
`s` and `wordDict[i]` consist of only lowercase English letters.

All the strings of `wordDict` are unique.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `head`, the head of a linked list, determine if the linked list has a cycle in it.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.

Return `true` if there is a cycle in the linked list. Otherwise, return `false`.


Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).


Example 2:
Input: head = [1,2], pos = 0
Output: true
Explanation: There is a cycle in the linked list, where the tail connects to the 0th node.


Example 3:
Input: head = [1], pos = -1
Output: false
Explanation: There is no cycle in the linked list.


Constraints:
The number of the nodes in the list is in the range `[0, 104]`.

`-105 <= Node.val <= 105`
`pos` is `-1` or a valid index in the linked-list.

Follow up: Can you solve it using `O(1)` (i.e. constant) memory?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list, return the node where the cycle begins. If there is no cycle, return `null`.

There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the `next` pointer. Internally, `pos` is used to denote the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as a parameter.

Notice that you should not modify the linked list.


Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connects to node index 1
Explanation: There is a cycle in the linked list, where tail connects to the second node.


Example 2:
Input: head = [1,2], pos = 0
Output: tail connects to node index 0
Explanation: There is a cycle in the linked list, where tail connects to the first node.


Example 3:
Input: head = [1], pos = -1
Output: no cycle
Explanation: There is no cycle in the linked list.


Constraints:
The number of the nodes in the list is in the range `[0, 104]`.

`-105 <= Node.val <= 105`
`pos` is `-1` or a valid index in the linked-list.

Follow up: Can you solve it using `O(1)` (i.e. constant) memory?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the head of a singly linked-list. The list can be represented as:
L0 → L1 → ... → Ln - 1 → Ln
Reorder the list to be on the following form:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → ...

You may not modify the values in the list's nodes. Only nodes themselves may be changed.


Example 1:
Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]

Constraints:
The number of nodes in the list is in the range `[1, 5 * 104]`.

`1 <= Node.val <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the preorder traversal of its nodes' values.


Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]

Example 5:
Input: root = [1,null,2]
Output: [1,2]

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`
Follow up: Recursive solution is trivial, could you do it iteratively?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the postorder traversal of its nodes' values.


Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [2,1]

Example 5:
Input: root = [1,null,2]
Output: [2,1]

Constraints:
The number of the nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`
Follow up:
Recursive solution is trivial, could you do it iteratively?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.

Implement the `LRUCache` class:
`LRUCache(int capacity)` Initialize the LRU cache with positive size `capacity`.

`int get(int key)` Return the value of the `key` if the key exists, otherwise return `-1`.

`void put(int key, int value)` Update the value of the `key` if the `key` exists. Otherwise, add the `key-value` pair to the cache. If the number of keys exceeds the `capacity` from this operation, evict the least recently used key.

Follow up:
Could you do `get` and `put` in `O(1)` time complexity?

Example 1:
Input
[""LRUCache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""put"", ""get"", ""get"", ""get""]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, null, -1, 3, 4]
Explanation
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1);    // return 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2);    // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1);    // return -1 (not found)
lRUCache.get(3);    // return 3
lRUCache.get(4);    // return 4

Constraints:
`1 <= capacity <= 3000`
`0 <= key <= 3000`
`0 <= value <= 104`
At most `3 * 104` calls will be made to `get` and `put`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a singly linked list, sort the list using insertion sort, and return the sorted list's head.

The steps of the insertion sort algorithm:
Insertion sort iterates, consuming one input element each repetition and growing a sorted output list.

At each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list and inserts it there.

It repeats until no input elements remain.

The following is a graphical example of the insertion sort algorithm. The partially sorted list (black) initially contains only the first element in the list. One element (red) is removed from the input data and inserted in-place into the sorted list with each iteration.


Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Constraints:
The number of nodes in the list is in the range `[1, 5000]`.

`-5000 <= Node.val <= 5000`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a linked list, return the list after sorting it in ascending order.

Follow up: Can you sort the linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is in the range `[0, 5 * 104]`.

`-105 <= Node.val <= 105`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return the maximum number of points that lie on the same straight line.


Example 1:
Input: points = [[1,1],[2,2],[3,3]]
Output: 3

Example 2:
Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4

Constraints:
`1 <= points.length <= 300`
`points[i].length == 2`
`-104 <= xi, yi <= 104`
All the `points` are unique.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Evaluate the value of an arithmetic expression in Reverse Polish Notation.

Valid operators are `+`, `-`, `*`, and `/`. Each operand may be an integer or another expression.

Note that division between two integers should truncate toward zero.

It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.


Example 1:
Input: tokens = [""2"",""1"",""+"",""3"",""*""]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: tokens = [""4"",""13"",""5"",""/"",""+""]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:
Input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"",""5"",""+""]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Constraints:
`1 <= tokens.length <= 104`
`tokens[i]` is either an operator: `""+""`, `""-""`, `""*""`, or `""/""`, or an integer in the range `[-200, 200]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an input string `s`, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in `s` will be separated by at least one space.

Return a string of the words in reverse order concatenated by a single space.

Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.


Example 1:
Input: s = ""the sky is blue""
Output: ""blue is sky the""

Example 2:
Input: s = ""  hello world  ""
Output: ""world hello""
Explanation: Your reversed string should not contain leading or trailing spaces.


Example 3:
Input: s = ""a good   example""
Output: ""example good a""
Explanation: You need to reduce multiple spaces between two words to a single space in the reversed string.


Example 4:
Input: s = ""  Bob    Loves  Alice   ""
Output: ""Alice Loves Bob""

Example 5:
Input: s = ""Alice does not even like bob""
Output: ""bob like even not does Alice""

Constraints:
`1 <= s.length <= 104`
`s` contains English letters (upper-case and lower-case), digits, and spaces `' '`.

There is at least one word in `s`.

Follow up: Could you solve it in-place with `O(1)` extra space?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, find a contiguous non-empty subarray within the array that has the largest product, and return the product.

It is guaranteed that the answer will fit in a 32-bit integer.

A subarray is a contiguous subsequence of the array.


Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.


Example 2:
Input: nums = [-2,0,-1]
Output: 0
Explanation: The result cannot be 2, because [-2,-1] is not a subarray.


Constraints:
`1 <= nums.length <= 2 * 104`
`-10 <= nums[i] <= 10`
The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,2,4,5,6,7]` might become:
`[4,5,6,7,0,1,2]` if it was rotated `4` times.

`[0,1,2,4,5,6,7]` if it was rotated `7` times.

Notice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` of unique elements, return the minimum element of this array.


Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array was [1,2,3,4,5] rotated 3 times.


Example 2:
Input: nums = [4,5,6,7,0,1,2]
Output: 0
Explanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.


Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array was [11,13,15,17] and it was rotated 4 times. 

Constraints:
`n == nums.length`
`1 <= n <= 5000`
`-5000 <= nums[i] <= 5000`
All the integers of `nums` are unique.

`nums` is sorted and rotated between `1` and `n` times.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose an array of length `n` sorted in ascending order is rotated between `1` and `n` times. For example, the array `nums = [0,1,4,4,5,6,7]` might become:
`[4,5,6,7,0,1,4]` if it was rotated `4` times.

`[0,1,4,4,5,6,7]` if it was rotated `7` times.

Notice that rotating an array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a[0], a[1], a[2], ..., a[n-2]]`.

Given the sorted rotated array `nums` that may contain duplicates, return the minimum element of this array.


Example 1:
Input: nums = [1,3,5]
Output: 1

Example 2:
Input: nums = [2,2,2,0,1]
Output: 0

Constraints:
`n == nums.length`
`1 <= n <= 5000`
`-5000 <= nums[i] <= 5000`
`nums` is sorted and rotated between `1` and `n` times.

Follow up: This is the same as Find Minimum in Rotated Sorted Array but with duplicates. Would allow duplicates affect the run-time complexity? How and why?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

Implement the `MinStack` class:
`MinStack()` initializes the stack object.

`void push(val)` pushes the element `val` onto the stack.

`void pop()` removes the element on the top of the stack.

`int top()` gets the top element of the stack.

`int getMin()` retrieves the minimum element in the stack.


Example 1:
Input
[""MinStack"",""push"",""push"",""push"",""getMin"",""pop"",""top"",""getMin""]
[[],[-2],[0],[-3],[],[],[],[]]
Output
[null,null,null,null,-3,null,0,-2]
Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2

Constraints:
`-231 <= val <= 231 - 1`
Methods `pop`, `top` and `getMin` operations will always be called on non-empty stacks.

At most `3 * 104` calls will be made to `push`, `pop`, `top`, and `getMin`.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, turn the tree upside down and return the new root.

You can turn a binary tree upside down with the following steps:
The original left child becomes the new root.

The original root becomes the new right child.

The original right child becomes the new left child.

The mentioned steps are done level by level, it is guaranteed that every node in the given tree has either 0 or 2 children.


Example 1:
Input: root = [1,2,3,4,5]
Output: [4,5,2,null,null,3,1]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Constraints:
The number of nodes in the tree will be in the range `[0, 10]`.

`1 <= Node.val <= 10`
`Every node has either 0 or 2 children.`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `file` and assume that you can only read the file using a given method `read4`, implement a method to read `n` characters.

Method read4: 
The API `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`.

The return value is the number of actual characters read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

Definition of read4:
    Parameter:  char[] buf4
    Returns:    int
buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].

Below is a high-level example of how `read4` works:
File file(""abcde`""); // File is ""`abcde`"", initially file pointer (fp) points to 'a'
char[] buf4 = new char[4]; // Create buffer with enough space to store characters
read4(buf4); // read4 returns 4. Now buf4 = ""abcd"", fp points to 'e'
read4(buf4); // read4 returns 1. Now buf4 = ""e"", fp points to end of file
read4(buf4); // read4 returns 0. Now buf4 = """", fp points to end of file`
Method read:
By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

Definition of read: 
    Parameters:	char[] buf, int n
    Returns:	int
buf[] is a destination, not a source. You will need to write the results to buf[].

Note:
Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.

The `read` function will only be called once for each test case.

You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.


Example 1:
Input: file = ""abc"", n = 4
Output: 3
Explanation: After calling your read method, buf should contain ""abc"". We read a total of 3 characters from the file, so return 3.

Note that ""abc"" is the file's content, not buf. buf is the destination buffer that you will have to write the results to.


Example 2:
Input: file = ""abcde"", n = 5
Output: 5
Explanation: After calling your read method, buf should contain ""abcde"". We read a total of 5 characters from the file, so return 5.


Example 3:
Input: file = ""abcdABCD1234"", n = 12
Output: 12
Explanation: After calling your read method, buf should contain ""abcdABCD1234"". We read a total of 12 characters from the file, so return 12.


Example 4:
Input: file = ""leetcode"", n = 5
Output: 5
Explanation: After calling your read method, buf should contain ""leetc"". We read a total of 5 characters from the file, so return 5.


Constraints:
`1 <= file.length <= 500`
`file` consist of English letters and digits.

`1 <= n <= 1000`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `file` and assume that you can only read the file using a given method `read4`, implement a method `read` to read `n` characters. Your method `read` may be called multiple times.

Method read4: 
The API `read4` reads four consecutive characters from `file`, then writes those characters into the buffer array `buf4`.

The return value is the number of actual characters read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

Definition of read4:
    Parameter:  char[] buf4
    Returns:    int
buf4[] is a destination, not a source. The results from read4 will be copied to buf4[].

Below is a high-level example of how `read4` works:
File file(""abcde`""); // File is ""`abcde`"", initially file pointer (fp) points to 'a'
char[] buf4 = new char[4]; // Create buffer with enough space to store characters
read4(buf4); // read4 returns 4. Now buf4 = ""abcd"", fp points to 'e'
read4(buf4); // read4 returns 1. Now buf4 = ""e"", fp points to end of file
read4(buf4); // read4 returns 0. Now buf4 = """", fp points to end of file`
Method read:
By using the `read4` method, implement the method read that reads `n` characters from `file` and store it in the buffer array `buf`. Consider that you cannot manipulate `file` directly.

The return value is the number of actual characters read.

Definition of read: 
    Parameters:	char[] buf, int n
    Returns:	int
buf[] is a destination, not a source. You will need to write the results to buf[].

Note:
Consider that you cannot manipulate the file directly. The file is only accessible for `read4` but not for `read`.

The read function may be called multiple times.

Please remember to RESET your class variables declared in Solution, as static/class variables are persisted across multiple test cases. Please see here for more details.

You may assume the destination buffer array, `buf`, is guaranteed to have enough space for storing `n` characters.

It is guaranteed that in a given test case the same buffer `buf` is called by `read`.


Example 1:
Input: file = ""abc"", queries = [1,2,1]
Output: [1,2,0]
Explanation: The test case represents the following scenario:
File file(""abc"");
Solution sol;
sol.read(buf, 1); // After calling your read method, buf should contain ""a"". We read a total of 1 character from the file, so return 1.

sol.read(buf, 2); // Now buf should contain ""bc"". We read a total of 2 characters from the file, so return 2.

sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.

Assume buf is allocated and guaranteed to have enough space for storing all characters from the file.


Example 2:
Input: file = ""abc"", queries = [4,1]
Output: [3,0]
Explanation: The test case represents the following scenario:
File file(""abc"");
Solution sol;
sol.read(buf, 4); // After calling your read method, buf should contain ""abc"". We read a total of 3 characters from the file, so return 3.

sol.read(buf, 1); // We have reached the end of file, no more characters can be read. So return 0.


Constraints:
`1 <= file.length <= 500`
`file` consist of English letters and digits.

`1 <= queries.length <= 10`
`1 <= queries[i] <= 500`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the length of the longest substring that contains at most two distinct characters.


Example 1:
Input: s = ""eceba""
Output: 3
Explanation: The substring is ""ece"" which its length is 3.


Example 2:
Input: s = ""ccaabbb""
Output: 5
Explanation: The substring is ""aabbb"" which its length is 5.


Constraints:
`1 <= s.length <= 104`
`s` consists of English letters.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the heads of two singly linked-lists `headA` and `headB`, return the node at which the two lists intersect. If the two linked lists have no intersection at all, return `null`.

For example, the following two linked lists begin to intersect at node `c1`:
It is guaranteed that there are no cycles anywhere in the entire linked structure.

Note that the linked lists must retain their original structure after the function returns.


Example 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersected at '8'
Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect).

From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.


Example 2:
Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersected at '2'
Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect).

From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.


Example 3:
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: No intersection
Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.

Explanation: The two lists do not intersect, so return null.


Constraints:
The number of nodes of `listA` is in the `m`.

The number of nodes of `listB` is in the `n`.

`0 <= m, n <= 3 * 104`
`1 <= Node.val <= 105`
`0 <= skipA <= m`
`0 <= skipB <= n`
`intersectVal` is `0` if `listA` and `listB` do not intersect.

`intersectVal == listA[skipA + 1] == listB[skipB + 1]` if `listA` and `listB` intersect.

Follow up: Could you write a solution that runs in `O(n)` time and use only `O(1)` memory?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, return `true` if they are both one edit distance apart, otherwise return `false`.

A string `s` is said to be one distance apart from a string `t` if you can:
Insert exactly one character into `s` to get `t`.

Delete exactly one character from `s` to get `t`.

Replace exactly one character of `s` with a different character to get `t`.


Example 1:
Input: s = ""ab"", t = ""acb""
Output: true
Explanation: We can insert 'c' into s to get t.


Example 2:
Input: s = """", t = """"
Output: false
Explanation: We cannot get t from s by only one step.


Example 3:
Input: s = ""a"", t = """"
Output: true

Example 4:
Input: s = """", t = ""A""
Output: true

Constraints:
`0 <= s.length <= 104`
`0 <= t.length <= 104`
`s` and `t` consist of lower-case letters, upper-case letters and/or digits.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A peak element is an element that is strictly greater than its neighbors.

Given an integer array `nums`, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that `nums[-1] = nums[n] = -∞`.


Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return the index number 2.


Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.


Constraints:
`1 <= nums.length <= 1000`
`-231 <= nums[i] <= 231 - 1`
`nums[i] != nums[i + 1]` for all valid `i`.

Follow up: Could you implement a solution with logarithmic complexity?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an inclusive range `[lower, upper]` and a sorted unique integer array `nums`, where all elements are in the inclusive range.

A number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`.

Return the smallest sorted list of ranges that cover every missing number exactly. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.

Each range `[a,b]` in the list should be output as:
`""a->b""` if `a != b`
`""a""` if `a == b`

Example 1:
Input: nums = [0,1,3,50,75], lower = 0, upper = 99
Output: [""2"",""4->49"",""51->74"",""76->99""]
Explanation: The ranges are:
[2,2] --> ""2""
[4,49] --> ""4->49""
[51,74] --> ""51->74""
[76,99] --> ""76->99""

Example 2:
Input: nums = [], lower = 1, upper = 1
Output: [""1""]
Explanation: The only missing range is [1,1], which becomes ""1"".


Example 3:
Input: nums = [], lower = -3, upper = -1
Output: [""-3->-1""]
Explanation: The only missing range is [-3,-1], which becomes ""-3->-1"".


Example 4:
Input: nums = [-1], lower = -1, upper = -1
Output: []
Explanation: There are no missing ranges since there are no missing numbers.


Example 5:
Input: nums = [-1], lower = -2, upper = -1
Output: [""-2""]

Constraints:
`-109 <= lower <= upper <= 109`
`0 <= nums.length <= 100`
`lower <= nums[i] <= upper`
All the values of `nums` are unique.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return `0`.


Example 1:
Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.


Example 2:
Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.


Constraints:
`1 <= nums.length <= 104`
`0 <= nums[i] <= 109`
Follow up: Could you solve it in linear time/space?",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two version numbers, `version1` and `version2`, compare them.

Version numbers consist of one or more revisions joined by a dot `'.'`. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions `1` and `001` are considered equal. If a version number does not specify a revision at an index, then treat the revision as `0`. For example, version `1.0` is less than version `1.1` because their revision 0s are the same, but their revision 1s are `0` and `1` respectively, and `0 < 1`.

Return the following:
If `version1 < version2`, return `-1`.

If `version1 > version2`, return `1`.

Otherwise, return `0`.


Example 1:
Input: version1 = ""1.01"", version2 = ""1.001""
Output: 0
Explanation: Ignoring leading zeroes, both ""01"" and ""001"" represent the same integer ""1"".


Example 2:
Input: version1 = ""1.0"", version2 = ""1.0.0""
Output: 0
Explanation: version1 does not specify revision 2, which means it is treated as ""0"".


Example 3:
Input: version1 = ""0.1"", version2 = ""1.1""
Output: -1
Explanation: version1's revision 0 is ""0"", while version2's revision 0 is ""1"". 0 < 1, so version1 < version2.


Example 4:
Input: version1 = ""1.0.1"", version2 = ""1""
Output: 1

Example 5:
Input: version1 = ""7.5.2.4"", version2 = ""7.5.3""
Output: -1

Constraints:
`1 <= version1.length, version2.length <= 500`
`version1` and `version2` only contain digits and `'.'`.

`version1` and `version2` are valid version numbers.

All the given revisions in `version1` and `version2` can be stored in a 32-bit integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers representing the `numerator` and `denominator` of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

If multiple answers are possible, return any of them.

It is guaranteed that the length of the answer string is less than `104` for all the given inputs.


Example 1:
Input: numerator = 1, denominator = 2
Output: ""0.5""

Example 2:
Input: numerator = 2, denominator = 1
Output: ""2""

Example 3:
Input: numerator = 2, denominator = 3
Output: ""0.(6)""

Example 4:
Input: numerator = 4, denominator = 333
Output: ""0.(012)""

Example 5:
Input: numerator = 1, denominator = 5
Output: ""0.2""

Constraints:
`-231 <= numerator, denominator <= 231 - 1`
`denominator != 0`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `numbers` that is already sorted in ascending order, find two numbers such that they add up to a specific `target` number.

Return the indices of the two numbers (1-indexed) as an integer array `answer` of size `2`, where `1 <= answer[0] < answer[1] <= numbers.length`.

You may assume that each input would have exactly one solution and you may not use the same element twice.


Example 1:
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.


Example 2:
Input: numbers = [2,3,4], target = 6
Output: [1,3]

Example 3:
Input: numbers = [-1,0], target = -1
Output: [1,2]

Constraints:
`2 <= numbers.length <= 3 * 104`
`-1000 <= numbers[i] <= 1000`
`numbers` is sorted in increasing order.

`-1000 <= target <= 1000`
Only one valid answer exists.",1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `columnNumber`, return its corresponding column title as it appears in an Excel sheet.

For example:
A -> 1
B -> 2
C -> 3
...

Z -> 26
AA -> 27
AB -> 28 
...


Example 1:
Input: columnNumber = 1
Output: ""A""

Example 2:
Input: columnNumber = 28
Output: ""AB""

Example 3:
Input: columnNumber = 701
Output: ""ZY""

Example 4:
Input: columnNumber = 2147483647
Output: ""FXSHRXW""

Constraints:
`1 <= columnNumber <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of size `n`, return the majority element.

The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.


Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

Constraints:
`n == nums.length`
`1 <= n <= 5 * 104`
`-231 <= nums[i] <= 231 - 1`
Follow-up: Could you solve the problem in linear time and in `O(1)` space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.

Implement the `TwoSum` class:
`TwoSum()` Initializes the `TwoSum` object, with an empty array initially.

`void add(int number)` Adds `number` to the data structure.

`boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.


Example 1:
Input
[""TwoSum"", ""add"", ""add"", ""add"", ""find"", ""find""]
[[], [1], [3], [5], [4], [7]]
Output
[null, null, null, null, true, false]
Explanation
TwoSum twoSum = new TwoSum();
twoSum.add(1);   // [] --> [1]
twoSum.add(3);   // [1] --> [1,3]
twoSum.add(5);   // [1,3] --> [1,3,5]
twoSum.find(4);  // 1 + 3 = 4, return true
twoSum.find(7);  // No two integers sum up to 7, return false

Constraints:
`-105 <= number <= 105`
`-231 <= value <= 231 - 1`
At most `5 * 104` calls will be made to `add` and `find`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `columnTitle` that represents the column title as appear in an Excel sheet, return its corresponding column number.

For example:
A -> 1
B -> 2
C -> 3
...

Z -> 26
AA -> 27
AB -> 28 
...


Example 1:
Input: columnTitle = ""A""
Output: 1

Example 2:
Input: columnTitle = ""AB""
Output: 28

Example 3:
Input: columnTitle = ""ZY""
Output: 701

Example 4:
Input: columnTitle = ""FXSHRXW""
Output: 2147483647

Constraints:
`1 <= columnTitle.length <= 7`
`columnTitle` consists only of uppercase English letters.

`columnTitle` is in the range `[""A"", ""FXSHRXW""]`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the number of trailing zeroes in `n!`.

Follow up: Could you write a solution that works in logarithmic time complexity?

Example 1:
Input: n = 3
Output: 0
Explanation: 3! = 6, no trailing zero.


Example 2:
Input: n = 5
Output: 1
Explanation: 5! = 120, one trailing zero.


Example 3:
Input: n = 0
Output: 0

Constraints:
`0 <= n <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):
`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.

`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.

`int next()` Moves the pointer to the right, then returns the number at the pointer.

Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.

You may assume that `next()` calls will always be valid. That is, there will be at least a next number in the in-order traversal when `next()` is called.


Example 1:
Input
[""BSTIterator"", ""next"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
Output
[null, 3, 7, true, 9, true, 15, true, 20, false]
Explanation
BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next();    // return 3
bSTIterator.next();    // return 7
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 9
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 15
bSTIterator.hasNext(); // return True
bSTIterator.next();    // return 20
bSTIterator.hasNext(); // return False

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`0 <= Node.val <= 106`
At most `105` calls will be made to `hasNext`, and `next`.

Follow up:
Could you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The demons had captured the princess and imprisoned her in the bottom-right corner of a `dungeon`. The `dungeon` consists of `m x n` rooms laid out in a 2D grid. Our valiant knight was initially positioned in the top-left room and must fight his way through `dungeon` to rescue the princess.

The knight has an initial health point represented by a positive integer. If at any point his health point drops to `0` or below, he dies immediately.

Some of the rooms are guarded by demons (represented by negative integers), so the knight loses health upon entering these rooms; other rooms are either empty (represented as 0) or contain magic orbs that increase the knight's health (represented by positive integers).

To reach the princess as quickly as possible, the knight decides to move only rightward or downward in each step.

Return the knight's minimum initial health so that he can rescue the princess.

Note that any room can contain threats or power-ups, even the first room the knight enters and the bottom-right room where the princess is imprisoned.


Example 1:
Input: dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
Output: 7
Explanation: The initial health of the knight must be at least 7 if he follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN.


Example 2:
Input: dungeon = [[0]]
Output: 1

Constraints:
`m == dungeon.length`
`n == dungeon[i].length`
`1 <= m, n <= 200`
`-1000 <= dungeon[i][j] <= 1000`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of non-negative integers `nums`, arrange them such that they form the largest number.

Note: The result may be very large, so you need to return a string instead of an integer.


Example 1:
Input: nums = [10,2]
Output: ""210""

Example 2:
Input: nums = [3,30,34,5,9]
Output: ""9534330""

Example 3:
Input: nums = [1]
Output: ""1""

Example 4:
Input: nums = [10]
Output: ""10""

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a character array `s`, reverse the order of the words.

A word is defined as a sequence of non-space characters. The words in `s` will be separated by a single space.


Example 1:
Input: s = [""t"",""h"",""e"","" "",""s"",""k"",""y"","" "",""i"",""s"","" "",""b"",""l"",""u"",""e""]
Output: [""b"",""l"",""u"",""e"","" "",""i"",""s"","" "",""s"",""k"",""y"","" "",""t"",""h"",""e""]

Example 2:
Input: s = [""a""]
Output: [""a""]

Constraints:
`1 <= s.length <= 105`
`s[i]` is an English letter (uppercase or lowercase), digit, or space `' '`.

There is at least one word in `s`.

`s` does not contain leading or trailing spaces.

All the words in `s` are guaranteed to be separated by a single space.

Follow up: Could you do it in-place without allocating extra space?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The DNA sequence is composed of a series of nucleotides abbreviated as `'A'`, `'C'`, `'G'`, and `'T'`.

For example, `""ACGAATTCCG""` is a DNA sequence.

When studying DNA, it is useful to identify repeated sequences within the DNA.

Given a string `s` that represents a DNA sequence, return all the `10`-letter-long sequences (substrings) that occur more than once in a DNA molecule. You may return the answer in any order.


Example 1:
Input: s = ""AAAAACCCCCAAAAACCCCCCAAAAAGGGTTT""
Output: [""AAAAACCCCC"",""CCCCCAAAAA""]

Example 2:
Input: s = ""AAAAAAAAAAAAA""
Output: [""AAAAAAAAAA""]

Constraints:
`1 <= s.length <= 105`
`s[i]` is either `'A'`, `'C'`, `'G'`, or `'T'`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `k`.

Find the maximum profit you can achieve. You may complete at most `k` transactions.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: k = 2, prices = [2,4,1]
Output: 2
Explanation: Buy on day 1 (price = 2) and sell on day 2 (price = 4), profit = 4-2 = 2.


Example 2:
Input: k = 2, prices = [3,2,6,5,0,3]
Output: 7
Explanation: Buy on day 2 (price = 2) and sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.


Constraints:
`0 <= k <= 100`
`0 <= prices.length <= 1000`
`0 <= prices[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array, rotate the array to the right by `k` steps, where `k` is non-negative.


Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
Explanation:
rotate 1 steps to the right: [7,1,2,3,4,5,6]
rotate 2 steps to the right: [6,7,1,2,3,4,5]
rotate 3 steps to the right: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
Explanation: 
rotate 1 steps to the right: [99,-1,-100,3]
rotate 2 steps to the right: [3,99,-1,-100]

Constraints:
`1 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`0 <= k <= 105`
Follow up:
Try to come up with as many solutions as you can. There are at least three different ways to solve this problem.

Could you do it in-place with `O(1)` extra space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Reverse bits of a given 32 bits unsigned integer.

Note:
Note that in some languages such as Java, there is no unsigned integer type. In this case, both input and output will be given as a signed integer type. They should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.


In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 2 above, the input represents the signed integer `-3` and the output represents the signed integer `-1073741825`.

Follow up:
If this function is called many times, how would you optimize it?

Example 1:
Input: n = 00000010100101000001111010011100
Output:    964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192 which its binary representation is 00111001011110000010100101000000.


Example 2:
Input: n = 11111111111111111111111111111101
Output:   3221225471 (10111111111111111111111111111111)
Explanation: The input binary string 11111111111111111111111111111101 represents the unsigned integer 4294967293, so return 3221225471 which its binary representation is 10111111111111111111111111111111.


Constraints:
The input must be a binary string of length `32`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function that takes an unsigned integer and returns the number of '1' bits it has (also known as the Hamming weight).

Note:
Note that in some languages, such as Java, there is no unsigned integer type. In this case, the input will be given as a signed integer type. It should not affect your implementation, as the integer's internal binary representation is the same, whether it is signed or unsigned.


In Java, the compiler represents the signed integers using 2's complement notation. Therefore, in Example 3, the input represents the signed integer. `-3`.


Example 1:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has a total of three '1' bits.


Example 2:
Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one '1' bit.


Example 3:
Input: n = 11111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111111101 has a total of thirty one '1' bits.


Constraints:
The input must be a binary string of length `32`.

Follow up: If this function is called many times, how would you optimize it?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).

Total amount you can rob = 1 + 3 = 4.


Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9) and rob house 5 (money = 1).

Total amount you can rob = 2 + 9 + 1 = 12.


Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 400`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, imagine yourself standing on the right side of it, return the values of the nodes you can see ordered from top to bottom.


Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2:
Input: root = [1,null,3]
Output: [1,3]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` 2D binary grid `grid` which represents a map of `'1'`s (land) and `'0'`s (water), return the number of islands.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.


Example 1:
Input: grid = [
  [""1"",""1"",""1"",""1"",""0""],
  [""1"",""1"",""0"",""1"",""0""],
  [""1"",""1"",""0"",""0"",""0""],
  [""0"",""0"",""0"",""0"",""0""]
]
Output: 1

Example 2:
Input: grid = [
  [""1"",""1"",""0"",""0"",""0""],
  [""1"",""1"",""0"",""0"",""0""],
  [""0"",""0"",""1"",""0"",""0""],
  [""0"",""0"",""0"",""1"",""1""]
]
Output: 3

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 300`
`grid[i][j]` is `'0'` or `'1'`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `left` and `right` that represent the range `[left, right]`, return the bitwise AND of all numbers in this range, inclusive.


Example 1:
Input: left = 5, right = 7
Output: 4

Example 2:
Input: left = 0, right = 0
Output: 0

Example 3:
Input: left = 1, right = 2147483647
Output: 0

Constraints:
`0 <= left <= right <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an algorithm to determine if a number `n` is happy.

A happy number is a number defined by the following process:
Starting with any positive integer, replace the number by the sum of the squares of its digits.

Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.

Those numbers for which this process ends in 1 are happy.

Return `true` if `n` is a happy number, and `false` if not.


Example 1:
Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:
Input: n = 2
Output: false

Constraints:
`1 <= n <= 231 - 1`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a linked list and an integer `val`, remove all the nodes of the linked list that has `Node.val == val`, and return the new head.


Example 1:
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Example 2:
Input: head = [], val = 1
Output: []

Example 3:
Input: head = [7,7,7,7], val = 7
Output: []

Constraints:
The number of nodes in the list is in the range `[0, 104]`.

`1 <= Node.val <= 50`
`0 <= k <= 50`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Count the number of prime numbers less than a non-negative number, `n`.


Example 1:
Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10, they are 2, 3, 5, 7.


Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 0

Constraints:
`0 <= n <= 5 * 106`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, determine if they are isomorphic.

Two strings `s` and `t` are isomorphic if the characters in `s` can be replaced to get `t`.

All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.


Example 1:
Input: s = ""egg"", t = ""add""
Output: true

Example 2:
Input: s = ""foo"", t = ""bar""
Output: false

Example 3:
Input: s = ""paper"", t = ""title""
Output: true

Constraints:
`1 <= s.length <= 5 * 104`
`t.length == s.length`
`s` and `t` consist of any valid ascii character.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a singly linked list, reverse the list, and return the reversed list.


Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
Output: [2,1]

Example 3:
Input: head = []
Output: []

Constraints:
The number of nodes in the list is the range `[0, 5000]`.

`-5000 <= Node.val <= 5000`
Follow up: A linked list can be reversed either iteratively or recursively. Could you implement both?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are a total of `numCourses` courses you have to take, labeled from `0` to `numCourses - 1`. You are given an array `prerequisites` where `prerequisites[i] = [ai, bi]` indicates that you must take course `bi` first if you want to take course `ai`.

For example, the pair `[0, 1]`, indicates that to take course `0` you have to first take course `1`.

Return `true` if you can finish all courses. Otherwise, return `false`.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.


Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.


Constraints:
`1 <= numCourses <= 105`
`0 <= prerequisites.length <= 5000`
`prerequisites[i].length == 2`
`0 <= ai, bi < numCourses`
All the pairs prerequisites[i] are unique.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"A trie (pronounced as ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.

Implement the Trie class:
`Trie()` Initializes the trie object.

`void insert(String word)` Inserts the string `word` into the trie.

`boolean search(String word)` Returns `true` if the string `word` is in the trie (i.e., was inserted before), and `false` otherwise.

`boolean startsWith(String prefix)` Returns `true` if there is a previously inserted string `word` that has the prefix `prefix`, and `false` otherwise.


Example 1:
Input
[""Trie"", ""insert"", ""search"", ""search"", ""startsWith"", ""insert"", ""search""]
[[], [""apple""], [""apple""], [""app""], [""app""], [""app""], [""app""]]
Output
[null, null, true, false, true, null, true]
Explanation
Trie trie = new Trie();
trie.insert(""apple"");
trie.search(""apple"");   // return True
trie.search(""app"");     // return False
trie.startsWith(""app""); // return True
trie.insert(""app"");
trie.search(""app"");     // return True

Constraints:
`1 <= word.length, prefix.length <= 2000`
`word` and `prefix` consist only of lowercase English letters.

At most `3 * 104` calls in total will be made to `insert`, `search`, and `startsWith`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers `nums` and a positive integer `target`, return the minimal length of a contiguous subarray `[numsl, numsl+1, ..., numsr-1, numsr]` of which the sum is greater than or equal to `target`. If there is no such subarray, return `0` instead.


Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has the minimal length under the problem constraint.


Example 2:
Input: target = 4, nums = [1,4,4]
Output: 1

Example 3:
Input: target = 11, nums = [1,1,1,1,1,1,1,1]
Output: 0

Constraints:
`1 <= target <= 109`
`1 <= nums.length <= 105`
`1 <= nums[i] <= 105`
Follow up: If you have figured out the `O(n)` solution, try coding another solution of which the time complexity is `O(n log(n))`.",1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are a total of `n` courses you have to take labelled from `0` to `n - 1`.

Some courses may have `prerequisites`, for example, if `prerequisites[i] = [ai, bi]` this means you must take the course `bi` before the course `ai`.

Given the total number of courses `numCourses` and a list of the `prerequisite` pairs, return the ordering of courses you should take to finish all courses.

If there are many valid answers, return any of them. If it is impossible to finish all courses, return an empty array.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
Output: [0,1]
Explanation: There are a total of 2 courses to take. To take course 1 you should have finished course 0. So the correct course order is [0,1].


Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Explanation: There are a total of 4 courses to take. To take course 3 you should have finished both courses 1 and 2. Both courses 1 and 2 should be taken after you finished course 0.

So one correct course order is [0,1,2,3]. Another correct ordering is [0,2,1,3].


Example 3:
Input: numCourses = 1, prerequisites = []
Output: [0]

Constraints:
`1 <= numCourses <= 2000`
`0 <= prerequisites.length <= numCourses * (numCourses - 1)`
`prerequisites[i].length == 2`
`0 <= ai, bi < numCourses`
`ai != bi`
All the pairs `[ai, bi]` are distinct.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the `WordDictionary` class:
`WordDictionary()` Initializes the object.

`void addWord(word)` Adds `word` to the data structure, it can be matched later.

`bool search(word)` Returns `true` if there is any string in the data structure that matches `word` or `false` otherwise. `word` may contain dots `'.'` where dots can be matched with any letter.


Example:
Input
[""WordDictionary"",""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""]
[[],[""bad""],[""dad""],[""mad""],[""pad""],[""bad""],["".ad""],[""b..""]]
Output
[null,null,null,null,false,true,true,true]
Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord(""bad"");
wordDictionary.addWord(""dad"");
wordDictionary.addWord(""mad"");
wordDictionary.search(""pad""); // return False
wordDictionary.search(""bad""); // return True
wordDictionary.search("".ad""); // return True
wordDictionary.search(""b..""); // return True

Constraints:
`1 <= word.length <= 500`
`word` in `addWord` consists lower-case English letters.

`word` in `search` consist of  `'.'` or lower-case English letters.

At most `50000` calls will be made to `addWord` and `search`.",0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` `board` of characters and a list of strings `words`, return all words on the board.

Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.


Example 1:
Input: board = [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"",""k"",""r""],[""i"",""f"",""l"",""v""]], words = [""oath"",""pea"",""eat"",""rain""]
Output: [""eat"",""oath""]

Example 2:
Input: board = [[""a"",""b""],[""c"",""d""]], words = [""abcb""]
Output: []

Constraints:
`m == board.length`
`n == board[i].length`
`1 <= m, n <= 12`
`board[i][j]` is a lowercase English letter.

`1 <= words.length <= 3 * 104`
`1 <= words[i].length <= 10`
`words[i]` consists of lowercase English letters.

All the strings of `words` are unique.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are arranged in a circle. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and it will automatically contact the police if two adjacent houses were broken into on the same night.

Given an integer array `nums` representing the amount of money of each house, return the maximum amount of money you can rob tonight without alerting the police.


Example 1:
Input: nums = [2,3,2]
Output: 3
Explanation: You cannot rob house 1 (money = 2) and then rob house 3 (money = 2), because they are adjacent houses.


Example 2:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house 1 (money = 1) and then rob house 3 (money = 3).

Total amount you can rob = 1 + 3 = 4.


Example 3:
Input: nums = [0]
Output: 0

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s`. You can convert `s` to a palindrome by adding characters in front of it.

Return the shortest palindrome you can find by performing this transformation.


Example 1:
Input: s = ""aacecaaa""
Output: ""aaacecaaa""

Example 2:
Input: s = ""abcd""
Output: ""dcbabcd""

Constraints:
`0 <= s.length <= 5 * 104`
`s` consists of lowercase English letters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`, return the `kth` largest element in the array.

Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.


Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4

Constraints:
`1 <= k <= nums.length <= 104`
`-104 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Find all valid combinations of `k` numbers that sum up to `n` such that the following conditions are true:
Only numbers `1` through `9` are used.

Each number is used at most once.

Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.


Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.


Example 2:
Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.


Example 3:
Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations. [1,2,1] is not valid because 1 is used twice.


Example 4:
Input: k = 3, n = 2
Output: []
Explanation: There are no valid combinations.


Example 5:
Input: k = 9, n = 45
Output: [[1,2,3,4,5,6,7,8,9]]
Explanation:
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45
​​​​​​​There are no other valid combinations.


Constraints:
`2 <= k <= 9`
`1 <= n <= 60`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return `true` if any value appears at least twice in the array, and return `false` if every element is distinct.


Example 1:
Input: nums = [1,2,3,1]
Output: true

Example 2:
Input: nums = [1,2,3,4]
Output: false

Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2]
Output: true

Constraints:
`1 <= nums.length <= 105`
`-109 <= nums[i] <= 109`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A city's skyline is the outer contour of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all the buildings, return the skyline formed by these buildings collectively.

The geometric information of each building is given in the array `buildings` where `buildings[i] = [lefti, righti, heighti]`:
`lefti` is the x coordinate of the left edge of the `ith` building.

`righti` is the x coordinate of the right edge of the `ith` building.

`heighti` is the height of the `ith` building.

You may assume all buildings are perfect rectangles grounded on an absolutely flat surface at height `0`.

The skyline should be represented as a list of ""key points"" sorted by their x-coordinate in the form `[[x1,y1],[x2,y2],...]`. Each key point is the left endpoint of some horizontal segment in the skyline except the last point in the list, which always has a y-coordinate `0` and is used to mark the skyline's termination where the rightmost building ends. Any ground between the leftmost and rightmost buildings should be part of the skyline's contour.

Note: There must be no consecutive horizontal lines of equal height in the output skyline. For instance, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; the three lines of height 5 should be merged into one in the final output as such: `[...,[2 3],[4 5],[12 7],...]`

Example 1:
Input: buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
Explanation:
Figure A shows the buildings of the input.

Figure B shows the skyline formed by those buildings. The red points in figure B represent the key points in the output list.


Example 2:
Input: buildings = [[0,2,3],[2,5,3]]
Output: [[0,3],[5,0]]

Constraints:
`1 <= buildings.length <= 104`
`0 <= lefti < righti <= 231 - 1`
`1 <= heighti <= 231 - 1`
`buildings` is sorted by `lefti` in non-decreasing order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`, return `true` if there are two distinct indices `i` and `j` in the array such that `nums[i] == nums[j]` and `abs(i - j) <= k`.


Example 1:
Input: nums = [1,2,3,1], k = 3
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1
Output: true

Example 3:
Input: nums = [1,2,3,1,2,3], k = 2
Output: false

Constraints:
`1 <= nums.length <= 105`
`-109 <= nums[i] <= 109`
`0 <= k <= 105`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and two integers `k` and `t`, return `true` if there are two distinct indices `i` and `j` in the array such that `abs(nums[i] - nums[j]) <= t` and `abs(i - j) <= k`.


Example 1:
Input: nums = [1,2,3,1], k = 3, t = 0
Output: true

Example 2:
Input: nums = [1,0,1,1], k = 1, t = 2
Output: true

Example 3:
Input: nums = [1,5,9,1,5,9], k = 2, t = 3
Output: false

Constraints:
`0 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`0 <= k <= 104`
`0 <= t <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` binary `matrix` filled with `0`'s and `1`'s, find the largest square containing only `1`'s and return its area.


Example 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 4

Example 2:
Input: matrix = [[""0"",""1""],[""1"",""0""]]
Output: 1

Example 3:
Input: matrix = [[""0""]]
Output: 0

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 300`
`matrix[i][j]` is `'0'` or `'1'`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a complete binary tree, return the number of the nodes in the tree.

According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: 6

Example 2:
Input: root = []
Output: 0

Example 3:
Input: root = [1]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[0, 5 * 104]`.

`0 <= Node.val <= 5 * 104`
The tree is guaranteed to be complete.

Follow up: Traversing the tree to count the number of nodes in the tree is an easy solution but with `O(n)` complexity. Could you find a faster algorithm?",0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.

The first rectangle is defined by its bottom-left corner `(A, B)` and its top-right corner `(C, D)`.

The second rectangle is defined by its bottom-left corner `(E, F)` and its top-right corner `(G, H)`.


Example 1:
Input: A = -3, B = 0, C = 3, D = 4, E = 0, F = -1, G = 9, H = 2
Output: 45

Example 2:
Input: A = -2, B = -2, C = 2, D = 2, E = -2, F = -2, G = 2, H = 2
Output: 16

Constraints:
`-104 <= A, B, C, D, E, F, G, H <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` representing an expression, implement a basic calculator to evaluate it.


Example 1:
Input: s = ""1 + 1""
Output: 2

Example 2:
Input: s = "" 2-1 + 2 ""
Output: 3

Example 3:
Input: s = ""(1+(4+5+2)-3)+(6+8)""
Output: 23

Constraints:
`1 <= s.length <= 3 * 105`
`s` consists of digits, `'+'`, `'-'`, `'('`, `')'`, and `' '`.

`s` represents a valid expression.",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue (`push`, `top`, `pop`, and `empty`).

Implement the `MyStack` class:
`void push(int x)` Pushes element x to the top of the stack.

`int pop()` Removes the element on the top of the stack and returns it.

`int top()` Returns the element on the top of the stack.

`boolean empty()` Returns `true` if the stack is empty, `false` otherwise.

Notes:
You must use only standard operations of a queue, which means only `push to back`, `peek/pop from front`, `size`, and `is empty` operations are valid.

Depending on your language, the queue may not be supported natively. You may simulate a queue using a list or deque (double-ended queue), as long as you use only a queue's standard operations.


Example 1:
Input
[""MyStack"", ""push"", ""push"", ""top"", ""pop"", ""empty""]
[[], [1], [2], [], [], []]
Output
[null, null, null, 2, 2, false]
Explanation
MyStack myStack = new MyStack();
myStack.push(1);
myStack.push(2);
myStack.top(); // return 2
myStack.pop(); // return 2
myStack.empty(); // return False

Constraints:
`1 <= x <= 9`
At most `100` calls will be made to `push`, `pop`, `top`, and `empty`.

All the calls to `pop` and `top` are valid.

Follow-up: Can you implement the stack such that each operation is amortized `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer. You can use more than two queues.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, invert the tree, and return its root.


Example 1:
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:
Input: root = [2,1,3]
Output: [2,3,1]

Example 3:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` which represents an expression, evaluate this expression and return its value. 
The integer division should truncate toward zero.


Example 1:
Input: s = ""3+2*2""
Output: 7

Example 2:
Input: s = "" 3/2 ""
Output: 1

Example 3:
Input: s = "" 3+5 / 2 ""
Output: 5

Constraints:
`1 <= s.length <= 3 * 105`
`s` consists of integers and operators `('+', '-', '*', '/')` separated by some number of spaces.

`s` represents a valid expression.

All the integers in the expression are non-negative integers in the range `[0, 231 - 1]`.

The answer is guaranteed to fit in a 32-bit integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a sorted unique integer array `nums`.

Return the smallest sorted list of ranges that cover all the numbers in the array exactly. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.

Each range `[a,b]` in the list should be output as:
`""a->b""` if `a != b`
`""a""` if `a == b`

Example 1:
Input: nums = [0,1,2,4,5,7]
Output: [""0->2"",""4->5"",""7""]
Explanation: The ranges are:
[0,2] --> ""0->2""
[4,5] --> ""4->5""
[7,7] --> ""7""

Example 2:
Input: nums = [0,2,3,4,6,8,9]
Output: [""0"",""2->4"",""6"",""8->9""]
Explanation: The ranges are:
[0,0] --> ""0""
[2,4] --> ""2->4""
[6,6] --> ""6""
[8,9] --> ""8->9""

Example 3:
Input: nums = []
Output: []

Example 4:
Input: nums = [-1]
Output: [""-1""]

Example 5:
Input: nums = [0]
Output: [""0""]

Constraints:
`0 <= nums.length <= 20`
`-231 <= nums[i] <= 231 - 1`
All the values of `nums` are unique.

`nums` is sorted in ascending order.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array of size `n`, find all elements that appear more than `⌊ n/3 ⌋` times.

Follow-up: Could you solve the problem in linear time and in O(1) space?

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
Input: nums = [1]
Output: [1]

Example 3:
Input: nums = [1,2]
Output: [1,2]

Constraints:
`1 <= nums.length <= 5 * 104`
`-109 <= nums[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary search tree, and an integer `k`, return the `kth` (1-indexed) smallest element in the tree.


Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

Constraints:
The number of nodes in the tree is `n`.

`1 <= k <= n <= 104`
`0 <= Node.val <= 104`
Follow up: If the BST is modified often (i.e., we can do insert and delete operations) and you need to find the kth smallest frequently, how would you optimize?",0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return `true` if it is a power of two. Otherwise, return `false`.

An integer `n` is a power of two, if there exists an integer `x` such that `n == 2x`.


Example 1:
Input: n = 1
Output: true
Explanation: 20 = 1

Example 2:
Input: n = 16
Output: true
Explanation: 24 = 16

Example 3:
Input: n = 3
Output: false

Example 4:
Input: n = 4
Output: true

Example 5:
Input: n = 5
Output: false

Constraints:
`-231 <= n <= 231 - 1`
Follow up: Could you solve it without loops/recursion?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a first in first out (FIFO) queue using only two stacks. The implemented queue should support all the functions of a normal queue (`push`, `peek`, `pop`, and `empty`).

Implement the `MyQueue` class:
`void push(int x)` Pushes element x to the back of the queue.

`int pop()` Removes the element from the front of the queue and returns it.

`int peek()` Returns the element at the front of the queue.

`boolean empty()` Returns `true` if the queue is empty, `false` otherwise.

Notes:
You must use only standard operations of a stack, which means only `push to top`, `peek/pop from top`, `size`, and `is empty` operations are valid.

Depending on your language, the stack may not be supported natively. You may simulate a stack using a list or deque (double-ended queue) as long as you use only a stack's standard operations.

Follow-up: Can you implement the queue such that each operation is amortized `O(1)` time complexity? In other words, performing `n` operations will take overall `O(n)` time even if one of those operations may take longer.


Example 1:
Input
[""MyQueue"", ""push"", ""push"", ""peek"", ""pop"", ""empty""]
[[], [1], [2], [], [], []]
Output
[null, null, null, 1, 1, false]
Explanation
MyQueue myQueue = new MyQueue();
myQueue.push(1); // queue is: [1]
myQueue.push(2); // queue is: [1, 2] (leftmost is front of the queue)
myQueue.peek(); // return 1
myQueue.pop(); // return 1, queue is [2]
myQueue.empty(); // return false

Constraints:
`1 <= x <= 9`
At most `100` calls will be made to `push`, `pop`, `peek`, and `empty`.

All the calls to `pop` and `peek` are valid.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, count the total number of digit `1` appearing in all non-negative integers less than or equal to `n`.


Example 1:
Input: n = 13
Output: 6

Example 2:
Input: n = 0
Output: 0

Constraints:
`0 <= n <= 2 * 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a singly linked list, return `true` if it is a palindrome.


Example 1:
Input: head = [1,2,2,1]
Output: true

Example 2:
Input: head = [1,2]
Output: false

Constraints:
The number of nodes in the list is in the range `[1, 105]`.

`0 <= Node.val <= 9`
Follow up: Could you do it in `O(n)` time and `O(1)` space?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: The LCA of nodes 2 and 8 is 6.


Example 2:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: The LCA of nodes 2 and 4 is 2, since a node can be a descendant of itself according to the LCA definition.


Example 3:
Input: root = [2,1], p = 2, q = 1
Output: 2

Constraints:
The number of nodes in the tree is in the range `[2, 105]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` will exist in the BST.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself).”

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5, since a node can be a descendant of itself according to the LCA definition.


Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Constraints:
The number of nodes in the tree is in the range `[2, 105]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` will exist in the tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function to delete a node in a singly-linked list. You will not be given access to the `head` of the list, instead you will be given access to the node to be deleted directly.

It is guaranteed that the node to be deleted is not a tail node in the list.


Example 1:
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: You are given the second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.


Example 2:
Input: head = [4,5,1,9], node = 1
Output: [4,5,9]
Explanation: You are given the third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.


Example 3:
Input: head = [1,2,3,4], node = 3
Output: [1,2,4]

Example 4:
Input: head = [0,1], node = 0
Output: [1]

Example 5:
Input: head = [-3,5,-99], node = -3
Output: [5,-99]

Constraints:
The number of the nodes in the given list is in the range `[2, 1000]`.

`-1000 <= Node.val <= 1000`
The value of each node in the list is unique.

The `node` to be deleted is in the list and is not a tail node",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all the elements of `nums` except `nums[i]`.

The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.


Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

Constraints:
`2 <= nums.length <= 105`
`-30 <= nums[i] <= 30`
The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.

Follow up:
Could you solve it in `O(n)` time complexity and without using division?
Could you solve it with `O(1)` constant space complexity? (The output array does not count as extra space for space complexity analysis.)",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of integers `nums`, there is a sliding window of size `k` which is moving from the very left of the array to the very right. You can only see the `k` numbers in the window. Each time the sliding window moves right by one position.

Return the max sliding window.


Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
Explanation: 
Window position                Max
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7

Example 2:
Input: nums = [1], k = 1
Output: [1]

Example 3:
Input: nums = [1,-1], k = 1
Output: [1,-1]

Example 4:
Input: nums = [9,11], k = 2
Output: [11]

Example 5:
Input: nums = [4,-2], k = 2
Output: [4]

Constraints:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`
`1 <= k <= nums.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Write an efficient algorithm that searches for a `target` value in an `m x n` integer `matrix`. The `matrix` has the following properties:
Integers in each row are sorted in ascending from left to right.

Integers in each column are sorted in ascending from top to bottom.


Example 1:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 5
Output: true

Example 2:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17,24],[18,21,23,26,30]], target = 20
Output: false

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= n, m <= 300`
`-109 <= matix[i][j] <= 109`
All the integers in each row are sorted in ascending order.

All the integers in each column are sorted in ascending order.

`-109 <= target <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `expression` of numbers and operators, return all possible results from computing all the different possible ways to group numbers and operators. You may return the answer in any order.


Example 1:
Input: expression = ""2-1-1""
Output: [0,2]
Explanation:
((2-1)-1) = 0 
(2-(1-1)) = 2

Example 2:
Input: expression = ""2*3-4*5""
Output: [-34,-14,-10,-10,10]
Explanation:
(2*(3-(4*5))) = -34 
((2*3)-(4*5)) = -14 
((2*(3-4))*5) = -10 
(2*((3-4)*5)) = -10 
(((2*3)-4)*5) = 10

Constraints:
`1 <= expression.length <= 20`
`expression` consists of digits and the operator `'+'`, `'-'`, and `'*'`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, return `true` if `t` is an anagram of `s`, and `false` otherwise.


Example 1:
Input: s = ""anagram"", t = ""nagaram""
Output: true

Example 2:
Input: s = ""rat"", t = ""car""
Output: false

Constraints:
`1 <= s.length, t.length <= 5 * 104`
`s` and `t` consist of lowercase English letters.

Follow up: What if the inputs contain Unicode characters? How would you adapt your solution to such a case?",0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that will be initialized with a string array, and then it should answer queries of the shortest distance between two different strings from the array.

Implement the `WordDistance` class:
`WordDistance(String[] wordsDict)` initializes the object with the strings array `wordsDict`.

`int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.


Example 1:
Input
[""WordDistance"", ""shortest"", ""shortest""]
[[[""practice"", ""makes"", ""perfect"", ""coding"", ""makes""]], [""coding"", ""practice""], [""makes"", ""coding""]]
Output
[null, 3, 1]
Explanation
WordDistance wordDistance = new WordDistance([""practice"", ""makes"", ""perfect"", ""coding"", ""makes""]);
wordDistance.shortest(""coding"", ""practice""); // return 3
wordDistance.shortest(""makes"", ""coding"");    // return 1

Constraints:
`1 <= wordsDict.length <= 3 * 104`
`1 <= wordsDict[i].length <= 10`
`wordsDict[i]` consists of lowercase English letters.

`word1` and `word2` are in `wordsDict`.

`word1 != word2`
At most `5000` calls will be made to `shortest`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `wordsDict` and two strings that already exist in the array `word1` and `word2`, return the shortest distance between these two words in the list.

Note that `word1` and `word2` may be the same. It is guaranteed that they represent two individual words in the list.


Example 1:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""coding""
Output: 1

Example 2:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""makes""
Output: 3

Constraints:
`1 <= wordsDict.length <= 3 * 104`
`1 <= wordsDict[i].length <= 10`
`wordsDict[i]` consists of lowercase English letters.

`word1` and `word2` are in `wordsDict`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `num` which represents an integer, return `true` if `num` is a strobogrammatic number.

A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).


Example 1:
Input: num = ""69""
Output: true

Example 2:
Input: num = ""88""
Output: true

Example 3:
Input: num = ""962""
Output: false

Example 4:
Input: num = ""1""
Output: true

Constraints:
`1 <= num.length <= 50`
`num` consists of only digits.

`num` does not contain any leading zeros except for zero itself.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return all the strobogrammatic numbers that are of length `n`. You may return the answer in any order.

A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).


Example 1:
Input: n = 2
Output: [""11"",""69"",""88"",""96""]

Example 2:
Input: n = 1
Output: [""0"",""1"",""8""]

Constraints:
`1 <= n <= 14`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings low and high that represent two integers `low` and `high` where `low <= high`, return the number of strobogrammatic numbers in the range `[low, high]`.

A strobogrammatic number is a number that looks the same when rotated `180` degrees (looked at upside down).


Example 1:
Input: low = ""50"", high = ""100""
Output: 3

Example 2:
Input: low = ""0"", high = ""0""
Output: 1

Constraints:
`1 <= low.length, high.length <= 15`
`low` and `high` consist of only digits.

`low <= high`
`low` and `high` do not contain any leading zeros except for zero itself.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can shift a string by shifting each of its letters to its successive letter.

For example, `""abc""` can be shifted to be `""bcd""`.

We can keep shifting the string to form a sequence.

For example, we can keep shifting `""abc""` to form the sequence: `""abc"" -> ""bcd"" -> ... -> ""xyz""`.

Given an array of strings `strings`, group all `strings[i]` that belong to the same shifting sequence. You may return the answer in any order.


Example 1:
Input: strings = [""abc"",""bcd"",""acef"",""xyz"",""az"",""ba"",""a"",""z""]
Output: [[""acef""],[""a"",""z""],[""abc"",""bcd"",""xyz""],[""az"",""ba""]]

Example 2:
Input: strings = [""a""]
Output: [[""a""]]

Constraints:
`1 <= strings.length <= 200`
`1 <= strings[i].length <= 50`
`strings[i]` consists of lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the number of uni-value subtrees.

A uni-value subtree means all nodes of the subtree have the same value.


Example 1:
Input: root = [5,1,5,5,5,null,5]
Output: 4

Example 2:
Input: root = []
Output: 0

Example 3:
Input: root = [5,5,5,5,5,null,5]
Output: 6

Constraints:
The numbrt of the node in the tree will be in the range `[0, 1000]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an iterator to flatten a 2D vector. It should support the `next` and `hasNext` operations.

Implement the `Vector2D` class:
`Vector2D(int[][] vec)` initializes the object with the 2D vector `vec`.

`next()` returns the next element from the 2D vector and moves the pointer one step forward. You may assume that all the calls to `next` are valid.

`hasNext()` returns `true` if there are still some elements in the vector, and `false` otherwise.


Example 1:
Input
[""Vector2D"", ""next"", ""next"", ""next"", ""hasNext"", ""hasNext"", ""next"", ""hasNext""]
[[[[1, 2], [3], [4]]], [], [], [], [], [], [], []]
Output
[null, 1, 2, 3, true, true, 4, false]
Explanation
Vector2D vector2D = new Vector2D([[1, 2], [3], [4]]);
vector2D.next();    // return 1
vector2D.next();    // return 2
vector2D.next();    // return 3
vector2D.hasNext(); // return True
vector2D.hasNext(); // return True
vector2D.next();    // return 4
vector2D.hasNext(); // return False

Constraints:
`0 <= vec.length <= 200`
`0 <= vec[i].length <= 500`
`-500 <= vec[i][j] <= 500`
At most `105` calls will be made to `next` and `hasNext`.

Follow up: As an added challenge, try to code it using only iterators in C++ or iterators in Java.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.


Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: false

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: true

Constraints:
`0 <= intervals.length <= 104`
`intervals[i].length == 2`
`0 <= starti < endi <= 106`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of meeting time intervals `intervals` where `intervals[i] = [starti, endi]`, return the minimum number of conference rooms required.


Example 1:
Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: intervals = [[7,10],[2,4]]
Output: 1

Constraints:
`1 <= intervals.length <= 104`
`0 <= starti < endi <= 106`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Numbers can be regarded as the product of their factors.

For example, `8 = 2 x 2 x 2 = 2 x 4`.

Given an integer `n`, return all possible combinations of its factors. You may return the answer in any order.

Note that the factors should be in the range `[2, n - 1]`.


Example 1:
Input: n = 1
Output: []

Example 2:
Input: n = 12
Output: [[2,6],[3,4],[2,2,3]]

Example 3:
Input: n = 37
Output: []

Example 4:
Input: n = 32
Output: [[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2,2]]

Constraints:
`1 <= n <= 108`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of unique integers `preorder`, return `true` if it is the correct preorder traversal sequence of a binary search tree.


Example 1:
Input: preorder = [5,2,1,3,6]
Output: true

Example 2:
Input: preorder = [5,2,6,1,3]
Output: false

Constraints:
`1 <= preorder.length <= 104`
`1 <= preorder[i] <= 104`
All the elements of `preorder` are unique.

Follow up: Could you do it using only constant space complexity?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a row of `n` houses, where each house can be painted one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x 3` cost matrix `costs`.

For example, `costs[0][0]` is the cost of painting house `0` with the color red; `costs[1][2]` is the cost of painting house 1 with color green, and so on...

Return the minimum cost to paint all houses.


Example 1:
Input: costs = [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 into blue, paint house 1 into green, paint house 2 into blue.

Minimum cost: 2 + 5 + 3 = 10.


Example 2:
Input: costs = [[7,6,2]]
Output: 2

Constraints:
`costs.length == n`
`costs[i].length == 3`
`1 <= n <= 100`
`1 <= costs[i][j] <= 20`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return all root-to-leaf paths in any order.

A leaf is a node with no children.


Example 1:
Input: root = [1,2,3,null,5]
Output: [""1->2->5"",""1->3""]

Example 2:
Input: root = [1]
Output: [""1""]

Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`-100 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `num`, repeatedly add all its digits until the result has only one digit, and return it.


Example 1:
Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2 
Since 2 has only one digit, return it.


Example 2:
Input: num = 0
Output: 0

Constraints:
`0 <= num <= 231 - 1`
Follow up: Could you do it without any loop/recursion in `O(1)` runtime?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `n` integers `nums` and an integer `target`, find the number of index triplets `i`, `j`, `k` with `0 <= i < j < k < n` that satisfy the condition `nums[i] + nums[j] + nums[k] < target`.

Follow up: Could you solve it in `O(n2)` runtime?

Example 1:
Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triplets which sums are less than 2:
[-2,0,1]
[-2,0,3]

Example 2:
Input: nums = [], target = 0
Output: 0

Example 3:
Input: nums = [0], target = 0
Output: 0

Constraints:
`n == nums.length`
`0 <= n <= 300`
`-100 <= nums[i] <= 100`
`-100 <= target <= 100`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once. You can return the answer in any order.

Follow up: Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?

Example 1:
Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation:  [5, 3] is also a valid answer.


Example 2:
Input: nums = [-1,0]
Output: [-1,0]

Example 3:
Input: nums = [0,1]
Output: [1,0]

Constraints:
`2 <= nums.length <= 3 * 104`
`-231 <= nums[i] <= 231 - 1`
Each integer in `nums` will appear twice, only two integers will appear once.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a graph of `n` nodes labeled from `0` to `n - 1`. You are given an integer n and a list of `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between nodes `ai` and `bi` in the graph.

Return `true` if the edges of the given graph make up a valid tree, and `false` otherwise.


Example 1:
Input: n = 5, edges = [[0,1],[0,2],[0,3],[1,4]]
Output: true

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
Output: false

Constraints:
`1 <= 2000 <= n`
`0 <= edges.length <= 5000`
`edges[i].length == 2`
`0 <= ai, bi < n`
`ai != bi`
There are no self-loops or repeated edges.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return `true` if `n` is an ugly number.

Ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.


Example 1:
Input: n = 6
Output: true
Explanation: 6 = 2 × 3

Example 2:
Input: n = 8
Output: true
Explanation: 8 = 2 × 2 × 2

Example 3:
Input: n = 14
Output: false
Explanation: 14 is not ugly since it includes another prime factor 7.


Example 4:
Input: n = 1
Output: true
Explanation: 1 is typically treated as an ugly number.


Constraints:
`-231 <= n <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the `nth` ugly number.

Ugly number is a positive number whose prime factors only include `2`, `3`, and/or `5`.


Example 1:
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.


Example 2:
Input: n = 1
Output: 1
Explanation: 1 is typically treated as an ugly number.


Constraints:
`1 <= n <= 1690`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are a row of `n` houses, each house can be painted with one of the `k` colors. The cost of painting each house with a certain color is different. You have to paint all the houses such that no two adjacent houses have the same color.

The cost of painting each house with a certain color is represented by an `n x k` cost matrix costs.

For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on...

Return the minimum cost to paint all houses.


Example 1:
Input: costs = [[1,5,3],[2,9,4]]
Output: 5
Explanation:
Paint house 0 into color 0, paint house 1 into color 2. Minimum cost: 1 + 4 = 5; 
Or paint house 0 into color 2, paint house 1 into color 0. Minimum cost: 3 + 2 = 5.


Example 2:
Input: costs = [[1,3],[2,4]]
Output: 5

Constraints:
`costs.length == n`
`costs[i].length == k`
`1 <= n <= 100`
`1 <= k <= 20`
`1 <= costs[i][j] <= 20`
Follow up: Could you solve it in `O(nk)` runtime?",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return `true` if a permutation of the string could form a palindrome.


Example 1:
Input: s = ""code""
Output: false

Example 2:
Input: s = ""aab""
Output: true

Example 3:
Input: s = ""carerac""
Output: true

Constraints:
`1 <= s.length <= 5000`
`s` consists of only lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return all the palindromic permutations (without duplicates) of it.

You may return the answer in any order. If `s` has no palindromic permutation, return an empty list.


Example 1:
Input: s = ""aabb""
Output: [""abba"",""baab""]

Example 2:
Input: s = ""abc""
Output: []

Constraints:
`1 <= s.length <= 16`
`s` consists of only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only number in the range that is missing from the array.

Follow up: Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 since there are 3 numbers, so all numbers are in the range [0,3]. 2 is the missing number in the range since it does not appear in nums.


Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 since there are 2 numbers, so all numbers are in the range [0,2]. 2 is the missing number in the range since it does not appear in nums.


Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 since there are 9 numbers, so all numbers are in the range [0,9]. 8 is the missing number in the range since it does not appear in nums.


Example 4:
Input: nums = [0]
Output: 1
Explanation: n = 1 since there is 1 number, so all numbers are in the range [0,1]. 1 is the missing number in the range since it does not appear in nums.


Constraints:
`n == nums.length`
`1 <= n <= 104`
`0 <= nums[i] <= n`
All the numbers of `nums` are unique.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a new alien language that uses the English alphabet. However, the order among the letters is unknown to you.

You are given a list of strings `words` from the alien language's dictionary, where the strings in `words` are sorted lexicographically by the rules of this new language.

Return a string of the unique letters in the new alien language sorted in lexicographically increasing order by the new language's rules. If there is no solution, return `""""`. If there are multiple solutions, return any of them.

A string `s` is lexicographically smaller than a string `t` if at the first letter where they differ, the letter in `s` comes before the letter in `t` in the alien language. If the first `min(s.length, t.length)` letters are the same, then `s` is smaller if and only if `s.length < t.length`.


Example 1:
Input: words = [""wrt"",""wrf"",""er"",""ett"",""rftt""]
Output: ""wertf""

Example 2:
Input: words = [""z"",""x""]
Output: ""zx""

Example 3:
Input: words = [""z"",""x"",""z""]
Output: """"
Explanation: The order is invalid, so return `""""`.


Constraints:
`1 <= words.length <= 100`
`1 <= words[i].length <= 100`
`words[i]` consists of only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary search tree and a `target` value, return the value in the BST that is closest to the `target`.


Example 1:
Input: root = [4,2,5,1,3], target = 3.714286
Output: 4

Example 2:
Input: root = [1], target = 4.428571
Output: 1

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`0 <= Node.val <= 109`
`-109 <= target <= 109`",0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an algorithm to encode a list of strings to a string. The encoded string is then sent over the network and is decoded back to the original list of strings.

Machine 1 (sender) has the function:
string encode(vector<string> strs) {
  // ... your code
  return encoded_string;
}
Machine 2 (receiver) has the function:
vector<string> decode(string s) {
  //... your code
  return strs;
}
So Machine 1 does:
string encoded_string = encode(strs);
and Machine 2 does:
vector<string> strs2 = decode(encoded_string);
`strs2` in Machine 2 should be the same as `strs` in Machine 1.

Implement the `encode` and `decode` methods.


Example 1:
Input: dummy_input = [""Hello"",""World""]
Output: [""Hello"",""World""]
Explanation:
Machine 1:
Codec encoder = new Codec();
String msg = encoder.encode(strs);
Machine 1 ---msg---> Machine 2
Machine 2:
Codec decoder = new Codec();
String[] strs = decoder.decode(msg);

Example 2:
Input: dummy_input = [""""]
Output: [""""]

Constraints:
`1 <= strs.length <= 200`
`0 <= strs[i].length <= 200`
`strs[i]` contains any possible characters out of `256` valid ASCII characters.

Follow up:
Could you write a generalized algorithm to work on any possible characters?
Could you solve the problem without using any serialize methods (such as `eval`)?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary search tree, a `target` value, and an integer `k`, return the `k` values in the BST that are closest to the `target`. You may return the answer in any order.

You are guaranteed to have only one unique set of `k` values in the BST that are closest to the `target`.


Example 1:
Input: root = [4,2,5,1,3], target = 3.714286, k = 2
Output: [4,3]

Example 2:
Input: root = [1], target = 0.000000, k = 1
Output: [1]

Constraints:
The number of nodes in the tree is `n`.

`1 <= k <= n <= 104`.

`0 <= Node.val <= 109`
`-109 <= target <= 109`
Follow up: Assume that the BST is balanced. Could you solve it in less than `O(n)` runtime (where `n = total nodes`)?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Convert a non-negative integer `num` to its English words representation.


Example 1:
Input: num = 123
Output: ""One Hundred Twenty Three""

Example 2:
Input: num = 12345
Output: ""Twelve Thousand Three Hundred Forty Five""

Example 3:
Input: num = 1234567
Output: ""One Million Two Hundred Thirty Four Thousand Five Hundred Sixty Seven""

Example 4:
Input: num = 1234567891
Output: ""One Billion Two Hundred Thirty Four Million Five Hundred Sixty Seven Thousand Eight Hundred Ninety One""

Constraints:
`0 <= num <= 231 - 1`",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper, return compute the researcher's `h`-index.

According to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each.

If there are several possible values for `h`, the maximum one is taken as the `h`-index.


Example 1:
Input: citations = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means the researcher has 5 papers in total and each of them had received 3, 0, 6, 1, 5 citations respectively.

Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Example 2:
Input: citations = [1,3,1]
Output: 1

Constraints:
`n == citations.length`
`1 <= n <= 5000`
`0 <= citations[i] <= 1000`",0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `citations` where `citations[i]` is the number of citations a researcher received for their `ith` paper and `citations` is sorted in an ascending order, return compute the researcher's `h`-index.

According to the definition of h-index on Wikipedia: A scientist has an index `h` if `h` of their `n` papers have at least `h` citations each, and the other `n − h` papers have no more than `h` citations each.

If there are several possible values for `h`, the maximum one is taken as the `h`-index.


Example 1:
Input: citations = [0,1,3,5,6]
Output: 3
Explanation: [0,1,3,5,6] means the researcher has 5 papers in total and each of them had received 0, 1, 3, 5, 6 citations respectively.

Since the researcher has 3 papers with at least 3 citations each and the remaining two with no more than 3 citations each, their h-index is 3.


Example 2:
Input: citations = [1,2,100]
Output: 2

Constraints:
`n == citations.length`
`1 <= n <= 105`
`0 <= citations[i] <= 1000`
`citations` is sorted in ascending order.

Follow up: Could you solve it in logarithmic time complexity?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are painting a fence of `n` posts with `k` different colors. You must paint the posts following these rules:
Every post must be painted exactly one color.

At most one pair of adjacent fence posts can have the same color.

Given the two integers `n` and `k`, return the number of ways you can paint the fence.


Example 1:
Input: n = 3, k = 2
Output: 6
Explanation: All the possibilities are shown.

Note that painting all the posts red or all the posts green is invalid because there can only be at most one pair of adjacent posts that are the same color.


Example 2:
Input: n = 1, k = 1
Output: 1

Example 3:
Input: n = 7, k = 2
Output: 42

Constraints:
`1 <= n <= 50`
`1 <= k <= 105`
The answer is guaranteed to be in the range `[0, 231 - 1]` for the given `n` and `k`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose you are at a party with `n` people (labeled from `0` to `n - 1`), and among them, there may exist one celebrity. The definition of a celebrity is that all the other `n - 1` people know him/her, but he/she does not know any of them.

Now you want to find out who the celebrity is or verify that there is not one. The only thing you are allowed to do is to ask questions like: ""Hi, A. Do you know B?"" to get information about whether A knows B. You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).

You are given a helper function `bool knows(a, b)` which tells you whether A knows B. Implement a function `int findCelebrity(n)`. There will be exactly one celebrity if he/she is in the party. Return the celebrity's label if there is a celebrity in the party. If there is no celebrity, return `-1`.


Example 1:
Input: graph = [[1,1,0],[0,1,0],[1,1,1]]
Output: 1
Explanation: There are three persons labeled with 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. The celebrity is the person labeled as 1 because both 0 and 2 know him but 1 does not know anybody.


Example 2:
Input: graph = [[1,0,1],[1,1,0],[0,1,1]]
Output: -1
Explanation: There is no celebrity.


Constraints:
`n == graph.length`
`n == graph[i].length`
`2 <= n <= 100`
`graph[i][j]` is `0` or `1`.

`graph[i][i] == 1`
Follow up: If the maximum number of allowed calls to the API `knows` is `3 * n`, could you find a solution without exceeding the maximum number of calls?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a product manager and currently leading a team to develop a new product. Unfortunately, the latest version of your product fails the quality check. Since each version is developed based on the previous version, all the versions after a bad version are also bad.

Suppose you have `n` versions `[1, 2, ..., n]` and you want to find out the first bad one, which causes all the following ones to be bad.

You are given an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first bad version. You should minimize the number of calls to the API.


Example 1:
Input: n = 5, bad = 4
Output: 4
Explanation:
call isBadVersion(3) -> false
call isBadVersion(5) -> true
call isBadVersion(4) -> true
Then 4 is the first bad version.


Example 2:
Input: n = 1, bad = 1
Output: 1

Constraints:
`1 <= bad <= n <= 231 - 1`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the least number of perfect square numbers that sum to `n`.

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, `1`, `4`, `9`, and `16` are perfect squares while `3` and `11` are not.


Example 1:
Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.


Example 2:
Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


Constraints:
`1 <= n <= 104`",0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.

You may assume the input array always has a valid answer.


Example 1:
Input: nums = [3,5,2,1,6,4]
Output: [3,5,1,6,2,4]
Explanation: [1,6,2,5,3,4] is also accepted.


Example 2:
Input: nums = [6,6,5,6,3,8]
Output: [6,6,5,6,3,8]

Constraints:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 104`
It is guaranteed that there will be an answer for the given input `nums`.

Follow up: Could you do it without sorting the array?",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two vectors of integers `v1` and `v2`, implement an iterator to return their elements alternately.

Implement the `ZigzagIterator` class:
`ZigzagIterator(List<int> v1, List<int> v2)` initializes the object with the two vectors `v1` and `v2`.

`boolean hasNext()` returns `true` if the iterator still has elements, and `false` otherwise.

`int next()` returns the current element of the iterator and moves the iterator to the next element.


Example 1:
Input: v1 = [1,2], v2 = [3,4,5,6]
Output: [1,3,2,4,5,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].


Example 2:
Input: v1 = [1], v2 = []
Output: [1]

Example 3:
Input: v1 = [], v2 = [1]
Output: [1]

Constraints:
`0 <= v1.length, v2.length <= 1000`
`1 <= v1.length + v2.length <= 2000`
`-231 <= v1[i], v2[i] <= 231 - 1`
Follow up: What if you are given `k` vectors? How well can your code be extended to such cases?
Clarification for the follow-up question:
The ""Zigzag"" order is not clearly defined and is ambiguous for `k > 2` cases. If ""Zigzag"" does not look right to you, replace ""Zigzag"" with ""Cyclic"".


Example:
Input: v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]
Output: [1,4,8,2,5,9,3,6,7]",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `num` that contains only digits and an integer `target`, return all possibilities to add the binary operators `'+'`, `'-'`, or `'*'` between the digits of `num` so that the resultant expression evaluates to the `target` value.


Example 1:
Input: num = ""123"", target = 6
Output: [""1*2*3"",""1+2+3""]

Example 2:
Input: num = ""232"", target = 8
Output: [""2*3+2"",""2+3*2""]

Example 3:
Input: num = ""105"", target = 5
Output: [""1*0+5"",""10-5""]

Example 4:
Input: num = ""00"", target = 0
Output: [""0*0"",""0+0"",""0-0""]

Example 5:
Input: num = ""3456237490"", target = 9191
Output: []

Constraints:
`1 <= num.length <= 10`
`num` consists of only digits.

`-231 <= target <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.


Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
Input: nums = [0]
Output: [0]

Constraints:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
Follow up: Could you minimize the total number of operations done?",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an iterator that supports the `peek` operation on a list in addition to the `hasNext` and the `next` operations.

Implement the `PeekingIterator` class:
`PeekingIterator(int[] nums)` Initializes the object with the given integer array `nums`.

`int next()` Returns the next element in the array and moves the pointer to the next element.

`bool hasNext()` Returns `true` if there are still elements in the array.

`int peek()` Returns the next element in the array without moving the pointer.


Example 1:
Input
[""PeekingIterator"", ""next"", ""peek"", ""next"", ""next"", ""hasNext""]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 2, 2, 3, false]
Explanation
PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]
peekingIterator.next();    // return 1, the pointer moves to the next element [1,2,3].

peekingIterator.peek();    // return 2, the pointer does not move [1,2,3].

peekingIterator.next();    // return 2, the pointer moves to the next element [1,2,3]
peekingIterator.next();    // return 3, the pointer moves to the next element [1,2,3]
peekingIterator.hasNext(); // return False

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 1000`
All the calls to `next` and `peek` are valid.

At most `1000` calls will be made to `next`, `hasNext`, and `peek`.

Follow up: How would you extend your design to be generic and work with all types, not just integer?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary search tree and a node `p` in it, return the in-order successor of that node in the BST. If the given node has no in-order successor in the tree, return `null`.

The successor of a node `p` is the node with the smallest key greater than `p.val`.


Example 1:
Input: root = [2,1,3], p = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both p and the return value is of TreeNode type.


Example 2:
Input: root = [5,3,6,2,4,null,null,1], p = 6
Output: null
Explanation: There is no in-order successor of the current node, so the answer is `null`.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`
All Nodes will have unique values.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` grid `rooms` initialized with these three possible values.

`-1` A wall or an obstacle.

`0` A gate.

`INF` Infinity means an empty room. We use the value `231 - 1 = 2147483647` to represent `INF` as you may assume that the distance to a gate is less than `2147483647`.

Fill each empty room with the distance to its nearest gate. If it is impossible to reach a gate, it should be filled with `INF`.


Example 1:
Input: rooms = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147483647]]
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]

Example 2:
Input: rooms = [[-1]]
Output: [[-1]]

Example 3:
Input: rooms = [[2147483647]]
Output: [[2147483647]]

Example 4:
Input: rooms = [[0]]
Output: [[0]]

Constraints:
`m == rooms.length`
`n == rooms[i].length`
`1 <= m, n <= 250`
`rooms[i][j]` is `-1`, `0`, or `231 - 1`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` containing `n + 1` integers where each integer is in the range `[1, n]` inclusive.

There is only one repeated number in `nums`, return this repeated number.


Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [1,1]
Output: 1

Example 4:
Input: nums = [1,1,2]
Output: 1

Constraints:
`2 <= n <= 3 * 104`
`nums.length == n + 1`
`1 <= nums[i] <= n`
All the integers in `nums` appear only once except for precisely one integer which appears two or more times.

Follow up:
How can we prove that at least one duplicate number must exist in `nums`?
Can you solve the problem without modifying the array `nums`?
Can you solve the problem using only constant, `O(1)` extra space?
Can you solve the problem with runtime complexity less than `O(n2)`?",1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The abbreviation of a word is a concatenation of its first letter, the number of characters between the first and last letter, and its last letter. If a word has only two characters, then it is an abbreviation of itself.

For example:
`dog --> d1g` because there is one letter between the first letter `'d'` and the last letter `'g'`.

`internationalization --> i18n` because there are 18 letters between the first letter `'i'` and the last letter `'n'`.

`it --> it` because any word with only two characters is an abbreviation of itself.

Implement the `ValidWordAbbr` class:
`ValidWordAbbr(String[] dictionary)` Initializes the object with a `dictionary` of words.

`boolean isUnique(string word)` Returns `true` if either of the following conditions are met (otherwise returns `false`):
	
There is no word in `dictionary` whose abbreviation is equal to `word`'s abbreviation.

For any word in `dictionary` whose abbreviation is equal to `word`'s abbreviation, that word and `word` are the same.


Example 1:
Input
[""ValidWordAbbr"", ""isUnique"", ""isUnique"", ""isUnique"", ""isUnique""]
[[[""deer"", ""door"", ""cake"", ""card""]], [""dear""], [""cart""], [""cane""], [""make""]]
Output
[null, false, true, false, true]
Explanation
ValidWordAbbr validWordAbbr = new ValidWordAbbr([""deer"", ""door"", ""cake"", ""card""]);
validWordAbbr.isUnique(""dear""); // return false, dictionary word ""deer"" and word ""dear"" have the same abbreviation
                                // ""d2r"" but are not the same.

validWordAbbr.isUnique(""cart""); // return true, no words in the dictionary have the abbreviation ""c2t"".

validWordAbbr.isUnique(""cane""); // return false, dictionary word ""cake"" and word ""cane"" have the same abbreviation 
                                // ""c2e"" but are not the same.

validWordAbbr.isUnique(""make""); // return true, no words in the dictionary have the abbreviation ""m2e"".

validWordAbbr.isUnique(""cake""); // return true, because ""cake"" is already in the dictionary and no other word in the dictionary has ""c2e"" abbreviation.


Constraints:
`1 <= dictionary.length <= 3 * 104`
`1 <= dictionary[i].length <= 20`
`dictionary[i]` consists of lowercase English letters.

`1 <= word.length <= 20`
`word` consists of lowercase English letters.

At most `5000` calls will be made to `isUnique`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"According to Wikipedia's article: ""The Game of Life, also known simply as Life, is a cellular automaton devised by the British mathematician John Horton Conway in 1970.""
The board is made up of an `m x n` grid of cells, where each cell has an initial state: live (represented by a `1`) or dead (represented by a `0`). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the above Wikipedia article):
Any live cell with fewer than two live neighbors dies as if caused by under-population.

Any live cell with two or three live neighbors lives on to the next generation.

Any live cell with more than three live neighbors dies, as if by over-population.

Any dead cell with exactly three live neighbors becomes a live cell, as if by reproduction.

The next state is created by applying the above rules simultaneously to every cell in the current state, where births and deaths occur simultaneously. Given the current state of the `m x n` grid `board`, return the next state.


Example 1:
Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]

Example 2:
Input: board = [[1,1],[1,0]]
Output: [[1,1],[1,1]]

Constraints:
`m == board.length`
`n == board[i].length`
`1 <= m, n <= 25`
`board[i][j]` is `0` or `1`.

Follow up:
Could you solve it in-place? Remember that the board needs to be updated simultaneously: You cannot update some cells first and then use their updated values to update other cells.

In this question, we represent the board using a 2D array. In principle, the board is infinite, which would cause problems when the active area encroaches upon the border of the array (i.e., live cells reach the border). How would you address these problems?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `pattern` and a string `s`, find if `s` follows the same pattern.

Here follow means a full match, such that there is a bijection between a letter in `pattern` and a non-empty word in `s`.


Example 1:
Input: pattern = ""abba"", s = ""dog cat cat dog""
Output: true

Example 2:
Input: pattern = ""abba"", s = ""dog cat cat fish""
Output: false

Example 3:
Input: pattern = ""aaaa"", s = ""dog cat cat dog""
Output: false

Example 4:
Input: pattern = ""abba"", s = ""dog dog dog dog""
Output: false

Constraints:
`1 <= pattern.length <= 300`
`pattern` contains only lower-case English letters.

`1 <= s.length <= 3000`
`s` contains only lower-case English letters and spaces `' '`.

`s` does not contain any leading or trailing spaces.

All the words in `s` are separated by a single space.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `pattern` and a string `s`, return `true` if `s` matches the `pattern`.

A string `s` matches a `pattern` if there is some bijective mapping of single characters to strings such that if each character in `pattern` is replaced by the string it maps to, then the resulting string is `s`. A bijective mapping means that no two characters map to the same string, and no character maps to two different strings.


Example 1:
Input: pattern = ""abab"", s = ""redblueredblue""
Output: true
Explanation: One possible mapping is as follows:
'a' -> ""red""
'b' -> ""blue""

Example 2:
Input: pattern = ""aaaa"", s = ""asdasdasdasd""
Output: true
Explanation: One possible mapping is as follows:
'a' -> ""asd""

Example 3:
Input: pattern = ""abab"", s = ""asdasdasdasd""
Output: true
Explanation: One possible mapping is as follows:
'a' -> ""a""
'b' -> ""sdasd""
Note that 'a' and 'b' cannot both map to ""asd"" since the mapping is a bijection.


Example 4:
Input: pattern = ""aabb"", s = ""xyzabcxzyabc""
Output: false

Constraints:
`1 <= pattern.length, s.length <= 20`
`pattern` and `s` consist of only lower-case English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing the following Nim Game with your friend:
Initially, there is a heap of stones on the table.

You and your friend will alternate taking turns, and you go first.

On each turn, the person whose turn it is will remove 1 to 3 stones from the heap.

The one who removes the last stone is the winner.

Given `n`, the number of stones in the heap, return `true` if you can win the game assuming both you and your friend play optimally, otherwise return `false`.


Example 1:
Input: n = 4
Output: false
Explanation: These are the possible outcomes:
1. You remove 1 stone. Your friend removes 3 stones, including the last stone. Your friend wins.

2. You remove 2 stones. Your friend removes 2 stones, including the last stone. Your friend wins.

3. You remove 3 stones. Your friend removes the last stone. Your friend wins.

In all outcomes, your friend wins.


Example 2:
Input: n = 1
Output: true

Example 3:
Input: n = 2
Output: true

Constraints:
`1 <= n <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a Flip Game with your friend.

You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `""++""` into `""--""`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.

Return all possible states of the string `currentState` after one valid move. You may return the answer in any order. If there is no valid move, return an empty list `[]`.


Example 1:
Input: currentState = ""++++""
Output: [""--++"",""+--+"",""++--""]

Example 2:
Input: currentState = ""+""
Output: []

Constraints:
`1 <= currentState.length <= 500`
`currentState[i]` is either `'+'` or `'-'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a Flip Game with your friend.

You are given a string `currentState` that contains only `'+'` and `'-'`. You and your friend take turns to flip two consecutive `""++""` into `""--""`. The game ends when a person can no longer make a move, and therefore the other person will be the winner.

Return `true` if the starting player can guarantee a win, and `false` otherwise.


Example 1:
Input: currentState = ""++++""
Output: true
Explanation: The starting player can guarantee a win by flipping the middle ""++"" to become ""+--+"".


Example 2:
Input: currentState = ""+""
Output: false

Constraints:
`1 <= currentState.length <= 60`
`currentState[i]` is either `'+'` or `'-'`.

Follow up: Derive your algorithm's runtime complexity.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value and the median is the mean of the two middle values.

For example, for `arr = [2,3,4]`, the median is `3`.

For example, for `arr = [2,3]`, the median is `(2 + 3) / 2 = 2.5`.

Implement the MedianFinder class:
`MedianFinder()` initializes the `MedianFinder` object.

`void addNum(int num)` adds the integer `num` from the data stream to the data structure.

`double findMedian()` returns the median of all elements so far. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input
[""MedianFinder"", ""addNum"", ""addNum"", ""findMedian"", ""addNum"", ""findMedian""]
[[], [1], [2], [], [3], []]
Output
[null, null, null, 1.5, null, 2.0]
Explanation
MedianFinder medianFinder = new MedianFinder();
medianFinder.addNum(1);    // arr = [1]
medianFinder.addNum(2);    // arr = [1, 2]
medianFinder.findMedian(); // return 1.5 (i.e., (1 + 2) / 2)
medianFinder.addNum(3);    // arr[1, 2, 3]
medianFinder.findMedian(); // return 2.0

Constraints:
`-105 <= num <= 105`
There will be at least one element in the data structure before calling `findMedian`.

At most `5 * 104` calls will be made to `addNum` and `findMedian`.

Follow up:
If all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?
If `99%` of all integer numbers from the stream are in the range `[0, 100]`, how would you optimize your solution?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` binary grid `grid` where each `1` marks the home of one friend, return the minimal total travel distance.

The total travel distance is the sum of the distances between the houses of the friends and the meeting point.

The distance is calculated using Manhattan Distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.


Example 1:
Input: grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 6
Explanation: Given three friends living at (0,0), (0,4), and (2,2).

The point (0,2) is an ideal meeting point, as the total travel distance of 2 + 2 + 2 = 6 is minimal.

So return 6.


Example 2:
Input: grid = [[1,1]]
Output: 1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`grid[i][j]` is either `0` or `1`.

There will be at least two friends in the `grid`.",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that a binary tree can be serialized to a string and this string can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.


Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
Input: root = []
Output: []

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,2]
Output: [1,2]

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the length of the longest consecutive sequence path.

The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path needs to be from parent to child (cannot be the reverse).


Example 1:
Input: root = [1,null,3,2,4,null,null,null,5]
Output: 3
Explanation: Longest consecutive sequence path is 3-4-5, so return 3.


Example 2:
Input: root = [2,null,3,2,null,1]
Output: 2
Explanation: Longest consecutive sequence path is 2-3, not 3-2-1, so return 2.


Constraints:
The number of nodes in the tree is in the range `[1, 3 * 104]`.

`-3 * 104 <= Node.val <= 3 * 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing the Bulls and Cows game with your friend.

You write down a secret number and ask your friend to guess what the number is. When your friend makes a guess, you provide a hint with the following info:
The number of ""bulls"", which are digits in the guess that are in the correct position.

The number of ""cows"", which are digits in the guess that are in your secret number but are located in the wrong position. Specifically, the non-bull digits in the guess that could be rearranged such that they become bulls.

Given the secret number `secret` and your friend's guess `guess`, return the hint for your friend's guess.

The hint should be formatted as `""xAyB""`, where `x` is the number of bulls and `y` is the number of cows. Note that both `secret` and `guess` may contain duplicate digits.


Example 1:
Input: secret = ""1807"", guess = ""7810""
Output: ""1A3B""
Explanation: Bulls are connected with a '|' and cows are underlined:
""1807""
  |
""7810""

Example 2:
Input: secret = ""1123"", guess = ""0111""
Output: ""1A1B""
Explanation: Bulls are connected with a '|' and cows are underlined:
""1123""        ""1123""
  |      or     |
""0111""        ""0111""
Note that only one of the two unmatched 1s is counted as a cow since the non-bull digits can only be rearranged to allow one 1 to be a bull.


Example 3:
Input: secret = ""1"", guess = ""0""
Output: ""0A0B""

Example 4:
Input: secret = ""1"", guess = ""1""
Output: ""1A0B""

Constraints:
`1 <= secret.length, guess.length <= 1000`
`secret.length == guess.length`
`secret` and `guess` consist of digits only.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by deleting some or no elements without changing the order of the remaining elements. For example, `[3,6,2,7]` is a subsequence of the array `[0,3,1,6,2,2,7]`.


Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], therefore the length is 4.


Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

Constraints:
`1 <= nums.length <= 2500`
`-104 <= nums[i] <= 104`
Follow up:
Could you come up with the `O(n2)` solution?
Could you improve it to `O(n log(n))` time complexity?",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` that contains parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return all the possible results. You may return the answer in any order.


Example 1:
Input: s = ""()())()""
Output: [""(())()"",""()()()""]

Example 2:
Input: s = ""(a)())()""
Output: [""(a())()"",""(a)()()""]

Example 3:
Input: s = "")(""
Output: [""""]

Constraints:
`1 <= s.length <= 25`
`s` consists of lowercase English letters and parentheses `'('` and `')'`.

There will be at most `20` parentheses in `s`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `image` that is represented by a binary matrix with `0` as a white pixel and `1` as a black pixel.

The black pixels are connected (i.e., there is only one black region). Pixels are connected horizontally and vertically.

Given two integers `x` and `y` that represent the location of one of the black pixels, return the area of the smallest (axis-aligned) rectangle that encloses all black pixels.


Example 1:
Input: image = [[""0"",""0"",""1"",""0""],[""0"",""1"",""1"",""0""],[""0"",""1"",""0"",""0""]], x = 0, y = 2
Output: 6

Example 2:
Input: image = [[""1""]], x = 0, y = 0
Output: 1

Constraints:
`m == image.length`
`n == image[i].length`
`1 <= m, n <= 100`
`image[i][j]` is either `'0'` or `'1'`.

`1 <= x < m`
`1 <= y < n`
`image[x][y] == '1'.`
The black pixels in the `image` only form one component.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, find the sum of the elements between indices `left` and `right` inclusive, where `(left <= right)`.

Implement the `NumArray` class:
`NumArray(int[] nums)` initializes the object with the integer array `nums`.

`int sumRange(int left, int right)` returns the sum of the elements of the `nums` array in the range `[left, right]` inclusive (i.e., `sum(nums[left], nums[left + 1], ... , nums[right])`).


Example 1:
Input
[""NumArray"", ""sumRange"", ""sumRange"", ""sumRange""]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
Output
[null, 1, -1, -3]
Explanation
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // return 1 ((-2) + 0 + 3)
numArray.sumRange(2, 5); // return -1 (3 + (-5) + 2 + (-1)) 
numArray.sumRange(0, 5); // return -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))

Constraints:
`1 <= nums.length <= 104`
`-105 <= nums[i] <= 105`
`0 <= left <= right < nums.length`
At most `104` calls will be made to `sumRange`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.

Implement the NumMatrix class:
`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.

`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.


Example 1:
Input
[""NumMatrix"", ""sumRegion"", ""sumRegion"", ""sumRegion""]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
Output
[null, 8, 11, 12]
Explanation
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // return 8 (i.e sum of the red rectangele).

numMatrix.sumRegion(1, 1, 2, 2); // return 11 (i.e sum of the green rectangele).

numMatrix.sumRegion(1, 2, 2, 4); // return 12 (i.e sum of the blue rectangele).


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 200`
`-105 <= matrix[i][j] <= 105`
`0 <= row1 <= row2 < m`
`0 <= col1 <= col2 < n`
At most `104` calls will be made to `sumRegion`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an empty 2D binary grid `grid` of size `m x n`. The grid represents a map where `0`'s represent water and `1`'s represent land. Initially, all the cells of `grid` are water cells (i.e., all the cells are `0`'s).

We may perform an add land operation which turns the water at position into a land. You are given an array `positions` where `positions[i] = [ri, ci]` is the position `(ri, ci)` at which we should operate the `ith` operation.

Return an array of integers `answer` where `answer[i]` is the number of islands after turning the cell `(ri, ci)` into a land.

An island is surrounded by water and is formed by connecting adjacent lands horizontally or vertically. You may assume all four edges of the grid are all surrounded by water.


Example 1:
Input: m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]]
Output: [1,1,2,3]
Explanation:
Initially, the 2d grid is filled with water.

- Operation #1: addLand(0, 0) turns the water at grid[0][0] into a land. We have 1 island.

- Operation #2: addLand(0, 1) turns the water at grid[0][1] into a land. We still have 1 island.

- Operation #3: addLand(1, 2) turns the water at grid[1][2] into a land. We have 2 islands.

- Operation #4: addLand(2, 1) turns the water at grid[2][1] into a land. We have 3 islands.


Example 2:
Input: m = 1, n = 1, positions = [[0,0]]
Output: [1]

Constraints:
`1 <= m, n, positions.length <= 104`
`1 <= m * n <= 104`
`positions[i].length == 2`
`0 <= ri < m`
`0 <= ci < n`
Follow up: Could you solve it in time complexity `O(k log(mn))`, where `k == positions.length`?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Additive number is a string whose digits can form additive sequence.

A valid additive sequence should contain at least three numbers. Except for the first two numbers, each subsequent number in the sequence must be the sum of the preceding two.

Given a string containing only digits `'0'-'9'`, write a function to determine if it's an additive number.

Note: Numbers in the additive sequence cannot have leading zeros, so sequence `1, 2, 03` or `1, 02, 3` is invalid.


Example 1:
Input: ""112358""
Output: true
Explanation: The digits can form an additive sequence: 1, 1, 2, 3, 5, 8. 
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

Example 2:
Input: ""199100199""
Output: true
Explanation: The additive sequence is: 1, 99, 100, 199. 
             1 + 99 = 100, 99 + 100 = 199

Constraints:
`num` consists only of digits `'0'-'9'`.

`1 <= num.length <= 35`
Follow up:
How would you handle overflow for very large input integers?",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` and two types of queries where you should update the value of an index in the array, and retrieve the sum of a range in the array.

Implement the `NumArray` class:
`NumArray(int[] nums)` initializes the object with the integer array `nums`.

`void update(int index, int val)` updates the value of `nums[index]` to be `val`.

`int sumRange(int left, int right)` returns the sum of the subarray `nums[left, right]` (i.e., `nums[left] + nums[left + 1], ..., nums[right]`).


Example 1:
Input
[""NumArray"", ""sumRange"", ""update"", ""sumRange""]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
Output
[null, 9, null, 8]
Explanation
NumArray numArray = new NumArray([1, 3, 5]);
numArray.sumRange(0, 2); // return 9 = sum([1,3,5])
numArray.update(1, 2);   // nums = [1,2,5]
numArray.sumRange(0, 2); // return 8 = sum([1,2,5])

Constraints:
`1 <= nums.length <= 3 * 104`
`-100 <= nums[i] <= 100`
`0 <= index < nums.length`
`-100 <= val <= 100`
`0 <= left <= right < nums.length`
At most `3 * 104` calls will be made to `update` and `sumRange`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D matrix `matrix`, find the sum of the elements inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.

Implement the NumMatrix class:
`NumMatrix(int[][] matrix)` initializes the object with the integer matrix `matrix`.

`void update(int row, int col, int val)` updates the value of `matrix[row][col]` to be `val`.

`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array inside the rectangle defined by its upper left corner `(row1, col1)` and lower right corner `(row2, col2)`.


Example 1:
Input
[""NumMatrix"", ""sumRegion"", ""update"", ""sumRegion""]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [3, 2, 2], [2, 1, 4, 3]]
Output
[null, 8, null, 10]
Explanation
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // return 8
numMatrix.update(3, 2, 2);
numMatrix.sumRegion(2, 1, 4, 3); // return 10

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 200`
`-105 <= matrix[i][j] <= 105`
`0 <= row < m`
`0 <= col < n`
`-105 <= val <= 105`
`0 <= row1 <= row2 < m`
`0 <= col1 <= col2 < n`
At most `104` calls will be made to `sumRegion` and `update`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:
After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [1,2,3,0,2]
Output: 3
Explanation: transactions = [buy, sell, cooldown, buy, sell]

Example 2:
Input: prices = [1]
Output: 0

Constraints:
`1 <= prices.length <= 5000`
`0 <= prices[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.

Given a tree of `n` nodes labelled from `0` to `n - 1`, and an array of `n - 1` `edges` where `edges[i] = [ai, bi]` indicates that there is an undirected edge between the two nodes `ai` and `bi` in the tree, you can choose any node of the tree as the root. When you select a node `x` as the root, the result tree has height `h`. Among all possible rooted trees, those with minimum height (i.e. `min(h)`)  are called minimum height trees (MHTs).

Return a list of all MHTs' root labels. You can return the answer in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.


Example 1:
Input: n = 4, edges = [[1,0],[1,2],[1,3]]
Output: [1]
Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.


Example 2:
Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
Output: [3,4]

Example 3:
Input: n = 1, edges = []
Output: [0]

Example 4:
Input: n = 2, edges = [[0,1]]
Output: [0,1]

Constraints:
`1 <= n <= 2 * 104`
`edges.length == n - 1`
`0 <= ai, bi < n`
`ai != bi`
All the pairs `(ai, bi)` are distinct.

The given input is guaranteed to be a tree and there will be no repeated edges.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sparse matrices `mat1` of size `m x k` and `mat2` of size `k x n`, return the result of `mat1 x mat2`. You may assume that multiplication is always possible.


Example 1:
Input: mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]
Output: [[7,0,0],[-7,0,3]]

Example 2:
Input: mat1 = [[0]], mat2 = [[0]]
Output: [[0]]

Constraints:
`m == mat1.length`
`k == mat1[i].length == mat2.length`
`n == mat2[i].length`
`1 <= m, n, k <= 100`
`-100 <= mat1[i][j], mat2[i][j] <= 100`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `n` balloons, indexed from `0` to `n - 1`. Each balloon is painted with a number on it represented by an array `nums`. You are asked to burst all the balloons.

If you burst the `ith` balloon, you will get `nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` goes out of bounds of the array, then treat it as if there is a balloon with a `1` painted on it.

Return the maximum coins you can collect by bursting the balloons wisely.


Example 1:
Input: nums = [3,1,5,8]
Output: 167
Explanation:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
coins =  3*1*5    +   3*5*8   +  1*3*8  + 1*8*1 = 167

Example 2:
Input: nums = [1,5]
Output: 10

Constraints:
`n == nums.length`
`1 <= n <= 500`
`0 <= nums[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n` and an array of integers `primes`, return the `nth` super ugly number.

Super ugly number is a positive number whose all prime factors are in the array `primes`.

The `nth` super ugly number is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: n = 12, primes = [2,7,13,19]
Output: 32
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers given primes == [2,7,13,19].


Example 2:
Input: n = 1, primes = [2,3,5]
Output: 1
Explanation: 1 is a super ugly number for any given primes.


Constraints:
`1 <= n <= 106`
`1 <= primes.length <= 100`
`2 <= primes[i] <= 1000`
`primes[i]` is guaranteed to be a prime number.

All the values of `primes` are unique and sorted in ascending order.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]

Example 2:
Input: root = [3,9,8,4,0,1,7]
Output: [[4],[9],[3,0,1],[8],[7]]

Example 3:
Input: root = [3,9,8,4,0,1,7,null,null,null,2,5]
Output: [[4],[9,5],[3,0,1],[8,2],[7]]

Example 4:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 100]`.

`-100 <= Node.val <= 100`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` and you have to return a new `counts` array. The `counts` array has the property where `counts[i]` is the number of smaller elements to the right of `nums[i]`.


Example 1:
Input: nums = [5,2,6,1]
Output: [2,1,1,0]
Explanation:
To the right of 5 there are 2 smaller elements (2 and 1).

To the right of 2 there is only 1 smaller element (1).

To the right of 6 there is 1 smaller element (1).

To the right of 1 there is 0 smaller element.


Example 2:
Input: nums = [-1]
Output: [0]

Example 3:
Input: nums = [-1,-1]
Output: [0,0]

Constraints:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, remove duplicate letters so that every letter appears once and only once. You must make sure your result is the smallest in lexicographical order among all possible results.

Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

Example 1:
Input: s = ""bcabc""
Output: ""abc""

Example 2:
Input: s = ""cbacdcbc""
Output: ""acdb""

Constraints:
`1 <= s.length <= 104`
`s` consists of lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` grid `grid` of values `0`, `1`, or `2`, where:
each `0` marks an empty land that you can pass by freely,
each `1` marks a building that you cannot pass through, and
each `2` marks an obstacle that you cannot pass through.

You want to build a house on an empty land that reaches all buildings in the shortest total travel distance. You can only move up, down, left, and right.

Return the shortest travel distance for such a house. If it is not possible to build such a house according to the above rules, return `-1`.

The total travel distance is the sum of the distances between the houses of the friends and the meeting point.

The distance is calculated using Manhattan Distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.


Example 1:
Input: grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 7
Explanation: Given three buildings at (0,0), (0,4), (2,2), and an obstacle at (0,2).

The point (1,2) is an ideal empty land to build a house, as the total travel distance of 3+3+1=7 is minimal.

So return 7.


Example 2:
Input: grid = [[1,0]]
Output: 1

Example 3:
Input: grid = [[1]]
Output: -1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`
`grid[i][j]` is either `0`, `1`, or `2`.

There will be at least one building in the `grid`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array `words`, return the maximum value of `length(word[i]) * length(word[j])` where the two words do not share common letters. If no such two words exist, return `0`.


Example 1:
Input: words = [""abcw"",""baz"",""foo"",""bar"",""xtfn"",""abcdef""]
Output: 16
Explanation: The two words can be ""abcw"", ""xtfn"".


Example 2:
Input: words = [""a"",""ab"",""abc"",""d"",""cd"",""bcd"",""abcd""]
Output: 4
Explanation: The two words can be ""ab"", ""cd"".


Example 3:
Input: words = [""a"",""aa"",""aaa"",""aaaa""]
Output: 0
Explanation: No such pair of words.


Constraints:
`2 <= words.length <= 1000`
`1 <= words[i].length <= 1000`
`words[i]` consists only of lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` bulbs that are initially off. You first turn on all the bulbs, then you turn off every second bulb.

On the third round, you toggle every third bulb (turning on if it's off or turning off if it's on). For the `ith` round, you toggle every `i` bulb. For the `nth` round, you only toggle the last bulb.

Return the number of bulbs that are on after `n` rounds.


Example 1:
Input: n = 3
Output: 1
Explanation: At first, the three bulbs are [off, off, off].

After the first round, the three bulbs are [on, on, on].

After the second round, the three bulbs are [on, off, on].

After the third round, the three bulbs are [on, off, off]. 
So you should return 1 because there is only one bulb is on.


Example 2:
Input: n = 0
Output: 0

Example 3:
Input: n = 1
Output: 1

Constraints:
`0 <= n <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"A word's generalized abbreviation can be constructed by taking any number of non-overlapping substrings and replacing them with their respective lengths. For example, `""abcde""` can be abbreviated into `""a3e""` (`""bcd""` turned into `""3""`), `""1bcd1""` (`""a""` and `""e""` both turned into `""1""`), and `""23""` (`""ab""` turned into `""2""` and `""cde""` turned into `""3""`).

Given a string `word`, return a list of all the possible generalized abbreviations of `word`. Return the answer in any order.


Example 1:
Input: word = ""word""
Output: [""4"",""3d"",""2r1"",""2rd"",""1o2"",""1o1d"",""1or1"",""1ord"",""w3"",""w2d"",""w1r1"",""w1rd"",""wo2"",""wo1d"",""wor1"",""word""]

Example 2:
Input: word = ""a""
Output: [""1"",""a""]

Constraints:
`1 <= word.length <= 15`
`word` consists of only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two integer arrays `nums1` and `nums2` of lengths `m` and `n` respectively. `nums1` and `nums2` represent the digits of two numbers. You are also given an integer `k`.

Create the maximum number of length `k <= m + n` from digits of the two numbers. The relative order of the digits from the same array must be preserved.

Return an array of the `k` digits representing the answer.


Example 1:
Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
Output: [9,8,6,5,3]

Example 2:
Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
Output: [6,7,6,0,4]

Example 3:
Input: nums1 = [3,9], nums2 = [8,9], k = 3
Output: [9,8,9]

Constraints:
`m == nums1.length`
`n == nums2.length`
`1 <= m, n <= 500`
`0 <= nums1[i], nums2[i] <= 9`
`1 <= k <= m + n`
Follow up: Try to optimize your time and space complexity.",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `coins` representing coins of different denominations and an integer `amount` representing a total amount of money.

Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return `-1`.

You may assume that you have an infinite number of each kind of coin.


Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coins = [2], amount = 3
Output: -1

Example 3:
Input: coins = [1], amount = 0
Output: 0

Example 4:
Input: coins = [1], amount = 1
Output: 1

Example 5:
Input: coins = [1], amount = 2
Output: 2

Constraints:
`1 <= coins.length <= 12`
`1 <= coins[i] <= 231 - 1`
`0 <= amount <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a graph of `n` nodes. You are given an integer `n` and an array `edges` where `edges[i] = [ai, bi]` indicates that there is an edge between `ai` and `bi` in the graph.

Return the number of connected components in the graph.


Example 1:
Input: n = 5, edges = [[0,1],[1,2],[3,4]]
Output: 2

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1

Constraints:
`1 <= n <= 2000`
`1 <= edges.length <= 5000`
`edges[i].length == 2`
`0 <= ai <= bi < n`
`ai != bi`
There are no repeated edges.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.

You may assume the input array always has a valid answer.


Example 1:
Input: nums = [1,5,1,1,6,4]
Output: [1,6,1,5,1,4]
Explanation: [1,4,1,5,1,6] is also accepted.


Example 2:
Input: nums = [1,3,2,2,3,1]
Output: [2,3,1,3,1,2]

Constraints:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 5000`
It is guaranteed that there will be an answer for the given input `nums`.

Follow Up: Can you do it in `O(n)` time and/or in-place with `O(1)` extra space?",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`, return the maximum length of a subarray that sums to `k`. If there isn't one, return `0` instead.


Example 1:
Input: nums = [1,-1,5,-2,3], k = 3
Output: 4
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.


Example 2:
Input: nums = [-2,-1,2,1], k = 1
Output: 2
Explanation: The subarray [-1, 2] sums to 1 and is the longest.


Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`-105 <= k <= 105`
Follow Up: Can you do it in `O(n)` time?",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return `true` if it is a power of three. Otherwise, return `false`.

An integer `n` is a power of three, if there exists an integer `x` such that `n == 3x`.


Example 1:
Input: n = 27
Output: true

Example 2:
Input: n = 0
Output: false

Example 3:
Input: n = 9
Output: true

Example 4:
Input: n = 45
Output: false

Constraints:
`-231 <= n <= 231 - 1`
Follow up: Could you solve it without loops/recursion?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and two integers `lower` and `upper`, return the number of range sums that lie in `[lower, upper]` inclusive.

Range sum `S(i, j)` is defined as the sum of the elements in `nums` between indices `i` and `j` inclusive, where `i <= j`.


Example 1:
Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2], and [0,2] and their respective sums are: -2, -1, 2.


Example 2:
Input: nums = [0], lower = 0, upper = 0
Output: 1

Constraints:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
`-3 * 104 <= lower <= upper <= 3 * 104`
Follow up: A naive algorithm of `O(n2)` is trivial, Could you do better than that?",0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a singly linked list, group all the nodes with odd indices together followed by the nodes with even indices, and return the reordered list.

The first node is considered odd, and the second node is even, and so on.

Note that the relative order inside both the even and odd groups should remain as it was in the input.


Example 1:
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

Example 2:
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]

Constraints:
The number of nodes in the linked list is in the range `[0, 104]`.

`-106 <= Node.val <= 106`
Follow up: Could you solve it in `O(1)` space complexity and `O(nodes)` time complexity?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` integers `matrix`, return the length of the longest increasing path in `matrix`.

From each cell, you can either move in four directions: left, right, up, or down. You may not move diagonally or move outside the boundary (i.e., wrap-around is not allowed).


Example 1:
Input: matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest increasing path is `[1, 2, 6, 9]`.


Example 2:
Input: matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest increasing path is `[3, 4, 5, 6]`. Moving diagonally is not allowed.


Example 3:
Input: matrix = [[1]]
Output: 1

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 200`
`0 <= matrix[i][j] <= 231 - 1`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"Given a sorted integer array `nums` and an integer `n`, add/patch elements to the array such that any number in the range `[1, n]` inclusive can be formed by the sum of some elements in the array.

Return the minimum number of patches required.


Example 1:
Input: nums = [1,3], n = 6
Output: 1
Explanation:
Combinations of nums are [1], [3], [1,3], which form possible sums of: 1, 3, 4.

Now if we add/patch 2 to nums, the combinations are: [1], [2], [3], [1,3], [2,3], [1,2,3].

Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].

So we only need 1 patch.


Example 2:
Input: nums = [1,5,10], n = 20
Output: 2
Explanation: The two patches can be [2, 4].


Example 3:
Input: nums = [1,2,2], n = 5
Output: 0

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 104`
`nums` is sorted in ascending order.

`1 <= n <= 231 - 1`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"One way to serialize a binary tree is to use preorder traversal. When we encounter a non-null node, we record the node's value. If it is a null node, we record using a sentinel value such as `'#'`.

For example, the above binary tree can be serialized to the string `""9,3,4,#,#,1,#,#,2,#,6,#,#""`, where `'#'` represents a null node.

Given a string of comma-separated values `preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.

It is guaranteed that each comma-separated value in the string must be either an integer or a character `'#'` representing null pointer.

You may assume that the input format is always valid.

For example, it could never contain two consecutive commas, such as `""1,,3""`.


Example 1:
Input: preorder = ""9,3,4,#,#,1,#,#,2,#,6,#,#""
Output: true

Example 2:
Input: preorder = ""1,#""
Output: false

Example 3:
Input: preorder = ""9,#,#,1""
Output: false

Constraints:
`1 <= preorder.length <= 104`
`preoder` consist of integers in the range `[0, 100]` and `'#'` separated by commas `','`.

Follow up: Find an algorithm without reconstructing the tree.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a list of airline `tickets` where `tickets[i] = [fromi, toi]` represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.

All of the tickets belong to a man who departs from `""JFK""`, thus, the itinerary must begin with `""JFK""`. If there are multiple valid itineraries, you should return the itinerary that has the smallest lexical order when read as a single string.

For example, the itinerary `[""JFK"", ""LGA""]` has a smaller lexical order than `[""JFK"", ""LGB""]`.

You may assume all tickets form at least one valid itinerary. You must use all the tickets once and only once.


Example 1:
Input: tickets = [[""MUC"",""LHR""],[""JFK"",""MUC""],[""SFO"",""SJC""],[""LHR"",""SFO""]]
Output: [""JFK"",""MUC"",""LHR"",""SFO"",""SJC""]

Example 2:
Input: tickets = [[""JFK"",""SFO""],[""JFK"",""ATL""],[""SFO"",""ATL""],[""ATL"",""JFK""],[""ATL"",""SFO""]]
Output: [""JFK"",""ATL"",""JFK"",""SFO"",""ATL"",""SFO""]
Explanation: Another possible reconstruction is [""JFK"",""SFO"",""ATL"",""JFK"",""ATL"",""SFO""] but it is larger in lexical order.


Constraints:
`1 <= tickets.length <= 300`
`tickets[i].length == 2`
`fromi.length == 3`
`toi.length == 3`
`fromi` and `toi` consist of uppercase English letters.

`fromi != toi`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the root of a binary tree, find the largest subtree, which is also a Binary Search Tree (BST), where the largest means subtree has the largest number of nodes.

A Binary Search Tree (BST) is a tree in which all the nodes follow the below-mentioned properties:
The left subtree values are less than the value of their parent (root) node's value.

The right subtree values are greater than the value of their parent (root) node's value.

Note: A subtree must include all of its descendants.

Follow up: Can you figure out ways to solve it with O(n) time complexity?

Example 1:
Input: root = [10,5,15,1,8,null,7]
Output: 3
Explanation: The Largest BST Subtree in this case is the highlighted one. The return value is the subtree's size, which is 3.


Example 2:
Input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]
Output: 2

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-104 <= Node.val <= 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of integers `distance`.

You start at point `(0,0)` on an X-Y plane and you move `distance[0]` meters to the north, then `distance[1]` meters to the west, `distance[2]` meters to the south, `distance[3]` meters to the east, and so on. In other words, after each move, your direction changes counter-clockwise.

Return `true` if your path crosses itself, and `false` if it does not.


Example 1:
Input: distance = [2,1,1,2]
Output: true

Example 2:
Input: distance = [1,2,3,4]
Output: false

Example 3:
Input: distance = [1,1,1,1]
Output: true

Constraints:
`1 <= distance.length <= 500`
`1 <= distance[i] <= 500`
Follow up: Could you write a one-pass algorithm with `O(1)` extra space?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of unique words, return all the pairs of the distinct indices `(i, j)` in the given list, so that the concatenation of the two words `words[i] + words[j]` is a palindrome.


Example 1:
Input: words = [""abcd"",""dcba"",""lls"",""s"",""sssll""]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindromes are [""dcbaabcd"",""abcddcba"",""slls"",""llssssll""]

Example 2:
Input: words = [""bat"",""tab"",""cat""]
Output: [[0,1],[1,0]]
Explanation: The palindromes are [""battab"",""tabbat""]

Example 3:
Input: words = [""a"",""""]
Output: [[0,1],[1,0]]

Constraints:
`1 <= words.length <= 5000`
`0 <= words[i].length <= 300`
`words[i]` consists of lower-case English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The thief has found himself a new place for his thievery again. There is only one entrance to this area, called `root`.

Besides the `root`, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if two directly-linked houses were broken into on the same night.

Given the `root` of the binary tree, return the maximum amount of money the thief can rob without alerting the police.


Example 1:
Input: root = [3,2,3,null,3,null,1]
Output: 7
Explanation: Maximum amount of money the thief can rob = 3 + 3 + 1 = 7.


Example 2:
Input: root = [3,4,5,1,3,null,1]
Output: 9
Explanation: Maximum amount of money the thief can rob = 4 + 5 = 9.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`0 <= Node.val <= 104`",0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `num`, return an array of the number of `1`'s in the binary representation of every number in the range `[0, num]`.


Example 1:
Input: num = 2
Output: [0,1,1]
Explanation:
0 --> 0
1 --> 1
2 --> 10

Example 2:
Input: num = 5
Output: [0,1,1,2,1,2]
Explanation:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101

Constraints:
`0 <= num <= 105`
Follow up:
It is very easy to come up with a solution with run time `O(32n)`. Can you do it in linear time `O(n)` and possibly in a single pass?
Could you solve it in `O(n)` space complexity?
Can you do it without using any built-in function (i.e., like `__builtin_popcount` in C++)?",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.

The depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth.

Return the sum of each integer in `nestedList` multiplied by its depth.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: 10
Explanation: Four 1's at depth 2, one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.


Example 2:
Input: nestedList = [1,[4,[6]]]
Output: 27
Explanation: One 1 at depth 1, one 4 at depth 2, and one 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.


Example 3:
Input: nestedList = [0]
Output: 0

Constraints:
`1 <= nestedList.length <= 50`
The values of the integers in the nested list is in the range `[-100, 100]`.

The maximum depth of any integer is less than or equal to `50`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer `k`, return the length of the longest substring of `s` that contains at most `k` distinct characters.


Example 1:
Input: s = ""eceba"", k = 2
Output: 3
Explanation: The substring is ""ece"" with length 3.


Example 2:
Input: s = ""aa"", k = 1
Output: 2
Explanation: The substring is ""aa"" with length 2.


Constraints:
`1 <= s.length <= 5 * 104`
`0 <= k <= 50`",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists. Implement an iterator to flatten it.

Implement the `NestedIterator` class:
`NestedIterator(List<NestedInteger> nestedList)` Initializes the iterator with the nested list `nestedList`.

`int next()` Returns the next integer in the nested list.

`boolean hasNext()` Returns `true` if there are still some integers in the nested list and `false` otherwise.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].


Example 2:
Input: nestedList = [1,[4,[6]]]
Output: [1,4,6]
Explanation: By calling next repeatedly until hasNext returns false, the order of elements returned by next should be: [1,4,6].


Constraints:
`1 <= nestedList.length <= 500`
The values of the integers in the nested list is in the range `[-106, 106]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return `true` if it is a power of four. Otherwise, return `false`.

An integer `n` is a power of four, if there exists an integer `x` such that `n == 4x`.


Example 1:
Input: n = 16
Output: true

Example 2:
Input: n = 5
Output: false

Example 3:
Input: n = 1
Output: true

Constraints:
`-231 <= n <= 231 - 1`
Follow up: Could you solve it without loops/recursion?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, break it into the sum of `k` positive integers, where `k >= 2`, and maximize the product of those integers.

Return the maximum product you can get.


Example 1:
Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.


Example 2:
Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.


Constraints:
`2 <= n <= 58`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function that reverses a string. The input string is given as an array of characters `s`.


Example 1:
Input: s = [""h"",""e"",""l"",""l"",""o""]
Output: [""o"",""l"",""l"",""e"",""h""]

Example 2:
Input: s = [""H"",""a"",""n"",""n"",""a"",""h""]
Output: [""h"",""a"",""n"",""n"",""a"",""H""]

Constraints:
`1 <= s.length <= 105`
`s[i]` is a printable ascii character.

Follow up: Do not allocate extra space for another array. You must do this by modifying the input array in-place with `O(1)` extra memory.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, reverse only all the vowels in the string and return it.

The vowels are `'a'`, `'e'`, `'i'`, `'o'`, and `'u'`, and they can appear in both cases.


Example 1:
Input: s = ""hello""
Output: ""holle""

Example 2:
Input: s = ""leetcode""
Output: ""leotcede""

Constraints:
`1 <= s.length <= 3 * 105`
`s` consist of printable ASCII characters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the `MovingAverage` class:
`MovingAverage(int size)` Initializes the object with the size of the window `size`.

`double next(int val)` Returns the moving average of the last `size` values of the stream.


Example 1:
Input
[""MovingAverage"", ""next"", ""next"", ""next"", ""next""]
[[3], [1], [10], [3], [5]]
Output
[null, 1.0, 5.5, 4.66667, 6.0]
Explanation
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3

Constraints:
`1 <= size <= 1000`
`-105 <= val <= 105`
At most `104` calls will be made to `next`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`, return the `k` most frequent elements. You may return the answer in any order.


Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
Output: [1,2]

Example 2:
Input: nums = [1], k = 1
Output: [1]

Constraints:
`1 <= nums.legth <= 105`
`k` is in the range `[1, the number of unique elements in the array]`.

It is guaranteed that the answer is unique.

Follow up: Your algorithm's time complexity must be better than `O(n log n)`, where n is the array's size.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Assume the following rules are for the tic-tac-toe game on an `n x n` board between two players:
A move is guaranteed to be valid and is placed on an empty block.

Once a winning condition is reached, no more moves are allowed.

A player who succeeds in placing `n` of their marks in a horizontal, vertical, or diagonal row wins the game.

Implement the `TicTacToe` class:
`TicTacToe(int n)` Initializes the object the size of the board `n`.

`int move(int row, int col, int player)` Indicates that player with id `player` plays at the cell `(row, col)` of the board. The move is guaranteed to be a valid move.

Follow up:
Could you do better than `O(n2)` per `move()` operation?

Example 1:
Input
[""TicTacToe"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""]
[[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]]
Output
[null, 0, 0, 0, 0, 0, 0, 1]
Explanation
TicTacToe ticTacToe = new TicTacToe(3);
Assume that player 1 is ""X"" and player 2 is ""O"" in the board.

ticTacToe.move(0, 0, 1); // return 0 (no one wins)
|X| | |
| | | |    // Player 1 makes a move at (0, 0).

| | | |
ticTacToe.move(0, 2, 2); // return 0 (no one wins)
|X| |O|
| | | |    // Player 2 makes a move at (0, 2).

| | | |
ticTacToe.move(2, 2, 1); // return 0 (no one wins)
|X| |O|
| | | |    // Player 1 makes a move at (2, 2).

| | |X|
ticTacToe.move(1, 1, 2); // return 0 (no one wins)
|X| |O|
| |O| |    // Player 2 makes a move at (1, 1).

| | |X|
ticTacToe.move(2, 0, 1); // return 0 (no one wins)
|X| |O|
| |O| |    // Player 1 makes a move at (2, 0).

|X| |X|
ticTacToe.move(1, 0, 2); // return 0 (no one wins)
|X| |O|
|O|O| |    // Player 2 makes a move at (1, 0).

|X| |X|
ticTacToe.move(2, 1, 1); // return 1 (player 1 wins)
|X| |O|
|O|O| |    // Player 1 makes a move at (2, 1).

|X|X|X|

Constraints:
`2 <= n <= 100`
player is `1` or `2`.

`1 <= row, col <= n`
`(row, col)` are unique for each different call to `move`.

At most `n2` calls will be made to `move`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.


Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.


Constraints:
`1 <= nums1.length, nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 1000`",0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `nums1` and `nums2`, return an array of their intersection. Each element in the result must appear as many times as it shows in both arrays and you may return the result in any order.


Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2,2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.


Constraints:
`1 <= nums1.length, nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 1000`
Follow up:
What if the given array is already sorted? How would you optimize your algorithm?
What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?
What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?",0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Android devices have a special lock screen with a `3 x 3` grid of dots. Users can set an ""unlock pattern"" by connecting the dots in a specific sequence, forming a series of joined line segments where each segment's endpoints are two consecutive dots in the sequence. A sequence of `k` dots is a valid unlock pattern if both of the following are true:
All the dots in the sequence are distinct.

If the line segment connecting two consecutive dots in the sequence passes through any other dot, the other dot must have previously appeared in the sequence. No jumps through non-selected dots are allowed.

Here are some example valid and invalid unlock patterns:
The 1st pattern `[4,1,3,6]` is invalid because the line connecting dots `1` and `3` pass through dot `2`, but dot `2` did not previously appear in the sequence.

The 2nd pattern `[4,1,9,2]` is invalid because the line connecting dots `1` and `9` pass through dot `5`, but dot `5` did not previously appear in the sequence.

The 3rd pattern `[2,4,1,3,6]` is valid because it follows the conditions. The line connecting dots `1` and `3` meets the condition because dot `2` previously appeared in the sequence.

The 4th pattern `[6,5,4,1,9,2]` is valid because it follows the conditions. The line connecting dots `1` and `9` meets the condition because dot `5` previously appeared in the sequence.

Given two integers `m` and `n`, return the number of unique and valid unlock patterns of the Android grid lock screen that consist of at least `m` keys and at most `n` keys.

Two unlock patterns are considered unique if there is a dot in one sequence that is not in the other, or the order of the dots is different.


Example 1:
Input: m = 1, n = 1
Output: 9

Example 2:
Input: m = 1, n = 2
Output: 65

Constraints:
`1 <= m, n <= 9`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a data stream input of non-negative integers `a1, a2, ..., an`, summarize the numbers seen so far as a list of disjoint intervals.

Implement the `SummaryRanges` class:
`SummaryRanges()` Initializes the object with an empty stream.

`void addNum(int val)` Adds the integer `val` to the stream.

`int[][] getIntervals()` Returns a summary of the integers in the stream currently as a list of disjoint intervals `[starti, endi]`.


Example 1:
Input
[""SummaryRanges"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals""]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
Output
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]], null, [[1, 3], [7, 7]], null, [[1, 3], [6, 7]]]
Explanation
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges.addNum(1);      // arr = [1]
summaryRanges.getIntervals(); // return [[1, 1]]
summaryRanges.addNum(3);      // arr = [1, 3]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3]]
summaryRanges.addNum(7);      // arr = [1, 3, 7]
summaryRanges.getIntervals(); // return [[1, 1], [3, 3], [7, 7]]
summaryRanges.addNum(2);      // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // return [[1, 3], [7, 7]]
summaryRanges.addNum(6);      // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // return [[1, 3], [6, 7]]

Constraints:
`0 <= val <= 104`
At most `3 * 104` calls will be made to `addNum` and `getIntervals`.

Follow up: What if there are lots of merges and the number of disjoint intervals is small compared to the size of the data stream?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a Snake game that is played on a device with screen size `height x width`. Play the game online if you are not familiar with the game.

The snake is initially positioned at the top left corner `(0, 0)` with a length of `1` unit.

You are given an array `food` where `food[i] = (ri, ci)` is the row and column position of a piece of food that the snake can eat. When a snake eats a piece of food, its length and the game's score both increase by `1`.

Each piece of food appears one by one on the screen, meaning the second piece of food will not appear until the snake eats the first piece of food.

When a piece of food appears on the screen, it is guaranteed that it will not appear on a block occupied by the snake.

The game is over if the snake goes out of bounds (hits a wall) or if its head occupies a space that its body occupies after moving (i.e. a snake of length 4 cannot run into itself).

Implement the `SnakeGame` class:
`SnakeGame(int width, int height, int[][] food)` Initializes the object with a screen of size `height x width` and the positions of the `food`.

`int move(String direction)` Returns the score of the game after applying one `direction` move by the snake. If the game is over, return `-1`.


Example 1:
Input
[""SnakeGame"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""]
[[3, 2, [[1, 2], [0, 1]]], [""R""], [""D""], [""R""], [""U""], [""L""], [""U""]]
Output
[null, 0, 0, 1, 1, 2, -1]
Explanation
SnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);
snakeGame.move(""R""); // return 0
snakeGame.move(""D""); // return 0
snakeGame.move(""R""); // return 1, snake eats the first piece of food. The second piece of food appears
                     // at (0, 1).

snakeGame.move(""U""); // return 1
snakeGame.move(""L""); // return 2, snake eats the second food. No more food appears.

snakeGame.move(""U""); // return -1, game over because snake collides with border

Constraints:
`1 <= width, height <= 104`
`1 <= food.length <= 50`
`food[i].length == 2`
`0 <= ri < height`
`0 <= ci < width`
`direction.length == 1`
`direction` is `'U'`, `'D'`, `'L'`, or `'R'`.

At most `104` calls will be made to `move`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a 2D array of integers `envelopes` where `envelopes[i] = [wi, hi]` represents the width and the height of an envelope.

One envelope can fit into another if and only if both the width and height of one envelope are greater than the other envelope's width and height.

Return the maximum number of envelopes you can Russian doll (i.e., put one inside the other).

Note: You cannot rotate an envelope.


Example 1:
Input: envelopes = [[5,4],[6,4],[6,7],[2,3]]
Output: 3
Explanation: The maximum number of envelopes you can Russian doll is `3` ([2,3] => [5,4] => [6,7]).


Example 2:
Input: envelopes = [[1,1],[1,1],[1,1]]
Output: 1

Constraints:
`1 <= envelopes.length <= 5000`
`envelopes[i].length == 2`
`1 <= wi, hi <= 104`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a simplified version of Twitter where users can post tweets, follow/unfollow another user, and is able to see the `10` most recent tweets in the user's news feed.

Implement the `Twitter` class:
`Twitter()` Initializes your twitter object.

`void postTweet(int userId, int tweetId)` Composes a new tweet with ID `tweetId` by the user `userId`. Each call to this function will be made with a unique `tweetId`.

`List<Integer> getNewsFeed(int userId)` Retrieves the `10` most recent tweet IDs in the user's news feed. Each item in the news feed must be posted by users who the user followed or by the user themself. Tweets must be ordered from most recent to least recent.

`void follow(int followerId, int followeeId)` The user with ID `followerId` started following the user with ID `followeeId`.

`void unfollow(int followerId, int followeeId)` The user with ID `followerId` started unfollowing the user with ID `followeeId`.


Example 1:
Input
[""Twitter"", ""postTweet"", ""getNewsFeed"", ""follow"", ""postTweet"", ""getNewsFeed"", ""unfollow"", ""getNewsFeed""]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
Output
[null, null, [5], null, null, [6, 5], null, [5]]
Explanation
Twitter twitter = new Twitter();
twitter.postTweet(1, 5); // User 1 posts a new tweet (id = 5).

twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5]. return [5]
twitter.follow(1, 2);    // User 1 follows user 2.

twitter.postTweet(2, 6); // User 2 posts a new tweet (id = 6).

twitter.getNewsFeed(1);  // User 1's news feed should return a list with 2 tweet ids -> [6, 5]. Tweet id 6 should precede tweet id 5 because it is posted after tweet id 5.

twitter.unfollow(1, 2);  // User 1 unfollows user 2.

twitter.getNewsFeed(1);  // User 1's news feed should return a list with 1 tweet id -> [5], since user 1 is no longer following user 2.


Constraints:
`1 <= userId, followerId, followeeId <= 500`
`0 <= tweetId <= 104`
All the tweets have unique IDs.

At most `3 * 104` calls will be made to `postTweet`, `getNewsFeed`, `follow`, and `unfollow`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given n points on a 2D plane, find if there is such a line parallel to y-axis that reflect the given points symmetrically, in other words, answer whether or not if there exists a line that after reflecting all points over the given line the set of the original points is the same that the reflected ones.

Note that there can be repeated points.

Follow up:
Could you do better than O(n2) ?

Example 1:
Input: points = [[1,1],[-1,1]]
Output: true
Explanation: We can choose the line x = 0.


Example 2:
Input: points = [[1,1],[-1,-1]]
Output: false
Explanation: We can't choose a line.


Constraints:
`n == points.length`
`1 <= n <= 10^4`
`-10^8 <= points[i][j] <= 10^8`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the count of all numbers with unique digits, `x`, where `0 <= x < 10n`.


Example 1:
Input: n = 2
Output: 91
Explanation: The answer should be the total numbers in the range of 0 ≤ x < 100, excluding 11,22,33,44,55,66,77,88,99

Example 2:
Input: n = 0
Output: 1

Constraints:
`0 <= n <= 8`",0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer `k`, rearrange `s` such that the same characters are at least distance `k` from each other. If it is not possible to rearrange the string, return an empty string `""""`.


Example 1:
Input: s = ""aabbcc"", k = 3
Output: ""abcabc""
Explanation: The same letters are at least a distance of 3 from each other.


Example 2:
Input: s = ""aaabc"", k = 3
Output: """"
Explanation: It is not possible to rearrange the string.


Example 3:
Input: s = ""aaadbbcc"", k = 2
Output: ""abacabcd""
Explanation: The same letters are at least a distance of 2 from each other.


Constraints:
`1 <= s.length <= 3 * 105`
`s` consists of only lowercase English letters.

`0 <= k <= s.length`",0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a logger system that receives a stream of messages along with their timestamps. Each unique message should only be printed at most every 10 seconds (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t + 10`).

All messages will come in chronological order. Several messages may arrive at the same timestamp.

Implement the `Logger` class:
`Logger()` Initializes the `logger` object.

`bool shouldPrintMessage(int timestamp, string message)` Returns `true` if the `message` should be printed in the given `timestamp`, otherwise returns `false`.


Example 1:
Input
[""Logger"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage""]
[[], [1, ""foo""], [2, ""bar""], [3, ""foo""], [8, ""bar""], [10, ""foo""], [11, ""foo""]]
Output
[null, true, true, false, false, false, true]
Explanation
Logger logger = new Logger();
logger.shouldPrintMessage(1, ""foo"");  // return true, next allowed timestamp for ""foo"" is 1 + 10 = 11
logger.shouldPrintMessage(2, ""bar"");  // return true, next allowed timestamp for ""bar"" is 2 + 10 = 12
logger.shouldPrintMessage(3, ""foo"");  // 3 < 11, return false
logger.shouldPrintMessage(8, ""bar"");  // 8 < 12, return false
logger.shouldPrintMessage(10, ""foo""); // 10 < 11, return false
logger.shouldPrintMessage(11, ""foo""); // 11 >= 11, return true, next allowed timestamp for ""foo"" is
                                      // 11 + 10 = 21

Constraints:
`0 <= timestamp <= 109`
Every `timestamp` will be passed in non-decreasing order (chronological order).

`1 <= message.length <= 30`
At most `104` calls will be made to `shouldPrintMessage`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted integer array `nums` and three integers `a`, `b` and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` in the array, and return the array in a sorted order.


Example 1:
Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]

Example 2:
Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]

Constraints:
`1 <= nums.length <= 200`
`-100 <= nums[i], a, b, c <= 100`
`nums` is sorted in ascending order.

Follow up: Could you solve it in `O(n)` time?",0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` matrix `grid` where each cell is either a wall `'W'`, an enemy `'E'` or empty `'0'`, return the maximum enemies you can kill using one bomb. You can only place the bomb in an empty cell.

The bomb kills all the enemies in the same row and column from the planted point until it hits the wall since it is too strong to be destroyed.


Example 1:
Input: grid = [[""0"",""E"",""0"",""0""],[""E"",""0"",""W"",""E""],[""0"",""E"",""0"",""0""]]
Output: 3

Example 2:
Input: grid = [[""W"",""W"",""W""],[""0"",""0"",""0""],[""E"",""E"",""E""]]
Output: 1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 500`
`grid[i][j]` is either `'W'`, `'E'`, or `'0'`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a hit counter which counts the number of hits received in the past `5` minutes (i.e., the past `300` seconds).

Your system should accept a `timestamp` parameter (in seconds granularity), and you may assume that calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing). Several hits may arrive roughly at the same time.

Implement the `HitCounter` class:
`HitCounter()` Initializes the object of the hit counter system.

`void hit(int timestamp)` Records a hit that happened at `timestamp` (in seconds). Several hits may happen at the same `timestamp`.

`int getHits(int timestamp)` Returns the number of hits in the past 5 minutes from `timestamp` (i.e., the past `300` seconds).


Example 1:
Input
[""HitCounter"", ""hit"", ""hit"", ""hit"", ""getHits"", ""hit"", ""getHits"", ""getHits""]
[[], [1], [2], [3], [4], [300], [300], [301]]
Output
[null, null, null, null, 3, null, 4, 3]
Explanation
HitCounter hitCounter = new HitCounter();
hitCounter.hit(1);       // hit at timestamp 1.

hitCounter.hit(2);       // hit at timestamp 2.

hitCounter.hit(3);       // hit at timestamp 3.

hitCounter.getHits(4);   // get hits at timestamp 4, return 3.

hitCounter.hit(300);     // hit at timestamp 300.

hitCounter.getHits(300); // get hits at timestamp 300, return 4.

hitCounter.getHits(301); // get hits at timestamp 301, return 3.


Constraints:
`1 <= timestamp <= 2 * 109`
All the calls are being made to the system in chronological order (i.e., `timestamp` is monotonically increasing).

At most `300` calls will be made to `hit` and `getHits`.

Follow up: What if the number of hits per second could be huge? Does your design scale?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` matrix `matrix` and an integer `k`, return the max sum of a rectangle in the matrix such that its sum is no larger than `k`.

It is guaranteed that there will be a rectangle with a sum no larger than `k`.


Example 1:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the max number no larger than k (k = 2).


Example 2:
Input: matrix = [[2,2,-1]], k = 3
Output: 3

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 100`
`-100 <= matrix[i][j] <= 100`
`-105 <= k <= 105`
Follow up: What if the number of rows is much larger than the number of columns?",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a nested list of integers `nestedList`. Each element is either an integer or a list whose elements may also be integers or other lists.

The depth of an integer is the number of lists that it is inside of. For example, the nested list `[1,[2,2],[[3],2],1]` has each integer's value set to its depth. Let `maxDepth` be the maximum depth of any integer.

The weight of an integer is `maxDepth - (the depth of the integer) + 1`.

Return the sum of each integer in `nestedList` multiplied by its weight.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: 8
Explanation: Four 1's with a weight of 1, one 2 with a weight of 2.

1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8

Example 2:
Input: nestedList = [1,[4,[6]]]
Output: 17
Explanation: One 1 at depth 3, one 4 at depth 2, and one 6 at depth 1.

1*3 + 4*2 + 6*1 = 17

Constraints:
`1 <= nestedList.length <= 50`
The values of the integers in the nested list is in the range `[-100, 100]`.

The maximum depth of any integer is less than or equal to `50`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two jugs with capacities `jug1Capacity` and `jug2Capacity` liters. There is an infinite amount of water supply available. Determine whether it is possible to measure exactly `targetCapacity` liters using these two jugs.

If `targetCapacity` liters of water are measurable, you must have `targetCapacity` liters of water contained within one or both buckets by the end.

Operations allowed:
Fill any of the jugs with water.

Empty any of the jugs.

Pour water from one jug into another till the other jug is completely full, or the first jug itself is empty.


Example 1:
Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4
Output: true
Explanation: The famous Die Hard example 

Example 2:
Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5
Output: false

Example 3:
Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3
Output: true

Constraints:
`1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, collect a tree's nodes as if you were doing this:
Collect all the leaf nodes.

Remove all the leaf nodes.

Repeat until the tree is empty.


Example 1:
Input: root = [1,2,3,4,5]
Output: [[4,5,3],[2],[1]]
Explanation:
[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers since per each level it does not matter the order on which elements are returned.


Example 2:
Input: root = [1]
Output: [[1]]

Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`1 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer num, write a function which returns True if num is a perfect square else False.

Follow up: Do not use any built-in library function such as `sqrt`.


Example 1:
Input: num = 16
Output: true

Example 2:
Input: num = 14
Output: false

Constraints:
`1 <= num <= 2^31 - 1`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of distinct positive integers `nums`, return the largest subset `answer` such that every pair `(answer[i], answer[j])` of elements in this subset satisfies:
`answer[i] % answer[j] == 0`, or
`answer[j] % answer[i] == 0`
If there are multiple solutions, return any of them.


Example 1:
Input: nums = [1,2,3]
Output: [1,2]
Explanation: [1,3] is also accepted.


Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 2 * 109`
All the integers in `nums` are unique.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer represented as a linked list of digits, plus one to the integer.

The digits are stored such that the most significant digit is at the `head` of the list.


Example 1:
Input: head = [1,2,3]
Output: [1,2,4]

Example 2:
Input: head = [0]
Output: [1]

Constraints:
The number of nodes in the linked list is in the range `[1, 100]`.

`0 <= Node.val <= 9`
The number represented by the linked list does not contain leading zeros except for the zero itself.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer `length` and an array `updates` where `updates[i] = [startIdxi, endIdxi, inci]`.

You have an array `arr` of length `length` with all zeros, and you have some operation to apply on `arr`. In the `ith` operation, you should increment all the elements `arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi]` by `inci`.

Return `arr` after applying all the `updates`.


Example 1:
Input: length = 5, updates = [[1,3,2],[2,4,3],[0,2,-2]]
Output: [-2,0,3,5,3]

Example 2:
Input: length = 10, updates = [[2,4,6],[5,6,8],[1,9,-4]]
Output: [0,-4,2,2,2,4,4,-4,-4,-4]

Constraints:
`1 <= length <= 105`
`0 <= updates.length <= 104`
`0 <= startIdxi <= endIdxi < length`
`-1000 <= inci <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `a` and `b`, return the sum of the two integers without using the operators `+` and `-`.


Example 1:
Input: a = 1, b = 2
Output: 3

Example 2:
Input: a = 2, b = 3
Output: 5

Constraints:
`-1000 <= a, b <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two integer arrays `nums1` and `nums2` sorted in ascending order and an integer `k`.

Define a pair `(u, v)` which consists of one element from the first array and one element from the second array.

Return the `k` pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sums.


Example 1:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: The first 3 pairs are returned from the sequence: [1,2],[1,4],[1,6],[7,2],[7,4],[11,2],[7,6],[11,4],[11,6]

Example 2:
Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first 2 pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3],[1,3],[2,3]

Example 3:
Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: All possible pairs are returned from the sequence: [1,3],[2,3]

Constraints:
`1 <= nums1.length, nums2.length <= 104`
`-109 <= nums1[i], nums2[i] <= 109`
`nums1` and `nums2` both are sorted in ascending order.

`1 <= k <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are playing the Guess Game. The game is as follows:
I pick a number from `1` to `n`. You have to guess which number I picked.

Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a pre-defined API `int guess(int num)`, which returns 3 possible results:
`-1`: The number I picked is lower than your guess (i.e. `pick < num`).

`1`: The number I picked is higher than your guess (i.e. `pick > num`).

`0`: The number I picked is equal to your guess (i.e. `pick == num`).

Return the number that I picked.


Example 1:
Input: n = 10, pick = 6
Output: 6

Example 2:
Input: n = 1, pick = 1
Output: 1

Example 3:
Input: n = 2, pick = 1
Output: 1

Example 4:
Input: n = 2, pick = 2
Output: 2

Constraints:
`1 <= n <= 231 - 1`
`1 <= pick <= n`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are playing the Guessing Game. The game will work as follows:
I pick a number between `1` and `n`.

You guess a number.

If you guess the right number, you win the game.

If you guess the wrong number, then I will tell you whether the number I picked is higher or lower, and you will continue guessing.

Every time you guess a wrong number `x`, you will pay `x` dollars. If you run out of money, you lose the game.

Given a particular `n`, return the minimum amount of money you need to guarantee a win regardless of what number I pick.


Example 1:
Input: n = 10
Output: 16
Explanation: The winning strategy is as follows:
- The range is [1,10]. Guess 7.

    - If this is my number, your total is $0. Otherwise, you pay $7.

    - If my number is higher, the range is [8,10]. Guess 9.

        - If this is my number, your total is $7. Otherwise, you pay $9.

        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.

        - If my number is lower, it must be 8. Guess 8. Your total is $7 + $9 = $16.

    - If my number is lower, the range is [1,6]. Guess 3.

        - If this is my number, your total is $7. Otherwise, you pay $3.

        - If my number is higher, the range is [4,6]. Guess 5.

            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.

            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.

            - If my number is lower, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.

        - If my number is lower, the range is [1,2]. Guess 1.

            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.

            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.

The worst case in all these scenarios is that you pay $16. Hence, you only need $16 to guarantee a win.


Example 2:
Input: n = 1
Output: 0
Explanation: There is only one possible number, so you can guess 1 and not have to pay anything.


Example 3:
Input: n = 2
Output: 1
Explanation: There are two possible numbers, 1 and 2.

- Guess 1.

    - If this is my number, your total is $0. Otherwise, you pay $1.

    - If my number is higher, it must be 2. Guess 2. Your total is $1.

The worst case is that you pay $1.


Constraints:
`1 <= n <= 200`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with two or fewer elements is trivially a wiggle sequence.

For example, `[1, 7, 4, 9, 2, 5]` is a wiggle sequence because the differences `(6, -3, 5, -7, 3)` alternate between positive and negative.

In contrast, `[1, 4, 7, 2, 5]` and `[1, 7, 4, 5, 5]` are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.

A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array `nums`, return the length of the longest wiggle subsequence of `nums`.


Example 1:
Input: nums = [1,7,4,9,2,5]
Output: 6
Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).


Example 2:
Input: nums = [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences that achieve this length.

One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).


Example 3:
Input: nums = [1,2,3,4,5,6,7,8,9]
Output: 2

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 1000`
Follow up: Could you solve this in `O(n)` time?",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of distinct integers `nums` and a target integer `target`, return the number of possible combinations that add up to `target`.

The answer is guaranteed to fit in a 32-bit integer.


Example 1:
Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.


Example 2:
Input: nums = [9], target = 3
Output: 0

Constraints:
`1 <= nums.length <= 200`
`1 <= nums[i] <= 1000`
All the elements of `nums` are unique.

`1 <= target <= 1000`
Follow up: What if negative numbers are allowed in the given array? How does it change the problem? What limitation we need to add to the question to allow negative numbers?",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `n x n` `matrix` where each of the rows and columns are sorted in ascending order, return the `kth` smallest element in the matrix.

Note that it is the `kth` smallest element in the sorted order, not the `kth` distinct element.


Example 1:
Input: matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13

Example 2:
Input: matrix = [[-5]], k = 1
Output: -5

Constraints:
`n == matrix.length`
`n == matrix[i].length`
`1 <= n <= 300`
`-109 <= matrix[i][j] <= 109`
All the rows and columns of `matrix` are guaranteed to be sorted in non-degreasing order.

`1 <= k <= n2`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a phone directory that initially has `maxNumbers` empty slots that can store numbers. The directory should store numbers, check if a certain slot is empty or not, and empty a given slot.

Implement the `PhoneDirectory` class:
`PhoneDirectory(int maxNumbers)` Initializes the phone directory with the number of available slots `maxNumbers`.

`int get()` Provides a number that is not assigned to anyone. Returns `-1` if no number is available.

`bool check(int number)` Returns `true` if the slot `number` is available and `false` otherwise.

`void release(int number)` Recycles or releases the slot `number`.


Example 1:
Input
[""PhoneDirectory"", ""get"", ""get"", ""check"", ""get"", ""check"", ""release"", ""check""]
[[3], [], [], [2], [], [2], [2], [2]]
Output
[null, 0, 1, true, 2, false, null, true]
Explanation
PhoneDirectory phoneDirectory = new PhoneDirectory(3);
phoneDirectory.get();      // It can return any available phone number. Here we assume it returns 0.

phoneDirectory.get();      // Assume it returns 1.

phoneDirectory.check(2);   // The number 2 is available, so return true.

phoneDirectory.get();      // It returns 2, the only number that is left.

phoneDirectory.check(2);   // The number 2 is no longer available, so return false.

phoneDirectory.release(2); // Release number 2 back to the pool.

phoneDirectory.check(2);   // Number 2 is available again, return true.


Constraints:
`1 <= maxNumbers <= 104`
`0 <= number < maxNumbers`
At most `2 * 104` calls will be made to `get`, `check`, and `release`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `RandomizedSet` class:
`RandomizedSet()` Initializes the `RandomizedSet` object.

`bool insert(int val)` Inserts an item `val` into the set if not present. Returns `true` if the item was not present, `false` otherwise.

`bool remove(int val)` Removes an item `val` from the set if present. Returns `true` if the item was present, `false` otherwise.

`int getRandom()` Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.


Example 1:
Input
[""RandomizedSet"", ""insert"", ""remove"", ""insert"", ""getRandom"", ""remove"", ""insert"", ""getRandom""]
[[], [1], [2], [2], [], [1], [2], []]
Output
[null, true, false, true, 2, true, false, 2]
Explanation
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Inserts 1 to the set. Returns true as 1 was inserted successfully.

randomizedSet.remove(2); // Returns false as 2 does not exist in the set.

randomizedSet.insert(2); // Inserts 2 to the set, returns true. Set now contains [1,2].

randomizedSet.getRandom(); // getRandom() should return either 1 or 2 randomly.

randomizedSet.remove(1); // Removes 1 from the set, returns true. Set now contains [2].

randomizedSet.insert(2); // 2 was already in the set, so return false.

randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.


Constraints:
`-231 <= val <= 231 - 1`
At most `105` calls will be made to `insert`, `remove`, and `getRandom`.

There will be at least one element in the data structure when `getRandom` is called.

Follow up: Could you implement the functions of the class with each function works in average `O(1)` time?",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `RandomizedCollection` class:
`RandomizedCollection()` Initializes the `RandomizedCollection` object.

`bool insert(int val)` Inserts an item `val` into the multiset if not present. Returns `true` if the item was not present, `false` otherwise.

`bool remove(int val)` Removes an item `val` from the multiset if present. Returns `true` if the item was present, `false` otherwise. Note that if `val` has multiple occurrences in the multiset, we only remove one of them.

`int getRandom()` Returns a random element from the current multiset of elements (it's guaranteed that at least one element exists when this method is called). The probability of each element being returned is linearly related to the number of same values the multiset contains.


Example 1:
Input
[""RandomizedCollection"", ""insert"", ""insert"", ""insert"", ""getRandom"", ""remove"", ""getRandom""]
[[], [1], [1], [2], [], [1], []]
Output
[null, true, false, true, 2, true, 1]
Explanation
RandomizedCollection randomizedCollection = new RandomizedCollection();
randomizedCollection.insert(1);   // return True. Inserts 1 to the collection. Returns true as the collection did not contain 1.

randomizedCollection.insert(1);   // return False. Inserts another 1 to the collection. Returns false as the collection contained 1. Collection now contains [1,1].

randomizedCollection.insert(2);   // return True. Inserts 2 to the collection, returns true. Collection now contains [1,1,2].

randomizedCollection.getRandom(); // getRandom should return 1 with the probability 2/3, and returns 2 with the probability 1/3.

randomizedCollection.remove(1);   // return True. Removes 1 from the collection, returns true. Collection now contains [1,2].

randomizedCollection.getRandom(); // getRandom should return 1 and 2 both equally likely.


Constraints:
`-231 <= val <= 231 - 1`
At most `105` calls will be made to `insert`, `remove`, and `getRandom`.

There will be at least one element in the data structure when `getRandom` is called.

Follow up: Could you implement the functions of the class with each function works in average `O(1)` time?",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a singly linked list, return a random node's value from the linked list. Each node must have the same probability of being chosen.


Example 1:
Input
[""Solution"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom""]
[[[1, 2, 3]], [], [], [], [], []]
Output
[null, 1, 3, 2, 2, 3]
Explanation
Solution solution = new Solution([1, 2, 3]);
solution.getRandom(); // return 1
solution.getRandom(); // return 3
solution.getRandom(); // return 2
solution.getRandom(); // return 2
solution.getRandom(); // return 3
// getRandom() should return either 1, 2, or 3 randomly. Each element should have equal probability of returning.


Constraints:
The number of nodes in the linked list will be in the range `[1, 104]`.

`-104 <= Node.val <= 104`
At most `104` calls will be made to `getRandom`.

Follow up:
What if the linked list is extremely large and its length is unknown to you?
Could you solve this efficiently without using extra space?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Given an arbitrary ransom note string and another string containing letters from all the magazines, write a function that will return true if the ransom note can be constructed from the magazines ; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.


Example 1:
Input: ransomNote = ""a"", magazine = ""b""
Output: false

Example 2:
Input: ransomNote = ""aa"", magazine = ""ab""
Output: false

Example 3:
Input: ransomNote = ""aa"", magazine = ""aab""
Output: true

Constraints:
You may assume that both strings contain only lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s represents the serialization of a nested list, implement a parser to deserialize it and return the deserialized `NestedInteger`.

Each element is either an integer or a list whose elements may also be integers or other lists.


Example 1:
Input: s = ""324""
Output: 324
Explanation: You should return a NestedInteger object which contains a single integer 324.


Example 2:
Input: s = ""[123,[456,[789]]]""
Output: [123,[456,[789]]]
Explanation: Return a NestedInteger object containing a nested list with 2 elements:
1. An integer containing value 123.

2. A nested list containing two elements:
    i.  An integer containing value 456.

    ii. A nested list with one element:
         a. An integer containing value 789

Constraints:
`1 <= s.length <= 5 * 104`
`s` consists of digits, square brackets `""[]""`, negative sign `'-'`, and commas `','`.

`s` is the serialization of valid `NestedInteger`.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the first non-repeating character in it and return its index. If it does not exist, return `-1`.


Example 1:
Input: s = ""leetcode""
Output: 0

Example 2:
Input: s = ""loveleetcode""
Output: 2

Example 3:
Input: s = ""aabb""
Output: -1

Constraints:
`1 <= s.length <= 105`
`s` consists of only lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `s` and `t`.

String `t` is generated by random shuffling string `s` and then add one more letter at a random position.

Return the letter that was added to `t`.


Example 1:
Input: s = ""abcd"", t = ""abcde""
Output: ""e""
Explanation: 'e' is the letter that was added.


Example 2:
Input: s = """", t = ""y""
Output: ""y""

Example 3:
Input: s = ""a"", t = ""aa""
Output: ""a""

Example 4:
Input: s = ""ae"", t = ""aea""
Output: ""a""

Constraints:
`0 <= s.length <= 1000`
`t.length == s.length + 1`
`s` and `t` consist of lower-case English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `rectangles` where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The bottom-left point of the rectangle is `(xi, yi)` and the top-right point of it is `(ai, bi)`.

Return `true` if all the rectangles together form an exact cover of a rectangular region.


Example 1:
Input: rectangles = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3,3,4]]
Output: true
Explanation: All 5 rectangles together form an exact cover of a rectangular region.


Example 2:
Input: rectangles = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
Output: false
Explanation: Because there is a gap between the two rectangular regions.


Example 3:
Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]
Output: false
Explanation: Because there is a gap in the top center.


Example 4:
Input: rectangles = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
Output: false
Explanation: Because two of the rectangles overlap with each other.


Constraints:
`1 <= rectangles.length <= 2 * 104`
`rectangles[i].length == 4`
`-105 <= xi, yi, ai, bi <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, check if `s` is a subsequence of `t`.

A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., `""ace""` is a subsequence of `""abcde""` while `""aec""` is not).


Example 1:
Input: s = ""abc"", t = ""ahbgdc""
Output: true

Example 2:
Input: s = ""axc"", t = ""ahbgdc""
Output: false

Constraints:
`0 <= s.length <= 100`
`0 <= t.length <= 104`
`s` and `t` consist only of lowercase English letters.

Follow up: If there are lots of incoming `s`, say `s1, s2, ..., sk` where `k >= 109`, and you want to check one by one to see if `t` has its subsequence. In this scenario, how would you change your code?",0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `data` representing the data, return whether it is a valid UTF-8 encoding.

A character in UTF8 can be from 1 to 4 bytes long, subjected to the following rules:
For a 1-byte character, the first bit is a `0`, followed by its Unicode code.

For an n-bytes character, the first `n` bits are all one's, the `n + 1` bit is `0`, followed by `n - 1` bytes with the most significant `2` bits being `10`.

This is how the UTF-8 encoding would work:
`   Char. number range  |        UTF-8 octet sequence
      (hexadecimal)    |              (binary)
   --------------------+---------------------------------------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx`
Note: The input is an array of integers. Only the least significant 8 bits of each integer is used to store the data. This means each integer represents only 1 byte of data.


Example 1:
Input: data = [197,130,1]
Output: true
Explanation: data represents the octet sequence: 11000101 10000010 00000001.

It is a valid utf-8 encoding for a 2-bytes character followed by a 1-byte character.


Example 2:
Input: data = [235,140,4]
Output: false
Explanation: data represented the octet sequence: 11101011 10001100 00000100.

The first 3 bits are all one's and the 4th bit is 0 means it is a 3-bytes character.

The next byte is a continuation byte which starts with 10 and that's correct.

But the second continuation byte does not start with 10, so it is invalid.


Constraints:
`1 <= data.length <= 2 * 104`
`0 <= data[i] <= 255`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an encoded string, return its decoded string.

The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times. Note that `k` is guaranteed to be a positive integer.

You may assume that the input string is always valid; No extra white spaces, square brackets are well-formed, etc.

Furthermore, you may assume that the original data does not contain any digits and that digits are only for those repeat numbers, `k`. For example, there won't be input like `3a` or `2[4]`.


Example 1:
Input: s = ""3[a]2[bc]""
Output: ""aaabcbc""

Example 2:
Input: s = ""3[a2[c]]""
Output: ""accaccacc""

Example 3:
Input: s = ""2[abc]3[cd]ef""
Output: ""abcabccdcdcdef""

Example 4:
Input: s = ""abc3[cd]xyz""
Output: ""abccdcdcdxyz""

Constraints:
`1 <= s.length <= 30`
`s` consists of lowercase English letters, digits, and square brackets `'[]'`.

`s` is guaranteed to be a valid input.

All the integers in `s` are in the range `[1, 300]`.",0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer `k`, return the length of the longest substring of `s` such that the frequency of each character in this substring is greater than or equal to `k`.


Example 1:
Input: s = ""aaabb"", k = 3
Output: 3
Explanation: The longest substring is ""aaa"", as 'a' is repeated 3 times.


Example 2:
Input: s = ""ababbc"", k = 2
Output: 5
Explanation: The longest substring is ""ababb"", as 'a' is repeated 2 times and 'b' is repeated 3 times.


Constraints:
`1 <= s.length <= 104`
`s` consists of only lowercase English letters.

`1 <= k <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` of length `n`.

Assume `arrk` to be an array obtained by rotating `nums` by `k` positions clock-wise. We define the rotation function `F` on `nums` as follow:
`F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].`
Return the maximum value of `F(0), F(1), ..., F(n-1)`.


Example 1:
Input: nums = [4,3,2,6]
Output: 26
Explanation:
F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.


Example 2:
Input: nums = [1000000007]
Output: 0

Constraints:
`n == nums.length`
`1 <= n <= 105`
`-231 <= nums[i] <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `n`, you can apply one of the following operations:
If `n` is even, replace `n` with `n / 2`.

If `n` is odd, replace `n` with either `n + 1` or `n - 1`.

Return the minimum number of operations needed for `n` to become `1`.


Example 1:
Input: n = 8
Output: 3
Explanation: 8 -> 4 -> 2 -> 1

Example 2:
Input: n = 7
Output: 4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1

Example 3:
Input: n = 4
Output: 2

Constraints:
`1 <= n <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` with possible duplicates, randomly output the index of a given `target` number. You can assume that the given target number must exist in the array.

Implement the `Solution` class:
`Solution(int[] nums)` Initializes the object with the array `nums`.

`int pick(int target)` Picks a random index `i` from `nums` where `nums[i] == target`. If there are multiple valid i's, then each index should have an equal probability of returning.


Example 1:
Input
[""Solution"", ""pick"", ""pick"", ""pick""]
[[[1, 2, 3, 3, 3]], [3], [1], [3]]
Output
[null, 4, 0, 2]
Explanation
Solution solution = new Solution([1, 2, 3, 3, 3]);
solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.

solution.pick(1); // It should return 0. Since in the array only nums[0] is equal to 1.

solution.pick(3); // It should return either index 2, 3, or 4 randomly. Each index should have equal probability of returning.


Constraints:
`1 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`target` is an integer from `nums`.

At most `104` calls will be made to `pick`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"You are given an array of variable pairs `equations` and an array of real numbers `values`, where `equations[i] = [Ai, Bi]` and `values[i]` represent the equation `Ai / Bi = values[i]`. Each `Ai` or `Bi` is a string that represents a single variable.

You are also given some `queries`, where `queries[j] = [Cj, Dj]` represents the `jth` query where you must find the answer for `Cj / Dj = ?`.

Return the answers to all queries. If a single answer cannot be determined, return `-1.0`.

Note: The input is always valid. You may assume that evaluating the queries will not result in division by zero and that there is no contradiction.


Example 1:
Input: equations = [[""a"",""b""],[""b"",""c""]], values = [2.0,3.0], queries = [[""a"",""c""],[""b"",""a""],[""a"",""e""],[""a"",""a""],[""x"",""x""]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
Explanation: 
Given: a / b = 2.0, b / c = 3.0
queries are: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
return: [6.0, 0.5, -1.0, 1.0, -1.0 ]

Example 2:
Input: equations = [[""a"",""b""],[""b"",""c""],[""bc"",""cd""]], values = [1.5,2.5,5.0], queries = [[""a"",""c""],[""c"",""b""],[""bc"",""cd""],[""cd"",""bc""]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equations = [[""a"",""b""]], values = [0.5], queries = [[""a"",""b""],[""b"",""a""],[""a"",""c""],[""x"",""y""]]
Output: [0.50000,2.00000,-1.00000,-1.00000]

Constraints:
`1 <= equations.length <= 20`
`equations[i].length == 2`
`1 <= Ai.length, Bi.length <= 5`
`values.length == equations.length`
`0.0 < values[i] <= 20.0`
`1 <= queries.length <= 20`
`queries[i].length == 2`
`1 <= Cj.length, Dj.length <= 5`
`Ai, Bi, Cj, Dj` consist of lower case English letters and digits.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the `nth` digit of the infinite integer sequence `[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...]`.


Example 1:
Input: n = 3
Output: 3

Example 2:
Input: n = 11
Output: 0
Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0, which is part of the number 10.


Constraints:
`1 <= n <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary watch has 4 LEDs on the top which represent the hours (0-11), and the 6 LEDs on the bottom represent the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.

For example, the above binary watch reads ""3:25"".

Given a non-negative integer n which represents the number of LEDs that are currently on, return all possible times the watch could represent.


Example:
Input: n = 1Return: [""1:00"", ""2:00"", ""4:00"", ""8:00"", ""0:01"", ""0:02"", ""0:04"", ""0:08"", ""0:16"", ""0:32""]
Note:
The order of output does not matter.

The hour must not contain a leading zero, for example ""01:00"" is not valid, it should be ""1:00"".

The minute must be consist of two digits and may contain a leading zero, for example ""10:2"" is not valid, it should be ""10:02"".",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer num represented as a string, remove k digits from the number so that the new number is the smallest possible.

Note:
The length of num is less than 10002 and will be ≥ k.

The given num does not contain any leading zero.


Example 1:
Input: num = ""1432219"", k = 3
Output: ""1219""
Explanation: Remove the three digits 4, 3, and 2 to form the new number 1219 which is the smallest.


Example 2:
Input: num = ""10200"", k = 1
Output: ""200""
Explanation: Remove the leading 1 and the number is 200. Note that the output must not contain leading zeroes.


Example 3:
Input: num = ""10"", k = 2
Output: ""0""
Explanation: Remove all the digits from the number and it is left with nothing which is 0.",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A frog is crossing a river. The river is divided into some number of units, and at each unit, there may or may not exist a stone. The frog can jump on a stone, but it must not jump into the water.

Given a list of `stones`' positions (in units) in sorted ascending order, determine if the frog can cross the river by landing on the last stone. Initially, the frog is on the first stone and assumes the first jump must be `1` unit.

If the frog's last jump was `k` units, its next jump must be either `k - 1`, `k`, or `k + 1` units. The frog can only jump in the forward direction.


Example 1:
Input: stones = [0,1,3,5,6,8,12,17]
Output: true
Explanation: The frog can jump to the last stone by jumping 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 7th stone, and 5 units to the 8th stone.


Example 2:
Input: stones = [0,1,2,3,4,8,9,11]
Output: false
Explanation: There is no way to jump to the last stone as the gap between the 5th and 6th stone is too large.


Constraints:
`2 <= stones.length <= 2000`
`0 <= stones[i] <= 231 - 1`
`stones[0] == 0`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Find the sum of all left leaves in a given binary tree.


Example:
    3
   / \
  9  20
    /  \
   15   7
There are two left leaves in the binary tree, with values 9 and 15 respectively. Return 24.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, two’s complement method is used.

Note:
All letters in hexadecimal (`a-f`) must be in lowercase.

The hexadecimal string must not contain extra leading `0`s. If the number is zero, it is represented by a single zero character `'0'`; otherwise, the first character in the hexadecimal string will not be the zero character.

The given number is guaranteed to fit within the range of a 32-bit signed integer.

You must not use any method provided by the library which converts/formats the number to hex directly.


Example 1:
Input:
26
Output:
""1a""

Example 2:
Input:
-1
Output:
""ffffffff""",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of people, `people`, which are the attributes of some people in a queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the `ith` person of height `hi` with exactly `ki` other people in front who have a height greater than or equal to `hi`.

Reconstruct and return the queue that is represented by the input array `people`. The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the attributes of the `jth` person in the queue (`queue[0]` is the person at the front of the queue).


Example 1:
Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
Explanation:
Person 0 has height 5 with no other people taller or the same height in front.

Person 1 has height 7 with no other people taller or the same height in front.

Person 2 has height 5 with two persons taller or the same height in front, which is person 0 and 1.

Person 3 has height 6 with one person taller or the same height in front, which is person 1.

Person 4 has height 4 with four people taller or the same height in front, which are people 0, 1, 2, and 3.

Person 5 has height 7 with one person taller or the same height in front, which is person 1.

Hence [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstructed queue.


Example 2:
Input: people = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]

Constraints:
`1 <= people.length <= 2000`
`0 <= hi <= 106`
`0 <= ki < people.length`
It is guaranteed that the queue can be reconstructed.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` matrix of positive integers representing the height of each unit cell in a 2D elevation map, compute the volume of water it is able to trap after raining.


Example:
Given the following 3x6 height map:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]
Return 4.

The above image represents the elevation map `[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1]]` before the rain.

After the rain, water is trapped between the blocks. The total volume of water trapped is 4.


Constraints:
`1 <= m, n <= 110`
`0 <= heightMap[i][j] <= 20000`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty string `s` and an abbreviation `abbr`, return whether the string matches with the given abbreviation.

A string such as `""word""` contains only the following valid abbreviations:
[""word"", ""1ord"", ""w1rd"", ""wo1d"", ""wor1"", ""2rd"", ""w2d"", ""wo2"", ""1o1d"", ""1or1"", ""w1r1"", ""1o2"", ""2r1"", ""3d"", ""w3"", ""4""]
Notice that only the above abbreviations are valid abbreviations of the string `""word""`. Any other string is not a valid abbreviation of `""word""`.

Note:
Assume `s` contains only lowercase letters and `abbr` contains only lowercase letters and digits.


Example 1:
Given s = ""internationalization"", abbr = ""i12iz4n"":
Return true.


Example 2:
Given s = ""apple"", abbr = ""a2e"":
Return false.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` which consists of lowercase or uppercase letters, return the length of the longest palindrome that can be built with those letters.

Letters are case sensitive, for example, `""Aa""` is not considered a palindrome here.


Example 1:
Input: s = ""abccccdd""
Output: 7
Explanation:
One longest palindrome that can be built is ""dccaccd"", whose length is 7.


Example 2:
Input: s = ""a""
Output: 1

Example 3:
Input: s = ""bb""
Output: 2

Constraints:
`1 <= s.length <= 2000`
`s` consists of lowercase and/or uppercase English letters only.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` which consists of non-negative integers and an integer `m`, you can split the array into `m` non-empty continuous subarrays.

Write an algorithm to minimize the largest sum among these `m` subarrays.


Example 1:
Input: nums = [7,2,5,10,8], m = 2
Output: 18
Explanation:
There are four ways to split nums into two subarrays.

The best way is to split it into [7,2,5] and [10,8],
where the largest sum among the two subarrays is only 18.


Example 2:
Input: nums = [1,2,3,4,5], m = 2
Output: 9

Example 3:
Input: nums = [1,4,4], m = 3
Output: 4

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 106`
`1 <= m <= min(50, nums.length)`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string can be abbreviated by replacing any number of non-adjacent substrings with their lengths. For example, a string such as `""substitution""` could be abbreviated as (but not limited to):
`""s10n""` (`""s ubstitutio n""`)
`""sub4u4""` (`""sub stit u tion""`)
`""12""` (`""substitution""`)
`""su3i1u2on""` (`""su bst i t u ti on""`)
`""substitution""` (no substrings replaced)
Note that `""s55n""` (`""s ubsti tutio n""`) is not a valid abbreviation of `""substitution""` because the replaced substrings are adjacent.

The length of an abbreviation is the number of letters that were not replaced plus the number of substrings that were replaced. For example, the abbreviation `""s10n""` has a length of `3` (`2` letters + `1` substring) and `""su3i1u2on""` has a length of `9` (`6` letters + `3` substrings).

Given a target string `target` and an array of strings `dictionary`, return an abbreviation of `target` with the shortest possible length such that it is not an abbreviation of any string in `dictionary`. If there are multiple shortest abbreviations, return any of them.


Example 1:
Input: target = ""apple"", dictionary = [""blade""]
Output: ""a4""
Explanation: The shortest abbreviation of ""apple"" is ""5"", but this is also an abbreviation of ""blade"".

The next shortest abbreviations are ""a4"" and ""4e"". ""4e"" is an abbreviation of blade while ""a4"" is not.

Hence, return ""a4"".


Example 2:
Input: target = ""apple"", dictionary = [""blade"",""plain"",""amber""]
Output: ""1p3""
Explanation: ""5"" is an abbreviation of both ""apple"" but also every word in the dictionary.

""a4"" is an abbreviation of ""apple"" but also ""amber"".

""4e"" is an abbreviation of ""apple"" but also ""blade"".

""1p3"", ""2p2"", and ""3l1"" are the next shortest abbreviations of ""apple"".

Since none of them are abbreviations of words in the dictionary, returning any of them is correct.


Constraints:
`target.length == m`
`dictionary.length == n`
`1 <= m <= 21`
`0 <= n <= 1000`
`1 <= dictionary[i] <= 100`
`log2(n) + m <= 21` if `n > 0`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An integer array is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, `[1,3,5,7,9]`, `[7,7,7,7]`, and `[3,-1,-5,-9]` are arithmetic sequences.

Given an integer array `nums`, return the number of arithmetic subarrays of `nums`.

A subarray is a contiguous subsequence of the array.


Example 1:
Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.


Example 2:
Input: nums = [1]
Output: 0

Constraints:
`1 <= nums.length <= 5000`
`-1000 <= nums[i] <= 1000`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given integer array `nums`, return the third maximum number in this array. If the third maximum does not exist, return the maximum number.


Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation: The third maximum is 1.


Example 2:
Input: nums = [1,2]
Output: 2
Explanation: The third maximum does not exist, so the maximum (2) is returned instead.


Example 3:
Input: nums = [2,2,3,1]
Output: 1
Explanation: Note that the third maximum here means the third maximum distinct number.

Both numbers with value 2 are both considered as second maximum.


Constraints:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
Follow up: Can you find an `O(n)` solution?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-negative integers, `num1` and `num2` represented as string, return the sum of `num1` and `num2` as a string.


Example 1:
Input: num1 = ""11"", num2 = ""123""
Output: ""134""

Example 2:
Input: num1 = ""456"", num2 = ""77""
Output: ""533""

Example 3:
Input: num1 = ""0"", num2 = ""0""
Output: ""0""

Constraints:
`1 <= num1.length, num2.length <= 104`
`num1` and `num2` consist of only digits.

`num1` and `num2` don't have any leading zeros except for the zero itself.

Follow up: Could you solve it without using any built-in `BigInteger` library or converting the inputs to integer directly?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array `nums` containing only positive integers, find if the array can be partitioned into two subsets such that the sum of elements in both subsets is equal.


Example 1:
Input: nums = [1,5,11,5]
Output: true
Explanation: The array can be partitioned as [1, 5, 5] and [11].


Example 2:
Input: nums = [1,2,3,5]
Output: false
Explanation: The array cannot be partitioned into equal sum subsets.


Constraints:
`1 <= nums.length <= 200`
`1 <= nums[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` integer matrix `heights` representing the height of each unit cell in a continent. The Pacific ocean touches the continent's left and top edges, and the Atlantic ocean touches the continent's right and bottom edges.

Water can only flow in four directions: up, down, left, and right. Water flows from a cell to an adjacent one with an equal or lower height.

Return a list of grid coordinates where water can flow to both the Pacific and Atlantic oceans.


Example 1:
Input: heights = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4,5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]

Example 2:
Input: heights = [[2,1],[1,2]]
Output: [[0,0],[0,1],[1,0],[1,1]]

Constraints:
`m == heights.length`
`n == heights[i].length`
`1 <= m, n <= 200`
`1 <= heights[i][j] <= 105`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `rows x cols` screen and a sentence represented by a list of non-empty words, find how many times the given sentence can be fitted on the screen.

Note:
A word cannot be split into two lines.

The order of words in the sentence must remain unchanged.

Two consecutive words in a line must be separated by a single space.

Total words in the sentence won't exceed 100.

Length of each word is greater than 0 and won't exceed 10.

1 ≤ rows, cols ≤ 20,000.


Example 1:
Input:
rows = 2, cols = 8, sentence = [""hello"", ""world""]
Output: 
1
Explanation:
hello---
world---
The character '-' signifies an empty space on the screen.


Example 2:
Input:
rows = 3, cols = 6, sentence = [""a"", ""bcd"", ""e""]
Output: 
2
Explanation:
a-bcd- 
e-a---
bcd-e-
The character '-' signifies an empty space on the screen.


Example 3:
Input:
rows = 4, cols = 5, sentence = [""I"", ""had"", ""apple"", ""pie""]
Output: 
1
Explanation:
I-had
apple
pie-I
had--
The character '-' signifies an empty space on the screen.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return the maximum result of `nums[i] XOR nums[j]`, where `0 ≤ i ≤ j < n`.

Follow up: Could you do this in `O(n)` runtime?

Example 1:
Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.


Example 2:
Input: nums = [0]
Output: 0

Example 3:
Input: nums = [2,4]
Output: 6

Example 4:
Input: nums = [8,10,2]
Output: 10

Example 5:
Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127

Constraints:
`1 <= nums.length <= 2 * 104`
`0 <= nums[i] <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` containing an out-of-order English representation of digits `0-9`, return the digits in ascending order.


Example 1:
Input: s = ""owoztneoer""
Output: ""012""

Example 2:
Input: s = ""fviefuro""
Output: ""45""

Constraints:
`1 <= s.length <= 105`
`s[i]` is one of the characters `[""e"",""g"",""f"",""i"",""h"",""o"",""n"",""s"",""r"",""u"",""t"",""w"",""v"",""x"",""z""]`.

`s` is guaranteed to be valid.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` that consists of only uppercase English letters, you can perform at most `k` operations on that string.

In one operation, you can choose any character of the string and change it to any other uppercase English character.

Find the length of the longest sub-string containing all repeating letters you can get after performing the above operations.

Note:
Both the string's length and k will not exceed 104.


Example 1:
Input:
s = ""ABAB"", k = 2
Output:
4
Explanation:
Replace the two 'A's with two 'B's or vice versa.


Example 2:
Input:
s = ""AABABBA"", k = 1
Output:
4
Explanation:
Replace the one 'A' in the middle with 'B' and form ""AABBBBA"".

The substring ""BBBB"" has the longest repeating letters, which is 4.",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of words (without duplicates), find all word squares you can build from them.

A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns).

For example, the word sequence `[""ball"",""area"",""lead"",""lady""]` forms a word square because each word reads the same both horizontally and vertically.

b a l l
a r e a
l e a d
l a d y
Note:
There are at least 1 and at most 1000 words.

All words will have the exact same length.

Word length is at least 1 and at most 5.

Each word contains only lowercase English alphabet `a-z`.


Example 1:
Input:
[""area"",""lead"",""wall"",""lady"",""ball""]
Output:
[
  [ ""wall"",
    ""area"",
    ""lead"",
    ""lady""
  ],
  [ ""ball"",
    ""area"",
    ""lead"",
    ""lady""
  ]
]
Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).


Example 2:
Input:
[""abat"",""baba"",""atan"",""atal""]
Output:
[
  [ ""baba"",
    ""abat"",
    ""baba"",
    ""atan""
  ],
  [ ""baba"",
    ""abat"",
    ""baba"",
    ""atal""
  ]
]
Explanation:
The output consists of two word squares. The order of output does not matter (just the order of words in each word square matters).",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Convert a Binary Search Tree to a sorted Circular Doubly-Linked List in place.

You can think of the left and right pointers as synonymous to the predecessor and successor pointers in a doubly-linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.

We want to do the transformation in place. After the transformation, the left pointer of the tree node should point to its predecessor, and the right pointer should point to its successor. You should return the pointer to the smallest element of the linked list.


Example 1:
Input: root = [4,2,5,1,3]
Output: [1,2,3,4,5]
Explanation: The figure below shows the transformed BST. The solid line indicates the successor relationship, while the dashed line means the predecessor relationship.


Example 2:
Input: root = [2,1,3]
Output: [1,2,3]

Example 3:
Input: root = []
Output: []
Explanation: Input is an empty tree. Output is also an empty Linked List.

Example 4:
Input: root = [1]
Output: [1]

Constraints:
The number of nodes in the tree is in the range `[0, 2000]`.

`-1000 <= Node.val <= 1000`
All the values of the tree are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize an N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. There is no restriction on how your serialization/deserialization algorithm should work. You just need to ensure that an N-ary tree can be serialized to a string and this string can be deserialized to the original tree structure.

For example, you may serialize the following `3-ary` tree
as `[1 [3[5 6] 2 4]]`. Note that this is just an example, you do not necessarily need to follow this format.

Or you can follow LeetCode's level order traversal serialization format, where each group of children is separated by the null value.

For example, the above tree may be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]`.

You do not necessarily need to follow the above suggested formats, there are many more different formats that work so please be creative and come up with different approaches yourself.


Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`0 <= Node.val <= 104`
The height of the n-ary tree is less than or equal to `1000`
Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).


Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]

Constraints:
The height of the n-ary tree is less than or equal to `1000`
The total number of nodes is between `[0, 104]`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a doubly linked list which in addition to the next and previous pointers, it could have a child pointer, which may or may not point to a separate doubly linked list. These child lists may have one or more children of their own, and so on, to produce a multilevel data structure, as shown in the example below.

Flatten the list so that all the nodes appear in a single-level, doubly linked list. You are given the head of the first level of the list.


Example 1:
Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
Explanation:
The multilevel linked list in the input is as follows:
After flattening the multilevel linked list it becomes:

Example 2:
Input: head = [1,2,null,3]
Output: [1,3,2]
Explanation:
The input multilevel linked list is as follows:
  1---2---NULL
  |
  3---NULL

Example 3:
Input: head = []
Output: []
How multilevel linked list is represented in test case:

We use the multilevel linked list from Example 1 above:
 1---2---3---4---5---6--NULL
         |
         7---8---9---10--NULL
             |
             11--12--NULL
The serialization of each level is as follows:
[1,2,3,4,5,6,null]
[7,8,9,10,null]
[11,12,null]
To serialize all levels together we will add nulls in each level to signify no node connects to the upper node of the previous level. The serialization becomes:
[1,2,3,4,5,6,null]
[null,null,7,8,9,10,null]
[null,11,12,null]
Merging the serialization of each level and removing trailing nulls we obtain:
[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]

Constraints:
The number of Nodes will not exceed `1000`.

`1 <= Node.val <= 105`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an algorithm to encode an N-ary tree into a binary tree and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree in which each node has no more than 2 children. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that an N-ary tree can be encoded to a binary tree and this binary tree can be decoded to the original N-nary tree structure.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See following example).

For example, you may encode the following `3-ary` tree to a binary tree in this way:
Input: root = [1,null,3,2,4,null,5,6]
Note that the above is just an example which might or might not work. You do not necessarily need to follow this format, so please be creative and come up with different approaches yourself.


Constraints:
The height of the n-ary tree is less than or equal to `1000`
The total number of nodes is between `[0, 10^4]`
Do not use class member/global/static variables to store states. Your encode and decode algorithms should be stateless.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a data structure supporting the following operations:
Inc(Key) - Inserts a new key  with value 1. Or increments an existing key by 1. Key is guaranteed to be a non-empty string.

Dec(Key) - If Key's value is 1, remove it from the data structure. Otherwise decrements an existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a non-empty string.

GetMaxKey() - Returns one of the keys with maximal value. If no element exists, return an empty string `""""`.

GetMinKey() - Returns one of the keys with minimal value. If no element exists, return an empty string `""""`.

Challenge: Perform all these in O(1) time complexity.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a collection of intervals, find the minimum number of intervals you need to remove to make the rest of the intervals non-overlapping.


Example 1:
Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed and the rest of intervals are non-overlapping.


Example 2:
Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove two [1,2] to make the rest of intervals non-overlapping.


Example 3:
Input: [[1,2],[2,3]]
Output: 0
Explanation: You don't need to remove any of the intervals since they're already non-overlapping.

Note:
You may assume the interval's end point is always bigger than its start point.

Intervals like [1,2] and [2,3] have borders ""touching"" but they don't overlap each other.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a binary tree in which each node contains an integer value.

Find the number of paths that sum to a given value.

The path does not need to start or end at the root or a leaf, but it must go downwards
(traveling only from parent nodes to child nodes).

The tree has no more than 1,000 nodes and the values are in the range -1,000,000 to 1,000,000.


Example:
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
      10
     /  \
    5   -3
   / \    \
  3   2   11
 / \   \
3  -2   1
Return 3. The paths that sum to 8 are:
1.  5 -> 3
2.  5 -> 2 -> 1
3. -3 -> 11",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and a non-empty string p, find all the start indices of p's anagrams in s.

Strings consists of lowercase English letters only and the length of both strings s and p will not be larger than 20,100.

The order of output does not matter.


Example 1:
Input:
s: ""cbaebabacd"" p: ""abc""
Output:
[0, 6]
Explanation:
The substring with start index = 0 is ""cba"", which is an anagram of ""abc"".

The substring with start index = 6 is ""bac"", which is an anagram of ""abc"".


Example 2:
Input:
s: ""abab"" p: ""ab""
Output:
[0, 1, 2]
Explanation:
The substring with start index = 0 is ""ab"", which is an anagram of ""ab"".

The substring with start index = 1 is ""ba"", which is an anagram of ""ab"".

The substring with start index = 2 is ""ab"", which is an anagram of ""ab"".",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string representing arbitrarily nested ternary expressions, calculate the result of the expression. You can always assume that the given expression is valid and only consists of digits `0-9`, `?`, `:`, `T` and `F` (`T` and `F` represent True and False respectively).

Note:
The length of the given string is ≤ 10000.

Each number will contain only one digit.

The conditional expressions group right-to-left (as usual in most languages).

The condition will always be either `T` or `F`. That is, the condition will never be a digit.

The result of the expression will always evaluate to either a digit `0-9`, `T` or `F`.


Example 1:
Input: ""T?2:3""
Output: ""2""
Explanation: If true, then result is 2; otherwise result is 3.


Example 2:
Input: ""F?1:T?4:5""
Output: ""4""
Explanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:
             ""(F ? 1 : (T ? 4 : 5))""                   ""(F ? 1 : (T ? 4 : 5))""
          -> ""(F ? 1 : 4)""                 or       -> ""(T ? 4 : 5)""
          -> ""4""                                    -> ""4""

Example 3:
Input: ""T?T?F:5:3""
Output: ""F""
Explanation: The conditional expressions group right-to-left. Using parenthesis, it is read/evaluated as:
             ""(T ? (T ? F : 5) : 3)""                   ""(T ? (T ? F : 5) : 3)""
          -> ""(T ? F : 3)""                 or       -> ""(T ? F : 5)""
          -> ""F""                                    -> ""F""",0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a total of n coins that you want to form in a staircase shape, where every k-th row must have exactly k coins.

Given n, find the total number of full staircase rows that can be formed.

n is a non-negative integer and fits within the range of a 32-bit signed integer.


Example 1:
n = 5
The coins can form the following rows:
¤
¤ ¤
¤ ¤
Because the 3rd row is incomplete, we return 2.


Example 2:
n = 8
The coins can form the following rows:
¤
¤ ¤
¤ ¤ ¤
¤ ¤
Because the 4th row is incomplete, we return 3.",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers, 1 ≤ a[i] ≤ n (n = size of array), some elements appear twice and others appear once.

Find all the elements that appear twice in this array.

Could you do it without extra space and in O(n) runtime?

Example:
Input:
[4,3,2,7,8,2,3,1]
Output:
[2,3]",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of characters `chars`, compress it using the following algorithm:
Begin with an empty string `s`. For each group of consecutive repeating characters in `chars`:
If the group's length is 1, append the character to `s`.

Otherwise, append the character followed by the group's length.

The compressed string `s` should not be returned separately, but instead be stored in the input character array `chars`. Note that group lengths that are 10 or longer will be split into multiple characters in `chars`.

After you are done modifying the input array, return the new length of the array.

Follow up:
Could you solve it using only `O(1)` extra space?

Example 1:
Input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""]
Output: Return 6, and the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""]
Explanation: The groups are ""aa"", ""bb"", and ""ccc"". This compresses to ""a2b2c3"".


Example 2:
Input: chars = [""a""]
Output: Return 1, and the first character of the input array should be: [""a""]
Explanation: The only group is ""a"", which remains uncompressed since it's a single character.


Example 3:
Input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b""]
Output: Return 4, and the first 4 characters of the input array should be: [""a"",""b"",""1"",""2""].
Explanation: The groups are ""a"" and ""bbbbbbbbbbbb"". This compresses to ""ab12"".


Example 4:
Input: chars = [""a"",""a"",""a"",""b"",""b"",""a"",""a""]
Output: Return 6, and the first 6 characters of the input array should be: [""a"",""3"",""b"",""2"",""a"",""2""].
Explanation: The groups are ""aaa"", ""bb"", and ""aa"". This compresses to ""a3b2a2"". Note that each group is independent even if two groups have the same character.


Constraints:
`1 <= chars.length <= 2000`
`chars[i]` is a lower-case English letter, upper-case English letter, digit, or symbol.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Check whether the original sequence `org` can be uniquely reconstructed from the sequences in `seqs`. The `org` sequence is a permutation of the integers from 1 to n, with 1 ≤ n ≤ 104. Reconstruction means building a shortest common supersequence of the sequences in `seqs` (i.e., a shortest sequence so that all sequences in `seqs` are subsequences of it). Determine whether there is only one sequence that can be reconstructed from `seqs` and it is the `org` sequence.


Example 1:
Input: org = [1,2,3], seqs = [[1,2],[1,3]]
Output: false
Explanation: [1,2,3] is not the only one sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.


Example 2:
Input: org = [1,2,3], seqs = [[1,2]]
Output: false
Explanation: The reconstructed sequence can only be [1,2].


Example 3:
Input: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]
Output: true
Explanation: The sequences [1,2], [1,3], and [2,3] can uniquely reconstruct the original sequence [1,2,3].


Example 4:
Input: org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]
Output: true

Constraints:
`1 <= n <= 10^4`
`org` is a permutation of {1,2,...,n}.

`1 <= segs[i].length <= 10^5`
`seqs[i][j]` fits in a 32-bit signed integer.

UPDATE (2017/1/8):
The seqs parameter had been changed to a list of list of strings (instead of a 2d array of strings). Please reload the code definition to get the latest changes.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Follow up:
What if you cannot modify the input lists? In other words, reversing the lists is not allowed.


Example:
Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, these are arithmetic sequences:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic.

1, 1, 2, 5, 7
A zero-indexed array A consisting of N numbers is given. A subsequence slice of that array is any sequence of integers (P0, P1, ..., Pk) such that 0 ≤ P0 < P1 < ... < Pk < N.

A subsequence slice (P0, P1, ..., Pk) of array A is called arithmetic if the sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic. In particular, this means that k ≥ 2.

The function should return the number of arithmetic subsequence slices in the array A.

The input contains N integers. Every integer is in the range of -231 and 231-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 231-1.


Example:
Input: [2, 4, 6, 8, 10]
Output: 7
Explanation:
All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `n` `points` in the plane that are all distinct, where `points[i] = [xi, yi]`. A boomerang is a tuple of points `(i, j, k)` such that the distance between `i` and `j` equals the distance between `i` and `k` (the order of the tuple matters).

Return the number of boomerangs.


Example 1:
Input: points = [[0,0],[1,0],[2,0]]
Output: 2
Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].


Example 2:
Input: points = [[1,1],[2,2],[3,3]]
Output: 2

Example 3:
Input: points = [[1,1]]
Output: 0

Constraints:
`n == points.length`
`1 <= n <= 500`
`points[i].length == 2`
`-104 <= xi, yi <= 104`
All the points are unique.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return an array of all the integers in the range `[1, n]` that do not appear in `nums`.


Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
Output: [2]

Constraints:
`n == nums.length`
`1 <= n <= 105`
`1 <= nums[i] <= n`
Follow up: Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Serialization is converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted across a network connection link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There is no restriction on how your serialization/deserialization algorithm should work. You need to ensure that a binary search tree can be serialized to a string, and this string can be deserialized to the original tree structure.

The encoded string should be as compact as possible.


Example 1:
Input: root = [2,1,3]
Output: [2,1,3]

Example 2:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`0 <= Node.val <= 104`
The input tree is guaranteed to be a binary search tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a root node reference of a BST and a key, delete the node with the given key in the BST. Return the root node reference (possibly updated) of the BST.

Basically, the deletion can be divided into two stages:
Search for a node to remove.

If the node is found, delete the node.

Follow up: Can you solve it with time complexity `O(height of tree)`?

Example 1:
Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: Given key to delete is 3. So we find the node with value 3 and delete it.

One valid answer is [5,4,6,2,null,null,7], shown in the above BST.

Please notice that another valid answer is [5,2,6,null,4,null,7] and it's also accepted.


Example 2:
Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree does not contain a node with value = 0.


Example 3:
Input: root = [], key = 0
Output: []

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-105 <= Node.val <= 105`
Each node has a unique value.

`root` is a valid binary search tree.

`-105 <= key <= 105`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string, sort it in decreasing order based on the frequency of characters.


Example 1:
Input:
""tree""
Output:
""eert""
Explanation:
'e' appears twice while 'r' and 't' both appear once.

So 'e' must appear before both 'r' and 't'. Therefore ""eetr"" is also a valid answer.


Example 2:
Input:
""cccaaa""
Output:
""cccaaa""
Explanation:
Both 'c' and 'a' appear three times, so ""aaaccc"" is also a valid answer.

Note that ""cacaca"" is incorrect, as the same characters must be together.


Example 3:
Input:
""Aabb""
Output:
""bbAa""
Explanation:
""bbaA"" is also a valid answer, but ""Aabb"" is incorrect.

Note that 'A' and 'a' are treated as two different characters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are some spherical balloons spread in two-dimensional space. For each balloon, provided input is the start and end coordinates of the horizontal diameter. Since it's horizontal, y-coordinates don't matter, and hence the x-coordinates of start and end of the diameter suffice. The start is always smaller than the end.

An arrow can be shot up exactly vertically from different points along the x-axis. A balloon with `xstart` and `xend` bursts by an arrow shot at `x` if `xstart ≤ x ≤ xend`. There is no limit to the number of arrows that can be shot. An arrow once shot keeps traveling up infinitely.

Given an array `points` where `points[i] = [xstart, xend]`, return the minimum number of arrows that must be shot to burst all balloons.


Example 1:
Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: One way is to shoot one arrow for example at x = 6 (bursting the balloons [2,8] and [1,6]) and another arrow at x = 11 (bursting the other two balloons).


Example 2:
Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4

Example 3:
Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2

Constraints:
`0 <= points.length <= 104`
`points[i].length == 2`
`-231 <= xstart < xend <= 231 - 1`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` of size `n`, return the minimum number of moves required to make all array elements equal.

In one move, you can increment `n - 1` elements of the array by `1`.


Example 1:
Input: nums = [1,2,3]
Output: 3
Explanation: Only three moves are needed (remember each move increments two elements):
[1,2,3]  =>  [2,3,3]  =>  [3,4,3]  =>  [4,4,4]

Example 2:
Input: nums = [1,1,1]
Output: 0

Constraints:
`n == nums.length`
`1 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given four lists A, B, C, D of integer values, compute how many tuples `(i, j, k, l)` there are such that `A[i] + B[j] + C[k] + D[l]` is zero.

To make problem a bit easier, all A, B, C, D have same length of N where 0 ≤ N ≤ 500. All integers are in the range of -228 to 228 - 1 and the result is guaranteed to be at most 231 - 1.


Example:
Input:
A = [ 1, 2]
B = [-2,-1]
C = [-1, 2]
D = [ 0, 2]
Output:
2
Explanation:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.


Example 1:
Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.

You need to output 1.


Example 2:
Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.


Constraints:
`1 <= g.length <= 3 * 104`
`0 <= s.length <= 3 * 104`
`1 <= g[i], s[j] <= 231 - 1`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `n` integers `nums`, a 132 pattern is a subsequence of three integers `nums[i]`, `nums[j]` and `nums[k]` such that `i < j < k` and `nums[i] < nums[k] < nums[j]`.

Return `true` if there is a 132 pattern in `nums`, otherwise, return `false`.

Follow up: The `O(n^2)` is trivial, could you come up with the `O(n logn)` or the `O(n)` solution?

Example 1:
Input: nums = [1,2,3,4]
Output: false
Explanation: There is no 132 pattern in the sequence.


Example 2:
Input: nums = [3,1,4,2]
Output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].


Example 3:
Input: nums = [-1,3,2,0]
Output: true
Explanation: There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


Constraints:
`n == nums.length`
`1 <= n <= 104`
`-109 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a game involving a circular array of non-zero integers `nums`. Each `nums[i]` denotes the number of indices forward/backward you must move if you are located at index `i`:
If `nums[i]` is positive, move `nums[i]` steps forward, and
If `nums[i]` is negative, move `nums[i]` steps backward.

Since the array is circular, you may assume that moving forward from the last element puts you on the first element, and moving backwards from the first element puts you on the last element.

A cycle in the array consists of a sequence of indices `seq` of length `k` where:
Following the movement rules above results in the repeating index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`
Every `nums[seq[j]]` is either all positive or all negative.

`k > 1`
Return `true` if there is a cycle in `nums`, or `false` otherwise.


Example 1:
Input: nums = [2,-1,1,2,2]
Output: true
Explanation:
There is a cycle from index 0 -> 2 -> 3 -> 0 -> ...

The cycle's length is 3.


Example 2:
Input: nums = [-1,2]
Output: false
Explanation:
The sequence from index 1 -> 1 -> 1 -> ... is not a cycle because the sequence's length is 1.

By definition the sequence's length must be strictly greater than 1 to be a cycle.


Example 3:
Input: nums = [-2,1,-1,-2,-2]
Output: false
Explanation:
The sequence from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive, but nums[2] is negative.

Every nums[seq[j]] must be either all positive or all negative.


Constraints:
`1 <= nums.length <= 5000`
`-1000 <= nums[i] <= 1000`
`nums[i] != 0`
Follow up: Could you solve it in `O(n)` time complexity and `O(1)` extra space complexity?",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, check if it can be constructed by taking a substring of it and appending multiple copies of the substring together.


Example 1:
Input: s = ""abab""
Output: true
Explanation: It is the substring ""ab"" twice.


Example 2:
Input: s = ""aba""
Output: false

Example 3:
Input: s = ""abcabcabcabc""
Output: true
Explanation: It is the substring ""abc"" four times or the substring ""abcabc"" twice.


Constraints:
`1 <= s.length <= 104`
`s` consists of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design and implement a data structure for a Least Frequently Used (LFU) cache.

Implement the `LFUCache` class:
`LFUCache(int capacity)` Initializes the object with the `capacity` of the data structure.

`int get(int key)` Gets the value of the `key` if the `key` exists in the cache. Otherwise, returns `-1`.

`void put(int key, int value)` Update the value of the `key` if present, or inserts the `key` if not already present. When the cache reaches its `capacity`, it should invalidate and remove the least frequently used key before inserting a new item. For this problem, when there is a tie (i.e., two or more keys with the same frequency), the least recently used `key` would be invalidated.

To determine the least frequently used key, a use counter is maintained for each key in the cache. The key with the smallest use counter is the least frequently used key.

When a key is first inserted into the cache, its use counter is set to `1` (due to the `put` operation). The use counter for a key in the cache is incremented either a `get` or `put` operation is called on it.


Example 1:
Input
[""LFUCache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""get"", ""put"", ""get"", ""get"", ""get""]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [4]]
Output
[null, null, null, 1, null, -1, 3, null, -1, 3, 4]
Explanation
// cnt(x) = the use counter for key x
// cache=[] will show the last used order for tiebreakers (leftmost element is  most recent)
LFUCache lfu = new LFUCache(2);
lfu.put(1, 1);   // cache=[1,_], cnt(1)=1
lfu.put(2, 2);   // cache=[2,1], cnt(2)=1, cnt(1)=1
lfu.get(1);      // return 1
                 // cache=[1,2], cnt(2)=1, cnt(1)=2
lfu.put(3, 3);   // 2 is the LFU key because cnt(2)=1 is the smallest, invalidate 2.

                 // cache=[3,1], cnt(3)=1, cnt(1)=2
lfu.get(2);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,1], cnt(3)=2, cnt(1)=2
lfu.put(4, 4);   // Both 1 and 3 have the same cnt, but 1 is LRU, invalidate 1.

                 // cache=[4,3], cnt(4)=1, cnt(3)=2
lfu.get(1);      // return -1 (not found)
lfu.get(3);      // return 3
                 // cache=[3,4], cnt(4)=1, cnt(3)=3
lfu.get(4);      // return 4
                 // cache=[3,4], cnt(4)=2, cnt(3)=3

Constraints:
`0 <= capacity, key, value <= 104`
At most `105` calls will be made to `get` and `put`.

Follow up: Could you do both operations in `O(1)` time complexity?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Given two integers `x` and `y`, calculate the Hamming distance.

Note:
0 ≤ `x`, `y` < 231.


Example:
Input: x = 1, y = 4
Output: 2
Explanation:
1   (0 0 0 1)
4   (0 1 0 0)
       ↑   ↑
The above arrows point to positions where the corresponding bits are different.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty integer array, find the minimum number of moves required to make all array elements equal, where a move is incrementing a selected element by 1 or decrementing a selected element by 1.

You may assume the array's length is at most 10,000.


Example:
Input:
[1,2,3]
Output:
2
Explanation:
Only two moves are needed (remember each move increments or decrements one element):
[1,2,3]  =>  [2,2,3]  =>  [2,2,2]",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.

Grid cells are connected horizontally/vertically (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have ""lakes"", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.


Example 1:
Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
Output: 16
Explanation: The perimeter is the 16 yellow stripes in the image above.


Example 2:
Input: grid = [[1]]
Output: 4

Example 3:
Input: grid = [[1,0]]
Output: 4

Constraints:
`row == grid.length`
`col == grid[i].length`
`1 <= row, col <= 100`
`grid[i][j]` is `0` or `1`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the ""100 game"" two players take turns adding, to a running total, any integer from `1` to `10`. The player who first causes the running total to reach or exceed 100 wins.

What if we change the game so that players cannot re-use integers?
For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until they reach a total >= 100.

Given two integers maxChoosableInteger and desiredTotal, return `true` if the first player to move can force a win, otherwise return `false`. Assume both players play optimally.


Example 1:
Input: maxChoosableInteger = 10, desiredTotal = 11
Output: false
Explanation:
No matter which integer the first player choose, the first player will lose.

The first player can choose an integer from 1 up to 10.

If the first player choose 1, the second player can only choose integers from 2 up to 10.

The second player will win by choosing 10 and get a total = 11, which is >= desiredTotal.

Same with other integers chosen by the first player, the second player will always win.


Example 2:
Input: maxChoosableInteger = 10, desiredTotal = 0
Output: true

Example 3:
Input: maxChoosableInteger = 10, desiredTotal = 1
Output: true

Constraints:
`1 <= maxChoosableInteger <= 20`
`0 <= desiredTotal <= 300`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Define `S = [s,n]` as the string S which consists of n connected strings s. For example, `[""abc"", 3]` =""abcabcabc"". 
On the other hand, we define that string s1 can be obtained from string s2 if we can remove some characters from s2 such that it becomes s1. For example, “abc”  can be obtained from “abdbec” based on our definition, but it can not be obtained from “acbbe”.

You are given two non-empty strings s1 and s2 (each at most 100 characters long) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. Now consider the strings S1 and S2, where `S1=[s1,n1]` and `S2=[s2,n2]`. Find the maximum integer M such that `[S2,M]` can be obtained from `S1`.


Example:
Input:
s1=""acb"", n1=4
s2=""ab"", n2=2
Return:
2",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Consider the string `s` to be the infinite wraparound string of ""abcdefghijklmnopqrstuvwxyz"", so `s` will look like this: ""...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."".

Now we have another string `p`. Your job is to find out how many unique non-empty substrings of `p` are present in `s`. In particular, your input is the string `p` and you need to output the number of different non-empty substrings of `p` in the string `s`.

Note: `p` consists of only lowercase English letters and the size of p might be over 10000.


Example 1:
Input: ""a""
Output: 1
Explanation: Only the substring ""a"" of string ""a"" is in the string s.


Example 2:
Input: ""cac""
Output: 2
Explanation: There are two substrings ""a"", ""c"" of string ""cac"" in the string s.


Example 3:
Input: ""zab""
Output: 6
Explanation: There are six substrings ""z"", ""a"", ""b"", ""za"", ""ab"", ""zab"" of string ""zab"" in the string s.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `IP`, return `""IPv4""` if IP is a valid IPv4 address, `""IPv6""` if IP is a valid IPv6 address or `""Neither""` if IP is not a correct IP of any type.

A valid IPv4 address is an IP in the form `""x1.x2.x3.x4""` where `0 <= xi <= 255` and `xi` cannot contain leading zeros. For example, `""192.168.1.1""` and `""192.168.1.0""` are valid IPv4 addresses but `""192.168.01.1""`, while `""192.168.1.00""` and `""192.168@1.1""` are invalid IPv4 addresses.

A valid IPv6 address is an IP in the form `""x1:x2:x3:x4:x5:x6:x7:x8""` where:
`1 <= xi.length <= 4`
`xi` is a hexadecimal string which may contain digits, lower-case English letter (`'a'` to `'f'`) and upper-case English letters (`'A'` to `'F'`).

Leading zeros are allowed in `xi`.

For example, ""`2001:0db8:85a3:0000:0000:8a2e:0370:7334""` and ""`2001:db8:85a3:0:0:8A2E:0370:7334""` are valid IPv6 addresses, while ""`2001:0db8:85a3::8A2E:037j:7334""` and ""`02001:0db8:85a3:0000:0000:8a2e:0370:7334""` are invalid IPv6 addresses.


Example 1:
Input: IP = ""172.16.254.1""
Output: ""IPv4""
Explanation: This is a valid IPv4 address, return ""IPv4"".


Example 2:
Input: IP = ""2001:0db8:85a3:0:0:8A2E:0370:7334""
Output: ""IPv6""
Explanation: This is a valid IPv6 address, return ""IPv6"".


Example 3:
Input: IP = ""256.256.256.256""
Output: ""Neither""
Explanation: This is neither a IPv4 address nor a IPv6 address.


Example 4:
Input: IP = ""2001:0db8:85a3:0:0:8A2E:0370:7334:""
Output: ""Neither""

Example 5:
Input: IP = ""1e1.4.5.6""
Output: ""Neither""

Constraints:
`IP` consists only of English letters, digits and the characters `'.'` and `':'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of points that form a polygon when joined sequentially, find if this polygon is convex (Convex polygon definition).

Note:
There are at least 3 and at most 10,000 points.

Coordinates are in the range -10,000 to 10,000.

You may assume the polygon formed by given points is always a simple polygon (Simple polygon definition). In other words, we ensure that exactly two edges intersect at each vertex, and that edges otherwise don't intersect each other.


Example 1:
[[0,0],[0,1],[1,1],[1,0]]
Answer: True
Explanation:

Example 2:
[[0,0],[0,10],[10,10],[10,0],[5,5]]
Answer: False
Explanation:",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the API `rand7()` that generates a uniform random integer in the range `[1, 7]`, write a function `rand10()` that generates a uniform random integer in the range `[1, 10]`. You can only call the API `rand7()`, and you shouldn't call any other API. Please do not use a language's built-in random API.

Each test case will have one internal argument `n`, the number of times that your implemented function `rand10()` will be called while testing. Note that this is not an argument passed to `rand10()`.

Follow up:
What is the expected value for the number of calls to `rand7()` function?
Could you minimize the number of calls to `rand7()`?

Example 1:
Input: n = 1
Output: [2]

Example 2:
Input: n = 2
Output: [2,8]

Example 3:
Input: n = 3
Output: [3,8,10]

Constraints:
`1 <= n <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0
"Given a non-empty string, encode the string such that its encoded length is the shortest.

The encoding rule is: `k[encoded_string]`, where the `encoded_string` inside the square brackets is being repeated exactly `k` times.

Note:
`k` will be a positive integer.

If an encoding process does not make the string shorter, then do not encode it. If there are several solutions, return any of them.


Example 1:
Input: s = ""aaa""
Output: ""aaa""
Explanation: There is no way to encode it such that it is shorter than the input string, so we do not encode it.


Example 2:
Input: s = ""aaaaa""
Output: ""5[a]""
Explanation: ""5[a]"" is shorter than ""aaaaa"" by 1 character.


Example 3:
Input: s = ""aaaaaaaaaa""
Output: ""10[a]""
Explanation: ""a9[a]"" or ""9[a]a"" are also valid solutions, both of them have the same length = 5, which is the same as ""10[a]"".


Example 4:
Input: s = ""aabcaabcd""
Output: ""2[aabc]d""
Explanation: ""aabc"" occurs twice, so one answer can be ""2[aabc]d"".


Example 5:
Input: s = ""abbbabbbcabbbabbbc""
Output: ""2[2[abbb]c]""
Explanation: ""abbbabbbc"" occurs twice, but ""abbbabbbc"" can also be encoded to ""2[abbb]c"", so one answer can be ""2[2[abbb]c]"".


Constraints:
`1 <= s.length <= 150`
`s` consists of only lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `words` (without duplicates), return all the concatenated words in the given list of `words`.

A concatenated word is defined as a string that is comprised entirely of at least two shorter words in the given array.


Example 1:
Input: words = [""cat"",""cats"",""catsdogcats"",""dog"",""dogcatsdog"",""hippopotamuses"",""rat"",""ratcatdogcat""]
Output: [""catsdogcats"",""dogcatsdog"",""ratcatdogcat""]
Explanation: ""catsdogcats"" can be concatenated by ""cats"", ""dog"" and ""cats""; 
""dogcatsdog"" can be concatenated by ""dog"", ""cats"" and ""dog""; 
""ratcatdogcat"" can be concatenated by ""rat"", ""cat"", ""dog"" and ""cat"".


Example 2:
Input: words = [""cat"",""dog"",""catdog""]
Output: [""catdog""]

Constraints:
`1 <= words.length <= 104`
`0 <= words[i].length <= 1000`
`words[i]` consists of only lowercase English letters.

`0 <= sum(words[i].length) <= 6 * 105`",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Remember the story of Little Match Girl? By now, you know exactly what matchsticks the little match girl has, please find out a way you can make one square by using up all those matchsticks. You should not break any stick, but you can link them up, and each matchstick must be used exactly one time.

 Your input will be several matchsticks the girl has, represented with their stick length. Your output will either be true or false, to represent whether you could make one square using all the matchsticks the little match girl has.


Example 1:
Input: [1,1,2,2,2]
Output: true
Explanation: You can form a square with length 2, one side of the square came two sticks with length 1.


Example 2:
Input: [3,3,3,3,4]
Output: false
Explanation: You cannot find a way to form a square with all the matchsticks.

Note:
The length sum of the given matchsticks is in the range of `0` to `10^9`.

The length of the given matchstick array will not exceed `15`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of binary strings `strs` and two integers `m` and `n`.

Return the size of the largest subset of `strs` such that there are at most `m` `0`'s and `n` `1`'s in the subset.

A set `x` is a subset of a set `y` if all elements of `x` are also elements of `y`.


Example 1:
Input: strs = [""10"",""0001"",""111001"",""1"",""0""], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0's and 3 1's is {""10"", ""0001"", ""1"", ""0""}, so the answer is 4.

Other valid but smaller subsets include {""0001"", ""1""} and {""10"", ""1"", ""0""}.

{""111001""} is an invalid subset because it contains 4 1's, greater than the maximum of 3.


Example 2:
Input: strs = [""10"",""0"",""1""], m = 1, n = 1
Output: 2
Explanation: The largest subset is {""0"", ""1""}, so the answer is 2.


Constraints:
`1 <= strs.length <= 600`
`1 <= strs[i].length <= 100`
`strs[i]` consists only of digits `'0'` and `'1'`.

`1 <= m, n <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Winter is coming! During the contest, your first job is to design a standard heater with a fixed warm radius to warm all the houses.

Every house can be warmed, as long as the house is within the heater's warm radius range. 
Given the positions of `houses` and `heaters` on a horizontal line, return the minimum radius standard of heaters so that those heaters could cover all houses.

Notice that all the `heaters` follow your radius standard, and the warm radius will the same.


Example 1:
Input: houses = [1,2,3], heaters = [2]
Output: 1
Explanation: The only heater was placed in the position 2, and if we use the radius 1 standard, then all the houses can be warmed.


Example 2:
Input: houses = [1,2,3,4], heaters = [1,4]
Output: 1
Explanation: The two heater was placed in the position 1 and 4. We need to use radius 1 standard, then all the houses can be warmed.


Example 3:
Input: houses = [1,5], heaters = [2]
Output: 3

Constraints:
`1 <= houses.length, heaters.length <= 3 * 104`
`1 <= houses[i], heaters[i] <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `num`, output its complement number. The complement strategy is to flip the bits of its binary representation.


Example 1:
Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (no leading zero bits), and its complement is 010. So you need to output 2.


Example 2:
Input: num = 1
Output: 0
Explanation: The binary representation of 1 is 1 (no leading zero bits), and its complement is 0. So you need to output 0.


Constraints:
The given integer `num` is guaranteed to fit within the range of a 32-bit signed integer.

`num >= 1`
You could assume no leading zero bit in the integer’s binary representation.

This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Hamming distance between two integers is the number of positions at which the corresponding bits are different.

Now your job is to find the total Hamming distance between all pairs of the given numbers.


Example:
Input: 4, 14, 2
Output: 6
Explanation: In binary representation, the 4 is 0100, 14 is 1110, and 2 is 0010 (just
showing the four bits relevant in this case). So the answer will be:
HammingDistance(4, 14) + HammingDistance(4, 2) + HammingDistance(14, 2) = 2 + 2 + 2 = 6.

Note:
Elements of the given array are in the range of `0 ` to `10^9`
Length of the array will not exceed `10^4`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the radius and the position of the center of a circle, implement the function `randPoint` which generates a uniform random point inside the circle.

Implement the `Solution` class:
`Solution(double radius, double x_center, double y_center)` initializes the object with the radius of the circle `radius` and the position of the center `(x_center, y_center)`.

`randPoint()` returns a random point inside the circle. A point on the circumference of the circle is considered to be in the circle. The answer is returned as an array `[x, y]`.


Example 1:
Input
[""Solution"", ""randPoint"", ""randPoint"", ""randPoint""]
[[1.0, 0.0, 0.0], [], [], []]
Output
[null, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]
Explanation
Solution solution = new Solution(1.0, 0.0, 0.0);
solution.randPoint(); // return [-0.02493, -0.38077]
solution.randPoint(); // return [0.82314, 0.38945]
solution.randPoint(); // return [0.36572, 0.17248]

Constraints:
`0 < radius <= 108`
`-107 <= x_center, y_center <= 107`
At most `3 * 104` calls will be made to `randPoint`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0
"Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.


Examples:
`[2,3,4]` , the median is `3`
`[2,3]`, the median is `(2 + 3) / 2 = 2.5`
Given an array nums, there is a sliding window of size k which is moving from the very left of the array to the very right. You can only see the k numbers in the window. Each time the sliding window moves right by one position. Your job is to output the median array for each window in the original array.

For example,
Given nums = `[1,3,-1,-3,5,3,6,7]`, and k = 3.

Window position                Median
---------------               -----
[1  3  -1] -3  5  3  6  7       1
 1 [3  -1  -3] 5  3  6  7       -1
 1  3 [-1  -3  5] 3  6  7       -1
 1  3  -1 [-3  5  3] 6  7       3
 1  3  -1  -3 [5  3  6] 7       5
 1  3  -1  -3  5 [3  6  7]      6
Therefore, return the median sliding window as `[1,-1,-1,3,5,6]`.

Note: 
You may assume `k` is always valid, ie: `k` is always smaller than input array's size for non-empty array.

Answers within `10^-5` of the actual value will be accepted as correct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For an integer n, we call k>=2 a good base of n, if all digits of n base k are 1.

Now given a string representing n, you should return the smallest good base of n in string format.


Example 1:
Input: ""13""
Output: ""3""
Explanation: 13 base 3 is 111.


Example 2:
Input: ""4681""
Output: ""8""
Explanation: 4681 base 8 is 11111.


Example 3:
Input: ""1000000000000000000""
Output: ""999999999999999999""
Explanation: 1000000000000000000 base 999999999999999999 is 11.

Note:
The range of n is [3, 10^18].

The string representing n is always valid and will not have leading zeros.",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"By now, you are given a secret signature consisting of character 'D' and 'I'. 'D' represents a decreasing relationship between two numbers, 'I' represents an increasing relationship between two numbers. And our secret signature was constructed by a special integer array, which contains uniquely all the different number from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature ""DI"" can be constructed by array [2,1,3] or [3,1,2], but won't be constructed by array [3,2,4] or [2,1,3,4], which are both illegal constructing special string that can't represent the ""DI"" secret signature.

On the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] could refer to the given secret signature in the input.


Example 1:
Input: ""I""
Output: [1,2]
Explanation: [1,2] is the only legal initial spectial string can construct secret signature ""I"", where the number 1 and 2 construct an increasing relationship.


Example 2:
Input: ""DI""
Output: [2,1,3]
Explanation: Both [2,1,3] and [3,1,2] can construct the secret signature ""DI"", but since we want to find the one with the smallest lexicographical permutation, you need to output [2,1,3]
Note:
The input string will only contain the character 'D' and 'I'.

The length of input string is a positive integer and will not exceed 10,000",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array, find the maximum number of consecutive 1s in this array.


Example 1:
Input: [1,1,0,1,1,1]
Output: 3
Explanation: The first two digits or the last three digits are consecutive 1s.

    The maximum number of consecutive 1s is 3.

Note:
The input array will only contain `0` and `1`.

The length of input array is a positive integer and will not exceed 10,000",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of scores that are non-negative integers. Player 1 picks one of the numbers from either end of the array followed by the player 2 and then player 1 and so on. Each time a player picks a number, that number will not be available for the next player. This continues until all the scores have been chosen. The player with the maximum score wins.

Given an array of scores, predict whether player 1 is the winner. You can assume each player plays to maximize his score.


Example 1:
Input: [1, 5, 2]
Output: False
Explanation: Initially, player 1 can choose between 1 and 2. 
If he chooses 2 (or 1), then player 2 can choose from 1 (or 2) and 5. If player 2 chooses 5, then player 1 will be left with 1 (or 2). 
So, final score of player 1 is 1 + 2 = 3, and player 2 is 5. 
Hence, player 1 will never be the winner and you need to return False.


Example 2:
Input: [1, 5, 233, 7]
Output: True
Explanation: Player 1 first chooses 1. Then player 2 have to choose between 5 and 7. No matter which number player 2 choose, player 1 can choose 233.

Finally, player 1 has more score (234) than player 2 (12), so you need to return True representing player1 can win.


Constraints:
1 <= length of the array <= 20.

Any scores in the given array are non-negative integers and will not exceed 10,000,000.

If the scores of both players are equal, then player 1 is still the winner.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array, find the maximum number of consecutive 1s in this array if you can flip at most one 0.


Example 1:
Input: [1,0,1,1,0]
Output: 4
Explanation: Flip the first zero will get the the maximum number of consecutive 1s.

    After flipping, the maximum number of consecutive 1s is 4.

Note:
The input array will only contain `0` and `1`.

The length of input array is a positive integer and will not exceed 10,000
Follow up:
What if the input numbers come in one by one as an infinite stream? In other words, you can't store all numbers coming from the stream as it's too large to hold in memory. Could you solve it efficiently?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Think about Zuma Game. You have a row of balls on the table, colored red(R), yellow(Y), blue(B), green(G), and white(W). You also have several balls in your hand.

Each time, you may choose a ball in your hand, and insert it into the row (including the leftmost place and rightmost place). Then, if there is a group of 3 or more balls in the same color touching, remove these balls. Keep doing this until no more balls can be removed.

Find the minimal balls you have to insert to remove all the balls on the table. If you cannot remove all the balls, output -1.


Example 1:
Input: board = ""WRRBBW"", hand = ""RB""
Output: -1
Explanation: WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW

Example 2:
Input: board = ""WWRRBBWW"", hand = ""WRBRW""
Output: 2
Explanation: WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> empty

Example 3:
Input: board = ""G"", hand = ""GGGGG""
Output: 2
Explanation: G -> G[G] -> GG[G] -> empty 

Example 4:
Input: board = ""RBYYBBRRB"", hand = ""YRBGB""
Output: 3
Explanation: RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty 

Constraints:
You may assume that the initial row of balls on the table won’t have any 3 or more consecutive balls with the same color.

`1 <= board.length <= 16`
`1 <= hand.length <= 5`
Both input strings will be non-empty and only contain characters 'R','Y','B','G','W'.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a robot cleaner in a room modeled as a grid.

Each cell in the grid can be empty or blocked.

The robot cleaner with 4 given APIs can move forward, turn left or turn right. Each turn it made is 90 degrees.

When it tries to move into a blocked cell, its bumper sensor detects the obstacle and it stays on the current cell.

Design an algorithm to clean the entire room using only the 4 given APIs shown below.

interface Robot {
  // returns true if next cell is open and robot moves into the cell.

  // returns false if next cell is obstacle and robot stays on the current cell.

  boolean move();
  // Robot will stay on the same cell after calling turnLeft/turnRight.

  // Each turn will be 90 degrees.

  void turnLeft();
  void turnRight();
  // Clean the current cell.

  void clean();
}

Example:
Input:
room = [
  [1,1,1,1,1,0,1,1],
  [1,1,1,1,1,0,1,1],
  [1,0,1,1,1,1,1,1],
  [0,0,0,1,0,0,0,0],
  [1,1,1,1,1,1,1,1]
],
row = 1,
col = 3
Explanation:
All grids in the room are marked by either 0 or 1.

0 means the cell is blocked, while 1 means the cell is accessible.

The robot initially starts at the position of row=1, col=3.

From the top left corner, its position is one row below and three columns right.

Notes:
The input is only given to initialize the room and the robot's position internally. You must solve this problem ""blindfolded"". In other words, you must control the robot using only the mentioned 4 APIs, without knowing the room layout and the initial robot's position.

The robot's initial position will always be in an accessible cell.

The initial direction of the robot will be facing up.

All accessible cells are connected, which means the all cells marked as 1 will be accessible by the robot.

Assume all four edges of the grid are all surrounded by wall.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return `true` if the ball can stop at the destination, otherwise return `false`.

You may assume that the borders of the maze are all walls (see examples).


Example 1:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
Output: true
Explanation: One possible way is : left -> down -> left -> down -> right -> down -> right.


Example 2:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
Output: false
Explanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.


Example 3:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
Output: false

Constraints:
`m == maze.length`
`n == maze[i].length`
`1 <= m, n <= 100`
`maze[i][j]` is `0` or `1`.

`start.length == 2`
`destination.length == 2`
`0 <= startrow, destinationrow <= m`
`0 <= startcol, destinationcol <= n`
Both the ball and the destination exist in an empty space, and they will not be in the same position initially.

The maze contains at least 2 empty spaces.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array, your task is to find all the different possible increasing subsequences of the given array, and the length of an increasing subsequence should be at least 2.


Example:
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7,7], [4,7,7]]

Constraints:
The length of the given array will not exceed 15.

The range of integer in the given array is [-100,100].

The given array may contain duplicates, and two equal integers should also be considered as a special case of increasing sequence.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums`, we call `(i, j)` an important reverse pair if `i < j` and `nums[i] > 2*nums[j]`.

You need to return the number of important reverse pairs in the given array.


Example1:
Input: [1,3,2,3,1]
Output: 2

Example2:
Input: [2,4,3,5,1]
Output: 3
Note:
The length of the given array will not exceed `50,000`.

All the numbers in the input array are in the range of 32-bit integer.",0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a list of non-negative integers, a1, a2, ..., an, and a target, S. Now you have 2 symbols `+` and `-`. For each integer, you should choose one from `+` and `-` as its new symbol.

Find out how many ways to assign symbols to make sum of integers equal to target S.


Example 1:
Input: nums is [1, 1, 1, 1, 1], S is 3. 
Output: 5
Explanation: 
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
There are 5 ways to assign symbols to make the sum of nums be target 3.


Constraints:
The length of the given array is positive and will not exceed 20.

The sum of elements in the given array will not exceed 1000.

Your output answer is guaranteed to be fitted in a 32-bit integer.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In LOL world, there is a hero called Teemo and his attacking can make his enemy Ashe be in poisoned condition. Now, given the Teemo's attacking ascending time series towards Ashe and the poisoning time duration per Teemo's attacking, you need to output the total time that Ashe is in poisoned condition.

You may assume that Teemo attacks at the very beginning of a specific time point, and makes Ashe be in poisoned condition immediately.


Example 1:
Input: [1,4], 2
Output: 4
Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned immediately. 
This poisoned status will last 2 seconds until the end of time point 2. 
And at time point 4, Teemo attacks Ashe again, and causes Ashe to be in poisoned status for another 2 seconds. 
So you finally need to output 4.


Example 2:
Input: [1,2], 2
Output: 3
Explanation: At time point 1, Teemo starts attacking Ashe and makes Ashe be poisoned. 
This poisoned status will last 2 seconds until the end of time point 2. 
However, at the beginning of time point 2, Teemo attacks Ashe again who is already in poisoned status. 
Since the poisoned status won't add up together, though the second poisoning attack will still work at time point 2, it will stop at the end of time point 3. 
So you finally need to output 3.

Note:
You may assume the length of given time series array won't exceed 10000.

You may assume the numbers in the Teemo's attacking time series and his poisoning time duration per attacking are non-negative integers, which won't exceed 10,000,000.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two integer arrays `nums1` and `nums2` both of unique elements, where `nums1` is a subset of `nums2`.

Find all the next greater numbers for `nums1`'s elements in the corresponding places of `nums2`.

The Next Greater Number of a number `x` in `nums1` is the first greater number to its right in `nums2`. If it does not exist, return `-1` for this number.


Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
Explanation:
For number 4 in the first array, you cannot find the next greater number for it in the second array, so output -1.

For number 1 in the first array, the next greater number for it in the second array is 3.

For number 2 in the first array, there is no next greater number for it in the second array, so output -1.


Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
Explanation:
For number 2 in the first array, the next greater number for it in the second array is 3.

For number 4 in the first array, there is no next greater number for it in the second array, so output -1.


Constraints:
`1 <= nums1.length <= nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 104`
All integers in `nums1` and `nums2` are unique.

All the integers of `nums1` also appear in `nums2`.

Follow up: Could you find an `O(nums1.length + nums2.length)` solution?",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of non-overlapping axis-aligned rectangles `rects`, write a function `pick` which randomly and uniformily picks an integer point in the space covered by the rectangles.

Note:
An integer point is a point that has integer coordinates. 
A point on the perimeter of a rectangle is included in the space covered by the rectangles. 
`i`th rectangle = `rects[i]` = `[x1,y1,x2,y2]`, where `[x1, y1]` are the integer coordinates of the bottom-left corner, and `[x2, y2]` are the integer coordinates of the top-right corner.

length and width of each rectangle does not exceed `2000`.

`1 <= rects.length <= 100`
`pick` return a point as an array of integer coordinates `[p_x, p_y]`
`pick` is called at most `10000` times.


Example 1:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[[[1,1,5,5]]],[],[],[]]
Output: 
[null,[4,1],[4,1],[3,3]]

Example 2:
Input: 
[""Solution"",""pick"",""pick"",""pick"",""pick"",""pick""]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
Output: 
[null,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]
Explanation of Input Syntax:
The input is two lists: the subroutines called and their arguments. `Solution`'s constructor has one argument, the array of rectangles `rects`. `pick` has no arguments. Arguments are always wrapped with a list, even if there aren't any.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction. There is also a hole in this maze. The ball will drop into the hole if it rolls onto the hole.

Given the `m x n` `maze`, the ball's position `ball` and the hole's position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return a string `instructions` of all the instructions that the ball should follow to drop in the hole with the shortest distance possible. If there are multiple valid instructions, return the lexicographically minimum one. If the ball can't drop in the hole, return `""impossible""`.

If there is a way for the ball to drop in the hole, the answer `instructions` should contain the characters `'u'` (i.e., up), `'d'` (i.e., down), `'l'` (i.e., left), and `'r'` (i.e., right).

The distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).

You may assume that the borders of the maze are all walls (see examples).


Example 1:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]
Output: ""lul""
Explanation: There are two shortest ways for the ball to drop into the hole.

The first way is left -> up -> left, represented by ""lul"".

The second way is up -> left, represented by 'ul'.

Both ways have shortest distance 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is ""lul"".


Example 2:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], ball = [4,3], hole = [3,0]
Output: ""impossible""
Explanation: The ball cannot reach the hole.


Example 3:
Input: maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0,0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5]
Output: ""dldr""

Constraints:
`m == maze.length`
`n == maze[i].length`
`1 <= m, n <= 100`
`maze[i][j]` is `0` or `1`.

`ball.length == 2`
`hole.length == 2`
`0 <= ballrow, holerow <= m`
`0 <= ballcol, holecol <= n`
Both the ball and the hole exist in an empty space, and they will not be in the same position initially.

The maze contains at least 2 empty spaces.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `words`, return the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below.

In the American keyboard:
the first row consists of the characters `""qwertyuiop""`,
the second row consists of the characters `""asdfghjkl""`, and
the third row consists of the characters `""zxcvbnm""`.


Example 1:
Input: words = [""Hello"",""Alaska"",""Dad"",""Peace""]
Output: [""Alaska"",""Dad""]

Example 2:
Input: words = [""omk""]
Output: []

Example 3:
Input: words = [""adsdf"",""sfd""]
Output: [""adsdf"",""sfd""]

Constraints:
`1 <= words.length <= 20`
`1 <= words[i].length <= 100`
`words[i]` consists of English letters (both lowercase and uppercase).",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary search tree (BST) with duplicates, return all the mode(s) (i.e., the most frequently occurred element) in it.

If the tree has more than one mode, return them in any order.

Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than or equal to the node's key.

The right subtree of a node contains only nodes with keys greater than or equal to the node's key.

Both the left and right subtrees must also be binary search trees.


Example 1:
Input: root = [1,null,2,2]
Output: [2]

Example 2:
Input: root = [0]
Output: [0]

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`
Follow up: Could you do that without using any extra space? (Assume that the implicit stack space incurred due to recursion does not count).",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose LeetCode will start its IPO soon. In order to sell a good price of its shares to Venture Capital, LeetCode would like to work on some projects to increase its capital before the IPO. Since it has limited resources, it can only finish at most k distinct projects before the IPO. Help LeetCode design the best way to maximize its total capital after finishing at most k distinct projects. 
You are given several projects. For each project i, it has a pure profit Pi and a minimum capital of Ci is needed to start the corresponding project. Initially, you have W capital. When you finish a project, you will obtain its pure profit and the profit will be added to your total capital.

To sum up, pick a list of at most k distinct projects from given projects to maximize your final capital, and output your final maximized capital.


Example 1:
Input: k=2, W=0, Profits=[1,2,3], Capital=[0,1,1].
Output: 4
Explanation: Since your initial capital is 0, you can only start the project indexed 0.

             After finishing it you will obtain profit 1 and your capital becomes 1.

             With capital 1, you can either start the project indexed 1 or the project indexed 2.

             Since you can choose at most 2 projects, you need to finish the project indexed 2 to get the maximum capital.

             Therefore, output the final maximized capital, which is 0 + 1 + 3 = 4.

Note:
You may assume all numbers in the input are non-negative integers.

The length of Profits array and Capital array will not exceed 50,000.

The answer is guaranteed to fit in a 32-bit signed integer.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a circular integer array `nums` (i.e., the next element of `nums[nums.length - 1]` is `nums[0]`), return the next greater number for every element in `nums`.

The next greater number of a number `x` is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn't exist, return `-1` for this number.


Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The first 1's next greater number is 2; 
The number 2 can't find next greater number. 
The second 1's next greater number needs to search circularly, which is also 2.


Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]

Constraints:
`1 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a ball in a `maze` with empty spaces (represented as `0`) and walls (represented as `1`). The ball can go through the empty spaces by rolling up, down, left or right, but it won't stop rolling until hitting a wall. When the ball stops, it could choose the next direction.

Given the `m x n` `maze`, the ball's `start` position and the `destination`, where `start = [startrow, startcol]` and `destination = [destinationrow, destinationcol]`, return the shortest distance for the ball to stop at the destination. If the ball cannot stop at `destination`, return `-1`.

The distance is the number of empty spaces traveled by the ball from the start position (excluded) to the destination (included).

You may assume that the borders of the maze are all walls (see examples).


Example 1:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
Output: 12
Explanation: One possible way is : left -> down -> left -> down -> right -> down -> right.

The length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.


Example 2:
Input: maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1,1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
Output: -1
Explanation: There is no way for the ball to stop at the destination. Notice that you can pass through the destination but you cannot stop there.


Example 3:
Input: maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0,1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
Output: -1

Constraints:
`m == maze.length`
`n == maze[i].length`
`1 <= m, n <= 100`
`maze[i][j]` is `0` or `1`.

`start.length == 2`
`destination.length == 2`
`0 <= startrow, destinationrow <= m`
`0 <= startcol, destinationcol <= n`
Both the ball and the destination exist in an empty space, and they will not be in the same position initially.

The maze contains at least 2 empty spaces.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A perfect number is a positive integer that is equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer `x` is an integer that can divide `x` evenly.

Given an integer `n`, return `true` if `n` is a perfect number, otherwise return `false`.


Example 1:
Input: num = 28
Output: true
Explanation: 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, and 14 are all divisors of 28.


Example 2:
Input: num = 6
Output: true

Example 3:
Input: num = 496
Output: true

Example 4:
Input: num = 8128
Output: true

Example 5:
Input: num = 2
Output: false

Constraints:
`1 <= num <= 108`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the root of a tree, you are asked to find the most frequent subtree sum. The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself). So what is the most frequent subtree sum value? If there is a tie, return all the values with the highest frequency in any order.


Examples 1
Input:
  5
 /  \
2   -3
return [2, -3, 4], since all the values happen only once, return all of them in any order.


Examples 2
Input:
  5
 /  \
2   -5
return [2], since 2 happens twice, however -5 only occur once.

Note:
You may assume the sum of values in any subtree is in the range of 32-bit signed integer.",0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Fibonacci numbers, commonly denoted `F(n)` form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from `0` and `1`. That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2), for n > 1.

Given `n`, calculate `F(n)`.


Example 1:
Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.


Example 2:
Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.


Example 3:
Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.


Constraints:
`0 <= n <= 30`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `node` in a binary search tree, return the in-order successor of that node in the BST. If that node has no in-order successor, return `null`.

The successor of a `node` is the node with the smallest key greater than `node.val`.

You will have direct access to the node but not to the root of the tree. Each node will have a reference to its parent node. Below is the definition for `Node`:
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}

Example 1:
Input: tree = [2,1,3], node = 1
Output: 2
Explanation: 1's in-order successor node is 2. Note that both the node and the return value is of Node type.


Example 2:
Input: tree = [5,3,6,2,4,null,null,1], node = 6
Output: null
Explanation: There is no in-order successor of the current node, so the answer is null.


Example 3:
Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
Output: 17

Example 4:
Input: tree = [15,6,18,3,7,17,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
Output: 15

Example 5:
Input: tree = [0], node = 0
Output: null

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`
All Nodes will have unique values.

Follow up: Could you solve it without looking up any of the node's values?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the leftmost value in the last row of the tree.


Example 1:
Input: root = [2,1,3]
Output: 1

Example 2:
Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the video game Fallout 4, the quest ""Road to Freedom"" requires players to reach a metal dial called the ""Freedom Trail Ring"", and use the dial to spell a specific keyword in order to open the door.

Given a string ring, which represents the code engraved on the outer ring and another string key, which represents the keyword needs to be spelled. You need to find the minimum number of steps in order to spell all the characters in the keyword.

Initially, the first character of the ring is aligned at 12:00 direction. You need to spell all the characters in the string key one by one by rotating the ring clockwise or anticlockwise to make each character of the string key aligned at 12:00 direction and then by pressing the center button.

At the stage of rotating the ring to spell the key character key[i]:
You can rotate the ring clockwise or anticlockwise one place, which counts as 1 step. The final purpose of the rotation is to align one of the string ring's characters at the 12:00 direction, where this character must equal to the character key[i].

If the character key[i] has been aligned at the 12:00 direction, you need to press the center button to spell, which also counts as 1 step. After the pressing, you could begin to spell the next character in the key (next stage), otherwise, you've finished all the spelling.


Example:
Input: ring = ""godding"", key = ""gd""
Output: 4
Explanation:
For the first key character 'g', since it is already in place, we just need 1 step to spell this character. 
For the second key character 'd', we need to rotate the ring ""godding"" anticlockwise by two steps to make it become ""ddinggo"".

Also, we need 1 more step for spelling.

So the final output is 4.

Note:
Length of both ring and key will be in range 1 to 100.

There are only lowercase letters in both strings and might be some duplcate characters in both strings.

It's guaranteed that string key could always be spelled by rotating the string ring.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return an array of the largest value in each row of the tree (0-indexed).


Example 1:
Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]

Example 2:
Input: root = [1,2,3]
Output: [1,3]

Example 3:
Input: root = [1]
Output: [1]

Example 4:
Input: root = [1,null,2]
Output: [1,2]

Example 5:
Input: root = []
Output: []

Constraints:
The number of nodes in the tree will be in the range `[0, 104]`.

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, find the longest palindromic subsequence's length in `s`.

A subsequence is a sequence that can be derived from another sequence by deleting some or no elements without changing the order of the remaining elements.


Example 1:
Input: s = ""bbbab""
Output: 4
Explanation: One possible longest palindromic subsequence is ""bbbb"".


Example 2:
Input: s = ""cbbd""
Output: 2
Explanation: One possible longest palindromic subsequence is ""bb"".


Constraints:
`1 <= s.length <= 1000`
`s` consists only of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have n super washing machines on a line. Initially, each washing machine has some dresses or is empty. 
For each move, you could choose any m (1 ≤ m ≤ n) washing machines, and pass one dress of each washing machine to one of its adjacent washing machines  at the same time .  
Given an integer array representing the number of dresses in each washing machine from left to right on the line, you should find the minimum number of moves to make all the washing machines have the same number of dresses. If it is not possible to do it, return -1.


Example1
Input: [1,0,5]
Output: 3
Explanation: 
1st move:    1     0 <-- 5    =>    1     1     4
2nd move:    1 <-- 1 <-- 4    =>    2     1     3    
3rd move:    2     1 <-- 3    =>    2     2     2   

Example2
Input: [0,3,0]
Output: 2
Explanation: 
1st move:    0 <-- 3     0    =>    1     2     0    
2nd move:    1     2 --> 0    =>    1     1     1     

Example3
Input: [0,2,0]
Output: -1
Explanation: 
It's impossible to make all the three washing machines have the same number of dresses. 
Note:
The range of n is [1, 10000].

The range of dresses number in a super washing machine is [0, 1e5].",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the number of rows `n_rows` and number of columns `n_cols` of a 2D binary matrix where all values are initially 0. Write a function `flip` which chooses a 0 value uniformly at random, changes it to 1, and then returns the position `[row.id, col.id]` of that value. Also, write a function `reset` which sets all values back to 0. Try to minimize the number of calls to system's Math.random() and optimize the time and space complexity.

Note:
`1 <= n_rows, n_cols <= 10000`
`0 <= row.id < n_rows` and `0 <= col.id < n_cols`
`flip` will not be called when the matrix has no 0 values left.

the total number of calls to `flip` and `reset` will not exceed 1000.


Example 1:
Input: 
[""Solution"",""flip"",""flip"",""flip"",""flip""]
[[2,3],[],[],[],[]]
Output: [null,[0,1],[1,2],[1,0],[1,1]]

Example 2:
Input: 
[""Solution"",""flip"",""flip"",""reset"",""flip""]
[[1,2],[],[],[],[]]
Output: [null,[0,0],[0,1],null,[0,0]]
Explanation of Input Syntax:
The input is two lists: the subroutines called and their arguments. `Solution`'s constructor has two arguments, `n_rows` and `n_cols`. `flip` and `reset` have no arguments. Arguments are always wrapped with a list, even if there aren't any.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"Given a word, you need to judge whether the usage of capitals in it is right or not.

We define the usage of capitals in a word to be right when one of the following cases holds:
All letters in this word are capitals, like ""USA"".

All letters in this word are not capitals, like ""leetcode"".

Only the first letter in this word is capital, like ""Google"".

Otherwise, we define that this word doesn't use capitals in a right way.


Example 1:
Input: ""USA""
Output: True

Example 2:
Input: ""FlaG""
Output: False
Note: The input will be a non-empty word consisting of uppercase and lowercase latin letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `a` and `b`, find the length of the longest uncommon subsequence between them.

A subsequence of a string `s` is a string that can be obtained after deleting any number of characters from `s`. For example, `""abc""` is a subsequence of `""aebdc""` because you can delete the underlined characters in `""aebdc""` to get `""abc""`. Other subsequences of `""aebdc""` include `""aebdc""`, `""aeb""`, and `""""` (empty string).

An uncommon subsequence between two strings is a string that is a subsequence of one but not the other.

Return the length of the longest uncommon subsequence between `a` and `b`. If the longest uncommon subsequence doesn't exist, return `-1`.


Example 1:
Input: a = ""aba"", b = ""cdc""
Output: 3
Explanation: One longest uncommon subsequence is ""aba"" because ""aba"" is a subsequence of ""aba"" but not ""cdc"".

Note that ""cdc"" is also a longest uncommon subsequence.


Example 2:
Input: a = ""aaa"", b = ""bbb""
Output: 3
Explanation: The longest uncommon subsequences are ""aaa"" and ""bbb"".


Example 3:
Input: a = ""aaa"", b = ""aaa""
Output: -1
Explanation: Every subsequence of string a is also a subsequence of string b. Similarly, every subsequence of string b is also a subsequence of string a.


Constraints:
`1 <= a.length, b.length <= 100`
`a` and `b` consist of lower-case English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of strings, you need to find the longest uncommon subsequence among them. The longest uncommon subsequence is defined as the longest subsequence of one of these strings and this subsequence should not be any subsequence of the other strings.

A subsequence is a sequence that can be derived from one sequence by deleting some characters without changing the order of the remaining elements. Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string.

The input will be a list of strings, and the output needs to be the length of the longest uncommon subsequence. If the longest uncommon subsequence doesn't exist, return -1.


Example 1:
Input: ""aba"", ""cdc"", ""eae""
Output: 3
Note:
All the given strings' lengths will not exceed 10.

The length of the given list will be in the range of [2, 50].",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`, return `true` if `nums` has a continuous subarray of size at least two whose elements sum up to a multiple of `k`, or `false` otherwise.

An integer `x` is a multiple of `k` if there exists an integer `n` such that `x = n * k`. `0` is always a multiple of `k`.


Example 1:
Input: nums = [23,2,4,6,7], k = 6
Output: true
Explanation: [2, 4] is a continuous subarray of size 2 whose elements sum up to 6.


Example 2:
Input: nums = [23,2,6,4,7], k = 6
Output: true
Explanation: [23, 2, 6, 4, 7] is an continuous subarray of size 5 whose elements sum up to 42.

42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.


Example 3:
Input: nums = [23,2,6,4,7], k = 13
Output: false

Constraints:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`
`0 <= sum(nums[i]) <= 231 - 1`
`1 <= k <= 231 - 1`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and a string array `dictionary`, return the longest string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the smallest lexicographical order. If there is no possible result, return the empty string.


Example 1:
Input: s = ""abpcplea"", dictionary = [""ale"",""apple"",""monkey"",""plea""]
Output: ""apple""

Example 2:
Input: s = ""abpcplea"", dictionary = [""a"",""b"",""c""]
Output: ""a""

Constraints:
`1 <= s.length <= 1000`
`1 <= dictionary.length <= 1000`
`1 <= dictionary[i].length <= 1000`
`s` and `dictionary[i]` consist of lowercase English letters.",0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array, find the maximum length of a contiguous subarray with equal number of 0 and 1. 

Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with equal number of 0 and 1.


Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is a longest contiguous subarray with equal number of 0 and 1.

Note:
The length of the given binary array will not exceed 50,000.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose you have `n` integers labeled `1` through `n`. A permutation of those `n` integers `perm` (1-indexed) is considered a beautiful arrangement if for every `i` (`1 <= i <= n`), either of the following is true:
`perm[i]` is divisible by `i`.

`i` is divisible by `perm[i]`.

Given an integer `n`, return the number of the beautiful arrangements that you can construct.


Example 1:
Input: n = 2
Output: 2
Explanation: 
The first beautiful arrangement is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second beautiful arrangement is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1

Example 2:
Input: n = 1
Output: 1

Constraints:
`1 <= n <= 15`",0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of n distinct non-empty strings, you need to generate minimal possible abbreviations for every word following rules below.

Begin with the first character and then the number of characters abbreviated, which followed by the last character.

If there are any conflict, that is more than one words share the same abbreviation, a longer prefix is used instead of only the first character until making the map from word to abbreviation become unique. In other words, a final abbreviation cannot map to more than one original words.

 If the abbreviation doesn't make the word shorter, then keep it as original.


Example:
Input: [""like"", ""god"", ""internal"", ""me"", ""internet"", ""interval"", ""intension"", ""face"", ""intrusion""]
Output: [""l2e"",""god"",""internal"",""me"",""i6t"",""interval"",""inte4n"",""f2e"",""intr4n""]
Note:
 Both n and the length of each word will not exceed 400.

 The length of each word is greater than 1.

 The words consist of lowercase English letters only.

 The return answers should be in the same order as the original array.",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of positive integers `w` where `w[i]` describes the weight of `i``th` index (0-indexed).

We need to call the function `pickIndex()` which randomly returns an integer in the range `[0, w.length - 1]`. `pickIndex()` should return the integer proportional to its weight in the `w` array. For example, for `w = [1, 3]`, the probability of picking the index `0` is `1 / (1 + 3) = 0.25` (i.e 25%) while the probability of picking the index `1` is `3 / (1 + 3) = 0.75` (i.e 75%).

More formally, the probability of picking index `i` is `w[i] / sum(w)`.


Example 1:
Input
[""Solution"",""pickIndex""]
[[[1]],[]]
Output
[null,0]
Explanation
Solution solution = new Solution([1]);
solution.pickIndex(); // return 0. Since there is only one single element on the array the only option is to return the first element.


Example 2:
Input
[""Solution"",""pickIndex"",""pickIndex"",""pickIndex"",""pickIndex"",""pickIndex""]
[[[1,3]],[],[],[],[],[]]
Output
[null,1,1,1,1,0]
Explanation
Solution solution = new Solution([1, 3]);
solution.pickIndex(); // return 1. It's returning the second element (index = 1) that has probability of 3/4.

solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 1
solution.pickIndex(); // return 0. It's returning the first element (index = 0) that has probability of 1/4.

Since this is a randomization problem, multiple answers are allowed so the following outputs can be considered correct :
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
......

and so on.


Constraints:
`1 <= w.length <= 10000`
`1 <= w[i] <= 10^5`
`pickIndex` will be called at most `10000` times.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"Let's play the minesweeper game (Wikipedia, online game)!
You are given a 2D char matrix representing the game board. 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed blank square that has no adjacent (above, below, left, right, and all 4 diagonals) mines, digit ('1' to '8') represents how many mines are adjacent to this revealed square, and finally 'X' represents a revealed mine.

Now given the next click position (row and column indices) among all the unrevealed squares ('M' or 'E'), return the board after revealing this position according to the following rules:
If a mine ('M') is revealed, then the game is over - change it to 'X'.

If an empty square ('E') with no adjacent mines is revealed, then change it to revealed blank ('B') and all of its adjacent unrevealed squares should be revealed recursively.

If an empty square ('E') with at least one adjacent mine is revealed, then change it to a digit ('1' to '8') representing the number of adjacent mines.

Return the board when no more squares will be revealed.


Example 1:
Input: 
[['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'M', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E']]
Click : [3,0]
Output: 
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
Explanation:

Example 2:
Input: 
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
Click : [1,2]
Output: 
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'X', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
Explanation:
Note:
The range of the input matrix's height and width is [1,50].

The click position will only be an unrevealed square ('M' or 'E'), which also means the input board contains at least one clickable square.

The input board won't be a stage when game is over (some mines have been revealed).

For simplicity, not mentioned rules should be ignored in this problem. For example, you don't need to reveal all the unrevealed mines when the game is over, consider any cases that you will win the game or flag any squares.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.


Example:
Input:
   1
    \
     3
    /
   2
Output:
1
Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).

Note:
There are at least two nodes in this BST.

This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` `picture` consisting of black `'B'` and white `'W'` pixels, return the number of black lonely pixels.

A black lonely pixel is a character `'B'` that located at a specific position where the same row and same column don't have any other black pixels.


Example 1:
Input: picture = [[""W"",""W"",""B""],[""W"",""B"",""W""],[""B"",""W"",""W""]]
Output: 3
Explanation: All the three 'B's are black lonely pixels.


Example 2:
Input: picture = [[""B"",""B"",""B""],[""B"",""B"",""B""],[""B"",""B"",""B""]]
Output: 0

Constraints:
`m == picture.length`
`n == picture[i].length`
`1 <= m, n <= 500`
`picture[i][j]` is `'W'` or `'B'`.",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and an integer `k`, return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair `(nums[i], nums[j])`, where the following are true:
`0 <= i, j < nums.length`
`i != j`
`|nums[i] - nums[j]| == k`
Notice that `|val|` denotes the absolute value of `val`.


Example 1:
Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).

Although we have two 1s in the input, we should only return the number of unique pairs.


Example 2:
Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).


Example 3:
Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is one 0-diff pair in the array, (1, 1).


Example 4:
Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3
Output: 2

Example 5:
Input: nums = [-1,-2,-3], k = 1
Output: 2

Constraints:
`1 <= nums.length <= 104`
`-107 <= nums[i] <= 107`
`0 <= k <= 107`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a picture consisting of black and white pixels, and a positive integer N, find the number of black pixels located at some specific row R and column C that align with all the following rules:
 Row R and column C both contain exactly N black pixels.

 For all rows that have a black pixel at column C, they should be exactly the same as row R
The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively. 

Example:
Input:                                            
[['W', 'B', 'W', 'B', 'B', 'W'],    
 ['W', 'B', 'W', 'B', 'B', 'W'],    
 ['W', 'B', 'W', 'B', 'B', 'W'],    
 ['W', 'W', 'B', 'W', 'B', 'W']] 
N = 3
Output: 6
Explanation: All the bold 'B' are the black pixels we need (all 'B's at column 1 and 3).

        0    1    2    3    4    5         column index                                            
0    [['W', 'B', 'W', 'B', 'B', 'W'],    
1     ['W', 'B', 'W', 'B', 'B', 'W'],    
2     ['W', 'B', 'W', 'B', 'B', 'W'],    
3     ['W', 'W', 'B', 'W', 'B', 'W']]    
row index
Take 'B' at row R = 0 and column C = 1 as an example:
Rule 1, row R = 0 and column C = 1 both have exactly N = 3 black pixels. 
Rule 2, the rows have black pixel at column C = 1 are row 0, row 1 and row 2. They are exactly the same as row R = 0.

Note:
The range of width and height of the input 2D array is [1,200].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Note: This is a companion problem to the System Design problem: Design TinyURL.

TinyURL is a URL shortening service where you enter a URL such as `https://leetcode.com/problems/design-tinyurl` and it returns a short URL such as `http://tinyurl.com/4e9iAk`.

Design the `encode` and `decode` methods for the TinyURL service. There is no restriction on how your encode/decode algorithm should work. You just need to ensure that a URL can be encoded to a tiny URL and the tiny URL can be decoded to the original URL.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You need to construct a binary tree from a string consisting of parenthesis and integers.

The whole input represents a binary tree. It contains an integer followed by zero, one or two pairs of parenthesis. The integer represents the root's value and a pair of parenthesis contains a child binary tree with the same structure.

You always start to construct the left child node of the parent first if it exists.


Example 1:
Input: s = ""4(2(3)(1))(6(5))""
Output: [4,2,6,3,1,5]

Example 2:
Input: s = ""4(2(3)(1))(6(5)(7))""
Output: [4,2,6,3,1,5,7]

Example 3:
Input: s = ""-4(2(3)(1))(6(5)(7))""
Output: [-4,2,6,3,1,5,7]

Constraints:
`0 <= s.length <= 3 * 104`
`s` consists of digits, `'('`, `')'`, and `'-'` only.",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings representing two complex numbers.

You need to return a string representing their multiplication. Note i2 = -1 according to the definition.


Example 1:
Input: ""1+1i"", ""1+1i""
Output: ""0+2i""
Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, and you need convert it to the form of 0+2i.


Example 2:
Input: ""1+-1i"", ""1+-1i""
Output: ""0+-2i""
Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, and you need convert it to the form of 0+-2i.

Note:
The input strings will not have extra blank.

The input strings will be given in the form of a+bi, where the integer a and b will both belong to the range of [-100, 100]. And the output should be also in this form.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:
The left subtree of a node contains only nodes with keys less than the node's key.

The right subtree of a node contains only nodes with keys greater than the node's key.

Both the left and right subtrees must also be binary search trees.

Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/

Example 1:
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]

Example 3:
Input: root = [1,0,2]
Output: [3,3,2]

Example 4:
Input: root = [3,2,4,1]
Output: [7,9,4,10]

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-104 <= Node.val <= 104`
All the values in the tree are unique.

`root` is guaranteed to be a valid binary search tree.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Given a list of 24-hour clock time points in ""HH:MM"" format, return the minimum minutes difference between any two time-points in the list.


Example 1:
Input: timePoints = [""23:59"",""00:00""]
Output: 1

Example 2:
Input: timePoints = [""00:00"",""23:59"",""00:00""]
Output: 0

Constraints:
`2 <= timePoints <= 2 * 104`
`timePoints[i]` is in the format ""HH:MM"".",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a sorted array consisting of only integers where every element appears exactly twice, except for one element which appears exactly once. Find this single element that appears only once.

Follow up: Your solution should run in O(log n) time and O(1) space.


Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10

Constraints:
`1 <= nums.length <= 10^5`
`0 <= nums[i] <= 10^5`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer `k`, reverse the first `k` characters for every `2k` characters counting from the start of the string.

If there are fewer than `k` characters left, reverse all of them. If there are less than `2k` but greater than or equal to `k` characters, then reverse the first `k` characters and left the other as original.


Example 1:
Input: s = ""abcdefg"", k = 2
Output: ""bacdfeg""

Example 2:
Input: s = ""abcd"", k = 2
Output: ""bacd""

Constraints:
`1 <= s.length <= 104`
`s` consists of only lowercase English letters.

`1 <= k <= 104`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a matrix consists of 0 and 1, find the distance of the nearest 0 for each cell.

The distance between two adjacent cells is 1.


Example 1: 
Input:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
Output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Example 2: 
Input:
[[0,0,0],
 [0,1,0],
 [1,1,1]]
Output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]
Note:
The number of elements of the given matrix will not exceed 10,000.

There are at least one 0 in the given matrix.

The cells are adjacent in only four directions: up, down, left and right.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the length of the diameter of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in a tree. This path may or may not pass through the `root`.

The length of a path between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3is the length of the path [4,2,1,3] or [5,2,1,3].


Example 2:
Input: root = [1,2]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-100 <= Node.val <= 100`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"During the NBA playoffs, we always arrange the rather strong team to play with the rather weak team, like make the rank 1 team play with the rank nth team, which is a good strategy to make the contest more interesting. Now, you're given n teams, you need to output their final contest matches in the form of a string.

The n teams are given in the form of positive integers from 1 to n, which represents their initial rank. (Rank 1 is the strongest team and Rank n is the weakest team.) We'll use parentheses('(', ')') and commas(',') to represent the contest team pairing - parentheses('(' , ')') for pairing and commas(',') for partition. During the pairing process in each round, you always need to follow the strategy of making the rather strong one pair with the rather weak one.


Example 1:
Input: 2
Output: (1,2)
Explanation: 
Initially, we have the team 1 and the team 2, placed like: 1,2.

Then we pair the team (1,2) together with '(', ')' and ',', which is the final answer.


Example 2:
Input: 4
Output: ((1,4),(2,3))
Explanation: 
In the first round, we pair the team 1 and 4, the team 2 and 3 together, as we need to make the strong team and weak team together.

And we got (1,4),(2,3).

In the second round, the winners of (1,4) and (2,3) need to play again to generate the final winner, so you need to add the paratheses outside them.

And we got the final answer ((1,4),(2,3)).


Example 3:
Input: 8
Output: (((1,8),(4,5)),((2,7),(3,6)))
Explanation: 
First round: (1,8),(2,7),(3,6),(4,5)
Second round: ((1,8),(4,5)),((2,7),(3,6))
Third round: (((1,8),(4,5)),((2,7),(3,6)))
Since the third round will generate the final winner, you need to output the answer (((1,8),(4,5)),((2,7),(3,6))).

Note:
The n is in range [2, 212].

We ensure that the input n can be converted into the form 2k, where k is a positive integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The boundary of a binary tree is the concatenation of the root, the left boundary, the leaves ordered from left-to-right, and the reverse order of the right boundary.

The left boundary is the set of nodes defined by the following:
The root node's left child is in the left boundary. If the root does not have a left child, then the left boundary is empty.

If a node in the left boundary and has a left child, then the left child is in the left boundary.

If a node is in the left boundary, has no left child, but has a right child, then the right child is in the left boundary.

The leftmost leaf is not in the left boundary.

The right boundary is similar to the left boundary, except it is the right side of the root's right subtree. Again, the leaf is not part of the right boundary, and the right boundary is empty if the root does not have a right child.

The leaves are nodes that do not have any children. For this problem, the root is not a leaf.

Given the `root` of a binary tree, return the values of its boundary.


Example 1:
Input: root = [1,null,2,3,4]
Output: [1,3,4,2]
Explanation:
- The left boundary is empty because the root does not have a left child.

- The right boundary follows the path starting from the root's right child 2 -> 4.

  4 is a leaf, so the right boundary is [2].

- The leaves from left to right are [3,4].

Concatenating everything results in [1] + [] + [3,4] + [2] = [1,3,4,2].


Example 2:
Input: root = [1,2,3,4,5,6,null,null,null,7,8,9,10]
Output: [1,2,4,7,8,9,10,6,3]
Explanation:
- The left boundary follows the path starting from the root's left child 2 -> 4.

  4 is a leaf, so the left boundary is [2].

- The right boundary follows the path starting from the root's right child 3 -> 6 -> 10.

  10 is a leaf, so the right boundary is [3,6], and in reverse order is [6,3].

- The leaves from left to right are [4,7,8,9,10].

Concatenating everything results in [1] + [2] + [4,7,8,9,10] + [6,3] = [1,2,4,7,8,9,10,6,3].


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given several `boxes` with different colors represented by different positive numbers.

You may experience several rounds to remove boxes until there is no box left. Each time you can choose some continuous boxes with the same color (i.e., composed of `k` boxes, `k >= 1`), remove them and get `k * k` points.

Return the maximum points you can get.


Example 1:
Input: boxes = [1,3,2,2,2,3,4,3,1]
Output: 23
Explanation:
[1, 3, 2, 2, 2, 3, 4, 3, 1] 
----> [1, 3, 3, 4, 3, 1] (3*3=9 points) 
----> [1, 3, 3, 3, 1] (1*1=1 points) 
----> [1, 1] (3*3=9 points) 
----> [] (2*2=4 points)

Example 2:
Input: boxes = [1,1,1]
Output: 9

Example 3:
Input: boxes = [1]
Output: 1

Constraints:
`1 <= boxes.length <= 100`
`1 <= boxes[i] <= 100`",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities. Some of them are connected, while some are not. If city `a` is connected directly with city `b`, and city `b` is connected directly with city `c`, then city `a` is connected indirectly with city `c`.

A province is a group of directly or indirectly connected cities and no other cities outside of the group.

You are given an `n x n` matrix `isConnected` where `isConnected[i][j] = 1` if the `ith` city and the `jth` city are directly connected, and `isConnected[i][j] = 0` otherwise.

Return the total number of provinces.


Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

Constraints:
`1 <= n <= 200`
`n == isConnected.length`
`n == isConnected[i].length`
`isConnected[i][j]` is `1` or `0`.

`isConnected[i][i] == 1`
`isConnected[i][j] == isConnected[j][i]`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array with n integers, you need to find if there are triplets  (i, j, k) which satisfies following conditions:
 0 < i, i + 1 < j, j + 1 < k < n - 1 
 Sum of subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal. 
where we define that subarray (L, R) represents a slice of the original array starting from the element indexed L to the element indexed R.


Example:
Input: [1,2,1,2,1,2,1]
Output: True
Explanation:
i = 1, j = 3, k = 5. 
sum(0, i - 1) = sum(0, 0) = 1
sum(i + 1, j - 1) = sum(2, 2) = 1
sum(j + 1, k - 1) = sum(4, 4) = 1
sum(k + 1, n - 1) = sum(6, 6) = 1
Note:
 1 <= n <= 2000. 
 Elements in the given array will be in range [-1,000,000, 1,000,000].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the length of the longest consecutive path in the tree.

This path can be either increasing or decreasing.

For example, `[1,2,3,4]` and `[4,3,2,1]` are both considered valid, but the path `[1,2,4,3]` is not valid.

On the other hand, the path can be in the child-Parent-child order, where not necessarily be parent-child order.


Example 1:
Input: root = [1,2,3]
Output: 2
Explanation: The longest consecutive path is [1, 2] or [2, 1].


Example 2:
Input: root = [2,1,3]
Output: 3
Explanation: The longest consecutive path is [1, 2, 3] or [3, 2, 1].


Constraints:
The number of nodes in the tree is in the range `[1, 3 * 104]`.

`-3 * 104 <= Node.val <= 3 * 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` representing an attendance record for a student where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:
`'A'`: Absent.

`'L'`: Late.

`'P'`: Present.

The student is eligible for an attendance award if they meet both of the following criteria:
The student was absent (`'A'`) for strictly fewer than 2 days total.

The student was never late (`'L'`) for 3 or more consecutive days.

Return `true` if the student is eligible for an attendance award, or `false` otherwise.


Example 1:
Input: s = ""PPALLP""
Output: true
Explanation: The student has fewer than 2 absences and was never late 3 or more consecutive days.


Example 2:
Input: s = ""PPALLL""
Output: false
Explanation: The student was late 3 consecutive days in the last 3 days, so is not eligible for the award.


Constraints:
`1 <= s.length <= 1000`
`s[i]` is either `'A'`, `'L'`, or `'P'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An attendance record for a student can be represented as a string where each character signifies whether the student was absent, late, or present on that day. The record only contains the following three characters:
`'A'`: Absent.

`'L'`: Late.

`'P'`: Present.

Any student is eligible for an attendance award if they meet both of the following criteria:
The student was absent (`'A'`) for strictly fewer than 2 days total.

The student was never late (`'L'`) for 3 or more consecutive days.

Given an integer `n`, return the number of possible attendance records of length `n` that make a student eligible for an attendance award. The answer may be very large, so return it modulo `109 + 7`.


Example 1:
Input: n = 2
Output: 8
Explanation: There are 8 records with length 2 that are eligible for an award:
""PP"", ""AP"", ""PA"", ""LP"", ""PL"", ""AL"", ""LA"", ""LL""
Only ""AA"" is not eligible because there are 2 absences (there need to be fewer than 2).


Example 2:
Input: n = 1
Output: 3

Example 3:
Input: n = 10101
Output: 183236316

Constraints:
`1 <= n <= 105`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of positive integers, the adjacent integers will perform the float division. For example, [2,3,4] -> 2 / 3 / 4.

However, you can add any number of parenthesis at any position to change the priority of operations. You should find out how to add parenthesis to get the maximum result, and return the corresponding expression in string format. Your expression should NOT contain redundant parenthesis.


Example:
Input: [1000,100,10,2]
Output: ""1000/(100/10/2)""
Explanation:
1000/(100/10/2) = 1000/((100/10)/2) = 200
However, the bold parenthesis in ""1000/((100/10)/2)"" are redundant, since they don't influence the operation priority. So you should return ""1000/(100/10/2)"". 
Other cases:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
Note:
The length of the input array is [1, 10].

Elements in the given array will be in range [2, 1000].

There is only one optimal division for each test case.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a brick wall in front of you. The wall is rectangular and has several rows of bricks. The bricks have the same height but different width. You want to draw a vertical line from the top to the bottom and cross the least bricks.

The brick wall is represented by a list of rows. Each row is a list of integers representing the width of each brick in this row from left to right.

If your line go through the edge of a brick, then the brick is not considered as crossed. You need to find out how to draw the line to cross the least bricks and return the number of crossed bricks.

You cannot draw a line just along one of the two vertical edges of the wall, in which case the line will obviously cross no bricks. 

Example:
Input: [[1,2,2,1],
        [3,1,2],
        [1,3,2],
        [2,4],
        [3,1,2],
        [1,3,1,1]]
Output: 2
Explanation: 
Note:
The width sum of bricks in different rows are the same and won't exceed INT_MAX.

The number of bricks in each row is in range [1,10,000]. The height of wall is in range [1,10,000]. Total number of bricks of the wall won't exceed 20,000.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of strings, you could concatenate these strings together into a loop, where for each string you could choose to reverse it or not. Among all the possible loops, you need to find the lexicographically biggest string after cutting the loop, which will make the looped string into a regular one.

Specifically, to find the lexicographically biggest string, you need to experience two phases: 
Concatenate all the strings into a loop, where you can reverse some strings or not and connect them in the same order as given.

Cut and make one breakpoint in any place of the loop, which will make the looped string into a regular one starting from the character at the cutpoint. 
And your job is to find the lexicographically biggest one among all the possible regular strings.


Example:
Input: ""abc"", ""xyz""
Output: ""zyxcba""
Explanation: You can get the looped string ""-abcxyz-"", ""-abczyx-"", ""-cbaxyz-"", ""-cbazyx-"", where '-' represents the looped status. The answer string came from the fourth looped one, where you could cut from the middle character 'a' and get ""zyxcba"".

Note:
The input strings will only contain lowercase letters.

The total length of all the strings will not over 1,000.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `n`, find the smallest integer which has exactly the same digits existing in the integer `n` and is greater in value than `n`. If no such positive integer exists, return `-1`.

Note that the returned integer should fit in 32-bit integer, if there is a valid answer but it does not fit in 32-bit integer, return `-1`.


Example 1:
Input: n = 12
Output: 21

Example 2:
Input: n = 21
Output: -1

Constraints:
`1 <= n <= 231 - 1`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, reverse the order of characters in each word within a sentence while still preserving whitespace and initial word order.


Example 1:
Input: s = ""Let's take LeetCode contest""
Output: ""s'teL ekat edoCteeL tsetnoc""

Example 2:
Input: s = ""God Ding""
Output: ""doG gniD""

Constraints:
`1 <= s.length <= 5 * 104`
`s` contains printable ASCII characters.

`s` does not contain any leading or trailing spaces.

There is at least one word in `s`.

All the words in `s` are separated by a single space.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a n-ary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).


Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: 3

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: 5

Constraints:
The depth of the n-ary tree is less than or equal to `1000`.

The total number of nodes is between `[0, 104]`.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and an integer `k`, return the total number of continuous subarrays whose sum equals to `k`.


Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2

Constraints:
`1 <= nums.length <= 2 * 104`
`-1000 <= nums[i] <= 1000`
`-107 <= k <= 107`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is maximized. Return the maximized sum.


Example 1:
Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.


Example 2:
Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.


Constraints:
`1 <= n <= 104`
`nums.length == 2 * n`
`-104 <= nums[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 01 matrix M, find the longest line of consecutive one in the matrix. The line could be horizontal, vertical, diagonal or anti-diagonal.


Example:
Input:
[[0,1,1,0],
 [0,1,1,0],
 [0,0,0,1]]
Output: 3
Hint:
The number of elements in the given matrix will not exceed 10,000.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the sum of every tree node's tilt.

The tilt of a tree node is the absolute difference between the sum of all left subtree node values and all right subtree node values. If a node does not have a left child, then the sum of the left subtree node values is treated as `0`. The rule is similar if there the node does not have a right child.


Example 1:
Input: root = [1,2,3]
Output: 1
Explanation: 
Tilt of node 2 : |0-0| = 0 (no children)
Tilt of node 3 : |0-0| = 0 (no children)
Tilt of node 1 : |2-3| = 1 (left subtree is just left child, so sum is 2; right subtree is just right child, so sum is 3)
Sum of every tilt : 0 + 0 + 1 = 1

Example 2:
Input: root = [4,2,9,3,5,null,7]
Output: 15
Explanation: 
Tilt of node 3 : |0-0| = 0 (no children)
Tilt of node 5 : |0-0| = 0 (no children)
Tilt of node 7 : |0-0| = 0 (no children)
Tilt of node 2 : |3-5| = 2 (left subtree is just left child, so sum is 3; right subtree is just right child, so sum is 5)
Tilt of node 9 : |0-7| = 7 (no left child, so sum is 0; right subtree is just right child, so sum is 7)
Tilt of node 4 : |(3+5+2)-(9+7)| = |10-16| = 6 (left subtree values are 3, 5, and 2, which sums to 10; right subtree values are 9 and 7, which sums to 16)
Sum of every tilt : 0 + 0 + 0 + 2 + 7 + 6 = 15

Example 3:
Input: root = [21,7,14,1,1,2,2,3,3]
Output: 9

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer n, find the closest integer (not including itself), which is a palindrome. 
The 'closest' is defined as absolute difference minimized between two integers.


Example 1:
Input: ""123""
Output: ""121""
Note:
The input n is a positive integer represented by string, whose length will not exceed 18.

If there is a tie, return the smaller one as answer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A zero-indexed array A of length N contains all integers from 0 to N-1. Find and return the longest length of set S, where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subjected to the rule below.

Suppose the first element in S starts with the selection of element A[i] of index = i, the next element in S should be A[A[i]], and then A[A[A[i]]]... By that analogy, we stop adding right before a duplicate element occurs in S.


Example 1:
Input: A = [5,4,0,3,1,6,2]
Output: 4
Explanation: 
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

One of the longest S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
Note:
N is an integer within the range [1, 20,000].

The elements of A are all distinct.

Each element of A is an integer within the range [0, N-1].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In MATLAB, there is a very useful function called 'reshape', which can reshape a matrix into a new one with different size but keep its original data.

You're given a matrix represented by a two-dimensional array, and two positive integers r and c representing the row number and column number of the wanted reshaped matrix, respectively.

The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the 'reshape' operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.


Example 1:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 1, c = 4
Output: 
[[1,2,3,4]]
Explanation:The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row by using the previous list.


Example 2:
Input: 
nums = 
[[1,2],
 [3,4]]
r = 2, c = 4
Output: 
[[1,2],
 [3,4]]
Explanation:There is no way to reshape a 2 * 2 matrix to a 2 * 4 matrix. So output the original matrix.

Note:
The height and width of the given matrix is in range [1, 100].

The given r and c are all positive.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings s1 and s2, write a function to return true if s2 contains the permutation of s1. In other words, one of the first string's permutations is the substring of the second string.


Example 1:
Input: s1 = ""ab"" s2 = ""eidbaooo""
Output: True
Explanation: s2 contains one permutation of s1 (""ba"").


Example 2:
Input:s1= ""ab"" s2 = ""eidboaoo""
Output: False

Constraints:
The input strings only contain lower case letters.

The length of both given strings is in range [1, 10,000].",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"LeetCode wants to give one of its best employees the option to travel among N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, you could take vacations in some particular cities and weeks. Your job is to schedule the traveling to maximize the number of vacation days you could take, but there are certain rules and restrictions you need to follow.

Rules and restrictions:
You can only travel among N cities, represented by indexes from 0 to N-1. Initially, you are in the city indexed 0 on Monday.

The cities are connected by flights. The flights are represented as a N*N matrix (not necessary symmetrical), called flights representing the airline status from the city i to the city j. If there is no flight from the city i to the city j, flights[i][j] = 0; Otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.

You totally have K weeks (each week has 7 days) to travel. You can only take flights at most once per day and can only take flights on each week's Monday morning. Since flight time is so short, we don't consider the impact of flight time.

For each city, you can only have restricted vacation days in different weeks, given an N*K matrix called days representing this relationship. For the value of days[i][j], it represents the maximum days you could take vacation in the city i in the week j.

You're given the flights matrix and days matrix, and you need to output the maximum vacation days you could take during K weeks.


Example 1:
Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[1,3,1],[6,0,3],[3,3,3]]
Output: 12
Explanation: Ans = 6 + 3 + 3 = 12. 
One of the best strategies is:
1st week : fly from city 0 to city 1 on Monday, and play 6 days and work 1 day. (Although you start at city 0, we could also fly to and start at other cities since it is Monday.) 
2nd week : fly from city 1 to city 2 on Monday, and play 3 days and work 4 days.

3rd week : stay at city 2, and play 3 days and work 4 days.


Example 2:
Input:flights = [[0,0,0],[0,0,0],[0,0,0]], days = [[1,1,1],[7,7,7],[7,7,7]]
Output: 3
Explanation: Ans = 1 + 1 + 1 = 3. 
Since there is no flights enable you to move to another city, you have to stay at city 0 for the whole 3 weeks. For each week, you only have one day to play and six days to work. So the maximum number of vacation days is 3.


Example 3:
Input:flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[0,0,7]]
Output: 21
Explanation:Ans = 7 + 7 + 7 = 21
One of the best strategies is:
1st week : stay at city 0, and play 7 days. 
2nd week : fly from city 0 to city 1 on Monday, and play 7 days.

3rd week : fly from city 1 to city 2 on Monday, and play 7 days.

Note:
N and K are positive integers, which are in the range of [1, 100].

In the matrix flights, all the values are integers in the range of [0, 1].

In the matrix days, all the values are integers in the range [0, 7].

You could stay at a city beyond the number of vacation days, but you should work on the extra days, which won't be counted as vacation days.

If you fly from the city A to the city B and take the vacation on that day, the deduction towards vacation days will count towards the vacation days of city B in that week.

We don't consider the impact of flight hours towards the calculation of vacation days.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-empty binary trees s and t, check whether tree t has exactly the same structure and node values with a subtree of s. A subtree of s is a tree consists of a node in s and all of this node's descendants. The tree s could also be considered as a subtree of itself.


Example 1:
Given tree s:
     3
    / \
   4   5
  / \
 1   2
Given tree t:
   4 
  / \
 1   2
Return true, because t has the same structure and node values with a subtree of s.


Example 2:
Given tree s:
     3
    / \
   4   5
  / \
 1   2
    /
   0
Given tree t:
   4
  / \
 1   2
Return false.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There's a tree, a squirrel, and several nuts. Positions are represented by the cells in a 2D grid. Your goal is to find the minimal distance for the squirrel to collect all the nuts and put them under the tree one by one. The squirrel can only take at most one nut at one time and can move in four directions - up, down, left and right, to the adjacent cell. The distance is represented by the number of moves.


Example 1:
Input: 
Height : 5
Width : 7
Tree position : [2,2]
Squirrel : [4,4]
Nuts : [[3,0], [2,5]]
Output: 12
Explanation:
​​​​​
Note:
All given positions won't overlap.

The squirrel can take at most one nut at one time.

The given positions of nuts have no order.

Height and width are positive integers. 3 <= height * width <= 10,000.

The given positions contain at least one nut, only one tree and one squirrel.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.

The doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.

Given the integer array `candyType` of length `n`, return the maximum number of different types of candies she can eat if she only eats `n / 2` of them.


Example 1:
Input: candyType = [1,1,2,2,3,3]
Output: 3
Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.


Example 2:
Input: candyType = [1,1,2,3]
Output: 2
Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3], or [2,3], she still can only eat 2 different types.


Example 3:
Input: candyType = [6,6,6,6]
Output: 1
Explanation: Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.


Constraints:
`n == candyType.length`
`2 <= n <= 104`
`n` is even.

`-105 <= candyType[i] <= 105`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an m by n grid with a ball. Given the start coordinate (i,j) of the ball, you can move the ball to adjacent cell or cross the grid boundary in four directions (up, down, left, right). However, you can at most move N times. Find out the number of paths to move the ball out of grid boundary. The answer may be very large, return it after mod 109 + 7.


Example 1:
Input: m = 2, n = 2, N = 2, i = 0, j = 0
Output: 6
Explanation:

Example 2:
Input: m = 1, n = 3, N = 3, i = 0, j = 1
Output: 12
Explanation:
Note:
Once you move the ball out of boundary, you cannot move it back.

The length and height of the grid is in range [1,50].

N is in range [0,50].",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, you need to find one continuous subarray that if you only sort this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.


Example 1:
Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.


Example 2:
Input: nums = [1,2,3,4]
Output: 0

Example 3:
Input: nums = [1]
Output: 0

Constraints:
`1 <= nums.length <= 104`
`-105 <= nums[i] <= 105`
Follow up: Can you solve it in `O(n)` time complexity?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` processes forming a rooted tree structure. You are given two integer arrays `pid` and `ppid`, where `pid[i]` is the ID of the `ith` process and `ppid[i]` is the ID of the `ith` process's parent process.

Each process has only one parent process but may have multiple children processes. Only one process has `ppid[i] = 0`, which means this process has no parent process (the root of the tree).

When a process is killed, all of its children processes will also be killed.

Given an integer `kill` representing the ID of a process you want to kill, return a list of the IDs of the processes that will be killed. You may return the answer in any order.


Example 1:
Input: pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5
Output: [5,10]
Explanation: The processes colored in red are the processes that should be killed.


Example 2:
Input: pid = [1], ppid = [0], kill = 1
Output: [1]

Constraints:
`n == pid.length`
`n == ppid.length`
`1 <= n <= 5 * 104`
`1 <= pid[i] <= 5 * 104`
`0 <= ppid[i] <= 5 * 104`
Only one process has no parent.

All the values of `pid` are unique.

`kill` is guaranteed to be in `pid`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `word1` and `word2`, return the minimum number of steps required to make `word1` and `word2` the same.

In one step, you can delete exactly one character in either string.


Example 1:
Input: word1 = ""sea"", word2 = ""eat""
Output: 2
Explanation: You need one step to make ""sea"" to ""ea"" and another step to make ""eat"" to ""ea"".


Example 2:
Input: word1 = ""leetcode"", word2 = ""etco""
Output: 4

Constraints:
`1 <= word1.length, word2.length <= 500`
`word1` and `word2` consist of only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are some trees, where each tree is represented by (x,y) coordinate in a two-dimensional garden. Your job is to fence the entire garden using the minimum length of rope as it is expensive. The garden is well fenced only if all the trees are enclosed. Your task is to help find the coordinates of trees which are exactly located on the fence perimeter.


Example 1:
Input: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
Output: [[1,1],[2,0],[4,2],[3,3],[2,4]]
Explanation:

Example 2:
Input: [[1,2],[2,2],[4,2]]
Output: [[1,2],[2,2],[4,2]]
Explanation:
Even you only have trees in a line, you need to use rope to enclose them. 
Note:
All trees should be enclosed together. You cannot cut the rope to enclose trees that will separate them in more than one group.

All input integers will range from 0 to 100.

The garden has at least one tree.

All coordinates are distinct.

Input points have NO order. No order required for output.
input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an in-memory file system to simulate the following functions:
`ls`: Given a path in string format. If it is a file path, return a list that only contains this file's name. If it is a directory path, return the list of file and directory names in this directory. Your output (file and directory names together) should in lexicographic order.

`mkdir`: Given a directory path that does not exist, you should make a new directory according to the path. If the middle directories in the path don't exist either, you should create them as well. This function has void return type.

`addContentToFile`: Given a file path and file content in string format. If the file doesn't exist, you need to create that file containing given content. If the file already exists, you need to append given content to original content. This function has void return type.

`readContentFromFile`: Given a file path, return its content in string format.


Example:
Input: 
[""FileSystem"",""ls"",""mkdir"",""addContentToFile"",""ls"",""readContentFromFile""]
[[],[""/""],[""/a/b/c""],[""/a/b/c/d"",""hello""],[""/""],[""/a/b/c/d""]]
Output:
[null,[],null,null,[""a""],""hello""]
Explanation:
Note:
You can assume all file or directory paths are absolute paths which begin with `/` and do not end with `/` except that the path is just `""/""`.

You can assume that all operations will be passed valid parameters and users will not attempt to retrieve file content or list a directory or file that does not exist.

You can assume that all directory names and file names only contain lower-case letters, and same names won't exist in the same directory.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of an n-ary tree, return the postorder traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal. Each group of children is separated by the null value (See examples)

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [5,6,3,2,4,1]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`0 <= Node.val <= 104`
The height of the n-ary tree is less than or equal to `1000`.

Follow up: Recursive solution is trivial, could you do it iteratively?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string representing a code snippet, you need to implement a tag validator to parse the code and return whether it is valid. A code snippet is valid if all the following rules hold:
The code must be wrapped in a valid closed tag. Otherwise, the code is invalid.

A closed tag (not necessarily valid) has exactly the following format : `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. The TAG_NAME in start and end tags should be the same. A closed tag is valid if and only if the TAG_NAME and TAG_CONTENT are valid.

A valid `TAG_NAME` only contain upper-case letters, and has length in range [1,9]. Otherwise, the `TAG_NAME` is invalid.

A valid `TAG_CONTENT` may contain other valid closed tags, cdata and any characters (see note1) EXCEPT unmatched `<`, unmatched start and end tag, and unmatched or closed tags with invalid TAG_NAME. Otherwise, the `TAG_CONTENT` is invalid.

A start tag is unmatched if no end tag exists with the same TAG_NAME, and vice versa. However, you also need to consider the issue of unbalanced when tags are nested.

A `<` is unmatched if you cannot find a subsequent `>`. And when you find a `<` or `</`, all the subsequent characters until the next `>` should be parsed as TAG_NAME  (not necessarily valid).

The cdata has the following format : `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the first subsequent `]]>`. 
`CDATA_CONTENT` may contain any characters. The function of cdata is to forbid the validator to parse `CDATA_CONTENT`, so even it has some characters that can be parsed as tag (no matter valid or invalid), you should treat it as regular characters. 

Valid Code Examples:
Input: ""<DIV>This is the first line <![CDATA[<div>]]></DIV>""
Output: True
Explanation: 
The code is wrapped in a closed tag : <DIV> and </DIV>. 
The TAG_NAME is valid, the TAG_CONTENT consists of some characters and cdata. 
Although CDATA_CONTENT has unmatched start tag with invalid TAG_NAME, it should be considered as plain text, not parsed as tag.

So TAG_CONTENT is valid, and then the code is valid. Thus return true.

Input: ""<DIV>>>  ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>""
Output: True
Explanation:
We first separate the code into : start_tag|tag_content|end_tag.

start_tag -> ""<DIV>""
end_tag -> ""</DIV>""
tag_content could also be separated into : text1|cdata|text2.

text1 -> "">>  ![cdata[]] ""
cdata -> ""<![CDATA[<div>]>]]>"", where the CDATA_CONTENT is ""<div>]>""
text2 -> ""]]>>]""
The reason why start_tag is NOT ""<DIV>>>"" is because of the rule 6.

The reason why cdata is NOT ""<![CDATA[<div>]>]]>]]>"" is because of the rule 7.


Invalid Code Examples:
Input: ""<A>  <B> </A>   </B>""
Output: False
Explanation: Unbalanced. If ""<A>"" is closed, then ""<B>"" must be unmatched, and vice versa.

Input: ""<DIV>  div tag is not closed  <DIV>""
Output: False
Input: ""<DIV>  unmatched <  </DIV>""
Output: False
Input: ""<DIV> closed tags with invalid tag name  <b>123</b> </DIV>""
Output: False
Input: ""<DIV> unmatched tags with invalid tag name  </1234567890> and <CDATA[[]]>  </DIV>""
Output: False
Input: ""<DIV>  unmatched start tag <B>  and unmatched end tag </C>  </DIV>""
Output: False
Note:
For simplicity, you could assume the input code (including the any characters mentioned above) only contain `letters`, `digits`, `'<'`,`'>'`,`'/'`,`'!'`,`'['`,`']'` and `' '`.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string representing an expression of fraction addition and subtraction, you need to return the calculation result in string format. The final result should be irreducible fraction. If your final result is an integer, say `2`, you need to change it to the format of fraction that has denominator `1`. So in this case, `2` should be converted to `2/1`.


Example 1:
Input:""-1/2+1/2""
Output: ""0/1""

Example 2:
Input:""-1/2+1/2+1/3""
Output: ""1/3""

Example 3:
Input:""1/3-1/2""
Output: ""-1/6""

Example 4:
Input:""5/3+1/3""
Output: ""2/1""
Note:
The input string only contains `'0'` to `'9'`, `'/'`, `'+'` and `'-'`. So does the output.

Each fraction (input and output) has format `±numerator/denominator`. If the first input fraction or the output is positive, then `'+'` will be omitted.

The input only contains valid irreducible fractions, where the numerator and denominator of each fraction will always be in the range [1,10]. If the denominator is 1, it means this fraction is actually an integer in a fraction format defined above.

The number of given fractions will be in the range [1,10].

The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the coordinates of four points in 2D space `p1`, `p2`, `p3` and `p4`, return `true` if the four points construct a square.

The coordinate of a point `pi` is represented as `[xi, yi]`. The input is not given in any order.

A valid square has four equal sides with positive length and four equal angles (90-degree angles).


Example 1:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
Output: true

Example 2:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
Output: false

Example 3:
Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]
Output: true

Constraints:
`p1.length == p2.length == p3.length == p4.length == 2`
`-104 <= xi, yi <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We define a harmonious array as an array where the difference between its maximum value and its minimum value is exactly `1`.

Given an integer array `nums`, return the length of its longest harmonious subsequence among all its possible subsequences.

A subsequence of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.


Example 1:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].


Example 2:
Input: nums = [1,2,3,4]
Output: 2

Example 3:
Input: nums = [1,1,1,1]
Output: 0

Constraints:
`1 <= nums.length <= 2 * 104`
`-109 <= nums[i] <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.

Count and return the number of maximum integers in the matrix after performing all the operations.


Example 1:
Input: m = 3, n = 3, ops = [[2,2],[3,3]]
Output: 4
Explanation: The maximum integer in M is 2, and there are four of it in M. So return 4.


Example 2:
Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
Output: 4

Example 3:
Input: m = 3, n = 3, ops = []
Output: 9

Constraints:
`1 <= m, n <= 4 * 104`
`1 <= ops.length <= 104`
`ops[i].length == 2`
`1 <= ai <= m`
`1 <= bi <= n`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented by strings.

You need to help them find out their common interest with the least list index sum. If there is a choice tie between answers, output all of them with no order requirement. You could assume there always exists an answer.


Example 1:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""Piatti"",""The Grill at Torrey Pines"",""Hungry Hunter Steakhouse"",""Shogun""]
Output: [""Shogun""]
Explanation: The only restaurant they both like is ""Shogun"".


Example 2:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Shogun"",""Burger King""]
Output: [""Shogun""]
Explanation: The restaurant they both like and have the least index sum is ""Shogun"" with index sum 1 (0+1).


Example 3:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]
Output: [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]

Example 4:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KNN"",""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]
Output: [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]

Example 5:
Input: list1 = [""KFC""], list2 = [""KFC""]
Output: [""KFC""]

Constraints:
`1 <= list1.length, list2.length <= 1000`
`1 <= list1[i].length, list2[i].length <= 30`
`list1[i]` and `list2[i]` consist of spaces `' '` and English letters.

All the stings of `list1` are unique.

All the stings of `list2` are unique.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer n, find the number of non-negative integers less than or equal to n, whose binary representations do NOT contain consecutive ones.


Example 1:
Input: 5
Output: 5
Explanation: 
Here are the non-negative integers <= 5 with their corresponding binary representations:
0 : 0
1 : 1
2 : 10
3 : 11
4 : 100
5 : 101
Among them, only integer 3 disobeys the rule (two consecutive ones) and the other 5 satisfy the rule. 
Note:
1 <= n <= 109",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.

Implement the StringIterator class:
`next()` Returns the next character if the original string still has uncompressed characters, otherwise returns a white space.

`hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.


Example 1:
Input
[""StringIterator"", ""next"", ""next"", ""next"", ""next"", ""next"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[""L1e2t1C1o1d1e1""], [], [], [], [], [], [], [], [], []]
Output
[null, ""L"", ""e"", ""e"", ""t"", ""C"", ""o"", true, ""d"", true]
Explanation
StringIterator stringIterator = new StringIterator(""L1e2t1C1o1d1e1"");
stringIterator.next(); // return ""L""
stringIterator.next(); // return ""e""
stringIterator.next(); // return ""e""
stringIterator.next(); // return ""t""
stringIterator.next(); // return ""C""
stringIterator.next(); // return ""o""
stringIterator.hasNext(); // return True
stringIterator.next(); // return ""d""
stringIterator.hasNext(); // return True

Constraints:
`1 <= compressedString.length <= 1000`
`compressedString` consists of lower-case an upper-case English letters and digits.

The number of a single character repetitions in `compressedString` is in the range `[1, 10^9]`
At most `100` calls will be made to `next` and `hasNext`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in adjacent plots.

Given an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return if `n` new flowers can be planted in the `flowerbed` without violating the no-adjacent-flowers rule.


Example 1:
Input: flowerbed = [1,0,0,0,1], n = 1
Output: true

Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
Output: false

Constraints:
`1 <= flowerbed.length <= 2 * 104`
`flowerbed[i]` is `0` or `1`.

There are no two adjacent flowers in `flowerbed`.

`0 <= n <= flowerbed.length`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You need to construct a string consists of parenthesis and integers from a binary tree with the preorder traversing way.

The null node needs to be represented by empty parenthesis pair ""()"". And you need to omit all the empty parenthesis pairs that don't affect the one-to-one mapping relationship between the string and the original binary tree.


Example 1:
Input: Binary tree: [1,2,3,4]
       1
     /   \
    2     3
   /    
  4     
Output: ""1(2(4))(3)""
Explanation: Originallay it needs to be ""1(2(4)())(3()())"", but you need to omit all the unnecessary empty parenthesis pairs. And it will be ""1(2(4))(3)"".


Example 2:
Input: Binary tree: [1,2,3,null,4]
       1
     /   \
    2     3
     \  
      4 
Output: ""1(2()(4))(3)""
Explanation: Almost the same as the first example, except we can't omit the first parenthesis pair to break the one-to-one mapping relationship between the input and the output.",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list `paths` of directory info, including the directory path, and all the files with contents in this directory, return all the duplicate files in the file system in terms of their paths. You may return the answer in any order.

A group of duplicate files consists of at least two files that have the same content.

A single directory info string in the input list has the following format:
`""root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content) ... fn.txt(fn_content)""`
It means there are `n` files `(f1.txt, f2.txt ... fn.txt)` with content `(f1_content, f2_content ... fn_content)` respectively in the directory ""`root/d1/d2/.../dm""`. Note that `n >= 1` and `m >= 0`. If `m = 0`, it means the directory is just the root directory.

The output is a list of groups of duplicate file paths. For each group, it contains all the file paths of the files that have the same content. A file path is a string that has the following format:
`""directory_path/file_name.txt""`

Example 1:
Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)"",""root 4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt"",""root/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]

Example 2:
Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]

Constraints:
`1 <= paths.length <= 2 * 104`
`1 <= paths[i].length <= 3000`
`1 <= sum(paths[i].length) <= 5 * 105`
`paths[i]` consist of English letters, digits, `'/'`, `'.'`, `'('`, `')'`, and `' '`.

You may assume no files or directories share the same name in the same directory.

You may assume each given directory info represents a unique directory. A single blank space separates the directory path and file info.

Follow up:
Imagine you are given a real file system, how will you search files? DFS or BFS?
If the file content is very large (GB level), how will you modify your solution?
If you can only read the file by 1kb each time, how will you modify your solution?
What is the time complexity of your modified solution? What is the most time-consuming part and memory-consuming part of it? How to optimize?
How to make sure the duplicated files you find are not false positive?",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array consists of non-negative integers,  your task is to count the number of triplets chosen from the array that can make triangles if we take them as side lengths of a triangle.


Example 1:
Input: [2,2,3,4]
Output: 3
Explanation:
Valid combinations are: 
2,3,4 (using the first 2)
2,3,4 (using the second 2)
2,2,3
Note:
The length of the given array won't exceed 1000.

The integers in the given array are in the range of [0, 1000].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and a list of strings dict, you need to add a closed pair of bold tag `<b>` and `</b>` to wrap the substrings in s that exist in dict. If two such substrings overlap, you need to wrap them together by only one pair of closed bold tag. Also, if two substrings wrapped by bold tags are consecutive, you need to combine them.


Example 1:
Input: 
s = ""abcxyz123""
dict = [""abc"",""123""]
Output:
""<b>abc</b>xyz<b>123</b>""

Example 2:
Input: 
s = ""aaabbcc""
dict = [""aaa"",""aab"",""bc""]
Output:
""<b>aaabbc</b>c""

Constraints:
The given dict won't contain duplicates, and its length won't exceed 100.

All the strings in input have length in range [1, 1000].

Note: This question is the same as 758: https://leetcode.com/problems/bold-words-in-string/",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two binary trees `root1` and `root2`.

Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then sum node values up as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.

Return the merged tree.

Note: The merging process must start from the root nodes of both trees.


Example 1:
Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]

Example 2:
Input: root1 = [1], root2 = [1,2]
Output: [2,2]

Constraints:
The number of nodes in both trees is in the range `[0, 2000]`.

`-104 <= Node.val <= 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a characters array `tasks`, representing the tasks a CPU needs to do, where each letter represents a different task. Tasks could be done in any order. Each task is done in one unit of time. For each unit of time, the CPU could complete either one task or just be idle.

However, there is a non-negative integer `n` that represents the cooldown period between two same tasks (the same letter in the array), that is that there must be at least `n` units of time between any two same tasks.

Return the least number of units of times that the CPU will take to finish all the given tasks.


Example 1:
Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 2
Output: 8
Explanation: 
A -> B -> idle -> A -> B -> idle -> A -> B
There is at least 2 units of time between any two same tasks.


Example 2:
Input: tasks = [""A"",""A"",""A"",""B"",""B"",""B""], n = 0
Output: 6
Explanation: On this case any permutation of size 6 would work since n = 0.

[""A"",""A"",""A"",""B"",""B"",""B""]
[""A"",""B"",""A"",""B"",""A"",""B""]
[""B"",""B"",""B"",""A"",""A"",""A""]
...

And so on.


Example 3:
Input: tasks = [""A"",""A"",""A"",""A"",""A"",""A"",""B"",""C"",""D"",""E"",""F"",""G""], n = 2
Output: 16
Explanation: 
One possible solution is
A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> idle -> idle -> A -> idle -> idle -> A

Constraints:
`1 <= task.length <= 104`
`tasks[i]` is upper-case English letter.

The integer `n` is in the range `[0, 100]`.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design your implementation of the circular queue. The circular queue is a linear data structure in which the operations are performed based on FIFO (First In First Out) principle and the last position is connected back to the first position to make a circle. It is also called ""Ring Buffer"".

One of the benefits of the circular queue is that we can make use of the spaces in front of the queue. In a normal queue, once the queue becomes full, we cannot insert the next element even if there is a space in front of the queue. But using the circular queue, we can use the space to store new values.

Implementation the `MyCircularQueue` class:
`MyCircularQueue(k)` Initializes the object with the size of the queue to be `k`.

`int Front()` Gets the front item from the queue. If the queue is empty, return `-1`.

`int Rear()` Gets the last item from the queue. If the queue is empty, return `-1`.

`boolean enQueue(int value)` Inserts an element into the circular queue. Return `true` if the operation is successful.

`boolean deQueue()` Deletes an element from the circular queue. Return `true` if the operation is successful.

`boolean isEmpty()` Checks whether the circular queue is empty or not.

`boolean isFull()` Checks whether the circular queue is full or not.


Example 1:
Input
[""MyCircularQueue"", ""enQueue"", ""enQueue"", ""enQueue"", ""enQueue"", ""Rear"", ""isFull"", ""deQueue"", ""enQueue"", ""Rear""]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
Output
[null, true, true, true, false, 3, true, true, true, 4]
Explanation
MyCircularQueue myCircularQueue = new MyCircularQueue(3);
myCircularQueue.enQueue(1); // return True
myCircularQueue.enQueue(2); // return True
myCircularQueue.enQueue(3); // return True
myCircularQueue.enQueue(4); // return False
myCircularQueue.Rear();     // return 3
myCircularQueue.isFull();   // return True
myCircularQueue.deQueue();  // return True
myCircularQueue.enQueue(4); // return True
myCircularQueue.Rear();     // return 4

Constraints:
`1 <= k <= 1000`
`0 <= value <= 1000`
At most `3000` calls will be made to `enQueue`, `deQueue`, `Front`, `Rear`, `isEmpty`, and `isFull`.

Follow up: Could you solve the problem without using the built-in queue?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree and two integers `val` and `depth`, add a row of nodes with value `val` at the given depth `depth`.

Note that the `root` node is at depth `1`.

The adding rule is:
Given the integer `depth`, for each not null tree node `cur` at the depth `depth - 1`, create two tree nodes with value `val` as `cur`'s left subtree root and right subtree root.

`cur`'s original left subtree should be the left subtree of the new left subtree root.

`cur`'s original right subtree should be the right subtree of the new right subtree root.

If `depth == 1` that means there is no depth `depth - 1` at all, then create a tree node with value `val` as the new root of the whole original tree, and the original tree is the new root's left subtree.


Example 1:
Input: root = [4,2,6,3,1,5], val = 1, depth = 2
Output: [4,1,1,2,null,null,6,3,1,5]

Example 2:
Input: root = [4,2,null,3,1], val = 1, depth = 3
Output: [4,2,null,1,1,3,null,null,1]

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

The depth of the tree is in the range `[1, 104]`.

`-100 <= Node.val <= 100`
`-105 <= val <= 105`
`1 <= depth <= the depth of tree + 1`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `m` `arrays`, where each array is sorted in ascending order.

You can pick up two integers from two different arrays (each array picks one) and calculate the distance. We define the distance between two integers `a` and `b` to be their absolute difference `|a - b|`.

Return the maximum distance.


Example 1:
Input: arrays = [[1,2,3],[4,5],[1,2,3]]
Output: 4
Explanation: One way to reach the maximum distance 4 is to pick 1 in the first or third array and pick 5 in the second array.


Example 2:
Input: arrays = [[1],[1]]
Output: 0

Example 3:
Input: arrays = [[1],[2]]
Output: 1

Example 4:
Input: arrays = [[1,4],[0,5]]
Output: 4

Constraints:
`m == arrays.length`
`2 <= m <= 105`
`1 <= arrays[i].length <= 500`
`-104 <= arrays[i][j] <= 104`
`arrays[i]` is sorted in ascending order.

There will be at most `105` integers in all the arrays.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `a`, find the smallest positive integer `b` whose multiplication of each digit equals to `a`. 
If there is no answer or the answer is not fit in 32-bit signed integer, then return 0.


Example 1
Input:
48 
Output:
68

Example 2
Input: 
15
Output:
35",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, find three numbers whose product is maximum and return the maximum product.


Example 1:
Input: nums = [1,2,3]
Output: 6

Example 2:
Input: nums = [1,2,3,4]
Output: 24

Example 3:
Input: nums = [-1,-2,-3]
Output: -6

Constraints:
`3 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `n` and `k`, find how many different arrays consist of numbers from `1` to `n` such that there are exactly `k` inverse pairs.

We define an inverse pair as following: For `ith` and `jth` element in the array, if `i` < `j` and `a[i]` > `a[j]` then it's an inverse pair; Otherwise, it's not.

Since the answer may be very large, the answer should be modulo 109 + 7.


Example 1:
Input: n = 3, k = 0
Output: 1
Explanation: 
Only the array [1,2,3] which consists of numbers from 1 to 3 has exactly 0 inverse pair.


Example 2:
Input: n = 3, k = 1
Output: 2
Explanation: 
The array [1,3,2] and [2,1,3] have exactly 1 inverse pair.

Note:
The integer `n` is in the range [1, 1000] and `k` is in the range [0, 1000].",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` different online courses numbered from `1` to `n`. Each course has some duration(course length) `t` and closed on `dth` day. A course should be taken continuously for `t` days and must be finished before or on the `dth` day. You will start at the `1st` day.

Given `n` online courses represented by pairs `(t,d)`, your task is to find the maximal number of courses that can be taken.


Example:
Input: [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]
Output: 3
Explanation: 
There're totally 4 courses, but you can take 3 courses at most:
First, take the 1st course, it costs 100 days so you will finish it on the 100th day, and ready to take the next course on the 101st day.

Second, take the 3rd course, it costs 1000 days so you will finish it on the 1100th day, and ready to take the next course on the 1101st day. 
Third, take the 2nd course, it costs 200 days so you will finish it on the 1300th day. 
The 4th course cannot be taken now, since you will finish it on the 3300th day, which exceeds the closed date.

Note:
The integer 1 <= d, t, n <= 10,000.

You can't take two courses simultaneously.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your task is to design the basic function of Excel and implement the function of sum formula.  Specifically, you need to implement the following functions:
`Excel(int H, char W):` This is the constructor. The inputs represents the height and width of the Excel form. H is a positive integer, range from 1 to 26. It represents the height. W is a character range from 'A' to 'Z'. It represents that the width is the number of characters from 'A' to W. The Excel form content is represented by a height * width 2D integer array `C`, it should be initialized to zero. You should assume that the first row of `C` starts from 1, and the first column of `C` starts from 'A'.

`void Set(int row, char column, int val):` Change the value at `C(row, column)` to be val.

`int Get(int row, char column):` Return the value at `C(row, column)`.

`int Sum(int row, char column, List of Strings : numbers):` This function calculate and set the value at `C(row, column)`, where the value should be the sum of cells represented by `numbers`. This function return the sum result at `C(row, column)`. This sum formula should exist until this cell is overlapped by another value or another sum formula.

`numbers` is a list of strings that each string represent a cell or a range of cells. If the string represent a single cell, then it has the following format : `ColRow`. For example, ""F7"" represents the cell at (7, F). 
If the string represent a range of cells, then it has the following format : `ColRow1:ColRow2`. The range will always be a rectangle, and ColRow1 represent the position of the top-left cell, and ColRow2 represents the position of the bottom-right cell. 

Example 1:
Excel(3,""C""); 
// construct a 3*3 2D array with all zero.

//   A B C
// 1 0 0 0
// 2 0 0 0
// 3 0 0 0
Set(1, ""A"", 2);
// set C(1,""A"") to be 2.

//   A B C
// 1 2 0 0
// 2 0 0 0
// 3 0 0 0
Sum(3, ""C"", [""A1"", ""A1:B2""]);
// set C(3,""C"") to be the sum of value at C(1,""A"") and the values sum of the rectangle range whose top-left cell is C(1,""A"") and bottom-right cell is C(2,""B""). Return 4. 
//   A B C
// 1 2 0 0
// 2 0 0 0
// 3 0 0 4
Set(2, ""B"", 2);
// set C(2,""B"") to be 2. Note C(3, ""C"") should also be changed.

//   A B C
// 1 2 0 0
// 2 0 2 0
// 3 0 0 6
Note:
You could assume that there won't be any circular sum reference. For example, A1 = sum(B1) and B1 = sum(A1).

 The test cases are using double-quotes to represent a character.

Please remember to RESET your class variables declared in class Excel, as static/class variables are persisted across multiple test cases. Please see here for more details.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `k` lists of sorted integers in non-decreasing order. Find the smallest range that includes at least one number from each of the `k` lists.

We define the range `[a, b]` is smaller than range `[c, d]` if `b - a < d - c` or `a < c` if `b - a == d - c`.


Example 1:
Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
Explanation: 
List 1: [4, 10, 15, 24,26], 24 is in range [20,24].

List 2: [0, 9, 12, 20], 20 is in range [20,24].

List 3: [5, 18, 22, 30], 22 is in range [20,24].


Example 2:
Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
Output: [1,1]

Example 3:
Input: nums = [[10,10],[11,11]]
Output: [10,11]

Example 4:
Input: nums = [[10],[11]]
Output: [10,11]

Example 5:
Input: nums = [[1],[2],[3],[4],[5],[6],[7]]
Output: [1,7]

Constraints:
`nums.length == k`
`1 <= k <= 3500`
`1 <= nums[i].length <= 50`
`-105 <= nums[i][j] <= 105`
`nums[i]` is sorted in non-decreasing order.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer `c`, decide whether there're two integers `a` and `b` such that `a2 + b2 = c`.


Example 1:
Input: c = 5
Output: true
Explanation: 1 * 1 + 2 * 2 = 5

Example 2:
Input: c = 3
Output: false

Example 3:
Input: c = 4
Output: true

Example 4:
Input: c = 2
Output: true

Example 5:
Input: c = 1
Output: true

Constraints:
`0 <= c <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.

There's originally an array consisting of `n` integers from 1 to `n` in ascending order, you need to find the number of derangement it can generate.

Also, since the answer may be very large, you should return the output mod 109 + 7.


Example 1:
Input: 3
Output: 2
Explanation: The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].

Note:
`n` is in the range of [1, 106].",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given several logs, where each log contains a unique ID and timestamp. Timestamp is a string that has the following format: `Year:Month:Day:Hour:Minute:Second`, for example, `2017:01:01:23:59:59`. All domains are zero-padded decimal numbers.

Implement the `LogSystem` class:
`LogSystem()` Initializes the `LogSystem` object.

`void put(int id, string timestamp)` Stores the given log `(id, timestamp)` in your storage system.

`int[] retrieve(string start, string end, string granularity)` Returns the IDs of the logs whose timestamps are within the range from `start` to `end` inclusive. `start` and `end` all have the same format as `timestamp`, and `granularity` means how precise the range should be (i.e. to the exact `Day`, `Minute`, etc.). For example, `start = ""2017:01:01:23:59:59""`, `end = ""2017:01:02:23:59:59""`, and `granularity = ""Day""` means that we need to find the logs within the inclusive range from Jan. 1st 2017 to Jan. 2nd 2017, and the `Hour`, `Minute`, and `Second` for each log entry can be ignored.


Example 1:
Input
[""LogSystem"", ""put"", ""put"", ""put"", ""retrieve"", ""retrieve""]
[[], [1, ""2017:01:01:23:59:59""], [2, ""2017:01:01:22:59:59""], [3, ""2016:01:01:00:00:00""], [""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Year""], [""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Hour""]]
Output
[null, null, null, null, [3, 2, 1], [2, 1]]
Explanation
LogSystem logSystem = new LogSystem();
logSystem.put(1, ""2017:01:01:23:59:59"");
logSystem.put(2, ""2017:01:01:22:59:59"");
logSystem.put(3, ""2016:01:01:00:00:00"");
// return [3,2,1], because you need to return all logs between 2016 and 2017.

logSystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Year"");
// return [2,1], because you need to return all logs between Jan. 1, 2016 01:XX:XX and Jan. 1, 2017 23:XX:XX.

// Log 3 is not returned because Jan. 1, 2016 00:00:00 comes before the start of the range.

logSystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Hour"");

Constraints:
`1 <= id <= 500`
`2000 <= Year <= 2017`
`1 <= Month <= 12`
`1 <= Day <= 31`
`0 <= Hour <= 23`
`0 <= Minute, Second <= 59`
`granularity` is one of the values `[""Year"", ""Month"", ""Day"", ""Hour"", ""Minute"", ""Second""]`.

At most `500` calls will be made to `put` and `retrieve`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a single-threaded CPU, we execute a program containing `n` functions. Each function has a unique ID between `0` and `n-1`.

Function calls are stored in a call stack: when a function call starts, its ID is pushed onto the stack, and when a function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the current function being executed. Each time a function starts or ends, we write a log with the ID, whether it started or ended, and the timestamp.

You are given a list `logs`, where `logs[i]` represents the `ith` log message formatted as a string `""{function_id}:{""start"" | ""end""}:{timestamp}""`. For example, `""0:start:3""` means a function call with function ID `0` started at the beginning of timestamp `3`, and `""1:end:2""` means a function call with function ID `1` ended at the end of timestamp `2`. Note that a function can be called multiple times, possibly recursively.

A function's exclusive time is the sum of execution times for all function calls in the program. For example, if a function is called twice, one call executing for `2` time units and another call executing for `1` time unit, the exclusive time is `2 + 1 = 3`.

Return the exclusive time of each function in an array, where the value at the `ith` index represents the exclusive time for the function with ID `i`.


Example 1:
Input: n = 2, logs = [""0:start:0"",""1:start:2"",""1:end:5"",""0:end:6""]
Output: [3,4]
Explanation:
Function 0 starts at the beginning of time 0, then it executes 2 for units of time and reaches the end of time 1.

Function 1 starts at the beginning of time 2, executes for 4 units of time, and ends at the end of time 5.

Function 0 resumes execution at the beginning of time 6 and executes for 1 unit of time.

So function 0 spends 2 + 1 = 3 units of total time executing, and function 1 spends 4 units of total time executing.


Example 2:
Input: n = 1, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""0:start:6"",""0:end:6"",""0:end:7""]
Output: [8]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.

Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.

Function 0 (initial call) resumes execution then immediately calls itself again.

Function 0 (2nd recursive call) starts at the beginning of time 6 and executes for 1 unit of time.

Function 0 (initial call) resumes execution at the beginning of time 7 and executes for 1 unit of time.

So function 0 spends 2 + 4 + 1 + 1 = 8 units of total time executing.


Example 3:
Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:6"",""1:end:6"",""0:end:7""]
Output: [7,1]
Explanation:
Function 0 starts at the beginning of time 0, executes for 2 units of time, and recursively calls itself.

Function 0 (recursive call) starts at the beginning of time 2 and executes for 4 units of time.

Function 0 (initial call) resumes execution then immediately calls function 1.

Function 1 starts at the beginning of time 6, executes 1 units of time, and ends at the end of time 6.

Function 0 resumes execution at the beginning of time 6 and executes for 2 units of time.

So function 0 spends 2 + 4 + 1 = 7 units of total time executing, and function 1 spends 1 unit of total time executing.


Example 4:
Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:7"",""1:end:7"",""0:end:8""]
Output: [8,1]

Example 5:
Input: n = 1, logs = [""0:start:0"",""0:end:0""]
Output: [1]

Constraints:
`1 <= n <= 100`
`1 <= logs.length <= 500`
`0 <= function_id < n`
`0 <= timestamp <= 109`
No two start events will happen at the same timestamp.

No two end events will happen at the same timestamp.

Each function has an `""end""` log for each `""start""` log.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input: root = [3,9,20,null,15,7]
Output: [3.00000,14.50000,11.00000]
Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.

Hence return [3, 14.5, 11].


Example 2:
Input: root = [3,9,20,15,7]
Output: [3.00000,14.50000,11.00000]

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In LeetCode Store, there are some kinds of items to sell. Each item has a price.

However, there are some special offers, and a special offer consists of one or more different kinds of items with a sale price.

You are given the each item's price, a set of special offers, and the number we need to buy for each item.

The job is to output the lowest price you have to pay for exactly certain items as given, where you could make optimal use of the special offers.

Each special offer is represented in the form of an array, the last number represents the price you need to pay for this special offer, other numbers represents how many specific items you could get if you buy this offer.

You could use any of special offers as many times as you want.


Example 1:
Input: [2,5], [[3,0,5],[1,2,10]], [3,2]
Output: 14
Explanation: 
There are two kinds of items, A and B. Their prices are $2 and $5 respectively. 
In special offer 1, you can pay $5 for 3A and 0B
In special offer 2, you can pay $10 for 1A and 2B. 
You need to buy 3A and 2B, so you may pay $10 for 1A and 2B (special offer #2), and $4 for 2A.


Example 2:
Input: [2,3,4], [[1,1,0,4],[2,2,1,9]], [1,2,1]
Output: 11
Explanation: 
The price of A is $2, and $3 for B, $4 for C. 
You may pay $4 for 1A and 1B, and $9 for 2A ,2B and 1C. 
You need to buy 1A ,2B and 1C, so you may pay $4 for 1A and 1B (special offer #1), and $3 for 1B, $4 for 1C. 
You cannot add more items, though only $9 for 2A ,2B and 1C.

Note:
There are at most 6 kinds of items, 100 special offers.

For each item, you need to buy at most 6 of them.

You are not allowed to buy more items than you want, even if that would lower the overall price.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A message containing letters from `A-Z` can be encoded into numbers using the following mapping:
'A' -> ""1""
'B' -> ""2""
...

'Z' -> ""26""
To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, `""11106""` can be mapped into:
`""AAJF""` with the grouping `(1 1 10 6)`
`""KJF""` with the grouping `(11 10 6)`
Note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'F'` since `""6""` is different from `""06""`.

In addition to the mapping above, an encoded message may contain the `'*'` character, which can represent any digit from `'1'` to `'9'` (`'0'` is excluded). For example, the encoded message `""1*""` may represent any of the encoded messages `""11""`, `""12""`, `""13""`, `""14""`, `""15""`, `""16""`, `""17""`, `""18""`, or `""19""`. Decoding `""1*""` is equivalent to decoding any of the encoded messages it can represent.

Given a string `s` containing digits and the `'*'` character, return the number of ways to decode it.

Since the answer may be very large, return it modulo `109 + 7`.


Example 1:
Input: s = ""*""
Output: 9
Explanation: The encoded message can represent any of the encoded messages ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", or ""9"".

Each of these can be decoded to the strings ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"", and ""I"" respectively.

Hence, there are a total of 9 ways to decode ""*"".


Example 2:
Input: s = ""1*""
Output: 18
Explanation: The encoded message can represent any of the encoded messages ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"".

Each of these encoded messages have 2 ways to be decoded (e.g. ""11"" can be decoded to ""AA"" or ""K"").

Hence, there are a total of 9 * 2 = 18 ways to decode ""1*"".


Example 3:
Input: s = ""2*""
Output: 15
Explanation: The encoded message can represent any of the encoded messages ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", or ""29"".

""21"", ""22"", ""23"", ""24"", ""25"", and ""26"" have 2 ways of being decoded, but ""27"", ""28"", and ""29"" only have 1 way.

Hence, there are a total of (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode ""2*"".


Constraints:
`1 <= s.length <= 105`
`s[i]` is a digit or `'*'`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Solve a given equation and return the value of `x` in the form of string ""x=#value"". The equation contains only '+', '-' operation, the variable `x` and its coefficient.

If there is no solution for the equation, return ""No solution"".

If there are infinite solutions for the equation, return ""Infinite solutions"".

If there is exactly one solution for the equation, we ensure that the value of `x` is an integer.


Example 1:
Input: ""x+5-3+x=6+x-2""
Output: ""x=2""

Example 2:
Input: ""x=x""
Output: ""Infinite solutions""

Example 3:
Input: ""2x=x""
Output: ""x=0""

Example 4:
Input: ""2x+3x-6x=x+2""
Output: ""x=-1""

Example 5:
Input: ""x=x+2""
Output: ""No solution""",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design your implementation of the circular double-ended queue (deque).

Your implementation should support following operations:
`MyCircularDeque(k)`: Constructor, set the size of the deque to be k.

`insertFront()`: Adds an item at the front of Deque. Return true if the operation is successful.

`insertLast()`: Adds an item at the rear of Deque. Return true if the operation is successful.

`deleteFront()`: Deletes an item from the front of Deque. Return true if the operation is successful.

`deleteLast()`: Deletes an item from the rear of Deque. Return true if the operation is successful.

`getFront()`: Gets the front item from the Deque. If the deque is empty, return -1.

`getRear()`: Gets the last item from Deque. If the deque is empty, return -1.

`isEmpty()`: Checks whether Deque is empty or not. 
`isFull()`: Checks whether Deque is full or not.


Example:
MyCircularDeque circularDeque = new MycircularDeque(3); // set the size to be 3
circularDeque.insertLast(1);			// return true
circularDeque.insertLast(2);			// return true
circularDeque.insertFront(3);			// return true
circularDeque.insertFront(4);			// return false, the queue is full
circularDeque.getRear();  			// return 2
circularDeque.isFull();				// return true
circularDeque.deleteLast();			// return true
circularDeque.insertFront(4);			// return true
circularDeque.getFront();			// return 4
Note:
All values will be in the range of [0, 1000].

The number of operations will be in the range of [1, 1000].

Please do not use the built-in Deque library.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a search autocomplete system for a search engine. Users may input a sentence (at least one word and end with a special character `'#'`). For each character they type except '#', you need to return the top 3 historical hot sentences that have prefix the same as the part of sentence already typed. Here are the specific rules:
The hot degree for a sentence is defined as the number of times a user typed the exactly same sentence before.

The returned top 3 hot sentences should be sorted by hot degree (The first is the hottest one). If several sentences have the same degree of hot, you need to use ASCII-code order (smaller one appears first).

If less than 3 hot sentences exist, then just return as many as you can.

When the input is a special character, it means the sentence ends, and in this case, you need to return an empty list.

Your job is to implement the following functions:
The constructor function:
`AutocompleteSystem(String[] sentences, int[] times):` This is the constructor. The input is historical data. `Sentences` is a string array consists of previously typed sentences. `Times` is the corresponding times a sentence has been typed. Your system should record these historical data.

Now, the user wants to input a new sentence. The following function will provide the next character the user types:
`List<String> input(char c):` The input `c` is the next character typed by the user. The character will only be lower-case letters (`'a'` to `'z'`), blank space (`' '`) or a special character (`'#'`). Also, the previously typed sentence should be recorded in your system. The output will be the top 3 historical hot sentences that have prefix the same as the part of sentence already typed.


Example:
Operation: AutocompleteSystem([""i love you"", ""island"",""ironman"", ""i love leetcode""], [5,3,2,2])
The system have already tracked down the following sentences and their corresponding times:
`""i love you""` : `5` times
`""island""` : `3` times
`""ironman""` : `2` times
`""i love leetcode""` : `2` times
Now, the user begins another search:
Operation: input('i')
Output: [""i love you"", ""island"",""i love leetcode""]
Explanation:
There are four sentences that have prefix `""i""`. Among them, ""ironman"" and ""i love leetcode"" have same hot degree. Since `' '` has ASCII code 32 and `'r'` has ASCII code 114, ""i love leetcode"" should be in front of ""ironman"". Also we only need to output top 3 hot sentences, so ""ironman"" will be ignored.

Operation: input(' ')
Output: [""i love you"",""i love leetcode""]
Explanation:
There are only two sentences that have prefix `""i ""`.

Operation: input('a')
Output: []
Explanation:
There are no sentences that have prefix `""i a""`.

Operation: input('#')
Output: []
Explanation:
The user finished the input, the sentence `""i a""` should be saved as a historical sentence in system. And the following input will be counted as a new search.

Note:
The input sentence will always start with a letter and end with '#', and only one blank space will exist between two words.

The number of complete sentences that to be searched won't exceed 100. The length of each sentence including those in the historical data won't exceed 100.

Please use double-quote instead of single-quote when you write test cases even for a character input.

Please remember to RESET your class variables declared in class AutocompleteSystem, as static/class variables are persisted across multiple test cases. Please see here for more details.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array consisting of `n` integers, find the contiguous subarray of given length `k` that has the maximum average value. And you need to output the maximum average value.


Example 1:
Input: [1,12,-5,-6,50,3], k = 4
Output: 12.75
Explanation: Maximum average is (12-5-6+50)/4 = 51/4 = 12.75
Note:
1 <= `k` <= `n` <= 30,000.

Elements of the given array will be in the range [-10,000, 10,000].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` consisting of `n` elements, and an integer `k`.

Find a contiguous subarray whose length is greater than or equal to `k` that has the maximum average value and return this value. Any answer with a calculation error less than `10-5` will be accepted.


Example 1:
Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
Explanation:
- When the length is 4, averages are [0.5, 12.75, 10.5] and the maximum average is 12.75
- When the length is 5, averages are [10.4, 10.8] and the maximum average is 10.8
- When the length is 6, averages are [9.16667] and the maximum average is 9.16667
The maximum average is when we choose a subarray of length 4 (i.e., the sub array [12, -5, -6, 50]) which has the max average 12.75, so we return 12.75
Note that we do not consider the subarrays of length < 4.


Example 2:
Input: nums = [5], k = 1
Output: 5.00000

Constraints:
`n == nums.length`
`1 <= k <= n <= 104`
`-104 <= nums[i] <= 104`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in repetition of one number and loss of another number.

You are given an integer array `nums` representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return them in the form of an array.


Example 1:
Input: nums = [1,2,2,4]
Output: [2,3]

Example 2:
Input: nums = [1,1]
Output: [1,2]

Constraints:
`2 <= nums.length <= 104`
`1 <= nums[i] <= 104`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `n` pairs of numbers. In every pair, the first number is always smaller than the second number.

Now, we define a pair `(c, d)` can follow another pair `(a, b)` if and only if `b < c`. Chain of pairs can be formed in this fashion. 
Given a set of pairs, find the length longest chain which can be formed. You needn't use up all the given pairs. You can select pairs in any order.


Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
Note:
The number of given pairs will be in the range [1, 1000].",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string, your task is to count how many palindromic substrings in this string.

The substrings with different start indexes or end indexes are counted as different substrings even they consist of same characters.


Example 1:
Input: ""abc""
Output: 3
Explanation: Three palindromic strings: ""a"", ""b"", ""c"".


Example 2:
Input: ""aaa""
Output: 6
Explanation: Six palindromic strings: ""a"", ""a"", ""a"", ""aa"", ""aa"", ""aaa"".

Note:
The input string length won't exceed 1000.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In English, we have a concept called root, which can be followed by some other word to form another longer word - let's call this word successor. For example, when the root `""an""` is followed by the successor word `""other""`, we can form a new word `""another""`.

Given a `dictionary` consisting of many roots and a `sentence` consisting of words separated by spaces, replace all the successors in the sentence with the root forming it. If a successor can be replaced by more than one root, replace it with the root that has the shortest length.

Return the `sentence` after the replacement.


Example 1:
Input: dictionary = [""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
Output: ""the cat was rat by the bat""

Example 2:
Input: dictionary = [""a"",""b"",""c""], sentence = ""aadsfasf absbs bbab cadsfafs""
Output: ""a a b c""

Example 3:
Input: dictionary = [""a"", ""aa"", ""aaa"", ""aaaa""], sentence = ""a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa""
Output: ""a a a a a a a a bbb baba a""

Example 4:
Input: dictionary = [""catt"",""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
Output: ""the cat was rat by the bat""

Example 5:
Input: dictionary = [""ac"",""ab""], sentence = ""it is abnormal that this solution is accepted""
Output: ""it is ab that this solution is ac""

Constraints:
`1 <= dictionary.length <= 1000`
`1 <= dictionary[i].length <= 100`
`dictionary[i]` consists of only lower-case letters.

`1 <= sentence.length <= 10^6`
`sentence` consists of only lower-case letters and spaces.

The number of words in `sentence` is in the range `[1, 1000]`
The length of each word in `sentence` is in the range `[1, 1000]`
Each two consecutive words in `sentence` will be separated by exactly one space.

`sentence` does not have leading or trailing spaces.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the world of Dota2, there are two parties: the `Radiant` and the `Dire`.

The Dota2 senate consists of senators coming from two parties. Now the senate wants to make a decision about a change in the Dota2 game. The voting for this change is a round-based procedure. In each round, each senator can exercise `one` of the two rights:
`Ban one senator's right`:
	A senator can make another senator lose all his rights in this and all the following rounds.

`Announce the victory`:
	If this senator found the senators who still have rights to vote are all from the same party, he can announce the victory and make the decision about the change in the game.

Given a string representing each senator's party belonging. The character 'R' and 'D' represent the `Radiant` party and the `Dire` party respectively. Then if there are `n` senators, the size of the given string will be `n`.

The round-based procedure starts from the first senator to the last senator in the given order. This procedure will last until the end of voting. All the senators who have lost their rights will be skipped during the procedure.

Suppose every senator is smart enough and will play the best strategy for his own party, you need to predict which party will finally announce the victory and make the change in the Dota2 game. The output should be `Radiant` or `Dire`.


Example 1:
Input: ""RD""
Output: ""Radiant""
Explanation: The first senator comes from Radiant and he can just ban the next senator's right in the round 1. 
And the second senator can't exercise any rights any more since his right has been banned. 
And in the round 2, the first senator can just announce the victory since he is the only guy in the senate who can vote.


Example 2:
Input: ""RDD""
Output: ""Dire""
Explanation: 
The first senator comes from Radiant and he can just ban the next senator's right in the round 1. 
And the second senator can't exercise any rights anymore since his right has been banned. 
And the third senator comes from Dire and he can ban the first senator's right in the round 1. 
And in the round 2, the third senator can just announce the victory since he is the only guy in the senate who can vote.

Note:
The length of the given string will in the range [1, 10,000].",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Initially on a notepad only one character 'A' is present. You can perform two operations on this notepad for each step:
`Copy All`: You can copy all the characters present on the notepad (partial copy is not allowed).

`Paste`: You can paste the characters which are copied last time.

Given a number `n`. You have to get exactly `n` 'A' on the notepad by performing the minimum number of steps permitted. Output the minimum number of steps to get `n` 'A'.

Example 1:
Input: 3
Output: 3
Explanation:
Intitally, we have one character 'A'.

In step 1, we use Copy All operation.

In step 2, we use Paste operation to get 'AA'.

In step 3, we use Paste operation to get 'AAA'.

Note:
The `n` will be in the range [1, 1000].",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Imagine you have a special keyboard with the following keys: 
`Key 1: (A)`:  Print one 'A' on screen.

`Key 2: (Ctrl-A)`: Select the whole screen.

`Key 3: (Ctrl-C)`: Copy selection to buffer.

`Key 4: (Ctrl-V)`: Print buffer on screen appending it after what has already been printed. 
Now, you can only press the keyboard for N times (with the above four keys), find out the maximum numbers of 'A' you can print on screen.


Example 1:
Input: N = 3
Output: 3
Explanation: 
We can at most get 3 A's on screen by pressing following key sequence:
A, A, A

Example 2:
Input: N = 7
Output: 9
Explanation: 
We can at most get 9 A's on screen by pressing following key sequence:
A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
Note:
1 <= N <= 50 
Answers will be in the range of 32-bit signed integer.",0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return all duplicate subtrees.

For each kind of duplicate subtrees, you only need to return the root node of any one of them.

Two trees are duplicate if they have the same structure with the same node values.


Example 1:
Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]

Example 2:
Input: root = [2,1,1]
Output: [[1]]

Example 3:
Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]

Constraints:
The number of the nodes in the tree will be in the range `[1, 10^4]`
`-200 <= Node.val <= 200`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a Binary Search Tree and a target number `k`, return `true` if there exist two elements in the BST such that their sum is equal to the given target.


Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
Output: true

Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
Output: false

Example 3:
Input: root = [2,1,3], k = 4
Output: true

Example 4:
Input: root = [2,1,3], k = 1
Output: false

Example 5:
Input: root = [2,1,3], k = 3
Output: true

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-104 <= Node.val <= 104`
`root` is guaranteed to be a valid binary search tree.

`-105 <= k <= 105`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` with no duplicates. A maximum binary tree can be built recursively from `nums` using the following algorithm:
Create a root node whose value is the maximum value in `nums`.

Recursively build the left subtree on the subarray prefix to the left of the maximum value.

Recursively build the right subtree on the subarray suffix to the right of the maximum value.

Return the maximum binary tree built from `nums`.


Example 1:
Input: nums = [3,2,1,6,0,5]
Output: [6,3,5,null,2,0,null,null,1]
Explanation: The recursive calls are as follow:
- The largest value in [3,2,1,6,0,5] is 6. Left prefix is [3,2,1] and right suffix is [0,5].

    - The largest value in [3,2,1] is 3. Left prefix is [] and right suffix is [2,1].

        - Empty array, so no child.

        - The largest value in [2,1] is 2. Left prefix is [] and right suffix is [1].

            - Empty array, so no child.

            - Only one element, so child is a node with value 1.

    - The largest value in [0,5] is 5. Left prefix is [0] and right suffix is [].

        - Only one element, so child is a node with value 0.

        - Empty array, so no child.


Example 2:
Input: nums = [3,2,1]
Output: [3,null,2,null,1]

Constraints:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 1000`
All integers in `nums` are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Print a binary tree in an m*n 2D string array following these rules: 
The row number `m` should be equal to the height of the given binary tree.

The column number `n` should always be an odd number.

The root node's value (in string format) should be put in the exactly middle of the first row it can be put. The column and the row where the root node belongs will separate the rest space into two parts (left-bottom part and right-bottom part). You should print the left subtree in the left-bottom part and print the right subtree in the right-bottom part. The left-bottom part and the right-bottom part should have the same size. Even if one subtree is none while the other is not, you don't need to print anything for the none subtree but still need to leave the space as large as that for the other subtree. However, if two subtrees are none, then you don't need to leave space for both of them. 
Each unused space should contain an empty string `""""`.

Print the subtrees following the same rules.


Example 1:
Input:
     1
    /
   2
Output:
[["""", ""1"", """"],
 [""2"", """", """"]]

Example 2:
Input:
     1
    / \
   2   3
    \
     4
Output:
[["""", """", """", ""1"", """", """", """"],
 ["""", ""2"", """", """", """", ""3"", """"],
 ["""", """", ""4"", """", """", """", """"]]

Example 3:
Input:
      1
     / \
    2   5
   / 
  3 
 / 
4 
Output:
[["""",  """",  """", """",  """", """", """", ""1"", """",  """",  """",  """",  """", """", """"]
 ["""",  """",  """", ""2"", """", """", """", """",  """",  """",  """",  ""5"", """", """", """"]
 ["""",  ""3"", """", """",  """", """", """", """",  """",  """",  """",  """",  """", """", """"]
 [""4"", """",  """", """",  """", """", """", """",  """",  """",  """",  """",  """", """", """"]]
Note:
The height of binary tree is in the range of [1, 10].",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` (index starts at `1`) consisting of N integers: A1, A2, ..., AN and an integer `B`. The integer `B` denotes that from any place (suppose the index is `i`) in the array `A`, you can jump to any one of the place in the array `A` indexed `i+1`, `i+2`, ..., `i+B` if this place can be jumped to. Also, if you step on the index `i`, you have to pay Ai coins. If Ai is -1, it means you can’t jump to the place indexed `i` in the array.

Now, you start from the place indexed `1` in the array `A`, and your aim is to reach the place indexed `N` using the minimum coins. You need to return the path of indexes (starting from 1 to N) in the array you should take to get to the place indexed `N` using minimum coins.

If there are multiple paths with the same cost, return the lexicographically smallest such path.

If it's not possible to reach the place indexed N then you need to return an empty array.


Example 1:
Input: [1,2,4,-1,2], 2
Output: [1,3,5]

Example 2:
Input: [1,2,4,-1,2], 1
Output: []
Note:
Path Pa1, Pa2, ..., Pan is lexicographically smaller than Pb1, Pb2, ..., Pbm, if and only if at the first `i` where Pai and Pbi differ, Pai < Pbi; when no such `i` exists, then `n` < `m`.

A1 >= 0. A2, ..., AN (if exist) will in the range of [-1, 100].

Length of A is in the range of [1, 1000].

B is in the range of [1, 100].",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a robot starting at position (0, 0), the origin, on a 2D plane. Given a sequence of its moves, judge if this robot ends up at (0, 0) after it completes its moves.

The move sequence is represented by a string, and the character moves[i] represents its ith move. Valid moves are R (right), L (left), U (up), and D (down). If the robot returns to the origin after it finishes all of its moves, return true. Otherwise, return false.

Note: The way that the robot is ""facing"" is irrelevant. ""R"" will always make the robot move to the right once, ""L"" will always make it move left, etc. Also, assume that the magnitude of the robot's movement is the same for each move.


Example 1:
Input: moves = ""UD""
Output: true
Explanation: The robot moves up once, and then down once. All moves have the same magnitude, so it ended up at the origin where it started. Therefore, we return true.


Example 2:
Input: moves = ""LL""
Output: false
Explanation: The robot moves left twice. It ends up two ""moves"" to the left of the origin. We return false because it is not at the origin at the end of its moves.


Example 3:
Input: moves = ""RRDD""
Output: false

Example 4:
Input: moves = ""LDRRLRUULR""
Output: false

Constraints:
`1 <= moves.length <= 2 * 104`
`moves` only contains the characters `'U'`, `'D'`, `'L'` and `'R'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted integer array `arr`, two integers `k` and `x`, return the `k` closest integers to `x` in the array. The result should also be sorted in ascending order.

An integer `a` is closer to `x` than an integer `b` if:
`|a - x| < |b - x|`, or
`|a - x| == |b - x|` and `a < b`

Example 1:
Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]

Example 2:
Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]

Constraints:
`1 <= k <= arr.length`
`1 <= arr.length <= 104`
`arr` is sorted in ascending order.

`-104 <= arr[i], x <= 104`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` that is sorted in ascending order, return `true` if and only if you can split it into one or more subsequences such that each subsequence consists of consecutive integers and has a length of at least `3`.


Example 1:
Input: nums = [1,2,3,3,4,5]
Output: true
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3
3, 4, 5

Example 2:
Input: nums = [1,2,3,3,4,4,5,5]
Output: true
Explanation:
You can split them into two consecutive subsequences : 
1, 2, 3, 4, 5
3, 4, 5

Example 3:
Input: nums = [1,2,3,4,4,5]
Output: false

Constraints:
`1 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`
`nums` is sorted in an ascending order.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Start from integer 1, remove any integer that contains 9 such as 9, 19, 29...

So now, you will have a new integer sequence: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...

Given a positive integer `n`, you need to return the n-th integer after removing. Note that 1 will be the first integer.


Example 1:
Input: n = 9
Output: 10

Constraints:
`1 <= n <= 8 x 10^8`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D integer matrix M representing the gray scale of an image, you need to design a smoother to make the gray scale of each cell becomes the average gray scale (rounding down) of all the 8 surrounding cells and itself.  If a cell has less than 8 surrounding cells, then use as many as you can.


Example 1:
Input:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
Explanation:
For the point (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the point (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0
Note:
The value in the given matrix is in the range of [0, 255].

The length and width of the given matrix are in the range of [1, 150].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, write a function to get the maximum width of the given tree. The maximum width of a tree is the maximum width among all levels.

The width of one level is defined as the length between the end-nodes (the leftmost and right most non-null nodes in the level, where the `null` nodes between the end-nodes are also counted into the length calculation.

It is guaranteed that the answer will in the range of 32-bit signed integer.


Example 1:
Input: 
           1
         /   \
        3     2
       / \     \  
      5   3     9 
Output: 4
Explanation: The maximum width existing in the third level with the length 4 (5,3,null,9).


Example 2:
Input: 
          1
         /  
        3    
       / \       
      5   3     
Output: 2
Explanation: The maximum width existing in the third level with the length 2 (5,3).


Example 3:
Input: 
          1
         / \
        3   2 
       /        
      5      
Output: 2
Explanation: The maximum width existing in the second level with the length 2 (3,2).


Example 4:
Input: 
          1
         / \
        3   2
       /     \  
      5       9 
     /         \
    6           7
Output: 8
Explanation:The maximum width existing in the fourth level with the length 8 (6,null,null,null,null,null,null,7).


Constraints:
The given binary tree will have between `1` and `3000` nodes.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree with `n` nodes, your task is to check if it's possible to partition the tree to two trees which have the equal sum of values after removing exactly one edge on the original tree.


Example 1:
Input:     
    5
   / \
  10 10
    /  \
   2   3
Output: True
Explanation: 
    5
   / 
  10
      
Sum: 15
   10
  /  \
 2    3
Sum: 15

Example 2:
Input:     
    1
   / \
  2  10
    /  \
   2   20
Output: False
Explanation: You can't split the tree into two trees with equal sum after removing exactly one edge on the tree.

Note:
The range of tree node value is in the range of [-100000, 100000].

1 <= n <= 10000",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a strange printer with the following two special requirements:
The printer can only print a sequence of the same character each time.

At each turn, the printer can print new characters starting from and ending at any places, and will cover the original existing characters.

Given a string consists of lower English letters only, your job is to count the minimum number of turns the printer needed in order to print it.


Example 1:
Input: ""aaabbb""
Output: 2
Explanation: Print ""aaa"" first and then print ""bbb"".


Example 2:
Input: ""aba""
Output: 2
Explanation: Print ""aaa"" first and then print ""b"" from the second place of the string, which will cover the existing character 'a'.

Hint: Length of the given string will not exceed 100.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` with `n` integers, your task is to check if it could become non-decreasing by modifying at most one element.

We define an array is non-decreasing if `nums[i] <= nums[i + 1]` holds for every `i` (0-based) such that (`0 <= i <= n - 2`).


Example 1:
Input: nums = [4,2,3]
Output: true
Explanation: You could modify the first `4` to `1` to get a non-decreasing array.


Example 2:
Input: nums = [4,2,1]
Output: false
Explanation: You can't get a non-decreasing array by modify at most one element.


Constraints:
`n == nums.length`
`1 <= n <= 104`
`-105 <= nums[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"If the depth of a tree is smaller than `5`, then this tree can be represented by a list of three-digits integers.

For each integer in this list:
The hundreds digit represents the depth `D` of this node, `1 <= D <= 4.`
The tens digit represents the position `P` of this node in the level it belongs to, `1 <= P <= 8`. The position is the same as that in a full binary tree.

The units digit represents the value `V` of this node, `0 <= V <= 9.`
Given a list of `ascending` three-digits integers representing a binary tree with the depth smaller than 5, you need to return the sum of all paths from the root towards the leaves.

It's guaranteed that the given list represents a valid connected binary tree.


Example 1:
Input: [113, 215, 221]
Output: 12
Explanation: 
The tree that the list represents is:
    3
   / \
  5   1
The path sum is (3 + 5) + (3 + 1) = 12.


Example 2:
Input: [113, 221]
Output: 4
Explanation: 
The tree that the list represents is: 
    3
     \
      1
The path sum is (3 + 1) = 4.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `n` and `k`, you need to construct a list which contains `n` different positive integers ranging from `1` to `n` and obeys the following requirement: 
Suppose this list is [a1, a2, a3, ... , an], then the list [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an|] has exactly `k` distinct integers.

If there are multiple answers, print any of them.


Example 1:
Input: n = 3, k = 1
Output: [1, 2, 3]
Explanation: The [1, 2, 3] has three different positive integers ranging from 1 to 3, and the [1, 1] has exactly 1 distinct integer: 1.


Example 2:
Input: n = 3, k = 2
Output: [1, 3, 2]
Explanation: The [1, 3, 2] has three different positive integers ranging from 1 to 3, and the [2, 1] has exactly 2 distinct integers: 1 and 2.

Note:
The `n` and `k` are in the range 1 <= k < n <= 104.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Nearly every one have used the Multiplication Table. But could you find out the `k-th` smallest number quickly from the multiplication table?
Given the height `m` and the length `n` of a `m * n` Multiplication Table, and a positive integer `k`, you need to return the `k-th` smallest number in this table.


Example 1:
Input: m = 3, n = 3, k = 5
Output: 
Explanation: 
The Multiplication Table:
1	2	3
2	4	6
3	6	9
The 5-th smallest number is 3 (1, 2, 2, 3, 3).


Example 2:
Input: m = 2, n = 3, k = 6
Output: 
Explanation: 
The Multiplication Table:
1	2	3
2	4	6
The 6-th smallest number is 6 (1, 2, 2, 3, 4, 6).

Note:
The `m` and `n` will be in the range [1, 30000].

The `k` will be in the range [1, m * n]",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary search tree and the lowest and highest boundaries as `low` and `high`, trim the tree so that all its elements lies in `[low, high]`. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.


Example 1:
Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]

Example 2:
Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]

Example 3:
Input: root = [1], low = 1, high = 2
Output: [1]

Example 4:
Input: root = [1,null,2], low = 1, high = 3
Output: [1,null,2]

Example 5:
Input: root = [1,null,2], low = 2, high = 4
Output: [2]

Constraints:
The number of nodes in the tree in the range `[1, 104]`.

`0 <= Node.val <= 104`
The value of each node in the tree is unique.

`root` is guaranteed to be a valid binary search tree.

`0 <= low <= high <= 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer, you could swap two digits at most once to get the maximum valued number. Return the maximum valued number you could get.


Example 1:
Input: 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.


Example 2:
Input: 9973
Output: 9973
Explanation: No swap.

Note:
The given number is in the range [0, 108]",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty special binary tree consisting of nodes with the non-negative value, where each node in this tree has exactly `two` or `zero` sub-node. If the node has two sub-nodes, then this node's value is the smaller value among its two sub-nodes. More formally, the property `root.val = min(root.left.val, root.right.val)` always holds.

Given such a binary tree, you need to output the second minimum value in the set made of all the nodes' value in the whole tree.

If no such second minimum value exists, output -1 instead.


Example 1:
Input: root = [2,2,5,null,null,5,7]
Output: 5
Explanation: The smallest value is 2, the second smallest value is 5.


Example 2:
Input: root = [2,2,2]
Output: -1
Explanation: The smallest value is 2, but there isn't any second smallest value.


Constraints:
The number of nodes in the tree is in the range `[1, 25]`.

`1 <= Node.val <= 231 - 1`
`root.val == min(root.left.val, root.right.val)` for each internal node of the tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a room with `n` lights which are turned on initially and 4 buttons on the wall. After performing exactly `m` unknown operations towards buttons, you need to return how many different kinds of status of the `n` lights could be.

Suppose `n` lights are labeled as number [1, 2, 3 ..., n], function of these 4 buttons are given below:
Flip all the lights.

Flip lights with even numbers.

Flip lights with odd numbers.

Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...


Example 1:
Input: n = 1, m = 1.
Output: 2
Explanation: Status can be: [on], [off]

Example 2:
Input: n = 2, m = 1.
Output: 3
Explanation: Status can be: [on, off], [off, on], [off, off]

Example 3:
Input: n = 3, m = 1.
Output: 4
Explanation: Status can be: [off, on, off], [on, off, on], [off, off, off], [off, on, on].

Note: `n` and `m` both fit in range [0, 1000].",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return the number of longest increasing subsequences.

Notice that the sequence has to be strictly increasing.


Example 1:
Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].


Example 2:
Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The length of longest continuous increasing subsequence is 1, and there are 5 subsequences' length is 1, so output 5.


Constraints:
`1 <= nums.length <= 2000`
`-106 <= nums[i] <= 106`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an unsorted array of integers `nums`, return the length of the longest continuous increasing subsequence (i.e. subarray). The subsequence must be strictly increasing.

A continuous increasing subsequence is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.


Example 1:
Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest continuous increasing subsequence is [1,3,5] with length 3.

Even though [1,3,5,7] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.


Example 2:
Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with length 1. Note that it must be strictly
increasing.


Constraints:
`0 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are asked to cut off all the trees in a forest for a golf event. The forest is represented as an `m x n` matrix. In this matrix:
`0` means the cell cannot be walked through.

`1` represents an empty cell that can be walked through.

A number greater than `1` represents a tree in a cell that can be walked through, and this number is the tree's height.

In one step, you can walk in any of the four directions: north, east, south, and west. If you are standing in a cell with a tree, you can choose whether to cut it off.

You must cut off the trees in order from shortest to tallest. When you cut off a tree, the value at its cell becomes `1` (an empty cell).

Starting from the point `(0, 0)`, return the minimum steps you need to walk to cut off all the trees. If you cannot cut off all the trees, return `-1`.

You are guaranteed that no two trees have the same height, and there is at least one tree needs to be cut off.


Example 1:
Input: forest = [[1,2,3],[0,0,4],[7,6,5]]
Output: 6
Explanation: Following the path above allows you to cut off the trees from shortest to tallest in 6 steps.


Example 2:
Input: forest = [[1,2,3],[0,0,0],[7,6,5]]
Output: -1
Explanation: The trees in the bottom row cannot be accessed as the middle row is blocked.


Example 3:
Input: forest = [[2,3,4],[0,0,5],[8,7,6]]
Output: 6

Explanation: You can follow the same path as Example 1 to cut off all the trees.

Note that you can cut off the first tree at (0, 0) before making any steps.


Constraints:
`m == forest.length`
`n == forest[i].length`
`1 <= m, n <= 50`
`0 <= forest[i][j] <= 109`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that is initialized with a list of different words. Provided a string, you should determine if you can change exactly one character in this string to match any word in the data structure.

Implement the `MagicDictionary` class:
`MagicDictionary()` Initializes the object.

`void buildDict(String[] dictionary)` Sets the data structure with an array of distinct strings `dictionary`.

`bool search(String searchWord)` Returns `true` if you can change exactly one character in `searchWord` to match any string in the data structure, otherwise returns `false`.


Example 1:
Input
[""MagicDictionary"", ""buildDict"", ""search"", ""search"", ""search"", ""search""]
[[], [[""hello"", ""leetcode""]], [""hello""], [""hhllo""], [""hell""], [""leetcoded""]]
Output
[null, null, false, true, false, false]
Explanation
MagicDictionary magicDictionary = new MagicDictionary();
magicDictionary.buildDict([""hello"", ""leetcode""]);
magicDictionary.search(""hello""); // return False
magicDictionary.search(""hhllo""); // We can change the second 'h' to 'e' to match ""hello"" so we return True
magicDictionary.search(""hell""); // return False
magicDictionary.search(""leetcoded""); // return False

Constraints:
`1 <= dictionary.length <= 100`
`1 <= dictionary[i].length <= 100`
`dictionary[i]` consists of only lower-case English letters.

All the strings in `dictionary` are distinct.

`1 <= searchWord.length <= 100`
`searchWord` consists of only lower-case English letters.

`buildDict` will be called only once before `search`.

At most `100` calls will be made to `search`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `MapSum` class:
`MapSum()` Initializes the `MapSum` object.

`void insert(String key, int val)` Inserts the `key-val` pair into the map. If the `key` already existed, the original `key-value` pair will be overridden to the new one.

`int sum(string prefix)` Returns the sum of all the pairs' value whose `key` starts with the `prefix`.


Example 1:
Input
[""MapSum"", ""insert"", ""sum"", ""insert"", ""sum""]
[[], [""apple"", 3], [""ap""], [""app"", 2], [""ap""]]
Output
[null, null, 3, null, 5]
Explanation
MapSum mapSum = new MapSum();
mapSum.insert(""apple"", 3);  
mapSum.sum(""ap"");           // return 3 (apple = 3)
mapSum.insert(""app"", 2);    
mapSum.sum(""ap"");           // return 5 (apple + app = 3 + 2 = 5)

Constraints:
`1 <= key.length, prefix.length <= 50`
`key` and `prefix` consist of only lowercase English letters.

`1 <= val <= 1000`
At most `50` calls will be made to `insert` and `sum`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` containing only three types of characters: `'('`, `')'` and `'*'`, return `true` if `s` is valid.

The following rules define a valid string:
Any left parenthesis `'('` must have a corresponding right parenthesis `')'`.

Any right parenthesis `')'` must have a corresponding left parenthesis `'('`.

Left parenthesis `'('` must go before the corresponding right parenthesis `')'`.

`'*'` could be treated as a single right parenthesis `')'` or a single left parenthesis `'('` or an empty string `""""`.


Example 1:
Input: s = ""()""
Output: true

Example 2:
Input: s = ""(*)""
Output: true

Example 3:
Input: s = ""(*))""
Output: true

Constraints:
`1 <= s.length <= 100`
`s[i]` is `'('`, `')'` or `'*'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have 4 cards each containing a number from 1 to 9.  You need to judge whether they could operated through `*`, `/`, `+`, `-`, `(`, `)` to get the value of 24.


Example 1:
Input: [4, 1, 8, 7]
Output: True
Explanation: (8-4) * (7-1) = 24

Example 2:
Input: [1, 2, 1, 2]
Output: False
Note:
The division operator `/` represents real division, not integer division.  For example, 4 / (1 - 2/3) = 12.

Every operation done is between two numbers.  In particular, we cannot use `-` as a unary operator.  For example, with `[1, 1, 1, 1]` as input, the expression `-1 - 1 - 1 - 1` is not allowed.

You cannot concatenate numbers together.  For example, if the input is `[1, 2, 1, 2]`, we cannot write this as 12 + 12.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty string `s`, you may delete at most one character.  Judge whether you can make it a palindrome.


Example 1:
Input: ""aba""
Output: True

Example 2:
Input: ""abca""
Output: True
Explanation: You could delete the character 'c'.

Note:
The string will only contain lowercase characters a-z.

The maximum length of the string is 50000.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `time` represented in the format `""HH:MM""`, form the next closest time by reusing the current digits. There is no limit on how many times a digit can be reused.

You may assume the given input string is always valid. For example, `""01:34""`, `""12:09""` are all valid. `""1:34""`, `""12:9""` are all invalid.


Example 1:
Input: time = ""19:34""
Output: ""19:39""
Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.

It is not 19:33, because this occurs 23 hours and 59 minutes later.


Example 2:
Input: time = ""23:59""
Output: ""22:22""
Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22.

It may be assumed that the returned time is next day's time since it is smaller than the input time numerically.


Constraints:
`time.length == 5`
`time` is a valid time in the form `""HH:MM""`.

`0 <= HH < 24`
`0 <= MM < 60`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are keeping score for a baseball game with strange rules. The game consists of several rounds, where the scores of past rounds may affect future rounds' scores.

At the beginning of the game, you start with an empty record. You are given a list of strings `ops`, where `ops[i]` is the `ith` operation you must apply to the record and is one of the following:
An integer `x` - Record a new score of `x`.

`""+""` - Record a new score that is the sum of the previous two scores. It is guaranteed there will always be two previous scores.

`""D""` - Record a new score that is double the previous score. It is guaranteed there will always be a previous score.

`""C""` - Invalidate the previous score, removing it from the record. It is guaranteed there will always be a previous score.

Return the sum of all the scores on the record.


Example 1:
Input: ops = [""5"",""2"",""C"",""D"",""+""]
Output: 30
Explanation:
""5"" - Add 5 to the record, record is now [5].

""2"" - Add 2 to the record, record is now [5, 2].

""C"" - Invalidate and remove the previous score, record is now [5].

""D"" - Add 2 * 5 = 10 to the record, record is now [5, 10].

""+"" - Add 5 + 10 = 15 to the record, record is now [5, 10, 15].

The total sum is 5 + 10 + 15 = 30.


Example 2:
Input: ops = [""5"",""-2"",""4"",""C"",""D"",""9"",""+"",""+""]
Output: 27
Explanation:
""5"" - Add 5 to the record, record is now [5].

""-2"" - Add -2 to the record, record is now [5, -2].

""4"" - Add 4 to the record, record is now [5, -2, 4].

""C"" - Invalidate and remove the previous score, record is now [5, -2].

""D"" - Add 2 * -2 = -4 to the record, record is now [5, -2, -4].

""9"" - Add 9 to the record, record is now [5, -2, -4, 9].

""+"" - Add -4 + 9 = 5 to the record, record is now [5, -2, -4, 9, 5].

""+"" - Add 9 + 5 = 14 to the record, record is now [5, -2, -4, 9, 5, 14].

The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.


Example 3:
Input: ops = [""1""]
Output: 1

Constraints:
`1 <= ops.length <= 1000`
`ops[i]` is `""C""`, `""D""`, `""+""`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.

For operation `""+""`, there will always be at least two previous scores on the record.

For operations `""C""` and `""D""`, there will always be at least one previous score on the record.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` bulbs in a row numbered from `1` to `n`. Initially, all the bulbs are turned off. We turn on exactly one bulb every day until all bulbs are on after `n` days.

You are given an array `bulbs` of length `n` where `bulbs[i] = x` means that on the `(i+1)th` day, we will turn on the bulb at position `x` where `i` is 0-indexed and `x` is 1-indexed.

Given an integer `k`, return the minimum day number such that there exists two turned on bulbs that have exactly `k` bulbs between them that are all turned off. If there isn't such day, return `-1`.


Example 1:
Input: bulbs = [1,3,2], k = 1
Output: 2
Explanation:
On the first day: bulbs[0] = 1, first bulb is turned on: [1,0,0]
On the second day: bulbs[1] = 3, third bulb is turned on: [1,0,1]
On the third day: bulbs[2] = 2, second bulb is turned on: [1,1,1]
We return 2 because on the second day, there were two on bulbs with one off bulb between them.


Example 2:
Input: bulbs = [1,2,3], k = 1
Output: -1

Constraints:
`n == bulbs.length`
`1 <= n <= 2 * 104`
`1 <= bulbs[i] <= n`
`bulbs` is a permutation of numbers from `1` to `n`.

`0 <= k <= 2 * 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that started as a tree with N nodes (with distinct values 1, 2, ..., N), with one additional edge added.  The added edge has two different vertices chosen from 1 to N, and was not an edge that already existed.

The resulting graph is given as a 2D-array of `edges`.  Each element of `edges` is a pair `[u, v]` with `u < v`, that represents an undirected edge connecting nodes `u` and `v`.

Return an edge that can be removed so that the resulting graph is a tree of N nodes.  If there are multiple answers, return the answer that occurs last in the given 2D-array.  The answer edge `[u, v]` should be in the same format, with `u < v`.


Example 1:
Input: [[1,2], [1,3], [2,3]]
Output: [2,3]
Explanation: The given undirected graph will be like this:
  1
 / \
2 - 3

Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
Output: [1,4]
Explanation: The given undirected graph will be like this:
5 - 1 - 2
    |   |
    4 - 3
Note:
The size of the input 2D-array will be between 3 and 1000.

Every integer represented in the 2D-array will be between 1 and N, where N is the size of the input array.

Update (2017-09-26):
We have overhauled the problem description + test cases and specified clearly the graph is an undirected graph. For the directed graph follow up please see Redundant Connection II). We apologize for any inconvenience caused.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In this problem, a rooted tree is a directed graph such that, there is exactly one node (the root) for which all other nodes are descendants of this node, plus every node has exactly one parent, except for the root node which has no parents.

The given input is a directed graph that started as a rooted tree with `n` nodes (with distinct values from `1` to `n`), with one additional directed edge added. The added edge has two different vertices chosen from `1` to `n`, and was not an edge that already existed.

The resulting graph is given as a 2D-array of `edges`. Each element of `edges` is a pair `[ui, vi]` that represents a directed edge connecting nodes `ui` and `vi`, where `ui` is a parent of child `vi`.

Return an edge that can be removed so that the resulting graph is a rooted tree of `n` nodes. If there are multiple answers, return the answer that occurs last in the given 2D-array.


Example 1:
Input: edges = [[1,2],[1,3],[2,3]]
Output: [2,3]

Example 2:
Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]
Output: [4,1]

Constraints:
`n == edges.length`
`3 <= n <= 1000`
`edges[i].length == 2`
`1 <= ui, vi <= n`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `a` and `b`, return the minimum number of times you should repeat string `a` so that string `b` is a substring of it. If it is impossible for `b`​​​​​​ to be a substring of `a` after repeating it, return `-1`.

Notice: string `""abc""` repeated 0 times is `""""`,  repeated 1 time is `""abc""` and repeated 2 times is `""abcabc""`.


Example 1:
Input: a = ""abcd"", b = ""cdabcdab""
Output: 3
Explanation: We return 3 because by repeating a three times ""abcdabcdabcd"", b is a substring of it.


Example 2:
Input: a = ""a"", b = ""aa""
Output: 2

Example 3:
Input: a = ""a"", b = ""a""
Output: 1

Example 4:
Input: a = ""abc"", b = ""wxyz""
Output: -1

Constraints:
`1 <= a.length <= 104`
`1 <= b.length <= 104`
`a` and `b` consist of lower-case English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [5,4,5,1,1,5]
Output: 2

Example 2:
Input: root = [1,4,5,4,4,5]
Output: 2

Constraints:
The number of nodes in the tree is in the range `[0, 104]`.

`-1000 <= Node.val <= 1000`
The depth of the tree will not exceed `1000`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an `N`x`N` chessboard, a knight starts at the `r`-th row and `c`-th column and attempts to make exactly `K` moves. The rows and columns are 0 indexed, so the top-left square is `(0, 0)`, and the bottom-right square is `(N-1, N-1)`.

A chess knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

Each time the knight is to move, it chooses one of eight possible moves uniformly at random (even if the piece would go off the chessboard) and moves there.

The knight continues moving until it has made exactly `K` moves or has moved off the chessboard. Return the probability that the knight remains on the board after it has stopped moving.


Example:
Input: 3, 2, 0, 0
Output: 0.0625
Explanation: There are two moves (to (1,2), (2,1)) that will keep the knight on the board.

From each of those positions, there are also two moves that will keep the knight on the board.

The total probability the knight stays on the board is 0.0625.

Note:
`N` will be between 1 and 25.

`K` will be between 0 and 100.

The knight always initially starts on the board.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a given array `nums` of positive integers, find three non-overlapping subarrays with maximum sum.

Each subarray will be of size `k`, and we want to maximize the sum of all `3*k` entries.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.


Example:
Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: Subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].

We could have also taken [2, 1], but an answer of [1, 3, 5] would be lexicographically larger.

Note:
`nums.length` will be between 1 and 20000.

`nums[i]` will be between 1 and 65535.

`k` will be between 1 and floor(nums.length / 3).",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a data structure of employee information, which includes the employee's unique id, their importance value and their direct subordinates' id.

For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. They have importance value 15, 10 and 5, respectively. Then employee 1 has a data structure like [1, 15, [2]], and employee 2 has [2, 10, [3]], and employee 3 has [3, 5, []]. Note that although employee 3 is also a subordinate of employee 1, the relationship is not direct.

Now given the employee information of a company, and an employee id, you need to return the total importance value of this employee and all their subordinates.


Example 1:
Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
Output: 11
Explanation:
Employee 1 has importance value 5, and he has two direct subordinates: employee 2 and employee 3. They both have importance value 3. So the total importance value of employee 1 is 5 + 3 + 3 = 11.

Note:
One employee has at most one direct leader and may have several subordinates.

The maximum number of employees won't exceed 2000.",0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given N different types of stickers.  Each sticker has a lowercase English word on it.

You would like to spell out the given `target` string by cutting individual letters from your collection of stickers and rearranging them.

You can use each sticker more than once if you want, and you have infinite quantities of each sticker.

What is the minimum number of stickers that you need to spell out the `target`?  If the task is impossible, return -1.


Example 1:
Input:[""with"", ""example"", ""science""], ""thehat""
Output:3
Explanation:We can use 2 ""with"" stickers, and 1 ""example"" sticker.

After cutting and rearrange the letters of those stickers, we can form the target ""thehat"".

Also, this is the minimum number of stickers necessary to form the target string.


Example 2:
Input:[""notice"", ""possible""], ""basicbasic""
Output:-1
Explanation:We can't form the target ""basicbasic"" from cutting letters from the given stickers.

Note:
`stickers` has length in the range `[1, 50]`.

`stickers` consists of lowercase English words (without apostrophes).

`target` has length in the range `[1, 15]`, and consists of lowercase English letters.

In all test cases, all words were chosen randomly from the 1000 most common US English words, and the target was chosen as a concatenation of two random words.

The time limit may be more challenging than usual.  It is expected that a 50 sticker test case can be solved within 35ms on average.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty list of words, return the k most frequent elements.

Your answer should be sorted by frequency from highest to lowest. If two words have the same frequency, then the word with the lower alphabetical order comes first.


Example 1:
Input: [""i"", ""love"", ""leetcode"", ""i"", ""love"", ""coding""], k = 2
Output: [""i"", ""love""]
Explanation: ""i"" and ""love"" are the two most frequent words.

    Note that ""i"" comes before ""love"" due to a lower alphabetical order.


Example 2:
Input: [""the"", ""day"", ""is"", ""sunny"", ""the"", ""the"", ""the"", ""sunny"", ""is"", ""is""], k = 4
Output: [""the"", ""is"", ""sunny"", ""day""]
Explanation: ""the"", ""is"", ""sunny"" and ""day"" are the four most frequent words,
    with the number of occurrence being 4, 3, 2 and 1 respectively.

Note:
You may assume k is always valid, 1 ≤ k ≤ number of unique elements.

Input words contain only lowercase letters.
Follow up:
Try to solve it in O(n log k) time and O(n) extra space.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer, check whether it has alternating bits: namely, if two adjacent bits will always have different values.


Example 1:
Input: n = 5
Output: true
Explanation: The binary representation of 5 is: 101

Example 2:
Input: n = 7
Output: false
Explanation: The binary representation of 7 is: 111.


Example 3:
Input: n = 11
Output: false
Explanation: The binary representation of 11 is: 1011.


Example 4:
Input: n = 10
Output: true
Explanation: The binary representation of 10 is: 1010.


Example 5:
Input: n = 3
Output: false

Constraints:
`1 <= n <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.

Count the number of distinct islands.  An island is considered to be the same as another if and only if one island can be translated (and not rotated or reflected) to equal the other.


Example 1:
11000
11000
00011
00011
Given the above grid map, return `1`.


Example 2:
11011
10000
00001
11011
Given the above grid map, return `3`.

Notice that:
11
1
and
 1
11
are considered different island shapes, because we do not consider reflection / rotation.

Note:
The length of each dimension in the given `grid` does not exceed 50.",0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.) You may assume all four edges of the grid are surrounded by water.

Find the maximum area of an island in the given 2D array. (If there is no island, the maximum area is 0.)

Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return `6`. Note the answer is not 11, because the island must be connected 4-directionally.


Example 2:
[[0,0,0,0,0,0,0,0]]
Given the above grid, return `0`.

Note: The length of each dimension in the given `grid` does not exceed 50.",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Give a string `s`, count the number of non-empty (contiguous) substrings that have the same number of 0's and 1's, and all the 0's and all the 1's in these substrings are grouped consecutively. 
Substrings that occur multiple times are counted the number of times they occur.


Example 1:
Input: ""00110011""
Output: 6
Explanation: There are 6 substrings that have equal number of consecutive 1's and 0's: ""0011"", ""01"", ""1100"", ""10"", ""0011"", and ""01"".

Notice that some of these substrings repeat and are counted the number of times they occur.

Also, ""00110011"" is not a valid substring because all the 0's (and 1's) are not grouped together.


Example 2:
Input: ""10101""
Output: 4
Explanation: There are 4 substrings: ""10"", ""01"", ""10"", ""01"" that have equal number of consecutive 1's and 0's.

Note:
`s.length` will be between 1 and 50,000.

`s` will only consist of ""0"" or ""1"" characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array of non-negative integers `nums`, the degree of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.


Example 1:
Input: nums = [1,2,2,3,1]
Output: 2
Explanation: 
The input array has a degree of 2 because both elements 1 and 2 appear twice.

Of the subarrays that have the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
The shortest length is 2. So return 2.


Example 2:
Input: nums = [1,2,2,3,1,4,2]
Output: 6
Explanation: 
The degree is 3 because the element 2 is repeated 3 times.

So [2,2,3,1,4,2] is the shortest subarray, therefore returning 6.


Constraints:
`nums.length` will be between 1 and 50,000.

`nums[i]` will be an integer between 0 and 49,999.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into `k` non-empty subsets whose sums are all equal.


Example 1:
Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
Output: True
Explanation: It's possible to divide it into 4 subsets (5), (1, 4), (2,3), (2,3) with equal sums.

Note:
`1 <= k <= len(nums) <= 16`.

`0 < nums[i] < 10000`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an infinite number line (x-axis), we drop given squares in the order they are given.

The `i`-th square dropped (`positions[i] = (left, side_length)`) is a square with the left-most point being `positions[i][0]` and sidelength `positions[i][1]`.

The square is dropped with the bottom edge parallel to the number line, and from a higher height than all currently landed squares. We wait for each square to stick before dropping the next.

The squares are infinitely sticky on their bottom edge, and will remain fixed to any positive length surface they touch (either the number line or another square). Squares dropped adjacent to each other will not stick together prematurely.

Return a list `ans` of heights. Each height `ans[i]` represents the current highest height of any square we have dropped, after dropping squares represented by `positions[0], positions[1], ..., positions[i]`.


Example 1:
Input: [[1, 2], [2, 3], [6, 1]]
Output: [2, 5, 5]
Explanation:
After the first drop of `positions[0] = [1, 2]: _aa _aa ------- `The maximum height of any square is 2.

After the second drop of `positions[1] = [2, 3]: __aaa __aaa __aaa _aa__ _aa__ -------------- `The maximum height of any square is 5. The larger square stays on top of the smaller square despite where its center of gravity is, because squares are infinitely sticky on their bottom edge.

After the third drop of `positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -------------- `The maximum height of any square is still 5. Thus, we return an answer of `[2, 5, 5]`.


Example 2:
Input: [[100, 100], [200, 100]]
Output: [100, 100]
Explanation: Adjacent squares don't get stuck prematurely - only their bottom edge can stick to surfaces.

Note:
`1 <= positions.length <= 1000`.

`1 <= positions[i][0] <= 10^8`.

`1 <= positions[i][1] <= 10^6`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` of a binary search tree (BST) and an integer `val`.

Find the node in the BST that the node's value equals `val` and return the subtree rooted with that node. If such a node does not exist, return `null`.


Example 1:
Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

Example 2:
Input: root = [4,2,7,1,3], val = 5
Output: []

Constraints:
The number of nodes in the tree is in the range `[1, 5000]`.

`1 <= Node.val <= 107`
`root` is a binary search tree.

`1 <= val <= 107`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` node of a binary search tree (BST) and a `value` to insert into the tree. Return the root node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.

Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.


Example 1:
Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
Explanation: Another accepted tree is:

Example 2:
Input: root = [40,20,60,10,30,50,70], val = 25
Output: [40,20,60,10,30,50,70,null,null,25]

Example 3:
Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
Output: [4,2,7,1,3,5]

Constraints:
The number of nodes in the tree will be in the range `[0, 104]`.

`-108 <= Node.val <= 108`
All the values `Node.val` are unique.

`-108 <= val <= 108`
It's guaranteed that `val` does not exist in the original BST.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array sorted in ascending order, write a function to search `target` in `nums`.  If `target` exists, then return its index, otherwise return `-1`. However, the array size is unknown to you. You may only access the array using an `ArrayReader` interface, where `ArrayReader.get(k)` returns the element of the array at index `k` (0-indexed).

You may assume all integers in the array are less than `10000`, and if you access the array out of bounds, `ArrayReader.get` will return `2147483647`.


Example 1:
Input: `array` = [-1,0,3,5,9,12], `target` = 9
Output: 4
Explanation: 9 exists in `nums` and its index is 4

Example 2:
Input: `array` = [-1,0,3,5,9,12], `target` = 2
Output: -1
Explanation: 2 does not exist in `nums` so return -1

Constraints:
You may assume that all elements in the array are unique.

The value of each element in the array will be in the range `[-9999, 9999]`.

The length of the array will be in the range `[1, 10^4]`.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a class to find the `kth` largest element in a stream. Note that it is the `kth` largest element in the sorted order, not the `kth` distinct element.

Implement `KthLargest` class:
`KthLargest(int k, int[] nums)` Initializes the object with the integer `k` and the stream of integers `nums`.

`int add(int val)` Returns the element representing the `kth` largest element in the stream.


Example 1:
Input
[""KthLargest"", ""add"", ""add"", ""add"", ""add"", ""add""]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
Output
[null, 4, 5, 5, 8, 8]
Explanation
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3);   // return 4
kthLargest.add(5);   // return 5
kthLargest.add(10);  // return 5
kthLargest.add(9);   // return 8
kthLargest.add(4);   // return 8

Constraints:
`1 <= k <= 104`
`0 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`-104 <= val <= 104`
At most `104` calls will be made to `add`.

It is guaranteed that there will be at least `k` elements in the array when you search for the `kth` element.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` which is sorted in ascending order, and an integer `target`, write a function to search `target` in `nums`. If `target` exists, then return its index. Otherwise, return `-1`.


Example 1:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums and its index is 4

Example 2:
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums so return -1

Constraints:
`1 <= nums.length <= 104`
`-9999 <= nums[i], target <= 9999`
All the integers in `nums` are unique.

`nums` is sorted in an ascending order.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a HashSet without using any built-in hash table libraries.

Implement `MyHashSet` class:
`void add(key)` Inserts the value `key` into the HashSet.

`bool contains(key)` Returns whether the value `key` exists in the HashSet or not.

`void remove(key)` Removes the value `key` in the HashSet. If `key` does not exist in the HashSet, do nothing.


Example 1:
Input
[""MyHashSet"", ""add"", ""add"", ""contains"", ""contains"", ""add"", ""contains"", ""remove"", ""contains""]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
Output
[null, null, null, true, false, null, true, null, false]
Explanation
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1);      // set = [1]
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(1); // return True
myHashSet.contains(3); // return False, (not found)
myHashSet.add(2);      // set = [1, 2]
myHashSet.contains(2); // return True
myHashSet.remove(2);   // set = [1]
myHashSet.contains(2); // return False, (already removed)

Constraints:
`0 <= key <= 106`
At most `104` calls will be made to `add`, `remove`, and `contains`.

Follow up: Could you solve the problem without using the built-in HashSet library?",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a HashMap without using any built-in hash table libraries.

Implement the `MyHashMap` class:
`MyHashMap()` initializes the object with an empty map.

`void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.

`int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map contains no mapping for the `key`.

`void remove(key)` removes the `key` and its corresponding `value` if the map contains the mapping for the `key`.


Example 1:
Input
[""MyHashMap"", ""put"", ""put"", ""get"", ""get"", ""put"", ""get"", ""remove"", ""get""]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
Output
[null, null, null, 1, -1, null, 1, null, -1]
Explanation
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // The map is now [[1,1]]
myHashMap.put(2, 2); // The map is now [[1,1], [2,2]]
myHashMap.get(1);    // return 1, The map is now [[1,1], [2,2]]
myHashMap.get(3);    // return -1 (i.e., not found), The map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // The map is now [[1,1], [2,1]] (i.e., update the existing value)
myHashMap.get(2);    // return 1, The map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the mapping for 2, The map is now [[1,1]]
myHashMap.get(2);    // return -1 (i.e., not found), The map is now [[1,1]]

Constraints:
`0 <= key, value <= 106`
At most `104` calls will be made to `put`, `get`, and `remove`.

Follow up: Please do not use the built-in HashMap library.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design your implementation of the linked list. You can choose to use a singly or doubly linked list.

A node in a singly linked list should have two attributes: `val` and `next`. `val` is the value of the current node, and `next` is a pointer/reference to the next node.

If you want to use the doubly linked list, you will need one more attribute `prev` to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.

Implement the `MyLinkedList` class:
`MyLinkedList()` Initializes the `MyLinkedList` object.

`int get(int index)` Get the value of the `indexth` node in the linked list. If the index is invalid, return `-1`.

`void addAtHead(int val)` Add a node of value `val` before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.

`void addAtTail(int val)` Append a node of value `val` as the last element of the linked list.

`void addAtIndex(int index, int val)` Add a node of value `val` before the `indexth` node in the linked list. If `index` equals the length of the linked list, the node will be appended to the end of the linked list. If `index` is greater than the length, the node will not be inserted.

`void deleteAtIndex(int index)` Delete the `indexth` node in the linked list, if the index is valid.


Example 1:
Input
[""MyLinkedList"", ""addAtHead"", ""addAtTail"", ""addAtIndex"", ""get"", ""deleteAtIndex"", ""get""]
[[], [1], [3], [1, 2], [1], [1], [1]]
Output
[null, null, null, null, 2, null, 3]
Explanation
MyLinkedList myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(1);
myLinkedList.addAtTail(3);
myLinkedList.addAtIndex(1, 2);    // linked list becomes 1->2->3
myLinkedList.get(1);              // return 2
myLinkedList.deleteAtIndex(1);    // now the linked list is 1->3
myLinkedList.get(1);              // return 3

Constraints:
`0 <= index, val <= 1000`
Please do not use the built-in LinkedList library.

At most `2000` calls will be made to `get`, `addAtHead`, `addAtTail`, `addAtIndex` and `deleteAtIndex`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a node from a Circular Linked List which is sorted in ascending order, write a function to insert a value `insertVal` into the list such that it remains a sorted circular list. The given node can be a reference to any single node in the list, and may not be necessarily the smallest value in the circular list.

If there are multiple suitable places for insertion, you may choose any place to insert the new value. After the insertion, the circular list should remain sorted.

If the list is empty (i.e., given node is `null`), you should create a new single circular list and return the reference to that single node. Otherwise, you should return the original given node.


Example 1:
Input: head = [3,4,1], insertVal = 2
Output: [3,4,1,2]
Explanation: In the figure above, there is a sorted circular list of three elements. You are given a reference to the node with value 3, and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, and we should still return node 3.


Example 2:
Input: head = [], insertVal = 1
Output: [1]
Explanation: The list is empty (given head is `null`). We create a new single circular list and return the reference to that single node.


Example 3:
Input: head = [1], insertVal = 0
Output: [1,0]

Constraints:
`0 <= Number of Nodes <= 5 * 10^4`
`-10^6 <= Node.val <= 10^6`
`-10^6 <= insertVal <= 10^6`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement function ToLowerCase() that has a string parameter str, and returns the same string in lowercase.


Example 1:
Input: ""Hello""
Output: ""hello""

Example 2:
Input: ""here""
Output: ""here""

Example 3:
Input: ""LOVELY""
Output: ""lovely""",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a blacklist `B` containing unique integers from `[0, N)`, write a function to return a uniform random integer from `[0, N)` which is NOT in `B`.

Optimize it such that it minimizes the call to system’s `Math.random()`.

Note:
`1 <= N <= 1000000000`
`0 <= B.length < min(100000, N)`
`[0, N)` does NOT include N. See interval notation.


Example 1:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[1,[]],[],[],[]]
Output: [null,0,0,0]

Example 2:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[2,[]],[],[],[]]
Output: [null,1,1,1]

Example 3:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[3,[1]],[],[],[]]
Output: [null,0,0,2]

Example 4:
Input: 
[""Solution"",""pick"",""pick"",""pick""]
[[4,[2]],[],[],[]]
Output: [null,1,3,1]
Explanation of Input Syntax:
The input is two lists: the subroutines called and their arguments. `Solution`'s constructor has two arguments, `N` and the blacklist `B`. `pick` has no arguments. Arguments are always wrapped with a list, even if there aren't any.",0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"Given a non-empty 2D array `grid` of 0's and 1's, an island is a group of `1`'s (representing land) connected 4-directionally (horizontal or vertical.)  You may assume all four edges of the grid are surrounded by water.

Count the number of distinct islands.  An island is considered to be the same as another if they have the same shape, or have the same shape after rotation (90, 180, or 270 degrees only) or reflection (left/right direction or up/down direction).


Example 1:
11000
10000
00001
00011
Given the above grid map, return `1`.

Notice that:
11
1
and
 1
11
are considered same island shapes. Because if we make a 180 degrees clockwise rotation on the first island, then two islands will have the same shapes.


Example 2:
11100
10001
01001
01110
Given the above grid map, return `2`.

Here are the two distinct islands:
111
1
and
1
1
Notice that:
111
1
and
1
111
are considered same island shapes. Because if we flip the first array in the up/down direction, then they have the same shapes.

Note:
The length of each dimension in the given `grid` does not exceed 50.",0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s1, s2`, find the lowest ASCII sum of deleted characters to make two strings equal.


Example 1:
Input: s1 = ""sea"", s2 = ""eat""
Output: 231
Explanation: Deleting ""s"" from ""sea"" adds the ASCII value of ""s"" (115) to the sum.

Deleting ""t"" from ""eat"" adds 116 to the sum.

At the end, both strings are equal, and 115 + 116 = 231 is the minimum sum possible to achieve this.


Example 2:
Input: s1 = ""delete"", s2 = ""leet""
Output: 403
Explanation: Deleting ""dee"" from ""delete"" to turn the string into ""let"",
adds 100[d]+101[e]+101[e] to the sum.  Deleting ""e"" from ""leet"" adds 101[e] to the sum.

At the end, both strings are equal to ""let"", and the answer is 100+101+101+101 = 403.

If instead we turned both strings into ""lee"" or ""eet"", we would get answers of 433 or 417, which are higher.

Note:
`0 < s1.length, s2.length <= 1000`.

All elements of each string will have an ASCII value in `[97, 122]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your are given an array of positive integers `nums`.

Count and print the number of (contiguous) subarrays where the product of all the elements in the subarray is less than `k`.


Example 1:
Input: nums = [10, 5, 2, 6], k = 100
Output: 8
Explanation: The 8 subarrays that have product less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].

Note that [10, 5, 2] is not included as the product of 100 is not strictly less than k.

Note:
`0 < nums.length <= 50000`.

`0 < nums[i] < 1000`.

`0 <= k < 10^6`.",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day, and an integer `fee` representing a transaction fee.

Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.

Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).


Example 1:
Input: prices = [1,3,2,8,4,9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
- Buying at prices[0] = 1
- Selling at prices[3] = 8
- Buying at prices[4] = 4
- Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.


Example 2:
Input: prices = [1,3,7,5,10,3], fee = 3
Output: 6

Constraints:
`1 <= prices.length <= 5 * 104`
`1 <= prices[i] < 5 * 104`
`0 <= fee < 5 * 104`",1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A Range Module is a module that tracks ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.

`addRange(int left, int right)` Adds the half-open interval `[left, right)`, tracking every real number in that interval.  Adding an interval that partially overlaps with currently tracked numbers should add any numbers in the interval `[left, right)` that are not already tracked.

`queryRange(int left, int right)` Returns true if and only if every real number in the interval `[left, right)`
 is currently being tracked.

`removeRange(int left, int right)` Stops tracking every real number currently being tracked in the interval `[left, right)`.


Example 1:
addRange(10, 20): null
removeRange(14, 16): null
queryRange(10, 14): true (Every number in [10, 14) is being tracked)
queryRange(13, 15): false (Numbers like 14, 14.03, 14.17 in [13, 15) are not being tracked)
queryRange(16, 17): true (The number 16 in [16, 17) is still being tracked, despite the remove operation)
Note:
A half open interval `[left, right)` denotes all real numbers `left <= x < right`.

`0 < left < right < 10^9` in all calls to `addRange, queryRange, removeRange`.

The total number of calls to `addRange` in a single test case is at most `1000`.

The total number of calls to `queryRange` in a single test case is at most `5000`.

The total number of calls to `removeRange` in a single test case is at most `1000`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a max stack data structure that supports the stack operations and supports finding the stack's maximum element.

Implement the `MaxStack` class:
`MaxStack()` Initializes the stack object.

`void push(int x)` Pushes element `x` onto the stack.

`int pop()` Removes the element on top of the stack and returns it.

`int top()` Gets the element on the top of the stack without removing it.

`int peekMax()` Retrieves the maximum element in the stack without removing it.

`int popMax()` Retrieves the maximum element in the stack and removes it. If there is more than one maximum element, only remove the top-most one.


Example 1:
Input
[""MaxStack"", ""push"", ""push"", ""push"", ""top"", ""popMax"", ""top"", ""peekMax"", ""pop"", ""top""]
[[], [5], [1], [5], [], [], [], [], [], []]
Output
[null, null, null, null, 5, 5, 1, 5, 1, 5]
Explanation
MaxStack stk = new MaxStack();
stk.push(5);   // [5] the top of the stack and the maximum number is 5.

stk.push(1);   // [5, 1] the top of the stack is 1, but the maximum is 5.

stk.push(5);   // [5, 1, 5] the top of the stack is 5, which is also the maximum, because it is the top most one.

stk.top();     // return 5, [5, 1, 5] the stack did not change.

stk.popMax();  // return 5, [5, 1] the stack is changed now, and the top is different from the max.

stk.top();     // return 1, [5, 1] the stack did not change.

stk.peekMax(); // return 5, [5, 1] the stack did not change.

stk.pop();     // return 1, [5] the top of the stack and the max element is now 5.

stk.top();     // return 5, [5] the stack did not change.


Constraints:
`-107 <= x <= 107`
At most `104` calls will be made to `push`, `pop`, `top`, `peekMax`, and `popMax`.

There will be at least one element in the stack when `pop`, `top`, `peekMax`, or `popMax` is called.

Follow up: Could you come up with a solution that supports `O(1)` for each `top` call and `O(logn)` for each other call?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two special characters. The first character can be represented by one bit `0`. The second character can be represented by two bits (`10` or `11`).  
Now given a string represented by several bits. Return whether the last character must be a one-bit character or not. The given string will always end with a zero.


Example 1:
Input: 
bits = [1, 0, 0]
Output: True
Explanation: 
The only way to decode it is two-bit character and one-bit character. So the last character is one-bit character.


Example 2:
Input: 
bits = [1, 1, 1, 0]
Output: False
Explanation: 
The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.

Note:
`1 <= len(bits) <= 1000`.

`bits[i]` is always `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `A` and `B`, return the maximum length of an subarray that appears in both arrays.


Example 1:
Input:
A: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
Explanation: 
The repeated subarray with maximum length is [3, 2, 1].

Note:
1 <= len(A), len(B) <= 1000
0 <= A[i], B[i] < 100",1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array, return the k-th smallest distance among all the pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B. 

Example 1:
Input:
nums = [1,3,1]
k = 1
Output: 0 
Explanation:
Here are all the pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the 1st smallest distance pair is (1,1), and its distance is 0.

Note:
`2 <= len(nums) <= 10000`.

`0 <= nums[i] < 1000000`.

`1 <= k <= len(nums) * (len(nums) - 1) / 2`.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `words` representing an English Dictionary, return the longest word in `words` that can be built one character at a time by other words in `words`.

If there is more than one possible answer, return the longest word with the smallest lexicographical order. If there is no answer, return the empty string.


Example 1:
Input: words = [""w"",""wo"",""wor"",""worl"",""world""]
Output: ""world""
Explanation: The word ""world"" can be built one character at a time by ""w"", ""wo"", ""wor"", and ""worl"".


Example 2:
Input: words = [""a"",""banana"",""app"",""appl"",""ap"",""apply"",""apple""]
Output: ""apple""
Explanation: Both ""apply"" and ""apple"" can be built from other words in the dictionary. However, ""apple"" is lexicographically smaller than ""apply"".


Constraints:
`1 <= words.length <= 1000`
`1 <= words[i].length <= 30`
`words[i]` consists of lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of `accounts` where each element `accounts[i]` is a list of strings, where the first element `accounts[i][0]` is a name, and the rest of the elements are emails representing emails of the account.

Now, we would like to merge these accounts. Two accounts definitely belong to the same person if there is some common email to both accounts. Note that even if two accounts have the same name, they may belong to different people as people could have the same name. A person can have any number of accounts initially, but all of their accounts definitely have the same name.

After merging the accounts, return the accounts in the following format: the first element of each account is the name, and the rest of the elements are emails in sorted order. The accounts themselves can be returned in any order.


Example 1:
Input: accounts = [[""John"",""johnsmith@mail.com"",""john_newyork@mail.com""],[""John"",""johnsmith@mail.com"",""john00@mail.com""],[""Mary"",""mary@mail.com""],[""John"",""johnnybravo@mail.com""]]
Output: [[""John"",""john00@mail.com"",""john_newyork@mail.com"",""johnsmith@mail.com""],[""Mary"",""mary@mail.com""],[""John"",""johnnybravo@mail.com""]]
Explanation:
The first and third John's are the same person as they have the common email ""johnsmith@mail.com"".

The second John and Mary are different people as none of their email addresses are used by other accounts.

We could return these lists in any order, for example the answer [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'], 
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.


Example 2:
Input: accounts = [[""Gabe"",""Gabe0@m.co"",""Gabe3@m.co"",""Gabe1@m.co""],[""Kevin"",""Kevin3@m.co"",""Kevin5@m.co"",""Kevin0@m.co""],[""Ethan"",""Ethan5@m.co"",""Ethan4@m.co"",""Ethan0@m.co""],[""Hanzo"",""Hanzo3@m.co"",""Hanzo1@m.co"",""Hanzo0@m.co""],[""Fern"",""Fern5@m.co"",""Fern1@m.co"",""Fern0@m.co""]]
Output: [[""Ethan"",""Ethan0@m.co"",""Ethan4@m.co"",""Ethan5@m.co""],[""Gabe"",""Gabe0@m.co"",""Gabe1@m.co"",""Gabe3@m.co""],[""Hanzo"",""Hanzo0@m.co"",""Hanzo1@m.co"",""Hanzo3@m.co""],[""Kevin"",""Kevin0@m.co"",""Kevin3@m.co"",""Kevin5@m.co""],[""Fern"",""Fern0@m.co"",""Fern1@m.co"",""Fern5@m.co""]]

Constraints:
`1 <= accounts.length <= 1000`
`2 <= accounts[i].length <= 10`
`1 <= accounts[i][j] <= 30`
`accounts[i][0]` consists of English letters.

`accounts[i][j] (for j > 0)` is a valid email.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a C++ program, remove comments from it. The program `source` is an array where `source[i]` is the `i`-th line of the source code.  This represents the result of splitting the original source code string by the newline character `\n`.

In C++, there are two types of comments, line comments, and block comments.

The string `//` denotes a line comment, which represents that it and rest of the characters to the right of it in the same line should be ignored.

The string `/*` denotes a block comment, which represents that all characters until the next (non-overlapping) occurrence of `*/` should be ignored.  (Here, occurrences happen in reading order: line by line from left to right.)  To be clear, the string `/*/` does not yet end the block comment, as the ending would be overlapping the beginning.

The first effective comment takes precedence over others: if the string `//` occurs in a block comment, it is ignored. Similarly, if the string `/*` occurs in a line or block comment, it is also ignored.

If a certain line of code is empty after removing comments, you must not output that line: each string in the answer list will be non-empty.

There will be no control characters, single quote, or double quote characters.  For example, `source = ""string s = ""/* Not a comment. */"";""` will not be a test case.  (Also, nothing else such as defines or macros will interfere with the comments.)
It is guaranteed that every open block comment will eventually be closed, so `/*` outside of a line or block comment always starts a new comment.

Finally, implicit newline characters can be deleted by block comments.  Please see the examples below for details.

After removing the comments from the source code, return the source code in the same format.


Example 1:
Input: 
source = [""/*Test program */"", ""int main()"", ""{ "", ""  // variable declaration "", ""int a, b, c;"", ""/* This is a test"", ""   multiline  "", ""   comment for "", ""   testing */"", ""a = b + c;"", ""}""]
The line by line code is visualized as below:
/*Test program */
int main()
{ 
  // variable declaration 
int a, b, c;
/* This is a test
   multiline  
   comment for 
   testing */
a = b + c;
}
Output: [""int main()"",""{ "",""  "",""int a, b, c;"",""a = b + c;"",""}""]
The line by line code is visualized as below:
int main()
{ 
  
int a, b, c;
a = b + c;
}
Explanation: 
The string `/*` denotes a block comment, including line 1 and lines 6-9. The string `//` denotes line 4 as comments.


Example 2:
Input: 
source = [""a/*comment"", ""line"", ""more_comment*/b""]
Output: [""ab""]
Explanation: The original source string is ""a/*comment\nline\nmore_comment*/b"", where we have bolded the newline characters.  After deletion, the implicit newline characters are deleted, leaving the string ""ab"", which when delimited by newline characters becomes [""ab""].

Note:
The length of `source` is in the range `[1, 100]`.

The length of `source[i]` is in the range `[0, 80]`.

Every open block comment is eventually closed.

There are no single-quote, double-quote, or control characters in the source code.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This question is about implementing a basic elimination algorithm for Candy Crush.

Given a 2D integer array `board` representing the grid of candy, different positive integers `board[i][j]` represent different types of candies. A value of `board[i][j] = 0` represents that the cell at position `(i, j)` is empty. The given board represents the state of the game following the player's move. Now, you need to restore the board to a stable state by crushing candies according to the following rules:
If three or more candies of the same type are adjacent vertically or horizontally, ""crush"" them all at the same time - these positions become empty.

After crushing all candies simultaneously, if an empty space on the board has candies on top of itself, then these candies will drop until they hit a candy or bottom at the same time. (No new candies will drop outside the top boundary.)
After the above steps, there may exist more candies that can be crushed. If so, you need to repeat the above steps.

If there does not exist more candies that can be crushed (ie. the board is stable), then return the current board.

You need to perform the above rules until the board becomes stable, then return the current board.


Example:
Input:
board = 
[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,2,713,714],[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]
Output:
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210,0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]
Explanation: 
Note:
The length of `board` will be in the range [3, 50].

The length of `board[i]` will be in the range [3, 50].

Each `board[i][j]` will initially start as an integer in the range [1, 2000].",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums`, calculate the pivot index of this array.

The pivot index is the index where the sum of all the numbers strictly to the left of the index is equal to the sum of all the numbers strictly to the index's right.

If the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.

Return the leftmost pivot index. If no such index exists, return -1.


Example 1:
Input: nums = [1,7,3,6,5,6]
Output: 3
Explanation:
The pivot index is 3.

Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11

Example 2:
Input: nums = [1,2,3]
Output: -1
Explanation:
There is no index that satisfies the conditions in the problem statement.


Example 3:
Input: nums = [2,1,-1]
Output: 0
Explanation:
The pivot index is 0.

Left sum = 0 (no elements to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0

Constraints:
`1 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a (singly) linked list with head node `root`, write a function to split the linked list into `k` consecutive linked list ""parts"".

The length of each part should be as equal as possible: no two parts should have a size differing by more than 1.  This may lead to some parts being null.

The parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size greater than or equal parts occurring later.

Return a List of ListNode's representing the linked list parts that are formed.


Examples
1->2->3->4, k = 5 // 5 equal parts
[ [1], 
[2],
[3],
[4],
null ]

Example 1:
Input: 
root = [1, 2, 3], k = 5
Output: [[1],[2],[3],[],[]]
Explanation:
The input and each element of the output are ListNodes, not arrays.

For example, the input root has root.val = 1, root.next.val = 2, \root.next.next.val = 3, and root.next.next.next = null.

The first element output[0] has output[0].val = 1, output[0].next = null.

The last element output[4] is null, but it's string representation as a ListNode is [].


Example 2:
Input: 
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
Explanation:
The input has been split into consecutive parts with size difference at most 1, and earlier parts are a larger size than the later parts.

Note:
The length of `root` will be in the range `[0, 1000]`.

Each value of a node in the input will be an integer in the range `[0, 999]`.

`k` will be an integer in the range `[1, 50]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a chemical `formula` (given as a string), return the count of each atom.

The atomic element always starts with an uppercase character, then zero or more lowercase letters, representing the name.

One or more digits representing that element's count may follow if the count is greater than 1. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is impossible.

Two formulas concatenated together to produce another formula. For example, H2O2He3Mg4 is also a formula.

A formula placed in parentheses, and a count (optionally added) is also a formula. For example, (H2O2) and (H2O2)3 are formulas.

Given a `formula`, return the count of all elements as a string in the following form: the first name (in sorted order), followed by its count (if that count is more than 1), followed by the second name (in sorted order), followed by its count (if that count is more than 1), and so on.


Example 1:
Input: formula = ""H2O""
Output: ""H2O""
Explanation: The count of elements are {'H': 2, 'O': 1}.


Example 2:
Input: formula = ""Mg(OH)2""
Output: ""H2MgO2""
Explanation: The count of elements are {'H': 2, 'Mg': 1, 'O': 2}.


Example 3:
Input: formula = ""K4(ON(SO3)2)2""
Output: ""K4N2O14S4""
Explanation: The count of elements are {'K': 4, 'N': 2, 'O': 14, 'S': 4}.


Example 4:
Input: formula = ""Be32""
Output: ""Be32""

Constraints:
`1 <= formula.length <= 1000`
`formula` consists of English letters, digits, `'('`, and `')'`.

`formula` is always valid.",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given strings `S` and `T`, find the minimum (contiguous) substring `W` of `S`, so that `T` is a subsequence of `W`.

If there is no such window in `S` that covers all characters in `T`, return the empty string `""""`. If there are multiple such minimum-length windows, return the one with the left-most starting index.


Example 1:
Input: 
S = ""abcdebdde"", T = ""bde""
Output: ""bcde""
Explanation: 
""bcde"" is the answer because it occurs before ""bdde"" which has the same length.

""deb"" is not a smaller window because the elements of T in the window must occur in order.

Note:
All the strings in the input will only contain lowercase letters.

The length of `S` will be in the range `[1, 20000]`.

The length of `T` will be in the range `[1, 100]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A self-dividing number is a number that is divisible by every digit it contains.

For example, 128 is a self-dividing number because `128 % 1 == 0`, `128 % 2 == 0`, and `128 % 8 == 0`.

Also, a self-dividing number is not allowed to contain the digit zero.

Given a lower and upper number bound, output a list of every possible self dividing number, including the bounds if possible.


Example 1:
Input: 
left = 1, right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
Note:
The boundaries of each input argument are `1 <= left <= right <= 10000`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a `MyCalendar` class to store your events. A new event can be added if adding the event will not cause a double booking.

Your class will have the method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.

A double booking happens when two events have some non-empty intersection (ie., there is some time that is common to both events.)
For each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a double booking. Otherwise, return `false` and do not add the event to the calendar.

Your class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`

Example 1:
MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(15, 25); // returns false
MyCalendar.book(20, 30); // returns true
Explanation: 
The first event can be booked.  The second can't because time 15 is already booked by another event.

The third event can be booked, as the first event takes every time less than 20, but not including 20.

Note:
The number of calls to `MyCalendar.book` per test case will be at most `1000`.

In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string S, find the number of different non-empty palindromic subsequences in S, and return that number modulo `10^9 + 7`.

A subsequence of a string S is obtained by deleting 0 or more characters from S.

A sequence is palindromic if it is equal to the sequence reversed.

Two sequences `A_1, A_2, ...` and `B_1, B_2, ...` are different if there is some `i` for which `A_i != B_i`.


Example 1:
Input: 
S = 'bccb'
Output: 6
Explanation: 
The 6 different non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.

Note that 'bcb' is counted only once, even though it occurs twice.


Example 2:
Input: 
S = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'
Output: 104860361
Explanation: 
There are 3104860382 different non-empty palindromic subsequences, which is 104860361 modulo 10^9 + 7.

Note:
The length of `S` will be in the range `[1, 1000]`.

Each character `S[i]` will be in the set `{'a', 'b', 'c', 'd'}`.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a `MyCalendarTwo` class to store your events. A new event can be added if adding the event will not cause a triple booking.

Your class will have one method, `book(int start, int end)`. Formally, this represents a booking on the half open interval `[start, end)`, the range of real numbers `x` such that `start <= x < end`.

A triple booking happens when three events have some non-empty intersection (ie., there is some time that is common to all 3 events.)
For each call to the method `MyCalendar.book`, return `true` if the event can be added to the calendar successfully without causing a triple booking. Otherwise, return `false` and do not add the event to the calendar.

Your class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`

Example 1:
MyCalendar();
MyCalendar.book(10, 20); // returns true
MyCalendar.book(50, 60); // returns true
MyCalendar.book(10, 40); // returns true
MyCalendar.book(5, 15); // returns false
MyCalendar.book(5, 10); // returns true
MyCalendar.book(25, 55); // returns true
Explanation: 
The first two events can be booked.  The third event can be double booked.

The fourth event (5, 15) can't be booked, because it would result in a triple booking.

The fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.

The sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;
the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.

Note:
The number of calls to `MyCalendar.book` per test case will be at most `1000`.

In calls to `MyCalendar.book(start, end)`, `start` and `end` are integers in the range `[0, 10^9]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A `k`-booking happens when `k` events have some non-empty intersection (i.e., there is some time that is common to all `k` events.)
You are given some events `[start, end)`, after each given event, return an integer `k` representing the maximum `k`-booking between all the previous events.

Implement the `MyCalendarThree` class:
`MyCalendarThree()` Initializes the object.

`int book(int start, int end)` Returns an integer `k` representing the largest integer such that there exists a `k`-booking in the calendar.


Example 1:
Input
[""MyCalendarThree"", ""book"", ""book"", ""book"", ""book"", ""book"", ""book""]
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]
Output
[null, 1, 1, 2, 3, 3, 3]
Explanation
MyCalendarThree myCalendarThree = new MyCalendarThree();
myCalendarThree.book(10, 20); // return 1, The first event can be booked and is disjoint, so the maximum k-booking is a 1-booking.

myCalendarThree.book(50, 60); // return 1, The second event can be booked and is disjoint, so the maximum k-booking is a 1-booking.

myCalendarThree.book(10, 40); // return 2, The third event [10, 40) intersects the first event, and the maximum k-booking is a 2-booking.

myCalendarThree.book(5, 15); // return 3, The remaining events cause the maximum K-booking to be only a 3-booking.

myCalendarThree.book(5, 10); // return 3
myCalendarThree.book(25, 55); // return 3

Constraints:
`0 <= start < end <= 109`
At most `400` calls will be made to `book`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An `image` is represented by a 2-D array of integers, each integer representing the pixel value of the image (from 0 to 65535).

Given a coordinate `(sr, sc)` representing the starting pixel (row and column) of the flood fill, and a pixel value `newColor`, ""flood fill"" the image.

To perform a ""flood fill"", consider the starting pixel, plus any pixels connected 4-directionally to the starting pixel of the same color as the starting pixel, plus any pixels connected 4-directionally to those pixels (also with the same color as the starting pixel), and so on.  Replace the color of all of the aforementioned pixels with the newColor.

At the end, return the modified image.


Example 1:
Input: 
image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newColor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
Explanation: 
From the center of the image (with position (sr, sc) = (1, 1)), all pixels connected 
by a path of the same color as the starting pixel are colored with the new color.

Note the bottom corner is not colored 2, because it is not 4-directionally connected
to the starting pixel.

Note:
The length of `image` and `image[0]` will be in the range `[1, 50]`.

The given starting pixel will satisfy `0 <= sr < image.length` and `0 <= sc < image[0].length`.

The value of each color in `image[i][j]` and `newColor` will be an integer in `[0, 65535]`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can represent a sentence as an array of words, for example, the sentence `""I am happy with leetcode""` can be represented as `arr = [""I"",""am"",happy"",""with"",""leetcode""]`.

Given two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.

Return `true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar.

Two sentences are similar if:
They have the same length (i.e. the same number of words)
`sentence1[i]` and `sentence2[i]` are similar.

Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar and the words `b` and `c` are similar, `a` and `c` are not necessarily similar.


Example 1:
Input: sentence1 = [""great"",""acting"",""skills""], sentence2 = [""fine"",""drama"",""talent""], similarPairs = [[""great"",""fine""],[""drama"",""acting""],[""skills"",""talent""]]
Output: true
Explanation: The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.


Example 2:
Input: sentence1 = [""great""], sentence2 = [""great""], similarPairs = []
Output: true
Explanation: A word is similar to itself.


Example 3:
Input: sentence1 = [""great""], sentence2 = [""doubleplus"",""good""], similarPairs = [[""great"",""doubleplus""]]
Output: false
Explanation: As they don't have the same length, we return false.


Constraints:
`1 <= sentence1.length, sentence2.length <= 1000`
`1 <= sentence1[i].length, sentence2[i].length <= 20`
`sentence1[i]` and `sentence2[i]` consist of lower-case and upper-case English letters.

`0 <= similarPairs.length <= 1000`
`similarPairs[i].length == 2`
`1 <= xi.length, yi.length <= 20`
`xi` and `yi` consist of lower-case and upper-case English letters.

All the pairs `(xi, yi)` are distinct.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given an array `asteroids` of integers representing asteroids in a row.

For each asteroid, the absolute value represents its size, and the sign represents its direction (positive meaning right, negative meaning left). Each asteroid moves at the same speed.

Find out the state of the asteroids after all collisions. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.


Example 1:
Input: asteroids = [5,10,-5]
Output: [5,10]
Explanation: The 10 and -5 collide resulting in 10. The 5 and 10 never collide.


Example 2:
Input: asteroids = [8,-8]
Output: []
Explanation: The 8 and -8 collide exploding each other.


Example 3:
Input: asteroids = [10,2,-5]
Output: [10]
Explanation: The 2 and -5 collide resulting in -5. The 10 and -5 collide resulting in 10.


Example 4:
Input: asteroids = [-2,-1,1,2]
Output: [-2,-1,1,2]
Explanation: The -2 and -1 are moving left, while the 1 and 2 are moving right. Asteroids moving the same direction never meet, so no asteroids will meet each other.


Constraints:
`2 <= asteroids.length <= 104`
`-1000 <= asteroids[i] <= 1000`
`asteroids[i] != 0`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `expression` representing a Lisp-like expression to return the integer value of.

The syntax for these expressions is given as follows.

An expression is either an integer, a let-expression, an add-expression, a mult-expression, or an assigned variable.  Expressions always evaluate to a single integer.

(An integer could be positive or negative.)
A let-expression takes the form `(let v1 e1 v2 e2 ... vn en expr)`, where `let` is always the string `""let""`, then there are 1 or more pairs of alternating variables and expressions, meaning that the first variable `v1` is assigned the value of the expression `e1`, the second variable `v2` is assigned the value of the expression `e2`, and so on sequentially; and then the value of this let-expression is the value of the expression `expr`.

An add-expression takes the form `(add e1 e2)` where `add` is always the string `""add""`, there are always two expressions `e1, e2`, and this expression evaluates to the addition of the evaluation of `e1` and the evaluation of `e2`.

A mult-expression takes the form `(mult e1 e2)` where `mult` is always the string `""mult""`, there are always two expressions `e1, e2`, and this expression evaluates to the multiplication of the evaluation of `e1` and the evaluation of `e2`.

For the purposes of this question, we will use a smaller subset of variable names.  A variable starts with a lowercase letter, then zero or more lowercase letters or digits.  Additionally for your convenience, the names ""add"", ""let"", or ""mult"" are protected and will never be used as variable names.

Finally, there is the concept of scope.  When an expression of a variable name is evaluated, within the context of that evaluation, the innermost scope (in terms of parentheses) is checked first for the value of that variable, and then outer scopes are checked sequentially.  It is guaranteed that every expression is legal.  Please see the examples for more details on scope.


Evaluation Examples:
Input: (add 1 2)
Output: 3
Input: (mult 3 (add 2 3))
Output: 15
Input: (let x 2 (mult x 5))
Output: 10
Input: (let x 2 (mult x (let x 3 y 4 (add x y))))
Output: 14
Explanation: In the expression (add x y), when checking for the value of the variable x,
we check from the innermost scope to the outermost in the context of the variable we are trying to evaluate.

Since x = 3 is found first, the value of x is 3.

Input: (let x 3 x 2 x)
Output: 2
Explanation: Assignment in let statements is processed sequentially.

Input: (let x 1 y 2 x (add x y) (add x y))
Output: 5
Explanation: The first (add x y) evaluates as 3, and is assigned to x.

The second (add x y) evaluates as 3+2 = 5.

Input: (let x 2 (add (let x 3 (let x 4 x)) x))
Output: 6
Explanation: Even though (let x 4 x) has a deeper scope, it is outside the context
of the final x in the add-expression.  That final x will equal 2.

Input: (let a1 3 b2 (add a1 1) b2) 
Output 4
Explanation: Variable names can contain digits after the first character.

Note:
The given string `expression` is well formatted: There are no leading or trailing spaces, there is only a single space separating different components of the string, and no space between adjacent parentheses.  The expression is guaranteed to be legal and evaluate to an integer.

The length of `expression` is at most 2000.  (It is also non-empty, as that would not be a legal expression.)
The answer and all intermediate calculations of that answer are guaranteed to fit in a 32-bit integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sentences `words1, words2` (each represented as an array of strings), and a list of similar word pairs `pairs`, determine if two sentences are similar.

For example, `words1 = [""great"", ""acting"", ""skills""]` and `words2 = [""fine"", ""drama"", ""talent""]` are similar, if the similar word pairs are `pairs = [[""great"", ""good""], [""fine"", ""good""], [""acting"",""drama""], [""skills"",""talent""]]`.

Note that the similarity relation is transitive. For example, if ""great"" and ""good"" are similar, and ""fine"" and ""good"" are similar, then ""great"" and ""fine"" are similar.

Similarity is also symmetric. For example, ""great"" and ""fine"" being similar is the same as ""fine"" and ""great"" being similar.

Also, a word is always similar with itself. For example, the sentences `words1 = [""great""], words2 = [""great""], pairs = []` are similar, even though there are no specified similar word pairs.

Finally, sentences can only be similar if they have the same number of words. So a sentence like `words1 = [""great""]` can never be similar to `words2 = [""doubleplus"",""good""]`.

Note:
The length of `words1` and `words2` will not exceed `1000`.

The length of `pairs` will not exceed `2000`.

The length of each `pairs[i]` will be `2`.

The length of each `words[i]` and `pairs[i][j]` will be in the range `[1, 20]`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer `N`, find the largest number that is less than or equal to `N` with monotone increasing digits.

(Recall that an integer has monotone increasing digits if and only if each pair of adjacent digits `x` and `y` satisfy `x <= y`.)

Example 1:
Input: N = 10
Output: 9

Example 2:
Input: N = 1234
Output: 1234

Example 3:
Input: N = 332
Output: 299
Note:
`N` is an integer in the range `[0, 10^9]`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of daily temperatures `T`, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature.  If there is no future day for which this is possible, put `0` instead.

For example, given the list of temperatures `T = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0]`.

Note:
The length of `temperatures` will be in the range `[1, 30000]`.

Each temperature will be an integer in the range `[30, 100]`.",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of integers, you can perform operations on the array.

In each operation, you pick any `nums[i]` and delete it to earn `nums[i]` points. After, you must delete every element equal to `nums[i] - 1` or `nums[i] + 1`.

You start with `0` points. Return the maximum number of points you can earn by applying such operations.


Example 1:
Input: nums = [3,4,2]
Output: 6
Explanation: Delete 4 to earn 4 points, consequently 3 is also deleted.

Then, delete 2 to earn 2 points.

6 total points are earned.


Example 2:
Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: Delete 3 to earn 3 points, deleting both 2's and the 4.

Then, delete 3 again to earn 3 points, and 3 again to earn 3 points.

9 total points are earned.


Constraints:
`1 <= nums.length <= 2 * 104`
`1 <= nums[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.

`0` means the cell is empty, so you can pass through,
`1` means the cell contains a cherry that you can pick up and pass through, or
`-1` means the cell contains a thorn that blocks your way.

Return the maximum number of cherries you can collect by following the rules below:
Starting at the position `(0, 0)` and reaching `(n - 1, n - 1)` by moving right or down through valid path cells (cells with value `0` or `1`).

After reaching `(n - 1, n - 1)`, returning to `(0, 0)` by moving left or up through valid path cells.

When passing through a path cell containing a cherry, you pick it up, and the cell becomes an empty cell `0`.

If there is no valid path between `(0, 0)` and `(n - 1, n - 1)`, then no cherries can be collected.


Example 1:
Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]
Output: 5
Explanation: The player started at (0, 0) and went down, down, right right to reach (2, 2).

4 cherries were picked up during this single trip, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].

Then, the player went left, up, up, left to return home, picking up one more cherry.

The total number of cherries picked up is 5, and this is the maximum possible.


Example 2:
Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
Output: 0

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 50`
`grid[i][j]` is `-1`, `0`, or `1`.

`grid[0][0] != -1`
`grid[n - 1][n - 1] != -1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree where every node has a unique value, and a target key `k`, find the value of the nearest leaf node to target `k` in the tree.

Here, nearest to a leaf means the least number of edges travelled on the binary tree to reach any leaf of the tree.  Also, a node is called a leaf if it has no children.

In the following examples, the input tree is represented in flattened form row by row.

The actual `root` tree given will be a TreeNode object.


Example 1:
Input:
root = [1, 3, 2], k = 1
Diagram of binary tree:
          1
         / \
        3   2
Output: 2 (or 3)
Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.


Example 2:
Input:
root = [1], k = 1
Output: 1
Explanation: The nearest leaf node is the root node itself.


Example 3:
Input:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Diagram of binary tree:
             1
            / \
           2   3
          /
         4
        /
       5
      /
     6
Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.

Note:
`root` represents a binary tree with at least `1` node and at most `1000` nodes.

Every node has a unique `node.val` in range `[1, 1000]`.

There exists some node in the given binary tree for which `node.val == k`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a network of `n` nodes, labeled from `1` to `n`. You are also given `times`, a list of travel times as directed edges `times[i] = (ui, vi, wi)`, where `ui` is the source node, `vi` is the target node, and `wi` is the time it takes for a signal to travel from source to target.

We will send a signal from a given node `k`. Return the time it takes for all the `n` nodes to receive the signal. If it is impossible for all the `n` nodes to receive the signal, return `-1`.


Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

Constraints:
`1 <= k <= n <= 100`
`1 <= times.length <= 6000`
`times[i].length == 3`
`1 <= ui, vi <= n`
`ui != vi`
`0 <= wi <= 100`
All the pairs `(ui, vi)` are unique. (i.e., no multiple edges.)",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of sorted characters `letters` containing only lowercase letters, and given a target letter `target`, find the smallest element in the list that is larger than the given target.

Letters also wrap around.  For example, if the target is `target = 'z'` and `letters = ['a', 'b']`, the answer is `'a'`.


Examples:
Input:
letters = [""c"", ""f"", ""j""]
target = ""a""
Output: ""c""
Input:
letters = [""c"", ""f"", ""j""]
target = ""c""
Output: ""f""
Input:
letters = [""c"", ""f"", ""j""]
target = ""d""
Output: ""f""
Input:
letters = [""c"", ""f"", ""j""]
target = ""g""
Output: ""j""
Input:
letters = [""c"", ""f"", ""j""]
target = ""j""
Output: ""c""
Input:
letters = [""c"", ""f"", ""j""]
target = ""k""
Output: ""c""
Note:
`letters` has a length in range `[2, 10000]`.

`letters` consists of lowercase letters, and contains at least 2 unique letters.

`target` is a lowercase letter.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a special dictionary which has some words and allows you to search the words in it by a prefix and a suffix.

Implement the `WordFilter` class:
`WordFilter(string[] words)` Initializes the object with the `words` in the dictionary.

`f(string prefix, string suffix)` Returns the index of the word in the dictionary which has the prefix `prefix` and the suffix `suffix`. If there is more than one valid index, return the largest of them. If there is no such word in the dictionary, return `-1`.


Example 1:
Input
[""WordFilter"", ""f""]
[[[""apple""]], [""a"", ""e""]]
Output
[null, 0]
Explanation
WordFilter wordFilter = new WordFilter([""apple""]);
wordFilter.f(""a"", ""e""); // return 0, because the word at index 0 has prefix = ""a"" and suffix = 'e"".


Constraints:
`1 <= words.length <= 15000`
`1 <= words[i].length <= 10`
`1 <= prefix.length, suffix.length <= 10`
`words[i]`, `prefix` and `suffix` consist of lower-case English letters only.

At most `15000` calls will be made to the function `f`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `cost` where `cost[i]` is the cost of `ith` step on a staircase. Once you pay the cost, you can either climb one or two steps.

You can either start from the step with index `0`, or the step with index `1`.

Return the minimum cost to reach the top of the floor.


Example 1:
Input: cost = [10,15,20]
Output: 15
Explanation: Cheapest is: start on cost[1], pay that cost, and go to the top.


Example 2:
Input: cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: Cheapest is: start on cost[0], and only step on 1s, skipping cost[3].


Constraints:
`2 <= cost.length <= 1000`
`0 <= cost[i] <= 999`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a given integer array `nums`, there is always exactly one largest element.

Find whether the largest element in the array is at least twice as much as every other number in the array.

If it is, return the index of the largest element, otherwise return -1.


Example 1:
Input: nums = [3, 6, 1, 0]
Output: 1
Explanation: 6 is the largest integer, and for every other number in the array x,
6 is more than twice as big as x.  The index of value 6 is 1, so we return 1.


Example 2:
Input: nums = [1, 2, 3, 4]
Output: -1
Explanation: 4 isn't at least as big as twice the value of 3, so we return -1.

Note:
`nums` will have a length in the range `[1, 50]`.

Every `nums[i]` will be an integer in the range `[0, 99]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `licensePlate` and an array of strings `words`, find the shortest completing word in `words`.

A completing word is a word that contains all the letters in `licensePlate`. Ignore numbers and spaces in `licensePlate`, and treat letters as case insensitive. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.

For example, if `licensePlate`` = ""aBc 12c""`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible completing words are `""abccdef""`, `""caaacab""`, and `""cbca""`.

Return the shortest completing word in `words`. It is guaranteed an answer exists. If there are multiple shortest completing words, return the first one that occurs in `words`.


Example 1:
Input: licensePlate = ""1s3 PSt"", words = [""step"",""steps"",""stripe"",""stepple""]
Output: ""steps""
Explanation: licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.

""step"" contains 't' and 'p', but only contains 1 's'.

""steps"" contains 't', 'p', and both 's' characters.

""stripe"" is missing an 's'.

""stepple"" is missing an 's'.

Since ""steps"" is the only word containing all the letters, that is the answer.


Example 2:
Input: licensePlate = ""1s3 456"", words = [""looks"",""pest"",""stew"",""show""]
Output: ""pest""
Explanation: licensePlate only contains the letter 's'. All the words contain 's', but among these ""pest"", ""stew"", and ""show"" are shortest. The answer is ""pest"" because it is the word that appears earliest of the 3.


Example 3:
Input: licensePlate = ""Ah71752"", words = [""suggest"",""letter"",""of"",""husband"",""easy"",""education"",""drug"",""prevent"",""writer"",""old""]
Output: ""husband""

Example 4:
Input: licensePlate = ""OgEu755"", words = [""enough"",""these"",""play"",""wide"",""wonder"",""box"",""arrive"",""money"",""tax"",""thus""]
Output: ""enough""

Example 5:
Input: licensePlate = ""iMSlpe4"", words = [""claim"",""consumer"",""student"",""camera"",""public"",""never"",""wonder"",""simple"",""thought"",""use""]
Output: ""simple""

Constraints:
`1 <= licensePlate.length <= 7`
`licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.

`1 <= words.length <= 1000`
`1 <= words[i].length <= 15`
`words[i]` consists of lower case English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A virus is spreading rapidly, and your task is to quarantine the infected area by installing walls.

The world is modeled as a 2-D array of cells, where `0` represents uninfected cells, and `1` represents cells contaminated with the virus.  A wall (and only one wall) can be installed between any two 4-directionally adjacent cells, on the shared boundary.

Every night, the virus spreads to all neighboring cells in all four directions unless blocked by a wall.

Resources are limited. Each day, you can install walls around only one region -- the affected area (continuous block of infected cells) that threatens the most uninfected cells the following night. There will never be a tie.

Can you save the day? If so, what is the number of walls required? If not, and the world becomes fully infected, return the number of walls used.


Example 1:
Input: grid = 
[[0,1,0,0,0,0,0,1],
 [0,1,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,0]]
Output: 10
Explanation:
There are 2 contaminated regions.

On the first day, add 5 walls to quarantine the viral region on the left. The board after the virus spreads is:
[[0,1,0,0,0,0,1,1],
 [0,1,0,0,0,0,1,1],
 [0,0,0,0,0,0,1,1],
 [0,0,0,0,0,0,0,1]]
On the second day, add 5 walls to quarantine the viral region on the right. The virus is fully contained.


Example 2:
Input: grid = 
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output: 4
Explanation: Even though there is only one cell saved, there are 4 walls built.

Notice that walls are only built on the shared boundary of two different cells.


Example 3:
Input: grid = 
[[1,1,1,0,0,0,0,0,0],
 [1,0,1,0,1,1,1,1,1],
 [1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The region on the left only builds two new walls.

Note:
The number of rows and columns of `grid` will each be in the range `[1, 50]`.

Each `grid[i][j]` will be either `0` or `1`.

Throughout the described process, there is always a contiguous viral region that will infect strictly more uncontaminated squares in the next round.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a grid where each entry is only 0 or 1, find the number of corner rectangles.

A corner rectangle is 4 distinct 1s on the grid that form an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1s used must be distinct.


Example 1:
Input: grid = 
[[1, 0, 0, 1, 0],
 [0, 0, 1, 0, 1],
 [0, 0, 0, 1, 0],
 [1, 0, 1, 0, 1]]
Output: 1
Explanation: There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].


Example 2:
Input: grid = 
[[1, 1, 1],
 [1, 1, 1],
 [1, 1, 1]]
Output: 9
Explanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.


Example 3:
Input: grid = 
[[1, 1, 1, 1]]
Output: 0
Explanation: Rectangles must have four distinct corners.

Note:
The number of rows and columns of `grid` will each be in the range `[1, 200]`.

Each `grid[i][j]` will be either `0` or `1`.

The number of `1`s in the grid will be at most `6000`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a start IP address `ip` and a number of ips we need to cover `n`, return a representation of the range as a list (of smallest possible length) of CIDR blocks.

A CIDR block is a string consisting of an IP, followed by a slash, and then the prefix length.  For example: ""123.45.67.89/20"".  That prefix length ""20"" represents the number of common prefix bits in the specified range.


Example 1:
Input: ip = ""255.0.0.7"", n = 10
Output: [""255.0.0.7/32"",""255.0.0.8/29"",""255.0.0.16/32""]
Explanation:
The initial ip address, when converted to binary, looks like this (spaces added for clarity):
255.0.0.7 -> 11111111 00000000 00000000 00000111
The address ""255.0.0.7/32"" specifies all addresses with a common prefix of 32 bits to the given address,
ie. just this one address.

The address ""255.0.0.8/29"" specifies all addresses with a common prefix of 29 bits to the given address:
255.0.0.8 -> 11111111 00000000 00000000 00001000
Addresses with common prefix of 29 bits are:
11111111 00000000 00000000 00001000
11111111 00000000 00000000 00001001
11111111 00000000 00000000 00001010
11111111 00000000 00000000 00001011
11111111 00000000 00000000 00001100
11111111 00000000 00000000 00001101
11111111 00000000 00000000 00001110
11111111 00000000 00000000 00001111
The address ""255.0.0.16/32"" specifies all addresses with a common prefix of 32 bits to the given address,
ie. just 11111111 00000000 00000000 00010000.

In total, the answer specifies the range of 10 ips starting with the address 255.0.0.7 .

There were other representations, such as:
[""255.0.0.7/32"",""255.0.0.8/30"", ""255.0.0.12/30"", ""255.0.0.16/32""],
but our answer was the shortest possible.

Also note that a representation beginning with say, ""255.0.0.7/30"" would be incorrect,
because it includes addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100 
that are outside the specified range.

Note:
`ip` will be a valid IPv4 address.

Every implied address `ip + x` (for `x < n`) will be a valid IPv4 address.

`n` will be an integer in the range `[1, 1000]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a lock in front of you with 4 circular wheels. Each wheel has 10 slots: `'0', '1', '2', '3', '4', '5', '6', '7', '8', '9'`. The wheels can rotate freely and wrap around: for example we can turn `'9'` to be `'0'`, or `'0'` to be `'9'`. Each move consists of turning one wheel one slot.

The lock initially starts at `'0000'`, a string representing the state of the 4 wheels.

You are given a list of `deadends` dead ends, meaning if the lock displays any of these codes, the wheels of the lock will stop turning and you will be unable to open it.

Given a `target` representing the value of the wheels that will unlock the lock, return the minimum total number of turns required to open the lock, or -1 if it is impossible.


Example 1:
Input: deadends = [""0201"",""0101"",""0102"",""1212"",""2002""], target = ""0202""
Output: 6
Explanation:
A sequence of valid moves would be ""0000"" -> ""1000"" -> ""1100"" -> ""1200"" -> ""1201"" -> ""1202"" -> ""0202"".

Note that a sequence like ""0000"" -> ""0001"" -> ""0002"" -> ""0102"" -> ""0202"" would be invalid,
because the wheels of the lock become stuck after the display becomes the dead end ""0102"".


Example 2:
Input: deadends = [""8888""], target = ""0009""
Output: 1
Explanation:
We can turn the last wheel in reverse to move from ""0000"" -> ""0009"".


Example 3:
Input: deadends = [""8887"",""8889"",""8878"",""8898"",""8788"",""8988"",""7888"",""9888""], target = ""8888""
Output: -1
Explanation:
We can't reach the target without getting stuck.


Example 4:
Input: deadends = [""0000""], target = ""8888""
Output: -1

Constraints:
`1 <= deadends.length <= 500`
`deadends[i].length == 4`
`target.length == 4`
target will not be in the list `deadends`.

`target` and `deadends[i]` consist of digits only.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a box protected by a password. The password is a sequence of `n` digits where each digit can be one of the first `k` digits `0, 1, ..., k-1`.

While entering a password, the last `n` digits entered will automatically be matched against the correct password.

For example, assuming the correct password is `""345""`, if you type `""012345""`, the box will open because the correct password matches the suffix of the entered password.

Return any password of minimum length that is guaranteed to open the box at some point of entering it.


Example 1:
Input: n = 1, k = 2
Output: ""01""
Note: ""10"" will be accepted too.


Example 2:
Input: n = 2, k = 2
Output: ""00110""
Note: ""01100"", ""10011"", ""11001"" will be accepted too.

Note:
`n` will be in the range `[1, 4]`.

`k` will be in the range `[1, 10]`.

`k^n` will be at most `4096`.",0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are standing at position `0` on an infinite number line.  There is a goal at position `target`.

On each move, you can either go left or right.  During the n-th move (starting from 1), you take n steps.

Return the minimum number of steps required to reach the destination.


Example 1:
Input: target = 3
Output: 2
Explanation:
On the first move we step from 0 to 1.

On the second step we step from 1 to 3.


Example 2:
Input: target = 2
Output: 3
Explanation:
On the first move we step from 0 to 1.

On the second move we step  from 1 to -1.

On the third move we step from -1 to 2.

Note:
`target` will be a non-zero integer in the range `[-10^9, 10^9]`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given an elevation map, `heights[i]` representing the height of the terrain at that index.  The width at each index is 1.  After `V` units of water fall at index `K`, how much water is at each index?
Water first drops at index `K` and rests on top of the highest terrain or water at that index.  Then, it flows according to the following rules:
If the droplet would eventually fall by moving left, then move left.

Otherwise, if the droplet would eventually fall by moving right, then move right.

Otherwise, rise at it's current position.

Here, ""eventually fall"" means that the droplet will eventually be at a lower level if it moves in that direction.

Also, ""level"" means the height of the terrain plus any water in that column.

We can assume there's infinitely high terrain on the two sides out of bounds of the array.  Also, there could not be partial water being spread out evenly on more than 1 grid block - each unit of water has to be in exactly one block.


Example 1:
Input: heights = [2,1,1,2,1,2,2], V = 4, K = 3
Output: [2,2,2,3,2,2,2]
Explanation:
#       #
#       #
##  # ###
#########
 0123456    <- index
The first drop of water lands at index K = 3:
#       #
#   w   #
##  # ###
#########
 0123456    
When moving left or right, the water can only move to the same level or a lower level.

(By level, we mean the total height of the terrain plus any water in that column.)
Since moving left will eventually make it fall, it moves left.

(A droplet ""made to fall"" means go to a lower height than it was at previously.)
#       #
#       #
## w# ###
#########
 0123456    
Since moving left will not make it fall, it stays in place.  The next droplet falls:
#       #
#   w   #
## w# ###
#########
 0123456  
Since the new droplet moving left will eventually make it fall, it moves left.

Notice that the droplet still preferred to move left,
even though it could move right (and moving right makes it fall quicker.)
#       #
#  w    #
## w# ###
#########
 0123456  
#       #
#       #
##ww# ###
#########
 0123456  
After those steps, the third droplet falls.

Since moving left would not eventually make it fall, it tries to move right.

Since moving right would eventually make it fall, it moves right.

#       #
#   w   #
##ww# ###
#########
 0123456  
#       #
#       #
##ww#w###
#########
 0123456  
Finally, the fourth droplet falls.

Since moving left would not eventually make it fall, it tries to move right.

Since moving right would not eventually make it fall, it stays in place:
#       #
#   w   #
##ww#w###
#########
 0123456  
The final answer is [2,2,2,3,2,2,2]:
    #    
 ####### 
 ####### 
 0123456 

Example 2:
Input: heights = [1,2,3,4], V = 2, K = 2
Output: [2,3,3,4]
Explanation:
The last droplet settles at index 1, since moving further left would not cause it to eventually fall to a lower height.


Example 3:
Input: heights = [3,1,3], V = 5, K = 1
Output: [4,4,4]
Note:
`heights` will have length in `[1, 100]` and contain integers in `[0, 99]`.

`V` will be in range `[0, 2000]`.

`K` will be in range `[0, heights.length - 1]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are stacking blocks to form a pyramid. Each block has a color which is a one-letter string.

We are allowed to place any color block `C` on top of two adjacent blocks of colors `A` and `B`, if and only if `ABC` is an allowed triple.

We start with a bottom row of `bottom`, represented as a single string. We also start with a list of allowed triples `allowed`. Each allowed triple is represented as a string of length `3`.

Return `true` if we can build the pyramid all the way to the top, otherwise `false`.


Example 1:
Input: bottom = ""BCD"", allowed = [""BCG"",""CDE"",""GEA"",""FFF""]
Output: true
Explanation:
We can stack the pyramid like this:
    A
   / \
  G   E
 / \ / \
B   C   D
We are allowed to place G on top of B and C because BCG is an allowed triple.  Similarly, we can place E on top of C and D, then A on top of G and E.


Example 2:
Input: bottom = ""AABA"", allowed = [""AAA"",""AAB"",""ABA"",""ABB"",""BAC""]
Output: false
Explanation:
We cannot stack the pyramid to the top.

Note that there could be allowed triples (A, B, C) and (A, B, D) with C != D.


Constraints:
`2 <= bottom.length <= 8`
`0 <= allowed.length <= 200`
`allowed[i].length == 3`
The letters in all input strings are from the set `{'A', 'B', 'C', 'D', 'E', 'F', 'G'}`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An integer interval `[a, b]` (for integers `a < b`) is a set of all consecutive integers from `a` to `b`, including `a` and `b`.

Find the minimum size of a set S such that for every integer interval A in `intervals`, the intersection of S with A has a size of at least two.


Example 1:
Input: intervals = [[1,3],[1,4],[2,5],[3,5]]
Output: 3
Explanation: Consider the set S = {2, 3, 4}.  For each interval, there are at least 2 elements from S in the interval.

Also, there isn't a smaller size set that fulfills the above condition.

Thus, we output the size of this set, which is 3.


Example 2:
Input: intervals = [[1,2],[2,3],[2,4],[4,5]]
Output: 5
Explanation: An example of a minimum sized set is {1, 2, 3, 4, 5}.


Constraints:
`1 <= intervals.length <= 3000`
`intervals[i].length == 2`
`0 <= ai < bi <= 108`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of keywords `words` and a string `S`, make all appearances of all keywords in `S` bold. Any letters between `<b>` and `</b>` tags become bold.

The returned string should use the least number of tags possible, and of course the tags should form a valid combination.

For example, given that `words = [""ab"", ""bc""]` and `S = ""aabcd""`, we should return `""a<b>abc</b>d""`. Note that returning `""a<b>a<b>b</b>c</b>d""` would use more tags, so it is incorrect.


Constraints:
`words` has length in range `[0, 50]`.

`words[i]` has length in range `[1, 10]`.

`S` has length in range `[0, 500]`.

All characters in `words[i]` and `S` are lowercase letters.

Note: This question is the same as 616: https://leetcode.com/problems/add-bold-tag-in-string/",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a list `schedule` of employees, which represents the working time for each employee.

Each employee has a list of non-overlapping `Intervals`, and these intervals are in sorted order.

Return the list of finite intervals representing common, positive-length free time for all employees, also in sorted order.

(Even though we are representing `Intervals` in the form `[x, y]`, the objects inside are `Intervals`, not lists or arrays. For example, `schedule[0][0].start = 1`, `schedule[0][0].end = 2`, and `schedule[0][0][0]` is not defined).  Also, we wouldn't include intervals like [5, 5] in our answer, as they have zero length.


Example 1:
Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are a total of three employees, and all common
free time intervals would be [-inf, 1], [3, 4], [10, inf].

We discard any intervals that contain inf as they aren't finite.


Example 2:
Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]

Constraints:
`1 <= schedule.length , schedule[i].length <= 50`
`0 <= schedule[i].start < schedule[i].end <= 10^8`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two lists `A`and `B`, and `B` is an anagram of `A`. `B` is an anagram of `A` means `B` is made by randomizing the order of the elements in `A`.

We want to find an index mapping `P`, from `A` to `B`. A mapping `P[i] = j` means the `i`th element in `A` appears in `B` at index `j`.

These lists `A` and `B` may contain duplicates.  If there are multiple answers, output any of them.

For example, given
A = [12, 28, 46, 32, 50]
B = [50, 12, 32, 46, 28]
We should return
[1, 4, 3, 2, 0]
as `P[0] = 1` because the `0`th element of `A` appears at `B[1]`,
and `P[1] = 4` because the `1`st element of `A` appears at `B[4]`,
and so on.

Note:
`A, B` have equal lengths in range `[1, 100]`.

`A[i], B[i]` are integers in range `[0, 10^5]`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Special binary strings are binary strings with the following two properties:
The number of 0's is equal to the number of 1's.

Every prefix of the binary string has at least as many 1's as 0's.

Given a special string `S`, a move consists of choosing two consecutive, non-empty, special substrings of `S`, and swapping them.  (Two strings are consecutive if the last character of the first string is exactly one index before the first character of the second string.)
At the end of any number of moves, what is the lexicographically largest resulting string possible?

Example 1:
Input: S = ""11011000""
Output: ""11100100""
Explanation:
The strings ""10"" [occuring at S[1]] and ""1100"" [at S[3]] are swapped.

This is the lexicographically largest string possible after some number of swaps.

Note:
`S` has length at most `50`.

`S` is guaranteed to be a special binary string as defined above.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `L` and `R`, find the count of numbers in the range `[L, R]` (inclusive) having a prime number of set bits in their binary representation.

(Recall that the number of set bits an integer has is the number of `1`s present when written in binary.  For example, `21` written in binary is `10101` which has 3 set bits.  Also, 1 is not a prime.)

Example 1:Input: L = 6, R = 10
Output: 4
Explanation:
6 -> 110 (2 set bits, 2 is prime)
7 -> 111 (3 set bits, 3 is prime)
9 -> 1001 (2 set bits , 2 is prime)
10->1010 (2 set bits , 2 is prime)

Example 2:Input: L = 10, R = 15
Output: 5
Explanation:
10 -> 1010 (2 set bits, 2 is prime)
11 -> 1011 (3 set bits, 3 is prime)
12 -> 1100 (2 set bits, 2 is prime)
13 -> 1101 (3 set bits, 3 is prime)
14 -> 1110 (3 set bits, 3 is prime)
15 -> 1111 (4 set bits, 4 is not prime)
Note:
`L, R` will be integers `L <= R` in the range `[1, 10^6]`.

`R - L` will be at most 10000.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string `S` of lowercase English letters is given. We want to partition this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the size of these parts.


Example 1:
Input: S = ""ababcbacadefegdehijhklij""
Output: [9,7,8]
Explanation:
The partition is ""ababcbaca"", ""defegde"", ""hijhklij"".

This is a partition so that each letter appears in at most one part.

A partition like ""ababcbacadefegde"", ""hijhklij"" is incorrect, because it splits S into less parts.

Note:
`S` will have length in range `[1, 500]`.

`S` will consist of lowercase English letters (`'a'` to `'z'`) only.",0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a 2D `grid` from (0, 0) to (N-1, N-1), every cell contains a `1`, except those cells in the given list `mines` which are `0`.  What is the largest axis-aligned plus sign of `1`s contained in the grid?  Return the order of the plus sign.  If there is none, return 0.

An ""axis-aligned plus sign of `1`s of order k"" has some center `grid[x][y] = 1` along with 4 arms of length `k-1` going up, down, left, and right, and made of `1`s.  This is demonstrated in the diagrams below.  Note that there could be `0`s or `1`s beyond the arms of the plus sign, only the relevant area of the plus sign is checked for 1s.


Examples of Axis-Aligned Plus Signs of Order k:Order 1:
000
010
000
Order 2:
00000
00100
01110
00100
00000
Order 3:
0000000
0001000
0001000
0111110
0001000
0001000
0000000

Example 1:Input: N = 5, mines = [[4, 2]]
Output: 2
Explanation:
11111
11111
11111
11111
11011
In the above grid, the largest plus sign can only be order 2.  One of them is marked in bold.


Example 2:Input: N = 2, mines = []
Output: 1
Explanation:
There is no plus sign of order 2, but there is of order 1.


Example 3:Input: N = 1, mines = [[0, 0]]
Output: 0
Explanation:
There is no plus sign, so return 0.

Note:
`N` will be an integer in the range `[1, 500]`.

`mines` will have length at most `5000`.

`mines[i]` will be length 2 and consist of integers in the range `[0, N-1]`.

(Additionally, programs submitted in C, C++, or C# will be judged with a slightly smaller time limit.)",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"N couples sit in 2N seats arranged in a row and want to hold hands.  We want to know the minimum number of swaps so that every couple is sitting side by side.  A swap consists of choosing any two people, then they stand up and switch seats. 
The people and seats are represented by an integer from `0` to `2N-1`, the couples are numbered in order, the first couple being `(0, 1)`, the second couple being `(2, 3)`, and so on with the last couple being `(2N-2, 2N-1)`.

The couples' initial seating is given by `row[i]` being the value of the person who is initially sitting in the i-th seat.


Example 1:Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second (row[1]) and third (row[2]) person.


Example 2:Input: row = [3, 2, 0, 1]
Output: 0
Explanation: All couples are already seated side by side.

Note:
 `len(row)` is even and in the range of `[4, 60]`.

 `row` is guaranteed to be a permutation of `0...len(row)-1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` `matrix`, return `true` if the matrix is Toeplitz. Otherwise, return `false`.

A matrix is Toeplitz if every diagonal from top-left to bottom-right has the same elements.


Example 1:
Input: matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
Output: true
Explanation:
In the above grid, the diagonals are:
""[9]"", ""[5, 5]"", ""[1, 1, 1]"", ""[2, 2, 2]"", ""[3, 3]"", ""[4]"".

In each diagonal all elements are the same, so the answer is True.


Example 2:
Input: matrix = [[1,2],[2,2]]
Output: false
Explanation:
The diagonal ""[1, 2]"" has different elements.


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 20`
`0 <= matrix[i][j] <= 99`
Follow up:
What if the `matrix` is stored on disk, and the memory is limited such that you can only load at most one row of the matrix into the memory at once?
What if the `matrix` is so large that you can only load up a partial row into the memory at once?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S`, check if the letters can be rearranged so that two characters that are adjacent to each other are not the same.

If possible, output any possible result.  If not possible, return the empty string.


Example 1:
Input: S = ""aab""
Output: ""aba""

Example 2:
Input: S = ""aaab""
Output: """"
Note:
`S` will consist of lowercase letters and have length in range `[1, 500]`.",0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This question is the same as ""Max Chunks to Make Sorted"" except the integers of the given array are not necessarily distinct, the input array could be up to length `2000`, and the elements could be up to `10**8`.

Given an array `arr` of integers (not necessarily distinct), we split the array into some number of ""chunks"" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:
Input: arr = [5,4,3,2,1]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.

For example, splitting into [5, 4], [3, 2, 1] will result in [4, 5, 1, 2, 3], which isn't sorted.


Example 2:
Input: arr = [2,1,3,4,4]
Output: 4
Explanation:
We can split into two chunks, such as [2, 1], [3, 4, 4].

However, splitting into [2, 1], [3], [4], [4] is the highest number of chunks possible.

Note:
`arr` will have length in range `[1, 2000]`.

`arr[i]` will be an integer in range `[0, 10**8]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr` that is a permutation of `[0, 1, ..., arr.length - 1]`, we split the array into some number of ""chunks"" (partitions), and individually sort each chunk.  After concatenating them, the result equals the sorted array.

What is the most number of chunks we could have made?

Example 1:
Input: arr = [4,3,2,1,0]
Output: 1
Explanation:
Splitting into two or more chunks will not return the required result.

For example, splitting into [4, 3], [2, 1, 0] will result in [3, 4, 0, 1, 2], which isn't sorted.


Example 2:
Input: arr = [1,0,2,3,4]
Output: 4
Explanation:
We can split into two chunks, such as [1, 0], [2, 3, 4].

However, splitting into [1, 0], [2], [3], [4] is the highest number of chunks possible.

Note:
`arr` will have length in range `[1, 10]`.

`arr[i]` will be a permutation of `[0, 1, ..., arr.length - 1]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `expression` such as `expression = ""e + 8 - a + 5""` and an evaluation map such as `{""e"": 1}` (given in terms of `evalvars = [""e""]` and `evalints = [1]`), return a list of tokens representing the simplified expression, such as `[""-1*a"",""14""]`
An expression alternates chunks and symbols, with a space separating each chunk and symbol.

A chunk is either an expression in parentheses, a variable, or a non-negative integer.

A variable is a string of lowercase letters (not including digits.) Note that variables can be multiple letters, and note that variables never have a leading coefficient or unary operator like `""2x""` or `""-x""`.

Expressions are evaluated in the usual order: brackets first, then multiplication, then addition and subtraction. For example, `expression = ""1 + 2 * 3""` has an answer of `[""7""]`.

The format of the output is as follows:
For each term of free variables with non-zero coefficient, we write the free variables within a term in sorted order lexicographically. For example, we would never write a term like `""b*a*c""`, only `""a*b*c""`.

Terms have degree equal to the number of free variables being multiplied, counting multiplicity. (For example, `""a*a*b*c""` has degree 4.) We write the largest degree terms of our answer first, breaking ties by lexicographic order ignoring the leading coefficient of the term.

The leading coefficient of the term is placed directly to the left with an asterisk separating it from the variables (if they exist.)  A leading coefficient of 1 is still printed.

An example of a well formatted answer is `[""-2*a*a*a"", ""3*a*a*b"", ""3*b*b"", ""4*a"", ""5*c"", ""-6""]` 
Terms (including constant terms) with coefficient 0 are not included.  For example, an expression of ""0"" has an output of [].


Examples:
Input: expression = ""e + 8 - a + 5"", evalvars = [""e""], evalints = [1]
Output: [""-1*a"",""14""]
Input: expression = ""e - 8 + temperature - pressure"",
evalvars = [""e"", ""temperature""], evalints = [1, 12]
Output: [""-1*pressure"",""5""]
Input: expression = ""(e + 8) * (e - 8)"", evalvars = [], evalints = []
Output: [""1*e*e"",""-64""]
Input: expression = ""7 - 7"", evalvars = [], evalints = []
Output: []
Input: expression = ""a * b * c + b * a * c * 4"", evalvars = [], evalints = []
Output: [""5*a*b*c""]
Input: expression = ""((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))"",
evalvars = [], evalints = []
Output: [""-1*a*a*b*b"",""2*a*a*b*c"",""-1*a*a*c*c"",""1*a*b*b*b"",""-1*a*b*b*c"",""-1*a*b*c*c"",""1*a*c*c*c"",""-1*b*b*b*c"",""2*b*b*c*c"",""-1*b*c*c*c"",""2*a*a*b"",""-2*a*a*c"",""-2*a*b*b"",""2*a*c*c"",""1*b*b*b"",""-1*b*b*c"",""1*b*c*c"",""-1*c*c*c"",""-1*a*a"",""1*a*b"",""1*a*c"",""-1*b*c""]
Note:
`expression` will have length in range `[1, 250]`.

`evalvars, evalints` will have equal lengths in range `[0, 100]`.",0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You're given strings `jewels` representing the types of stones that are jewels, and `stones` representing the stones you have. Each character in `stones` is a type of stone you have. You want to know how many of the stones you have are also jewels.

Letters are case sensitive, so `""a""` is considered a different type of stone from `""A""`.


Example 1:
Input: jewels = ""aA"", stones = ""aAAbbbb""
Output: 3

Example 2:
Input: jewels = ""z"", stones = ""ZZ""
Output: 0

Constraints:
`1 <= jewels.length, stones.length <= 50`
`jewels` and `stones` consist of only English letters.

All the characters of `jewels` are unique.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, `'+'`, `'-'`, `'*'`, `'/'` operators, and open `'('` and closing parentheses `')'`. The integer division should truncate toward zero.

You may assume that the given expression is always valid. All intermediate results will be in the range of `[-231, 231 - 1]`.


Example 1:
Input: s = ""1+1""
Output: 2

Example 2:
Input: s = ""6-4/2""
Output: 4

Example 3:
Input: s = ""2*(5+5*2)/3+(6/2+8)""
Output: 21

Example 4:
Input: s = ""(2+6*3+5-(3*14/7+2)*5)+3""
Output: -12

Example 5:
Input: s = ""0""
Output: 0

Constraints:
`1 <= s <= 104`
`s` consists of digits, `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.

`s` is a valid expression.

Follow up: Could you solve the problem without using built-in library functions?",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2x3 `board`, there are 5 tiles represented by the integers 1 through 5, and an empty square represented by 0.

A move consists of choosing `0` and a 4-directionally adjacent number and swapping it.

The state of the board is solved if and only if the `board` is `[[1,2,3],[4,5,0]].`
Given a puzzle board, return the least number of moves required so that the state of the board is solved. If it is impossible for the state of the board to be solved, return -1.


Examples:
Input: board = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap the 0 and the 5 in one move.

Input: board = [[1,2,3],[5,4,0]]
Output: -1
Explanation: No number of moves will make the board solved.

Input: board = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the smallest number of moves that solves the board.

An example path:
After move 0: [[4,1,2],[5,0,3]]
After move 1: [[4,1,2],[0,5,3]]
After move 2: [[0,1,2],[4,5,3]]
After move 3: [[1,0,2],[4,5,3]]
After move 4: [[1,2,0],[4,5,3]]
After move 5: [[1,2,3],[4,5,0]]
Input: board = [[3,2,4],[1,5,0]]
Output: 14
Note:
`board` will be a 2 x 3 array as described above.

`board[i][j]` will be a permutation of `[0, 1, 2, 3, 4, 5]`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `stations` that represents the positions of the gas stations on the x-axis. You are also given an integer `k`.

You should add `k` new gas stations. You can add the stations anywhere on the x-axis, and not necessarily on an integer position.

Let `penalty()` be the maximum distance between adjacent gas stations after adding the `k` new stations.

Return the smallest possible value of `penalty()`. Answers within `10-6` of the actual answer will be accepted.


Example 1:
Input: stations = [1,2,3,4,5,6,7,8,9,10], k = 9
Output: 0.50000

Example 2:
Input: stations = [23,24,36,39,46,56,57,65,84,98], k = 1
Output: 14.00000

Constraints:
`10 <= stations.length <= 2000`
`0 <= stations[i] <= 108`
`stations` is sorted in a strictly increasing order.

`1 <= k <= 106`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have some permutation `A` of `[0, 1, ..., N - 1]`, where `N` is the length of `A`.

The number of (global) inversions is the number of `i < j` with `0 <= i < j < N` and `A[i] > A[j]`.

The number of local inversions is the number of `i` with `0 <= i < N` and `A[i] > A[i+1]`.

Return `true` if and only if the number of global inversions is equal to the number of local inversions.


Example 1:
Input: A = [1,0,2]
Output: true
Explanation: There is 1 global inversion, and 1 local inversion.


Example 2:
Input: A = [1,2,0]
Output: false
Explanation: There are 2 global inversions, and 1 local inversion.

Note:
`A` will be a permutation of `[0, 1, ..., A.length - 1]`.

`A` will have length in range `[1, 5000]`.

The time limit for this problem has been reduced.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a Binary Search Tree (BST) with root node `root`, and a target value `V`, split the tree into two subtrees where one subtree has nodes that are all smaller or equal to the target value, while the other subtree has all nodes that are greater than the target value.  It's not necessarily the case that the tree contains a node with value `V`.

Additionally, most of the structure of the original tree should remain.  Formally, for any child C with parent P in the original tree, if they are both in the same subtree after the split, then node C should still have the parent P.

You should output the root TreeNode of both subtrees after splitting, in any order.


Example 1:
Input: root = [4,2,6,1,3,5,7], V = 2
Output: [[2,1],[4,3,6,null,null,5,7]]
Explanation:
Note that root, output[0], and output[1] are TreeNode objects, not arrays.

The given tree [4,2,6,1,3,5,7] is represented by the following diagram:
          4
        /   \
      2      6
     / \    / \
    1   3  5   7
while the diagrams for the outputs are:
          4
        /   \
      3      6      and    2
            / \           /
           5   7         1
Note:
The size of the BST will not exceed `50`.

The BST is always valid and each node's value is different.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a string composed of `'L'`, `'R'`, and `'X'` characters, like `""RXXLRXRXL""`, a move consists of either replacing one occurrence of `""XL""` with `""LX""`, or replacing one occurrence of `""RX""` with `""XR""`. Given the starting string `start` and the ending string `end`, return `True` if and only if there exists a sequence of moves to transform one string to the other.


Example 1:
Input: start = ""RXXLRXRXL"", end = ""XRLXXRRLX""
Output: true
Explanation: We can transform start to end following these steps:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX

Example 2:
Input: start = ""X"", end = ""L""
Output: false

Example 3:
Input: start = ""LLR"", end = ""RRL""
Output: false

Example 4:
Input: start = ""XL"", end = ""LX""
Output: true

Example 5:
Input: start = ""XLLR"", end = ""LXLX""
Output: false

Constraints:
`1 <= start.length <= 104`
`start.length == end.length`
Both `start` and `end` will only consist of characters in `'L'`, `'R'`, and `'X'`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"On an N x N `grid`, each square `grid[i][j]` represents the elevation at that point `(i,j)`.

Now rain starts to fall. At time `t`, the depth of the water everywhere is `t`. You can swim from a square to another 4-directionally adjacent square if and only if the elevation of both squares individually are at most `t`. You can swim infinite distance in zero time. Of course, you must stay within the boundaries of the grid during your swim.

You start at the top left square `(0, 0)`. What is the least time until you can reach the bottom right square `(N-1, N-1)`?

Example 1:
Input: [[0,2],[1,3]]
Output: 3
Explanation:
At time `0`, you are in grid location `(0, 0)`.

You cannot go anywhere else because 4-directionally adjacent neighbors have a higher elevation than t = 0.

You cannot reach point `(1, 1)` until time `3`.

When the depth of water is `3`, we can swim anywhere inside the grid.


Example 2:
Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20],[10,9,8,7,6]]
Output: 16
Explanation:
 0  1  2  3  4
24 23 22 21  5
12 13 14 15 16
11 17 18 19 20
10  9  8  7  6
The final route is marked in bold.

We need to wait until time 16 so that (0, 0) and (4, 4) are connected.

Note:
`2 <= N <= 50`.

grid[i][j] is a permutation of [0, ..., N*N - 1].",0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On the first row, we write a `0`. Now in every subsequent row, we look at the previous row and replace each occurrence of `0` with `01`, and each occurrence of `1` with `10`.

Given row `N` and index `K`, return the `K`-th indexed symbol in row `N`. (The values of `K` are 1-indexed.) (1 indexed).


Examples:
Input: N = 1, K = 1
Output: 0
Input: N = 2, K = 1
Output: 0
Input: N = 2, K = 2
Output: 1
Input: N = 4, K = 5
Output: 1
Explanation:
row 1: 0
row 2: 01
row 3: 0110
row 4: 01101001
Note:
`N` will be an integer in the range `[1, 30]`.

`K` will be an integer in the range `[1, 2^(N-1)]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A move consists of taking a point `(x, y)` and transforming it to either `(x, x+y)` or `(x+y, y)`.

Given a starting point `(sx, sy)` and a target point `(tx, ty)`, return `True` if and only if a sequence of moves exists to transform the point `(sx, sy)` to `(tx, ty)`. Otherwise, return `False`.


Examples:
Input: sx = 1, sy = 1, tx = 3, ty = 5
Output: True
Explanation:
One series of moves that transforms the starting point to the target is:
(1, 1) -> (1, 2)
(1, 2) -> (3, 2)
(3, 2) -> (3, 5)
Input: sx = 1, sy = 1, tx = 2, ty = 2
Output: False
Input: sx = 1, sy = 1, tx = 1, ty = 1
Output: True
Note:
`sx, sy, tx, ty` will all be integers in the range `[1, 10^9]`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a forest, each rabbit has some color. Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them. Those `answers` are placed in an array.

Return the minimum number of rabbits that could be in the forest.


Examples:
Input: answers = [1, 1, 2]
Output: 5
Explanation:
The two rabbits that answered ""1"" could both be the same color, say red.

The rabbit than answered ""2"" can't be red or the answers would be inconsistent.

Say the rabbit that answered ""2"" was blue.

Then there should be 2 other blue rabbits in the forest that didn't answer into the array.

The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.

Input: answers = [10, 10, 10]
Output: 11
Input: answers = []
Output: 0
Note:
`answers` will have length at most `1000`.

Each `answers[i]` will be an integer in the range `[0, 999]`.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An N x N `board` contains only `0`s and `1`s. In each move, you can swap any 2 rows with each other, or any 2 columns with each other.

What is the minimum number of moves to transform the board into a ""chessboard"" - a board where no `0`s and no `1`s are 4-directionally adjacent? If the task is impossible, return -1.


Examples:
Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
Output: 2
Explanation:
One potential sequence of moves is shown below, from left to right:
0110     1010     1010
0110 --> 1010 --> 0101
1001     0101     1010
1001     0101     0101
The first move swaps the first and second column.

The second move swaps the second and third row.

Input: board = [[0, 1], [1, 0]]
Output: 0
Explanation:
Also note that the board with 0 in the top left corner,
01
10
is also a valid chessboard.

Input: board = [[1, 0], [1, 0]]
Output: -1
Explanation:
No matter what sequence of moves you make, you cannot end with a valid chessboard.

Note:
`board` will have the same number of rows and columns, a number in the range `[2, 30]`.

`board[i][j]` will be only `0`s or `1`s.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a Binary Search Tree (BST), return the minimum difference between the values of any two different nodes in the tree.

Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/

Example 1:
Input: root = [4,2,6,1,3]
Output: 1

Example 2:
Input: root = [1,0,48,null,null,12,49]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[2, 100]`.

`0 <= Node.val <= 105`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string S, we can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. You can return the output in any order.


Example 1:
Input: S = ""a1b2""
Output: [""a1b2"",""a1B2"",""A1b2"",""A1B2""]

Example 2:
Input: S = ""3z4""
Output: [""3z4"",""3Z4""]

Example 3:
Input: S = ""12345""
Output: [""12345""]

Example 4:
Input: S = ""0""
Output: [""0""]

Constraints:
`S` will be a string with length between `1` and `12`.

`S` will consist only of letters or digits.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an undirected graph with `n` nodes, where each node is numbered between `0` and `n - 1`. You are given a 2D array `graph`, where `graph[u]` is an array of nodes that node `u` is adjacent to. More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:
There are no self-edges (`graph[u]` does not contain `u`).

There are no parallel edges (`graph[u]` does not contain duplicate values).

If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).

The graph may not be connected, meaning there may be two nodes `u` and `v` such that there is no path between them.

A graph is bipartite if the nodes can be partitioned into two independent sets `A` and `B` such that every edge in the graph connects a node in set `A` and a node in set `B`.

Return `true` if and only if it is bipartite.


Example 1:
Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
Output: false
Explanation: There is no way to partition the nodes into two independent sets such that every edge connects a node in one and a node in the other.


Example 2:
Input: graph = [[1,3],[0,2],[1,3],[0,2]]
Output: true
Explanation: We can partition the nodes into two sets: {0, 2} and {1, 3}.


Constraints:
`graph.length == n`
`1 <= n <= 100`
`0 <= graph[u].length < n`
`0 <= graph[u][i] <= n - 1`
`graph[u]` does not contain `u`.

All the values of `graph[u]` are unique.

If `graph[u]` contains `v`, then `graph[v]` contains `u`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a sorted integer array `arr` containing `1` and prime numbers, where all the integers of `arr` are unique. You are also given an integer `k`.

For every `i` and `j` where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`.

Return the `kth` smallest fraction considered. Return your answer as an array of integers of size `2`, where `answer[0] == arr[i]` and `answer[1] == arr[j]`.


Example 1:
Input: arr = [1,2,3,5], k = 3
Output: [2,5]
Explanation: The fractions to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.

The third fraction is 2/5.


Example 2:
Input: arr = [1,7], k = 1
Output: [1,7]

Constraints:
`2 <= arr.length <= 1000`
`1 <= arr[i] <= 3 * 104`
`arr[0] == 1`
`arr[i]` is a prime number for `i > 0`.

All the numbers of `arr` are unique and sorted in strictly increasing order.

`1 <= k <= arr.length * (arr.length - 1) / 2`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities connected by `m` flights. Each flight starts from city `u` and arrives at `v` with a price `w`.

Now given all the cities and flights, together with starting city `src` and the destination `dst`, your task is to find the cheapest price from `src` to `dst` with up to `k` stops. If there is no such route, output `-1`.


Example 1:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 1
Output: 200
Explanation: 
The graph looks like this:
The cheapest price from city `0` to city `2` with at most 1 stop costs 200, as marked red in the picture.


Example 2:
Input: 
n = 3, edges = [[0,1,100],[1,2,100],[0,2,500]]
src = 0, dst = 2, k = 0
Output: 500
Explanation: 
The graph looks like this:
The cheapest price from city `0` to city `2` with at most 0 stop costs 500, as marked blue in the picture.


Constraints:
The number of nodes `n` will be in range `[1, 100]`, with nodes labeled from `0` to `n`` - 1`.

The size of `flights` will be in range `[0, n * (n - 1) / 2]`.

The format of each flight will be `(src, ``dst``, price)`.

The price of each flight will be in the range `[1, 10000]`.

`k` is in the range of `[0, n - 1]`.

There will not be any duplicated flights or self cycles.",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"X is a good number if after rotating each digit individually by 180 degrees, we get a valid number that is different from X.  Each digit must be rotated - we cannot choose to leave it alone.

A number is valid if each digit remains a digit after rotation. 0, 1, and 8 rotate to themselves; 2 and 5 rotate to each other (on this case they are rotated in a different direction, in other words 2 or 5 gets mirrored); 6 and 9 rotate to each other, and the rest of the numbers do not rotate to any other number and become invalid.

Now given a positive number `N`, how many numbers X from `1` to `N` are good?

Example:
Input: 10
Output: 4
Explanation: 
There are four good numbers in the range [1, 10] : 2, 5, 6, 9.

Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.

Note:
N  will be in range `[1, 10000]`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a simplified PAC-MAN game on an infinite 2-D grid. You start at the point `[0, 0]`, and you are given a destination point `target = [xtarget, ytarget]`, which you are trying to get to. There are several ghosts on the map with their starting positions given as an array `ghosts`, where `ghosts[i] = [xi, yi]` represents the starting position of the `ith` ghost. All inputs are integral coordinates.

Each turn, you and all the ghosts may independently choose to either move 1 unit in any of the four cardinal directions: north, east, south, or west or stay still. All actions happen simultaneously.

You escape if and only if you can reach the target before any ghost reaches you. If you reach any square (including the target) at the same time as a ghost, it does not count as an escape.

Return `true` if it is possible to escape, otherwise return `false`.


Example 1:
Input: ghosts = [[1,0],[0,3]], target = [0,1]
Output: true
Explanation: You can reach the destination (0, 1) after 1 turn, while the ghosts located at (1, 0) and (0, 3) cannot catch up with you.


Example 2:
Input: ghosts = [[1,0]], target = [2,0]
Output: false
Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) lies between you and the destination.


Example 3:
Input: ghosts = [[2,0]], target = [1,0]
Output: false
Explanation: The ghost can reach the target at the same time as you.


Example 4:
Input: ghosts = [[5,0],[-10,-2],[0,-5],[-2,-2],[-7,1]], target = [7,7]
Output: false

Example 5:
Input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]
Output: true

Constraints:
`1 <= ghosts.length <= 100`
`ghosts[i].length == 2`
`-104 <= xi, yi <= 104`
There can be multiple ghosts in the same location.

`target.length == 2`
`-104 <= xtarget, ytarget <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two types of tiles: a 2x1 domino shape, and an ""L"" tromino shape. These shapes may be rotated.

XX  <- domino
XX  <- ""L"" tromino
X
Given N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.

(In a tiling, every square must be covered by a tile. Two tilings are different if and only if there are two 4-directionally adjacent cells on the board such that exactly one of the tilings has both squares occupied by a tile.)

Example:
Input: 3
Output: 5
Explanation: 
The five different ways are listed below, different letters indicates different tiles:
XYZ XXZ XYY XXY XYY
XYZ YYZ XZZ XYY XXY
Note:
N  will be in range `[1, 1000]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`S` and `T` are strings composed of lowercase letters. In `S`, no letter occurs more than once.

`S` was sorted in some custom order previously. We want to permute the characters of `T` so that they match the order that `S` was sorted. More specifically, if `x` occurs before `y` in `S`, then `x` should occur before `y` in the returned string.

Return any permutation of `T` (as a string) that satisfies this property.


Example :
Input: 
S = ""cba""
T = ""abcd""
Output: ""cbad""
Explanation: 
""a"", ""b"", ""c"" appear in S, so the order of ""a"", ""b"", ""c"" should be ""c"", ""b"", and ""a"". 
Since ""d"" does not appear in S, it can be at any position in T. ""dcba"", ""cdba"", ""cbda"" are also valid outputs.

Note:
`S` has length at most `26`, and no character is repeated in `S`.

`T` has length at most `200`.

`S` and `T` consist of lowercase letters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an array of strings `words`, return the number of `words[i]` that is a subsequence of `s`.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, `""ace""` is a subsequence of `""abcde""`.


Example 1:
Input: s = ""abcde"", words = [""a"",""bb"",""acd"",""ace""]
Output: 3
Explanation: There are three strings in words that are a subsequence of s: ""a"", ""acd"", ""ace"".


Example 2:
Input: s = ""dsahjpjauf"", words = [""ahjpjau"",""ja"",""ahbwzgqnuk"",""tnmlanowax""]
Output: 2

Constraints:
`1 <= s.length <= 5 * 104`
`1 <= words.length <= 5000`
`1 <= words[i].length <= 50`
`s` and `words[i]` consist of only lowercase English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let `f(x)` be the number of zeroes at the end of `x!`. (Recall that `x! = 1 * 2 * 3 * ... * x`, and by convention, `0! = 1`.)
For example, `f(3) = 0` because 3! = 6 has no zeroes at the end, while `f(11) = 2` because 11! = 39916800 has 2 zeroes at the end. Given `K`, find how many non-negative integers `x` have the property that `f(x) = K`.


Example 1:
Input: K = 0
Output: 5
Explanation: 0!, 1!, 2!, 3!, and 4! end with K = 0 zeroes.


Example 2:
Input: K = 5
Output: 0
Explanation: There is no x such that x! ends in K = 5 zeroes.

Note:
`K` will be an integer in the range `[0, 10^9]`.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A Tic-Tac-Toe board is given as a string array `board`. Return True if and only if it is possible to reach this board position during the course of a valid tic-tac-toe game.

The `board` is a 3 x 3 array, and consists of characters `"" ""`, `""X""`, and `""O""`.  The "" "" character represents an empty square.

Here are the rules of Tic-Tac-Toe:
Players take turns placing characters into empty squares ("" "").

The first player always places ""X"" characters, while the second player always places ""O"" characters.

""X"" and ""O"" characters are always placed into empty squares, never filled ones.

The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.

The game also ends if all squares are non-empty.

No more moves can be played if the game is over.


Example 1:
Input: board = [""O  "", ""   "", ""   ""]
Output: false
Explanation: The first player always plays ""X"".


Example 2:
Input: board = [""XOX"", "" X "", ""   ""]
Output: false
Explanation: Players take turns making moves.


Example 3:
Input: board = [""XXX"", ""   "", ""OOO""]
Output: false

Example 4:
Input: board = [""XOX"", ""O O"", ""XOX""]
Output: true
Note:
`board` is a length-3 array of strings, where each string `board[i]` has length 3.

Each `board[i][j]` is a character in the set `{"" "", ""X"", ""O""}`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given an array `A` of positive integers, and two positive integers `L` and `R` (`L <= R`).

Return the number of (contiguous, non-empty) subarrays such that the value of the maximum array element in that subarray is at least `L` and at most `R`.


Example :
Input: 
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].

Note:
L, R  and `A[i]` will be an integer in the range `[0, 10^9]`.

The length of `A` will be in the range of `[1, 50000]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a directed acyclic graph (DAG) of `n` nodes labeled from 0 to n - 1, find all possible paths from node `0` to node `n - 1`, and return them in any order.

The graph is given as follows: `graph[i]` is a list of all nodes you can visit from node `i` (i.e., there is a directed edge from node `i` to node `graph[i][j]`).


Example 1:
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.


Example 2:
Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

Example 3:
Input: graph = [[1],[]]
Output: [[0,1]]

Example 4:
Input: graph = [[1,2,3],[2],[3],[]]
Output: [[0,1,2,3],[0,2,3],[0,3]]

Example 5:
Input: graph = [[1,3],[2],[3],[]]
Output: [[0,1,2,3],[0,3]]

Constraints:
`n == graph.length`
`2 <= n <= 15`
`0 <= graph[i][j] < n`
`graph[i][j] != i` (i.e., there will be no self-loops).

The input graph is guaranteed to be a DAG.",0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We stack glasses in a pyramid, where the first row has `1` glass, the second row has `2` glasses, and so on until the 100th row.  Each glass holds one cup of champagne.

Then, some champagne is poured into the first glass at the top.  When the topmost glass is full, any excess liquid poured will fall equally to the glass immediately to the left and right of it.  When those glasses become full, any excess champagne will fall equally to the left and right of those glasses, and so on.  (A glass at the bottom row has its excess champagne fall on the floor.)
For example, after one cup of champagne is poured, the top most glass is full.  After two cups of champagne are poured, the two glasses on the second row are half full.  After three cups of champagne are poured, those two cups become full - there are 3 full glasses total now.  After four cups of champagne are poured, the third row has the middle glass half full, and the two outside glasses are a quarter full, as pictured below.

Now after pouring some non-negative integer cups of champagne, return how full the `jth` glass in the `ith` row is (both `i` and `j` are 0-indexed.)

Example 1:
Input: poured = 1, query_row = 1, query_glass = 1
Output: 0.00000
Explanation: We poured 1 cup of champange to the top glass of the tower (which is indexed as (0, 0)). There will be no excess liquid so all the glasses under the top glass will remain empty.


Example 2:
Input: poured = 2, query_row = 1, query_glass = 1
Output: 0.50000
Explanation: We poured 2 cups of champange to the top glass of the tower (which is indexed as (0, 0)). There is one cup of excess liquid. The glass indexed as (1, 0) and the glass indexed as (1, 1) will share the excess liquid equally, and each will get half cup of champange.


Example 3:
Input: poured = 100000009, query_row = 33, query_glass = 17
Output: 1.00000

Constraints:
`0 <= poured <= 109`
`0 <= query_glass <= query_row < 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the following, every capital letter represents some hexadecimal digit from `0` to `f`.

The red-green-blue color `""#AABBCC""` can be written as `""#ABC""` in shorthand.  For example, `""#15c""` is shorthand for the color `""#1155cc""`.

Now, say the similarity between two colors `""#ABCDEF""` and `""#UVWXYZ""` is `-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2`.

Given the color `""#ABCDEF""`, return a 7 character color that is most similar to `#ABCDEF`, and has a shorthand (that is, it can be represented as some `""#XYZ""`

Example 1:
Input: color = ""#09f166""
Output: ""#11ee66""
Explanation:  
The similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.

This is the highest among any shorthand color.

Note:
`color` is a string of length `7`.

`color` is a valid RGB color: for `i > 0`, `color[i]` is a hexadecimal digit from `0` to `f`
Any answer which has the same (highest) similarity as the best answer will be accepted.

All inputs and outputs should use lowercase letters, and the output is 7 characters.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two integer sequences `A` and `B` of the same non-zero length.

We are allowed to swap elements `A[i]` and `B[i]`.  Note that both elements are in the same index position in their respective sequences.

At the end of some number of swaps, `A` and `B` are both strictly increasing.  (A sequence is strictly increasing if and only if `A[0] < A[1] < A[2] < ... < A[A.length - 1]`.)
Given A and B, return the minimum number of swaps to make both sequences strictly increasing.  It is guaranteed that the given input always makes it possible.


Example:
Input: A = [1,3,5,4], B = [1,2,3,7]
Output: 1
Explanation: 
Swap A[3] and B[3].  Then the sequences are:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
which are both strictly increasing.

Note:
`A, B` are arrays with the same length, and that length will be in the range `[1, 1000]`.

`A[i], B[i]` are integer values in the range `[0, 2000]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We start at some node in a directed graph, and every turn, we walk along a directed edge of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.

We define a starting node to be safe if we must eventually walk to a terminal node. More specifically, there is a natural number `k`, so that we must have stopped at a terminal node in less than `k` steps for any choice of where to walk.

Return an array containing all the safe nodes of the graph. The answer should be sorted in ascending order.

The directed graph has `n` nodes with labels from `0` to `n - 1`, where `n` is the length of `graph`. The graph is given in the following form: `graph[i]` is a list of labels `j` such that `(i, j)` is a directed edge of the graph, going from node `i` to node `j`.


Example 1:
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.


Example 2:
Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
Output: [4]

Constraints:
`n == graph.length`
`1 <= n <= 104`
`0 <= graph[i].legnth <= n`
`graph[i]` is sorted in a strictly increasing order.

The graph may contain self-loops.

The number of edges in the graph will be in the range `[1, 4 * 104]`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` binary `grid`, where each `1` represents a brick and `0` represents an empty space. A brick is stable if:
It is directly connected to the top of the grid, or
At least one other brick in its four adjacent cells is stable.

You are also given an array `hits`, which is a sequence of erasures we want to apply. Each time we want to erase the brick at the location `hits[i] = (rowi, coli)`. The brick on that location (if it exists) will disappear. Some other bricks may no longer be stable because of that erasure and will fall. Once a brick falls, it is immediately erased from the `grid` (i.e., it does not land on other stable bricks).

Return an array `result`, where each `result[i]` is the number of bricks that will fall after the `ith` erasure is applied.

Note that an erasure may refer to a location with no brick, and if it does, no bricks drop.


Example 1:
Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
Output: [2]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,1,0]]
We erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,1,1,0]]
The two underlined bricks are no longer stable as they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:
[[1,0,0,0],
 [0,0,0,0]]
Hence the result is [2].


Example 2:
Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
Output: [0,0]
Explanation: Starting with the grid:
[[1,0,0,0],
 [1,1,0,0]]
We erase the underlined brick at (1,1), resulting in the grid:
[[1,0,0,0],
 [1,0,0,0]]
All remaining bricks are still stable, so no bricks fall. The grid remains the same:
[[1,0,0,0],
 [1,0,0,0]]
Next, we erase the underlined brick at (1,0), resulting in the grid:
[[1,0,0,0],
 [0,0,0,0]]
Once again, all remaining bricks are still stable, so no bricks fall.

Hence the result is [0,0].


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`grid[i][j]` is `0` or `1`.

`1 <= hits.length <= 4 * 104`
`hits[i].length == 2`
`0 <= xi <= m - 1`
`0 <= yi <= n - 1`
All `(xi, yi)` are unique.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`.

You should move each element of `nums` into one of the two arrays `A` and `B` such that `A` and `B` are non-empty, and `average(A) == average(B)`.

Return `true` if it is possible to achieve that and `false` otherwise.

Note that for an array `arr`, `average(arr)` is the sum of all the elements of `arr` over the length of `arr`.


Example 1:
Input: nums = [1,2,3,4,5,6,7,8]
Output: true
Explanation: We can split the array into [1,4,5,8] and [2,3,6,7], and both of them have an average of 4.5.


Example 2:
Input: nums = [3,1]
Output: false

Constraints:
`1 <= nums.length <= 30`
`0 <= nums[i] <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are two types of soup: type A and type B. Initially we have `N` ml of each type of soup. There are four kinds of operations:
Serve 100 ml of soup A and 0 ml of soup B
Serve 75 ml of soup A and 25 ml of soup B
Serve 50 ml of soup A and 50 ml of soup B
Serve 25 ml of soup A and 75 ml of soup B
When we serve some soup, we give it to someone and we no longer have it.  Each turn, we will choose from the four operations with equal probability 0.25. If the remaining volume of soup is not enough to complete the operation, we will serve as much as we can.  We stop once we no longer have some quantity of both types of soup.

Note that we do not have the operation where all 100 ml's of soup B are used first.  
Return the probability that soup A will be empty first, plus half the probability that A and B become empty at the same time.


Example:
Input: N = 50
Output: 0.625
Explanation: 
If we choose the first two operations, A will become empty first. For the third operation, A and B will become empty at the same time. For the fourth operation, B will become empty first. So the total probability of A becoming empty first plus half the probability that A and B become empty at the same time, is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.

Notes: 
`0 <= N <= 10^9`. 
Answers within `10^-6` of the true value will be accepted as correct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Sometimes people repeat letters to represent extra feeling, such as ""hello"" -> ""heeellooo"", ""hi"" -> ""hiiii"".  In these strings like ""heeellooo"", we have groups of adjacent letters that are all the same:  ""h"", ""eee"", ""ll"", ""ooo"".

For some given string `S`, a query word is stretchy if it can be made to be equal to `S` by any number of applications of the following extension operation: choose a group consisting of characters `c`, and add some number of characters `c` to the group so that the size of the group is 3 or more.

For example, starting with ""hello"", we could do an extension on the group ""o"" to get ""hellooo"", but we cannot get ""helloo"" since the group ""oo"" has size less than 3.  Also, we could do another extension like ""ll"" -> ""lllll"" to get ""helllllooo"".  If `S = ""helllllooo""`, then the query word ""hello"" would be stretchy because of these two extension operations: `query = ""hello"" -> ""hellooo"" -> ""helllllooo"" = S`.

Given a list of query words, return the number of words that are stretchy. 

Example:
Input: 
S = ""heeellooo""
words = [""hello"", ""hi"", ""helo""]
Output: 1
Explanation: 
We can extend ""e"" and ""o"" in the word ""hello"" to get ""heeellooo"".

We can't extend ""helo"" to get ""heeellooo"" because the group ""ll"" is not size 3 or more.


Constraints:
`0 <= len(S) <= 100`.

`0 <= len(words) <= 100`.

`0 <= len(words[i]) <= 100`.

`S` and all words in `words` consist only of lowercase letters",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given non-negative integers nums[i] which are written on a chalkboard.  Alice and Bob take turns erasing exactly one number from the chalkboard, with Alice starting first.  If erasing a number causes the bitwise XOR of all the elements of the chalkboard to become 0, then that player loses.  (Also, we'll say the bitwise XOR of one element is that element itself, and the bitwise XOR of no elements is 0.)
Also, if any player starts their turn with the bitwise XOR of all the elements of the chalkboard equal to 0, then that player wins.

Return True if and only if Alice wins the game, assuming both players play optimally.


Example:
Input: nums = [1, 1, 2]
Output: false
Explanation: 
Alice has two choices: erase 1 or erase 2. 
If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 2 = 3. Now Bob can remove any element he wants, because Alice will be the one to erase the last element and she will lose. 
If Alice erases 2 first, now nums becomes [1, 1]. The bitwise XOR of all the elements of the chalkboard is 1 XOR 1 = 0. Alice will lose.

Notes: 
`1 <= N <= 1000`. 
`0 <= nums[i] <= 2^16`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A website domain like ""discuss.leetcode.com"" consists of various subdomains. At the top level, we have ""com"", at the next level, we have ""leetcode.com"", and at the lowest level, ""discuss.leetcode.com"". When we visit a domain like ""discuss.leetcode.com"", we will also visit the parent domains ""leetcode.com"" and ""com"" implicitly.

Now, call a ""count-paired domain"" to be a count (representing the number of visits this domain received), followed by a space, followed by the address. An example of a count-paired domain might be ""9001 discuss.leetcode.com"".

We are given a list `cpdomains` of count-paired domains. We would like a list of count-paired domains, (in the same format as the input, and in any order), that explicitly counts the number of visits to each subdomain.


Example 1:
Input: 
[""9001 discuss.leetcode.com""]
Output: 
[""9001 discuss.leetcode.com"", ""9001 leetcode.com"", ""9001 com""]
Explanation: 
We only have one website domain: ""discuss.leetcode.com"". As discussed above, the subdomain ""leetcode.com"" and ""com"" will also be visited. So they will all be visited 9001 times.


Example 2:
Input: 
[""900 google.mail.com"", ""50 yahoo.com"", ""1 intel.mail.com"", ""5 wiki.org""]
Output: 
[""901 mail.com"",""50 yahoo.com"",""900 google.mail.com"",""5 wiki.org"",""5 org"",""1 intel.mail.com"",""951 com""]
Explanation: 
We will visit ""google.mail.com"" 900 times, ""yahoo.com"" 50 times, ""intel.mail.com"" once and ""wiki.org"" 5 times. For the subdomains, we will visit ""mail.com"" 900 + 1 = 901 times, ""com"" 900 + 50 + 1 = 951 times, and ""org"" 5 times.

Notes: 
The length of `cpdomains` will not exceed `100`. 
The length of each domain name will not exceed `100`.

Each address will have either 1 or 2 ""."" characters.

The input count in any count-paired domain will not exceed `10000`.

The answer output can be returned in any order.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a list of points in the plane. Return the area of the largest triangle that can be formed by any 3 of the points.


Example:
Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2
Explanation: 
The five points are show in the figure below. The red triangle is the largest.

Notes: 
`3 <= points.length <= 50`.

No points will be duplicated.

 `-50 <= points[i][j] <= 50`.

Answers within `10^-6` of the true value will be accepted as correct.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We partition a row of numbers `A` into at most `K` adjacent (non-empty) groups, then our score is the sum of the average of each group. What is the largest score we can achieve?
Note that our partition must use every number in A, and that scores are not necessarily integers.


Example:
Input: 
A = [9,1,2,3,9]
K = 3
Output: 20
Explanation: 
The best choice is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.

We could have also partitioned A into [9, 1], [2], [3, 9], for example.

That partition would lead to a score of 5 + 2 + 6 = 13, which is worse.

Note: 
`1 <= A.length <= 100`.

`1 <= A[i] <= 10000`.

`1 <= K <= A.length`.

Answers within `10^-6` of the correct answer will be accepted as correct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given the head node `root` of a binary tree, where additionally every node's value is either a 0 or a 1.

Return the same tree where every subtree (of the given tree) not containing a 1 has been removed.

(Recall that the subtree of a node X is X, plus every node that is a descendant of X.)

Example 1:
Input: [1,null,0,0,1]
Output: [1,null,0,null,1]
Explanation: 
Only the red nodes satisfy the property ""every subtree not containing a 1"".

The diagram on the right represents the answer.


Example 2:
Input: [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]

Example 3:
Input: [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]
Note: 
The binary tree will have at most `200 nodes`.

The value of each node will only be `0` or `1`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `routes` representing bus routes where `routes[i]` is a bus route that the `ith` bus repeats forever.

For example, if `routes[0] = [1, 5, 7]`, this means that the `0th` bus travels in the sequence `1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> ...` forever.

You will start at the bus stop `source` (You are not on any bus initially), and you want to go to the bus stop `target`. You can travel between bus stops by buses only.

Return the least number of buses you must take to travel from `source` to `target`. Return `-1` if it is not possible.


Example 1:
Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is take the first bus to the bus stop 7, then take the second bus to the bus stop 6.


Example 2:
Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1

Constraints:
`1 <= routes.length <= 500`.

`1 <= routes[i].length <= 105`
All the values of `routes[i]` are unique.

`sum(routes[i].length) <= 105`
`0 <= routes[i][j] < 106`
`0 <= source, target < 106`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We had some 2-dimensional coordinates, like `""(1, 3)""` or `""(2, 0.5)""`.  Then, we removed all commas, decimal points, and spaces, and ended up with the string `S`.  Return a list of strings representing all possibilities for what our original coordinates could have been.

Our original representation never had extraneous zeroes, so we never started with numbers like ""00"", ""0.0"", ""0.00"", ""1.0"", ""001"", ""00.01"", or any other number that can be represented with less digits.  Also, a decimal point within a number never occurs without at least one digit occuring before it, so we never started with numbers like "".1"".

The final answer list can be returned in any order.  Also note that all coordinates in the final answer have exactly one space between them (occurring after the comma.)

Example 1:
Input: ""(123)""
Output: [""(1, 23)"", ""(12, 3)"", ""(1.2, 3)"", ""(1, 2.3)""]

Example 2:
Input: ""(00011)""
Output:  [""(0.001, 1)"", ""(0, 0.011)""]
Explanation: 
0.0, 00, 0001 or 00.01 are not allowed.


Example 3:
Input: ""(0123)""
Output: [""(0, 123)"", ""(0, 12.3)"", ""(0, 1.23)"", ""(0.1, 23)"", ""(0.1, 2.3)"", ""(0.12, 3)""]

Example 4:
Input: ""(100)""
Output: [(10, 0)]
Explanation: 
1.0 is not allowed.

Note: 
`4 <= S.length <= 12`.

`S[0]` = ""("", `S[S.length - 1]` = "")"", and the other elements in `S` are digits.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given `head`, the head node of a linked list containing unique integer values.

We are also given the list `G`, a subset of the values in the linked list.

Return the number of connected components in `G`, where two values are connected if they appear consecutively in the linked list.


Example 1:
Input: 
head: 0->1->2->3
G = [0, 1, 3]
Output: 2
Explanation: 
0 and 1 are connected, so [0, 1] and [3] are the two connected components.


Example 2:
Input: 
head: 0->1->2->3->4
G = [0, 3, 1, 4]
Output: 2
Explanation: 
0 and 1 are connected, 3 and 4 are connected, so [0, 1] and [3, 4] are the two connected components.

Note: 
If `N` is the length of the linked list given by `head`, `1 <= N <= 10000`.

The value of each node in the linked list will be in the range` [0, N - 1]`.

`1 <= G.length <= 10000`.

`G` is a subset of all values in the linked list.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your car starts at position 0 and speed +1 on an infinite number line.  (Your car can go into negative positions.)
Your car drives automatically according to a sequence of instructions A (accelerate) and R (reverse).

When you get an instruction ""A"", your car does the following: `position += speed, speed *= 2`.

When you get an instruction ""R"", your car does the following: if your speed is positive then `speed = -1` , otherwise `speed = 1`.  (Your position stays the same.)
For example, after commands ""AAR"", your car goes to positions 0->1->3->3, and your speed goes to 1->2->4->-1.

Now for some target position, say the length of the shortest sequence of instructions to get there.


Example 1:
Input: 
target = 3
Output: 2
Explanation: 
The shortest instruction sequence is ""AA"".

Your position goes from 0->1->3.


Example 2:
Input: 
target = 6
Output: 5
Explanation: 
The shortest instruction sequence is ""AAARA"".

Your position goes from 0->1->3->7->7->6.

Note: 
`1 <= target <= 10000`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `paragraph` and a string array of the banned words `banned`, return the most frequent word that is not banned. It is guaranteed there is at least one word that is not banned, and that the answer is unique.

The words in `paragraph` are case-insensitive and the answer should be returned in lowercase.


Example 1:
Input: paragraph = ""Bob hit a ball, the hit BALL flew far after it was hit."", banned = [""hit""]
Output: ""ball""
Explanation: 
""hit"" occurs 3 times, but it is a banned word.

""ball"" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as ""ball,""), 
and that ""hit"" isn't the answer even though it occurs more because it is banned.


Example 2:
Input: paragraph = ""a."", banned = []
Output: ""a""

Constraints:
`1 <= paragraph.length <= 1000`
paragraph consists of English letters, space `' '`, or one of the symbols: `""!?',;.""`.

`0 <= banned.length <= 100`
`1 <= banned[i].length <= 10`
`banned[i]` consists of only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sentence `S` is given, composed of words separated by spaces. Each word consists of lowercase and uppercase letters only.

We would like to convert the sentence to ""Goat Latin"" (a made-up language similar to Pig Latin.)
The rules of Goat Latin are as follows:
If a word begins with a vowel (a, e, i, o, or u), append `""ma""` to the end of the word.

	For example, the word 'apple' becomes 'applema'.

	 
If a word begins with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add `""ma""`.

	For example, the word `""goat""` becomes `""oatgma""`.

	 
Add one letter `'a'` to the end of each word per its word index in the sentence, starting with 1.

	For example, the first word gets `""a""` added to the end, the second word gets `""aa""` added to the end and so on.

Return the final sentence representing the conversion from `S` to Goat Latin. 

Example 1:
Input: ""I speak Goat Latin""
Output: ""Imaa peaksmaaa oatGmaaaa atinLmaaaaa""

Example 2:
Input: ""The quick brown fox jumped over the lazy dog""
Output: ""heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa""
Notes:
`S` contains only uppercase, lowercase and spaces. Exactly one space between each word.

`1 <= S.length <= 150`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Some people will make friend requests. The list of their ages is given and `ages[i]` is the age of the ith person. 
Person A will NOT friend request person B (B != A) if any of the following conditions are true:
`age[B] <= 0.5 * age[A] + 7`
`age[B] > age[A]`
`age[B] > 100 && age[A] < 100`
Otherwise, A will friend request B.

Note that if A requests B, B does not necessarily request A.  Also, people will not friend request themselves.

How many total friend requests are made?

Example 1:
Input: [16,16]
Output: 2
Explanation: 2 people friend request each other.


Example 2:
Input: [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.


Example 3:
Input: [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.

Notes:
`1 <= ages.length <= 20000`.

`1 <= ages[i] <= 120`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have jobs: `difficulty[i]` is the difficulty of the `i`th job, and `profit[i]` is the profit of the `i`th job. 
Now we have some workers. `worker[i]` is the ability of the `i`th worker, which means that this worker can only complete a job with difficulty at most `worker[i]`. 
Every worker can be assigned at most one job, but one job can be completed multiple times.

For example, if 3 people attempt the same job that pays $1, then the total profit will be $3.  If a worker cannot complete any job, his profit is $0.

What is the most profit we can make?

Example 1:
Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
Output: 100 
Explanation: Workers are assigned jobs of difficulty [4,4,6,6] and they get profit of [20,20,30,30] seperately.

Notes:
`1 <= difficulty.length = profit.length <= 10000`
`1 <= worker.length <= 10000`
`difficulty[i], profit[i], worker[i]`  are in range `[1, 10^5]`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `n x n` binary matrix `grid`. You are allowed to change at most one `0` to be `1`.

Return the size of the largest island in `grid` after applying this operation.

An island is a 4-directionally connected group of `1`s.


Example 1:
Input: grid = [[1,0],[0,1]]
Output: 3
Explanation: Change one 0 to 1 and connect two 1s, then we get an island with area = 3.


Example 2:
Input: grid = [[1,1],[1,0]]
Output: 4
Explanation: Change the 0 to 1 and make the island bigger, only one island with area = 4.


Example 3:
Input: grid = [[1,1],[1,1]]
Output: 4
Explanation: Can't change any 0 to 1, only one island with area = 4.


Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 500`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let's define a function `countUniqueChars(s)` that returns the number of unique characters on `s`, for example if `s = ""LEETCODE""` then `""L""`, `""T""`,`""C""`,`""O""`,`""D""` are the unique characters since they appear only once in `s`, therefore `countUniqueChars(s) = 5`.

On this problem given a string `s` we need to return the sum of `countUniqueChars(t)` where `t` is a substring of `s`. Notice that some substrings can be repeated so on this case you have to count the repeated ones too.

Since the answer can be very large, return the answer modulo `10 ^ 9 + 7`.


Example 1:
Input: s = ""ABC""
Output: 10
Explanation: All possible substrings are: ""A"",""B"",""C"",""AB"",""BC"" and ""ABC"".

Evey substring is composed with only unique letters.

Sum of lengths of all substring is 1 + 1 + 1 + 2 + 2 + 3 = 10

Example 2:
Input: s = ""ABA""
Output: 8
Explanation: The same as example 1, except `countUniqueChars`(""ABA"") = 1.


Example 3:
Input: s = ""LEETCODE""
Output: 92

Constraints:
`0 <= s.length <= 10^4`
`s` contain upper-case English letters only.",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `N`, how many ways can we write it as a sum of consecutive positive integers?

Example 1:
Input: 5
Output: 2
Explanation: 5 = 5 = 2 + 3

Example 2:
Input: 9
Output: 3
Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4

Example 3:
Input: 15
Output: 4
Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
Note: `1 <= N <= 10 ^ 9`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a string `s` of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like `s = ""abbxxxxzyy""` has the groups `""a""`, `""bb""`, `""xxxx""`, `""z""`, and `""yy""`.

A group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `""xxxx""` has the interval `[3,6]`.

A group is considered large if it has 3 or more characters.

Return the intervals of every large group sorted in increasing order by start index.


Example 1:
Input: s = ""abbxxxxzzy""
Output: [[3,6]]
Explanation: `""xxxx"" is the only `large group with start index 3 and end index 6.


Example 2:
Input: s = ""abc""
Output: []
Explanation: We have groups ""a"", ""b"", and ""c"", none of which are large groups.


Example 3:
Input: s = ""abcdddeeeeaabbbcd""
Output: [[3,5],[6,9],[12,14]]
Explanation: The large groups are ""ddd"", ""eeee"", and ""bbb"".


Example 4:
Input: s = ""aba""
Output: []

Constraints:
`1 <= s.length <= 1000`
`s` contains lower-case English letters only.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a personal information string `S`, which may represent either an email address or a phone number.

We would like to mask this personal information according to the following rules:
1. Email address:
We define a name to be a string of `length ≥ 2` consisting of only lowercase letters `a-z` or uppercase letters `A-Z`.

An email address starts with a name, followed by the symbol `'@'`, followed by a name, followed by the dot `'.'` and followed by a name. 
All email addresses are guaranteed to be valid and in the format of `""name1@name2.name3"".`
To mask an email, all names must be converted to lowercase and all letters between the first and last letter of the first name must be replaced by 5 asterisks `'*'`.

2. Phone number:
A phone number is a string consisting of only the digits `0-9` or the characters from the set `{'+', '-', '(', ')', ' '}.` You may assume a phone number contains 10 to 13 digits.

The last 10 digits make up the local number, while the digits before those make up the country code. Note that the country code is optional. We want to expose only the last 4 digits and mask all other digits.

The local number should be formatted and masked as `""***-***-1111"", `where `1` represents the exposed digits.

To mask a phone number with country code like `""+111 111 111 1111""`, we write it in the form `""+***-***-***-1111"".`  The `'+'` sign and the first `'-'` sign before the local number should only exist if there is a country code.  For example, a 12 digit phone number mask should start with `""+**-""`.

Note that extraneous characters like `""("", "")"", "" ""`, as well as extra dashes or plus signs not part of the above formatting scheme should be removed.

Return the correct ""mask"" of the information provided.


Example 1:
Input: ""LeetCode@LeetCode.com""
Output: ""l*****e@leetcode.com""
Explanation: All names are converted to lowercase, and the letters between the
             first and last letter of the first name is replaced by 5 asterisks.

             Therefore, ""leetcode"" -> ""l*****e"".


Example 2:
Input: ""AB@qq.com""
Output: ""a*****b@qq.com""
Explanation: There must be 5 asterisks between the first and last letter 
             of the first name ""ab"". Therefore, ""ab"" -> ""a*****b"".


Example 3:
Input: ""1(234)567-890""
Output: ""***-***-7890""
Explanation: 10 digits in the phone number, which means all digits make up the local number.


Example 4:
Input: ""86-(10)12345678""
Output: ""+**-***-***-5678""
Explanation: 12 digits, 2 digits for country code and 10 digits for local number. 
Notes:
`S.length <= 40`.

Emails have length at least 8.

Phone numbers have length at least 10.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `n x n` binary matrix `image`, flip the image horizontally, then invert it, and return the resulting image.

To flip an image horizontally means that each row of the image is reversed.

For example, flipping `[1,1,0]` horizontally results in `[0,1,1]`.

To invert an image means that each `0` is replaced by `1`, and each `1` is replaced by `0`.

For example, inverting `[0,1,1]` results in `[1,0,0]`.


Example 1:
Input: image = [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].

Then, invert the image: [[1,0,0],[0,1,0],[1,1,1]]

Example 2:
Input: image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].

Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]

Constraints:
`n == image.length`
`n == image[i].length`
`1 <= n <= 20`
`images[i][j]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"To some string `S`, we will perform some replacement operations that replace groups of letters with new ones (not necessarily the same size).

Each replacement operation has `3` parameters: a starting index `i`, a source word `x` and a target word `y`.  The rule is that if `x` starts at position `i` in the original string `S`, then we will replace that occurrence of `x` with `y`.  If not, we do nothing.

For example, if we have `S = ""abcd""` and we have some replacement operation `i = 2, x = ""cd"", y = ""ffff""`, then because `""cd""` starts at position `2` in the original string `S`, we will replace it with `""ffff""`.

Using another example on `S = ""abcd""`, if we have both the replacement operation `i = 0, x = ""ab"", y = ""eee""`, as well as another replacement operation `i = 2, x = ""ec"", y = ""ffff""`, this second operation does nothing because in the original string `S[2] = 'c'`, which doesn't match `x[0] = 'e'`.

All these operations occur simultaneously.  It's guaranteed that there won't be any overlap in replacement: for example, `S = ""abc"", indexes = [0, 1], sources = [""ab"",""bc""]` is not a valid test case.


Example 1:
Input: S = ""abcd"", indexes = [0, 2], sources = [""a"", ""cd""], targets = [""eee"", ""ffff""]
Output: ""eeebffff""
Explanation:
""a"" starts at index 0 in S, so it's replaced by ""eee"".

""cd"" starts at index 2 in S, so it's replaced by ""ffff"".


Example 2:
Input: S = ""abcd"", indexes = [0, 2], sources = [""ab"",""ec""], targets = [""eee"",""ffff""]
Output: ""eeecd""
Explanation:
""ab"" starts at index 0 in S, so it's replaced by ""eee"".

""ec"" doesn't starts at index 2 in the original S, so we do nothing.


Constraints:
`0 <= S.length <= 1000`
`S` consists of only lowercase English letters.

`0 <= indexes.length <= 100`
`0 <= indexes[i] < S.length`
`sources.length == indexes.length`
`targets.length == indexes.length`
`1 <= sources[i].length, targets[i].length <= 50`
`sources[i]` and `targets[i]` consist of only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An undirected, connected tree with `N` nodes labelled `0...N-1` and `N-1` `edges` are given.

The `i`th edge connects nodes `edges[i][0] `and` edges[i][1]` together.

Return a list `ans`, where `ans[i]` is the sum of the distances between node `i` and all other nodes.


Example 1:
Input: N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
Explanation: 
Here is a diagram of the given tree:
  0
 / \
1   2
   /|\
  3 4 5
We can see that dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
equals 1 + 1 + 2 + 2 + 2 = 8.  Hence, answer[0] = 8, and so on.

Note: `1 <= N <= 10000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two images `img1` and `img2` both of size `n x n`, represented as binary, square matrices of the same size. (A binary matrix has only 0s and 1s as values.)
We translate one image however we choose (sliding it left, right, up, or down any number of units), and place it on top of the other image.  After, the overlap of this translation is the number of positions that have a 1 in both images.

(Note also that a translation does not include any kind of rotation.)
What is the largest possible overlap?

Example 1:
Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[0,0,1]]
Output: 3
Explanation: We slide img1 to right by 1 unit and down by 1 unit.

The number of positions that have a 1 in both images is 3. (Shown in red)

Example 2:
Input: img1 = [[1]], img2 = [[1]]
Output: 1

Example 3:
Input: img1 = [[0]], img2 = [[0]]
Output: 0

Constraints:
`n == img1.length`
`n == img1[i].length`
`n == img2.length `
`n == img2[i].length`
`1 <= n <= 30`
`img1[i][j]` is `0` or `1`.

`img2[i][j]` is `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An axis-aligned rectangle is represented as a list `[x1, y1, x2, y2]`, where `(x1, y1)` is the coordinate of its bottom-left corner, and `(x2, y2)` is the coordinate of its top-right corner. Its top and bottom edges are parallel to the X-axis, and its left and right edges are parallel to the Y-axis.

Two rectangles overlap if the area of their intersection is positive. To be clear, two rectangles that only touch at the corner or edges do not overlap.

Given two axis-aligned rectangles `rec1` and `rec2`, return `true` if they overlap, otherwise return `false`.


Example 1:
Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
Output: true

Example 2:
Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
Output: false

Example 3:
Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
Output: false

Constraints:
`rect1.length == 4`
`rect2.length == 4`
`-109 <= rec1[i], rec2[i] <= 109`
`rec1[0] <= rec1[2]` and `rec1[1] <= rec1[3]`
`rec2[0] <= rec2[2]` and `rec2[1] <= rec2[3]`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice plays the following game, loosely based on the card game ""21"".

Alice starts with `0` points, and draws numbers while she has less than `K` points.  During each draw, she gains an integer number of points randomly from the range `[1, W]`, where `W` is an integer.  Each draw is independent and the outcomes have equal probabilities.

Alice stops drawing numbers when she gets `K` or more points.  What is the probability that she has `N` or less points?

Example 1:
Input: N = 10, K = 1, W = 10
Output: 1.00000
Explanation:  Alice gets a single card, then stops.


Example 2:
Input: N = 6, K = 1, W = 10
Output: 0.60000
Explanation:  Alice gets a single card, then stops.

In 6 out of W = 10 possibilities, she is at or below N = 6 points.


Example 3:
Input: N = 21, K = 17, W = 10
Output: 0.73278
Note:
`0 <= K <= N <= 10000`
`1 <= W <= 10000`
Answers will be accepted as correct if they are within `10^-5` of the correct answer.

The judging time limit has been reduced for this question.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `N` dominoes in a line, and we place each domino vertically upright.

In the beginning, we simultaneously push some of the dominoes either to the left or to the right.

After each second, each domino that is falling to the left pushes the adjacent domino on the left.

Similarly, the dominoes falling to the right push their adjacent dominoes standing on the right.

When a vertical domino has dominoes falling on it from both sides, it stays still due to the balance of the forces.

For the purposes of this question, we will consider that a falling domino expends no additional force to a falling or already fallen domino.

Given a string ""S"" representing the initial state. `S[i] = 'L'`, if the i-th domino has been pushed to the left; `S[i] = 'R'`, if the i-th domino has been pushed to the right; `S[i] = '.'`, if the `i`-th domino has not been pushed.

Return a string representing the final state. 

Example 1:
Input: "".L.R...LR..L..""
Output: ""LL.RR.LLRRLL..""

Example 2:
Input: ""RR.L""
Output: ""RR.L""
Explanation: The first domino expends no additional force on the second domino.

Note:
`0 <= N <= 10^5`
String `dominoes` contains only `'L`', `'R'` and `'.'`",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Two strings `X` and `Y` are similar if we can swap two letters (in different positions) of `X`, so that it equals `Y`. Also two strings `X` and `Y` are similar if they are equal.

For example, `""tars""` and `""rats""` are similar (swapping at positions `0` and `2`), and `""rats""` and `""arts""` are similar, but `""star""` is not similar to `""tars""`, `""rats""`, or `""arts""`.

Together, these form two connected groups by similarity: `{""tars"", ""rats"", ""arts""}` and `{""star""}`.  Notice that `""tars""` and `""arts""` are in the same group even though they are not similar.  Formally, each group is such that a word is in the group if and only if it is similar to at least one other word in the group.

We are given a list `strs` of strings where every string in `strs` is an anagram of every other string in `strs`. How many groups are there?

Example 1:
Input: strs = [""tars"",""rats"",""arts"",""star""]
Output: 2

Example 2:
Input: strs = [""omv"",""ovm""]
Output: 1

Constraints:
`1 <= strs.length <= 300`
`1 <= strs[i].length <= 300`
`strs[i]` consists of lowercase letters only.

All words in `strs` have the same length and are anagrams of each other.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A `3 x 3` magic square is a `3 x 3` grid filled with distinct numbers from `1` to `9` such that each row, column, and both diagonals all have the same sum.

Given a `row x col` `grid` of integers, how many `3 x 3` ""magic square"" subgrids are there?  (Each subgrid is contiguous).


Example 1:
Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
Explanation: 
The following subgrid is a 3 x 3 magic square:
while this one is not:
In total, there is only one magic square inside the given grid.


Example 2:
Input: grid = [[8]]
Output: 0

Example 3:
Input: grid = [[4,4],[3,3]]
Output: 0

Example 4:
Input: grid = [[4,7,8],[9,5,1],[2,3,6]]
Output: 0

Constraints:
`row == grid.length`
`col == grid[i].length`
`1 <= row, col <= 10`
`0 <= grid[i][j] <= 15`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `N` rooms and you start in room `0`.  Each room has a distinct number in `0, 1, 2, ..., N-1`, and each room may have some keys to access the next room. 
Formally, each room `i` has a list of keys `rooms[i]`, and each key `rooms[i][j]` is an integer in `[0, 1, ..., N-1]` where `N = rooms.length`.  A key `rooms[i][j] = v` opens the room with number `v`.

Initially, all the rooms start locked (except for room `0`). 
You can walk back and forth between rooms freely.

Return `true` if and only if you can enter every room.


Example 1:
Input: [[1],[2],[3],[]]
Output: true
Explanation:  
We start in room 0, and pick up key 1.

We then go to room 1, and pick up key 2.

We then go to room 2, and pick up key 3.

We then go to room 3.  Since we were able to go to every room, we return true.


Example 2:
Input: [[1,3],[3,0,1],[2],[0]]
Output: false
Explanation: We can't enter the room with number 2.

Note:
`1 <= rooms.length <= 1000`
`0 <= rooms[i].length <= 1000`
The number of keys in all rooms combined is at most `3000`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S` of digits, such as `S = ""123456579""`, we can split it into a Fibonacci-like sequence `[123, 456, 579].`
Formally, a Fibonacci-like sequence is a list `F` of non-negative integers such that:
`0 <= F[i] <= 2^31 - 1`, (that is, each integer fits a 32-bit signed integer type);
`F.length >= 3`;
and` F[i] + F[i+1] = F[i+2] `for all `0 <= i < F.length - 2`.

Also, note that when splitting the string into pieces, each piece must not have extra leading zeroes, except if the piece is the number 0 itself.

Return any Fibonacci-like sequence split from `S`, or return `[]` if it cannot be done.


Example 1:
Input: ""123456579""
Output: [123,456,579]

Example 2:
Input: ""11235813""
Output: [1,1,2,3,5,8,13]

Example 3:
Input: ""112358130""
Output: []
Explanation: The task is impossible.


Example 4:
Input: ""0123""
Output: []
Explanation: Leading zeroes are not allowed, so ""01"", ""2"", ""3"" is not valid.


Example 5:
Input: ""1101111""
Output: [110, 1, 111]
Explanation: The output [11, 0, 11, 11] would also be accepted.

Note: 
`1 <= S.length <= 200`
`S` contains only digits.",0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is an interactive problem.

You are given an array of unique strings `wordlist` where `wordlist[i]` is `6` letters long, and one word in this list is chosen as `secret`.

You may call `Master.guess(word)` to guess a word. The guessed word should have type `string` and must be from the original list with `6` lowercase letters.

This function returns an `integer` type, representing the number of exact matches (value and position) of your guess to the `secret` word. Also, if your guess is not in the given wordlist, it will return `-1` instead.

For each test case, you have exactly `10` guesses to guess the word. At the end of any number of calls, if you have made `10` or fewer calls to `Master.guess` and at least one of these guesses was `secret`, then you pass the test case.


Example 1:
Input: secret = ""acckzz"", wordlist = [""acckzz"",""ccbazz"",""eiowzz"",""abcczz""], numguesses = 10
Output: You guessed the secret word correctly.
Explanation:
master.guess(""aaaaaa"") returns -1, because ""aaaaaa"" is not in wordlist.

master.guess(""acckzz"") returns 6, because ""acckzz"" is secret and has all 6 matches.

master.guess(""ccbazz"") returns 3, because ""ccbazz"" has 3 matches.

master.guess(""eiowzz"") returns 2, because ""eiowzz"" has 2 matches.

master.guess(""abcczz"") returns 4, because ""abcczz"" has 4 matches.

We made 5 calls to master.guess and one of them was the secret, so we pass the test case.


Example 2:
Input: secret = ""hamada"", wordlist = [""hamada"",""khaled""], numguesses = 10
Output: You guessed the secret word correctly.

Constraints:
`1 <= wordlist.length <= 100`
`wordlist[i].length == 6`
`wordlist[i]` consist of lowercase English letters.

All the strings of `wordlist` are unique.

`secret` exists in `wordlist`.

`numguesses == 10`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, return `true` if they are equal when both are typed into empty text editors. `'#'` means a backspace character.

Note that after backspacing an empty text, the text will continue empty.


Example 1:
Input: s = ""ab#c"", t = ""ad#c""
Output: true
Explanation: Both s and t become ""ac"".


Example 2:
Input: s = ""ab##"", t = ""c#d#""
Output: true
Explanation: Both s and t become """".


Example 3:
Input: s = ""a##c"", t = ""#a#c""
Output: true
Explanation: Both s and t become ""c"".


Example 4:
Input: s = ""a#c"", t = ""b""
Output: false
Explanation: s becomes ""c"" while t becomes ""b"".


Constraints:
`1 <= s.length, t.length <= 200`
`s` and `t` only contain lowercase letters and `'#'` characters.

Follow up: Can you solve it in `O(n)` time and `O(1)` space?",0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You may recall that an array `arr` is a mountain array if and only if:
`arr.length >= 3`
There exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that:
	
`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`
`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`
Given an integer array `arr`, return the length of the longest subarray, which is a mountain. Return `0` if there is no mountain subarray.


Example 1:
Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] which has length 5.


Example 2:
Input: arr = [2,2,2]
Output: 0
Explanation: There is no mountain.


Constraints:
`1 <= arr.length <= 104`
`0 <= arr[i] <= 104`
Follow up:
Can you solve it using only one pass?
Can you solve it in `O(1)` space?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice has a `hand` of cards, given as an array of integers.

Now she wants to rearrange the cards into groups so that each group is size `W`, and consists of `W` consecutive cards.

Return `true` if and only if she can.

Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/

Example 1:
Input: hand = [1,2,3,6,2,3,4,7,8], W = 3
Output: true
Explanation: Alice's hand can be rearranged as [1,2,3],[2,3,4],[6,7,8]

Example 2:
Input: hand = [1,2,3,4,5], W = 4
Output: false
Explanation: Alice's hand can't be rearranged into groups of 4.


Constraints:
`1 <= hand.length <= 10000`
`0 <= hand[i] <= 10^9`
`1 <= W <= hand.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An undirected, connected graph of N nodes (labeled `0, 1, 2, ..., N-1`) is given as `graph`.

`graph.length = N`, and `j != i` is in the list `graph[i]` exactly once, if and only if nodes `i` and `j` are connected.

Return the length of the shortest path that visits every node. You may start and stop at any node, you may revisit nodes multiple times, and you may reuse edges.


Example 1:
Input: [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]

Example 2:
Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]
Note:
`1 <= graph.length <= 12`
`0 <= graph[i].length < graph.length`",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array representing a row of `seats` where `seats[i] = 1` represents a person sitting in the `ith` seat, and `seats[i] = 0` represents that the `ith` seat is empty (0-indexed).

There is at least one empty seat, and at least one person sitting.

Alex wants to sit in the seat such that the distance between him and the closest person to him is maximized. 
Return that maximum distance to the closest person.


Example 1:
Input: seats = [1,0,0,0,1,0,1]
Output: 2
Explanation: 
If Alex sits in the second open seat (i.e. seats[2]), then the closest person has distance 2.

If Alex sits in any other open seat, the closest person has distance 1.

Thus, the maximum distance to the closest person is 2.


Example 2:
Input: seats = [1,0,0,0]
Output: 3
Explanation: 
If Alex sits in the last seat (i.e. seats[3]), the closest person is 3 seats away.

This is the maximum distance possible, so the answer is 3.


Example 3:
Input: seats = [0,1]
Output: 1

Constraints:
`2 <= seats.length <= 2 * 104`
`seats[i]` is `0` or `1`.

At least one seat is empty.

At least one seat is occupied.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a list of (axis-aligned) `rectangles`. Each `rectangle[i] = [xi1, yi1, xi2, yi2] `, where `(xi1, yi1)` are the coordinates of the bottom-left corner, and `(xi2, yi2)` are the coordinates of the top-right corner of the `ith` rectangle.

Find the total area covered by all `rectangles` in the plane. Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: rectangles = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Explanation: As illustrated in the picture.


Example 2:
Input: rectangles = [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49.


Constraints:
`1 <= rectangles.length <= 200`
`rectanges[i].length = 4`
`0 <= rectangles[i][j] <= 109`
The total area covered by all rectangles will never exceed `263 - 1` and thus will fit in a 64-bit signed integer.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"In a group of N people (labelled `0, 1, 2, ..., N-1`), each person has different amounts of money, and different levels of quietness.

For convenience, we'll call the person with label `x`, simply ""person `x`"".

We'll say that `richer[i] = [x, y]` if person `x` definitely has more money than person `y`.  Note that `richer` may only be a subset of valid observations.

Also, we'll say `quiet[x] = q` if person x has quietness `q`.

Now, return `answer`, where `answer[x] = y` if `y` is the least quiet person (that is, the person `y` with the smallest value of `quiet[y]`), among all people who definitely have equal to or more money than person `x`.


Example 1:
Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]
Output: [5,5,2,5,4,5,6,7]
Explanation: 
answer[0] = 5.

Person 5 has more money than 3, which has more money than 1, which has more money than 0.

The only person who is quieter (has lower quiet[x]) is person 7, but
it isn't clear if they have more money than person 0.

answer[7] = 7.

Among all people that definitely have equal to or more money than person 7
(which could be persons 3, 4, 5, 6, or 7), the person who is the quietest (has lower quiet[x])
is person 7.

The other answers can be filled out with similar reasoning.

Note:
`1 <= quiet.length = N <= 500`
`0 <= quiet[i] < N`, all `quiet[i]` are different.

`0 <= richer.length <= N * (N-1) / 2`
`0 <= richer[i][j] < N`
`richer[i][0] != richer[i][1]`
`richer[i]`'s are all different.

The observations in `richer` are all logically consistent.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let's call an array `arr` a mountain if the following properties hold:
`arr.length >= 3`
There exists some `i` with `0 < i < arr.length - 1` such that:
	
`arr[0] < arr[1] < ... arr[i-1] < arr[i] `
`arr[i] > arr[i+1] > ... > arr[arr.length - 1]`
Given an integer array `arr` that is guaranteed to be a mountain, return any `i` such that `arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`.


Example 1:
Input: arr = [0,1,0]
Output: 1

Example 2:
Input: arr = [0,2,1,0]
Output: 1

Example 3:
Input: arr = [0,10,5,2]
Output: 1

Example 4:
Input: arr = [3,4,5,1]
Output: 2

Example 5:
Input: arr = [24,69,100,99,79,78,67,36,26,19]
Output: 2

Constraints:
`3 <= arr.length <= 104`
`0 <= arr[i] <= 106`
`arr` is guaranteed to be a mountain array.

Follow up: Finding the `O(n)` is straightforward, could you find an `O(log(n))` solution?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`N` cars are going to the same destination along a one lane road.  The destination is `target` miles away.

Each car `i` has a constant speed `speed[i]` (in miles per hour), and initial position `position[i]` miles towards the target along the road.

A car can never pass another car ahead of it, but it can catch up to it, and drive bumper to bumper at the same speed.

The distance between these two cars is ignored - they are assumed to have the same position.

A car fleet is some non-empty set of cars driving at the same position and same speed.  Note that a single car is also a car fleet.

If a car catches up to a car fleet right at the destination point, it will still be considered as one car fleet.

How many car fleets will arrive at the destination?

Example 1:
Input: target = 12, position = [10,8,0,5,3], speed = [2,4,1,1,3]
Output: 3
Explanation:
The cars starting at 10 and 8 become a fleet, meeting each other at 12.

The car starting at 0 doesn't catch up to any other car, so it is a fleet by itself.

The cars starting at 5 and 3 become a fleet, meeting each other at 6.

Note that no other cars meet these fleets before the destination, so the answer is 3.

Note:
`0 <= N <= 10 ^ 4`
`0 < target <= 10 ^ 6`
`0 < speed[i] <= 10 ^ 6`
`0 <= position[i] < target`
All initial positions are different.",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Strings `s1` and `s2` are `k`-similar (for some non-negative integer `k`) if we can swap the positions of two letters in `s1` exactly `k` times so that the resulting string equals `s2`.

Given two anagrams `s1` and `s2`, return the smallest `k` for which `s1` and `s2` are `k`-similar.


Example 1:
Input: s1 = ""ab"", s2 = ""ba""
Output: 1

Example 2:
Input: s1 = ""abc"", s2 = ""bca""
Output: 2

Example 3:
Input: s1 = ""abac"", s2 = ""baca""
Output: 2

Example 4:
Input: s1 = ""aabc"", s2 = ""abca""
Output: 2

Constraints:
`1 <= s1.length <= 20`
`s2.length == s1.length`
`s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', 'f'}`.

`s2` is an anagram of `s1`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an exam room, there are `N` seats in a single row, numbered `0, 1, 2, ..., N-1`.

When a student enters the room, they must sit in the seat that maximizes the distance to the closest person.  If there are multiple such seats, they sit in the seat with the lowest number.  (Also, if no one is in the room, then the student sits at seat number 0.)
Return a class `ExamRoom(int N)` that exposes two functions: `ExamRoom.seat()` returning an `int` representing what seat the student sat in, and `ExamRoom.leave(int p)` representing that the student in seat number `p` now leaves the room.  It is guaranteed that any calls to `ExamRoom.leave(p)` have a student sitting in seat `p`.


Example 1:
Input: [""ExamRoom"",""seat"",""seat"",""seat"",""seat"",""leave"",""seat""], [[10],[],[],[],[],[4],[]]
Output: [null,0,9,4,2,null,5]
Explanation:
ExamRoom(10) -> null
seat() -> 0, no one is in the room, then the student sits at seat number 0.

seat() -> 9, the student sits at the last seat number 9.

seat() -> 4, the student sits at the last seat number 4.

seat() -> 2, the student sits at the last seat number 2.

leave(4) -> null
seat() -> 5, the student sits at the last seat number 5.

​​​​​​​
Note:
`1 <= N <= 10^9`
`ExamRoom.seat()` and `ExamRoom.leave()` will be called at most `10^4` times across all test cases.

Calls to `ExamRoom.leave(p)` are guaranteed to have a student currently sitting in seat number `p`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a balanced parentheses string `S`, compute the score of the string based on the following rule:
`()` has score 1
`AB` has score `A + B`, where A and B are balanced parentheses strings.

`(A)` has score `2 * A`, where A is a balanced parentheses string.


Example 1:
Input: ""()""
Output: 1

Example 2:
Input: ""(())""
Output: 2

Example 3:
Input: ""()()""
Output: 2

Example 4:
Input: ""(()(()))""
Output: 6
Note:
`S` is a balanced parentheses string, containing only `(` and `)`.

`2 <= S.length <= 50`",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `N` workers.  The `i`-th worker has a `quality[i]` and a minimum wage expectation `wage[i]`.

Now we want to hire exactly `K` workers to form a paid group.  When hiring a group of K workers, we must pay them according to the following rules:
Every worker in the paid group should be paid in the ratio of their quality compared to other workers in the paid group.

Every worker in the paid group must be paid at least their minimum wage expectation.

Return the least amount of money needed to form a paid group satisfying the above conditions.


Example 1:
Input: quality = [10,20,5], wage = [70,50,30], K = 2
Output: 105.00000
Explanation: We pay 70 to 0-th worker and 35 to 2-th worker.


Example 2:
Input: quality = [3,1,10,10,1], wage = [4,8,2,2,7], K = 3
Output: 30.66667
Explanation: We pay 4 to 0-th worker, 13.33333 to 2-th and 3-th workers seperately. 
Note:
`1 <= K <= N <= 10000`, where `N = quality.length = wage.length`
`1 <= quality[i] <= 10000`
`1 <= wage[i] <= 10000`
Answers within `10^-5` of the correct answer will be considered correct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a special square room with mirrors on each of the four walls.  Except for the southwest corner, there are receptors on each of the remaining corners, numbered `0`, `1`, and `2`.

The square room has walls of length `p`, and a laser ray from the southwest corner first meets the east wall at a distance `q` from the `0`th receptor.

Return the number of the receptor that the ray meets first.  (It is guaranteed that the ray will meet a receptor eventually.)

Example 1:
Input: p = 2, q = 1
Output: 2
Explanation: The ray meets receptor 2 the first time it gets reflected back to the left wall.

Note:
`1 <= p <= 1000`
`0 <= q <= p`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `a` and `b`, return `true` if you can swap two letters in `a` so the result is equal to `b`, otherwise, return `false`.

Swapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `a[i]` and `b[j]`. For example, swapping at indices `0` and `2` in `""abcd""` results in `""cbad""`.


Example 1:
Input: a = ""ab"", b = ""ba""
Output: true
Explanation: You can swap a[0] = 'a' and a[1] = 'b' to get ""ba"", which is equal to b.


Example 2:
Input: a = ""ab"", b = ""ab""
Output: false
Explanation: The only letters you can swap are a[0] = 'a' and a[1] = 'b', which results in ""ba"" != b.


Example 3:
Input: a = ""aa"", b = ""aa""
Output: true
Explanation: You can swap a[0] = 'a' and a[1] = 'a' to get ""aa"", which is equal to b.


Example 4:
Input: a = ""aaaaaaabc"", b = ""aaaaaaacb""
Output: true

Constraints:
`1 <= a.length, b.length <= 2 * 104`
`a` and `b` consist of lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"At a lemonade stand, each lemonade costs `$5`. 
Customers are standing in a queue to buy from you, and order one at a time (in the order specified by `bills`).

Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill.  You must provide the correct change to each customer, so that the net transaction is that the customer pays $5.

Note that you don't have any change in hand at first.

Return `true` if and only if you can provide every customer with correct change.


Example 1:
Input: [5,5,5,10,20]
Output: true
Explanation: 
From the first 3 customers, we collect three $5 bills in order.

From the fourth customer, we collect a $10 bill and give back a $5.

From the fifth customer, we give a $10 bill and a $5 bill.

Since all customers got correct change, we output true.


Example 2:
Input: [5,5,10]
Output: true

Example 3:
Input: [10,10]
Output: false

Example 4:
Input: [5,5,10,10,20]
Output: false
Explanation: 
From the first two customers in order, we collect two $5 bills.

For the next two customers in order, we collect a $10 bill and give back a $5 bill.

For the last customer, we can't give change of $15 back because we only have two $10 bills.

Since not every customer received correct change, the answer is false.

Note:
`0 <= bills.length <= 10000`
`bills[i]` will be either `5`, `10`, or `20`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have a two dimensional matrix `A` where each value is `0` or `1`.

A move consists of choosing any row or column, and toggling each value in that row or column: changing all `0`s to `1`s, and all `1`s to `0`s.

After making any number of moves, every row of this matrix is interpreted as a binary number, and the score of the matrix is the sum of these numbers.

Return the highest possible score.


Example 1:
Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
Explanation:
Toggled to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].

0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
Note:
`1 <= A.length <= 20`
`1 <= A[0].length <= 20`
`A[i][j]` is `0` or `1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Return the length of the shortest, non-empty, contiguous subarray of `A` with sum at least `K`.

If there is no non-empty subarray with sum at least `K`, return `-1`.


Example 1:
Input: A = [1], K = 1
Output: 1

Example 2:
Input: A = [1,2], K = 4
Output: -1

Example 3:
Input: A = [2,-1,2], K = 3
Output: 3
Note:
`1 <= A.length <= 50000`
`-10 ^ 5 <= A[i] <= 10 ^ 5`
`1 <= K <= 10 ^ 9`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a binary tree (with root node `root`), a `target` node, and an integer value `K`.

Return a list of the values of all nodes that have a distance `K` from the `target` node.  The answer can be returned in any order.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
Output: [7,4,1]
Explanation: 
The nodes that are a distance 2 from the target node (with value 5)
have values 7, 4, and 1.

Note that the inputs ""root"" and ""target"" are actually TreeNodes.

The descriptions of the inputs above are just serializations of these objects.

Note:
The given tree is non-empty.

Each node in the tree has unique values `0 <= node.val <= 500`.

The `target` node is a node in the tree.

`0 <= K <= 1000`.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a 2-dimensional `grid`. `"".""` is an empty cell, `""#""` is a wall, `""@""` is the starting point, (`""a""`, `""b""`, ...) are keys, and (`""A""`, `""B""`, ...) are locks.

We start at the starting point, and one move consists of walking one space in one of the 4 cardinal directions.  We cannot walk outside the grid, or walk into a wall.  If we walk over a key, we pick it up.  We can't walk over a lock unless we have the corresponding key.

For some 1 <= K <= 6, there is exactly one lowercase and one uppercase letter of the first `K` letters of the English alphabet in the grid.  This means that there is exactly one key for each lock, and one lock for each key; and also that the letters used to represent the keys and locks were chosen in the same order as the English alphabet.

Return the lowest number of moves to acquire all keys.  If it's impossible, return `-1`.


Example 1:
Input: [""@.a.#"",""###.#"",""b.A.B""]
Output: 8

Example 2:
Input: [""@..aA"",""..B#."",""....b""]
Output: 6
Note:
`1 <= grid.length <= 30`
`1 <= grid[0].length <= 30`
`grid[i][j]` contains only` '.'`, `'#'`, `'@'`, `'a'-``'f``'` and `'A'-'F'`
The number of keys is in `[1, 6]`.  Each key has a different letter and opens exactly one lock.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest if it has the largest depth possible among any node in the entire tree.

The subtree of a node is tree consisting of that node, plus the set of all descendants of that node.

Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.

The nodes coloured in blue are the deepest nodes of the tree.

Notice that nodes 5, 3 and 2 contain the deepest nodes in the tree but node 2 is the smallest subtree among them, so we return it.


Example 2:
Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree.


Example 3:
Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest node in the tree is 2, the valid subtrees are the subtrees of nodes 2, 1 and 0 but the subtree of node 2 is the smallest.


Constraints:
The number of nodes in the tree will be in the range `[1, 500]`.

`0 <= Node.val <= 500`
The values of the nodes in the tree are unique.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Find the smallest prime palindrome greater than or equal to `N`.

Recall that a number is prime if it's only divisors are 1 and itself, and it is greater than 1. 
For example, 2,3,5,7,11 and 13 are primes.

Recall that a number is a palindrome if it reads the same from left to right as it does from right to left. 
For example, 12321 is a palindrome.


Example 1:
Input: 6
Output: 7

Example 2:
Input: 8
Output: 11

Example 3:
Input: 13
Output: 101
Note:
`1 <= N <= 10^8`
The answer is guaranteed to exist and be less than `2 * 10^8`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D integer array `matrix`, return the transpose of `matrix`.

The transpose of a matrix is the matrix flipped over its main diagonal, switching the matrix's row and column indices.


Example 1:
Input: matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]

Example 2:
Input: matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 1000`
`1 <= m * n <= 105`
`-109 <= matrix[i][j] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `n`, find and return the longest distance between any two adjacent `1`'s in the binary representation of `n`. If there are no two adjacent `1`'s, return `0`.

Two `1`'s are adjacent if there are only `0`'s separating them (possibly no `0`'s). The distance between two `1`'s is the absolute difference between their bit positions. For example, the two `1`'s in `""1001""` have a distance of 3.


Example 1:
Input: n = 22
Output: 2
Explanation: 22 in binary is ""10110"".

The first adjacent pair of 1's is ""10110"" with a distance of 2.

The second adjacent pair of 1's is ""10110"" with a distance of 1.

The answer is the largest of these two distances, which is 2.

Note that ""10110"" is not a valid pair since there is a 1 separating the two 1's underlined.


Example 2:
Input: n = 5
Output: 2
Explanation: 5 in binary is ""101"".


Example 3:
Input: n = 6
Output: 1
Explanation: 6 in binary is ""110"".


Example 4:
Input: n = 8
Output: 0
Explanation: 8 in binary is ""1000"".

There aren't any adjacent pairs of 1's in the binary representation of 8, so we return 0.


Example 5:
Input: n = 1
Output: 0

Constraints:
`1 <= n <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays `A` and `B` of equal size, the advantage of `A` with respect to `B` is the number of indices `i` for which `A[i] > B[i]`.

Return any permutation of `A` that maximizes its advantage with respect to `B`.


Example 1:
Input: A = [2,7,11,15], B = [1,10,4,11]
Output: [2,11,7,15]

Example 2:
Input: A = [12,24,8,32], B = [13,25,32,11]
Output: [24,32,8,12]
Note:
`1 <= A.length = B.length <= 10000`
`0 <= A[i] <= 10^9`
`0 <= B[i] <= 10^9`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A car travels from a starting position to a destination which is `target` miles east of the starting position.

Along the way, there are gas stations.  Each `station[i]` represents a gas station that is `station[i][0]` miles east of the starting position, and has `station[i][1]` liters of gas.

The car starts with an infinite tank of gas, which initially has `startFuel` liters of fuel in it.  It uses 1 liter of gas per 1 mile that it drives.

When the car reaches a gas station, it may stop and refuel, transferring all the gas from the station into the car.

What is the least number of refueling stops the car must make in order to reach its destination?  If it cannot reach the destination, return `-1`.

Note that if the car reaches a gas station with 0 fuel left, the car can still refuel there.  If the car reaches the destination with 0 fuel left, it is still considered to have arrived.


Example 1:
Input: target = 1, startFuel = 1, stations = []
Output: 0
Explanation: We can reach the target without refueling.


Example 2:
Input: target = 100, startFuel = 1, stations = [[10,100]]
Output: -1
Explanation: We can't reach the target (or even the first gas station).


Example 3:
Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
Output: 2
Explanation: 
We start with 10 liters of fuel.

We drive to position 10, expending 10 liters of fuel.  We refuel from 0 liters to 60 liters of gas.

Then, we drive from position 10 to position 60 (expending 50 liters of fuel),
and refuel from 10 liters to 50 liters of gas.  We then drive to and reach the target.

We made 2 refueling stops along the way, so we return 2.

Note:
`1 <= target, startFuel, stations[i][1] <= 10^9`
`0 <= stations.length <= 500`
`0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Consider all the leaves of a binary tree, from left to right order, the values of those leaves form a leaf value sequence.

For example, in the given tree above, the leaf value sequence is `(6, 7, 4, 9, 8)`.

Two binary trees are considered leaf-similar if their leaf value sequence is the same.

Return `true` if and only if the two given trees with head nodes `root1` and `root2` are leaf-similar.


Example 1:
Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null,null,null,null,9,8]
Output: true

Example 2:
Input: root1 = [1], root2 = [1]
Output: true

Example 3:
Input: root1 = [1], root2 = [2]
Output: false

Example 4:
Input: root1 = [1,2], root2 = [2,2]
Output: true

Example 5:
Input: root1 = [1,2,3], root2 = [1,3,2]
Output: false

Constraints:
The number of nodes in each tree will be in the range `[1, 200]`.

Both of the given trees will have values in the range `[0, 200]`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sequence `X1, X2, ..., Xn` is Fibonacci-like if:
`n >= 3`
`Xi + Xi+1 = Xi+2` for all `i + 2 <= n`
Given a strictly increasing array `arr` of positive integers forming a sequence, return the length of the longest Fibonacci-like subsequence of `arr`. If one does not exist, return `0`.

A subsequence is derived from another sequence `arr` by deleting any number of elements (including none) from `arr`, without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.


Example 1:
Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest subsequence that is fibonacci-like: [1,2,3,5,8].


Example 2:
Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest subsequence that is fibonacci-like: [1,11,12], [3,11,14] or [7,11,18].


Constraints:
`3 <= arr.length <= 1000`
`1 <= arr[i] < arr[i + 1] <= 109`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A robot on an infinite XY-plane starts at point `(0, 0)` and faces north. The robot can receive one of three possible types of `commands`:
`-2`: turn left `90` degrees,
`-1`: turn right `90` degrees, or
`1 <= k <= 9`: move forward `k` units.

Some of the grid squares are `obstacles`. The `ith` obstacle is at grid point `obstacles[i] = (xi, yi)`.

If the robot would try to move onto them, the robot stays on the previous grid square instead (but still continues following the rest of the route.)
Return the maximum Euclidean distance that the robot will be from the origin squared (i.e. if the distance is `5`, return `25`).

Note:
North means +Y direction.

East means +X direction.

South means -Y direction.

West means -X direction.


Example 1:
Input: commands = [4,-1,3], obstacles = []
Output: 25
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).

2. Turn right.

3. Move east 3 units to (3, 4).

The furthest point away from the origin is (3, 4), which is 32 + 42 = 25 units away.


Example 2:
Input: commands = [4,-1,4,-2,4], obstacles = [[2,4]]
Output: 65
Explanation: The robot starts at (0, 0):
1. Move north 4 units to (0, 4).

2. Turn right.

3. Move east 1 unit and get blocked by the obstacle at (2, 4), robot is at (1, 4).

4. Turn left.

5. Move north 4 units to (1, 8).

The furthest point away from the origin is (1, 8), which is 12 + 82 = 65 units away.


Constraints:
`1 <= commands.length <= 104`
`commands[i]` is one of the values in the list `[-2,-1,1,2,3,4,5,6,7,8,9]`.

`0 <= obstacles.length <= 104`
`-3 * 104 <= xi, yi <= 3 * 104`
The answer is guaranteed to be less than `231`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Koko loves to eat bananas. There are `n` piles of bananas, the `ith` pile has `piles[i]` bananas. The guards have gone and will come back in `h` hours.

Koko can decide her bananas-per-hour eating speed of `k`. Each hour, she chooses some pile of bananas and eats `k` bananas from that pile. If the pile has less than `k` bananas, she eats all of them instead and will not eat any more bananas during this hour.

Koko likes to eat slowly but still wants to finish eating all the bananas before the guards return.

Return the minimum integer `k` such that she can eat all the bananas within `h` hours.


Example 1:
Input: piles = [3,6,7,11], h = 8
Output: 4

Example 2:
Input: piles = [30,11,23,4,20], h = 5
Output: 30

Example 3:
Input: piles = [30,11,23,4,20], h = 6
Output: 23

Constraints:
`1 <= piles.length <= 104`
`piles.length <= h <= 109`
`1 <= piles[i] <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty, singly linked list with head node `head`, return a middle node of linked list.

If there are two middle nodes, return the second middle node.


Example 1:
Input: [1,2,3,4,5]
Output: Node 3 from this list (Serialization: [3,4,5])
The returned node has value 3.  (The judge's serialization of this node is [3,4,5]).

Note that we returned a ListNode object ans, such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, and ans.next.next.next = NULL.


Example 2:
Input: [1,2,3,4,5,6]
Output: Node 4 from this list (Serialization: [4,5,6])
Since the list has two middle nodes with values 3 and 4, we return the second one.

Note:
The number of nodes in the given list will be between `1` and `100`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alex and Lee play a game with piles of stones.  There are an even number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.

The objective of the game is to end with the most stones.  The total number of stones is odd, so there are no ties.

Alex and Lee take turns, with Alex starting first.  Each turn, a player takes the entire pile of stones from either the beginning or the end of the row.  This continues until there are no more piles left, at which point the person with the most stones wins.

Assuming Alex and Lee play optimally, return `True` if and only if Alex wins the game.


Example 1:
Input: piles = [5,3,4,5]
Output: true
Explanation: 
Alex starts first, and can only take the first 5 or the last 5.

Say he takes the first 5, so that the row becomes [3, 4, 5].

If Lee takes 3, then the board is [4, 5], and Alex takes 5 to win with 10 points.

If Lee takes the last 5, then the board is [3, 4], and Alex takes 4 to win with 9 points.

This demonstrated that taking the first 5 was a winning move for Alex, so we return true.


Constraints:
`2 <= piles.length <= 500`
`piles.length` is even.

`1 <= piles[i] <= 500`
`sum(piles)` is odd.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a group of `n` members, and a list of various crimes they could commit. The `ith` crime generates a `profit[i]` and requires `group[i]` members to participate in it. If a member participates in one crime, that member can't participate in another crime.

Let's call a profitable scheme any subset of these crimes that generates at least `minProfit` profit, and the total number of members participating in that subset of crimes is at most `n`.

Return the number of schemes that can be chosen. Since the answer may be very large, return it modulo `109 + 7`.


Example 1:
Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]
Output: 2
Explanation: To make a profit of at least 3, the group could either commit crimes 0 and 1, or just crime 1.

In total, there are 2 schemes.


Example 2:
Input: n = 10, minProfit = 5, group = [2,3,5], profit = [6,7,8]
Output: 7
Explanation: To make a profit of at least 5, the group could commit any crimes, as long as they commit one.

There are 7 possible schemes: (0), (1), (2), (0,1), (0,2), (1,2), and (0,1,2).


Constraints:
`1 <= n <= 100`
`0 <= minProfit <= 100`
`1 <= group.length <= 100`
`1 <= group[i] <= 100`
`profit.length == group.length`
`0 <= profit[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An encoded string `S` is given.  To find and write the decoded string to a tape, the encoded string is read one character at a time and the following steps are taken:
If the character read is a letter, that letter is written onto the tape.

If the character read is a digit (say `d`), the entire current tape is repeatedly written `d-1` more times in total.

Now for some encoded string `S`, and an index `K`, find and return the `K`-th letter (1 indexed) in the decoded string.


Example 1:
Input: S = ""leet2code3"", K = 10
Output: ""o""
Explanation: 
The decoded string is ""leetleetcodeleetleetcodeleetleetcode"".

The 10th letter in the string is ""o"".


Example 2:
Input: S = ""ha22"", K = 5
Output: ""h""
Explanation: 
The decoded string is ""hahahaha"".  The 5th letter is ""h"".


Example 3:
Input: S = ""a2345678999999999999999"", K = 1
Output: ""a""
Explanation: 
The decoded string is ""a"" repeated 8301530446056247680 times.  The 1st letter is ""a"".


Constraints:
`2 <= S.length <= 100`
`S` will only contain lowercase letters and digits `2` through `9`.

`S` starts with a letter.

`1 <= K <= 10^9`
It's guaranteed that `K` is less than or equal to the length of the decoded string.

The decoded string is guaranteed to have less than `2^63` letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `people` where `people[i]` is the weight of the `ith` person, and an infinite number of boats where each boat can carry a maximum weight of `limit`. Each boat carries at most two people at the same time, provided the sum of the weight of those people is at most `limit`.

Return the minimum number of boats to carry every given person.


Example 1:
Input: people = [1,2], limit = 3
Output: 1
Explanation: 1 boat (1, 2)

Example 2:
Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 boats (1, 2), (2) and (3)

Example 3:
Input: people = [3,5,3,4], limit = 5
Output: 4
Explanation: 4 boats (3), (3), (4), (5)

Constraints:
`1 <= people.length <= 5 * 104`
`1 <= people[i] <= limit <= 3 * 104`",0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an undirected graph (the ""original graph"") with `n` nodes labeled from `0` to `n - 1`. You decide to subdivide each edge in the graph into a chain of nodes, with the number of new nodes varying between each edge.

The graph is given as a 2D array of `edges` where `edges[i] = [ui, vi, cnti]` indicates that there is an edge between nodes `ui` and `vi` in the original graph, and `cnti` is the total number of new nodes that you will subdivide the edge into. Note that `cnti == 0` means you will not subdivide the edge.

To subdivide the edge `[ui, vi]`, replace it with `(cnti + 1)` new edges and `cnti` new nodes. The new nodes are `x1`, `x2`, ..., `xcnti`, and the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, ..., `[xcnti+1, xcnti]`, `[xcnti, vi]`.

In this new graph, you want to know how many nodes are reachable from the node `0`, where a node is reachable if the distance is `maxMoves` or less.

Given the original graph and `maxMoves`, return the number of nodes that are reachable from node `0` in the new graph.


Example 1:
Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
Output: 13
Explanation: The edge subdivisions are shown in the image above.

The nodes that are reachable are highlighted in yellow.


Example 2:
Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
Output: 23

Example 3:
Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
Output: 1
Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is reachable.


Constraints:
`0 <= edges.length <= min(n * (n - 1) / 2, 104)`
`edges[i].length == 3`
`0 <= ui < vi < n`
There are no multiple edges in the graph.

`0 <= cnti <= 104`
`0 <= maxMoves <= 109`
`1 <= n <= 3000`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given two sentences `A` and `B`.  (A sentence is a string of space separated words.  Each word consists only of lowercase letters.)
A word is uncommon if it appears exactly once in one of the sentences, and does not appear in the other sentence.

Return a list of all uncommon words. 
You may return the list in any order.


Example 1:
Input: A = ""this apple is sweet"", B = ""this apple is sour""
Output: [""sweet"",""sour""]

Example 2:
Input: A = ""apple apple"", B = ""banana""
Output: [""banana""]
Note:
`0 <= A.length <= 200`
`0 <= B.length <= 200`
`A` and `B` both contain only spaces and lowercase letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2 dimensional grid with `R` rows and `C` columns, we start at `(r0, c0)` facing east.

Here, the north-west corner of the grid is at the first row and column, and the south-east corner of the grid is at the last row and column.

Now, we walk in a clockwise spiral shape to visit every position in this grid. 
Whenever we would move outside the boundary of the grid, we continue our walk outside the grid (but may return to the grid boundary later.) 
Eventually, we reach all `R * C` spaces of the grid.

Return a list of coordinates representing the positions of the grid in the order they were visited.


Example 1:
Input: R = 1, C = 4, r0 = 0, c0 = 0
Output: [[0,0],[0,1],[0,2],[0,3]]

Example 2:
Input: R = 5, C = 6, r0 = 1, c0 = 4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4],[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0,1],[4,0],[3,0],[2,0],[1,0],[0,0]]
Note:
`1 <= R <= 100`
`1 <= C <= 100`
`0 <= r0 < R`
`0 <= c0 < C`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of `N` people (numbered `1, 2, ..., N`), we would like to split everyone into two groups of any size.

Each person may dislike some other people, and they should not go into the same group. 
Formally, if `dislikes[i] = [a, b]`, it means it is not allowed to put the people numbered `a` and `b` into the same group.

Return `true` if and only if it is possible to split everyone into two groups in this way.


Example 1:
Input: N = 4, dislikes = [[1,2],[1,3],[2,4]]
Output: true
Explanation: group1 [1,4], group2 [2,3]

Example 2:
Input: N = 3, dislikes = [[1,2],[1,3],[2,3]]
Output: false

Example 3:
Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
Output: false

Constraints:
`1 <= N <= 2000`
`0 <= dislikes.length <= 10000`
`dislikes[i].length == 2`
`1 <= dislikes[i][j] <= N`
`dislikes[i][0] < dislikes[i][1]`
There does not exist `i != j` for which `dislikes[i] == dislikes[j]`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `k` identical eggs and you have access to a building with `n` floors labeled from `1` to `n`.

You know that there exists a floor `f` where `0 <= f <= n` such that any egg dropped at a floor higher than `f` will break, and any egg dropped at or below floor `f` will not break.

Each move, you may take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg does not break, you may reuse it in future moves.

Return the minimum number of moves that you need to determine with certainty what the value of `f` is.


Example 1:
Input: k = 1, n = 2
Output: 2
Explanation: 
Drop the egg from floor 1. If it breaks, we know that f = 0.

Otherwise, drop the egg from floor 2. If it breaks, we know that f = 1.

If it does not break, then we know f = 2.

Hence, we need at minimum 2 moves to determine with certainty what the value of f is.


Example 2:
Input: k = 2, n = 6
Output: 3

Example 3:
Input: k = 3, n = 14
Output: 4

Constraints:
`1 <= k <= 100`
`1 <= n <= 104`",0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob have candy bars of different sizes: `A[i]` is the size of the `i`-th bar of candy that Alice has, and `B[j]` is the size of the `j`-th bar of candy that Bob has.

Since they are friends, they would like to exchange one candy bar each so that after the exchange, they both have the same total amount of candy.  (The total amount of candy a person has is the sum of the sizes of candy bars they have.)
Return an integer array `ans` where `ans[0]` is the size of the candy bar that Alice must exchange, and `ans[1]` is the size of the candy bar that Bob must exchange.

If there are multiple answers, you may return any one of them.  It is guaranteed an answer exists.


Example 1:
Input: A = [1,1], B = [2,2]
Output: [1,2]

Example 2:
Input: A = [1,2], B = [2,3]
Output: [1,2]

Example 3:
Input: A = [2], B = [1,3]
Output: [2,3]

Example 4:
Input: A = [1,2,5], B = [2,4]
Output: [5,4]
Note:
`1 <= A.length <= 10000`
`1 <= B.length <= 10000`
`1 <= A[i] <= 100000`
`1 <= B[i] <= 100000`
It is guaranteed that Alice and Bob have different total amounts of candy.

It is guaranteed there exists an answer.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Return any binary tree that matches the given preorder and postorder traversals.

Values in the traversals `pre` and `post` are distinct positive integers.


Example 1:
Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
Note:
`1 <= pre.length == post.length <= 30`
`pre[]` and `post[]` are both permutations of `1, 2, ..., pre.length`.

It is guaranteed an answer exists. If there exists multiple answers, you can return any of them.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a list of `words` and a `pattern`, and you want to know which words in `words` matches the pattern.

A word matches the pattern if there exists a permutation of letters `p` so that after replacing every letter `x` in the pattern with `p(x)`, we get the desired word.

(Recall that a permutation of letters is a bijection from letters to letters: every letter maps to another letter, and no two letters map to the same letter.)
Return a list of the words in `words` that match the given pattern. 
You may return the answer in any order.


Example 1:
Input: words = [""abc"",""deq"",""mee"",""aqq"",""dkd"",""ccc""], pattern = ""abb""
Output: [""mee"",""aqq""]
Explanation: ""mee"" matches the pattern because there is a permutation {a -> m, b -> e, ...}. 
""ccc"" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
since a and b map to the same letter.

Note:
`1 <= words.length <= 50`
`1 <= pattern.length = words[i].length <= 20`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `A`, consider all non-empty subsequences of `A`.

For any sequence S, let the width of S be the difference between the maximum and minimum element of S.

Return the sum of the widths of all subsequences of A. 
As the answer may be very large, return the answer modulo 10^9 + 7.


Example 1:
Input: [2,1,3]
Output: 6
Explanation:
Subsequences are [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].

The corresponding widths are 0, 0, 0, 1, 1, 2, 2.

The sum of these widths is 6.

Note:
`1 <= A.length <= 20000`
`1 <= A[i] <= 20000`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `A` of strings.

A move onto `S` consists of swapping any two even indexed characters of `S`, or any two odd indexed characters of `S`.

Two strings `S` and `T` are special-equivalent if after any number of moves onto `S`, `S == T`.

For example, `S = ""zzxy""` and `T = ""xyzz""` are special-equivalent because we may make the moves `""zzxy"" -> ""xzzy"" -> ""xyzz""` that swap `S[0]` and `S[2]`, then `S[1]` and `S[3]`.

Now, a group of special-equivalent strings from `A` is a non-empty subset of A such that:
Every pair of strings in the group are special equivalent, and;
The group is the largest size possible (ie., there isn't a string S not in the group such that S is special equivalent to every string in the group)
Return the number of groups of special-equivalent strings from `A`.


Example 1:
Input: [""abcd"",""cdab"",""cbad"",""xyzz"",""zzxy"",""zzyx""]
Output: 3
Explanation: 
One group is [""abcd"", ""cdab"", ""cbad""], since they are all pairwise special equivalent, and none of the other strings are all pairwise special equivalent to these.

The other two groups are [""xyzz"", ""zzxy""] and [""zzyx""].  Note that in particular, ""zzxy"" is not special equivalent to ""zzyx"".


Example 2:
Input: [""abc"",""acb"",""bac"",""bca"",""cab"",""cba""]
Output: 3
Note:
`1 <= A.length <= 1000`
`1 <= A[i].length <= 20`
All `A[i]` have the same length.

All `A[i]` consist of only lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return a list of all possible full binary trees with `n` nodes. Each node of each tree in the answer must have `Node.val == 0`.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly `0` or `2` children.


Example 1:
Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]

Example 2:
Input: n = 3
Output: [[0,0,0]]

Constraints:
`1 <= n <= 20`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a stack-like data structure to push elements to the stack and pop the most frequent element from the stack.

Implement the `FreqStack` class:
`FreqStack()` constructs an empty frequency stack.

`void push(int val)` pushes an integer `val` onto the top of the stack.

`int pop()` removes and returns the most frequent element in the stack.

	
If there is a tie for the most frequent element, the element closest to the stack's top is removed and returned.


Example 1:
Input
[""FreqStack"", ""push"", ""push"", ""push"", ""push"", ""push"", ""push"", ""pop"", ""pop"", ""pop"", ""pop""]
[[], [5], [7], [5], [7], [4], [5], [], [], [], []]
Output
[null, null, null, null, null, null, null, 5, 7, 5, 4]
Explanation
FreqStack freqStack = new FreqStack();
freqStack.push(5); // The stack is [5]
freqStack.push(7); // The stack is [5,7]
freqStack.push(5); // The stack is [5,7,5]
freqStack.push(7); // The stack is [5,7,5,7]
freqStack.push(4); // The stack is [5,7,5,7,4]
freqStack.push(5); // The stack is [5,7,5,7,4,5]
freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,5,7,4].

freqStack.pop();   // return 7, as 5 and 7 is the most frequent, but 7 is closest to the top. The stack becomes [5,7,5,4].

freqStack.pop();   // return 5, as 5 is the most frequent. The stack becomes [5,7,4].

freqStack.pop();   // return 4, as 4, 5 and 7 is the most frequent, but 4 is closest to the top. The stack becomes [5,7].


Constraints:
`0 <= val <= 109`
At most `2 * 104` calls will be made to `push` and `pop`.

It is guaranteed that there will be at least one element in the stack before calling `pop`.",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An array is monotonic if it is either monotone increasing or monotone decreasing.

An array `A` is monotone increasing if for all `i <= j`, `A[i] <= A[j]`.  An array `A` is monotone decreasing if for all `i <= j`, `A[i] >= A[j]`.

Return `true` if and only if the given array `A` is monotonic.


Example 1:
Input: [1,2,2,3]
Output: true

Example 2:
Input: [6,5,4,4]
Output: true

Example 3:
Input: [1,3,2]
Output: false

Example 4:
Input: [1,2,4,5]
Output: true

Example 5:
Input: [1,1,1]
Output: true
Note:
`1 <= A.length <= 50000`
`-100000 <= A[i] <= 100000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary search tree, rearrange the tree in in-order so that the leftmost node in the tree is now the root of the tree, and every node has no left child and only one right child.


Example 1:
Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

Example 2:
Input: root = [5,1,7]
Output: [1,null,5,null,7]

Constraints:
The number of nodes in the given tree will be in the range `[1, 100]`.

`0 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an array `arr` of non-negative integers.

For every (contiguous) subarray `sub = [arr[i], arr[i + 1], ..., arr[j]]` (with `i <= j`), we take the bitwise OR of all the elements in `sub`, obtaining a result `arr[i] | arr[i + 1] | ... | arr[j]`.

Return the number of possible results. Results that occur more than once are only counted once in the final answer

Example 1:
Input: arr = [0]
Output: 1
Explanation: There is only one possible result: 0.


Example 2:
Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].

These yield the results 1, 1, 2, 1, 3, 3.

There are 3 unique values, so the answer is 3.


Example 3:
Input: arr = [1,2,4]
Output: 6
Explanation: The possible results are 1, 2, 3, 4, 6, and 7.


Constraints:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 109`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string `S` of lowercase letters is given.  Then, we may make any number of moves.

In each move, we choose one of the first `K` letters (starting from the left), remove it, and place it at the end of the string.

Return the lexicographically smallest string we could have after any number of moves.


Example 1:
Input: S = ""cba"", K = 1
Output: ""acb""
Explanation: 
In the first move, we move the 1st character (""c"") to the end, obtaining the string ""bac"".

In the second move, we move the 1st character (""b"") to the end, obtaining the final result ""acb"".


Example 2:
Input: S = ""baaca"", K = 3
Output: ""aaabc""
Explanation: 
In the first move, we move the 1st character (""b"") to the end, obtaining the string ""aacab"".

In the second move, we move the 3rd character (""c"") to the end, obtaining the final result ""aaabc"".

Note:
`1 <= K <= S.length <= 1000`
`S` consists of lowercase letters only.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an iterator that iterates through a run-length encoded sequence.

The iterator is initialized by `RLEIterator(int[] A)`, where `A` is a run-length encoding of some sequence.  More specifically, for all even `i`, `A[i]` tells us the number of times that the non-negative integer value `A[i+1]` is repeated in the sequence.

The iterator supports one function: `next(int n)`, which exhausts the next `n` elements (`n >= 1`) and returns the last element exhausted in this way.  If there is no element left to exhaust, `next` returns `-1` instead.

For example, we start with `A = [3,8,0,9,2,5]`, which is a run-length encoding of the sequence `[8,8,8,5,5]`.  This is because the sequence can be read as ""three eights, zero nines, two fives"".


Example 1:
Input: [""RLEIterator"",""next"",""next"",""next"",""next""], [[[3,8,0,9,2,5]],[2],[1],[1],[2]]
Output: [null,8,8,5,-1]
Explanation: 
RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]).

This maps to the sequence [8,8,8,5,5].

RLEIterator.next is then called 4 times:
.next(2) exhausts 2 terms of the sequence, returning 8.  The remaining sequence is now [8, 5, 5].

.next(1) exhausts 1 term of the sequence, returning 8.  The remaining sequence is now [5, 5].

.next(1) exhausts 1 term of the sequence, returning 5.  The remaining sequence is now [5].

.next(2) exhausts 2 terms, returning -1.  This is because the first term exhausted was 5,
but the second term did not exist.  Since the last term exhausted does not exist, we return -1.

Note:
`0 <= A.length <= 1000`
`A.length` is an even integer.

`0 <= A[i] <= 10^9`
There are at most `1000` calls to `RLEIterator.next(int n)` per test case.

Each call to `RLEIterator.next(int n)` will have `1 <= n <= 10^9`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a class `StockSpanner` which collects daily price quotes for some stock, and returns the span of that stock's price for the current day.

The span of the stock's price today is defined as the maximum number of consecutive days (starting from today and going backwards) for which the price of the stock was less than or equal to today's price.

For example, if the price of a stock over the next 7 days were `[100, 80, 60, 70, 60, 75, 85]`, then the stock spans would be `[1, 1, 1, 2, 1, 4, 6]`.


Example 1:
Input: [""StockSpanner"",""next"",""next"",""next"",""next"",""next"",""next"",""next""], [[],[100],[80],[60],[70],[60],[75],[85]]
Output: [null,1,1,1,2,1,4,6]
Explanation: 
First, S = StockSpanner() is initialized.  Then:
S.next(100) is called and returns 1,
S.next(80) is called and returns 1,
S.next(60) is called and returns 1,
S.next(70) is called and returns 2,
S.next(60) is called and returns 1,
S.next(75) is called and returns 4,
S.next(85) is called and returns 6.

Note that (for example) S.next(75) returned 4, because the last 4 prices
(including today's price of 75) were less than or equal to today's price.

Note:
Calls to `StockSpanner.next(int price)` will have `1 <= price <= 10^5`.

There will be at most `10000` calls to `StockSpanner.next` per test case.

There will be at most `150000` calls to `StockSpanner.next` across all test cases.

The total time limit for this problem has been reduced by 75% for C++, and 50% for all other languages.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `digits` which is sorted in non-decreasing order. You can write numbers using each `digits[i]` as many times as we want. For example, if `digits = ['1','3','5']`, we may write numbers such as `'13'`, `'551'`, and `'1351315'`.

Return the number of positive integers that can be generated that are less than or equal to a given integer `n`.


Example 1:
Input: digits = [""1"",""3"",""5"",""7""], n = 100
Output: 20
Explanation: 
The 20 numbers that can be written are:
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.


Example 2:
Input: digits = [""1"",""4"",""9""], n = 1000000000
Output: 29523
Explanation: 
We can write 3 one digit numbers, 9 two digit numbers, 27 three digit numbers,
81 four digit numbers, 243 five digit numbers, 729 six digit numbers,
2187 seven digit numbers, 6561 eight digit numbers, and 19683 nine digit numbers.

In total, this is 29523 integers that can be written using the digits array.


Example 3:
Input: digits = [""7""], n = 8
Output: 1

Constraints:
`1 <= digits.length <= 9`
`digits[i].length == 1`
`digits[i]` is a digit from `'1'` to `'9'`.

All the values in `digits` are unique.

`digits` is sorted in non-decreasing order.

`1 <= n <= 109`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a row of trees, the `i`-th tree produces fruit with type `tree[i]`.

You start at any tree of your choice, then repeatedly perform the following steps:
Add one piece of fruit from this tree to your baskets.  If you cannot, stop.

Move to the next tree to the right of the current tree.  If there is no tree to the right, stop.

Note that you do not have any choice after the initial choice of starting tree: you must perform step 1, then step 2, then back to step 1, then step 2, and so on until you stop.

You have two baskets, and each basket can carry any quantity of fruit, but you want each basket to only carry one type of fruit each.

What is the total amount of fruit you can collect with this procedure?

Example 1:
Input: [1,2,1]
Output: 3
Explanation: We can collect [1,2,1].


Example 2:
Input: [0,1,2,2]
Output: 3
Explanation: We can collect [1,2,2].

If we started at the first tree, we would only collect [0, 1].


Example 3:
Input: [1,2,3,2,2]
Output: 4
Explanation: We can collect [2,3,2,2].

If we started at the first tree, we would only collect [1, 2].


Example 4:
Input: [3,3,3,1,2,1,1,2,3,3,4]
Output: 5
Explanation: We can collect [1,2,1,1,2].

If we started at the first tree or the eighth tree, we would only collect 4 fruits.

Note:
`1 <= tree.length <= 40000`
`0 <= tree[i] < tree.length`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of non-negative integers, return an array consisting of all the even elements of `A`, followed by all the odd elements of `A`.

You may return any answer array that satisfies this condition.


Example 1:
Input: [3,1,2,4]
Output: [2,4,3,1]
The outputs [4,2,3,1], [2,4,1,3], and [4,2,1,3] would also be accepted.

Note:
`1 <= A.length <= 5000`
`0 <= A[i] <= 5000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let's say a positive integer is a super-palindrome if it is a palindrome, and it is also the square of a palindrome.

Given two positive integers `left` and `right` represented as strings, return the number of super-palindromes integers in the inclusive range `[left, right]`.


Example 1:
Input: left = ""4"", right = ""1000""
Output: 4
Explanation: 4, 9, 121, and 484 are superpalindromes.

Note that 676 is not a superpalindrome: 26 * 26 = 676, but 26 is not a palindrome.


Example 2:
Input: left = ""1"", right = ""2""
Output: 1

Constraints:
`1 <= left.length, right.length <= 18`
`left` and `right` consist of only digits.

`left` and `right` cannot have leading zeros.

`left` and `right` represent integers in the range `[1, 1018]`.

`left` is less than or equal to `right`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers arr, find the sum of `min(b)`, where `b` ranges over every (contiguous) subarray of `arr`. Since the answer may be large, return the answer modulo `109 + 7`.


Example 1:
Input: arr = [3,1,2,4]
Output: 17
Explanation: 
Subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2,4], [3,1,2,4]. 
Minimums are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.

Sum is 17.


Example 2:
Input: arr = [11,81,94,43,3]
Output: 444

Constraints:
`1 <= arr.length <= 3 * 104`
`1 <= arr[i] <= 3 * 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of integers, for each integer `A[i]` we may choose any `x` with `-K <= x <= K`, and add `x` to `A[i]`.

After this process, we have some array `B`.

Return the smallest possible difference between the maximum value of `B` and the minimum value of `B`.


Example 1:
Input: A = [1], K = 0
Output: 0
Explanation: B = [1]

Example 2:
Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:
Input: A = [1,3,6], K = 3
Output: 0
Explanation: B = [3,3,3] or B = [4,4,4]
Note:
`1 <= A.length <= 10000`
`0 <= A[i] <= 10000`
`0 <= K <= 10000`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an N x N `board`, the numbers from `1` to `N*N` are written boustrophedonically starting from the bottom left of the board, and alternating direction each row.  For example, for a 6 x 6 board, the numbers are written as follows:
You start on square `1` of the board (which is always in the last row and first column).  Each move, starting from square `x`, consists of the following:
You choose a destination square `S` with number `x+1`, `x+2`, `x+3`, `x+4`, `x+5`, or `x+6`, provided this number is `<= N*N`.

	
(This choice simulates the result of a standard 6-sided die roll: ie., there are always at most 6 destinations, regardless of the size of the board.)
If `S` has a snake or ladder, you move to the destination of that snake or ladder.  Otherwise, you move to `S`.

A board square on row `r` and column `c` has a ""snake or ladder"" if `board[r][c] != -1`.  The destination of that snake or ladder is `board[r][c]`.

Note that you only take a snake or ladder at most once per move: if the destination to a snake or ladder is the start of another snake or ladder, you do not continue moving.  (For example, if the board is `[[4,-1],[-1,3]]`, and on the first move your destination square is `2`, then you finish your first move at `3`, because you do not continue moving to `4`.)
Return the least number of moves required to reach square N*N.  If it is not possible, return `-1`.


Example 1:
Input: [
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,35,-1,-1,13,-1],
[-1,-1,-1,-1,-1,-1],
[-1,15,-1,-1,-1,-1]]
Output: 4
Explanation: 
At the beginning, you start at square 1 [at row 5, column 0].

You decide to move to square 2, and must take the ladder to square 15.

You then decide to move to square 17 (row 3, column 5), and must take the snake to square 13.

You then decide to move to square 14, and must take the ladder to square 35.

You then decide to move to square 36, ending the game.

It can be shown that you need at least 4 moves to reach the N*N-th square, so the answer is 4.

Note:
`2 <= board.length = board[0].length <= 20`
`board[i][j]` is between `1` and `N*N` or is equal to `-1`.

The board square with number `1` has no snake or ladder.

The board square with number `N*N` has no snake or ladder.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of integers, for each integer `A[i]` we need to choose either `x = -K` or `x = K`, and add `x` to `A[i] (only once)`.

After this process, we have some array `B`.

Return the smallest possible difference between the maximum value of `B` and the minimum value of `B`.


Example 1:
Input: A = [1], K = 0
Output: 0
Explanation: B = [1]

Example 2:
Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:
Input: A = [1,3,6], K = 3
Output: 3
Explanation: B = [4,6,3]
Note:
`1 <= A.length <= 10000`
`0 <= A[i] <= 10000`
`0 <= K <= 10000`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an election, the `i`-th vote was cast for `persons[i]` at time `times[i]`.

Now, we would like to implement the following query function: `TopVotedCandidate.q(int t)` will return the number of the person that was leading the election at time `t`.  
Votes cast at time `t` will count towards our query.  In the case of a tie, the most recent vote (among tied candidates) wins.


Example 1:
Input: [""TopVotedCandidate"",""q"",""q"",""q"",""q"",""q"",""q""], [[[0,1,1,0,0,1,0],[0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
Output: [null,0,1,1,0,0,1]
Explanation: 
At time 3, the votes are [0], and 0 is leading.

At time 12, the votes are [0,1,1], and 1 is leading.

At time 25, the votes are [0,1,1,0,0,1], and 1 is leading (as ties go to the most recent vote.)
This continues for 3 more queries at time 15, 24, and 8.

Note:
`1 <= persons.length = times.length <= 5000`
`0 <= persons[i] <= persons.length`
`times` is a strictly increasing array with all elements in `[0, 10^9]`.

`TopVotedCandidate.q` is called at most `10000` times per test case.

`TopVotedCandidate.q(int t)` is always called with `t >= times[0]`.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A game on an undirected graph is played by two players, Mouse and Cat, who alternate turns.

The graph is given as follows: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph.

The mouse starts at node `1` and goes first, the cat starts at node `2` and goes second, and there is a hole at node `0`.

During each player's turn, they must travel along one edge of the graph that meets where they are.  For example, if the Mouse is at node 1, it must travel to any node in `graph[1]`.

Additionally, it is not allowed for the Cat to travel to the Hole (node 0.)
Then, the game can end in three ways:
If ever the Cat occupies the same node as the Mouse, the Cat wins.

If ever the Mouse reaches the Hole, the Mouse wins.

If ever a position is repeated (i.e., the players are in the same position as a previous turn, and it is the same player's turn to move), the game is a draw.

Given a `graph`, and assuming both players play optimally, return
`1` if the mouse wins the game,
`2` if the cat wins the game, or
`0` if the game is a draw.


Example 1:
Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
Output: 0

Example 2:
Input: graph = [[1,3],[0],[3],[0,2]]
Output: 1

Constraints:
`3 <= graph.length <= 50`
`1 <= graph[i].length < graph.length`
`0 <= graph[i][j] < graph.length`
`graph[i][j] != i`
`graph[i]` is unique.

The mouse and the cat can always move.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a deck of cards, each card has an integer written on it.

Return `true` if and only if you can choose `X >= 2` such that it is possible to split the entire deck into 1 or more groups of cards, where:
Each group has exactly `X` cards.

All the cards in each group have the same integer.


Example 1:
Input: deck = [1,2,3,4,4,3,2,1]
Output: true
Explanation: Possible partition [1,1],[2,2],[3,3],[4,4].


Example 2:
Input: deck = [1,1,1,2,2,2,3,3]
Output: false
Explanation: No possible partition.


Example 3:
Input: deck = [1]
Output: false
Explanation: No possible partition.


Example 4:
Input: deck = [1,1]
Output: true
Explanation: Possible partition [1,1].


Example 5:
Input: deck = [1,1,2,2,2,2]
Output: true
Explanation: Possible partition [1,1],[2,2],[2,2].


Constraints:
`1 <= deck.length <= 104`
`0 <= deck[i] < 104`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A`, partition it into two (contiguous) subarrays `left` and `right` so that:
Every element in `left` is less than or equal to every element in `right`.

`left` and `right` are non-empty.

`left` has the smallest possible size.

Return the length of `left` after such a partitioning.  It is guaranteed that such a partitioning exists.


Example 1:
Input: [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]

Example 2:
Input: [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]
Note:
`2 <= A.length <= 30000`
`0 <= A[i] <= 10^6`
It is guaranteed there is at least one way to partition `A` as described.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given two arrays `A` and `B` of words.  Each word is a string of lowercase letters.

Now, say that word `b` is a subset of word `a` if every letter in `b` occurs in `a`, including multiplicity.  For example, `""wrr""` is a subset of `""warrior""`, but is not a subset of `""world""`.

Now say a word `a` from `A` is universal if for every `b` in `B`, `b` is a subset of `a`. 
Return a list of all universal words in `A`.  You can return the words in any order.


Example 1:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""e"",""o""]
Output: [""facebook"",""google"",""leetcode""]

Example 2:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""l"",""e""]
Output: [""apple"",""google"",""leetcode""]

Example 3:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""e"",""oo""]
Output: [""facebook"",""google""]

Example 4:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""lo"",""eo""]
Output: [""google"",""leetcode""]

Example 5:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""ec"",""oc"",""ceo""]
Output: [""facebook"",""leetcode""]
Note:
`1 <= A.length, B.length <= 10000`
`1 <= A[i].length, B[i].length <= 10`
`A[i]` and `B[i]` consist only of lowercase letters.

All words in `A[i]` are unique: there isn't `i != j` with `A[i] == A[j]`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S`, return the ""reversed"" string where all characters that are not a letter stay in the same place, and all letters reverse their positions.


Example 1:
Input: ""ab-cd""
Output: ""dc-ba""

Example 2:
Input: ""a-bC-dEf-ghIj""
Output: ""j-Ih-gfE-dCba""

Example 3:
Input: ""Test1ng-Leet=code-Q!""
Output: ""Qedo1ct-eeLg=ntse-T!""
Note:
`S.length <= 100`
`33 <= S[i].ASCIIcode <= 122` 
`S` doesn't contain `\` or `""`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a circular array C of integers represented by `A`, find the maximum possible sum of a non-empty subarray of C.

Here, a circular array means the end of the array connects to the beginning of the array.  (Formally, `C[i] = A[i]` when `0 <= i < A.length`, and `C[i+A.length] = C[i]` when `i >= 0`.)
Also, a subarray may only include each element of the fixed buffer `A` at most once.  (Formally, for a subarray `C[i], C[i+1], ..., C[j]`, there does not exist `i <= k1, k2 <= j` with `k1 % A.length = k2 % A.length`.)

Example 1:
Input: [1,-2,3,-2]
Output: 3
Explanation: Subarray [3] has maximum sum 3

Example 2:
Input: [5,-3,5]
Output: 10
Explanation: Subarray [5,5] has maximum sum 5 + 5 = 10

Example 3:
Input: [3,-1,2,-1]
Output: 4
Explanation: Subarray [2,-1,3] has maximum sum 2 + (-1) + 3 = 4

Example 4:
Input: [3,-2,2,-3]
Output: 3
Explanation: Subarray [3] and [3,-2,2] both have maximum sum 3

Example 5:
Input: [-2,-3,-1]
Output: -1
Explanation: Subarray [-1] has maximum sum -1
Note: 
`-30000 <= A[i] <= 30000`
`1 <= A.length <= 30000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A complete binary tree is a binary tree in which every level, except possibly the last, is completely filled, and all nodes are as far left as possible.

Write a data structure `CBTInserter` that is initialized with a complete binary tree and supports the following operations:
`CBTInserter(TreeNode root)` initializes the data structure on a given tree with head node `root`;
`CBTInserter.insert(int v)` will insert a `TreeNode` into the tree with value `node.val = v` so that the tree remains complete, and returns the value of the parent of the inserted `TreeNode`;
`CBTInserter.get_root()` will return the head node of the tree.


Example 1:
Input: inputs = [""CBTInserter"",""insert"",""get_root""], inputs = [[[1]],[2],[]]
Output: [null,1,[1,2]]

Example 2:
Input: inputs = [""CBTInserter"",""insert"",""insert"",""get_root""], inputs = [[[1,2,3,4,5,6]],[7],[8],[]]
Output: [null,3,4,[1,2,3,4,5,6,7,8]]
Note:
The initial given tree is complete and contains between `1` and `1000` nodes.

`CBTInserter.insert` is called at most `10000` times per test case.

Every value of a given or inserted node is between `0` and `5000`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your music player contains `N` different songs and she wants to listen to `L` (not necessarily different) songs during your trip.  You create a playlist so that:
Every song is played at least once
A song can only be played again only if `K` other songs have been played
Return the number of possible playlists.  As the answer can be very large, return it modulo `10^9 + 7`.


Example 1:
Input: N = 3, L = 3, K = 1
Output: 6
Explanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].


Example 2:
Input: N = 2, L = 3, K = 0
Output: 6
Explanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]

Example 3:
Input: N = 2, L = 3, K = 1
Output: 2
Explanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]
Note:
`0 <= K < N <= L <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S` of `'('` and `')'` parentheses, we add the minimum number of parentheses ( `'('` or `')'`, and in any positions ) so that the resulting parentheses string is valid.

Formally, a parentheses string is valid if and only if:
It is the empty string, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or
It can be written as `(A)`, where `A` is a valid string.

Given a parentheses string, return the minimum number of parentheses we must add to make the resulting string valid.


Example 1:
Input: ""())""
Output: 1

Example 2:
Input: ""(((""
Output: 3

Example 3:
Input: ""()""
Output: 0

Example 4:
Input: ""()))((""
Output: 4
Note:
`S.length <= 1000`
`S` only consists of `'('` and `')'` characters.",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums`, half of the integers in `nums` are odd, and the other half are even.

Sort the array so that whenever `nums[i]` is odd, `i` is odd, and whenever `nums[i]` is even, `i` is even.

Return any answer array that satisfies this condition.


Example 1:
Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] would also have been accepted.


Example 2:
Input: nums = [2,3]
Output: [2,3]

Constraints:
`2 <= nums.length <= 2 * 104`
`nums.length` is even.

Half of the integers in `nums` are even.

`0 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, and an integer `target`, return the number of tuples `i, j, k` such that `i < j < k` and `arr[i] + arr[j] + arr[k] == target`.

As the answer can be very large, return it modulo `109 + 7`.


Example 1:
Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
Explanation: 
Enumerating by the values (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.


Example 2:
Input: arr = [1,1,2,2,2,2], target = 5
Output: 12
Explanation: 
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose one 1 from [1,1] in 2 ways,
and two 2s from [2,2,2,2] in 6 ways.


Constraints:
`3 <= arr.length <= 3000`
`0 <= arr[i] <= 100`
`0 <= target <= 300`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.

Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops. We will remove exactly one node from `initial`.

Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with the smallest index.

Note that if a node was removed from the `initial` list of infected nodes, it might still be infected later due to the malware spread.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Constraints:
`n == graph.length`
`n == graph[i].length`
`2 <= n <= 300`
`graph[i][j]` is `0` or `1`.

`graph[i][j] == graph[j][i]`
`graph[i][i] == 1`
`1 <= initial.length <= n`
`0 <= initial[i] <= n - 1`
All the integers in `initial` are unique.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get long pressed, and the character will be typed 1 or more times.

You examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.


Example 1:
Input: name = ""alex"", typed = ""aaleex""
Output: true
Explanation: 'a' and 'e' in 'alex' were long pressed.


Example 2:
Input: name = ""saeed"", typed = ""ssaaedd""
Output: false
Explanation: 'e' must have been pressed twice, but it wasn't in the typed output.


Example 3:
Input: name = ""leelee"", typed = ""lleeelee""
Output: true

Example 4:
Input: name = ""laiden"", typed = ""laiden""
Output: true
Explanation: It's not necessary to long press any character.


Constraints:
`1 <= name.length <= 1000`
`1 <= typed.length <= 1000`
`name` and `typed` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string of `'0'`s and `'1'`s is monotone increasing if it consists of some number of `'0'`s (possibly 0), followed by some number of `'1'`s (also possibly 0.)
We are given a string `S` of `'0'`s and `'1'`s, and we may flip any `'0'` to a `'1'` or a `'1'` to a `'0'`.

Return the minimum number of flips to make `S` monotone increasing.


Example 1:
Input: ""00110""
Output: 1
Explanation: We flip the last digit to get 00111.


Example 2:
Input: ""010110""
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.


Example 3:
Input: ""00011000""
Output: 2
Explanation: We flip to get 00000000.

Note:
`1 <= S.length <= 20000`
`S` only consists of `'0'` and `'1'` characters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `arr` which consists of only zeros and ones, divide the array into three non-empty parts such that all of these parts represent the same binary value.

If it is possible, return any `[i, j]` with `i + 1 < j`, such that:
`arr[0], arr[1], ..., arr[i]` is the first part,
`arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and
`arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.

All three parts have equal binary values.

If it is not possible, return `[-1, -1]`.

Note that the entire part is used when considering what binary value it represents. For example, `[1,1,0]` represents `6` in decimal, not `3`. Also, leading zeros are allowed, so `[0,1,1]` and `[1,1]` represent the same value.


Example 1:
Input: arr = [1,0,1,0,1]
Output: [0,3]

Example 2:
Input: arr = [1,1,0,1,1]
Output: [-1,-1]

Example 3:
Input: arr = [1,1,0,0,1]
Output: [0,2]

Constraints:
`3 <= arr.length <= 3 * 104`
`arr[i]` is `0` or `1`",0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a network of `n` nodes represented as an `n x n` adjacency matrix `graph`, where the `ith` node is directly connected to the `jth` node if `graph[i][j] == 1`.

Some nodes `initial` are initially infected by malware. Whenever two nodes are directly connected, and at least one of those two nodes is infected by malware, both nodes will be infected by malware. This spread of malware will continue until no more nodes can be infected in this manner.

Suppose `M(initial)` is the final number of nodes infected with malware in the entire network after the spread of malware stops.

We will remove exactly one node from `initial`, completely removing it and any connections from this node to any other node.

Return the node that, if removed, would minimize `M(initial)`. If multiple nodes could be removed to minimize `M(initial)`, return such a node with the smallest index.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:
Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
Output: 1

Constraints:
`n == graph.length`
`n == graph[i].length`
`2 <= n <= 300`
`graph[i][j]` is `0` or `1`.

`graph[i][j] == graph[j][i]`
`graph[i][i] == 1`
`1 <= initial.length < n`
`0 <= initial[i] <= n - 1`
All the integers in `initial` are unique.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Every valid email consists of a local name and a domain name, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.

For example, in `""alice@leetcode.com""`, `""alice""` is the local name, and `""leetcode.com""` is the domain name.

If you add periods `'.'` between some characters in the local name part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule does not apply to domain names.

For example, `""alice.z@leetcode.com""` and `""alicez@leetcode.com""` forward to the same email address.

If you add a plus `'+'` in the local name, everything after the first plus sign will be ignored. This allows certain emails to be filtered. Note that this rule does not apply to domain names.

For example, `""m.y+name@email.com""` will be forwarded to `""my@email.com""`.

It is possible to use both of these rules at the same time.

Given an array of strings `emails` where we send one email to each `email[i]`, return the number of different addresses that actually receive mails.


Example 1:
Input: emails = [""test.email+alex@leetcode.com"",""test.e.mail+bob.cathy@leetcode.com"",""testemail+david@lee.tcode.com""]
Output: 2
Explanation: ""testemail@leetcode.com"" and ""testemail@lee.tcode.com"" actually receive mails.


Example 2:
Input: emails = [""a@leetcode.com"",""b@leetcode.com"",""c@leetcode.com""]
Output: 3

Constraints:
`1 <= emails.length <= 100`
`1 <= emails[i].length <= 100`
`email[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.

Each `emails[i]` contains exactly one `'@'` character.

All local and domain names are non-empty.

Local names do not start with a `'+'` character.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an array `A` of `0`s and `1`s, how many non-empty subarrays have sum `S`?

Example 1:
Input: A = [1,0,1,0,1], S = 2
Output: 4
Explanation: 
The 4 subarrays are bolded below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
Note:
`A.length <= 30000`
`0 <= S <= A.length`
`A[i]` is either `0` or `1`.",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `n x n` array of integers `matrix`, return the minimum sum of any falling path through `matrix`.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position `(row, col)` will be `(row + 1, col - 1)`, `(row + 1, col)`, or `(row + 1, col + 1)`.


Example 1:
Input: matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two falling paths with a minimum sum underlined below:
[[2,1,3],      [[2,1,3],
 [6,5,4],       [6,5,4],
 [7,8,9]]       [7,8,9]]

Example 2:
Input: matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The falling path with a minimum sum is underlined below:
[[-19,57],
 [-40,-5]]

Example 3:
Input: matrix = [[-48]]
Output: -48

Constraints:
`n == matrix.length`
`n == matrix[i].length`
`1 <= n <= 100`
`-100 <= matrix[i][j] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For some fixed `N`, an array `A` is beautiful if it is a permutation of the integers `1, 2, ..., N`, such that:
For every `i < j`, there is no `k` with `i < k < j` such that `A[k] * 2 = A[i] + A[j]`.

Given `N`, return any beautiful array `A`.  (It is guaranteed that one exists.)

Example 1:
Input: 4
Output: [2,1,4,3]

Example 2:
Input: 5
Output: [3,1,2,5,4]
Note:
`1 <= N <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a `RecentCounter` class which counts the number of recent requests within a certain time frame.

Implement the `RecentCounter` class:
`RecentCounter()` Initializes the counter with zero recent requests.

`int ping(int t)` Adds a new request at time `t`, where `t` represents some time in milliseconds, and returns the number of requests that has happened in the past `3000` milliseconds (including the new request). Specifically, return the number of requests that have happened in the inclusive range `[t - 3000, t]`.

It is guaranteed that every call to `ping` uses a strictly larger value of `t` than the previous call.


Example 1:
Input
[""RecentCounter"", ""ping"", ""ping"", ""ping"", ""ping""]
[[], [1], [100], [3001], [3002]]
Output
[null, 1, 2, 3, 3]
Explanation
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1);     // requests = [1], range is [-2999,1], return 1
recentCounter.ping(100);   // requests = [1, 100], range is [-2900,100], return 2
recentCounter.ping(3001);  // requests = [1, 100, 3001], range is [1,3001], return 3
recentCounter.ping(3002);  // requests = [1, 100, 3001, 3002], range is [2,3002], return 3

Constraints:
`1 <= t <= 109`
Each test case will call `ping` with strictly increasing values of `t`.

At most `104` calls will be made to `ping`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a given 2D binary array `A`, there are two islands.  (An island is a 4-directionally connected group of `1`s not connected to any other 1s.)
Now, we may change `0`s to `1`s so as to connect the two islands together to form 1 island.

Return the smallest number of `0`s that must be flipped.  (It is guaranteed that the answer is at least 1.)

Example 1:
Input: A = [[0,1],[1,0]]
Output: 1

Example 2:
Input: A = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2

Example 3:
Input: A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1

Constraints:
`2 <= A.length == A[0].length <= 100`
`A[i][j] == 0` or `A[i][j] == 1`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The chess knight has a unique movement, it may move two squares vertically and one square horizontally, or two squares horizontally and one square vertically (with both forming the shape of an L). The possible movements of chess knight are shown in this diagaram:
A chess knight can move as indicated in the chess diagram below:
We have a chess knight and a phone pad as shown below, the knight can only stand on a numeric cell (i.e. blue cell).

Given an integer `n`, return how many distinct phone numbers of length `n` we can dial.

You are allowed to place the knight on any numeric cell initially and then you should perform `n - 1` jumps to dial a number of length `n`. All jumps should be valid knight jumps.

As the answer may be very large, return the answer modulo `109 + 7`.


Example 1:
Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so placing the knight over any numeric cell of the 10 cells is sufficient.


Example 2:
Input: n = 2
Output: 20
Explanation: All the valid number we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94]

Example 3:
Input: n = 3
Output: 46

Example 4:
Input: n = 4
Output: 104

Example 5:
Input: n = 3131
Output: 136006598
Explanation: Please take care of the mod.


Constraints:
`1 <= n <= 5000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You want to form a `target` string of lowercase letters.

At the beginning, your sequence is `target.length` `'?'` marks.  You also have a `stamp` of lowercase letters.

On each turn, you may place the stamp over the sequence, and replace every letter in the sequence with the corresponding letter from the stamp.  You can make up to `10 * target.length` turns.

For example, if the initial sequence is ""?????"", and your stamp is `""abc""`,  then you may make ""abc??"", ""?abc?"", ""??abc"" in the first turn.  (Note that the stamp must be fully contained in the boundaries of the sequence in order to stamp.)
If the sequence is possible to stamp, then return an array of the index of the left-most letter being stamped at each turn.  If the sequence is not possible to stamp, return an empty array.

For example, if the sequence is ""ababc"", and the stamp is `""abc""`, then we could return the answer `[0, 2]`, corresponding to the moves ""?????"" -> ""abc??"" -> ""ababc"".

Also, if the sequence is possible to stamp, it is guaranteed it is possible to stamp within `10 * target.length` moves.  Any answers specifying more than this number of moves will not be accepted.


Example 1:
Input: stamp = ""abc"", target = ""ababc""
Output: [0,2]
([1,0,2] would also be accepted as an answer, as well as some other answers.)

Example 2:
Input: stamp = ""abca"", target = ""aabcaca""
Output: [3,0,1]
Note:
`1 <= stamp.length <= target.length <= 1000`
`stamp` and `target` only contain lowercase letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of `logs`. Each log is a space-delimited string of words, where the first word is the identifier.

There are two types of logs:
Letter-logs: All words (except the identifier) consist of lowercase English letters.

Digit-logs: All words (except the identifier) consist of digits.

Reorder these logs so that:
The letter-logs come before all digit-logs.

The letter-logs are sorted lexicographically by their contents. If their contents are the same, then sort them lexicographically by their identifiers.

The digit-logs maintain their relative ordering.

Return the final order of the logs.


Example 1:
Input: logs = [""dig1 8 1 5 1"",""let1 art can"",""dig2 3 6"",""let2 own kit dig"",""let3 art zero""]
Output: [""let1 art can"",""let3 art zero"",""let2 own kit dig"",""dig1 8 1 5 1"",""dig2 3 6""]
Explanation:
The letter-log contents are all different, so their ordering is ""art can"", ""art zero"", ""own kit dig"".

The digit-logs have a relative order of ""dig1 8 1 5 1"", ""dig2 3 6"".


Example 2:
Input: logs = [""a1 9 2 3 1"",""g1 act car"",""zo4 4 7"",""ab1 off key dog"",""a8 act zoo""]
Output: [""g1 act car"",""a8 act zoo"",""ab1 off key dog"",""a1 9 2 3 1"",""zo4 4 7""]

Constraints:
`1 <= logs.length <= 100`
`3 <= logs[i].length <= 100`
All the tokens of `logs[i]` are separated by a single space.

`logs[i]` is guaranteed to have an identifier and at least one word after the identifier.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` node of a binary search tree, return the sum of values of all nodes with a value in the range `[low, high]`.


Example 1:
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32

Example 2:
Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23

Constraints:
The number of nodes in the tree is in the range `[1, 2 * 104]`.

`1 <= Node.val <= 105`
`1 <= low <= high <= 105`
All `Node.val` are unique.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of points in the xy-plane, determine the minimum area of a rectangle formed from these points, with sides parallel to the x and y axes.

If there isn't any rectangle, return 0.


Example 1:
Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4

Example 2:
Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2
Note:
`1 <= points.length <= 500`
`0 <= points[i][0] <= 40000`
`0 <= points[i][1] <= 40000`
All points are distinct.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A permutation `perm` of `n + 1` integers of all the integers in the range `[0, n]` can be represented as a string `s` of length `n` where:
`s[i] == 'I'` if `perm[i] < perm[i + 1]`, and
`s[i] == 'D'` if `perm[i] > perm[i + 1]`.

Given a string `s`, reconstruct the permutation perm and return it. If there are multiple valid permutations perm, return any of them.


Example 1:
Input: s = ""IDID""
Output: [0,4,1,3,2]

Example 2:
Input: s = ""III""
Output: [0,1,2,3]

Example 3:
Input: s = ""DDI""
Output: [3,2,0,1]

Constraints:
`1 <= s.length <= 105`
`s[i]` is either `'I'` or `'D'`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `words`, return the smallest string that contains each string in `words` as a substring. If there are multiple valid strings of the smallest length, return any of them.

You may assume that no string in `words` is a substring of another string in `words`.


Example 1:
Input: words = [""alex"",""loves"",""leetcode""]
Output: ""alexlovesleetcode""
Explanation: All permutations of ""alex"",""loves"",""leetcode"" would also be accepted.


Example 2:
Input: words = [""catg"",""ctaagt"",""gcta"",""ttca"",""atgcatc""]
Output: ""gctaagttcatgcatc""

Constraints:
`1 <= words.length <= 12`
`1 <= words[i].length <= 20`
`words[i]` consists of lowercase English letters.

All the strings of `words` are unique.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of `n` strings `strs`, all of the same length.

The strings can be arranged such that there is one on each line, making a grid. For example, `strs = [""abc"", ""bce"", ""cae""]` can be arranged as:
abc
bce
cae
You want to delete the columns that are not sorted lexicographically. In the above example (0-indexed), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.

Return the number of columns that you will delete.


Example 1:
Input: strs = [""cba"",""daf"",""ghi""]
Output: 1
Explanation: The grid looks as follows:
  cba
  daf
  ghi
Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.


Example 2:
Input: strs = [""a"",""b""]
Output: 0
Explanation: The grid looks as follows:
  a
  b
Column 0 is the only column and is sorted, so you will not delete any columns.


Example 3:
Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: The grid looks as follows:
  zyx
  wvu
  tsr
All 3 columns are not sorted, so you will delete all 3.


Constraints:
`n == strs.length`
`1 <= n <= 100`
`1 <= strs[i].length <= 1000`
`strs[i]` consists of lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers A, a move consists of choosing any `A[i]`, and incrementing it by `1`.

Return the least number of moves to make every value in `A` unique.


Example 1:
Input: [1,2,2]
Output: 1
Explanation:  After 1 move, the array could be [1, 2, 3].


Example 2:
Input: [3,2,1,2,1,7]
Output: 6
Explanation:  After 6 moves, the array could be [3, 4, 1, 2, 5, 7].

It can be shown with 5 or less moves that it is impossible for the array to have all unique values.

Note:
`0 <= A.length <= 40000`
`0 <= A[i] < 40000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sequences `pushed` and `popped` with distinct values, return `true` if and only if this could have been the result of a sequence of push and pop operations on an initially empty stack.


Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
Output: true
Explanation: We might do the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
Output: false
Explanation: 1 cannot be popped before 2.


Constraints:
`0 <= pushed.length == popped.length <= 1000`
`0 <= pushed[i], popped[i] < 1000`
`pushed` is a permutation of `popped`.

`pushed` and `popped` have distinct values.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2D plane, we place `n` stones at some integer coordinate points. Each coordinate point may have at most one stone.

A stone can be removed if it shares either the same row or the same column as another stone that has not been removed.

Given an array `stones` of length `n` where `stones[i] = [xi, yi]` represents the location of the `ith` stone, return the largest possible number of stones that can be removed.


Example 1:
Input: stones = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Explanation: One way to remove 5 stones is as follows:
1. Remove stone [2,2] because it shares the same row as [2,1].

2. Remove stone [2,1] because it shares the same column as [0,1].

3. Remove stone [1,2] because it shares the same row as [1,0].

4. Remove stone [1,0] because it shares the same column as [0,0].

5. Remove stone [0,1] because it shares the same row as [0,0].

Stone [0,0] cannot be removed since it does not share a row/column with another stone still on the plane.


Example 2:
Input: stones = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to make 3 moves is as follows:
1. Remove stone [2,2] because it shares the same row as [2,0].

2. Remove stone [2,0] because it shares the same column as [0,0].

3. Remove stone [0,2] because it shares the same row as [0,0].

Stones [0,0] and [1,1] cannot be removed since they do not share a row/column with another stone still on the plane.


Example 3:
Input: stones = [[0,0]]
Output: 0
Explanation: [0,0] is the only stone on the plane, so you cannot remove it.


Constraints:
`1 <= stones.length <= 1000`
`0 <= xi, yi <= 104`
No two stones are at the same coordinate point.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an initial power of `P`, an initial score of `0`, and a bag of `tokens` where `tokens[i]` is the value of the `ith` token (0-indexed).

Your goal is to maximize your total score by potentially playing each token in one of two ways:
If your current power is at least `tokens[i]`, you may play the `ith` token face up, losing `tokens[i]` power and gaining `1` score.

If your current score is at least `1`, you may play the `ith` token face down, gaining `tokens[i]` power and losing `1` score.

Each token may be played at most once and in any order. You do not have to play all the tokens.

Return the largest possible score you can achieve after playing any number of tokens.


Example 1:
Input: tokens = [100], P = 50
Output: 0
Explanation: Playing the only token in the bag is impossible because you either have too little power or too little score.


Example 2:
Input: tokens = [100,200], P = 150
Output: 1
Explanation: Play the 0th token (100) face up, your power becomes 50 and score becomes 1.

There is no need to play the 1st token since you cannot play it face up to add to your score.


Example 3:
Input: tokens = [100,200,300,400], P = 200
Output: 2
Explanation: Play the tokens in this order to get a score of 2:
1. Play the 0th token (100) face up, your power becomes 100 and score becomes 1.

2. Play the 3rd token (400) face down, your power becomes 500 and score becomes 0.

3. Play the 1st token (200) face up, your power becomes 300 and score becomes 1.

4. Play the 2nd token (300) face up, your power becomes 0 and score becomes 2.


Constraints:
`0 <= tokens.length <= 1000`
`0 <= tokens[i], P < 104`",0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr` of 4 digits, find the latest 24-hour time that can be made using each digit exactly once.

24-hour times are formatted as `""HH:MM""`, where `HH` is between `00` and `23`, and `MM` is between `00` and `59`. The earliest 24-hour time is `00:00`, and the latest is `23:59`.

Return the latest 24-hour time in `""HH:MM""` format.  If no valid time can be made, return an empty string.


Example 1:
Input: A = [1,2,3,4]
Output: ""23:41""
Explanation: The valid 24-hour times are ""12:34"", ""12:43"", ""13:24"", ""13:42"", ""14:23"", ""14:32"", ""21:34"", ""21:43"", ""23:14"", and ""23:41"". Of these times, ""23:41"" is the latest.


Example 2:
Input: A = [5,5,5,5]
Output: """"
Explanation: There are no valid 24-hour times as ""55:55"" is not valid.


Example 3:
Input: A = [0,0,0,0]
Output: ""00:00""

Example 4:
Input: A = [0,0,1,0]
Output: ""10:00""

Constraints:
`arr.length == 4`
`0 <= arr[i] <= 9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a deck of cards, every card has a unique integer.  You can order the deck in any order you want.

Initially, all the cards start face down (unrevealed) in one deck.

Now, you do the following steps repeatedly, until all cards are revealed:
Take the top card of the deck, reveal it, and take it out of the deck.

If there are still cards in the deck, put the next top card of the deck at the bottom of the deck.

If there are still unrevealed cards, go back to step 1.  Otherwise, stop.

Return an ordering of the deck that would reveal the cards in increasing order.

The first entry in the answer is considered to be the top of the deck.


Example 1:
Input: [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
Explanation: 
We get the deck in the order [17,13,11,2,3,5,7] (this order doesn't matter), and reorder it.

After reordering, the deck starts as [2,13,3,11,5,17,7], where 2 is the top of the deck.

We reveal 2, and move 13 to the bottom.  The deck is now [3,11,5,17,7,13].

We reveal 3, and move 11 to the bottom.  The deck is now [5,17,7,13,11].

We reveal 5, and move 17 to the bottom.  The deck is now [7,13,11,17].

We reveal 7, and move 13 to the bottom.  The deck is now [11,17,13].

We reveal 11, and move 17 to the bottom.  The deck is now [13,17].

We reveal 13, and move 17 to the bottom.  The deck is now [17].

We reveal 17.

Since all the cards revealed are in increasing order, the answer is correct.

Note:
`1 <= A.length <= 1000`
`1 <= A[i] <= 10^6`
`A[i] != A[j]` for all `i != j`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For a binary tree T, we can define a flip operation as follows: choose any node, and swap the left and right child subtrees.

A binary tree X is flip equivalent to a binary tree Y if and only if we can make X equal to Y after some number of flip operations.

Given the roots of two binary trees `root1` and `root2`, return `true` if the two trees are flip equivelent or `false` otherwise.


Example 1:
Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null,null,8,7]
Output: true
Explanation: We flipped at nodes with values 1, 3, and 5.


Example 2:
Input: root1 = [], root2 = []
Output: true

Example 3:
Input: root1 = [], root2 = [1]
Output: false

Example 4:
Input: root1 = [0,null,1], root2 = []
Output: false

Example 5:
Input: root1 = [0,null,1], root2 = [0,1]
Output: true

Constraints:
The number of nodes in each tree is in the range `[0, 100]`.

Each tree will have unique node values in the range `[0, 99]`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array of unique positive integers `A`, consider the following graph:
There are `A.length` nodes, labelled `A[0]` to `A[A.length - 1];`
There is an edge between `A[i]` and `A[j]` if and only if `A[i]` and `A[j]` share a common factor greater than 1.

Return the size of the largest connected component in the graph.


Example 1:
Input: [4,6,15,35]
Output: 4

Example 2:
Input: [20,50,9,63]
Output: 2

Example 3:
Input: [2,3,6,7,4,12,21,39]
Output: 8
Note:
`1 <= A.length <= 20000`
`1 <= A[i] <= 100000`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an alien language, surprisingly they also use english lowercase letters, but possibly in a different `order`. The `order` of the alphabet is some permutation of lowercase letters.

Given a sequence of `words` written in the alien language, and the `order` of the alphabet, return `true` if and only if the given `words` are sorted lexicographicaly in this alien language.


Example 1:
Input: words = [""hello"",""leetcode""], order = ""hlabcdefgijkmnopqrstuvwxyz""
Output: true
Explanation: As 'h' comes before 'l' in this language, then the sequence is sorted.


Example 2:
Input: words = [""word"",""world"",""row""], order = ""worldabcefghijkmnpqstuvxyz""
Output: false
Explanation: As 'd' comes after 'l' in this language, then words[0] > words[1], hence the sequence is unsorted.


Example 3:
Input: words = [""apple"",""app""], order = ""abcdefghijklmnopqrstuvwxyz""
Output: false
Explanation: The first three characters ""app"" match, and the second string is shorter (in size.) According to lexicographical rules ""apple"" > ""app"", because 'l' > '∅', where '∅' is defined as the blank character which is less than any other character (More info).


Constraints:
`1 <= words.length <= 100`
`1 <= words[i].length <= 20`
`order.length == 26`
All characters in `words[i]` and `order` are English lowercase letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr` of even length, return `true` if and only if it is possible to reorder it such that `arr[2 * i + 1] = 2 * arr[2 * i]` for every `0 <= i < len(arr) / 2`.


Example 1:
Input: arr = [3,1,3,6]
Output: false

Example 2:
Input: arr = [2,1,2,6]
Output: false

Example 3:
Input: arr = [4,-2,2,-4]
Output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].


Example 4:
Input: arr = [1,2,4,16,8,4]
Output: false

Constraints:
`0 <= arr.length <= 3 * 104`
`arr.length` is even.

`-105 <= arr[i] <= 105`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of `n` strings `strs`, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have `strs = [""abcdef"",""uvwxyz""]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[""bef"", ""vyz""]`.

Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has its elements in lexicographic order (i.e., `strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Return the minimum possible value of `answer.length`.


Example 1:
Input: strs = [""ca"",""bb"",""ac""]
Output: 1
Explanation: 
After deleting the first column, strs = [""a"", ""b"", ""c""].

Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).

We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.


Example 2:
Input: strs = [""xc"",""yb"",""za""]
Output: 0
Explanation: 
strs is already in lexicographic order, so we do not need to delete anything.

Note that the rows of strs are not necessarily in lexicographic order:
i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)

Example 3:
Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: We have to delete every column.


Constraints:
`n == strs.length`
`1 <= n <= 100`
`1 <= strs[i].length <= 100`
`strs[i]` consists of lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `8` prison cells in a row and each cell is either occupied or vacant.

Each day, whether the cell is occupied or vacant changes according to the following rules:
If a cell has two adjacent neighbors that are both occupied or both vacant, then the cell becomes occupied.

Otherwise, it becomes vacant.

Note that because the prison is a row, the first and the last cells in the row can't have two adjacent neighbors.

You are given an integer array `cells` where `cells[i] == 1` if the `ith` cell is occupied and `cells[i] == 0` if the `ith` cell is vacant, and you are given an integer `n`.

Return the state of the prison after `n` days (i.e., `n` such changes described above).


Example 1:
Input: cells = [0,1,0,1,1,0,0,1], n = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: The following table summarizes the state of the prison on each day:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]

Example 2:
Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000
Output: [0,0,1,1,1,1,1,0]

Constraints:
`cells.length == 8`
`cells[i]` is either `0` or `1`.

`1 <= n <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between `1` and `2h` nodes inclusive at the last level `h`.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.


Example 2:
Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.


Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`1 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a N x N `grid` composed of 1 x 1 squares, each 1 x 1 square consists of a `/`, `\`, or blank space.  These characters divide the square into contiguous regions.

(Note that backslash characters are escaped, so a `\` is represented as `""\\""`.)
Return the number of regions.


Example 1:
Input:
[
  "" /"",
  ""/ ""
]
Output: 2
Explanation: The 2x2 grid is as follows:

Example 2:
Input:
[
  "" /"",
  ""  ""
]
Output: 1
Explanation: The 2x2 grid is as follows:

Example 3:
Input:
[
  ""\\/"",
  ""/\\""
]
Output: 4
Explanation: (Recall that because \ characters are escaped, ""\\/"" refers to \/, and ""/\\"" refers to /\.)
The 2x2 grid is as follows:

Example 4:
Input:
[
  ""/\\"",
  ""\\/""
]
Output: 5
Explanation: (Recall that because \ characters are escaped, ""/\\"" refers to /\, and ""\\/"" refers to \/.)
The 2x2 grid is as follows:

Example 5:
Input:
[
  ""//"",
  ""/ ""
]
Output: 3
Explanation: The 2x2 grid is as follows:
Note:
`1 <= grid.length == grid[0].length <= 30`
`grid[i][j]` is either `'/'`, `'\'`, or `' '`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of `n` strings `strs`, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have `strs = [""abcdef"",""uvwxyz""]` and deletion indices `{0, 2, 3}`, then the final array after deletions is `[""bef"", ""vyz""]`.

Suppose we chose a set of deletion indices `answer` such that after deletions, the final array has every string (row) in lexicographic order. (i.e., `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])`, and `(strs[1][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, and so on). Return the minimum possible value of `answer.length`.


Example 1:
Input: strs = [""babca"",""bbazb""]
Output: 3
Explanation: After deleting columns 0, 1, and 4, the final array is strs = [""bc"", ""az""].

Both these rows are individually in lexicographic order (ie. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1]).

Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographic order.


Example 2:
Input: strs = [""edcba""]
Output: 4
Explanation: If we delete less than 4 columns, the only row will not be lexicographically sorted.


Example 3:
Input: strs = [""ghi"",""def"",""abc""]
Output: 0
Explanation: All rows are already lexicographically sorted.


Constraints:
`n == strs.length`
`1 <= n <= 100`
`1 <= strs[i].length <= 100`
`strs[i]` consists of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a array `A` of size `2N`, there are `N+1` unique elements, and exactly one of these elements is repeated `N` times.

Return the element repeated `N` times.


Example 1:
Input: [1,2,3,3]
Output: 3

Example 2:
Input: [2,1,2,5,3,2]
Output: 2

Example 3:
Input: [5,1,5,2,5,3,5,4]
Output: 5
Note:
`4 <= A.length <= 10000`
`0 <= A[i] < 10000`
`A.length` is even",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of integers, a ramp is a tuple `(i, j)` for which `i < j` and `A[i] <= A[j]`.  The width of such a ramp is `j - i`.

Find the maximum width of a ramp in `A`.  If one doesn't exist, return 0.


Example 1:
Input: [6,0,8,2,1,5]
Output: 4
Explanation: 
The maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.


Example 2:
Input: [9,8,1,0,1,9,4,0,4,1]
Output: 7
Explanation: 
The maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.

Note:
`2 <= A.length <= 50000`
`0 <= A[i] <= 50000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of points in the xy-plane, determine the minimum area of any rectangle formed from these points, with sides not necessarily parallel to the x and y axes.

If there isn't any rectangle, return 0.


Example 1:
Input: [[1,2],[2,1],[1,0],[0,1]]
Output: 2.00000
Explanation: The minimum area rectangle occurs at [1,2],[2,1],[1,0],[0,1], with an area of 2.


Example 2:
Input: [[0,1],[2,1],[1,1],[1,0],[2,0]]
Output: 1.00000
Explanation: The minimum area rectangle occurs at [1,0],[1,1],[2,1],[2,0], with an area of 1.


Example 3:
Input: [[0,3],[1,2],[3,1],[1,3],[2,1]]
Output: 0
Explanation: There is no possible rectangle to form from these points.


Example 4:
Input: [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3]]
Output: 2.00000
Explanation: The minimum area rectangle occurs at [2,1],[2,3],[3,3],[3,1], with an area of 2.

Note:
`1 <= points.length <= 50`
`0 <= points[i][0] <= 40000`
`0 <= points[i][1] <= 40000`
All points are distinct.

Answers within `10^-5` of the actual value will be accepted as correct.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a single positive integer `x`, we will write an expression of the form `x (op1) x (op2) x (op3) x ...` where each operator `op1`, `op2`, etc. is either addition, subtraction, multiplication, or division (`+`, `-`, `*`, or `/)`. For example, with `x = 3`, we might write `3 * 3 / 3 + 3 - 3` which is a value of 3.

When writing such an expression, we adhere to the following conventions:
The division operator (`/`) returns rational numbers.

There are no parentheses placed anywhere.

We use the usual order of operations: multiplication and division happen before addition and subtraction.

It is not allowed to use the unary negation operator (`-`). For example, ""`x - x`"" is a valid expression as it only uses subtraction, but ""`-x + x`"" is not because it uses negation.

We would like to write an expression with the least number of operators such that the expression equals the given `target`. Return the least number of operators used.


Example 1:
Input: x = 3, target = 19
Output: 5
Explanation: 3 * 3 + 3 * 3 + 3 / 3.

The expression contains 5 operations.


Example 2:
Input: x = 5, target = 501
Output: 8
Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.

The expression contains 8 operations.


Example 3:
Input: x = 100, target = 100000000
Output: 3
Explanation: 100 * 100 * 100 * 100.

The expression contains 3 operations.


Constraints:
`2 <= x <= 100`
`1 <= target <= 2 * 108`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary tree is univalued if every node in the tree has the same value.

Return `true` if and only if the given tree is univalued.


Example 1:
Input: [1,1,1,1,1,null,1]
Output: true

Example 2:
Input: [2,2,2,5,2]
Output: false
Note:
The number of nodes in the given tree will be in the range `[1, 100]`.

Each node's value will be an integer in the range `[0, 99]`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `wordlist`, we want to implement a spellchecker that converts a query word into a correct word.

For a given `query` word, the spell checker handles two categories of spelling mistakes:
Capitalization: If the query matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the case in the wordlist.

	

Example: `wordlist = [""yellow""]`, `query = ""YellOw""`: `correct = ""yellow""`

Example: `wordlist = [""Yellow""]`, `query = ""yellow""`: `correct = ""Yellow""`

Example: `wordlist = [""yellow""]`, `query = ""yellow""`: `correct = ""yellow""`
Vowel Errors: If after replacing the vowels `('a', 'e', 'i', 'o', 'u')` of the query word with any vowel individually, it matches a word in the wordlist (case-insensitive), then the query word is returned with the same case as the match in the wordlist.

	

Example: `wordlist = [""YellOw""]`, `query = ""yollow""`: `correct = ""YellOw""`

Example: `wordlist = [""YellOw""]`, `query = ""yeellow""`: `correct = """"` (no match)

Example: `wordlist = [""YellOw""]`, `query = ""yllw""`: `correct = """"` (no match)
In addition, the spell checker operates under the following precedence rules:
When the query exactly matches a word in the wordlist (case-sensitive), you should return the same word back.

When the query matches a word up to capitlization, you should return the first such match in the wordlist.

When the query matches a word up to vowel errors, you should return the first such match in the wordlist.

If the query has no matches in the wordlist, you should return the empty string.

Given some `queries`, return a list of words `answer`, where `answer[i]` is the correct word for `query = queries[i]`.


Example 1:
Input: wordlist = [""KiTe"",""kite"",""hare"",""Hare""], queries = [""kite"",""Kite"",""KiTe"",""Hare"",""HARE"",""Hear"",""hear"",""keti"",""keet"",""keto""]
Output: [""kite"",""KiTe"",""KiTe"",""Hare"",""hare"","""","""",""KiTe"","""",""KiTe""]

Example 2:
Input: wordlist = [""yellow""], queries = [""YellOw""]
Output: [""yellow""]

Constraints:
`1 <= wordlist.length, queries.length <= 5000`
`1 <= wordlist[i].length, queries[i].length <= 7`
`wordlist[i]` and `queries[i]` consist only of only English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Return all non-negative integers of length `n` such that the absolute difference between every two consecutive digits is `k`.

Note that every number in the answer must not have leading zeros. For example, `01` has one leading zero and is invalid.

You may return the answer in any order.


Example 1:
Input: n = 3, k = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number, because it has leading zeroes.


Example 2:
Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]

Example 3:
Input: n = 2, k = 0
Output: [11,22,33,44,55,66,77,88,99]

Example 4:
Input: n = 2, k = 2
Output: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]

Constraints:
`2 <= n <= 9`
`0 <= k <= 9`",0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, we install cameras on the nodes of the tree. 
Each camera at a node can monitor its parent, itself, and its immediate children.

Calculate the minimum number of cameras needed to monitor all nodes of the tree.


Example 1:
Input: [0,0,null,0,0]
Output: 1
Explanation: One camera is enough to monitor all nodes if placed as shown.


Example 2:
Input: [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are needed to monitor all nodes of the tree. The above image shows one of the valid configurations of camera placement.

Note:
The number of nodes in the given tree will be in the range `[1, 1000]`.

Every node has value 0.",0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`, sort the array by performing a series of pancake flips.

In one pancake flip we do the following steps:
Choose an integer `k` where `1 <= k <= arr.length`.

Reverse the sub-array `arr[0...k-1]` (0-indexed).

For example, if `arr = [3,2,1,4]` and we performed a pancake flip choosing `k = 3`, we reverse the sub-array `[3,2,1]`, so `arr = [1,2,3,4]` after the pancake flip at `k = 3`.

Return an array of the `k`-values corresponding to a sequence of pancake flips that sort `arr`. Any valid answer that sorts the array within `10 * arr.length` flips will be judged as correct.


Example 1:
Input: arr = [3,2,4,1]
Output: [4,2,4,3]
Explanation: 
We perform 4 pancake flips, with k values 4, 2, 4, and 3.

Starting state: arr = [3, 2, 4, 1]
After 1st flip (k = 4): arr = [1, 4, 2, 3]
After 2nd flip (k = 2): arr = [4, 1, 2, 3]
After 3rd flip (k = 4): arr = [3, 2, 1, 4]
After 4th flip (k = 3): arr = [1, 2, 3, 4], which is sorted.


Example 2:
Input: arr = [1,2,3]
Output: []
Explanation: The input is already sorted, so there is no need to flip anything.

Note that other answers, such as [3, 3], would also be accepted.


Constraints:
`1 <= arr.length <= 100`
`1 <= arr[i] <= arr.length`
All integers in `arr` are unique (i.e. `arr` is a permutation of the integers from `1` to `arr.length`).",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` of a binary tree with `n` nodes, where each node is uniquely assigned a value from `1` to `n`. You are also given a sequence of `n` values `voyage`, which is the desired pre-order traversal of the binary tree.

Any node in the binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 will have the following effect:
Flip the smallest number of nodes so that the pre-order traversal of the tree matches `voyage`.

Return a list of the values of all flipped nodes. You may return the answer in any order. If it is impossible to flip the nodes in the tree to make the pre-order traversal match `voyage`, return the list `[-1]`.


Example 1:
Input: root = [1,2], voyage = [2,1]
Output: [-1]
Explanation: It is impossible to flip the nodes such that the pre-order traversal matches voyage.


Example 2:
Input: root = [1,2,3], voyage = [1,3,2]
Output: [1]
Explanation: Flipping node 1 swaps nodes 2 and 3, so the pre-order traversal matches voyage.


Example 3:
Input: root = [1,2,3], voyage = [1,2,3]
Output: []
Explanation: The tree's pre-order traversal already matches voyage, so no nodes need to be flipped.


Constraints:
The number of nodes in the tree is `n`.

`n == voyage.length`
`1 <= n <= 100`
`1 <= Node.val, voyage[i] <= n`
All the values in the tree are unique.

All the values in `voyage` are unique.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, each of which represents a non-negative rational number, return `true` if and only if they represent the same number. The strings may use parentheses to denote the repeating part of the rational number.

A rational number can be represented using up to three parts: `<IntegerPart>`, `<NonRepeatingPart>`, and a `<RepeatingPart>`. The number will be represented in one of the following three ways:
`<IntegerPart>`
	
For example, `12`, `0`, and `123`.

`<IntegerPart><.><NonRepeatingPart>`
	
For example, `0.5`, `1.`, `2.12`, and `123.0001`.

`<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>`
	
For example, `0.1(6)`, `1.(9)`, `123.00(1212)`.

The repeating portion of a decimal expansion is conventionally denoted within a pair of round brackets. For example:
`1/6 = 0.16666666... = 0.1(6) = 0.1666(6) = 0.166(66)`.


Example 1:
Input: s = ""0.(52)"", t = ""0.5(25)""
Output: true
Explanation: Because ""0.(52)"" represents 0.52525252..., and ""0.5(25)"" represents 0.52525252525..... , the strings represent the same number.


Example 2:
Input: s = ""0.1666(6)"", t = ""0.166(66)""
Output: true

Example 3:
Input: s = ""0.9(9)"", t = ""1.""
Output: true
Explanation: ""0.9(9)"" represents 0.999999999... repeated forever, which equals 1.  [See this link for an explanation.]
""1."" represents the number 1, which is formed correctly: (IntegerPart) = ""1"" and (NonRepeatingPart) = """".


Constraints:
Each part consists only of digits.

The `<IntegerPart>` does not have leading zeros (except for the zero itself).

`1 <= <IntegerPart>.length <= 4`
`0 <= <NonRepeatingPart>.length <= 4`
`1 <= <RepeatingPart>.length <= 4`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane and an integer `k`, return the `k` closest points to the origin `(0, 0)`.

The distance between two points on the X-Y plane is the Euclidean distance (i.e., `√(x1 - x2)2 + (y1 - y2)2`).

You may return the answer in any order. The answer is guaranteed to be unique (except for the order that it is in).


Example 1:
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
Explanation:
The distance between (1, 3) and the origin is sqrt(10).

The distance between (-2, 2) and the origin is sqrt(8).

Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.

We only want the closest k = 1 points from the origin, so the answer is just [[-2,2]].


Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.


Constraints:
`1 <= k <= points.length <= 104`
`-104 < xi, yi < 104`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of integers, return the number of (contiguous, non-empty) subarrays that have a sum divisible by `K`.


Example 1:
Input: A = [4,5,0,-2,-3,1], K = 5
Output: 7
Explanation: There are 7 subarrays with a sum divisible by K = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3], [-2, -3]
Note:
`1 <= A.length <= 30000`
`-10000 <= A[i] <= 10000`
`2 <= K <= 10000`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `arr`. From some starting index, you can make a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd-numbered jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even-numbered jumps. Note that the jumps are numbered, not the indices.

You may jump forward from index `i` to index `j` (with `i < j`) in the following way:
During odd-numbered jumps (i.e., jumps 1, 3, 5, ...), you jump to the index `j` such that `arr[i] <= arr[j]` and `arr[j]` is the smallest possible value. If there are multiple such indices `j`, you can only jump to the smallest such index `j`.

During even-numbered jumps (i.e., jumps 2, 4, 6, ...), you jump to the index `j` such that `arr[i] >= arr[j]` and `arr[j]` is the largest possible value. If there are multiple such indices `j`, you can only jump to the smallest such index `j`.

It may be the case that for some index `i`, there are no legal jumps.

A starting index is good if, starting from that index, you can reach the end of the array (index `arr.length - 1`) by jumping some number of times (possibly 0 or more than once).

Return the number of good starting indices.


Example 1:
Input: arr = [10,13,12,14,15]
Output: 2
Explanation: 
From starting index i = 0, we can make our 1st jump to i = 2 (since arr[2] is the smallest among arr[1], arr[2], arr[3], arr[4] that is greater or equal to arr[0]), then we cannot jump any more.

From starting index i = 1 and i = 2, we can make our 1st jump to i = 3, then we cannot jump any more.

From starting index i = 3, we can make our 1st jump to i = 4, so we have reached the end.

From starting index i = 4, we have reached the end already.

In total, there are 2 different starting indices i = 3 and i = 4, where we can reach the end with some number of
jumps.


Example 2:
Input: arr = [2,3,1,1,4]
Output: 3
Explanation: 
From starting index i = 0, we make jumps to i = 1, i = 2, i = 3:
During our 1st jump (odd-numbered), we first jump to i = 1 because arr[1] is the smallest value in [arr[1], arr[2], arr[3], arr[4]] that is greater than or equal to arr[0].

During our 2nd jump (even-numbered), we jump from i = 1 to i = 2 because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the largest value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3
During our 3rd jump (odd-numbered), we jump from i = 2 to i = 3 because arr[3] is the smallest value in [arr[3], arr[4]] that is greater than or equal to arr[2].

We can't jump from i = 3 to i = 4, so the starting index i = 0 is not good.

In a similar manner, we can deduce that:
From starting index i = 1, we jump to i = 4, so we reach the end.

From starting index i = 2, we jump to i = 3, and then we can't jump anymore.

From starting index i = 3, we jump to i = 4, so we reach the end.

From starting index i = 4, we are already at the end.

In total, there are 3 different starting indices i = 1, i = 3, and i = 4, where we can reach the end with some
number of jumps.


Example 3:
Input: arr = [5,1,3,4,2]
Output: 3
Explanation: We can reach the end from starting indices 1, 2, and 4.


Constraints:
`1 <= arr.length <= 2 * 104`
`0 <= arr[i] < 105`",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return the largest perimeter of a triangle with a non-zero area, formed from three of these lengths. If it is impossible to form any triangle of a non-zero area, return `0`.


Example 1:
Input: nums = [2,1,2]
Output: 5

Example 2:
Input: nums = [1,2,1]
Output: 0

Example 3:
Input: nums = [3,2,3,4]
Output: 10

Example 4:
Input: nums = [3,6,2,3]
Output: 8

Constraints:
`3 <= nums.length <= 104`
`1 <= nums[i] <= 106`",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.


Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].

After sorting, it becomes [0,1,9,16,100].


Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

Constraints:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` is sorted in non-decreasing order.

Follow up: Squaring each element and sorting the new array is very trivial, could you find an `O(n)` solution using a different approach?",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, return the length of a maximum size turbulent subarray of `arr`.

A subarray is turbulent if the comparison sign flips between each adjacent pair of elements in the subarray.

More formally, a subarray `[arr[i], arr[i + 1], ..., arr[j]]` of `arr` is said to be turbulent if and only if:
For `i <= k < j`:
	
`arr[k] > arr[k + 1]` when `k` is odd, and
`arr[k] < arr[k + 1]` when `k` is even.

Or, for `i <= k < j`:
	
`arr[k] > arr[k + 1]` when `k` is even, and
`arr[k] < arr[k + 1]` when `k` is odd.


Example 1:
Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]

Example 2:
Input: arr = [4,8,12,16]
Output: 2

Example 3:
Input: arr = [100]
Output: 1

Constraints:
`1 <= arr.length <= 4 * 104`
`0 <= arr[i] <= 109`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` of a binary tree with `n` nodes where each `node` in the tree has `node.val` coins and there are `n` coins total.

In one move, we may choose two adjacent nodes and move one coin from one node to another. (A move may be from parent to child, or from child to parent.)
Return the number of moves required to make every node have exactly one coin.


Example 1:
Input: root = [3,0,0]
Output: 2
Explanation: From the root of the tree, we move one coin to its left child, and one coin to its right child.


Example 2:
Input: root = [0,3,0]
Output: 3
Explanation: From the left child of the root, we move two coins to the root [taking two moves].  Then, we move one coin from the root of the tree to the right child.


Example 3:
Input: root = [1,0,2]
Output: 2

Example 4:
Input: root = [1,0,0,null,3]
Output: 4

Constraints:
The number of nodes in the tree is `n`.

`1 <= n <= 100`
`0 <= Node.val <= n`
The sum of `Node.val` is `n`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2-dimensional `grid`, there are 4 types of squares:
`1` represents the starting square.  There is exactly one starting square.

`2` represents the ending square.  There is exactly one ending square.

`0` represents empty squares we can walk over.

`-1` represents obstacles that we cannot walk over.

Return the number of 4-directional walks from the starting square to the ending square, that walk over every non-obstacle square exactly once.


Example 1:
Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2)

Example 2:
Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths: 
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0),(2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2),(0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1),(0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3),(1,3),(1,2),(2,2),(2,3)

Example 3:
Input: [[0,1],[2,0]]
Output: 0
Explanation: 
There is no path that walks over every empty square exactly once.

Note that the starting and ending square can be anywhere in the grid.

Note:
`1 <= grid.length * grid[0].length <= 20`",0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Create a timebased key-value store class `TimeMap`, that supports two operations.

1. `set(string key, string value, int timestamp)`
Stores the `key` and `value`, along with the given `timestamp`.

2. `get(string key, int timestamp)`
Returns a value such that `set(key, value, timestamp_prev)` was called previously, with `timestamp_prev <= timestamp`.

If there are multiple such values, it returns the one with the largest `timestamp_prev`.

If there are no values, it returns the empty string (`""""`).


Example 1:
Input: inputs = [""TimeMap"",""set"",""get"",""get"",""set"",""get"",""get""], inputs = [[],[""foo"",""bar"",1],[""foo"",1],[""foo"",3],[""foo"",""bar2"",4],[""foo"",4],[""foo"",5]]
Output: [null,null,""bar"",""bar"",null,""bar2"",""bar2""]
Explanation:   
TimeMap kv;   
kv.set(""foo"", ""bar"", 1); // store the key ""foo"" and value ""bar"" along with timestamp = 1   
kv.get(""foo"", 1);  // output ""bar""   
kv.get(""foo"", 3); // output ""bar"" since there is no value corresponding to foo at timestamp 3 and timestamp 2, then the only value is at timestamp 1 ie ""bar""   
kv.set(""foo"", ""bar2"", 4);   
kv.get(""foo"", 4); // output ""bar2""   
kv.get(""foo"", 5); //output ""bar2""   

Example 2:
Input: inputs = [""TimeMap"",""set"",""set"",""get"",""get"",""get"",""get"",""get""], inputs = [[],[""love"",""high"",10],[""love"",""low"",20],[""love"",5],[""love"",10],[""love"",15],[""love"",20],[""love"",25]]
Output: [null,null,null,"""",""high"",""high"",""low"",""low""]
Note:
All key/value strings are lowercase.

All key/value strings have length in the range `[1, 100]`
The `timestamps` for all `TimeMap.set` operations are strictly increasing.

`1 <= timestamp <= 10^7`
`TimeMap.set` and `TimeMap.get` functions will be called a total of `120000` times (combined) per test case.",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `A`, find the number of triples of indices (i, j, k) such that:
`0 <= i < A.length`
`0 <= j < A.length`
`0 <= k < A.length`
`A[i] & A[j] & A[k] == 0`, where `&` represents the bitwise-AND operator.


Example 1:
Input: [2,1,3]
Output: 12
Explanation: We could choose the following i, j, k triples:
(i=0, j=0, k=1) : 2 & 2 & 1
(i=0, j=1, k=0) : 2 & 1 & 2
(i=0, j=1, k=1) : 2 & 1 & 1
(i=0, j=1, k=2) : 2 & 1 & 3
(i=0, j=2, k=1) : 2 & 3 & 1
(i=1, j=0, k=0) : 1 & 2 & 2
(i=1, j=0, k=1) : 1 & 2 & 1
(i=1, j=0, k=2) : 1 & 2 & 3
(i=1, j=1, k=0) : 1 & 1 & 2
(i=1, j=2, k=0) : 1 & 3 & 2
(i=2, j=0, k=1) : 3 & 2 & 1
(i=2, j=1, k=0) : 3 & 1 & 2
Note:
`1 <= A.length <= 1000`
`0 <= A[i] < 2^16`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a country popular for train travel, you have planned some train travelling one year in advance.  The days of the year that you will travel is given as an array `days`.  Each day is an integer from `1` to `365`.

Train tickets are sold in 3 different ways:
a 1-day pass is sold for `costs[0]` dollars;
a 7-day pass is sold for `costs[1]` dollars;
a 30-day pass is sold for `costs[2]` dollars.

The passes allow that many days of consecutive travel.  For example, if we get a 7-day pass on day 2, then we can travel for 7 days: day 2, 3, 4, 5, 6, 7, and 8.

Return the minimum number of dollars you need to travel every day in the given list of `days`.


Example 1:
Input: days = [1,4,6,7,8,20], costs = [2,7,15]
Output: 11
Explanation: 
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 1-day pass for costs[0] = $2, which covered day 1.

On day 3, you bought a 7-day pass for costs[1] = $7, which covered days 3, 4, ..., 9.

On day 20, you bought a 1-day pass for costs[0] = $2, which covered day 20.

In total you spent $11 and covered all the days of your travel.


Example 2:
Input: days = [1,2,3,4,5,6,7,8,9,10,30,31], costs = [2,7,15]
Output: 17
Explanation: 
For example, here is one way to buy passes that lets you travel your travel plan:
On day 1, you bought a 30-day pass for costs[2] = $15 which covered days 1, 2, ..., 30.

On day 31, you bought a 1-day pass for costs[0] = $2 which covered day 31.

In total you spent $17 and covered all the days of your travel.

Note:
`1 <= days.length <= 365`
`1 <= days[i] <= 365`
`days` is in strictly increasing order.

`costs.length == 3`
`1 <= costs[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `a` and `b`, return any string `s` such that:
`s` has length `a + b` and contains exactly `a` `'a'` letters, and exactly `b` `'b'` letters,
The substring `'aaa'` does not occur in `s`, and
The substring `'bbb'` does not occur in `s`.


Example 1:
Input: a = 1, b = 2
Output: ""abb""
Explanation: ""abb"", ""bab"" and ""bba"" are all correct answers.


Example 2:
Input: a = 4, b = 1
Output: ""aabaa""

Constraints:
`0 <= a, b <= 100`
It is guaranteed such an `s` exists for the given `a` and `b`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an array `A` of integers, and an array `queries` of queries.

For the `i`-th query `val = queries[i][0], index = queries[i][1]`, we add val to `A[index]`.  Then, the answer to the `i`-th query is the sum of the even values of `A`.

(Here, the given `index = queries[i][1]` is a 0-based index, and each query permanently modifies the array `A`.)
Return the answer to all queries.  Your `answer` array should have `answer[i]` as the answer to the `i`-th query.


Example 1:
Input: A = [1,2,3,4], queries = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
Explanation: 
At the beginning, the array is [1,2,3,4].

After adding 1 to A[0], the array is [2,2,3,4], and the sum of even values is 2 + 2 + 4 = 8.

After adding -3 to A[1], the array is [2,-1,3,4], and the sum of even values is 2 + 4 = 6.

After adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even values is -2 + 4 = 2.

After adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even values is -2 + 6 = 4.

Note:
`1 <= A.length <= 10000`
`-10000 <= A[i] <= 10000`
`1 <= queries.length <= 10000`
`-10000 <= queries[i][0] <= 10000`
`0 <= queries[i][1] < A.length`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two lists of closed intervals, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each list of intervals is pairwise disjoint and in sorted order.

Return the intersection of these two interval lists.

A closed interval `[a, b]` (with `a < b`) denotes the set of real numbers `x` with `a <= x <= b`.

The intersection of two closed intervals is a set of real numbers that are either empty or represented as a closed interval. For example, the intersection of `[1, 3]` and `[2, 4]` is `[2, 3]`.


Example 1:
Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24],[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Example 2:
Input: firstList = [[1,3],[5,9]], secondList = []
Output: []

Example 3:
Input: firstList = [], secondList = [[4,8],[10,12]]
Output: []

Example 4:
Input: firstList = [[1,7]], secondList = [[3,10]]
Output: [[3,7]]

Constraints:
`0 <= firstList.length, secondList.length <= 1000`
`firstList.length + secondList.length >= 1`
`0 <= starti < endi <= 109`
`endi < starti+1`
`0 <= startj < endj <= 109 `
`endj < startj+1`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, calculate the vertical order traversal of the binary tree.

For each node at position `(row, col)`, its left and right children will be at positions `(row + 1, col - 1)` and `(row + 1, col + 1)` respectively. The root of the tree is at `(0, 0)`.

The vertical order traversal of a binary tree is a list of top-to-bottom orderings for each column index starting from the leftmost column and ending on the rightmost column. There may be multiple nodes in the same row and same column. In such a case, sort these nodes by their values.

Return the vertical order traversal of the binary tree.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Explanation:
Column -1: Only node 9 is in this column.

Column 0: Nodes 3 and 15 are in this column in that order from top to bottom.

Column 1: Only node 20 is in this column.

Column 2: Only node 7 is in this column.


Example 2:
Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
Column -2: Only node 4 is in this column.

Column -1: Only node 2 is in this column.

Column 0: Nodes 1, 5, and 6 are in this column.

          1 is at the top, so it comes first.

          5 and 6 are at the same position (2, 0), so we order them by their value, 5 before 6.

Column 1: Only node 3 is in this column.

Column 2: Only node 7 is in this column.


Example 3:
Input: root = [1,2,3,4,6,5,7]
Output: [[4],[2],[1,5,6],[3],[7]]
Explanation:
This case is the exact same as example 2, but with nodes 5 and 6 swapped.

Note that the solution remains the same since 5 and 6 are in the same location and should be ordered by their values.


Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`0 <= Node.val <= 1000`",0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, each node has a value from `0` to `25` representing the letters `'a'` to `'z'`: a value of `0` represents `'a'`, a value of `1` represents `'b'`, and so on.

Find the lexicographically smallest string that starts at a leaf of this tree and ends at the root.

(As a reminder, any shorter prefix of a string is lexicographically smaller: for example, `""ab""` is lexicographically smaller than `""aba""`.  A leaf of a node is a node that has no children.)

Example 1:
Input: [0,1,2,3,4,3,4]
Output: ""dba""

Example 2:
Input: [25,1,3,1,3,0,2]
Output: ""adz""

Example 3:
Input: [2,2,1,null,1,0,null,0]
Output: ""abc""
Note:
The number of nodes in the given tree will be between `1` and `8500`.

Each node in the tree will have a value between `0` and `25`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The array-form of an integer `num` is an array representing its digits in left to right order.

For example, for `num = 1321`, the array form is `[1,3,2,1]`.

Given `num`, the array-form of an integer, and an integer `k`, return the array-form of the integer `num + k`.


Example 1:
Input: num = [1,2,0,0], k = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234

Example 2:
Input: num = [2,7,4], k = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455

Example 3:
Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021

Example 4:
Input: num = [9,9,9,9,9,9,9,9,9,9], k = 1
Output: [1,0,0,0,0,0,0,0,0,0,0]
Explanation: 9999999999 + 1 = 10000000000

Constraints:
`1 <= num.length <= 104`
`0 <= num[i] <= 9`
`num` does not contain any leading zeros except for the zero itself.

`1 <= k <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array equations of strings that represent relationships between variables, each string `equations[i]` has length `4` and takes one of two different forms: `""a==b""` or `""a!=b""`.  Here, `a` and `b` are lowercase letters (not necessarily different) that represent one-letter variable names.

Return `true` if and only if it is possible to assign integers to variable names so as to satisfy all the given equations.


Example 1:
Input: [""a==b"",""b!=a""]
Output: false
Explanation: If we assign say, a = 1 and b = 1, then the first equation is satisfied, but not the second.  There is no way to assign the variables to satisfy both equations.


Example 2:
Input: [""b==a"",""a==b""]
Output: true
Explanation: We could assign a = 1 and b = 1 to satisfy both equations.


Example 3:
Input: [""a==b"",""b==c"",""a==c""]
Output: true

Example 4:
Input: [""a==b"",""b!=c"",""c==a""]
Output: false

Example 5:
Input: [""c==c"",""b==d"",""x!=z""]
Output: true
Note:
`1 <= equations.length <= 500`
`equations[i].length == 4`
`equations[i][0]` and `equations[i][3]` are lowercase letters
`equations[i][1]` is either `'='` or `'!'`
`equations[i][2]` is `'='`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a broken calculator that has a number showing on its display, we can perform two operations:
Double: Multiply the number on the display by 2, or;
Decrement: Subtract 1 from the number on the display.

Initially, the calculator is displaying the number `X`.

Return the minimum number of operations needed to display the number `Y`.


Example 1:
Input: X = 2, Y = 3
Output: 2
Explanation: Use double operation and then decrement operation {2 -> 4 -> 3}.


Example 2:
Input: X = 5, Y = 8
Output: 2
Explanation: Use decrement and then double {5 -> 4 -> 8}.


Example 3:
Input: X = 3, Y = 10
Output: 3
Explanation:  Use double, decrement and double {3 -> 6 -> 5 -> 10}.


Example 4:
Input: X = 1024, Y = 1
Output: 1023
Explanation: Use decrement operations 1023 times.

Note:
`1 <= X <= 10^9`
`1 <= Y <= 10^9`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of positive integers, call a (contiguous, not necessarily distinct) subarray of `A` good if the number of different integers in that subarray is exactly `K`.

(For example, `[1,2,3,1,2]` has `3` different integers: `1`, `2`, and `3`.)
Return the number of good subarrays of `A`.


Example 1:
Input: A = [1,2,1,2,3], K = 2
Output: 7
Explanation: Subarrays formed with exactly 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1,2], [1,2,1,2].


Example 2:
Input: A = [1,2,1,3,4], K = 3
Output: 3
Explanation: Subarrays formed with exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

Note:
`1 <= A.length <= 20000`
`1 <= A[i] <= A.length`
`1 <= K <= A.length`",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a binary tree, the root node is at depth `0`, and children of each depth `k` node are at depth `k+1`.

Two nodes of a binary tree are cousins if they have the same depth, but have different parents.

We are given the `root` of a binary tree with unique values, and the values `x` and `y` of two different nodes in the tree.

Return `true` if and only if the nodes corresponding to the values `x` and `y` are cousins.


Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
Output: false

Example 2:
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
Output: true

Example 3:
Input: root = [1,2,3,null,4], x = 2, y = 3
Output: false

Constraints:
The number of nodes in the tree will be between `2` and `100`.

Each node has a unique integer value from `1` to `100`.",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` `grid` where each cell can have one of three values:
`0` representing an empty cell,
`1` representing a fresh orange, or
`2` representing a rotten orange.

Every minute, any fresh orange that is 4-directionally adjacent to a rotten orange becomes rotten.

Return the minimum number of minutes that must elapse until no cell has a fresh orange. If this is impossible, return `-1`.


Example 1:
Input: grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) is never rotten, because rotting only happens 4-directionally.


Example 3:
Input: grid = [[0,2]]
Output: 0
Explanation: Since there are already no fresh oranges at minute 0, the answer is just 0.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 10`
`grid[i][j]` is `0`, `1`, or `2`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an array `A` containing only 0s and 1s, a `K`-bit flip consists of choosing a (contiguous) subarray of length `K` and simultaneously changing every 0 in the subarray to 1, and every 1 in the subarray to 0.

Return the minimum number of `K`-bit flips required so that there is no 0 in the array.  If it is not possible, return `-1`.


Example 1:
Input: A = [0,1,0], K = 1
Output: 2
Explanation: Flip A[0], then flip A[2].


Example 2:
Input: A = [1,1,0], K = 2
Output: -1
Explanation: No matter how we flip subarrays of size 2, we can't make the array become [1,1,1].


Example 3:
Input: A = [0,0,0,1,0,1,1,0], K = 3
Output: 3
Explanation:
Flip A[0],A[1],A[2]: A becomes [1,1,1,1,0,1,1,0]
Flip A[4],A[5],A[6]: A becomes [1,1,1,1,1,0,0,0]
Flip A[5],A[6],A[7]: A becomes [1,1,1,1,1,1,1,1]
Note:
`1 <= A.length <= 30000`
`1 <= K <= A.length`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of non-negative integers, the array is squareful if for every pair of adjacent elements, their sum is a perfect square.

Return the number of permutations of A that are squareful.  Two permutations `A1` and `A2` differ if and only if there is some index `i` such that `A1[i] != A2[i]`.


Example 1:
Input: [1,17,8]
Output: 2
Explanation: 
[1,8,17] and [17,8,1] are the valid permutations.


Example 2:
Input: [2,2,2]
Output: 1
Note:
`1 <= A.length <= 12`
`0 <= A[i] <= 1e9`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a town, there are `N` people labelled from `1` to `N`.  There is a rumor that one of these people is secretly the town judge.

If the town judge exists, then:
The town judge trusts nobody.

Everybody (except for the town judge) trusts the town judge.

There is exactly one person that satisfies properties 1 and 2.

You are given `trust`, an array of pairs `trust[i] = [a, b]` representing that the person labelled `a` trusts the person labelled `b`.

If the town judge exists and can be identified, return the label of the town judge.  Otherwise, return `-1`.


Example 1:
Input: N = 2, trust = [[1,2]]
Output: 2

Example 2:
Input: N = 3, trust = [[1,3],[2,3]]
Output: 3

Example 3:
Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1

Example 4:
Input: N = 3, trust = [[1,2],[2,3]]
Output: -1

Example 5:
Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
Output: 3

Constraints:
`1 <= N <= 1000`
`0 <= trust.length <= 10^4`
`trust[i].length == 2`
`trust[i]` are all different
`trust[i][0] != trust[i][1]`
`1 <= trust[i][0], trust[i][1] <= N`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given the `root` node of a maximum tree: a tree where every node has a value greater than any other value in its subtree.

Just as in the previous problem, the given tree was constructed from an list `A` (`root = Construct(A)`) recursively with the following `Construct(A)` routine:
If `A` is empty, return `null`.

Otherwise, let `A[i]` be the largest element of `A`.  Create a `root` node with value `A[i]`.

The left child of `root` will be `Construct([A[0], A[1], ..., A[i-1]])`
The right child of `root` will be `Construct([A[i+1], A[i+2], ..., A[A.length - 1]])`
Return `root`.

Note that we were not given A directly, only a root node `root = Construct(A)`.

Suppose `B` is a copy of `A` with the value `val` appended to it.  It is guaranteed that `B` has unique values.

Return `Construct(B)`.


Example 1:
Input: root = [4,1,3,null,null,2], val = 5
Output: [5,4,null,1,3,null,null,2]
Explanation: A = [1,4,2,3], B = [1,4,2,3,5]

Example 2:
Input: root = [5,2,4,null,1], val = 3
Output: [5,2,4,null,1,null,3]
Explanation: A = [2,1,5,4], B = [2,1,5,4,3]

Example 3:
Input: root = [5,2,3,null,1], val = 4
Output: [5,2,4,null,1,3]
Explanation: A = [2,1,5,3], B = [2,1,5,3,4]

Constraints:
`1 <= B.length <= 100`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an `8 x 8` chessboard, there is exactly one white rook `'R'` and some number of white bishops `'B'`, black pawns `'p'`, and empty squares `'.'`.

When the rook moves, it chooses one of four cardinal directions (north, east, south, or west), then moves in that direction until it chooses to stop, reaches the edge of the board, captures a black pawn, or is blocked by a white bishop. A rook is considered attacking a pawn if the rook can capture the pawn on the rook's turn. The number of available captures for the white rook is the number of pawns that the rook is attacking.

Return the number of available captures for the white rook.


Example 1:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""R"",""."",""."",""."",""p""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 3
Explanation: In this example, the rook is attacking all the pawns.


Example 2:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""p"",""p"",""B"",""p"",""p"",""."","".""],[""."",""p"",""B"",""R"",""B"",""p"",""."","".""],[""."",""p"",""p"",""B"",""p"",""p"",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 0
Explanation: The bishops are blocking the rook from attacking any of the pawns.


Example 3:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""p"",""p"",""."",""R"",""."",""p"",""B"","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."",""."",""B"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""]]
Output: 3
Explanation: The rook is attacking the pawns at positions b5, d6, and f5.


Constraints:
`board.length == 8`
`board[i].length == 8`
`board[i][j]` is either `'R'`, `'.'`, `'B'`, or `'p'`
There is exactly one cell with `board[i][j] == 'R'`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `N` piles of stones arranged in a row.  The `i`-th pile has `stones[i]` stones.

A move consists of merging exactly `K` consecutive piles into one pile, and the cost of this move is equal to the total number of stones in these `K` piles.

Find the minimum cost to merge all piles of stones into one pile.  If it is impossible, return `-1`.


Example 1:
Input: stones = [3,2,4,1], K = 2
Output: 20
Explanation: 
We start with [3, 2, 4, 1].

We merge [3, 2] for a cost of 5, and we are left with [5, 4, 1].

We merge [4, 1] for a cost of 5, and we are left with [5, 5].

We merge [5, 5] for a cost of 10, and we are left with [10].

The total cost was 20, and this is the minimum possible.


Example 2:
Input: stones = [3,2,4,1], K = 3
Output: -1
Explanation: After any merge operation, there are 2 piles left, and we can't merge anymore.  So the task is impossible.


Example 3:
Input: stones = [3,5,1,2,6], K = 3
Output: 25
Explanation: 
We start with [3, 5, 1, 2, 6].

We merge [5, 1, 2] for a cost of 8, and we are left with [3, 8, 6].

We merge [3, 8, 6] for a cost of 17, and we are left with [17].

The total cost was 25, and this is the minimum possible.

Note:
`1 <= stones.length <= 30`
`2 <= K <= 30`
`1 <= stones[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a `grid` of size `N x N`, and each cell of this grid has a lamp that is initially turned off.

You are also given an array of lamp positions `lamps`, where `lamps[i] = [rowi, coli]` indicates that the lamp at `grid[rowi][coli]` is turned on. When a lamp is turned on, it illuminates its cell and all other cells in the same row, column, or diagonal.

Finally, you are given a query array `queries`, where `queries[i] = [rowi, coli]`. For the `ith` query, determine whether `grid[rowi][coli]` is illuminated or not. After answering the `ith` query, turn off the lamp at `grid[rowi][coli]` and its 8 adjacent lamps if they exist. A lamp is adjacent if its cell shares either a side or corner with `grid[rowi][coli]`.

Return an array of integers `ans`, where `ans[i]` should be `1` if the lamp in the `ith` query was illuminated, or `0` if the lamp was not.


Example 1:
Input: N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,0]]
Output: [1,0]
Explanation: We have the initial grid with all lamps turned off. In the above picture we see the grid after turning on the lamp at grid[0][0] then turning on the lamp at grid[4][4].

The 0th query asks if the lamp at grid[1][1] is illuminated or not (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all lamps in the red square.

The 1st query asks if the lamp at grid[1][0] is illuminated or not (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all lamps in the red rectangle.


Example 2:
Input: N = 5, lamps = [[0,0],[4,4]], queries = [[1,1],[1,1]]
Output: [1,1]

Example 3:
Input: N = 5, lamps = [[0,0],[0,4]], queries = [[0,4],[0,1],[1,4]]
Output: [1,1,0]

Constraints:
`1 <= N <= 109`
`0 <= lamps.length <= 20000`
`lamps[i].length == 2`
`0 <= lamps[i][j] < N`
`0 <= queries.length <= 20000`
`queries[i].length == 2`
`0 <= queries[i][j] < N`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of strings made only from lowercase letters, return a list of all characters that show up in all strings within the list (including duplicates).  For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character three times in the final answer.

You may return the answer in any order.


Example 1:
Input: [""bella"",""label"",""roller""]
Output: [""e"",""l"",""l""]

Example 2:
Input: [""cool"",""lock"",""cook""]
Output: [""c"",""o""]
Note:
`1 <= A.length <= 100`
`1 <= A[i].length <= 100`
`A[i][j]` is a lowercase letter",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, determine if it is valid.

A string `s` is valid if, starting with an empty string `t = """"`, you can transform `t` into `s` after performing the following operation any number of times:
Insert string `""abc""` into any position in `t`. More formally, `t` becomes `tleft + ""abc"" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be empty.

Return `true` if `s` is a valid string, otherwise, return `false`.


Example 1:
Input: s = ""aabcbc""
Output: true
Explanation:
"""" -> ""abc"" -> ""aabcbc""
Thus, ""aabcbc"" is valid.


Example 2:
Input: s = ""abcabcababcc""
Output: true
Explanation:
"""" -> ""abc"" -> ""abcabc"" -> ""abcabcabc"" -> ""abcabcababcc""
Thus, ""abcabcababcc"" is valid.


Example 3:
Input: s = ""abccba""
Output: false
Explanation: It is impossible to get ""abccba"" using the operation.


Example 4:
Input: s = ""cababc""
Output: false
Explanation: It is impossible to get ""cababc"" using the operation.


Constraints:
`1 <= s.length <= 2 * 104`
`s` consists of letters `'a'`, `'b'`, and `'c'`",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of 0s and 1s, we may change up to `K` values from 0 to 1.

Return the length of the longest (contiguous) subarray that contains only 1s. 

Example 1:
Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
Explanation: 
[1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.


Example 2:
Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
Explanation: 
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1.  The longest subarray is underlined.

Note:
`1 <= A.length <= 20000`
`0 <= K <= A.length`
`A[i]` is `0` or `1`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of integers, we must modify the array in the following way: we choose an `i` and replace `A[i]` with `-A[i]`, and we repeat this process `K` times in total.  (We may choose the same index `i` multiple times.)
Return the largest possible sum of the array after modifying it in this way.


Example 1:
Input: A = [4,2,3], K = 1
Output: 5
Explanation: Choose indices (1,) and A becomes [4,-2,3].


Example 2:
Input: A = [3,-1,0,2], K = 3
Output: 6
Explanation: Choose indices (1, 2, 2) and A becomes [3,1,0,2].


Example 3:
Input: A = [2,-3,-1,5,-4], K = 2
Output: 13
Explanation: Choose indices (1, 4) and A becomes [2,3,-1,5,4].

Note:
`1 <= A.length <= 10000`
`1 <= K <= 10000`
`-100 <= A[i] <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Normally, the factorial of a positive integer `n` is the product of all positive integers less than or equal to `n`.  For example, `factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1`.

We instead make a clumsy factorial: using the integers in decreasing order, we swap out the multiply operations for a fixed rotation of operations: multiply (*), divide (/), add (+) and subtract (-) in this order.

For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`.  However, these operations are still applied using the usual order of operations of arithmetic: we do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.

Additionally, the division that we use is floor division such that `10 * 9 / 8` equals `11`.  This guarantees the result is an integer.

`Implement the clumsy` function as defined above: given an integer `N`, it returns the clumsy factorial of `N`.


Example 1:
Input: 4
Output: 7
Explanation: 7 = 4 * 3 / 2 + 1

Example 2:
Input: 10
Output: 12
Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
Note:
`1 <= N <= 10000`
`-2^31 <= answer <= 2^31 - 1`  (The answer is guaranteed to fit within a 32-bit integer.)",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a row of dominoes, `A[i]` and `B[i]` represent the top and bottom halves of the `ith` domino.  (A domino is a tile with two numbers from 1 to 6 - one on each half of the tile.)
We may rotate the `ith` domino, so that `A[i]` and `B[i]` swap values.

Return the minimum number of rotations so that all the values in `A` are the same, or all the values in `B` are the same.

If it cannot be done, return `-1`.


Example 1:
Input: A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]
Output: 2
Explanation: 
The first figure represents the dominoes as given by A and B: before we do any rotations.

If we rotate the second and fourth dominoes, we can make every value in the top row equal to 2, as indicated by the second figure.


Example 2:
Input: A = [3,5,1,2,3], B = [3,6,3,3,4]
Output: -1
Explanation: 
In this case, it is not possible to rotate the dominoes to make one row of values equal.


Constraints:
`2 <= A.length == B.length <= 2 * 104`
`1 <= A[i], B[i] <= 6`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers preorder, which represents the preorder traversal of a BST (i.e., binary search tree), construct the tree and return its root.

It is guaranteed that there is always possible to find a binary search tree with the given requirements for the given test cases.

A binary search tree is a binary tree where for every node, any descendant of `Node.left` has a value strictly less than `Node.val`, and any descendant of `Node.right` has a value strictly greater than `Node.val`.

A preorder traversal of a binary tree displays the value of the node first, then traverses `Node.left`, then traverses `Node.right`.


Example 1:
Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Example 2:
Input: preorder = [1,3]
Output: [1,null,3]

Constraints:
`1 <= preorder.length <= 100`
`1 <= preorder[i] <= 108`
All the values of `preorder` are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Every non-negative integer `N` has a binary representation.  For example, `5` can be represented as `""101""` in binary, `11` as `""1011""` in binary, and so on.  Note that except for `N = 0`, there are no leading zeroes in any binary representation.

The complement of a binary representation is the number in binary you get when changing every `1` to a `0` and `0` to a `1`.  For example, the complement of `""101""` in binary is `""010""` in binary.

For a given number `N` in base-10, return the complement of it's binary representation as a base-10 integer.


Example 1:
Input: 5
Output: 2
Explanation: 5 is ""101"" in binary, with complement ""010"" in binary, which is 2 in base-10.


Example 2:
Input: 7
Output: 0
Explanation: 7 is ""111"" in binary, with complement ""000"" in binary, which is 0 in base-10.


Example 3:
Input: 10
Output: 5
Explanation: 10 is ""1010"" in binary, with complement ""0101"" in binary, which is 5 in base-10.

Note:
`0 <= N < 10^9`
This question is the same as 476: https://leetcode.com/problems/number-complement/",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a list of songs where the ith song has a duration of `time[i]` seconds.

Return the number of pairs of songs for which their total duration in seconds is divisible by `60`. Formally, we want the number of indices `i`, `j` such that `i < j` with `(time[i] + time[j]) % 60 == 0`.


Example 1:
Input: time = [30,20,150,100,40]
Output: 3
Explanation: Three pairs have a total duration divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60

Example 2:
Input: time = [60,60,60]
Output: 3
Explanation: All three pairs have a total duration of 120, which is divisible by 60.


Constraints:
`1 <= time.length <= 6 * 104`
`1 <= time[i] <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A conveyor belt has packages that must be shipped from one port to another within `D` days.

The ith package on the conveyor belt has a weight of `weights[i]`. Each day, we load the ship with packages on the conveyor belt (in the order given by `weights`). We may not load more weight than the maximum weight capacity of the ship.

Return the least weight capacity of the ship that will result in all the packages on the conveyor belt being shipped within `D` days.


Example 1:
Input: weights = [1,2,3,4,5,6,7,8,9,10], D = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum to ship all the packages in 5 days like this:
1st day: 1, 2, 3, 4, 5
2nd day: 6, 7
3rd day: 8
4th day: 9
5th day: 10
Note that the cargo must be shipped in the order given, so using a ship of capacity 14 and splitting the packages into parts like (2, 3, 4, 5), (1, 6, 7), (8), (9), (10) is not allowed.


Example 2:
Input: weights = [3,2,2,4,1,4], D = 3
Output: 6
Explanation: A ship capacity of 6 is the minimum to ship all the packages in 3 days like this:
1st day: 3, 2
2nd day: 2, 4
3rd day: 1, 4

Example 3:
Input: weights = [1,2,3,1,1], D = 4
Output: 3
Explanation:
1st day: 1
2nd day: 2
3rd day: 3
4th day: 1, 1

Constraints:
`1 <= D <= weights.length <= 5 * 104`
`1 <= weights[i] <= 500`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `N`, return the number of positive integers less than or equal to `N` that have at least 1 repeated digit.


Example 1:
Input: 20
Output: 1
Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.


Example 2:
Input: 100
Output: 10
Explanation: The positive numbers (<= 100) with atleast 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.


Example 3:
Input: 1000
Output: 262
Note:
`1 <= N <= 10^9`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`, return `true` if we can partition the array into three non-empty parts with equal sums.

Formally, we can partition the array if we can find indexes `i + 1 < j` with `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`

Example 1:
Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
Output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1

Example 2:
Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]
Output: false

Example 3:
Input: arr = [3,3,6,5,-2,2,5,1,-9,4]
Output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4

Constraints:
`3 <= arr.length <= 5 * 104`
`-104 <= arr[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `values` where values[i] represents the value of the `ith` sightseeing spot. Two sightseeing spots `i` and `j` have a distance `j - i` between them.

The score of a pair (`i < j`) of sightseeing spots is `values[i] + values[j] + i - j`: the sum of the values of the sightseeing spots, minus the distance between them.

Return the maximum score of a pair of sightseeing spots.


Example 1:
Input: values = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11

Example 2:
Input: values = [1,2]
Output: 2

Constraints:
`2 <= values.length <= 5 * 104`
`1 <= values[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `K`, you need to find the length of the smallest positive integer `N` such that `N` is divisible by `K`, and `N` only contains the digit `1`.

Return the length of `N`. If there is no such `N`, return -1.

Note: `N` may not fit in a 64-bit signed integer.


Example 1:
Input: K = 1
Output: 1
Explanation: The smallest answer is N = 1, which has length 1.


Example 2:
Input: K = 2
Output: -1
Explanation: There is no such positive integer N divisible by 2.


Example 3:
Input: K = 3
Output: 3
Explanation: The smallest answer is N = 111, which has length 3.


Constraints:
`1 <= K <= 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string `S` (a string consisting only of '0' and '1's) and a positive integer `N`, return true if and only if for every integer X from 1 to N, the binary representation of X is a substring of S.


Example 1:
Input: S = ""0110"", N = 3
Output: true

Example 2:
Input: S = ""0110"", N = 4
Output: false
Note:
`1 <= S.length <= 1000`
`1 <= N <= 10^9`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a number `N`, return a string consisting of `""0""`s and `""1""`s that represents its value in base `-2` (negative two).

The returned string must have no leading zeroes, unless the string is `""0""`.


Example 1:
Input: 2
Output: ""110""
Explantion: (-2) ^ 2 + (-2) ^ 1 = 2

Example 2:
Input: 3
Output: ""111""
Explantion: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3

Example 3:
Input: 4
Output: ""100""
Explantion: (-2) ^ 2 = 4
Note:
`0 <= N <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a linked list with `head` as the first node.  Let's number the nodes in the list: `node_1, node_2, node_3, ...` etc.

Each node may have a next larger value: for `node_i`, `next_larger(node_i)` is the `node_j.val` such that `j > i`, `node_j.val > node_i.val`, and `j` is the smallest possible choice.  If such a `j` does not exist, the next larger value is `0`.

Return an array of integers `answer`, where `answer[i] = next_larger(node_{i+1})`.

Note that in the example inputs (not outputs) below, arrays such as `[2,1,5]` represent the serialization of a linked list with a head node value of 2, second node value of 1, and third node value of 5.


Example 1:
Input: [2,1,5]
Output: [5,5,0]

Example 2:
Input: [2,7,4,3,5]
Output: [7,0,5,5,0]

Example 3:
Input: [1,7,5,1,9,2,5,1]
Output: [7,9,9,9,0,5,0,0]
Note:
`1 <= node.val <= 10^9` for each node in the linked list.

The given list has length in the range `[0, 10000]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` binary matrix `grid`, where `0` represents a sea cell and `1` represents a land cell.

A move consists of walking from one land cell to another adjacent (4-directionally) land cell or walking off the boundary of the `grid`.

Return the number of land cells in `grid` for which we cannot walk off the boundary of the grid in any number of moves.


Example 1:
Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: There are three 1s that are enclosed by 0s, and one 1 that is not enclosed because its on the boundary.


Example 2:
Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
Output: 0
Explanation: All 1s are either on the boundary or can reach the boundary.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 500`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A valid parentheses string is either empty `("""")`, `""("" + A + "")""`, or `A + B`, where `A` and `B` are valid parentheses strings, and `+` represents string concatenation.  For example, `""""`, `""()""`, `""(())()""`, and `""(()(()))""` are all valid parentheses strings.

A valid parentheses string `S` is primitive if it is nonempty, and there does not exist a way to split it into `S = A+B`, with `A` and `B` nonempty valid parentheses strings.

Given a valid parentheses string `S`, consider its primitive decomposition: `S = P_1 + P_2 + ... + P_k`, where `P_i` are primitive valid parentheses strings.

Return `S` after removing the outermost parentheses of every primitive string in the primitive decomposition of `S`.


Example 1:
Input: ""(()())(())""
Output: ""()()()""
Explanation: 
The input string is ""(()())(())"", with primitive decomposition ""(()())"" + ""(())"".

After removing outer parentheses of each part, this is ""()()"" + ""()"" = ""()()()"".


Example 2:
Input: ""(()())(())(()(()))""
Output: ""()()()()(())""
Explanation: 
The input string is ""(()())(())(()(()))"", with primitive decomposition ""(()())"" + ""(())"" + ""(()(()))"".

After removing outer parentheses of each part, this is ""()()"" + ""()"" + ""()(())"" = ""()()()()(())"".


Example 3:
Input: ""()()""
Output: """"
Explanation: 
The input string is ""()()"", with primitive decomposition ""()"" + ""()"".

After removing outer parentheses of each part, this is """" + """" = """".

Note:
`S.length <= 10000`
`S[i]` is `""(""` or `"")""`
`S` is a valid parentheses string",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` of a binary tree where each node has a value `0` or `1`.  Each root-to-leaf path represents a binary number starting with the most significant bit.  For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.

For all leaves in the tree, consider the numbers represented by the path from the root to that leaf.

Return the sum of these numbers. The answer is guaranteed to fit in a 32-bits integer.


Example 1:
Input: root = [1,0,1,0,1,0,1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

Example 2:
Input: root = [0]
Output: 0

Example 3:
Input: root = [1]
Output: 1

Example 4:
Input: root = [1,1]
Output: 3

Constraints:
The number of nodes in the tree is in the range `[1, 1000]`.

`Node.val` is `0` or `1`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A query word matches a given `pattern` if we can insert lowercase letters to the pattern word so that it equals the `query`. (We may insert each character at any position, and may insert 0 characters.)
Given a list of `queries`, and a `pattern`, return an `answer` list of booleans, where `answer[i]` is true if and only if `queries[i]` matches the `pattern`.


Example 1:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FB""
Output: [true,false,true,true,false]
Explanation: 
""FooBar"" can be generated like this ""F"" + ""oo"" + ""B"" + ""ar"".

""FootBall"" can be generated like this ""F"" + ""oot"" + ""B"" + ""all"".

""FrameBuffer"" can be generated like this ""F"" + ""rame"" + ""B"" + ""uffer"".


Example 2:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBa""
Output: [true,false,true,false,false]
Explanation: 
""FooBar"" can be generated like this ""Fo"" + ""o"" + ""Ba"" + ""r"".

""FootBall"" can be generated like this ""Fo"" + ""ot"" + ""Ba"" + ""ll"".


Example 3:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBaT""
Output: [false,true,false,false,false]
Explanation: 
""FooBarTest"" can be generated like this ""Fo"" + ""o"" + ""Ba"" + ""r"" + ""T"" + ""est"".

Note:
`1 <= queries.length <= 100`
`1 <= queries[i].length <= 100`
`1 <= pattern.length <= 100`
All strings consists only of lower and upper case English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a series of video clips from a sporting event that lasted `T` seconds.  These video clips can be overlapping with each other and have varied lengths.

Each video clip `clips[i]` is an interval: it starts at time `clips[i][0]` and ends at time `clips[i][1]`.  We can cut these clips into segments freely: for example, a clip `[0, 7]` can be cut into segments `[0, 1] + [1, 3] + [3, 7]`.

Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event (`[0, T]`).  If the task is impossible, return `-1`.


Example 1:
Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
Output: 3
Explanation: 
We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.

Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].

Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].


Example 2:
Input: clips = [[0,1],[1,2]], T = 5
Output: -1
Explanation: 
We can't cover [0,5] with only [0,1] and [1,2].


Example 3:
Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], T = 9
Output: 3
Explanation: 
We can take clips [0,4], [4,7], and [6,9].


Example 4:
Input: clips = [[0,4],[2,8]], T = 5
Output: 2
Explanation: 
Notice you can have extra video after the event ends.


Constraints:
`1 <= clips.length <= 100`
`0 <= clips[i][0] <= clips[i][1] <= 100`
`0 <= T <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:
Choosing any `x` with `0 < x < n` and `n % x == 0`.

Replacing the number `n` on the chalkboard with `n - x`.

Also, if a player cannot make a move, they lose the game.

Return `true` if and only if Alice wins the game, assuming both players play optimally.


Example 1:
Input: n = 2
Output: true
Explanation: Alice chooses 1, and Bob has no more moves.


Example 2:
Input: n = 3
Output: false
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no more moves.


Constraints:
`1 <= n <= 1000`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, find the maximum value `V` for which there exist different nodes `A` and `B` where `V = |A.val - B.val|` and `A` is an ancestor of `B`.

A node `A` is an ancestor of `B` if either: any child of `A` is equal to `B`, or any child of `A` is an ancestor of `B`.


Example 1:
Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor-node differences, some of which are given below :
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
Among all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.


Example 2:
Input: root = [1,null,2,null,0,3]
Output: 3

Constraints:
The number of nodes in the tree is in the range `[2, 5000]`.

`0 <= Node.val <= 105`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of integers, return the length of the longest arithmetic subsequence in `A`.

Recall that a subsequence of `A` is a list `A[i_1], A[i_2], ..., A[i_k]` with `0 <= i_1 < i_2 < ... < i_k <= A.length - 1`, and that a sequence `B` is arithmetic if `B[i+1] - B[i]` are all the same value (for `0 <= i < B.length - 1`).


Example 1:
Input: A = [3,6,9,12]
Output: 4
Explanation: 
The whole array is an arithmetic sequence with steps of length = 3.


Example 2:
Input: A = [9,4,7,2,10]
Output: 3
Explanation: 
The longest arithmetic subsequence is [4,7,10].


Example 3:
Input: A = [20,1,15,3,10,5,8]
Output: 4
Explanation: 
The longest arithmetic subsequence is [20,15,10,5].


Constraints:
`2 <= A.length <= 1000`
`0 <= A[i] <= 500`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We run a preorder depth-first search (DFS) on the `root` of a binary tree.

At each node in this traversal, we output `D` dashes (where `D` is the depth of this node), then we output the value of this node.  If the depth of a node is `D`, the depth of its immediate child is `D + 1`.  The depth of the `root` node is `0`.

If a node has only one child, that child is guaranteed to be the left child.

Given the output `S` of this traversal, recover the tree and return its `root`.


Example 1:
Input: S = ""1-2--3--4-5--6--7""
Output: [1,2,5,3,4,6,7]

Example 2:
Input: S = ""1-2--3---4-5--6---7""
Output: [1,2,5,3,null,6,null,4,null,7]

Example 3:
Input: S = ""1-401--349---90--88""
Output: [1,401,null,349,88,90]

Constraints:
The number of nodes in the original tree is in the range `[1, 1000]`.

`1 <= Node.val <= 109`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A company is planning to interview `2n` people. Given the array `costs` where `costs[i] = [aCosti, bCosti]`, the cost of flying the `ith` person to city `a` is `aCosti`, and the cost of flying the `ith` person to city `b` is `bCosti`.

Return the minimum cost to fly every person to a city such that exactly `n` people arrive in each city.


Example 1:
Input: costs = [[10,20],[30,200],[400,50],[30,20]]
Output: 110
Explanation: 
The first person goes to city A for a cost of 10.

The second person goes to city A for a cost of 30.

The third person goes to city B for a cost of 50.

The fourth person goes to city B for a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110 to have half the people interviewing in each city.


Example 2:
Input: costs = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
Output: 1859

Example 3:
Input: costs = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
Output: 3086

Constraints:
`2 * n == costs.length`
`2 <= costs.length <= 100`
`costs.length` is even.

`1 <= aCosti, bCosti <= 1000`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a matrix with `R` rows and `C` columns has cells with integer coordinates `(r, c)`, where `0 <= r < R` and `0 <= c < C`.

Additionally, we are given a cell in that matrix with coordinates `(r0, c0)`.

Return the coordinates of all cells in the matrix, sorted by their distance from `(r0, c0)` from smallest distance to largest distance.  Here, the distance between two cells `(r1, c1)` and `(r2, c2)` is the Manhattan distance, `|r1 - r2| + |c1 - c2|`.  (You may return the answer in any order that satisfies this condition.)

Example 1:
Input: R = 1, C = 2, r0 = 0, c0 = 0
Output: [[0,0],[0,1]]
Explanation: The distances from (r0, c0) to other cells are: [0,1]

Example 2:
Input: R = 2, C = 2, r0 = 0, c0 = 1
Output: [[0,1],[0,0],[1,1],[1,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2]
The answer [[0,1],[1,1],[0,0],[1,0]] would also be accepted as correct.


Example 3:
Input: R = 2, C = 3, r0 = 1, c0 = 2
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
Explanation: The distances from (r0, c0) to other cells are: [0,1,1,2,2,3]
There are other answers that would also be accepted as correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]].

Note:
`1 <= R <= 100`
`1 <= C <= 100`
`0 <= r0 < R`
`0 <= c0 < C`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of non-negative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays, which have lengths `L` and `M`.  (For clarification, the `L`-length subarray could occur before or after the `M`-length subarray.)
Formally, return the largest `V` for which `V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+1] + ... + A[j+M-1])` and either:
`0 <= i < i + L - 1 < j < j + M - 1 < A.length`, or
`0 <= j < j + M - 1 < i < i + L - 1 < A.length`.


Example 1:
Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.


Example 2:
Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.


Example 3:
Input: A = [2,1,5,6,0,9,5,0,3,8], L = 4, M = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [3,8] with length 3.

Note:
`L >= 1`
`M >= 1`
`L + M <= A.length <= 1000`
`0 <= A[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `StreamChecker` class as follows:
`StreamChecker(words)`: Constructor, init the data structure with the given words.

`query(letter)`: returns true if and only if for some `k >= 1`, the last `k` characters queried (in order from oldest to newest, including this letter just queried) spell one of the words in the given list.


Example:
StreamChecker streamChecker = new StreamChecker([""cd"",""f"",""kl""]); // init the dictionary.

streamChecker.query('a');          // return false
streamChecker.query('b');          // return false
streamChecker.query('c');          // return false
streamChecker.query('d');          // return true, because 'cd' is in the wordlist
streamChecker.query('e');          // return false
streamChecker.query('f');          // return true, because 'f' is in the wordlist
streamChecker.query('g');          // return false
streamChecker.query('h');          // return false
streamChecker.query('i');          // return false
streamChecker.query('j');          // return false
streamChecker.query('k');          // return false
streamChecker.query('l');          // return true, because 'kl' is in the wordlist
Note:
`1 <= words.length <= 2000`
`1 <= words[i].length <= 2000`
Words will only consist of lowercase English letters.

Queries will only consist of lowercase English letters.

The number of queries is at most 40000.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Three stones are on a number line at positions `a`, `b`, and `c`.

Each turn, you pick up a stone at an endpoint (ie., either the lowest or highest position stone), and move it to an unoccupied position between those endpoints.  Formally, let's say the stones are currently at positions `x, y, z` with `x < y < z`.  You pick up the stone at either position `x` or position `z`, and move that stone to an integer position `k`, with `x < k < z` and `k != y`.

The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.

When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`

Example 1:
Input: a = 1, b = 2, c = 5
Output: [1,2]
Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.


Example 2:
Input: a = 4, b = 3, c = 2
Output: [0,0]
Explanation: We cannot make any moves.


Example 3:
Input: a = 3, b = 5, c = 1
Output: [1,2]
Explanation: Move the stone from 1 to 4; or move the stone from 1 to 2 to 4.

Note:
`1 <= a <= 100`
`1 <= b <= 100`
`1 <= c <= 100`
`a != b, b != c, c != a`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2-dimensional `grid` of integers, each value in the grid represents the color of the grid square at that location.

Two squares belong to the same connected component if and only if they have the same color and are next to each other in any of the 4 directions.

The border of a connected component is all the squares in the connected component that are either 4-directionally adjacent to a square not in the component, or on the boundary of the grid (the first or last row or column).

Given a square at location `(r0, c0)` in the grid and a `color`, color the border of the connected component of that square with the given `color`, and return the final `grid`.


Example 1:
Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3
Output: [[3, 3], [3, 2]]

Example 2:
Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3
Output: [[1, 3, 3], [2, 3, 3]]

Example 3:
Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2
Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]
Note:
`1 <= grid.length <= 50`
`1 <= grid[0].length <= 50`
`1 <= grid[i][j] <= 1000`
`0 <= r0 < grid.length`
`0 <= c0 < grid[0].length`
`1 <= color <= 1000`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We write the integers of `A` and `B` (in the order they are given) on two separate horizontal lines.

Now, we may draw connecting lines: a straight line connecting two numbers `A[i]` and `B[j]` such that:
`A[i] == B[j]`;
The line we draw does not intersect any other connecting (non-horizontal) line.

Note that a connecting lines cannot intersect even at the endpoints: each number can only belong to one connecting line.

Return the maximum number of connecting lines we can draw in this way.


Example 1:
Input: A = [1,4,2], B = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as in the diagram.

We cannot draw 3 uncrossed lines, because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.


Example 2:
Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]
Output: 3

Example 3:
Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]
Output: 2
Note:
`1 <= A.length <= 500`
`1 <= B.length <= 500`
`1 <= A[i], B[i] <= 2000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a 1 million by 1 million grid on an XY-plane, and the coordinates of each grid square are `(x, y)`.

We start at the `source = [sx, sy]` square and want to reach the `target = [tx, ty]` square. There is also an array of `blocked` squares, where each `blocked[i] = [xi, yi]` represents a blocked square with coordinates `(xi, yi)`.

Each move, we can walk one square north, east, south, or west if the square is not in the array of `blocked` squares. We are also not allowed to walk outside of the grid.

Return `true` if and only if it is possible to reach the `target` square from the `source` square through a sequence of valid moves.


Example 1:
Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
Output: false
Explanation: The target square is inaccessible starting from the source square because we cannot move.

We cannot move north or east because those squares are blocked.

We cannot move south or west because we cannot go outside of the grid.


Example 2:
Input: blocked = [], source = [0,0], target = [999999,999999]
Output: true
Explanation: Because there are no blocked cells, it is possible to reach the target square.


Constraints:
`0 <= blocked.length <= 200`
`blocked[i].length == 2`
`0 <= xi, yi < 106`
`source.length == target.length == 2`
`0 <= sx, sy, tx, ty < 106`
`source != target`
It is guaranteed that `source` and `target` are not blocked.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `points` where `points[i] = [xi, yi]` represents a point on the X-Y plane, return `true` if these points are a boomerang.

A boomerang is a set of three points that are all distinct and not in a straight line.


Example 1:
Input: points = [[1,1],[2,3],[3,2]]
Output: true

Example 2:
Input: points = [[1,1],[2,2],[3,3]]
Output: false

Constraints:
`points.length == 3`
`points[i].length == 2`
`0 <= xi, yi <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:
The left subtree of a node contains only nodes with keys less than the node's key.

The right subtree of a node contains only nodes with keys greater than the node's key.

Both the left and right subtrees must also be binary search trees.

Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/

Example 1:
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]

Example 3:
Input: root = [1,0,2]
Output: [3,3,2]

Example 4:
Input: root = [3,2,4,1]
Output: [7,9,4,10]

Constraints:
The number of nodes in the tree is in the range `[1, 100]`.

`0 <= Node.val <= 100`
All the values in the tree are unique.

`root` is guaranteed to be a valid binary search tree.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"You have a convex `n`-sided polygon where each vertex has an integer value. You are given an integer array `values` where `values[i]` is the value of the `ith` vertex (i.e., clockwise order).

You will triangulate the polygon into `n - 2` triangles. For each triangle, the value of that triangle is the product of the values of its vertices, and the total score of the triangulation is the sum of these values over all `n - 2` triangles in the triangulation.

Return the smallest possible total score that you can achieve with some triangulation of the polygon.


Example 1:
Input: values = [1,2,3]
Output: 6
Explanation: The polygon is already triangulated, and the score of the only triangle is 6.


Example 2:
Input: values = [3,7,4,5]
Output: 144
Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.

The minimum score is 144.


Example 3:
Input: values = [1,3,1,4,1,5]
Output: 13
Explanation: The minimum score triangulation has score 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.


Constraints:
`n == values.length`
`3 <= n <= 50`
`1 <= values[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an infinite number line, the position of the i-th stone is given by `stones[i]`.  Call a stone an endpoint stone if it has the smallest or largest position.

Each turn, you pick up an endpoint stone and move it to an unoccupied position so that it is no longer an endpoint stone.

In particular, if the stones are at say, `stones = [1,2,5]`, you cannot move the endpoint stone at position 5, since moving it to any position (such as 0, or 3) will still keep that stone as an endpoint stone.

The game ends when you cannot make any more moves, ie. the stones are in consecutive positions.

When the game ends, what is the minimum and maximum number of moves that you could have made?  Return the answer as an length 2 array: `answer = [minimum_moves, maximum_moves]`

Example 1:
Input: [7,4,9]
Output: [1,2]
Explanation: 
We can move 4 -> 8 for one move to finish the game.

Or, we can move 9 -> 5, 4 -> 6 for two moves to finish the game.


Example 2:
Input: [6,5,4,3,10]
Output: [2,3]
We can move 3 -> 8 then 10 -> 7 to finish the game.

Or, we can move 3 -> 7, 4 -> 8, 5 -> 9 to finish the game.

Notice we cannot move 10 -> 2 to finish the game, because that would be an illegal move.


Example 3:
Input: [100,101,104,102,103]
Output: [0,0]
Note:
`3 <= stones.length <= 10^4`
`1 <= stones[i] <= 10^9`
`stones[i]` have distinct values.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an infinite plane, a robot initially stands at `(0, 0)` and faces north. The robot can receive one of three instructions:
`""G""`: go straight 1 unit;
`""L""`: turn 90 degrees to the left;
`""R""`: turn 90 degrees to the right.

The robot performs the `instructions` given in order, and repeats them forever.

Return `true` if and only if there exists a circle in the plane such that the robot never leaves the circle.


Example 1:
Input: instructions = ""GGLLGG""
Output: true
Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and then returns to (0,0).

When repeating these instructions, the robot remains in the circle of radius 2 centered at the origin.


Example 2:
Input: instructions = ""GG""
Output: false
Explanation: The robot moves north indefinitely.


Example 3:
Input: instructions = ""GL""
Output: true
Explanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...


Constraints:
`1 <= instructions.length <= 100`
`instructions[i]` is `'G'`, `'L'` or, `'R'`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` gardens, labeled from `1` to `n`, and an array `paths` where `paths[i] = [xi, yi]` describes a bidirectional path between garden `xi` to garden `yi`. In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array `answer`, where `answer[i]` is the type of flower planted in the `(i+1)th` garden. The flower types are denoted `1`, `2`, `3`, or `4`. It is guaranteed an answer exists.


Example 1:
Input: n = 3, paths = [[1,2],[2,3],[3,1]]
Output: [1,2,3]
Explanation:
Gardens 1 and 2 have different types.

Gardens 2 and 3 have different types.

Gardens 3 and 1 have different types.

Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].


Example 2:
Input: n = 4, paths = [[1,2],[3,4]]
Output: [1,2,1,2]

Example 3:
Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
Output: [1,2,3,4]

Constraints:
`1 <= n <= 104`
`0 <= paths.length <= 2 * 104`
`paths[i].length == 2`
`1 <= xi, yi <= n`
`xi != yi`
Every garden has at most 3 paths coming into or leaving it.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, you should partition the array into (contiguous) subarrays of length at most `k`. After partitioning, each subarray has their values changed to become the maximum value of that subarray.

Return the largest sum of the given array after partitioning.


Example 1:
Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]

Example 2:
Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83

Example 3:
Input: arr = [1], k = 1
Output: 1

Constraints:
`1 <= arr.length <= 500`
`0 <= arr[i] <= 109`
`1 <= k <= arr.length`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, consider all duplicated substrings: (contiguous) substrings of s that occur 2 or more times. The occurrences may overlap.

Return any duplicated substring that has the longest possible length. If `s` does not have a duplicated substring, the answer is `""""`.


Example 1:
Input: s = ""banana""
Output: ""ana""

Example 2:
Input: s = ""abcd""
Output: """"

Constraints:
`2 <= s.length <= 3 * 104`
`s` consists of lowercase English letters.",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"We have a collection of stones, each stone has a positive integer weight.

Each turn, we choose the two heaviest stones and smash them together.  Suppose the stones have weights `x` and `y` with `x <= y`.  The result of this smash is:
If `x == y`, both stones are totally destroyed;
If `x != y`, the stone of weight `x` is totally destroyed, and the stone of weight `y` has new weight `y-x`.

At the end, there is at most 1 stone left.  Return the weight of this stone (or 0 if there are no stones left.)

Example 1:
Input: [2,7,4,1,8,1]
Output: 1
Explanation: 
We combine 7 and 8 to get 1 so the array converts to [2,4,1,1,1] then,
we combine 2 and 4 to get 2 so the array converts to [2,1,1,1] then,
we combine 2 and 1 to get 1 so the array converts to [1,1,1] then,
we combine 1 and 1 to get 0 so the array converts to [1] then that's the value of last stone.

Note:
`1 <= stones.length <= 30`
`1 <= stones[i] <= 1000`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S` of lowercase letters, a duplicate removal consists of choosing two adjacent and equal letters, and removing them.

We repeatedly make duplicate removals on S until we no longer can.

Return the final string after all such duplicate removals have been made.  It is guaranteed the answer is unique.


Example 1:
Input: ""abbaca""
Output: ""ca""
Explanation: 
For example, in ""abbaca"" we could remove ""bb"" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is ""aaca"", of which only ""aa"" is possible, so the final string is ""ca"".

Note:
`1 <= S.length <= 20000`
`S` consists only of English lowercase letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of words, each word consists of English lowercase letters.

Let's say `word1` is a predecessor of `word2` if and only if we can add exactly one letter anywhere in `word1` to make it equal to `word2`.  For example, `""abc""` is a predecessor of `""abac""`.

A word chain is a sequence of words `[word_1, word_2, ..., word_k]` with `k >= 1`, where `word_1` is a predecessor of `word_2`, `word_2` is a predecessor of `word_3`, and so on.

Return the longest possible length of a word chain with words chosen from the given list of `words`.


Example 1:
Input: words = [""a"",""b"",""ba"",""bca"",""bda"",""bdca""]
Output: 4
Explanation: One of the longest word chain is ""a"",""ba"",""bda"",""bdca"".


Example 2:
Input: words = [""xbc"",""pcxbcf"",""xb"",""cxbc"",""pcxbc""]
Output: 5

Constraints:
`1 <= words.length <= 1000`
`1 <= words[i].length <= 16`
`words[i]` only consists of English lowercase letters.",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.

We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights `x` and `y` with `x <= y`. The result of this smash is:
If `x == y`, both stones are destroyed, and
If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.

At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return `0`.


Example 1:
Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation:
We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,
we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,
we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,
we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.


Example 2:
Input: stones = [31,26,33,21,40]
Output: 5

Example 3:
Input: stones = [1,2]
Output: 1

Constraints:
`1 <= stones.length <= 30`
`1 <= stones[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A school is trying to take an annual photo of all the students. The students are asked to stand in a single file line in non-decreasing order by height. Let this ordering be represented by the integer array `expected` where `expected[i]` is the expected height of the `ith` student in line.

You are given an integer array `heights` representing the current order that the students are standing in. Each `heights[i]` is the height of the `ith` student in line (0-indexed).

Return the number of indices where `heights[i] != expected[i]`.


Example 1:
Input: heights = [1,1,4,2,1,3]
Output: 3
Explanation: 
heights:  [1,1,4,2,1,3]
expected: [1,1,1,2,3,4]
Indices 2, 4, and 5 do not match.


Example 2:
Input: heights = [5,1,2,3,4]
Output: 5
Explanation:
heights:  [5,1,2,3,4]
expected: [1,2,3,4,5]
All indices do not match.


Example 3:
Input: heights = [1,2,3,4,5]
Output: 0
Explanation:
heights:  [1,2,3,4,5]
expected: [1,2,3,4,5]
All indices match.


Constraints:
`1 <= heights.length <= 100`
`1 <= heights[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Today, the bookstore owner has a store open for `customers.length` minutes.  Every minute, some number of customers (`customers[i]`) enter the store, and all those customers leave after the end of that minute.

On some minutes, the bookstore owner is grumpy.  If the bookstore owner is grumpy on the i-th minute, `grumpy[i] = 1`, otherwise `grumpy[i] = 0`.  When the bookstore owner is grumpy, the customers of that minute are not satisfied, otherwise they are satisfied.

The bookstore owner knows a secret technique to keep themselves not grumpy for `X` minutes straight, but can only use it once.

Return the maximum number of customers that can be satisfied throughout the day.


Example 1:
Input: customers = [1,0,1,2,1,1,7,5], grumpy = [0,1,0,1,0,1,0,1], X = 3
Output: 16
Explanation: The bookstore owner keeps themselves not grumpy for the last 3 minutes. 
The maximum number of customers that can be satisfied = 1 + 1 + 1 + 1 + 7 + 5 = 16.

Note:
`1 <= X <= customers.length == grumpy.length <= 20000`
`0 <= customers[i] <= 1000`
`0 <= grumpy[i] <= 1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers `arr` (not necessarily distinct), return the lexicographically largest permutation that is smaller than `arr`, that can be made with exactly one swap (A swap exchanges the positions of two numbers `arr[i]` and `arr[j]`). If it cannot be done, then return the same array.


Example 1:
Input: arr = [3,2,1]
Output: [3,1,2]
Explanation: Swapping 2 and 1.


Example 2:
Input: arr = [1,1,5]
Output: [1,1,5]
Explanation: This is already the smallest permutation.


Example 3:
Input: arr = [1,9,4,6,7]
Output: [1,7,4,6,9]
Explanation: Swapping 9 and 7.


Example 4:
Input: arr = [3,1,1,3]
Output: [1,3,1,3]
Explanation: Swapping 1 and 3.


Constraints:
`1 <= arr.length <= 104`
`1 <= arr[i] <= 104`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a warehouse, there is a row of barcodes, where the `ith` barcode is `barcodes[i]`.

Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.


Example 1:
Input: barcodes = [1,1,1,2,2,2]
Output: [2,1,2,1,2,1]

Example 2:
Input: barcodes = [1,1,1,1,2,2,3,3]
Output: [1,3,1,3,1,2,1,2]

Constraints:
`1 <= barcodes.length <= 10000`
`1 <= barcodes[i] <= 10000`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"From any string, we can form a subsequence of that string by deleting some number of characters (possibly no deletions).

Given two strings `source` and `target`, return the minimum number of subsequences of `source` such that their concatenation equals `target`. If the task is impossible, return `-1`.


Example 1:
Input: source = ""abc"", target = ""abcbc""
Output: 2
Explanation: The target ""abcbc"" can be formed by ""abc"" and ""bc"", which are subsequences of source ""abc"".


Example 2:
Input: source = ""abc"", target = ""acdbc""
Output: -1
Explanation: The target string cannot be constructed from the subsequences of source string due to the character ""d"" in target string.


Example 3:
Input: source = ""xyz"", target = ""xzyxz""
Output: 3
Explanation: The target string can be constructed as follows ""xz"" + ""y"" + ""xz"".


Constraints:
Both the `source` and `target` strings consist of only lowercase English letters from ""a""-""z"".

The lengths of `source` and `target` string are between `1` and `1000`.",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a number `N`, return `true` if and only if it is a confusing number, which satisfies the following condition:
We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid. A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.


Example 1:
Input: 6
Output: true
Explanation: 
We get `9` after rotating `6`, `9` is a valid number and `9!=6`.


Example 2:
Input: 89
Output: true
Explanation: 
We get `68` after rotating `89`, `86` is a valid number and `86!=89`.


Example 3:
Input: 11
Output: false
Explanation: 
We get `11` after rotating `11`, `11` is a valid number but the value remains the same, thus `11` is not a confusing number.


Example 4:
Input: 25
Output: false
Explanation: 
We get an invalid number after rotating `25`.

Note:
`0 <= N <= 10^9`
After the rotation we can ignore leading zeros, for example if after rotation we have `0008` then this number is considered as just `8`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a campus represented as a 2D grid, there are `N` workers and `M` bikes, with `N <= M`. Each worker and bike is a 2D coordinate on this grid.

Our goal is to assign a bike to each worker. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other, and assign the bike to that worker. (If there are multiple (worker, bike) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways to do that, we choose the pair with the smallest bike index). We repeat this process until there are no available workers.

The Manhattan distance between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.

Return a vector `ans` of length `N`, where `ans[i]` is the index (0-indexed) of the bike that the `i`-th worker is assigned to.


Example 1:
Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
Output: [1,0]
Explanation: 
Worker 1 grabs Bike 0 as they are closest (without ties), and Worker 0 is assigned Bike 1. So the output is [1, 0].


Example 2:
Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
Output: [0,2,1]
Explanation: 
Worker 0 grabs Bike 0 at first. Worker 1 and Worker 2 share the same distance to Bike 2, thus Worker 1 is assigned to Bike 2, and Worker 2 will take Bike 1. So the output is [0,2,1].

Note:
`0 <= workers[i][j], bikes[i][j] < 1000`
All worker and bike locations are distinct.

`1 <= workers.length <= bikes.length <= 1000`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `prices` `[p1,p2...,pn]` and a `target`, round each price `pi` to `Roundi(pi)` so that the rounded array `[Round1(p1),Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` could be either `Floor(pi)` or `Ceil(pi)`.

Return the string `""-1""` if the rounded array is impossible to sum to `target`. Otherwise, return the smallest rounding error, which is defined as `Σ |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string with three places after the decimal.


Example 1:
Input: prices = [""0.700"",""2.800"",""4.900""], target = 8
Output: ""1.000""
Explanation:
Use Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .


Example 2:
Input: prices = [""1.500"",""2.500"",""3.500""], target = 10
Output: ""-1""
Explanation: It is impossible to meet the target.


Example 3:
Input: prices = [""1.500"",""2.500"",""3.500""], target = 9
Output: ""1.500""

Constraints:
`1 <= prices.length <= 500`
Each string `prices[i]` represents a real number in the range `[0.0, 1000.0]` and has exactly 3 decimal places.

`0 <= target <= 106`",0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `edges` of a directed graph where `edges[i] = [ai, bi]` indicates there is an edge between nodes `ai` and `bi`, and two nodes `source` and `destination` of this graph, determine whether or not all paths starting from `source` eventually, end at `destination`, that is:
At least one path exists from the `source` node to the `destination` node
If a path exists from the `source` node to a node with no outgoing edges, then that node is equal to `destination`.

The number of possible paths from `source` to `destination` is a finite number.

Return `true` if and only if all roads from `source` lead to `destination`.


Example 1:
Input: n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2
Output: false
Explanation: It is possible to reach and get stuck on both node 1 and node 2.


Example 2:
Input: n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3
Output: false
Explanation: We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.


Example 3:
Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3
Output: true

Example 4:
Input: n = 3, edges = [[0,1],[1,1],[1,2]], source = 0, destination = 2
Output: false
Explanation: All paths from the source node end at the destination node, but there are an infinite number of paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0-1-1-1-1-2, and so on.


Example 5:
Input: n = 2, edges = [[0,1],[1,1]], source = 0, destination = 1
Output: false
Explanation: There is infinite self-loop at destination node.


Constraints:
`1 <= n <= 104`
`0 <= edges.length <= 104`
`edges.length == 2`
`0 <= ai, bi <= n - 1`
`0 <= source <= n - 1`
`0 <= destination <= n - 1`
The given graph may have self-loops and parallel edges.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` which is sorted in ascending order and all of its elements are unique and given also an integer `k`, return the `kth` missing number starting from the leftmost number of the array.


Example 1:
Input: nums = [4,7,9,10], k = 1
Output: 5
Explanation: The first missing number is 5.


Example 2:
Input: nums = [4,7,9,10], k = 3
Output: 8
Explanation: The missing numbers are [5,6,8,...], hence the third missing number is 8.


Example 3:
Input: nums = [1,2,4], k = 3
Output: 6
Explanation: The missing numbers are [3,5,6,7,...], hence the third missing number is 6.


Constraints:
`1 <= nums.length <= 5 * 104`
`1 <= nums[i] <= 107`
`nums` is sorted in ascending order, and all the elements are unique.

`1 <= k <= 108`
Follow up: Can you find a logarithmic time complexity (i.e., `O(log(n))`) solution?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S`, find out the length of the longest repeating substring(s). Return `0` if no repeating substring exists.


Example 1:
Input: S = ""abcd""
Output: 0
Explanation: There is no repeating substring.


Example 2:
Input: S = ""abbaba""
Output: 2
Explanation: The longest repeating substrings are ""ab"" and ""ba"", each of which occurs twice.


Example 3:
Input: S = ""aabcaabdaab""
Output: 3
Explanation: The longest repeating substring is ""aab"", which occurs `3` times.


Example 4:
Input: S = ""aaaaa""
Output: 4
Explanation: The longest repeating substring is ""aaaa"", which occurs twice.


Constraints:
The string `S` consists of only lowercase English letters from `'a'` - `'z'`.

`1 <= S.length <= 1500`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of integers, return the number of non-empty continuous subarrays that satisfy the following condition:
The leftmost element of the subarray is not larger than other elements in the subarray.


Example 1:
Input: [1,4,2,5,3]
Output: 11
Explanation: There are 11 valid subarrays: [1],[4],[2],[5],[3],[1,4],[2,5],[1,4,2],[2,5,3],[1,4,2,5],[1,4,2,5,3].


Example 2:
Input: [3,2,1]
Output: 3
Explanation: The 3 valid subarrays are: [3],[2],[1].


Example 3:
Input: [2,2,2]
Output: 6
Explanation: There are 6 valid subarrays: [2],[2],[2],[2,2],[2,2],[2,2,2].

Note:
`1 <= A.length <= 50000`
`0 <= A[i] <= 100000`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of distinct integers `arr`, where `arr` is sorted in ascending order, return the smallest index `i` that satisfies `arr[i] == i`. If there is no such index, return `-1`.


Example 1:
Input: arr = [-10,-5,0,3,7]
Output: 3
Explanation: For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, thus the output is 3.


Example 2:
Input: arr = [0,2,5,8,17]
Output: 0
Explanation: `arr[0] = 0`, thus the output is 0.


Example 3:
Input: arr = [-10,-5,3,4,7,9]
Output: -1
Explanation: There is no such `i` that `arr[i] == i`, thus the output is -1.


Constraints:
`1 <= arr.length < 104`
`-109 <= arr[i] <= 109`
Follow up: The `O(n)` solution is very straightforward. Can we do better?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `text` string and `words` (a list of strings), return all index pairs `[i, j]` so that the substring `text[i]...text[j]` is in the list of `words`.


Example 1:
Input: text = ""thestoryofleetcodeandme"", words = [""story"",""fleet"",""leetcode""]
Output: [[3,7],[9,13],[10,17]]

Example 2:
Input: text = ""ababa"", words = [""aba"",""ab""]
Output: [[0,1],[0,2],[2,3],[2,4]]
Explanation: 
Notice that matches can overlap, see ""aba"" is found in [0,2] and [2,4].

Note:
All strings contains only lowercase English letters.

It's guaranteed that all strings in `words` are different.

`1 <= text.length <= 100`
`1 <= words.length <= 20`
`1 <= words[i].length <= 50`
Return the pairs `[i,j]` in sorted order (i.e. sort them by their first coordinate in case of ties sort them by their second coordinate).",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a campus represented as a 2D grid, there are `N` workers and `M` bikes, with `N <= M`. Each worker and bike is a 2D coordinate on this grid.

We assign one unique bike to each worker so that the sum of the Manhattan distances between each worker and their assigned bike is minimized.

The Manhattan distance between two points `p1` and `p2` is `Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.

Return the minimum possible sum of Manhattan distances between each worker and their assigned bike.


Example 1:
Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
Output: 6
Explanation: 
We assign bike 0 to worker 0, bike 1 to worker 1. The Manhattan distance of both assignments is 3, so the output is 6.


Example 2:
Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
Output: 4
Explanation: 
We first assign bike 0 to worker 0, then assign bike 1 to worker 1 or worker 2, bike 2 to worker 2 or worker 1. Both assignments lead to sum of the Manhattan distances as 4.


Example 3:
Input: workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999],[3,999],[4,999]]
Output: 4995

Constraints:
`N == workers.length`
`M == bikes.length`
`1 <= N <= M <= 10`
`workers[i].length == 2`
`bikes[i].length == 2`
`0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000`
All the workers and the bikes locations are unique.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `d` between `0` and `9`, and two positive integers `low` and `high` as lower and upper bounds, respectively. Return the number of times that `d` occurs as a digit in all integers between `low` and `high`, including the bounds `low` and `high`.


Example 1:
Input: d = 1, low = 1, high = 13
Output: 6
Explanation: 
The digit `d=1` occurs `6` times in `1,10,11,12,13`. Note that the digit `d=1` occurs twice in the number `11`.


Example 2:
Input: d = 3, low = 100, high = 250
Output: 35
Explanation: 
The digit `d=3` occurs `35` times in `103,113,123,130,131,...,238,239,243`.

Note:
`0 <= d <= 9`
`1 <= low <= high <= 2×10^8`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For two strings `s` and `t`, we say ""`t` divides `s`"" if and only if `s = t + ... + t`  (`t` concatenated with itself 1 or more times)
Given two strings str1 and str2, return the largest string `x` such that `x` divides both `str1` and `str2`.


Example 1:
Input: str1 = ""ABCABC"", str2 = ""ABC""
Output: ""ABC""

Example 2:
Input: str1 = ""ABABAB"", str2 = ""ABAB""
Output: ""AB""

Example 3:
Input: str1 = ""LEET"", str2 = ""CODE""
Output: """"

Example 4:
Input: str1 = ""ABCDEF"", str2 = ""ABC""
Output: """"

Constraints:
`1 <= str1.length <= 1000`
`1 <= str2.length <= 1000`
`str1` and `str2` consist of English uppercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two numbers `arr1` and `arr2` in base -2, return the result of adding them together.

Each number is given in array format:  as an array of 0s and 1s, from most significant bit to least significant bit.  For example, `arr = [1,1,0,1]` represents the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`.  A number `arr` in array, format is also guaranteed to have no leading zeros: either `arr == [0]` or `arr[0] == 1`.

Return the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s with no leading zeros.


Example 1:
Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]
Output: [1,0,0,0,0]
Explanation: arr1 represents 11, arr2 represents 5, the output represents 16.


Example 2:
Input: arr1 = [0], arr2 = [0]
Output: [0]

Example 3:
Input: arr1 = [0], arr2 = [1]
Output: [1]

Constraints:
`1 <= arr1.length, arr2.length <= 1000`
`arr1[i]` and `arr2[i]` are `0` or `1`
`arr1` and `arr2` have no leading zeros",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `matrix` and a `target`, return the number of non-empty submatrices that sum to target.

A submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` with `x1 <= x <= x2` and `y1 <= y <= y2`.

Two submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some coordinate that is different: for example, if `x1 != x1'`.


Example 1:
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: The four 1x1 submatrices that only contain 0.


Example 2:
Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: The two 1x2 submatrices, plus the two 2x1 submatrices, plus the 2x2 submatrix.


Example 3:
Input: matrix = [[904]], target = 0
Output: 0

Constraints:
`1 <= matrix.length <= 100`
`1 <= matrix[0].length <= 100`
`-1000 <= matrix[i] <= 1000`
`-10^8 <= target <= 10^8`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given words `first` and `second`, consider occurrences in some `text` of the form ""`first second third`"", where `second` comes immediately after `first`, and `third` comes immediately after `second`.

For each such occurrence, add ""`third`"" to the answer, and return the answer.


Example 1:
Input: text = ""alice is a good girl she is a good student"", first = ""a"", second = ""good""
Output: [""girl"",""student""]

Example 2:
Input: text = ""we will we will rock you"", first = ""we"", second = ""will""
Output: [""we"",""rock""]
Note:
`1 <= text.length <= 1000`
`text` consists of space separated words, where each word consists of lowercase English letters.

`1 <= first.length, second.length <= 10`
`first` and `second` consist of lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n`  `tiles`, where each tile has one letter `tiles[i]` printed on it.

Return the number of possible non-empty sequences of letters you can make using the letters printed on those `tiles`.


Example 1:
Input: tiles = ""AAB""
Output: 8
Explanation: The possible sequences are ""A"", ""B"", ""AA"", ""AB"", ""BA"", ""AAB"", ""ABA"", ""BAA"".


Example 2:
Input: tiles = ""AAABBC""
Output: 188

Example 3:
Input: tiles = ""V""
Output: 1

Constraints:
`1 <= tiles.length <= 7`
`tiles` consists of uppercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, consider all root to leaf paths: paths from the root to any leaf.  (A leaf is a node with no children.)
A `node` is insufficient if every such root to leaf path intersecting this `node` has sum strictly less than `limit`.

Delete all insufficient nodes simultaneously, and return the root of the resulting binary tree.


Example 1:
Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1
Output: [1,2,3,4,null,null,7,8,9,null,14]

Example 2:
Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22
Output: [5,4,8,11,null,17,4,7,null,null,null,5]

Example 3:
Input: root = [1,2,-3,-5,null,4,null], limit = -1
Output: [1,null,-3,4]
Note:
The given tree will have between `1` and `5000` nodes.

`-10^5 <= node.val <= 10^5`
`-10^9 <= limit <= 10^9`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Return the lexicographically smallest subsequence of `s` that contains all the distinct characters of `s` exactly once.

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/

Example 1:
Input: s = ""bcabc""
Output: ""abc""

Example 2:
Input: s = ""cbacdcbc""
Output: ""acdb""

Constraints:
`1 <= s.length <= 1000`
`s` consists of lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `A` of positive integers, let `S` be the sum of the digits of the minimal element of `A`.

Return 0 if `S` is odd, otherwise return 1.


Example 1:
Input: [34,23,1,24,75,33,54,8]
Output: 0
Explanation: 
The minimal element is 1, and the sum of those digits is S = 1 which is odd, so the answer is 0.


Example 2:
Input: [99,77,33,66,55]
Output: 1
Explanation: 
The minimal element is 33, and the sum of those digits is S = 3 + 3 = 6 which is even, so the answer is 1.


Constraints:
`1 <= A.length <= 100`
`1 <= A[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of the scores of different students, `items`, where `items[i] = [IDi, scorei]` represents one score from a student with `IDi`, calculate each student's top five average.

Return the answer as an array of pairs `result`, where `result[j] = [IDj, topFiveAveragej]` represents the student with `IDj` and their top five average. Sort `result` by `IDj` in increasing order.

A student's top five average is calculated by taking the sum of their top five scores and dividing it by `5` using integer division.


Example 1:
Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1,87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
Explanation: 
The student with ID = 1 got scores 91, 92, 60, 65, 87, and 100. Their top five average is (100 + 92 + 91 + 87 + 65) / 5 = 87.

The student with ID = 2 got scores 93, 97, 77, 100, and 76. Their top five average is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but with integer division their average converts to 88.


Example 2:
Input: items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]
Output: [[1,100],[7,100]]

Constraints:
`1 <= items.length <= 1000`
`items[i].length == 2`
`1 <= IDi <= 1000`
`0 <= scorei <= 100`
For each `IDi`, there will be at least five scores.",1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` representing a list of words. Each letter in the word has one or more options.

If there is one option, the letter is represented as is.

If there is more than one option, then curly braces delimit the options. For example, `""{a,b,c}""` represents options `[""a"", ""b"", ""c""]`.

For example, if `s = ""a{b,c}""`, the first character is always `'a'`, but the second character can be `'b'` or `'c'`. The original list is `[""ab"", ""ac""]`.

Return all words that can be formed in this manner, sorted in lexicographical order.


Example 1:
Input: s = ""{a,b}c{d,e}f""
Output: [""acdf"",""acef"",""bcdf"",""bcef""]

Example 2:
Input: s = ""abcd""
Output: [""abcd""]

Constraints:
`1 <= s.length <= 50`
`s` consists of curly brackets `'{}'`, commas `','`, and lowercase English letters.

`s` is guaranteed to be a valid input.

There are no nested curly brackets.

All characters inside a pair of consecutive opening and ending curly brackets are different.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can rotate digits by 180 degrees to form new digits. When 0, 1, 6, 8, 9 are rotated 180 degrees, they become 0, 1, 9, 8, 6 respectively. When 2, 3, 4, 5 and 7 are rotated 180 degrees, they become invalid.

A confusing number is a number that when rotated 180 degrees becomes a different number with each digit valid.(Note that the rotated number can be greater than the original number.)
Given a positive integer `N`, return the number of confusing numbers between `1` and `N` inclusive.


Example 1:
Input: 20
Output: 6
Explanation: 
The confusing numbers are [6,9,10,16,18,19].

6 converts to 9.

9 converts to 6.

10 converts to 01 which is just 1.

16 converts to 91.

18 converts to 81.

19 converts to 61.


Example 2:
Input: 100
Output: 19
Explanation: 
The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].

Note:
`1 <= N <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a fixed length array `arr` of integers, duplicate each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written.

Do the above modifications to the input array in place, do not return anything from your function.


Example 1:
Input: [1,0,2,3,0,4,5,0]
Output: null
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]

Example 2:
Input: [1,2,3]
Output: null
Explanation: After calling your function, the input array is modified to: [1,2,3]
Note:
`1 <= arr.length <= 10000`
`0 <= arr[i] <= 9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have a set of items: the `i`-th item has value `values[i]` and label `labels[i]`.

Then, we choose a subset `S` of these items, such that:
`|S| <= num_wanted`
For every label `L`, the number of items in `S` with label `L` is `<= use_limit`.

Return the largest possible sum of the subset `S`.


Example 1:
Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], `num_wanted `= 3, use_limit = 1
Output: 9
Explanation: The subset chosen is the first, third, and fifth item.


Example 2:
Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], `num_wanted `= 3, use_limit = 2
Output: 12
Explanation: The subset chosen is the first, second, and third item.


Example 3:
Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 1
Output: 16
Explanation: The subset chosen is the first and fourth item.


Example 4:
Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted `= 3, use_limit = 2
Output: 24
Explanation: The subset chosen is the first, second, and fourth item.

Note:
`1 <= values.length == labels.length <= 20000`
`0 <= values[i], labels[i] <= 20000`
`1 <= num_wanted, use_limit <= values.length`",0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `n x n` binary matrix `grid`, return the length of the shortest clear path in the matrix. If there is no clear path, return `-1`.

A clear path in a binary matrix is a path from the top-left cell (i.e., `(0, 0)`) to the bottom-right cell (i.e., `(n - 1, n - 1)`) such that:
All the visited cells of the path are `0`.

All the adjacent cells of the path are 8-directionally connected (i.e., they are different and they share an edge or a corner).

The length of a clear path is the number of visited cells of this path.


Example 1:
Input: grid = [[0,1],[1,0]]
Output: 2

Example 2:
Input: grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4

Example 3:
Input: grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 100`
`grid[i][j] is 0 or 1`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `str1` and `str2`, return the shortest string that has both `str1` and `str2` as subsequences.  If multiple answers exist, you may return any of them.

(A string S is a subsequence of string T if deleting some number of characters from T (possibly 0, and the characters are chosen anywhere from T) results in the string S.)

Example 1:
Input: str1 = ""abac"", str2 = ""cab""
Output: ""cabac""
Explanation: 
str1 = ""abac"" is a subsequence of ""cabac"" because we can delete the first ""c"".

str2 = ""cab"" is a subsequence of ""cabac"" because we can delete the last ""ac"".

The answer provided is the shortest such string that satisfies these properties.

Note:
`1 <= str1.length, str2.length <= 1000`
`str1` and `str2` consist of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a large sample of integers in the range `[0, 255]`. Since the sample is so large, it is represented by an array `count` where `count[k]` is the number of times that `k` appears in the sample.

Calculate the following statistics:
`minimum`: The minimum element in the sample.

`maximum`: The maximum element in the sample.

`mean`: The average of the sample, calculated as the total sum of all elements divided by the total number of elements.

`median`:
	
If the sample has an odd number of elements, then the `median` is the middle element once the sample is sorted.

If the sample has an even number of elements, then the `median` is the average of the two middle elements once the sample is sorted.

`mode`: The number that appears the most in the sample. It is guaranteed to be unique.

Return the statistics of the sample as an array of floating-point numbers `[minimum, maximum, mean, median, mode]`. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,3.00000,2.37500,2.50000,3.00000]
Explanation: The sample represented by count is [1,2,2,2,3,3,3,3].

The minimum and maximum are 1 and 3 respectively.

The mean is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.

Since the size of the sample is even, the median is the average of the two middle elements 2 and 3, which is 2.5.

The mode is 3 as it appears the most in the sample.


Example 2:
Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]
Output: [1.00000,4.00000,2.18182,2.00000,1.00000]
Explanation: The sample represented by count is [1,1,1,1,2,2,2,3,3,4,4].

The minimum and maximum are 1 and 4 respectively.

The mean is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182).

Since the size of the sample is odd, the median is the middle element 2.

The mode is 1 as it appears the most in the sample.


Constraints:
`count.length == 256`
`0 <= count[i] <= 109`
`1 <= sum(count) <= 109`
The mode of the sample that `count` represents is unique.",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are driving a vehicle that has `capacity` empty seats initially available for passengers.  The vehicle only drives east (ie. it cannot turn around and drive west.)
Given a list of `trips`, `trip[i] = [num_passengers, start_location, end_location]` contains information about the `i`-th trip: the number of passengers that must be picked up, and the locations to pick them up and drop them off.  The locations are given as the number of kilometers due east from your vehicle's initial location.

Return `true` if and only if it is possible to pick up and drop off all passengers for all the given trips. 

Example 1:
Input: trips = [[2,1,5],[3,3,7]], capacity = 4
Output: false

Example 2:
Input: trips = [[2,1,5],[3,3,7]], capacity = 5
Output: true

Example 3:
Input: trips = [[2,1,5],[3,5,7]], capacity = 3
Output: true

Example 4:
Input: trips = [[3,2,7],[3,7,9],[8,3,9]], capacity = 11
Output: true

Constraints:
`trips.length <= 1000`
`trips[i].length == 3`
`1 <= trips[i][0] <= 100`
`0 <= trips[i][1] < trips[i][2] <= 1000`
`1 <= capacity <= 100000`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"(This problem is an interactive problem.)
You may recall that an array `A` is a mountain array if and only if:
`A.length >= 3`
There exists some `i` with `0 < i < A.length - 1` such that:
	
`A[0] < A[1] < ... A[i-1] < A[i]`
`A[i] > A[i+1] > ... > A[A.length - 1]`
Given a mountain array `mountainArr`, return the minimum `index` such that `mountainArr.get(index) == target`.  If such an `index` doesn't exist, return `-1`.

You can't access the mountain array directly.  You may only access the array using a `MountainArray` interface:
`MountainArray.get(k)` returns the element of the array at index `k` (0-indexed).

`MountainArray.length()` returns the length of the array.

Submissions making more than `100` calls to `MountainArray.get` will be judged Wrong Answer.  Also, any solutions that attempt to circumvent the judge will result in disqualification.


Example 1:
Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array, at index=2 and index=5. Return the minimum index, which is 2.


Example 2:
Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in `the array,` so we return -1.


Constraints:
`3 <= mountain_arr.length() <= 10000`
`0 <= target <= 10^9`
`0 <= mountain_arr.get(index) <= 10^9`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Under a grammar given below, strings can represent a set of lowercase words.  Let's use `R(expr)` to denote the set of words the expression represents.

Grammar can best be understood through simple examples:
Single letters represent a singleton set containing that word.

	
`R(""a"") = {""a""}`
`R(""w"") = {""w""}`
When we take a comma delimited list of 2 or more expressions, we take the union of possibilities.

	
`R(""{a,b,c}"") = {""a"",""b"",""c""}`
`R(""{{a,b},{b,c}}"") = {""a"",""b"",""c""}` (notice the final set only contains each word at most once)
When we concatenate two expressions, we take the set of possible concatenations between two words where the first word comes from the first expression and the second word comes from the second expression.

	
`R(""{a,b}{c,d}"") = {""ac"",""ad"",""bc"",""bd""}`
`R(""a{b,c}{d,e}f{g,h}"") = {""abdfg"", ""abdfh"", ""abefg"", ""abefh"", ""acdfg"", ""acdfh"", ""acefg"", ""acefh""}`
Formally, the 3 rules for our grammar:
For every lowercase letter `x`, we have `R(x) = {x}`
For expressions `e_1, e_2, ... , e_k` with `k >= 2`, we have `R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ ...`
For expressions `e_1` and `e_2`, we have `R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}`, where + denotes concatenation, and × denotes the cartesian product.

Given an `expression` representing a set of words under the given grammar, return the sorted list of words that the expression represents.


Example 1:
Input: ""{a,b}{c,{d,e}}""
Output: [""ac"",""ad"",""ae"",""bc"",""bd"",""be""]

Example 2:
Input: ""{{a,z},a{b,c},{ab,z}}""
Output: [""a"",""ab"",""ac"",""z""]
Explanation: Each distinct word is written only once in the final answer.


Constraints:
`1 <= expression.length <= 60`
`expression[i]` consists of `'{'`, `'}'`, `','`or lowercase English letters.

The given `expression` represents a set of words based on the grammar given in the description.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.


Example 1:
Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.


Example 2:
Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case it is not possible to get a pair sum less that 15.


Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 1000`
`1 <= k <= 2000`",1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S`, return the number of substrings of length `K` with no repeated characters.


Example 1:
Input: S = ""havefunonleetcode"", K = 5
Output: 6
Explanation: 
There are 6 substrings they are : 'havef','avefu','vefun','efuno','etcod','tcode'.


Example 2:
Input: S = ""home"", K = 5
Output: 0
Explanation: 
Notice K can be larger than the length of S. In this case is not possible to find any substring.

Note:
`1 <= S.length <= 10^4`
All characters of S are lowercase English letters.

`1 <= K <= 10^4`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a social group, there are `N` people, with unique integer ids from `0` to `N-1`.

We have a list of `logs`, where each `logs[i] = [timestamp, id_A, id_B]` contains a non-negative integer timestamp, and the ids of two different people.

Each log represents the time in which two different people became friends.  Friendship is symmetric: if A is friends with B, then B is friends with A.

Let's say that person A is acquainted with person B if A is friends with B, or A is a friend of someone acquainted with B.

Return the earliest time for which every person became acquainted with every other person. Return -1 if there is no such earliest time.


Example 1:
Input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0,3],[20190312,1,2],[20190322,4,5]], N = 6
Output: 20190301
Explanation: 
The first event occurs at timestamp = 20190101 and after 0 and 1 become friends we have the following friendship groups [0,1], [2], [3], [4], [5].

The second event occurs at timestamp = 20190104 and after 3 and 4 become friends we have the following friendship groups [0,1], [2], [3,4], [5].

The third event occurs at timestamp = 20190107 and after 2 and 3 become friends we have the following friendship groups [0,1], [2,3,4], [5].

The fourth event occurs at timestamp = 20190211 and after 1 and 5 become friends we have the following friendship groups [0,1,5], [2,3,4].

The fifth event occurs at timestamp = 20190224 and as 2 and 4 are already friend anything happens.

The sixth event occurs at timestamp = 20190301 and after 0 and 3 become friends we have that all become friends.

Note:
`2 <= N <= 100`
`1 <= logs.length <= 10^4`
`0 <= logs[i][0] <= 10^9`
`0 <= logs[i][1], logs[i][2] <= N - 1`
It's guaranteed that all timestamps in `logs[i][0]` are different.

`logs `are not necessarily ordered by some criteria.

`logs[i][1] != logs[i][2]`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a matrix of integers `A` with R rows and C columns, find the maximum score of a path starting at `[0,0]` and ending at `[R-1,C-1]`.

The score of a path is the minimum value in that path.  For example, the value of the path 8 →  4 →  5 →  9 is 4.

A path moves some number of times from one visited cell to any neighbouring unvisited cell in one of the 4 cardinal directions (north, east, west, south).


Example 1:
Input: [[5,4,5],[1,2,6],[7,4,6]]
Output: 4
Explanation: 
The path with the maximum score is highlighted in yellow. 

Example 2:
Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]
Output: 2

Example 3:
Input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8],[4,1,2,0,0],[4,6,5,4,3]]
Output: 3
Note:
`1 <= R, C <= 100`
`0 <= A[i][j] <= 10^9`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an infinite binary tree where every node has two children, the nodes are labelled in row order.

In the odd numbered rows (ie., the first, third, fifth,...), the labelling is left to right, while in the even numbered rows (second, fourth, sixth,...), the labelling is right to left.

Given the `label` of a node in this tree, return the labels in the path from the root of the tree to the node with that `label`.


Example 1:
Input: label = 14
Output: [1,3,4,14]

Example 2:
Input: label = 26
Output: [1,2,6,10,26]

Constraints:
`1 <= label <= 10^6`",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have a sequence of `books`: the `i`-th book has thickness `books[i][0]` and height `books[i][1]`.

We want to place these books in order onto bookcase shelves that have total width `shelf_width`.

We choose some of the books to place on this shelf (such that the sum of their thickness is `<= shelf_width`), then build another level of shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down.  We repeat this process until there are no more books to place.

Note again that at each step of the above process, the order of the books we place is the same order as the given sequence of books.  For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.

Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.


Example 1:
Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4
Output: 6
Explanation:
The sum of the heights of the 3 shelves are 1 + 3 + 2 = 6.

Notice that book number 2 does not have to be on the first shelf.


Constraints:
`1 <= books.length <= 1000`
`1 <= books[i][0] <= shelf_width <= 1000`
`1 <= books[i][1] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Return the result of evaluating a given boolean `expression`, represented as a string.

An expression can either be:
`""t""`, evaluating to `True`;
`""f""`, evaluating to `False`;
`""!(expr)""`, evaluating to the logical NOT of the inner expression `expr`;
`""&(expr1,expr2,...)""`, evaluating to the logical AND of 2 or more inner expressions `expr1, expr2, ...`;
`""|(expr1,expr2,...)""`, evaluating to the logical OR of 2 or more inner expressions `expr1, expr2, ...`

Example 1:
Input: expression = ""!(f)""
Output: true

Example 2:
Input: expression = ""|(f,t)""
Output: true

Example 3:
Input: expression = ""&(t,f)""
Output: false

Example 4:
Input: expression = ""|(&(t,f,t),!(t))""
Output: false

Constraints:
`1 <= expression.length <= 20000`
`expression[i]` consists of characters in `{'(', ')', '&', '|', '!', 't', 'f', ','}`.

`expression` is a valid expression representing a boolean, as given in the description.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a valid (IPv4) IP `address`, return a defanged version of that IP address.

A defanged IP address replaces every period `"".""` with `""[.]""`.


Example 1:
Input: address = ""1.1.1.1""
Output: ""1[.]1[.]1[.]1""

Example 2:
Input: address = ""255.100.50.0""
Output: ""255[.]100[.]50[.]0""

Constraints:
The given `address` is a valid IPv4 address.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` flights that are labeled from `1` to `n`.

You are given an array of flight bookings `bookings`, where `bookings[i] = [firsti, lasti, seatsi]` represents a booking for flights `firsti` through `lasti` (inclusive) with `seatsi` seats reserved for each flight in the range.

Return an array `answer` of length `n`, where `answer[i]` is the total number of seats reserved for flight `i`.


Example 1:
Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
Explanation:
Flight labels:        1   2   3   4   5
Booking 1 reserved:  10  10
Booking 2 reserved:      20  20
Booking 3 reserved:      25  25  25  25
Total seats:         10  55  45  25  25
Hence, answer = [10,55,45,25,25]

Example 2:
Input: bookings = [[1,2,10],[2,2,15]], n = 2
Output: [10,25]
Explanation:
Flight labels:        1   2
Booking 1 reserved:  10  10
Booking 2 reserved:      15
Total seats:         10  25
Hence, answer = [10,25]

Constraints:
`1 <= n <= 2 * 104`
`1 <= bookings.length <= 2 * 104`
`bookings[i].length == 3`
`1 <= firsti <= lasti <= n`
`1 <= seatsi <= 104`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with a value in `to_delete`, we are left with a forest (a disjoint union of trees).

Return the roots of the trees in the remaining forest. You may return the result in any order.


Example 1:
Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

Example 2:
Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]

Constraints:
The number of nodes in the given tree is at most `1000`.

Each node has a distinct value between `1` and `1000`.

`to_delete.length <= 1000`
`to_delete` contains distinct values between `1` and `1000`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is a valid parentheses string (denoted VPS) if and only if it consists of `""(""` and `"")""` characters only, and:
It is the empty string, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or
It can be written as `(A)`, where `A` is a VPS.

We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:
`depth("""") = 0`
`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's
`depth(""("" + A + "")"") = 1 + depth(A)`, where `A` is a VPS.

For example,  `""""`, `""()()""`, and `""()(()())""` are VPS's (with nesting depths 0, 1, and 2), and `"")(""` and `""(()""` are not VPS's.

Given a VPS seq, split it into two disjoint subsequences `A` and `B`, such that `A` and `B` are VPS's (and `A.length + B.length = seq.length`).

Now choose any such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value.

Return an `answer` array (of length `seq.length`) that encodes such a choice of `A` and `B`:  `answer[i] = 0` if `seq[i]` is part of `A`, else `answer[i] = 1`.  Note that even though multiple answers may exist, you may return any of them.


Example 1:
Input: seq = ""(()())""
Output: [0,1,1,1,1,0]

Example 2:
Input: seq = ""()(())()""
Output: [0,0,0,1,1,0,1,1]

Constraints:
`1 <= seq.size <= 10000`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, remove the vowels `'a'`, `'e'`, `'i'`, `'o'`, and `'u'` from it, and return the new string.


Example 1:
Input: s = ""leetcodeisacommunityforcoders""
Output: ""ltcdscmmntyfrcdrs""

Example 2:
Input: s = ""aeiou""
Output: """"

Constraints:
`1 <= s.length <= 1000`
`s` consists of only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, find the maximum average value of any subtree of that tree.

(A subtree of a tree is any node of that tree plus all its descendants. The average value of a tree is the sum of its values, divided by the number of nodes.)

Example 1:
Input: [5,6,1]
Output: 6.00000
Explanation: 
For the node with value = 5 we have an average of (5 + 6 + 1) / 3 = 4.

For the node with value = 6 we have an average of 6 / 1 = 6.

For the node with value = 1 we have an average of 1 / 1 = 1.

So the answer is 6 which is the maximum.

Note:
The number of nodes in the tree is between `1` and `5000`.

Each node will have a value between `0` and `100000`.

Answers will be accepted as correct if they are within `10^-5` of the correct answer.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-decreasing array of positive integers `nums` and an integer `K`, find out if this array can be divided into one or more disjoint increasing subsequences of length at least `K`.


Example 1:
Input: nums = [1,2,2,3,3,4,4], K = 3
Output: true
Explanation: 
The array can be divided into the two subsequences [1,2,3,4] and [2,3,4] with lengths at least 3 each.


Example 2:
Input: nums = [5,6,6,7,8], K = 3
Output: false
Explanation: 
There is no way to divide the array using the conditions required.

Note:
`1 <= nums.length <= 10^5`
`1 <= K <= nums.length`
`1 <= nums[i] <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays `arr1` and `arr2`, the elements of `arr2` are distinct, and all elements in `arr2` are also in `arr1`.

Sort the elements of `arr1` such that the relative ordering of items in `arr1` are the same as in `arr2`.  Elements that don't appear in `arr2` should be placed at the end of `arr1` in ascending order.


Example 1:
Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]

Constraints:
`1 <= arr1.length, arr2.length <= 1000`
`0 <= arr1[i], arr2[i] <= 1000`
All the elements of `arr2` are distinct.

Each `arr2[i]` is in `arr1`.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the lowest common ancestor of its deepest leaves.

Recall that:
The node of a binary tree is a leaf if and only if it has no children
The depth of the root of the tree is `0`. if the depth of a node is `d`, the depth of each of its children is `d + 1`.

The lowest common ancestor of a set `S` of nodes, is the node `A` with the largest depth such that every node in `S` is in the subtree with root `A`.

Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored in yellow in the diagram.

The nodes coloured in blue are the deepest leaf-nodes of the tree.

Note that nodes 6, 0, and 8 are also leaf nodes, but the depth of them is 2, but the depth of nodes 7 and 4 is 3.


Example 2:
Input: root = [1]
Output: [1]
Explanation: The root is the deepest node in the tree, and it's the lca of itself.


Example 3:
Input: root = [0,1,3,null,2]
Output: [2]
Explanation: The deepest leaf node in the tree is 2, the lca of one node is itself.


Constraints:
The number of nodes in the tree will be in the range `[1, 1000]`.

`0 <= Node.val <= 1000`
The values of the nodes in the tree are unique.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given `hours`, a list of the number of hours worked per day for a given employee.

A day is considered to be a tiring day if and only if the number of hours worked is (strictly) greater than `8`.

A well-performing interval is an interval of days for which the number of tiring days is strictly larger than the number of non-tiring days.

Return the length of the longest well-performing interval.


Example 1:
Input: hours = [9,9,6,0,6,6,9]
Output: 3
Explanation: The longest well-performing interval is [9,9,6].


Constraints:
`1 <= hours.length <= 10000`
`0 <= hours[i] <= 16`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a project, you have a list of required skills `req_skills`, and a list of people. The `ith` person `people[i]` contains a list of skills that the person has.

Consider a sufficient team: a set of people such that for every required skill in `req_skills`, there is at least one person in the team who has that skill. We can represent these teams by the index of each person.

For example, `team = [0, 1, 3]` represents the people with skills `people[0]`, `people[1]`, and `people[3]`.

Return any sufficient team of the smallest possible size, represented by the index of each person. You may return the answer in any order.

It is guaranteed an answer exists.


Example 1:
Input: req_skills = [""java"",""nodejs"",""reactjs""], people = [[""java""],[""nodejs""],[""nodejs"",""reactjs""]]
Output: [0,2]

Example 2:
Input: req_skills = [""algorithms"",""math"",""java"",""reactjs"",""csharp"",""aws""], people = [[""algorithms"",""math"",""java""],[""algorithms"",""math"",""reactjs""],[""java"",""csharp"",""aws""],[""reactjs"",""csharp""],[""csharp"",""math""],[""aws"",""java""]]
Output: [1,2]

Constraints:
`1 <= req_skills.length <= 16`
`1 <= req_skills[i].length <= 16`
`req_skills[i]` consists of lowercase English letters.

All the strings of `req_skills` are unique.

`1 <= people.length <= 60`
`0 <= people[i].length <= 16`
`1 <= people[i][j].length <= 16`
`people[i][j]` consists of lowercase English letters.

All the strings of `people[i]` are unique.

Every skill in `people[i]` is a skill in `req_skills`.

It is guaranteed a sufficient team exists.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of `dominoes`, `dominoes[i] = [a, b]` is equivalent to `dominoes[j] = [c, d]` if and only if either (`a==c` and `b==d`), or (`a==d` and `b==c`) - that is, one domino can be rotated to be equal to another domino.

Return the number of pairs `(i, j)` for which `0 <= i < j < dominoes.length`, and `dominoes[i]` is equivalent to `dominoes[j]`.


Example 1:
Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1

Constraints:
`1 <= dominoes.length <= 40000`
`1 <= dominoes[i][j] <= 9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Consider a directed graph, with nodes labelled `0, 1, ..., n-1`.  In this graph, each edge is either red or blue, and there could be self-edges or parallel edges.

Each `[i, j]` in `red_edges` denotes a red directed edge from node `i` to node `j`.  Similarly, each `[i, j]` in `blue_edges` denotes a blue directed edge from node `i` to node `j`.

Return an array `answer` of length `n`, where each `answer[X]` is the length of the shortest path from node `0` to node `X` such that the edge colors alternate along the path (or `-1` if such a path doesn't exist).


Example 1:
Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
Output: [0,1,-1]

Example 2:
Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
Output: [0,1,-1]

Example 3:
Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
Output: [0,-1,-1]

Example 4:
Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
Output: [0,1,2]

Example 5:
Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
Output: [0,1,1]

Constraints:
`1 <= n <= 100`
`red_edges.length <= 400`
`blue_edges.length <= 400`
`red_edges[i].length == blue_edges[i].length == 2`
`0 <= red_edges[i][j], blue_edges[i][j] < n`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr` of positive integers, consider all binary trees such that:
Each node has either 0 or 2 children;
The values of `arr` correspond to the values of each leaf in an in-order traversal of the tree.  (Recall that a node is a leaf if and only if it has 0 children.)
The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtree respectively.

Among all possible binary trees considered, return the smallest possible sum of the values of each non-leaf node.  It is guaranteed this sum fits into a 32-bit integer.


Example 1:
Input: arr = [6,2,4]
Output: 32
Explanation:
There are two possible trees.  The first has non-leaf node sum 36, and the second has non-leaf node sum 32.

    24            24
   /  \          /  \
  12   4        6    8
 /  \               / \
6    2             2   4

Constraints:
`2 <= arr.length <= 40`
`1 <= arr[i] <= 15`
It is guaranteed that the answer fits into a 32-bit signed integer (ie. it is less than `2^31`).",0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays of integers with equal lengths, return the maximum value of:
`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`
where the maximum is taken over all `0 <= i, j < arr1.length`.


Example 1:
Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
Output: 13

Example 2:
Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
Output: 20

Constraints:
`2 <= arr1.length == arr2.length <= 40000`
`-10^6 <= arr1[i], arr2[i] <= 10^6`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `A`, return the largest integer that only occurs once.

If no integer occurs once, return -1.


Example 1:
Input: [5,7,3,9,4,9,8,3,1]
Output: 8
Explanation: 
The maximum integer in the array is 9 but it is repeated. The number 8 occurs only once, so it's the answer.


Example 2:
Input: [9,9,8,8]
Output: -1
Explanation: 
There is no number that occurs only once.

Note:
`1 <= A.length <= 2000`
`0 <= A[i] <= 1000`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return `true` if and only if it is an Armstrong number.

The `k`-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.


Example 1:
Input: n = 153
Output: true
Explanation: 153 is a 3-digit number, and 153 = 13 + 53 + 33.


Example 2:
Input: n = 123
Output: false
Explanation: 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36.


Constraints:
`1 <= n <= 108`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `N` cities numbered from 1 to `N`.

You are given `connections`, where each `connections[i] = [city1, city2, cost]` represents the cost to connect `city1` and `city2` together.  (A connection is bidirectional: connecting `city1` and `city2` is the same as connecting `city2` and `city1`.)
Return the minimum cost so that for every pair of cities, there exists a path of connections (possibly of length 1) that connects those two cities together.  The cost is the sum of the connection costs used. If the task is impossible, return -1.


Example 1:
Input: N = 3, connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
Explanation: 
Choosing any 2 edges will connect all cities so we choose the minimum 2.


Example 2:
Input: N = 4, connections = [[1,2,3],[3,4,4]]
Output: -1
Explanation: 
There is no way to connect all cities even if all edges are used.

Note:
`1 <= N <= 10000`
`1 <= connections.length <= 10000`
`1 <= connections[i][0], connections[i][1] <= N`
`0 <= connections[i][2] <= 10^5`
`connections[i][0] != connections[i][1]`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer `n` which indicates that we have `n` courses, labeled from `1` to `n`. You are also given an array `relations` where `relations[i] = [a, b]`, representing a prerequisite relationship between course `a` and course `b`: course `a` has to be studied before course `b`.

In one semester, you can study any number of courses as long as you have studied all the prerequisites for the course you are studying.

Return the minimum number of semesters needed to study all courses. If there is no way to study all the courses, return `-1`.


Example 1:
Input: n = 3, relations = [[1,3],[2,3]]
Output: 2
Explanation: In the first semester, courses 1 and 2 are studied. In the second semester, course 3 is studied.


Example 2:
Input: n = 3, relations = [[1,2],[2,3],[3,1]]
Output: -1
Explanation: No course can be studied because they depend on each other.


Constraints:
`1 <= n <= 5000`
`1 <= relations.length <= 5000`
`1 <= a, b <= n`
`a != b`
All the pairs `[a, b]` are unique.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Tribonacci sequence Tn is defined as follows: 
T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given `n`, return the value of Tn.


Example 1:
Input: n = 4
Output: 4
Explanation:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4

Example 2:
Input: n = 25
Output: 1389537

Constraints:
`0 <= n <= 37`
The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an alphabet board, we start at position `(0, 0)`, corresponding to character `board[0][0]`.

Here, `board = [""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]`, as shown in the diagram below.

We may make the following moves:
`'U'` moves our position up one row, if the position exists on the board;
`'D'` moves our position down one row, if the position exists on the board;
`'L'` moves our position left one column, if the position exists on the board;
`'R'` moves our position right one column, if the position exists on the board;
`'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.

(Here, the only positions that exist on the board are positions with letters on them.)
Return a sequence of moves that makes our answer equal to `target` in the minimum number of moves.  You may return any path that does so.


Example 1:
Input: target = ""leet""
Output: ""DDR!UURRR!!DDD!""

Example 2:
Input: target = ""code""
Output: ""RR!DDRR!UUL!R!""

Constraints:
`1 <= target.length <= 100`
`target` consists only of English lowercase letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D `grid` of `0`s and `1`s, return the number of elements in the largest square subgrid that has all `1`s on its border, or `0` if such a subgrid doesn't exist in the `grid`.


Example 1:
Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 9

Example 2:
Input: grid = [[1,1,0,0]]
Output: 1

Constraints:
`1 <= grid.length <= 100`
`1 <= grid[0].length <= 100`
`grid[i][j]` is `0` or `1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob continue their games with piles of stones.  There are a number of piles arranged in a row, and each pile has a positive integer number of stones `piles[i]`.  The objective of the game is to end with the most stones. 
Alice and Bob take turns, with Alice starting first.  Initially, `M = 1`.

On each player's turn, that player can take all the stones in the first `X` remaining piles, where `1 <= X <= 2M`.  Then, we set `M = max(M, X)`.

The game continues until all the stones have been taken.

Assuming Alice and Bob play optimally, return the maximum number of stones Alice can get.


Example 1:
Input: piles = [2,7,9,4,4]
Output: 10
Explanation:  If Alice takes one pile at the beginning, Bob takes two piles, then Alice takes 2 piles again. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at the beginning, then Bob can take all three piles left. In this case, Alice get 2 + 7 = 9 piles in total. So we return 10 since it's larger. 

Example 2:
Input: piles = [1,2,3,4,5,100]
Output: 104

Constraints:
`1 <= piles.length <= 100`
`1 <= piles[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `text1` and `text2`, return the length of their longest common subsequence. If there is no common subsequence, return `0`.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, `""ace""` is a subsequence of `""abcde""`.

A common subsequence of two strings is a subsequence that is common to both strings.


Example 1:
Input: text1 = ""abcde"", text2 = ""ace"" 
Output: 3  
Explanation: The longest common subsequence is ""ace"" and its length is 3.


Example 2:
Input: text1 = ""abc"", text2 = ""abc""
Output: 3
Explanation: The longest common subsequence is ""abc"" and its length is 3.


Example 3:
Input: text1 = ""abc"", text2 = ""def""
Output: 0
Explanation: There is no such common subsequence, so the result is 0.


Constraints:
`1 <= text1.length, text2.length <= 1000`
`text1` and `text2` consist of only lowercase English characters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of integers, a move consists of choosing any element and decreasing it by 1.

An array `A` is a zigzag array if either:
Every even-indexed element is greater than adjacent elements, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`
OR, every odd-indexed element is greater than adjacent elements, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`
Return the minimum number of moves to transform the given array `nums` into a zigzag array.


Example 1:
Input: nums = [1,2,3]
Output: 2
Explanation: We can decrease 2 to 0 or 3 to 1.


Example 2:
Input: nums = [9,6,1,6,2]
Output: 4

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Two players play a turn based game on a binary tree.  We are given the `root` of this binary tree, and the number of nodes `n` in the tree.  `n` is odd, and each node has a distinct value from `1` to `n`.

Initially, the first player names a value `x` with `1 <= x <= n`, and the second player names a value `y` with `1 <= y <= n` and `y != x`.  The first player colors the node with value `x` red, and the second player colors the node with value `y` blue.

Then, the players take turns starting with the first player.  In each turn, that player chooses a node of their color (red if player 1, blue if player 2) and colors an uncolored neighbor of the chosen node (either the left child, right child, or parent of the chosen node.)
If (and only if) a player cannot choose such a node in this way, they must pass their turn.  If both players pass their turn, the game ends, and the winner is the player that colored more nodes.

You are the second player.  If it is possible to choose such a `y` to ensure you win the game, return `true`.  If it is not possible, return `false`.


Example 1:
Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
Output: true
Explanation: The second player can choose the node with value 2.


Constraints:
`root` is the root of a binary tree with `n` nodes and distinct node values from `1` to `n`.

`n` is odd.

`1 <= x <= n <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a SnapshotArray that supports the following interface:
`SnapshotArray(int length)` initializes an array-like data structure with the given length.  Initially, each element equals 0.

`void set(index, val)` sets the element at the given `index` to be equal to `val`.

`int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.

`int get(index, snap_id)` returns the value at the given `index`, at the time we took the snapshot with the given `snap_id`

Example 1:
Input: [""SnapshotArray"",""set"",""snap"",""set"",""get""]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
Explanation: 
SnapshotArray snapshotArr = new SnapshotArray(3); // set the length to be 3
snapshotArr.set(0,5);  // Set array[0] = 5
snapshotArr.snap();  // Take a snapshot, return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0);  // Get the value of array[0] with snap_id = 0, return 5

Constraints:
`1 <= length <= 50000`
At most `50000` calls will be made to `set`, `snap`, and `get`.

`0 <= index < length`
`0 <= snap_id < `(the total number of times we call `snap()`)
`0 <= val <= 10^9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `text`. You should split it to k substrings `(subtext1, subtext2, ..., subtextk)` such that:
`subtexti` is a non-empty string.

The concatenation of all the substrings is equal to `text` (i.e., `subtext1 + subtext2 + ... + subtextk == text`).

`subtexti == subtextk - i + 1` for all valid values of `i` (i.e., `1 <= i <= k`).

Return the largest possible value of `k`.


Example 1:
Input: text = ""ghiabcdefhelloadamhelloabcdefghi""
Output: 7
Explanation: We can split the string on ""(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)"".


Example 2:
Input: text = ""merchant""
Output: 1
Explanation: We can split the string on ""(merchant)"".


Example 3:
Input: text = ""antaprezatepzapreanta""
Output: 11
Explanation: We can split the string on ""(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)"".


Example 4:
Input: text = ""aaa""
Output: 3
Explanation: We can split the string on ""(a)(a)(a)"".


Constraints:
`1 <= text.length <= 1000`
`text` consists only of lowercase English characters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Given an array `nums` sorted in non-decreasing order, and a number `target`, return `True` if and only if `target` is a majority element.

A majority element is an element that appears more than `N/2` times in an array of length `N`.


Example 1:
Input: nums = [2,4,5,5,5,5,5,6,6], target = 5
Output: true
Explanation: 
The value 5 appears 5 times and the length of the array is 9.

Thus, 5 is a majority element because 5 > 9/2 is true.


Example 2:
Input: nums = [10,100,101,101], target = 101
Output: false
Explanation: 
The value 101 appears 2 times and the length of the array is 4.

Thus, 101 is not a majority element because 2 > 4/2 is false.


Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 10^9`
`1 <= target <= 10^9`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array `data`, return the minimum number of swaps required to group all `1`’s present in the array together in any place in the array.


Example 1:
Input: data = [1,0,1,0,1]
Output: 1
Explanation: 
There are 3 ways to group all 1's together:
[1,1,1,0,0] using 1 swap.

[0,1,1,1,0] using 2 swaps.

[0,0,1,1,1] using 1 swap.

The minimum is 1.


Example 2:
Input: data = [0,0,0,1,0]
Output: 0
Explanation: 
Since there is only one 1 in the array, no swaps needed.


Example 3:
Input: data = [1,0,1,0,1,0,0,1,1,0,1]
Output: 3
Explanation: 
One possible solution that uses 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].


Example 4:
Input: data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1,0,1,1,0,0,0,1,1,1,1,0,0,1]
Output: 8

Constraints:
`1 <= data.length <= 105`
`data[i]` is `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given some website visits: the user with name `username[i]` visited the website `website[i]` at time `timestamp[i]`.

A 3-sequence is a list of websites of length 3 sorted in ascending order by the time of their visits.  (The websites in a 3-sequence are not necessarily distinct.)
Find the 3-sequence visited by the largest number of users. If there is more than one solution, return the lexicographically smallest such 3-sequence.


Example 1:
Input: username = [""joe"",""joe"",""joe"",""james"",""james"",""james"",""james"",""mary"",""mary"",""mary""], timestamp = [1,2,3,4,5,6,7,8,9,10], website = [""home"",""about"",""career"",""home"",""cart"",""maps"",""home"",""home"",""about"",""career""]
Output: [""home"",""about"",""career""]
Explanation: 
The tuples in this example are:
[""joe"", 1, ""home""]
[""joe"", 2, ""about""]
[""joe"", 3, ""career""]
[""james"", 4, ""home""]
[""james"", 5, ""cart""]
[""james"", 6, ""maps""]
[""james"", 7, ""home""]
[""mary"", 8, ""home""]
[""mary"", 9, ""about""]
[""mary"", 10, ""career""]
The 3-sequence (""home"", ""about"", ""career"") was visited at least once by 2 users.

The 3-sequence (""home"", ""cart"", ""maps"") was visited at least once by 1 user.

The 3-sequence (""home"", ""cart"", ""home"") was visited at least once by 1 user.

The 3-sequence (""home"", ""maps"", ""home"") was visited at least once by 1 user.

The 3-sequence (""cart"", ""maps"", ""home"") was visited at least once by 1 user.

Note:
`3 <= N = username.length = timestamp.length = website.length <= 50`
`1 <= username[i].length <= 10`
`0 <= timestamp[i] <= 10^9`
`1 <= website[i].length <= 10`
Both `username[i]` and `website[i]` contain only lowercase characters.

It is guaranteed that there is at least one user who visited at least 3 websites.

No user visits two websites at the same time.",1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `str1` and `str2` of the same length, determine whether you can transform `str1` into `str2` by doing zero or more conversions.

In one conversion you can convert all occurrences of one character in `str1` to any other lowercase English character.

Return `true` if and only if you can transform `str1` into `str2`.


Example 1:
Input: str1 = ""aabcc"", str2 = ""ccdee""
Output: true
Explanation: Convert 'c' to 'e' then 'b' to 'd' then 'a' to 'c'. Note that the order of conversions matter.


Example 2:
Input: str1 = ""leetcode"", str2 = ""codeleet""
Output: false
Explanation: There is no way to transform str1 to str2.


Constraints:
`1 <= str1.length == str2.length <= 104`
`str1` and `str2` contain only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `date` representing a Gregorian calendar date formatted as `YYYY-MM-DD`, return the day number of the year.


Example 1:
Input: date = ""2019-01-09""
Output: 9
Explanation: Given date is the 9th day of the year in 2019.


Example 2:
Input: date = ""2019-02-10""
Output: 41

Example 3:
Input: date = ""2003-03-01""
Output: 60

Example 4:
Input: date = ""2004-03-01""
Output: 61

Constraints:
`date.length == 10`
`date[4] == date[7] == '-'`, and all other `date[i]`'s are digits
`date` represents a calendar date between Jan 1st, 1900 and Dec 31, 2019.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `d` dice, and each die has `f` faces numbered `1, 2, ..., f`.

Return the number of possible ways (out of `fd` total ways) modulo `10^9 + 7` to roll the dice so the sum of the face up numbers equals `target`.


Example 1:
Input: d = 1, f = 6, target = 3
Output: 1
Explanation: 
You throw one die with 6 faces.  There is only one way to get a sum of 3.


Example 2:
Input: d = 2, f = 6, target = 7
Output: 6
Explanation: 
You throw two dice, each with 6 faces.  There are 6 ways to get a sum of 7:
1+6, 2+5, 3+4, 4+3, 5+2, 6+1.


Example 3:
Input: d = 2, f = 5, target = 10
Output: 1
Explanation: 
You throw two dice, each with 5 faces.  There is only one way to get a sum of 10: 5+5.


Example 4:
Input: d = 1, f = 2, target = 3
Output: 0
Explanation: 
You throw one die with 2 faces.  There is no way to get a sum of 3.


Example 5:
Input: d = 30, f = 30, target = 500
Output: 222616187
Explanation: 
The answer must be returned modulo 10^9 + 7.


Constraints:
`1 <= d, f <= 30`
`1 <= target <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `text`, we are allowed to swap two of the characters in the string. Find the length of the longest substring with repeated characters.


Example 1:
Input: text = ""ababa""
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is ""aaa"", which its length is 3.


Example 2:
Input: text = ""aaabaaa""
Output: 6
Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring ""aaaaaa"", which its length is 6.


Example 3:
Input: text = ""aaabbaaa""
Output: 4

Example 4:
Input: text = ""aaaaa""
Output: 5
Explanation: No need to swap, longest repeated character substring is ""aaaaa"", length is 5.


Example 5:
Input: text = ""abcdef""
Output: 1

Constraints:
`1 <= text.length <= 20000`
`text` consist of lowercase English characters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implementing the class `MajorityChecker`, which has the following API:
`MajorityChecker(int[] arr)` constructs an instance of MajorityChecker with the given array `arr`;
`int query(int left, int right, int threshold)` has arguments such that:
	
`0 <= left <= right < arr.length` representing a subarray of `arr`;
`2 * threshold > right - left + 1`, ie. the threshold is always a strict majority of the length of the subarray
Each `query(...)` returns the element in `arr[left], arr[left+1], ..., arr[right]` that occurs at least `threshold` times, or `-1` if no such element exists.


Example:
MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
majorityChecker.query(0,5,4); // returns 1
majorityChecker.query(0,3,3); // returns -1
majorityChecker.query(2,3,2); // returns 2

Constraints:
`1 <= arr.length <= 20000`
`1 <= arr[i] <= 20000`
For each query, `0 <= left <= right < len(arr)`
For each query, `2 * threshold > right - left + 1`
The number of queries is at most `10000`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of strings `words` and a string `chars`.

A string is good if it can be formed by characters from `chars` (each character can only be used once).

Return the sum of lengths of all good strings in `words`.


Example 1:
Input: words = [""cat"",""bt"",""hat"",""tree""], chars = ""atach""
Output: 6
Explanation: 
The strings that can be formed are ""cat"" and ""hat"" so the answer is 3 + 3 = 6.


Example 2:
Input: words = [""hello"",""world"",""leetcode""], chars = ""welldonehoneyr""
Output: 10
Explanation: 
The strings that can be formed are ""hello"" and ""world"" so the answer is 5 + 5 = 10.

Note:
`1 <= words.length <= 1000`
`1 <= words[i].length, chars.length <= 100`
All strings contain lowercase English letters only.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, the level of its root is `1`, the level of its children is `2`, and so on.

Return the smallest level `x` such that the sum of all the values of nodes at level `x` is maximal.


Example 1:
Input: root = [1,7,0,7,-8,null,null]
Output: 2
Explanation: 
Level 1 sum = 1.

Level 2 sum = 7 + 0 = 7.

Level 3 sum = 7 + -8 = -1.

So we return the level with the maximum sum which is level 2.


Example 2:
Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-105 <= Node.val <= 105`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `n x n` `grid` containing only values `0` and `1`, where `0` represents water and `1` represents land, find a water cell such that its distance to the nearest land cell is maximized, and return the distance. If no land or water exists in the grid, return `-1`.

The distance used in this problem is the Manhattan distance: the distance between two cells `(x0, y0)` and `(x1, y1)` is `|x0 - x1| + |y0 - y1|`.


Example 1:
Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: The cell (1, 1) is as far as possible from all the land with distance 2.


Example 2:
Input: grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: The cell (2, 2) is as far as possible from all the land with distance 4.


Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 100`
`grid[i][j]` is `0` or `1`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the last substring of `s` in lexicographical order.


Example 1:
Input: s = ""abab""
Output: ""bab""
Explanation: The substrings are [""a"", ""ab"", ""aba"", ""abab"", ""b"", ""ba"", ""bab""]. The lexicographically maximum substring is ""bab"".


Example 2:
Input: s = ""leetcode""
Output: ""tcode""

Constraints:
`1 <= s.length <= 4 * 105`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"There is a special keyboard with all keys in a single row.

Given a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`.

You want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.


Example 1:
Input: keyboard = ""abcdefghijklmnopqrstuvwxyz"", word = ""cba""
Output: 4
Explanation: The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.

Total time = 2 + 1 + 1 = 4. 

Example 2:
Input: keyboard = ""pqrstuvwxyzabcdefghijklmno"", word = ""leetcode""
Output: 73

Constraints:
`keyboard.length == 26`
`keyboard` contains each English lowercase letter exactly once in some order.

`1 <= word.length <= 104`
`word[i]` is an English lowercase letter.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are asked to design a file system that allows you to create new paths and associate them with different values.

The format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, ""`/leetcode""` and ""`/leetcode/problems""` are valid paths while an empty string `""""` and `""/""` are not.

Implement the `FileSystem` class:
`bool createPath(string path, int value)` Creates a new `path` and associates a `value` to it if possible and returns `true`. Returns `false` if the path already exists or its parent path doesn't exist.

`int get(string path)` Returns the value associated with `path` or returns `-1` if the path doesn't exist.


Example 1:
Input: 
[""FileSystem"",""createPath"",""get""]
[[],[""/a"",1],[""/a""]]
Output: 
[null,true,1]
Explanation: 
FileSystem fileSystem = new FileSystem();
fileSystem.createPath(""/a"", 1); // return true
fileSystem.get(""/a""); // return 1

Example 2:
Input: 
[""FileSystem"",""createPath"",""createPath"",""get"",""createPath"",""get""]
[[],[""/leet"",1],[""/leet/code"",2],[""/leet/code""],[""/c/d"",1],[""/c""]]
Output: 
[null,true,true,2,false,-1]
Explanation: 
FileSystem fileSystem = new FileSystem();
fileSystem.createPath(""/leet"", 1); // return true
fileSystem.createPath(""/leet/code"", 2); // return true
fileSystem.get(""/leet/code""); // return 2
fileSystem.createPath(""/c/d"", 1); // return false because the parent path ""/c"" doesn't exist.

fileSystem.get(""/c""); // return -1 because this path doesn't exist.


Constraints:
The number of calls to the two functions is less than or equal to `104` in total.

`2 <= path.length <= 100`
`1 <= value <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have some number of sticks with positive integer lengths. These lengths are given as an array `sticks`, where `sticks[i]` is the length of the `ith` stick.

You can connect any two sticks of lengths `x` and `y` into one stick by paying a cost of `x + y`. You must connect all the sticks until there is only one stick remaining.

Return the minimum cost of connecting all the given sticks into one stick in this way.


Example 1:
Input: sticks = [2,4,3]
Output: 14
Explanation: You start with sticks = [2,4,3].

1. Combine sticks 2 and 3 for a cost of 2 + 3 = 5. Now you have sticks = [5,4].

2. Combine sticks 5 and 4 for a cost of 5 + 4 = 9. Now you have sticks = [9].

There is only one stick left, so you are done. The total cost is 5 + 9 = 14.


Example 2:
Input: sticks = [1,8,3,5]
Output: 30
Explanation: You start with sticks = [1,8,3,5].

1. Combine sticks 1 and 3 for a cost of 1 + 3 = 4. Now you have sticks = [4,8,5].

2. Combine sticks 4 and 5 for a cost of 4 + 5 = 9. Now you have sticks = [9,8].

3. Combine sticks 9 and 8 for a cost of 9 + 8 = 17. Now you have sticks = [17].

There is only one stick left, so you are done. The total cost is 4 + 9 + 17 = 30.


Example 3:
Input: sticks = [5]
Output: 0
Explanation: There is only one stick, so you don't need to do anything. The total cost is 0.


Constraints:
`1 <= sticks.length <= 104`
`1 <= sticks[i] <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` houses in a village. We want to supply water for all the houses by building wells and laying pipes.

For each house `i`, we can either build a well inside it directly with cost `wells[i - 1]` (note the `-1` due to 0-indexing), or pipe in water from another well to it. The costs to lay pipes between houses are given by the array `pipes`, where each `pipes[j] = [house1j, house2j, costj]` represents the cost to connect `house1j` and `house2j` together using a pipe. Connections are bidirectional.

Return the minimum total cost to supply water to all houses.


Example 1:
Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]
Output: 3
Explanation: 
The image shows the costs of connecting houses using pipes.

The best strategy is to build a well in the first house with cost 1 and connect the other houses to it with cost 2 so the total cost is 3.


Constraints:
`1 <= n <= 104`
`wells.length == n`
`0 <= wells[i] <= 105`
`1 <= pipes.length <= 104`
`pipes[j].length == 3`
`1 <= house1j, house2j <= n`
`0 <= costj <= 105`
`house1j != house2j`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A transaction is possibly invalid if:
the amount exceeds `$1000`, or;
if it occurs within (and including) `60` minutes of another transaction with the same name in a different city.

You are given an array of strings `transaction` where `transactions[i]` consists of comma-separated values representing the name, time (in minutes), amount, and city of the transaction.

Return a list of `transactions` that are possibly invalid. You may return the answer in any order.


Example 1:
Input: transactions = [""alice,20,800,mtv"",""alice,50,100,beijing""]
Output: [""alice,20,800,mtv"",""alice,50,100,beijing""]
Explanation: The first transaction is invalid because the second transaction occurs within a difference of 60 minutes, have the same name and is in a different city. Similarly the second one is invalid too.


Example 2:
Input: transactions = [""alice,20,800,mtv"",""alice,50,1200,mtv""]
Output: [""alice,50,1200,mtv""]

Example 3:
Input: transactions = [""alice,20,800,mtv"",""bob,50,1200,mtv""]
Output: [""bob,50,1200,mtv""]

Constraints:
`transactions.length <= 1000`
Each `transactions[i]` takes the form `""{name},{time},{amount},{city}""`
Each `{name}` and `{city}` consist of lowercase English letters, and have lengths between `1` and `10`.

Each `{time}` consist of digits, and represent an integer between `0` and `1000`.

Each `{amount}` consist of digits, and represent an integer between `0` and `2000`.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let the function `f(s)` be the frequency of the lexicographically smallest character in a non-empty string `s`. For example, if `s = ""dcce""` then `f(s) = 2` because the lexicographically smallest character is `'c'`, which has a frequency of 2.

You are given an array of strings `words` and another array of query strings `queries`. For each query `queries[i]`, count the number of words in `words` such that `f(queries[i])` < `f(W)` for each `W` in `words`.

Return an integer array `answer`, where each `answer[i]` is the answer to the `ith` query.


Example 1:
Input: queries = [""cbd""], words = [""zaaaz""]
Output: [1]
Explanation: On the first query we have f(""cbd"") = 1, f(""zaaaz"") = 3 so f(""cbd"") < f(""zaaaz"").


Example 2:
Input: queries = [""bbb"",""cc""], words = [""a"",""aa"",""aaa"",""aaaa""]
Output: [1,2]
Explanation: On the first query only f(""bbb"") < f(""aaaa""). On the second query both f(""aaa"") and f(""aaaa"") are both > f(""cc"").


Constraints:
`1 <= queries.length <= 2000`
`1 <= words.length <= 2000`
`1 <= queries[i].length, words[i].length <= 10`
`queries[i][j]`, `words[i][j]` consist of lowercase English letters.",1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a linked list, we repeatedly delete consecutive sequences of nodes that sum to `0` until there are no such sequences.

After doing so, return the head of the final linked list.  You may return any such answer.

(Note that in the examples below, all sequences are serializations of `ListNode` objects.)

Example 1:
Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: The answer [1,2,1] would also be accepted.


Example 2:
Input: head = [1,2,3,-3,4]
Output: [1,2,4]

Example 3:
Input: head = [1,2,3,-3,-2]
Output: [1]

Constraints:
The given linked list will contain between `1` and `1000` nodes.

Each node in the linked list has `-1000 <= node.val <= 1000`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an infinite number of stacks arranged in a row and numbered (left to right) from 0, each of the stacks has the same maximum `capacity`.

Implement the `DinnerPlates` class:
`DinnerPlates(int capacity)` Initializes the object with the maximum `capacity` of the stacks.

`void push(int val)` Pushes the given positive integer `val` into the leftmost stack with size less than `capacity`.

`int pop()` Returns the value at the top of the rightmost non-empty stack and removes it from that stack, and returns `-1` if all stacks are empty.

`int popAtStack(int index)` Returns the value at the top of the stack with the given `index` and removes it from that stack, and returns -1 if the stack with that given `index` is empty.


Example:
Input: 
[""DinnerPlates"",""push"",""push"",""push"",""push"",""push"",""popAtStack"",""push"",""push"",""popAtStack"",""popAtStack"",""pop"",""pop"",""pop"",""pop"",""pop""]
[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[],[],[],[]]
Output: 
[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]
Explanation: 
DinnerPlates D = DinnerPlates(2);  // Initialize with capacity = 2
D.push(1);
D.push(2);
D.push(3);
D.push(4);
D.push(5);         // The stacks are now:  2  4
                                           1  3  5
                                           ] ] ]
D.popAtStack(0);   // Returns 2.  The stacks are now:     4
                                                       1  3  5
                                                       ] ] ]
D.push(20);        // The stacks are now: 20  4
                                           1  3  5
                                           ] ] ]
D.push(21);        // The stacks are now: 20  4 21
                                           1  3  5
                                           ] ] ]
D.popAtStack(0);   // Returns 20.  The stacks are now:     4 21
                                                        1  3  5
                                                        ] ] ]
D.popAtStack(2);   // Returns 21.  The stacks are now:     4
                                                        1  3  5
                                                        ] ] ] 
D.pop()            // Returns 5.  The stacks are now:      4
                                                        1  3 
                                                        ] ]  
D.pop()            // Returns 4.  The stacks are now:   1  3 
                                                        ] ]   
D.pop()            // Returns 3.  The stacks are now:   1 
                                                        ]   
D.pop()            // Returns 1.  There are no stacks.

D.pop()            // Returns -1.  There are still no stacks.


Constraints:
`1 <= capacity <= 20000`
`1 <= val <= 20000`
`0 <= index <= 100000`
At most `200000` calls will be made to `push`, `pop`, and `popAtStack`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)
(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)
Since the answer may be large, return the answer modulo `10^9 + 7`.


Example 1:
Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not because the prime number 5 is at index 1.


Example 2:
Input: n = 100
Output: 682289015

Constraints:
`1 <= n <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A dieter consumes `calories[i]` calories on the `i`-th day. 
Given an integer `k`, for every consecutive sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 <= i <= n-k`), they look at T, the total calories consumed during that sequence of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k-1]`):
If `T < lower`, they performed poorly on their diet and lose 1 point; 
If `T > upper`, they performed well on their diet and gain 1 point;
Otherwise, they performed normally and there is no change in points.

Initially, the dieter has zero points. Return the total number of points the dieter has after dieting for `calories.length` days.

Note that the total points can be negative.


Example 1:
Input: calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3
Output: 0
Explanation: Since k = 1, we consider each element of the array separately and compare it to lower and upper.

calories[0] and calories[1] are less than lower so 2 points are lost.

calories[3] and calories[4] are greater than upper so 2 points are gained.


Example 2:
Input: calories = [3,2], k = 2, lower = 0, upper = 1
Output: 1
Explanation: Since k = 2, we consider subarrays of length 2.

calories[0] + calories[1] > upper so 1 point is gained.


Example 3:
Input: calories = [6,5,0,0], k = 2, lower = 1, upper = 5
Output: 0
Explanation:
calories[0] + calories[1] > upper so 1 point is gained.

lower <= calories[1] + calories[2] <= upper so no change in points.

calories[2] + calories[3] < lower so 1 point is lost.


Constraints:
`1 <= k <= calories.length <= 10^5`
`0 <= calories[i] <= 20000`
`0 <= lower <= upper`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, we make queries on substrings of `s`.

For each query `queries[i] = [left, right, k]`, we may rearrange the substring `s[left], ..., s[right]`, and then choose up to `k` of them to replace with any lowercase English letter. 
If the substring is possible to be a palindrome string after the operations above, the result of the query is `true`. Otherwise, the result is `false`.

Return an array `answer[]`, where `answer[i]` is the result of the `i`-th query `queries[i]`.

Note that: Each letter is counted individually for replacement so if for example `s[left..right] = ""aaa""`, and `k = 2`, we can only replace two of the letters.  (Also, note that the initial string `s` is never modified by any query.)

Example :
Input: s = ""abcda"", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1]]
Output: [true,false,false,true,true]
Explanation:
queries[0] : substring = ""d"", is palidrome.

queries[1] : substring = ""bc"", is not palidrome.

queries[2] : substring = ""abcd"", is not palidrome after replacing only 1 character.

queries[3] : substring = ""abcd"", could be changed to ""abba"" which is palidrome. Also this can be changed to ""baab"" first rearrange it ""bacd"" then replace ""cd"" with ""ab"".

queries[4] : substring = ""abcda"", could be changed to ""abcba"" which is palidrome.


Constraints:
`1 <= s.length, queries.length <= 10^5`
`0 <= queries[i][0] <= queries[i][1] < s.length`
`0 <= queries[i][2] <= s.length`
`s` only contains lowercase English letters.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"With respect to a given `puzzle` string, a `word` is valid if both the following conditions are satisfied:
`word` contains the first letter of `puzzle`.

For each letter in `word`, that letter is in `puzzle`.

	For example, if the puzzle is ""abcdefg"", then valid words are ""faced"", ""cabbage"", and ""baggage""; while invalid words are ""beefed"" (doesn't include ""a"") and ""based"" (includes ""s"" which isn't in the puzzle).

Return an array `answer`, where `answer[i]` is the number of words in the given word list `words` that are valid with respect to the puzzle `puzzles[i]`.


Example :
Input: 
words = [""aaaa"",""asas"",""able"",""ability"",""actt"",""actor"",""access""], 
puzzles = [""aboveyz"",""abrodyz"",""abslute"",""absoryz"",""actresz"",""gaswxyz""]
Output: [1,1,3,2,4,0]
Explanation:
1 valid word for ""aboveyz"" : ""aaaa"" 
1 valid word for ""abrodyz"" : ""aaaa""
3 valid words for ""abslute"" : ""aaaa"", ""asas"", ""able""
2 valid words for ""absoryz"" : ""aaaa"", ""asas""
4 valid words for ""actresz"" : ""aaaa"", ""asas"", ""actt"", ""access""
There're no valid words for ""gaswxyz"" cause none of the words in the list contains letter 'g'.


Constraints:
`1 <= words.length <= 10^5`
`4 <= words[i].length <= 50`
`1 <= puzzles.length <= 10^4`
`puzzles[i].length == 7`
`words[i][j]`, `puzzles[i][j]` are English lowercase letters.

Each `puzzles[i] `doesn't contain repeated characters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S`, return the number of substrings that have only one distinct letter.


Example 1:
Input: S = ""aaaba""
Output: 8
Explanation: The substrings with one distinct letter are ""aaa"", ""aa"", ""a"", ""b"".

""aaa"" occurs 1 time.

""aa"" occurs 2 times.

""a"" occurs 4 times.

""b"" occurs 1 time.

So the answer is 1 + 2 + 4 + 1 = 8.


Example 2:
Input: S = ""aaaaaaaaaa""
Output: 55

Constraints:
`1 <= S.length <= 1000`
`S[i]` consists of only lowercase English letters.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of `phrases`, generate a list of Before and After puzzles.

A phrase is a string that consists of lowercase English letters and spaces only. No space appears in the start or the end of a phrase. There are no consecutive spaces in a phrase.

Before and After puzzles are phrases that are formed by merging two phrases where the last word of the first phrase is the same as the first word of the second phrase.

Return the Before and After puzzles that can be formed by every two phrases `phrases[i]` and `phrases[j]` where `i != j`. Note that the order of matching two phrases matters, we want to consider both orders.

You should return a list of distinct strings sorted lexicographically.


Example 1:
Input: phrases = [""writing code"",""code rocks""]
Output: [""writing code rocks""]

Example 2:
Input: phrases = [""mission statement"",
                  ""a quick bite to eat"",
                  ""a chip off the old block"",
                  ""chocolate bar"",
                  ""mission impossible"",
                  ""a man on a mission"",
                  ""block party"",
                  ""eat my words"",
                  ""bar of soap""]
Output: [""a chip off the old block party"",
         ""a man on a mission impossible"",
         ""a man on a mission statement"",
         ""a quick bite to eat my words"",
         ""chocolate bar of soap""]

Example 3:
Input: phrases = [""a"",""b"",""a""]
Output: [""a""]

Constraints:
`1 <= phrases.length <= 100`
`1 <= phrases[i].length <= 100`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `colors`, in which there are three colors: `1`, `2` and `3`.

You are also given some queries. Each query consists of two integers `i` and `c`, return the shortest distance between the given index `i` and the target color `c`. If there is no solution return `-1`.


Example 1:
Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
Explanation: 
The nearest 3 from index 1 is at index 4 (3 steps away).

The nearest 2 from index 2 is at index 2 itself (0 steps away).

The nearest 1 from index 6 is at index 3 (3 steps away).


Example 2:
Input: colors = [1,2], queries = [[0,3]]
Output: [-1]
Explanation: There is no 3 in the array.


Constraints:
`1 <= colors.length <= 5*10^4`
`1 <= colors[i] <= 3`
`1 <= queries.length <= 5*10^4`
`queries[i].length == 2`
`0 <= queries[i][0] < colors.length`
`1 <= queries[i][1] <= 3`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Consider a matrix `M` with dimensions `width * height`, such that every cell has value `0` or `1`, and any square sub-matrix of `M` of size `sideLength * sideLength` has at most `maxOnes` ones.

Return the maximum possible number of ones that the matrix `M` can have.


Example 1:
Input: width = 3, height = 3, sideLength = 2, maxOnes = 1
Output: 4
Explanation:
In a 3*3 matrix, no 2*2 sub-matrix can have more than 1 one.

The best solution that has 4 ones is:
[1,0,1]
[0,0,0]
[1,0,1]

Example 2:
Input: width = 3, height = 3, sideLength = 2, maxOnes = 2
Output: 6
Explanation:
[1,0,1]
[1,0,1]
[1,0,1]

Constraints:
`1 <= width, height <= 100`
`1 <= sideLength <= width, height`
`0 <= maxOnes <= sideLength * sideLength`",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`.

The bus goes along both directions i.e. clockwise and counterclockwise.

Return the shortest distance between the given `start` and `destination` stops.


Example 1:
Input: distance = [1,2,3,4], start = 0, destination = 1
Output: 1
Explanation: Distance between 0 and 1 is 1 or 9, minimum is 1.


Example 2:
Input: distance = [1,2,3,4], start = 0, destination = 2
Output: 3
Explanation: Distance between 0 and 2 is 3 or 7, minimum is 3.


Example 3:
Input: distance = [1,2,3,4], start = 0, destination = 3
Output: 4
Explanation: Distance between 0 and 3 is 6 or 4, minimum is 4.


Constraints:
`1 <= n <= 10^4`
`distance.length == n`
`0 <= start, destination < n`
`0 <= distance[i] <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a date, return the corresponding day of the week for that date.

The input is given as three integers representing the `day`, `month` and `year` respectively.

Return the answer as one of the following values `{""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""}`.


Example 1:
Input: day = 31, month = 8, year = 2019
Output: ""Saturday""

Example 2:
Input: day = 18, month = 7, year = 1999
Output: ""Sunday""

Example 3:
Input: day = 15, month = 8, year = 1993
Output: ""Sunday""

Constraints:
The given dates are valid dates between the years `1971` and `2100`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.

Note that the subarray needs to be non-empty after deleting one element.


Example 1:
Input: arr = [1,-2,0,3]
Output: 4
Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.


Example 2:
Input: arr = [1,-2,-2,3]
Output: 3
Explanation: We just choose [3] and it's the maximum sum.


Example 3:
Input: arr = [-1,-1,-1,-1]
Output: -1
Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.


Constraints:
`1 <= arr.length <= 105`
`-104 <= arr[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `text`, you want to use the characters of `text` to form as many instances of the word ""balloon"" as possible.

You can use each character in `text` at most once. Return the maximum number of instances that can be formed.


Example 1:
Input: text = ""nlaebolko""
Output: 1

Example 2:
Input: text = ""loonbalxballpoon""
Output: 2

Example 3:
Input: text = ""leetcode""
Output: 0

Constraints:
`1 <= text.length <= 10^4`
`text` consists of lower case English letters only.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` that consists of lower case English letters and brackets. 
Reverse the strings in each pair of matching parentheses, starting from the innermost one.

Your result should not contain any brackets.


Example 1:
Input: s = ""(abcd)""
Output: ""dcba""

Example 2:
Input: s = ""(u(love)i)""
Output: ""iloveu""
Explanation: The substring ""love"" is reversed first, then the whole string is reversed.


Example 3:
Input: s = ""(ed(et(oc))el)""
Output: ""leetcode""
Explanation: First, we reverse the substring ""oc"", then ""etco"", and finally, the whole string.


Example 4:
Input: s = ""a(bcdefghijkl(mno)p)q""
Output: ""apmnolkjihgfedcbq""

Constraints:
`0 <= s.length <= 2000`
`s` only contains lower case English characters and parentheses.

It's guaranteed that all parentheses are balanced.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr` and an integer `k`, modify the array by repeating it `k` times.

For example, if `arr = [1, 2]` and `k = 3 `then the modified array will be `[1, 2, 1, 2, 1, 2]`.

Return the maximum sub-array sum in the modified array. Note that the length of the sub-array can be `0` and its sum in that case is `0`.

As the answer can be very large, return the answer modulo `109 + 7`.


Example 1:
Input: arr = [1,2], k = 3
Output: 9

Example 2:
Input: arr = [1,-2,1], k = 5
Output: 2

Example 3:
Input: arr = [-1,-2], k = 7
Output: 0

Constraints:
`1 <= arr.length <= 105`
`1 <= k <= 105`
`-104 <= arr[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` servers numbered from `0` to `n-1` connected by undirected server-to-server `connections` forming a network where `connections[i] = [a, b]` represents a connection between servers `a` and `b`. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, will make some server unable to reach some other server.

Return all critical connections in the network in any order.


Example 1:
Input: n = 4, connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.


Constraints:
`1 <= n <= 10^5`
`n-1 <= connections.length <= 10^5`
`connections[i][0] != connections[i][1]`
There are no repeated connections.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have some apples, where `arr[i]` is the weight of the `i`-th apple.  You also have a basket that can carry up to `5000` units of weight.

Return the maximum number of apples you can put in the basket.


Example 1:
Input: arr = [100,200,150,1000]
Output: 4
Explanation: All 4 apples can be carried by the basket since their sum of weights is 1450.


Example 2:
Input: arr = [900,950,800,1000,700,800]
Output: 5
Explanation: The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.


Constraints:
`1 <= arr.length <= 10^3`
`1 <= arr[i] <= 10^3`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an infinite chess board with coordinates from `-infinity` to `+infinity`, you have a knight at square `[0, 0]`.

A knight has 8 possible moves it can make, as illustrated below. Each move is two squares in a cardinal direction, then one square in an orthogonal direction.

Return the minimum number of steps needed to move the knight to the square `[x, y]`.  It is guaranteed the answer exists.


Example 1:
Input: x = 2, y = 1
Output: 1
Explanation: [0, 0] → [2, 1]

Example 2:
Input: x = 5, y = 5
Output: 4
Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]

Constraints:
`|x| + |y| <= 300`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` matrix `mat` where every row is sorted in strictly increasing order, return the smallest common element in all rows.

If there is no common element, return `-1`.


Example 1:
Input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7,9]]
Output: 5

Example 2:
Input: mat = [[1,2,3],[2,3,4],[2,3,5]]
Output: 2

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= m, n <= 500`
`1 <= mat[i][j] <= 104`
`mat[i]` is sorted in strictly increasing order.",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a list of blocks, where `blocks[i] = t` means that the `i`-th block needs `t` units of time to be built. A block can only be built by exactly one worker.

A worker can either split into two workers (number of workers increases by one) or build a block then go home. Both decisions cost some time.

The time cost of spliting one worker into two workers is given as an integer `split`. Note that if two workers split at the same time, they split in parallel so the cost would be `split`.

Output the minimum time needed to build all blocks.
Initially, there is only one worker.


Example 1:
Input: blocks = [1], split = 1
Output: 1
Explanation: We use 1 worker to build 1 block in 1 time unit.


Example 2:
Input: blocks = [1,2], split = 5
Output: 7
Explanation: We split the worker into 2 workers in 5 time units then assign each of them to a block so the cost is 5 + max(1, 2) = 7.


Example 3:
Input: blocks = [1,2,3], split = 1
Output: 4
Explanation: Split 1 worker into 2, then assign the first worker to the last block and split the second worker into 2.

Then, use the two unassigned workers to build the first two blocks.

The cost is 1 + max(3, 1 + max(1, 2)) = 4.


Constraints:
`1 <= blocks.length <= 1000`
`1 <= blocks[i] <= 10^5`
`1 <= split <= 100`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of distinct integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements. 
Return a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows
`a, b` are from `arr`
`a < b`
`b - a` equals to the minimum absolute difference of any two elements in `arr`

Example 1:
Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.


Example 2:
Input: arr = [1,3,6,10,15]
Output: [[1,3]]

Example 3:
Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]

Constraints:
`2 <= arr.length <= 10^5`
`-10^6 <= arr[i] <= 10^6`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given four integers `n`, `a`, `b`, and `c`, return the `nth` ugly number.

Ugly numbers are positive integers that are divisible by `a`, `b`, or `c`.


Example 1:
Input: n = 3, a = 2, b = 3, c = 5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10... The 3rd is 4.


Example 2:
Input: n = 4, a = 2, b = 3, c = 4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.


Example 3:
Input: n = 5, a = 2, b = 11, c = 13
Output: 10
Explanation: The ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... The 5th is 10.


Example 4:
Input: n = 1000000000, a = 2, b = 217983653, c = 336916467
Output: 1999999984

Constraints:
`1 <= n, a, b, c <= 109`
`1 <= a * b * c <= 1018`
It is guaranteed that the result will be in range `[1, 2 * 109]`.",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s`, and an array of pairs of indices in the string `pairs` where `pairs[i] = [a, b]` indicates 2 indices(0-indexed) of the string.

You can swap the characters at any pair of indices in the given `pairs` any number of times.

Return the lexicographically smallest string that `s` can be changed to after using the swaps.


Example 1:
Input: s = ""dcab"", pairs = [[0,3],[1,2]]
Output: ""bacd""
Explaination: 
Swap s[0] and s[3], s = ""bcad""
Swap s[1] and s[2], s = ""bacd""

Example 2:
Input: s = ""dcab"", pairs = [[0,3],[1,2],[0,2]]
Output: ""abcd""
Explaination: 
Swap s[0] and s[3], s = ""bcad""
Swap s[0] and s[2], s = ""acbd""
Swap s[1] and s[2], s = ""abcd""

Example 3:
Input: s = ""cba"", pairs = [[0,1],[1,2]]
Output: ""abc""
Explaination: 
Swap s[0] and s[1], s = ""bca""
Swap s[1] and s[2], s = ""bac""
Swap s[0] and s[1], s = ""abc""

Constraints:
`1 <= s.length <= 10^5`
`0 <= pairs.length <= 10^5`
`0 <= pairs[i][0], pairs[i][1] < s.length`
`s` only contains lower case English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` items each belonging to zero or one of `m` groups where `group[i]` is the group that the `i`-th item belongs to and it's equal to `-1` if the `i`-th item belongs to no group. The items and the groups are zero indexed. A group can have no item belonging to it.

Return a sorted list of the items such that:
The items that belong to the same group are next to each other in the sorted list.

There are some relations between these items where `beforeItems[i]` is a list containing all the items that should come before the `i`-th item in the sorted array (to the left of the `i`-th item).

Return any solution if there is more than one solution and return an empty list if there is no solution.


Example 1:
Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3,6],[],[],[]]
Output: [6,3,4,1,5,2,0,7]

Example 2:
Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6],[3],[],[4],[]]
Output: []
Explanation: This is the same as example 1 except that 4 needs to be before 6 in the sorted list.


Constraints:
`1 <= m <= n <= 3 * 104`
`group.length == beforeItems.length == n`
`-1 <= group[i] <= m - 1`
`0 <= beforeItems[i].length <= n - 1`
`0 <= beforeItems[i][j] <= n - 1`
`i != beforeItems[i][j]`
`beforeItems[i] `does not contain duplicates elements.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Design a Skiplist without using any built-in libraries.

A Skiplist is a data structure that takes O(log(n)) time to `add`, `erase` and `search`. Comparing with treap and red-black tree which has the same function and performance, the code length of Skiplist can be comparatively short and the idea behind Skiplists are just simple linked lists.

For example: we have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` into it. The Skiplist works this way:
Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons
You can see there are many layers in the Skiplist. Each layer is a sorted linked list. With the help of the top layers, `add` , `erase` and `search `can be faster than O(n). It can be proven that the average time complexity for each operation is O(log(n)) and space complexity is O(n).

To be specific, your design should include these functions:
`bool search(int target)` : Return whether the `target` exists in the Skiplist or not.

`void add(int num)`: Insert a value into the SkipList. 
`bool erase(int num)`: Remove a value in the Skiplist. If `num` does not exist in the Skiplist, do nothing and return false. If there exists multiple `num` values, removing any one of them is fine.

See more about Skiplist : https://en.wikipedia.org/wiki/Skip_list
Note that duplicates may exist in the Skiplist, your code needs to handle this situation.


Example:
Skiplist skiplist = new Skiplist();
skiplist.add(1);
skiplist.add(2);
skiplist.add(3);
skiplist.search(0);   // return false.

skiplist.add(4);
skiplist.search(1);   // return true.

skiplist.erase(0);    // return false, 0 is not in skiplist.

skiplist.erase(1);    // return true.

skiplist.search(1);   // return false, 1 has already been erased.


Constraints:
`0 <= num, target <= 20000`
At most `50000` calls will be made to `search`, `add`, and `erase`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`, write a function that returns `true` if and only if the number of occurrences of each value in the array is unique.


Example 1:
Input: arr = [1,2,2,1,1,3]
Output: true
Explanation: The value 1 has 3 occurrences, 2 has 2 and 3 has 1. No two values have the same number of occurrences.


Example 2:
Input: arr = [1,2]
Output: false

Example 3:
Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
Output: true

Constraints:
`1 <= arr.length <= 1000`
`-1000 <= arr[i] <= 1000`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `s` and `t` of the same length. You want to change `s` to `t`. Changing the `i`-th character of `s` to `i`-th character of `t` costs `|s[i] - t[i]|` that is, the absolute difference between the ASCII values of the characters.

You are also given an integer `maxCost`.

Return the maximum length of a substring of `s` that can be changed to be the same as the corresponding substring of `t`with a cost less than or equal to `maxCost`.

If there is no substring from `s` that can be changed to its corresponding substring from `t`, return `0`.


Example 1:
Input: s = ""abcd"", t = ""bcdf"", maxCost = 3
Output: 3
Explanation: ""abc"" of s can change to ""bcd"". That costs 3, so the maximum length is 3.


Example 2:
Input: s = ""abcd"", t = ""cdef"", maxCost = 3
Output: 1
Explanation: Each character in s costs 2 to change to charactor in `t, so the maximum length is 1.`

Example 3:
Input: s = ""abcd"", t = ""acde"", maxCost = 0
Output: 1
Explanation: You can't make any change, so the maximum length is 1.


Constraints:
`1 <= s.length, t.length <= 10^5`
`0 <= maxCost <= 10^6`
`s` and `t` only contain lower case English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, a k duplicate removal consists of choosing `k` adjacent and equal letters from `s` and removing them causing the left and the right side of the deleted substring to concatenate together.

We repeatedly make `k` duplicate removals on `s` until we no longer can.

Return the final string after all such duplicate removals have been made.

It is guaranteed that the answer is unique.


Example 1:
Input: s = ""abcd"", k = 2
Output: ""abcd""
Explanation: There's nothing to delete.


Example 2:
Input: s = ""deeedbbcccbdaa"", k = 3
Output: ""aa""
Explanation: 
First delete ""eee"" and ""ccc"", get ""ddbbbdaa""
Then delete ""bbb"", get ""dddaa""
Finally delete ""ddd"", get ""aa""

Example 3:
Input: s = ""pbbcggttciiippooaais"", k = 2
Output: ""ps""

Constraints:
`1 <= s.length <= 10^5`
`2 <= k <= 10^4`
`s` only contains lower case English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an `n*n` grid, there is a snake that spans 2 cells and starts moving from the top left corner at `(0, 0)` and `(0, 1)`. The grid has empty cells represented by zeros and blocked cells represented by ones. The snake wants to reach the lower right corner at `(n-1, n-2)` and `(n-1, n-1)`.

In one move the snake can:
Move one cell to the right if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.

Move down one cell if there are no blocked cells there. This move keeps the horizontal/vertical position of the snake as it is.

Rotate clockwise if it's in a horizontal position and the two cells under it are both empty. In that case the snake moves from `(r, c)` and `(r, c+1)` to `(r, c)` and `(r+1, c)`.

Rotate counterclockwise if it's in a vertical position and the two cells to its right are both empty. In that case the snake moves from `(r, c)` and `(r+1, c)` to `(r, c)` and `(r, c+1)`.

Return the minimum number of moves to reach the target.

If there is no way to reach the target, return `-1`.


Example 1:
Input: grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
               [0,0,0,0,1,1],
               [0,0,1,0,1,0],
               [0,1,1,0,0,0],
               [0,1,1,0,0,0]]
Output: 11
Explanation:
One possible solution is [right, right, rotate clockwise, right, down, down, down, down, rotate counterclockwise, right, down].


Example 2:
Input: grid = [[0,0,1,1,1,1],
               [0,0,0,0,1,1],
               [1,1,0,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,0]]
Output: 9

Constraints:
`2 <= n <= 100`
`0 <= grid[i][j] <= 1`
It is guaranteed that the snake starts at empty cells.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given three integer arrays `arr1`, `arr2` and `arr3` sorted in strictly increasing order, return a sorted array of only the integers that appeared in all three arrays.


Example 1:
Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
Output: [1,5]
Explanation: Only 1 and 5 appeared in the three arrays.


Example 2:
Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]
Output: []

Constraints:
`1 <= arr1.length, arr2.length, arr3.length <= 1000`
`1 <= arr1[i], arr2[i], arr3[i] <= 2000`",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the roots of two binary search trees, `root1` and `root2`, return `true` if and only if there is a node in the first tree and a node in the second tree whose values sum up to a given integer `target`.


Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3], target = 5
Output: true
Explanation: 2 and 3 sum up to 5.


Example 2:
Input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18
Output: false

Constraints:
The number of nodes in each tree is in the range `[1, 5000]`.

`-109 <= Node.val, target <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"A Stepping Number is an integer such that all of its adjacent digits have an absolute difference of exactly `1`. For example, `321` is a Stepping Number while `421` is not.

Given two integers `low` and `high`, find and return a sorted list of all the Stepping Numbers in the range `[low, high]` inclusive.


Example 1:
Input: low = 0, high = 21
Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]

Constraints:
`0 <= low <= high <= 2 * 10^9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer `k`, return `true` if `s` is a `k`-palindrome.

A string is `k`-palindrome if it can be transformed into a palindrome by removing at most `k` characters from it.


Example 1:
Input: s = ""abcdeca"", k = 2
Output: true
Explanation: Remove 'b' and 'e' characters.


Example 2:
Input: s = ""abbababa"", k = 1
Output: true

Constraints:
`1 <= s.length <= 1000`
`s` consists of only lowercase English letters.

`1 <= k <= s.length`",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` chips, where the position of the `ith` chip is `position[i]`.

We need to move all the chips to the same position. In one step, we can change the position of the `ith` chip from `position[i]` to:
`position[i] + 2` or `position[i] - 2` with `cost = 0`.

`position[i] + 1` or `position[i] - 1` with `cost = 1`.

Return the minimum cost needed to move all the chips to the same position.


Example 1:
Input: position = [1,2,3]
Output: 1
Explanation: First step: Move the chip at position 3 to position 1 with cost = 0.

Second step: Move the chip at position 2 to position 1 with cost = 1.

Total cost is 1.


Example 2:
Input: position = [2,2,2,3,3]
Output: 2
Explanation: We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.


Example 3:
Input: position = [1,1000000000]
Output: 1

Constraints:
`1 <= position.length <= 100`
`1 <= position[i] <= 10^9`",1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr` and an integer `difference`, return the length of the longest subsequence in `arr` which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals `difference`.

A subsequence is a sequence that can be derived from `arr` by deleting some or no elements without changing the order of the remaining elements.


Example 1:
Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].


Example 2:
Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.


Example 3:
Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].


Constraints:
`1 <= arr.length <= 105`
`-104 <= arr[i], difference <= 104`",0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a gold mine `grid` of size `m x n`, each cell in this mine has an integer representing the amount of gold in that cell, `0` if it is empty.

Return the maximum amount of gold you can collect under the conditions:
Every time you are located in a cell you will collect all the gold in that cell.

From your position, you can walk one step to the left, right, up, or down.

You can't visit the same cell more than once.

Never visit a cell with `0` gold.

You can start and stop collecting gold from any position in the grid that has some gold.


Example 1:
Input: grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
Explanation:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
Path to get the maximum gold, 9 -> 8 -> 7.


Example 2:
Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
Explanation:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 15`
`0 <= grid[i][j] <= 100`
There are at most 25 cells containing gold.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, your task is to count how many strings of length `n` can be formed under the following rules:
Each character is a lower case vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)
Each vowel `'a'` may only be followed by an `'e'`.

Each vowel `'e'` may only be followed by an `'a'` or an `'i'`.

Each vowel `'i'` may not be followed by another `'i'`.

Each vowel `'o'` may only be followed by an `'i'` or a `'u'`.

Each vowel `'u'` may only be followed by an `'a'.`
Since the answer may be too large, return it modulo `10^9 + 7.`

Example 1:
Input: n = 1
Output: 5
Explanation: All possible strings are: ""a"", ""e"", ""i"" , ""o"" and ""u"".


Example 2:
Input: n = 2
Output: 10
Explanation: All possible strings are: ""ae"", ""ea"", ""ei"", ""ia"", ""ie"", ""io"", ""iu"", ""oi"", ""ou"" and ""ua"".


Example 3: 
Input: n = 5
Output: 68

Constraints:
`1 <= n <= 2 * 10^4`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Balanced strings are those that have an equal quantity of `'L'` and `'R'` characters.

Given a balanced string `s`, split it in the maximum amount of balanced strings.

Return the maximum amount of split balanced strings.


Example 1:
Input: s = ""RLRRLLRLRL""
Output: 4
Explanation: s can be split into ""RL"", ""RRLL"", ""RL"", ""RL"", each substring contains same number of 'L' and 'R'.


Example 2:
Input: s = ""RLLLLRRRLR""
Output: 3
Explanation: s can be split into ""RL"", ""LLLRRR"", ""LR"", each substring contains same number of 'L' and 'R'.


Example 3:
Input: s = ""LLLLRRRR""
Output: 1
Explanation: s can be split into ""LLLLRRRR"".


Example 4:
Input: s = ""RLRRRLLRLL""
Output: 2
Explanation: s can be split into ""RL"", ""RRRLLRLL"", since each substring contains an equal number of 'L' and 'R'

Constraints:
`1 <= s.length <= 1000`
`s[i]` is either `'L'` or `'R'`.

`s` is a balanced string.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an 8x8 chessboard, there can be multiple Black Queens and one White King.

Given an array of integer coordinates `queens` that represents the positions of the Black Queens, and a pair of coordinates `king` that represent the position of the White King, return the coordinates of all the queens (in any order) that can attack the King.


Example 1:
Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
Output: [[0,1],[1,0],[3,3]]
Explanation:  
The queen at [0,1] can attack the king cause they're in the same row. 
The queen at [1,0] can attack the king cause they're in the same column. 
The queen at [3,3] can attack the king cause they're in the same diagnal. 
The queen at [0,4] can't attack the king cause it's blocked by the queen at [0,1]. 
The queen at [4,0] can't attack the king cause it's blocked by the queen at [1,0]. 
The queen at [2,4] can't attack the king cause it's not in the same row/column/diagnal as the king.


Example 2:
Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
Output: [[2,2],[3,4],[4,4]]

Example 3:
Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0,3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4],[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4,3],[1,7]], king = [3,4]
Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]

Constraints:
`1 <= queens.length <= 63`
`queens[i].length == 2`
`0 <= queens[i][j] < 8`
`king.length == 2`
`0 <= king[0], king[1] < 8`
At most one piece is allowed in a cell.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A die simulator generates a random number from 1 to 6 for each roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (1-indexed) consecutive times. 
Given an array of integers `rollMax` and an integer `n`, return the number of distinct sequences that can be obtained with exact `n` rolls.

Two sequences are considered different if at least one element differs from each other. Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: n = 2, rollMax = [1,1,2,2,2,3]
Output: 34
Explanation: There will be 2 rolls of die, if there are no constraints on the die, there are 6 * 6 = 36 possible combinations. In this case, looking at rollMax array, the numbers 1 and 2 appear at most once consecutively, therefore sequences (1,1) and (2,2) cannot occur, so the final answer is 36-2 = 34.


Example 2:
Input: n = 2, rollMax = [1,1,1,1,1,1]
Output: 30

Example 3:
Input: n = 3, rollMax = [1,1,1,2,2,3]
Output: 181

Constraints:
`1 <= n <= 5000`
`rollMax.length == 6`
`1 <= rollMax[i] <= 15`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of positive integers, return the longest possible length of an array prefix of `nums`, such that it is possible to remove exactly one element from this prefix so that every number that has appeared in it will have the same number of occurrences.

If after removing one element there are no remaining elements, it's still considered that every appeared number has the same number of ocurrences (0).


Example 1:
Input: nums = [2,2,1,1,5,3,3,5]
Output: 7
Explanation: For the subarray [2,2,1,1,5,3,3] of length 7, if we remove nums[4]=5, we will get [2,2,1,1,3,3], so that each number will appear exactly twice.


Example 2:
Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]
Output: 13

Example 3:
Input: nums = [1,1,1,2,2,2]
Output: 5

Example 4:
Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]
Output: 8

Constraints:
`2 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^5`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"n` passengers board an airplane with exactly n` seats. The first passenger has lost the ticket and picks a seat randomly. But after that, the rest of passengers will:
Take their own seat if it is still available, 
Pick other seats randomly when they find their seat occupied 
What is the probability that the n-th person can get his own seat?

Example 1:
Input: n = 1
Output: 1.00000
Explanation: The first person can only get the first seat.


Example 2:
Input: n = 2
Output: 0.50000
Explanation: The second person has a probability of 0.5 to get the second seat (when first person gets the first seat).


Constraints:
`1 <= n <= 10^5`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"In some array `arr`, the values were in arithmetic progression: the values `arr[i+1] - arr[i]` are all equal for every `0 <= i < arr.length - 1`.

Then, a value from `arr` was removed that was not the first or last value in the array.

Return the removed value.


Example 1:
Input: arr = [5,7,11,13]
Output: 9
Explanation: The previous array was [5,7,9,11,13].


Example 2:
Input: arr = [15,13,12]
Output: 14
Explanation: The previous array was [15,14,13,12].


Constraints:
`3 <= arr.length <= 1000`
`0 <= arr[i] <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the availability time slots arrays `slots1` and `slots2` of two people and a meeting duration `duration`, return the earliest time slot that works for both of them and is of duration `duration`.

If there is no common time slot that satisfies the requirements, return an empty array.

The format of a time slot is an array of two elements `[start, end]` representing an inclusive time range from `start` to `end`.

It is guaranteed that no two availability slots of the same person intersect with each other. That is, for any two time slots `[start1, end1]` and `[start2, end2]` of the same person, either `start1 > end2` or `start2 > end1`.


Example 1:
Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8
Output: [60,68]

Example 2:
Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12
Output: []

Constraints:
`1 <= slots1.length, slots2.length <= 104`
`slots1[i].length, slots2[i].length == 2`
`slots1[i][0] < slots1[i][1]`
`slots2[i][0] < slots2[i][1]`
`0 <= slots1[i][j], slots2[i][j] <= 109`
`1 <= duration <= 106`",0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"You have some coins.  The `i`-th coin has a probability `prob[i]` of facing heads when tossed.

Return the probability that the number of coins facing heads equals `target` if you toss every coin exactly once.


Example 1:
Input: prob = [0.4], target = 1
Output: 0.40000

Example 2:
Input: prob = [0.5,0.5,0.5,0.5,0.5], target = 0
Output: 0.03125

Constraints:
`1 <= prob.length <= 1000`
`0 <= prob[i] <= 1`
`0 <= target ``<= prob.length`
Answers will be accepted as correct if they are within `10^-5` of the correct answer.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have one chocolate bar that consists of some chunks. Each chunk has its own sweetness given by the array `sweetness`.

You want to share the chocolate with your `K` friends so you start cutting the chocolate bar into `K+1` pieces using `K` cuts, each piece consists of some consecutive chunks.

Being generous, you will eat the piece with the minimum total sweetness and give the other pieces to your friends.

Find the maximum total sweetness of the piece you can get by cutting the chocolate bar optimally.


Example 1:
Input: sweetness = [1,2,3,4,5,6,7,8,9], K = 5
Output: 6
Explanation: You can divide the chocolate to [1,2,3], [4,5], [6], [7], [8], [9]

Example 2:
Input: sweetness = [5,6,7,8,9,1,2,3,4], K = 8
Output: 1
Explanation: There is only one way to cut the bar into 9 pieces.


Example 3:
Input: sweetness = [1,2,2,1,2,2,1,2,2], K = 2
Output: 5
Explanation: You can divide the chocolate to [1,2,2], [1,2,2], [1,2,2]

Constraints:
`0 <= K < sweetness.length <= 10^4`
`1 <= sweetness[i] <= 10^5`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.


Example 1:
Input: coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
Output: true

Example 2:
Input: coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
Output: false

Constraints:
`2 <= coordinates.length <= 1000`
`coordinates[i].length == 2`
`-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`
`coordinates` contains no duplicate point.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of folders, remove all sub-folders in those folders and return in any order the folders after removing.

If a `folder[i]` is located within another `folder[j]`, it is called a sub-folder of it.

The format of a path is one or more concatenated strings of the form: `/` followed by one or more lowercase English letters. For example, `/leetcode` and `/leetcode/problems` are valid paths while an empty string and `/` are not.


Example 1:
Input: folder = [""/a"",""/a/b"",""/c/d"",""/c/d/e"",""/c/f""]
Output: [""/a"",""/c/d"",""/c/f""]
Explanation: Folders ""/a/b/"" is a subfolder of ""/a"" and ""/c/d/e"" is inside of folder ""/c/d"" in our filesystem.


Example 2:
Input: folder = [""/a"",""/a/b/c"",""/a/b/d""]
Output: [""/a""]
Explanation: Folders ""/a/b/c"" and ""/a/b/d/"" will be removed because they are subfolders of ""/a"".


Example 3:
Input: folder = [""/a/b/c"",""/a/b/ca"",""/a/b/d""]
Output: [""/a/b/c"",""/a/b/ca"",""/a/b/d""]

Constraints:
`1 <= folder.length <= 4 * 10^4`
`2 <= folder[i].length <= 100`
`folder[i]` contains only lowercase letters and '/'
`folder[i]` always starts with character '/'
Each folder name is unique.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string containing only 4 kinds of characters `'Q',` `'W', 'E'` and `'R'`.

A string is said to be balanced if each of its characters appears `n/4` times where `n` is the length of the string.

Return the minimum length of the substring that can be replaced with any other string of the same length to make the original string `s` balanced.

Return 0 if the string is already balanced.


Example 1:
Input: s = ""QWER""
Output: 0
Explanation: s is already balanced.


Example 2:
Input: s = ""QQWE""
Output: 1
Explanation: We need to replace a 'Q' to 'R', so that ""RQWE"" (or ""QRWE"") is balanced.


Example 3:
Input: s = ""QQQW""
Output: 2
Explanation: We can replace the first ""QQ"" to ""ER"". 

Example 4:
Input: s = ""QQQQ""
Output: 3
Explanation: We can replace the last 3 'Q' to make s = ""QWER"".


Constraints:
`1 <= s.length <= 10^5`
`s.length` is a multiple of `4`
`s `contains only `'Q'`, `'W'`, `'E'` and `'R'`.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` jobs, where every job is scheduled to be done from `startTime[i]` to `endTime[i]`, obtaining a profit of `profit[i]`.

You're given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time `X` you will be able to start another job that starts at time `X`.


Example 1:
Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70.


Example 2:
Input: startTime = [1,2,3,4,6], endTime = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The subset chosen is the first, fourth and fifth job. 
Profit obtained 150 = 20 + 70 + 60.


Example 3:
Input: startTime = [1,1,1], endTime = [2,3,4], profit = [5,6,4]
Output: 6

Constraints:
`1 <= startTime.length == endTime.length == profit.length <= 5 * 104`
`1 <= startTime[i] < endTime[i] <= 109`
`1 <= profit[i] <= 104`",0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links that are under the same hostname as `startUrl`. 
Return all urls obtained by your web crawler in any order.

Your crawler should:
Start from the page: `startUrl`
Call `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.

Do not crawl the same link twice.

Explore only the links that are under the same hostname as `startUrl`.

As shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.

The `HtmlParser` interface is defined as such: 
interface HtmlParser {
  // Return a list of all urls from a webpage of given url.

  public List<String> getUrls(String url);
}
Below are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.


Example 1:
Input:
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com"",
  ""http://news.yahoo.com/us""
]
edges = [[2,0],[2,1],[3,2],[3,1],[0,4]]
startUrl = ""http://news.yahoo.com/news/topics/""
Output: [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.yahoo.com/us""
]

Example 2:
Input: 
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com""
]
edges = [[0,2],[2,1],[3,2],[3,1],[3,0]]
startUrl = ""http://news.google.com""
Output: [""http://news.google.com""]
Explanation: The startUrl links to all other pages that do not share the same hostname.


Constraints:
`1 <= urls.length <= 1000`
`1 <= urls[i].length <= 300`
`startUrl` is one of the `urls`.

Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits  from '0' to '9' and the hyphen-minus character ('-').

The hostname may not start or end with the hyphen-minus character ('-'). 
See:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
You may assume there're no duplicates in url library.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a callable function `f(x, y)` with a hidden formula and a value `z`, reverse engineer the formula and return all positive integer pairs `x` and `y` where `f(x,y) == z`. You may return the pairs in any order.

While the exact formula is hidden, the function is monotonically increasing, i.e.:
`f(x, y) < f(x + 1, y)`
`f(x, y) < f(x, y + 1)`
The function interface is defined like this:
interface CustomFunction {
public:
  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.

  int f(int x, int y);
};
We will judge your solution as follows:
The judge has a list of `9` hidden implementations of `CustomFunction`, along with a way to generate an answer key of all valid pairs for a specific `z`.

The judge will receive two inputs: a `function_id` (to determine which implementation to test your code with), and the target `z`.

The judge will call your `findSolution` and compare your results with the answer key.

If your results match the answer key, your solution will be `Accepted`.


Example 1:
Input: function_id = 1, z = 5
Output: [[1,4],[2,3],[3,2],[4,1]]
Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.

The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=4 -> f(1, 4) = 1 + 4 = 5.

x=2, y=3 -> f(2, 3) = 2 + 3 = 5.

x=3, y=2 -> f(3, 2) = 3 + 2 = 5.

x=4, y=1 -> f(4, 1) = 4 + 1 = 5.


Example 2:
Input: function_id = 2, z = 5
Output: [[1,5],[5,1]]
Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.

The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=5 -> f(1, 5) = 1 * 5 = 5.

x=5, y=1 -> f(5, 1) = 5 * 1 = 5.


Constraints:
`1 <= function_id <= 9`
`1 <= z <= 100`
It is guaranteed that the solutions of `f(x, y) == z` will be in the range `1 <= x, y <= 1000`.

It is also guaranteed that `f(x, y)` will fit in 32 bit signed integer if `1 <= x, y <= 1000`.",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given 2 integers `n` and `start`. Your task is return any permutation `p` of `(0,1,2.....,2^n -1) `such that :
`p[0] = start`
`p[i]` and `p[i+1]` differ by only one bit in their binary representation.

`p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representation.


Example 1:
Input: n = 2, start = 3
Output: [3,2,0,1]
Explanation: The binary representation of the permutation is (11,10,00,01). 
All the adjacent element differ by one bit. Another valid permutation is [3,1,0,2]

Example 2:
Input: n = 3, start = 2
Output: [2,6,7,5,4,0,1,3]
Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).


Constraints:
`1 <= n <= 16`
`0 <= start < 2 ^ n`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `arr`. String `s` is a concatenation of a sub-sequence of `arr` which have unique characters.

Return the maximum possible length of `s`.


Example 1:
Input: arr = [""un"",""iq"",""ue""]
Output: 4
Explanation: All possible concatenations are """",""un"",""iq"",""ue"",""uniq"" and ""ique"".

Maximum length is 4.


Example 2:
Input: arr = [""cha"",""r"",""act"",""ers""]
Output: 6
Explanation: Possible solutions are ""chaers"" and ""acters"".


Example 3:
Input: arr = [""abcdefghijklmnopqrstuvwxyz""]
Output: 26

Constraints:
`1 <= arr.length <= 16`
`1 <= arr[i].length <= 26`
`arr[i]` contains only lower case English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a rectangle of size `n` x `m`, find the minimum number of integer-sided squares that tile the rectangle.


Example 1:
Input: n = 2, m = 3
Output: 3
Explanation: `3` squares are necessary to cover the rectangle.

`2` (squares of `1x1`)
`1` (square of `2x2`)

Example 2:
Input: n = 5, m = 8
Output: 5

Example 3:
Input: n = 11, m = 13
Output: 6

Constraints:
`1 <= n <= 13`
`1 <= m <= 13`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a url `startUrl` and an interface `HtmlParser`, implement a Multi-threaded web crawler to crawl all links that are under the same hostname as `startUrl`. 
Return all urls obtained by your web crawler in any order.

Your crawler should:
Start from the page: `startUrl`
Call `HtmlParser.getUrls(url)` to get all urls from a webpage of given url.

Do not crawl the same link twice.

Explore only the links that are under the same hostname as `startUrl`.

As shown in the example url above, the hostname is `example.org`. For simplicity sake, you may assume all urls use http protocol without any port specified. For example, the urls `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while urls `http://example.org/test` and `http://example.com/abc` are not under the same hostname.

The `HtmlParser` interface is defined as such: 
interface HtmlParser {
  // Return a list of all urls from a webpage of given url.

  // This is a blocking call, that means it will do HTTP request and return when this request is finished.

  public List<String> getUrls(String url);
}
Note that `getUrls(String url)` simulates performing a HTTP request. You can treat it as a blocking function call which waits for a HTTP request to finish. It is guaranteed that `getUrls(String url)` will return the urls within 15ms.  Single-threaded solutions will exceed the time limit so, can your multi-threaded web crawler do better?
Below are two examples explaining the functionality of the problem, for custom testing purposes you'll have three variables urls`, edges` and startUrl`. Notice that you will only have access to startUrl` in your code, while urls` and edges` are not directly accessible to you in code.

Follow up:
Assume we have 10,000 nodes and 1 billion URLs to crawl. We will deploy the same software onto each node. The software can know about all the nodes. We have to minimize communication between machines and make sure each node does equal amount of work. How would your web crawler design change?
What if one node fails or does not work?
How do you know when the crawler is done?

Example 1:
Input:
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com"",
  ""http://news.yahoo.com/us""
]
edges = [[2,0],[2,1],[3,2],[3,1],[0,4]]
startUrl = ""http://news.yahoo.com/news/topics/""
Output: [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.yahoo.com/us""
]

Example 2:
Input: 
urls = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com""
]
edges = [[0,2],[2,1],[3,2],[3,1],[3,0]]
startUrl = ""http://news.google.com""
Output: [""http://news.google.com""]
Explanation: The startUrl links to all other pages that do not share the same hostname.


Constraints:
`1 <= urls.length <= 1000`
`1 <= urls[i].length <= 300`
`startUrl` is one of the `urls`.

Hostname label must be from 1 to 63 characters long, including the dots, may contain only the ASCII letters from 'a' to 'z', digits from '0' to '9' and the hyphen-minus character ('-').

The hostname may not start or end with the hyphen-minus character ('-'). 
See:  https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
You may assume there're no duplicates in url library.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an initial array `arr`, every day you produce a new array using the array of the previous day.

On the `i`-th day, you do the following operations on the array of day `i-1` to produce the array of day `i`:
If an element is smaller than both its left neighbor and its right neighbor, then this element is incremented.

If an element is bigger than both its left neighbor and its right neighbor, then this element is decremented.

The first and last elements never change.

After some days, the array does not change. Return that final array.


Example 1:
Input: arr = [6,2,3,4]
Output: [6,3,3,4]
Explanation: 
On the first day, the array is changed from [6,2,3,4] to [6,3,3,4].

No more operations can be done to this array.


Example 2:
Input: arr = [1,6,3,4,3,5]
Output: [1,4,4,4,4,5]
Explanation: 
On the first day, the array is changed from [1,6,3,4,3,5] to [1,5,4,3,4,5].

On the second day, the array is changed from [1,5,4,3,4,5] to [1,4,4,4,4,5].

No more operations can be done to this array.


Constraints:
`3 <= arr.length <= 100`
`1 <= arr[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a Leaderboard class, which has 3 functions:
`addScore(playerId, score)`: Update the leaderboard by adding `score` to the given player's score. If there is no player with such id in the leaderboard, add him to the leaderboard with the given `score`.

`top(K)`: Return the score sum of the top `K` players.

`reset(playerId)`: Reset the score of the player with the given id to 0 (in other words erase it from the leaderboard). It is guaranteed that the player was added to the leaderboard before calling this function.

Initially, the leaderboard is empty.


Example 1:
Input: 
[""Leaderboard"",""addScore"",""addScore"",""addScore"",""addScore"",""addScore"",""top"",""reset"",""reset"",""addScore"",""top""]
[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51],[3]]
Output: 
[null,null,null,null,null,null,73,null,null,null,141]
Explanation: 
Leaderboard leaderboard = new Leaderboard ();
leaderboard.addScore(1,73);   // leaderboard = [[1,73]];
leaderboard.addScore(2,56);   // leaderboard = [[1,73],[2,56]];
leaderboard.addScore(3,39);   // leaderboard = [[1,73],[2,56],[3,39]];
leaderboard.addScore(4,51);   // leaderboard = [[1,73],[2,56],[3,39],[4,51]];
leaderboard.addScore(5,4);    // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
leaderboard.top(1);           // returns 73;
leaderboard.reset(1);         // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
leaderboard.reset(2);         // leaderboard = [[3,39],[4,51],[5,4]];
leaderboard.addScore(2,51);   // leaderboard = [[2,51],[3,39],[4,51],[5,4]];
leaderboard.top(3);           // returns 141 = 51 + 51 + 39;

Constraints:
`1 <= playerId, K <= 10000`
It's guaranteed that `K` is less than or equal to the current number of players.

`1 <= score <= 100`
There will be at most `1000` function calls.",0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected tree, return its diameter: the number of edges in a longest path in that tree.

The tree is given as an array of `edges` where `edges[i] = [u, v]` is a bidirectional edge between nodes `u` and `v`.  Each node has labels in the set `{0, 1, ..., edges.length}`.


Example 1:
Input: edges = [[0,1],[0,2]]
Output: 2
Explanation: 
A longest path of the tree is the path 1 - 0 - 2.


Example 2:
Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
Output: 4
Explanation: 
A longest path of the tree is the path 3 - 2 - 1 - 4 - 5.


Constraints:
`0 <= edges.length < 10^4`
`edges[i][0] != edges[i][1]`
`0 <= edges[i][j] <= edges.length`
The given edges form an undirected tree.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, in one move you can select a palindromic subarray `arr[i], arr[i+1], ..., arr[j]` where `i <= j`, and remove that subarray from the given array. Note that after removing a subarray, the elements on the left and on the right of that subarray move to fill the gap left by the removal.

Return the minimum number of moves needed to remove all numbers from the array.


Example 1:
Input: arr = [1,2]
Output: 2

Example 2:
Input: arr = [1,3,4,1,5]
Output: 3
Explanation: Remove [4] then remove [1,3,1] then remove [5].


Constraints:
`1 <= arr.length <= 100`
`1 <= arr[i] <= 20`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `s1` and `s2` of equal length consisting of letters `""x""` and `""y""` only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap `s1[i]` and `s2[j]`.

Return the minimum number of swaps required to make `s1` and `s2` equal, or return `-1` if it is impossible to do so.


Example 1:
Input: s1 = ""xx"", s2 = ""yy""
Output: 1
Explanation: 
Swap s1[0] and s2[1], s1 = ""yx"", s2 = ""yx"".


Example 2: 
Input: s1 = ""xy"", s2 = ""yx""
Output: 2
Explanation: 
Swap s1[0] and s2[0], s1 = ""yy"", s2 = ""xx"".

Swap s1[0] and s2[1], s1 = ""xy"", s2 = ""xy"".

Note that you can't swap s1[0] and s1[1] to make s1 equal to ""yx"", cause we can only swap chars in different strings.


Example 3:
Input: s1 = ""xx"", s2 = ""xy""
Output: -1

Example 4:
Input: s1 = ""xxyyxyxyxx"", s2 = ""xyyxyxxxyx""
Output: 4

Constraints:
`1 <= s1.length, s2.length <= 1000`
`s1, s2` only contain `'x'` or `'y'`.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and an integer `k`. A continuous subarray is called nice if there are `k` odd numbers on it.

Return the number of nice sub-arrays.


Example 1:
Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].


Example 2:
Input: nums = [2,4,6], k = 1
Output: 0
Explanation: There is no odd numbers in the array.


Example 3:
Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
Output: 16

Constraints:
`1 <= nums.length <= 50000`
`1 <= nums[i] <= 10^5`
`1 <= k <= nums.length`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s of `'('` , `')'` and lowercase English characters. 
Your task is to remove the minimum number of parentheses ( `'('` or `')'`, in any positions ) so that the resulting parentheses string is valid and return any valid string.

Formally, a parentheses string is valid if and only if:
It is the empty string, contains only lowercase characters, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or
It can be written as `(A)`, where `A` is a valid string.


Example 1:
Input: s = ""lee(t(c)o)de)""
Output: ""lee(t(c)o)de""
Explanation: ""lee(t(co)de)"" , ""lee(t(c)ode)"" would also be accepted.


Example 2:
Input: s = ""a)b(c)d""
Output: ""ab(c)d""

Example 3:
Input: s = ""))((""
Output: """"
Explanation: An empty string is also valid.


Example 4:
Input: s = ""(a(b(c)d)""
Output: ""a(b(c)d)""

Constraints:
`1 <= s.length <= 10^5`
`s[i]` is one of  `'('` , `')'` and lowercase English letters`.`",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. The array is said to be good if you can obtain a sum of `1` from the array by any possible subset and multiplicand.

Return `True` if the array is good otherwise return `False`.


Example 1:
Input: nums = [12,5,7,23]
Output: true
Explanation: Pick numbers 5 and 7.

5*3 + 7*(-2) = 1

Example 2:
Input: nums = [29,6,10]
Output: true
Explanation: Pick numbers 29, 6 and 10.

29*1 + 6*(-3) + 10*(-1) = 1

Example 3:
Input: nums = [3,6]
Output: false

Constraints:
`1 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the following details of a matrix with `n` columns and `2` rows :
The matrix is a binary matrix, which means each element in the matrix can be `0` or `1`.

The sum of elements of the 0-th(upper) row is given as `upper`.

The sum of elements of the 1-st(lower) row is given as `lower`.

The sum of elements in the i-th column(0-indexed) is `colsum[i]`, where `colsum` is given as an integer array with length `n`.

Your task is to reconstruct the matrix with `upper`, `lower` and `colsum`.

Return it as a 2-D integer array.

If there are more than one valid solution, any of them will be accepted.

If no valid solution exists, return an empty 2-D array.


Example 1:
Input: upper = 2, lower = 1, colsum = [1,1,1]
Output: [[1,1,0],[0,0,1]]
Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.


Example 2:
Input: upper = 2, lower = 3, colsum = [2,2,1,1]
Output: []

Example 3:
Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]

Constraints:
`1 <= colsum.length <= 10^5`
`0 <= upper, lower <= colsum.length`
`0 <= colsum[i] <= 2`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D `grid` consists of `0s` (land) and `1s` (water).  An island is a maximal 4-directionally connected group of `0s` and a closed island is an island totally (all left, top, right, bottom) surrounded by `1s.`
Return the number of closed islands.


Example 1:
Input: grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0,1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
Explanation: 
Islands in gray are closed because they are completely surrounded by water (group of 1s).


Example 2:
Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1

Example 3:
Input: grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2

Constraints:
`1 <= grid.length, grid[0].length <= 100`
`0 <= grid[i][j] <=1`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of `words`, list of  single `letters` (might be repeating) and `score` of every character.

Return the maximum score of any valid set of words formed by using the given letters (`words[i]` cannot be used two or more times).

It is not necessary to use all characters in `letters` and each letter can only be used once. Score of letters `'a'`, `'b'`, `'c'`, ... ,`'z'` is given by `score[0]`, `score[1]`, ... , `score[25]` respectively.


Example 1:
Input: words = [""dog"",""cat"",""dad"",""good""], letters = [""a"",""a"",""c"",""d"",""d"",""d"",""g"",""o"",""o""], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0]
Output: 23
Explanation:
Score  a=1, c=9, d=5, g=3, o=2
Given letters, we can form the words ""dad"" (5+1+5) and ""good"" (3+2+2+5) with a score of 23.

Words ""dad"" and ""dog"" only get a score of 21.


Example 2:
Input: words = [""xxxz"",""ax"",""bx"",""cx""], letters = [""z"",""a"",""b"",""c"",""x"",""x"",""x""], score = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,10]
Output: 27
Explanation:
Score  a=4, b=4, c=4, x=5, z=10
Given letters, we can form the words ""ax"" (4+5), ""bx"" (4+5) and ""cx"" (4+5) with a score of 27.

Word ""xxxz"" only get a score of 25.


Example 3:
Input: words = [""leetcode""], letters = [""l"",""e"",""t"",""c"",""o"",""d""], score = [0,0,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
Output: 0
Explanation:
Letter ""e"" can only be used once.


Constraints:
`1 <= words.length <= 14`
`1 <= words[i].length <= 15`
`1 <= letters.length <= 100`
`letters[i].length == 1`
`score.length == 26`
`0 <= score[i] <= 10`
`words[i]`, `letters[i]` contains only lower case English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer `num`, Return its encoding string.

The encoding is done by converting the integer to a string using a secret function that you should deduce from the following table:

Example 1:
Input: num = 23
Output: ""1000""

Example 2:
Input: num = 107
Output: ""101100""

Constraints:
`0 <= num <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given some lists of `regions` where the first region of each list includes all other regions in that list.

Naturally, if a region `X` contains another region `Y` then `X` is bigger than `Y`. Also by definition a region X contains itself.

Given two regions `region1`, `region2`, find out the smallest region that contains both of them.

If you are given regions `r1`, `r2` and `r3` such that `r1` includes `r3`, it is guaranteed there is no `r2` such that `r2` includes `r3`.

It's guaranteed the smallest region exists.


Example 1:
Input:
regions = [[""Earth"",""North America"",""South America""],
[""North America"",""United States"",""Canada""],
[""United States"",""New York"",""Boston""],
[""Canada"",""Ontario"",""Quebec""],
[""South America"",""Brazil""]],
region1 = ""Quebec"",
region2 = ""New York""
Output: ""North America""

Constraints:
`2 <= regions.length <= 10^4`
`region1 != region2`
All strings consist of English letters and spaces with at most 20 letters.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of pairs of equivalent words `synonyms` and a sentence `text`, Return all possible synonymous sentences sorted lexicographically.


Example 1:
Input:
synonyms = [[""happy"",""joy""],[""sad"",""sorrow""],[""joy"",""cheerful""]],
text = ""I am happy today but was sad yesterday""
Output:
[""I am cheerful today but was sad yesterday"",
""I am cheerful today but was sorrow yesterday"",
""I am happy today but was sad yesterday"",
""I am happy today but was sorrow yesterday"",
""I am joy today but was sad yesterday"",
""I am joy today but was sorrow yesterday""]

Example 2:
Input: synonyms = [[""happy"",""joy""],[""cheerful"",""glad""]], text = ""I am happy today but was sad yesterday""
Output: [""I am happy today but was sad yesterday"",""I am joy today but was sad yesterday""]

Example 3:
Input: synonyms = [[""a"",""b""],[""c"",""d""],[""e"",""f""]], text = ""a c e""
Output: [""a c e"",""a c f"",""a d e"",""a d f"",""b c e"",""b c f"",""b d e"",""b d f""]

Example 4:
Input: synonyms = [[""a"",""QrbCl""]], text = ""d QrbCl ya ya NjZQ""
Output: [""d QrbCl ya ya NjZQ"",""d a ya ya NjZQ""]

Constraints:
`0 <= synonyms.length <= 10`
`synonyms[i].length == 2`
`synonyms[i][0] != synonyms[i][1]`
All words consist of at most `10` English letters only.

`text` is a single space separated sentence of at most `10` words.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an even number of people `num_people` that stand around a circle and each person shakes hands with someone else, so that there are `num_people / 2` handshakes total.

Return the number of ways these handshakes could occur such that none of the handshakes cross.

Since this number could be very big, return the answer mod `10^9 + 7`

Example 1:
Input: num_people = 2
Output: 1

Example 2:
Input: num_people = 4
Output: 2
Explanation: There are two ways to do it, the first way is [(1,2),(3,4)] and the second one is [(2,3),(4,1)].


Example 3:
Input: num_people = 6
Output: 5

Example 4:
Input: num_people = 8
Output: 14

Constraints:
`2 <= num_people <= 1000`
`num_people % 2 == 0`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D `grid` of size `m x n` and an integer `k`. You need to shift the `grid` `k` times.

In one shift operation:
Element at `grid[i][j]` moves to `grid[i][j + 1]`.

Element at `grid[i][n - 1]` moves to `grid[i + 1][0]`.

Element at `grid[m - 1][n - 1]` moves to `grid[0][0]`.

Return the 2D grid after applying shift operation `k` times.


Example 1:
Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]

Example 2:
Input: `grid` = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]

Example 3:
Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m <= 50`
`1 <= n <= 50`
`-1000 <= grid[i][j] <= 1000`
`0 <= k <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree with the following rules:
`root.val == 0`
If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`
If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`
Now the binary tree is contaminated, which means all `treeNode.val` have been changed to `-1`.

You need to first recover the binary tree and then implement the `FindElements` class:
`FindElements(TreeNode* root)` Initializes the object with a contamined binary tree, you need to recover it first.

`bool find(int target)` Return if the `target` value exists in the recovered binary tree.


Example 1:
Input
[""FindElements"",""find"",""find""]
[[[-1,null,-1]],[1],[2]]
Output
[null,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1]); 
findElements.find(1); // return False 
findElements.find(2); // return True 

Example 2:
Input
[""FindElements"",""find"",""find"",""find""]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
Output
[null,true,true,false]
Explanation
FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
findElements.find(1); // return True
findElements.find(3); // return True
findElements.find(5); // return False

Example 3:
Input
[""FindElements"",""find"",""find"",""find"",""find""]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
Output
[null,true,false,false,true]
Explanation
FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
findElements.find(2); // return True
findElements.find(3); // return False
findElements.find(4); // return False
findElements.find(5); // return True

Constraints:
`TreeNode.val == -1`
The height of the binary tree is less than or equal to `20`
The total number of nodes is between `[1, 10^4]`
Total calls of `find()` is between `[1, 10^4]`
`0 <= target <= 10^6`",0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of integers, we need to find the maximum possible sum of elements of the array such that it is divisible by three.


Example 1:
Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).


Example 2:
Input: nums = [4]
Output: 0
Explanation: Since 4 is not divisible by 3, do not pick any number.


Example 3:
Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).


Constraints:
`1 <= nums.length <= 4 * 10^4`
`1 <= nums[i] <= 10^4`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2D plane, there are `n` points with integer coordinates `points[i] = [xi, yi]`. Return the minimum time in seconds to visit all the points in the order given by `points`.

You can move according to these rules:
In `1` second, you can either:
	
move vertically by one unit,
move horizontally by one unit, or
move diagonally `sqrt(2)` units (in other words, move one unit vertically then one unit horizontally in `1` second).

You have to visit the points in the same order as they appear in the array.

You are allowed to pass through points that appear later in the order, but these do not count as visits.


Example 1:
Input: points = [[1,1],[3,4],[-1,0]]
Output: 7
Explanation: One optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [0,1] -> [-1,0]   
Time from [1,1] to [3,4] = 3 seconds 
Time from [3,4] to [-1,0] = 4 seconds
Total time = 7 seconds

Example 2:
Input: points = [[3,2],[-2,2]]
Output: 5

Constraints:
`points.length == n`
`1 <= n <= 100`
`points[i].length == 2`
`-1000 <= points[i][0], points[i][1] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a map of a server center, represented as a `m * n` integer matrix `grid`, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.

Return the number of servers that communicate with any other server.


Example 1:
Input: grid = [[1,0],[0,1]]
Output: 0
Explanation: No servers can communicate with others.


Example 2:
Input: grid = [[1,0],[1,1]]
Output: 3
Explanation: All three servers can communicate with at least one other server.


Example 3:
Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
Output: 4
Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server at right bottom corner can't communicate with any other server.


Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m <= 250`
`1 <= n <= 250`
`grid[i][j] == 0 or 1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `products` and a string `searchWord`. We want to design a system that suggests at most three product names from `products` after each character of `searchWord` is typed. Suggested products should have common prefix with the searchWord. If there are more than three products with a common prefix return the three lexicographically minimums products.

Return list of lists of the suggested `products` after each character of `searchWord` is typed. 

Example 1:
Input: products = [""mobile"",""mouse"",""moneypot"",""monitor"",""mousepad""], searchWord = ""mouse""
Output: [
[""mobile"",""moneypot"",""monitor""],
[""mobile"",""moneypot"",""monitor""],
[""mouse"",""mousepad""],
[""mouse"",""mousepad""],
[""mouse"",""mousepad""]
]
Explanation: products sorted lexicographically = [""mobile"",""moneypot"",""monitor"",""mouse"",""mousepad""]
After typing m and mo all products match and we show user [""mobile"",""moneypot"",""monitor""]
After typing mou, mous and mouse the system suggests [""mouse"",""mousepad""]

Example 2:
Input: products = [""havana""], searchWord = ""havana""
Output: [[""havana""],[""havana""],[""havana""],[""havana""],[""havana""],[""havana""]]

Example 3:
Input: products = [""bags"",""baggage"",""banner"",""box"",""cloths""], searchWord = ""bags""
Output: [[""baggage"",""bags"",""banner""],[""baggage"",""bags"",""banner""],[""baggage"",""bags""],[""bags""]]

Example 4:
Input: products = [""havana""], searchWord = ""tatiana""
Output: [[],[],[],[],[],[],[]]

Constraints:
`1 <= products.length <= 1000`
There are no repeated elements in `products`.

`1 <= Σ products[i].length <= 2 * 10^4`
All characters of `products[i]` are lower-case English letters.

`1 <= searchWord.length <= 1000`
All characters of `searchWord` are lower-case English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a pointer at index `0` in an array of size `arrLen`. At each step, you can move 1 position to the left, 1 position to the right in the array or stay in the same place  (The pointer should not be placed outside the array at any time).

Given two integers `steps` and `arrLen`, return the number of ways such that your pointer still at index `0` after exactly `steps` steps.

Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: steps = 3, arrLen = 2
Output: 4
Explanation: There are 4 differents ways to stay at index 0 after 3 steps.

Right, Left, Stay
Stay, Right, Left
Right, Stay, Left
Stay, Stay, Stay

Example 2:
Input: steps = 2, arrLen = 4
Output: 2
Explanation: There are 2 differents ways to stay at index 0 after 2 steps
Right, Left
Stay, Stay

Example 3:
Input: steps = 4, arrLen = 2
Output: 8

Constraints:
`1 <= steps <= 500`
`1 <= arrLen <= 10^6`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A decimal number can be converted to its Hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the digit `0` with the letter `O`, and the digit `1` with the letter `I`.  Such a representation is valid if and only if it consists only of the letters in the set `{""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""I"", ""O""}`.

Given a string `num` representing a decimal integer `N`, return the Hexspeak representation of `N` if it is valid, otherwise return `""ERROR""`.


Example 1:
Input: num = ""257""
Output: ""IOI""
Explanation:  257 is 101 in hexadecimal.


Example 2:
Input: num = ""3""
Output: ""ERROR""

Constraints:
`1 <= N <= 10^12`
There are no leading zeros in the given string.

All answers must be in uppercase letters.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A set of real numbers can be represented as the union of several disjoint intervals, where each interval is in the form `[a, b)`. A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`).

You are given a sorted list of disjoint intervals `intervals` representing a set of real numbers as described above, where `intervals[i] = [ai, bi]` represents the interval `[ai, bi)`. You are also given another interval `toBeRemoved`.

Return the set of real numbers with the interval `toBeRemoved` removed from `intervals`. In other words, return the set of real numbers such that every `x` in the set is in `intervals` but not in `toBeRemoved`. Your answer should be a sorted list of disjoint intervals as described above.


Example 1:
Input: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]
Output: [[0,1],[6,7]]

Example 2:
Input: intervals = [[0,5]], toBeRemoved = [2,3]
Output: [[0,2],[3,5]]

Example 3:
Input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]
Output: [[-5,-4],[-3,-2],[4,5],[8,9]]

Constraints:
`1 <= intervals.length <= 104`
`-109 <= ai < bi <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"A tree rooted at node 0 is given as follows:
The number of nodes is `nodes`;
The value of the `i`-th node is `value[i]`;
The parent of the `i`-th node is `parent[i]`.

Remove every subtree whose sum of values of nodes is zero.

After doing so, return the number of nodes remaining in the tree.


Example 1:
Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-1]
Output: 2

Example 2:
Input: nodes = 7, parent = [-1,0,0,1,2,2,2], value = [1,-2,4,0,-2,-1,-2]
Output: 6

Example 3:
Input: nodes = 5, parent = [-1,0,1,0,0], value = [-672,441,18,728,378]
Output: 5

Example 4:
Input: nodes = 5, parent = [-1,0,0,1,1], value = [-686,-842,616,-739,-746]
Output: 5

Constraints:
`1 <= nodes <= 10^4`
`parent.length == nodes`
`0 <= parent[i] <= nodes - 1`
`parent[0] == -1` which indicates that `0` is the root.

`value.length == nodes`
`-10^5 <= value[i] <= 10^5`
The given input is guaranteed to represent a valid tree.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"(This problem is an interactive problem.)
Each ship is located at an integer point on the sea represented by a cartesian plane, and each integer point may contain at most 1 ship.

You have a function `Sea.hasShips(topRight, bottomLeft)` which takes two points as arguments and returns `true` If there is at least one ship in the rectangle represented by the two points, including on the boundary.

Given two points: the top right and bottom left corners of a rectangle, return the number of ships present in that rectangle. It is guaranteed that there are at most 10 ships in that rectangle.

Submissions making more than 400 calls to `hasShips` will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.


Example :
Input: 
ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
Output: 3
Explanation: From [0,0] to [4,4] we can count 3 ships within the range.


Constraints:
On the input `ships` is only given to initialize the map internally. You must solve this problem ""blindfolded"". In other words, you must find the answer using the given `hasShips` API, without knowing the `ships` position.

`0 <= bottomLeft[0] <= topRight[0] <= 1000`
`0 <= bottomLeft[1] <= topRight[1] <= 1000`
`topRight != bottomLeft`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Tic-tac-toe is played by two players A and B on a 3 x 3 grid.

Here are the rules of Tic-Tac-Toe:
Players take turns placing characters into empty squares ("" "").

The first player A always places ""X"" characters, while the second player B always places ""O"" characters.

""X"" and ""O"" characters are always placed into empty squares, never on filled ones.

The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.

The game also ends if all squares are non-empty.

No more moves can be played if the game is over.

Given an array `moves` where each element is another array of size 2 corresponding to the row and column of the grid where they mark their respective character in the order in which A and B play.

Return the winner of the game if it exists (A or B), in case the game ends in a draw return ""Draw"", if there are still movements to play return ""Pending"".

You can assume that `moves` is valid (It follows the rules of Tic-Tac-Toe), the grid is initially empty and A will play first.


Example 1:
Input: moves = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: ""A""
Explanation: ""A"" wins, he always plays first.

""X  ""    ""X  ""    ""X  ""    ""X  ""    ""X  ""
""   "" -> ""   "" -> "" X "" -> "" X "" -> "" X ""
""   ""    ""O  ""    ""O  ""    ""OO ""    ""OOX""

Example 2:
Input: moves = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: ""B""
Explanation: ""B"" wins.

""X  ""    ""X  ""    ""XX ""    ""XXO""    ""XXO""    ""XXO""
""   "" -> "" O "" -> "" O "" -> "" O "" -> ""XO "" -> ""XO "" 
""   ""    ""   ""    ""   ""    ""   ""    ""   ""    ""O  ""

Example 3:
Input: moves = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0,2],[2,2]]
Output: ""Draw""
Explanation: The game ends in a draw since there are no moves to make.

""XXO""
""OOX""
""XOX""

Example 4:
Input: moves = [[0,0],[1,1]]
Output: ""Pending""
Explanation: The game has not finished yet.

""X  ""
"" O ""
""   ""

Constraints:
`1 <= moves.length <= 9`
`moves[i].length == 2`
`0 <= moves[i][j] <= 2`
There are no repeated elements on `moves`.

`moves` follow the rules of tic tac toe.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `tomatoSlices` and `cheeseSlices`. The ingredients of different burgers are as follows:
Jumbo Burger: 4 tomato slices and 1 cheese slice.

Small Burger: 2 Tomato slices and 1 cheese slice.

Return `[total_jumbo, total_small]` so that the number of remaining `tomatoSlices` equal to 0 and the number of remaining `cheeseSlices` equal to 0. If it is not possible to make the remaining `tomatoSlices` and `cheeseSlices` equal to 0 return `[]`.


Example 1:
Input: tomatoSlices = 16, cheeseSlices = 7
Output: [1,6]
Explantion: To make one jumbo burger and 6 small burgers we need 4*1 + 2*6 = 16 tomato and 1 + 6 = 7 cheese. There will be no remaining ingredients.


Example 2:
Input: tomatoSlices = 17, cheeseSlices = 4
Output: []
Explantion: There will be no way to use all ingredients to make small and jumbo burgers.


Example 3:
Input: tomatoSlices = 4, cheeseSlices = 17
Output: []
Explantion: Making 1 jumbo burger there will be 16 cheese remaining and making 2 small burgers there will be 15 cheese remaining.


Example 4:
Input: tomatoSlices = 0, cheeseSlices = 0
Output: [0,0]

Example 5:
Input: tomatoSlices = 2, cheeseSlices = 1
Output: [0,1]

Constraints:
`0 <= tomatoSlices <= 10^7`
`0 <= cheeseSlices <= 10^7`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m * n` matrix of ones and zeros, return how many square submatrices have all ones.


Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
Explanation: 
There are 10 squares of side 1.

There are 4 squares of side 2.

There is  1 square of side 3.

Total number of squares = 10 + 4 + 1 = 15.


Example 2:
Input: matrix = 
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
Explanation: 
There are 6 squares of side 1.  
There is 1 square of side 2. 
Total number of squares = 6 + 1 = 7.


Constraints:
`1 <= arr.length <= 300`
`1 <= arr[0].length <= 300`
`0 <= arr[i][j] <= 1`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` containing lowercase letters and an integer `k`. You need to :
First, change some characters of `s` to other lowercase English letters.

Then divide `s` into `k` non-empty disjoint substrings such that each substring is palindrome.

Return the minimal number of characters that you need to change to divide the string.


Example 1:
Input: s = ""abc"", k = 2
Output: 1
Explanation: You can split the string into ""ab"" and ""c"", and change 1 character in ""ab"" to make it palindrome.


Example 2:
Input: s = ""aabbc"", k = 3
Output: 0
Explanation: You can split the string into ""aa"", ""bb"" and ""c"", all of them are palindrome.


Example 3:
Input: s = ""leetcode"", k = 8
Output: 0

Constraints:
`1 <= k <= s.length <= 100`.

`s` only contains lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer number `n`, return the difference between the product of its digits and the sum of its digits.


Example 1:
Input: n = 234
Output: 15 
Explanation: 
Product of digits = 2 * 3 * 4 = 24 
Sum of digits = 2 + 3 + 4 = 9 
Result = 24 - 9 = 15

Example 2:
Input: n = 4421
Output: 21
Explanation: 
Product of digits = 4 * 4 * 2 * 1 = 32 
Sum of digits = 4 + 4 + 2 + 1 = 11 
Result = 32 - 11 = 21

Constraints:
`1 <= n <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` people that are split into some unknown number of groups. Each person is labeled with a unique ID from `0` to `n - 1`.

You are given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, then person `1` must be in a group of size `3`.

Return a list of groups such that each person `i` is in a group of size `groupSizes[i]`.

Each person should appear in exactly one group, and every person must be in a group. If there are multiple answers, return any of them. It is guaranteed that there will be at least one valid solution for the given input.


Example 1:
Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
Explanation: 
The first group is [5]. The size is 1, and groupSizes[5] = 1.

The second group is [0,1,2]. The size is 3, and groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.

The third group is [3,4,6]. The size is 3, and groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.

Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].


Example 2:
Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]

Constraints:
`groupSizes.length == n`
`1 <= n <= 500`
`1 <= groupSizes[i] <= n`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and an integer `threshold`, we will choose a positive integer `divisor`, divide all the array by it, and sum the division's result. Find the smallest `divisor` such that the result mentioned above is less than or equal to `threshold`.

Each result of the division is rounded to the nearest integer greater than or equal to that element. (For example: `7/3 = 3` and `10/2 = 5`).

It is guaranteed that there will be an answer.


Example 1:
Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: We can get a sum to 17 (1+2+5+9) if the divisor is 1. 
If the divisor is 4 we can get a sum of 7 (1+1+2+3) and if the divisor is 5 the sum will be 5 (1+1+1+2). 

Example 2:
Input: nums = [44,22,33,11,1], threshold = 5
Output: 44

Example 3:
Input: nums = [21212,10101,12121], threshold = 1000000
Output: 1

Example 4:
Input: nums = [2,3,5,7,11], threshold = 11
Output: 3

Constraints:
`1 <= nums.length <= 5 * 104`
`1 <= nums[i] <= 106`
`nums.length <= threshold <= 106`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m x n` binary matrix `mat`. In one step, you can choose one cell and flip it and all the four neighbours of it if they exist (Flip is changing 1 to 0 and 0 to 1). A pair of cells are called neighboors if they share one edge.

Return the minimum number of steps required to convert `mat` to a zero matrix or -1 if you cannot.

Binary matrix is a matrix with all cells equal to 0 or 1 only.

Zero matrix is a matrix with all cells equal to 0.


Example 1:
Input: mat = [[0,0],[0,1]]
Output: 3
Explanation: One possible solution is to flip (1, 0) then (0, 1) and finally (1, 1) as shown.


Example 2:
Input: mat = [[0]]
Output: 0
Explanation: Given matrix is a zero matrix. We don't need to change it.


Example 3:
Input: mat = [[1,1,1],[1,0,1],[0,0,0]]
Output: 6

Example 4:
Input: mat = [[1,0,0],[1,0,0]]
Output: -1
Explanation: Given matrix can't be a zero matrix

Constraints:
`m == mat.length`
`n == mat[0].length`
`1 <= m <= 3`
`1 <= n <= 3`
`mat[i][j]` is 0 or 1.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design the `CombinationIterator` class:
`CombinationIterator(string characters, int combinationLength)` Initializes the object with a string `characters` of sorted distinct lowercase English letters and a number `combinationLength` as arguments.

`next()` Returns the next combination of length `combinationLength` in lexicographical order.

`hasNext()` Returns `true` if and only if there exists a next combination.


Example 1:
Input
[""CombinationIterator"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[""abc"", 2], [], [], [], [], [], []]
Output
[null, ""ab"", true, ""ac"", true, ""bc"", false]
Explanation
CombinationIterator itr = new CombinationIterator(""abc"", 2);
itr.next();    // return ""ab""
itr.hasNext(); // return True
itr.next();    // return ""ac""
itr.hasNext(); // return True
itr.next();    // return ""bc""
itr.hasNext(); // return False

Constraints:
`1 <= combinationLength <= characters.length <= 15`
All the characters of `characters` are unique.

At most `104` calls will be made to `next` and `hasNext`.

It's guaranteed that all calls of the function `next` are valid.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array sorted in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time.

Return that integer.


Example 1:
Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

Constraints:
`1 <= arr.length <= 10^4`
`0 <= arr[i] <= 10^5`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of `intervals`, remove all intervals that are covered by another interval in the list.

Interval `[a,b)` is covered by interval `[c,d)` if and only if `c <= a` and `b <= d`.

After doing so, return the number of remaining intervals.


Example 1:
Input: intervals = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: Interval [3,6] is covered by [2,8], therefore it is removed.


Example 2:
Input: intervals = [[1,4],[2,3]]
Output: 1

Example 3:
Input: intervals = [[0,10],[5,12]]
Output: 2

Example 4:
Input: intervals = [[3,10],[4,10],[5,11]]
Output: 2

Example 5:
Input: intervals = [[1,2],[1,4],[3,4]]
Output: 1

Constraints:
`1 <= intervals.length <= 1000`
`intervals[i].length == 2`
`0 <= intervals[i][0] < intervals[i][1] <= 10^5`
All the intervals are unique.",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"Given a square grid of integers `arr`, a falling path with non-zero shifts is a choice of exactly one element from each row of `arr`, such that no two elements chosen in adjacent rows are in the same column.

Return the minimum sum of a falling path with non-zero shifts.


Example 1:
Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
Explanation: 
The possible falling paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
The falling path with the smallest sum is [1,5,7], so the answer is 13.


Constraints:
`1 <= arr.length == arr[i].length <= 200`
`-99 <= arr[i][j] <= 99`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either 0 or 1. The linked list holds the binary representation of a number.

Return the decimal value of the number in the linked list.


Example 1:
Input: head = [1,0,1]
Output: 5
Explanation: (101) in base 2 = (5) in base 10

Example 2:
Input: head = [0]
Output: 0

Example 3:
Input: head = [1]
Output: 1

Example 4:
Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
Output: 18880

Example 5:
Input: head = [0,0]
Output: 0

Constraints:
The Linked List is not empty.

Number of nodes will not exceed `30`.

Each node's value is either `0` or `1`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An integer has sequential digits if and only if each digit in the number is one more than the previous digit.

Return a sorted list of all the integers in the range `[low, high]` inclusive that have sequential digits.


Example 1:
Input: low = 100, high = 300
Output: [123,234]

Example 2:
Input: low = 1000, high = 13000
Output: [1234,2345,3456,4567,5678,6789,12345]

Constraints:
`10 <= low <= high <= 10^9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m x n` matrix `mat` and an integer `threshold`. Return the maximum side-length of a square with a sum less than or equal to `threshold` or return 0 if there is no such square.


Example 1:
Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4
Output: 2
Explanation: The maximum side length of square with sum less than 4 is 2 as shown.


Example 2:
Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1
Output: 0

Example 3:
Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6
Output: 3

Example 4:
Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184
Output: 2

Constraints:
`1 <= m, n <= 300`
`m == mat.length`
`n == mat[i].length`
`0 <= mat[i][j] <= 10000`
`0 <= threshold <= 10^5`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m * n` grid, where each cell is either `0` (empty) or `1` (obstacle). In one step, you can move up, down, left or right from and to an empty cell.

Return the minimum number of steps to walk from the upper left corner `(0, 0)` to the lower right corner `(m-1, n-1)` given that you can eliminate at most `k` obstacles. If it is not possible to find such walk return -1.


Example 1:
Input: 
grid = 
[[0,0,0],
 [1,1,0],
 [0,0,0],
 [0,1,1],
 [0,0,0]], 
k = 1
Output: 6
Explanation: 
The shortest path without eliminating any obstacle is 10. 
The shortest path with one obstacle elimination at position (3,2) is 6. Such path is `(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2)`.


Example 2:
Input: 
grid = 
[[0,1,1],
 [1,1,1],
 [1,0,0]], 
k = 1
Output: -1
Explanation: 
We need to eliminate at least two obstacles to find such a walk.


Constraints:
`grid.length == m`
`grid[0].length == n`
`1 <= m, n <= 40`
`1 <= k <= m*n`
`grid[i][j] == 0 or 1`
`grid[0][0] == grid[m-1][n-1] == 0`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of integers, return how many of them contain an even number of digits.


Example 1:
Input: nums = [12,345,2,6,7896]
Output: 2
Explanation: 
12 contains 2 digits (even number of digits). 
345 contains 3 digits (odd number of digits). 
2 contains 1 digit (odd number of digits). 
6 contains 1 digit (odd number of digits). 
7896 contains 4 digits (even number of digits). 
Therefore only 12 and 7896 contain an even number of digits.


Example 2:
Input: nums = [555,901,482,1771]
Output: 1 
Explanation: 
Only 1771 contains an even number of digits.


Constraints:
`1 <= nums.length <= 500`
`1 <= nums[i] <= 10^5`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and a positive integer `k`, find whether it's possible to divide this array into sets of `k` consecutive numbers
Return `True` if it is possible. Otherwise, return `False`.


Example 1:
Input: nums = [1,2,3,3,4,4,5,6], k = 4
Output: true
Explanation: Array can be divided into [1,2,3,4] and [3,4,5,6].


Example 2:
Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
Output: true
Explanation: Array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11].


Example 3:
Input: nums = [3,3,2,2,1,1], k = 3
Output: true

Example 4:
Input: nums = [1,2,3,4], k = 3
Output: false
Explanation: Each array should be divided in subarrays of size 3.


Constraints:
`1 <= k <= nums.length <= 105`
`1 <= nums[i] <= 109`
Note: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the maximum number of ocurrences of any substring under the following rules:
The number of unique characters in the substring must be less than or equal to `maxLetters`.

The substring size must be between `minSize` and `maxSize` inclusive.


Example 1:
Input: s = ""aababcaab"", maxLetters = 2, minSize = 3, maxSize = 4
Output: 2
Explanation: Substring ""aab"" has 2 ocurrences in the original string.

It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).


Example 2:
Input: s = ""aaaa"", maxLetters = 1, minSize = 3, maxSize = 3
Output: 2
Explanation: Substring ""aaa"" occur 2 times in the string. It can overlap.


Example 3:
Input: s = ""aabcabcab"", maxLetters = 2, minSize = 2, maxSize = 3
Output: 3

Example 4:
Input: s = ""abcde"", maxLetters = 2, minSize = 3, maxSize = 3
Output: 0

Constraints:
`1 <= s.length <= 10^5`
`1 <= maxLetters <= 26`
`1 <= minSize <= maxSize <= min(26, s.length)`
`s` only contains lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` boxes, each box is given in the format `[status, candies, keys, containedBoxes]` where:
`status[i]`: an integer which is 1 if `box[i]` is open and 0 if `box[i]` is closed.

`candies[i]`: an integer representing the number of candies in `box[i]`.

`keys[i]`: an array contains the indices of the boxes you can open with the key in `box[i]`.

`containedBoxes[i]`: an array contains the indices of the boxes found in `box[i]`.

You will start with some boxes given in `initialBoxes` array. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.


Example 1:
Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2],[3],[],[]], initialBoxes = [0]
Output: 16
Explanation: You will be initially given box 0. You will find 7 candies in it and boxes 1 and 2. Box 1 is closed and you don't have a key for it so you will open box 2. You will find 4 candies and a key to box 1 in box 2.

In box 1, you will find 5 candies and box 3 but you will not find a key to box 3 so box 3 will remain closed.

Total number of candies collected = 7 + 4 + 5 = 16 candy.


Example 2:
Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0]
Output: 6
Explanation: You have initially box 0. Opening it you can find boxes 1,2,3,4 and 5 and their keys. The total number of candies will be 6.


Example 3:
Input: status = [1,1,1], candies = [100,1,100], keys = [[],[0,2],[]], containedBoxes = [[],[],[]], initialBoxes = [1]
Output: 1

Example 4:
Input: status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []
Output: 0

Example 5:
Input: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]
Output: 7

Constraints:
`1 <= status.length <= 1000`
`status.length == candies.length == keys.length == containedBoxes.length == n`
`status[i]` is `0` or `1`.

`1 <= candies[i] <= 1000`
`0 <= keys[i].length <= status.length`
`0 <= keys[i][j] < status.length`
All values in `keys[i]` are unique.

`0 <= containedBoxes[i].length <= status.length`
`0 <= containedBoxes[i][j] < status.length`
All values in `containedBoxes[i]` are unique.

Each box is contained in one box at most.

`0 <= initialBoxes.length <= status.length`
`0 <= initialBoxes[i] < status.length`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`.

After doing so, return the array.


Example 1:
Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
Explanation: 
- index 0 --> the greatest element to the right of index 0 is index 1 (18).

- index 1 --> the greatest element to the right of index 1 is index 4 (6).

- index 2 --> the greatest element to the right of index 2 is index 4 (6).

- index 3 --> the greatest element to the right of index 3 is index 4 (6).

- index 4 --> the greatest element to the right of index 4 is index 5 (1).

- index 5 --> there are no elements to the right of index 5, so we put -1.


Example 2:
Input: arr = [400]
Output: [-1]
Explanation: There are no elements to the right of index 0.


Constraints:
`1 <= arr.length <= 104`
`1 <= arr[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr` and a target value `target`, return the integer `value` such that when we change all the integers larger than `value` in the given array to be equal to `value`, the sum of the array gets as close as possible (in absolute difference) to `target`.

In case of a tie, return the minimum such integer.

Notice that the answer is not neccesarilly a number from `arr`.


Example 1:
Input: arr = [4,9,3], target = 10
Output: 3
Explanation: When using 3 arr converts to [3, 3, 3] which sums 9 and that's the optimal answer.


Example 2:
Input: arr = [2,3,5], target = 10
Output: 5

Example 3:
Input: arr = [60864,25176,27249,21296,20204], target = 56803
Output: 11361

Constraints:
`1 <= arr.length <= 10^4`
`1 <= arr[i], target <= 10^5`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a square `board` of characters. You can move on the board starting at the bottom right square marked with the character `'S'`.

You need to reach the top left square marked with the character `'E'`. The rest of the squares are labeled either with a numeric character `1, 2, ..., 9` or with an obstacle `'X'`. In one move you can go up, left or up-left (diagonally) only if there is no obstacle there.

Return a list of two integers: the first integer is the maximum sum of numeric characters you can collect, and the second is the number of such paths that you can take to get that maximum sum, taken modulo `10^9 + 7`.

In case there is no path, return `[0, 0]`.


Example 1:
Input: board = [""E23"",""2X2"",""12S""]
Output: [7,1]

Example 2:
Input: board = [""E12"",""1X1"",""21S""]
Output: [4,2]

Example 3:
Input: board = [""E11"",""XXX"",""11S""]
Output: [0,0]

Constraints:
`2 <= board.length == board[i].length <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the sum of values of its deepest leaves.


Example 1:
Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15

Example 2:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19

Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`1 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return any array containing `n` unique integers such that they add up to `0`.


Example 1:
Input: n = 5
Output: [-7,-1,1,3,4]
Explanation: These arrays also are accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].


Example 2:
Input: n = 3
Output: [-1,0,1]

Example 3:
Input: n = 1
Output: [0]

Constraints:
`1 <= n <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two binary search trees `root1` and `root2`.

Return a list containing all the integers from both trees sorted in ascending order.


Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]

Example 2:
Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]
Output: [-10,0,0,1,2,5,7,10]

Example 3:
Input: root1 = [], root2 = [5,1,7,0,2]
Output: [0,1,2,5,7]

Example 4:
Input: root1 = [0,-10,10], root2 = []
Output: [-10,0,10]

Example 5:
Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]

Constraints:
Each tree has at most `5000` nodes.

Each node's value is between `[-10^5, 10^5]`.",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of non-negative integers `arr`, you are initially positioned at `start` index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach to any index with value 0.

Notice that you can not jump outside of the array at any time.


Example 1:
Input: arr = [4,2,3,0,3,1,2], start = 5
Output: true
Explanation: 
All possible ways to reach at index 3 with value 0 are: 
index 5 -> index 4 -> index 1 -> index 3 
index 5 -> index 6 -> index 4 -> index 1 -> index 3 

Example 2:
Input: arr = [4,2,3,0,3,1,2], start = 0
Output: true 
Explanation: 
One possible way to reach at index 3 with value 0 is: 
index 0 -> index 4 -> index 1 -> index 3

Example 3:
Input: arr = [3,0,2,1,2], start = 2
Output: false
Explanation: There is no way to reach at index 1 with value 0.


Constraints:
`1 <= arr.length <= 5 * 104`
`0 <= arr[i] < arr.length`
`0 <= start < arr.length`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an equation, represented by `words` on left side and the `result` on right side.

You need to check if the equation is solvable under the following rules:
Each character is decoded as one digit (0 - 9).

Every pair of different characters they must map to different digits.

Each `words[i]` and `result` are decoded as one number without leading zeros.

Sum of numbers on left side (`words`) will equal to the number on right side (`result`). 
Return `True` if the equation is solvable otherwise return `False`.


Example 1:
Input: words = [""SEND"",""MORE""], result = ""MONEY""
Output: true
Explanation: Map 'S'-> 9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8, 'Y'->'2'
Such that: ""SEND"" + ""MORE"" = ""MONEY"" ,  9567 + 1085 = 10652

Example 2:
Input: words = [""SIX"",""SEVEN"",""SEVEN""], result = ""TWENTY""
Output: true
Explanation: Map 'S'-> 6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1, 'W'->'3', 'Y'->4
Such that: ""SIX"" + ""SEVEN"" + ""SEVEN"" = ""TWENTY"" ,  650 + 68782 + 68782 = 138214

Example 3:
Input: words = [""THIS"",""IS"",""TOO""], result = ""FUNNY""
Output: true

Example 4:
Input: words = [""LEET"",""CODE""], result = ""POINT""
Output: false

Constraints:
`2 <= words.length <= 5`
`1 <= words[i].length, result.length <= 7`
`words[i], result` contain only uppercase English letters.

The number of different characters used in the expression is at most `10`.",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` formed by digits (`'0'` - `'9'`) and `'#'` . We want to map `s` to English lowercase characters as follows:
Characters (`'a'` to `'i')` are represented by (`'1'` to `'9'`) respectively.

Characters (`'j'` to `'z')` are represented by (`'10#'` to `'26#'`) respectively. 
Return the string formed after mapping.

It's guaranteed that a unique mapping will always exist.


Example 1:
Input: s = ""10#11#12""
Output: ""jkab""
Explanation: ""j"" -> ""10#"" , ""k"" -> ""11#"" , ""a"" -> ""1"" , ""b"" -> ""2"".


Example 2:
Input: s = ""1326#""
Output: ""acz""

Example 3:
Input: s = ""25#""
Output: ""y""

Example 4:
Input: s = ""12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#""
Output: ""abcdefghijklmnopqrstuvwxyz""

Constraints:
`1 <= s.length <= 1000`
`s[i]` only contains digits letters (`'0'`-`'9'`) and `'#'` letter.

`s` will be valid string such that mapping is always possible.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `arr` of positive integers and the array `queries` where `queries[i] = [Li, Ri]`, for each query `i` compute the XOR of elements from `Li` to `Ri` (that is, `arr[Li] xor arr[Li+1] xor ... xor arr[Ri]` ). Return an array containing the result for the given `queries`.


Example 1:
Input: arr = [1,3,4,8], queries = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8] 
Explanation: 
The binary representation of the elements in the array are:
1 = 0001 
3 = 0011 
4 = 0100 
8 = 1000 
The XOR values for queries are:
[0,1] = 1 xor 3 = 2 
[1,2] = 3 xor 4 = 7 
[0,3] = 1 xor 3 xor 4 xor 8 = 14 
[3,3] = 8

Example 2:
Input: arr = [4,8,2,10], queries = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]

Constraints:
`1 <= arr.length <= 3 * 10^4`
`1 <= arr[i] <= 10^9`
`1 <= queries.length <= 3 * 10^4`
`queries[i].length == 2`
`0 <= queries[i][0] <= queries[i][1] < arr.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` people, each person has a unique id between `0` and `n-1`. Given the arrays `watchedVideos` and `friends`, where `watchedVideos[i]` and `friends[i]` contain the list of watched videos and the list of friends respectively for the person with `id = i`.

Level 1 of videos are all watched videos by your friends, level 2 of videos are all watched videos by the friends of your friends and so on. In general, the level `k` of videos are all watched videos by people with the shortest path exactly equal to `k` with you. Given your `id` and the `level` of videos, return the list of videos ordered by their frequencies (increasing). For videos with the same frequency order them alphabetically from least to greatest. 

Example 1:
Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 1
Output: [""B"",""C""] 
Explanation: 
You have id = 0 (green color in the figure) and your friends are (yellow color in the figure):
Person with id = 1 -> watchedVideos = [""C""] 
Person with id = 2 -> watchedVideos = [""B"",""C""] 
The frequencies of watchedVideos by your friends are: 
B -> 1 
C -> 2

Example 2:
Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0,3],[0,3],[1,2]], id = 0, level = 2
Output: [""D""]
Explanation: 
You have id = 0 (green color in the figure) and the only friend of your friends is the person with id = 3 (yellow color in the figure).


Constraints:
`n == watchedVideos.length == friends.length`
`2 <= n <= 100`
`1 <= watchedVideos[i].length <= 100`
`1 <= watchedVideos[i][j].length <= 8`
`0 <= friends[i].length < n`
`0 <= friends[i][j] < n`
`0 <= id < n`
`1 <= level < n`
if `friends[i]` contains `j`, then `friends[j]` contains `i`",0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`. In one step you can insert any character at any index of the string.

Return the minimum number of steps to make `s` palindrome.

A Palindrome String is one that reads the same backward as well as forward.


Example 1:
Input: s = ""zzazz""
Output: 0
Explanation: The string ""zzazz"" is already palindrome we don't need any insertions.


Example 2:
Input: s = ""mbadm""
Output: 2
Explanation: String can be ""mbdadbm"" or ""mdbabdm"".


Example 3:
Input: s = ""leetcode""
Output: 5
Explanation: Inserting 5 characters the string becomes ""leetcodocteel"".


Example 4:
Input: s = ""g""
Output: 0

Example 5:
Input: s = ""no""
Output: 1

Constraints:
`1 <= s.length <= 500`
All characters of `s` are lower case English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are given a list `nums` of integers representing a list compressed with run-length encoding.

Consider each adjacent pair of elements `[freq, val] = [nums[2*i], nums[2*i+1]]` (with `i >= 0`).  For each such pair, there are `freq` elements with value `val` concatenated in a sublist. Concatenate all the sublists from left to right to generate the decompressed list.

Return the decompressed list.


Example 1:
Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate the array [2].

The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].

At the end the concatenation [2] + [4,4,4] is [2,4,4,4].


Example 2:
Input: nums = [1,1,2,3]
Output: [1,3,3]

Constraints:
`2 <= nums.length <= 100`
`nums.length % 2 == 0`
`1 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m x n` matrix `mat` and an integer `k`, return a matrix `answer` where each `answer[i][j]` is the sum of all elements `mat[r][c]` for:
`i - k <= r <= i + k,`
`j - k <= c <= j + k`, and
`(r, c)` is a valid position in the matrix.


Example 1:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]

Example 2:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= m, n, k <= 100`
`1 <= mat[i][j] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, return the sum of values of nodes with even-valued grandparent.  (A grandparent of a node is the parent of its parent, if it exists.)
If there are no nodes with an even-valued grandparent, return `0`.


Example 1:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.


Constraints:
The number of nodes in the tree is between `1` and `10^4`.

The value of nodes is between `1` and `100`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Return the number of distinct non-empty substrings of `text` that can be written as the concatenation of some string with itself (i.e. it can be written as `a + a` where `a` is some string).


Example 1:
Input: text = ""abcabcabc""
Output: 3
Explanation: The 3 substrings are ""abcabc"", ""bcabca"" and ""cabcab"".


Example 2:
Input: text = ""leetcodeleetcode""
Output: 2
Explanation: The 2 substrings are ""ee"" and ""leetcodeleetcode"".


Constraints:
`1 <= text.length <= 2000`
`text` has only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Given an integer `n`. No-Zero integer is a positive integer which doesn't contain any 0 in its decimal representation.

Return a list of two integers `[A, B]` where:
`A` and `B` are No-Zero integers.

`A + B = n`
It's guarateed that there is at least one valid solution. If there are many valid solutions you can return any of them.


Example 1:
Input: n = 2
Output: [1,1]
Explanation: A = 1, B = 1. A + B = n and both A and B don't contain any 0 in their decimal representation.


Example 2:
Input: n = 11
Output: [2,9]

Example 3:
Input: n = 10000
Output: [1,9999]

Example 4:
Input: n = 69
Output: [1,68]

Example 5:
Input: n = 1010
Output: [11,999]

Constraints:
`2 <= n <= 10^4`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given 3 positives numbers `a`, `b` and `c`. Return the minimum flips required in some bits of `a` and `b` to make ( `a` OR `b` == `c` ). (bitwise OR operation).

Flip operation consists of change any single bit 1 to 0 or change the bit 0 to 1 in their binary representation.


Example 1:
Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flips a = 1 , b = 4 , c = 5 such that (`a` OR `b` == `c`)

Example 2:
Input: a = 4, b = 2, c = 7
Output: 1

Example 3:
Input: a = 1, b = 2, c = 3
Output: 0

Constraints:
`1 <= a <= 10^9`
`1 <= b <= 10^9`
`1 <= c <= 10^9`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` computers numbered from `0` to `n-1` connected by ethernet cables `connections` forming a network where `connections[i] = [a, b]` represents a connection between computers `a` and `b`. Any computer can reach any other computer directly or indirectly through the network.

Given an initial computer network `connections`. You can extract certain cables between two directly connected computers, and place them between any pair of disconnected computers to make them directly connected. Return the minimum number of times you need to do this in order to make all the computers connected. If it's not possible, return -1. 

Example 1:
Input: n = 4, connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove cable between computer 1 and 2 and place between computers 1 and 3.


Example 2:
Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
Output: 2

Example 3:
Input: n = 6, connections = [[0,1],[0,2],[0,3],[1,2]]
Output: -1
Explanation: There are not enough cables.


Example 4:
Input: n = 5, connections = [[0,1],[0,2],[3,4],[2,3]]
Output: 0

Constraints:
`1 <= n <= 10^5`
`1 <= connections.length <= min(n*(n-1)/2, 10^5)`
`connections[i].length == 2`
`0 <= connections[i][0], connections[i][1] < n`
`connections[i][0] != connections[i][1]`
There are no repeated connections.

No two computers are connected by more than one cable.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a keyboard layout as shown above in the XY plane, where each English uppercase letter is located at some coordinate, for example, the letter A is located at coordinate (0,0), the letter B is located at coordinate (0,1), the letter P is located at coordinate (2,3) and the letter Z is located at coordinate (4,1).

Given the string `word`, return the minimum total distance to type such string using only two fingers. The distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|. 
Note that the initial positions of your two fingers are considered free so don't count towards your total distance, also your two fingers do not have to start at the first letter or the first two letters.


Example 1:
Input: word = ""CAKE""
Output: 3
Explanation: 
Using two fingers, one optimal way to type ""CAKE"" is: 
Finger 1 on letter 'C' -> cost = 0 
Finger 1 on letter 'A' -> cost = Distance from letter 'C' to letter 'A' = 2 
Finger 2 on letter 'K' -> cost = 0 
Finger 2 on letter 'E' -> cost = Distance from letter 'K' to letter 'E' = 1 
Total distance = 3

Example 2:
Input: word = ""HAPPY""
Output: 6
Explanation: 
Using two fingers, one optimal way to type ""HAPPY"" is:
Finger 1 on letter 'H' -> cost = 0
Finger 1 on letter 'A' -> cost = Distance from letter 'H' to letter 'A' = 2
Finger 2 on letter 'P' -> cost = 0
Finger 2 on letter 'P' -> cost = Distance from letter 'P' to letter 'P' = 0
Finger 1 on letter 'Y' -> cost = Distance from letter 'A' to letter 'Y' = 4
Total distance = 6

Example 3:
Input: word = ""NEW""
Output: 3

Example 4:
Input: word = ""YEAR""
Output: 7

Constraints:
`2 <= word.length <= 300`
Each word[i]` is an English uppercase letter.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `num` consisting only of digits 6 and 9.

Return the maximum number you can get by changing at most one digit (6 becomes 9, and 9 becomes 6).


Example 1:
Input: num = 9669
Output: 9969
Explanation: 
Changing the first digit results in 6669.

Changing the second digit results in 9969.

Changing the third digit results in 9699.

Changing the fourth digit results in 9666. 
The maximum number is 9969.


Example 2:
Input: num = 9996
Output: 9999
Explanation: Changing the last digit 6 to 9 results in the maximum number.


Example 3:
Input: num = 9999
Output: 9999
Explanation: It is better not to apply any change.


Constraints:
`1 <= num <= 10^4`
`num`'s digits are 6 or 9.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`. Return all the words vertically in the same order in which they appear in `s`.

Words are returned as a list of strings, complete with spaces when is necessary. (Trailing spaces are not allowed).

Each word would be put on only one column and that in one column there will be only one word.


Example 1:
Input: s = ""HOW ARE YOU""
Output: [""HAY"",""ORO"",""WEU""]
Explanation: Each word is printed vertically. 
 ""HAY""
 ""ORO""
 ""WEU""

Example 2:
Input: s = ""TO BE OR NOT TO BE""
Output: [""TBONTB"",""OEROOE"",""   T""]
Explanation: Trailing spaces is not allowed. 
""TBONTB""
""OEROOE""
""   T""

Example 3:
Input: s = ""CONTEST IS COMING""
Output: [""CIC"",""OSO"",""N M"",""T I"",""E N"",""S G"",""T""]

Constraints:
`1 <= s.length <= 200`
`s` contains only upper case English letters.

It's guaranteed that there is only one space between 2 words.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree `root` and an integer `target`, delete all the leaf nodes with value `target`.

Note that once you delete a leaf node with value `target`, if it's parent node becomes a leaf node and has the value `target`, it should also be deleted (you need to continue doing that until you can't).


Example 1:
Input: root = [1,2,3,2,null,2,4], target = 2
Output: [1,null,3,null,4]
Explanation: Leaf nodes in green with value (target = 2) are removed (Picture in left). 
After removing, new nodes become leaf nodes with value (target = 2) (Picture in center).


Example 2:
Input: root = [1,3,3,3,2], target = 3
Output: [1,3,null,null,2]

Example 3:
Input: root = [1,2,null,2,null,2], target = 2
Output: [1]
Explanation: Leaf nodes in green with value (target = 2) are removed at each step.


Example 4:
Input: root = [1,1,1], target = 1
Output: []

Example 5:
Input: root = [1,2,3], target = 1
Output: [1,2,3]

Constraints:
`1 <= target <= 1000`
The given binary tree will have between `1` and `3000` nodes.

Each node's value is between `[1, 1000]`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a one-dimensional garden on the x-axis. The garden starts at the point `0` and ends at the point `n`. (i.e The length of the garden is `n`).

There are `n + 1` taps located at points `[0, 1, ..., n]` in the garden.

Given an integer `n` and an integer array `ranges` of length `n + 1` where `ranges[i]` (0-indexed) means the `i-th` tap can water the area `[i - ranges[i], i + ranges[i]]` if it was open.

Return the minimum number of taps that should be open to water the whole garden, If the garden cannot be watered return -1.


Example 1:
Input: n = 5, ranges = [3,4,1,1,0,0]
Output: 1
Explanation: The tap at point 0 can cover the interval [-3,3]
The tap at point 1 can cover the interval [-3,5]
The tap at point 2 can cover the interval [1,3]
The tap at point 3 can cover the interval [2,4]
The tap at point 4 can cover the interval [4,4]
The tap at point 5 can cover the interval [5,5]
Opening Only the second tap will water the whole garden [0,5]

Example 2:
Input: n = 3, ranges = [0,0,0,0]
Output: -1
Explanation: Even if you activate all the four taps you cannot water the whole garden.


Example 3:
Input: n = 7, ranges = [1,2,1,0,2,1,0,1]
Output: 3

Example 4:
Input: n = 8, ranges = [4,0,0,0,0,0,0,0,4]
Output: 2

Example 5:
Input: n = 8, ranges = [4,0,0,0,4,0,0,0,4]
Output: 1

Constraints:
`1 <= n <= 10^4`
`ranges.length == n + 1`
`0 <= ranges[i] <= 100`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a palindromic string of lowercase English letters `palindrome`, replace exactly one character with any lowercase English letter so that the resulting string is not a palindrome and that it is the lexicographically smallest one possible.

Return the resulting string. If there is no way to replace a character to make it not a palindrome, return an empty string.

A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly smaller than the corresponding character in `b`. For example, `""abcc""` is lexicographically smaller than `""abcd""` because the first position they differ is at the fourth character, and `'c'` is smaller than `'d'`.


Example 1:
Input: palindrome = ""abccba""
Output: ""aaccba""
Explanation: There are many ways to make ""abccba"" not a palindrome, such as ""zbccba"", ""aaccba"", and ""abacba"".

Of all the ways, ""aaccba"" is the lexicographically smallest.


Example 2:
Input: palindrome = ""a""
Output: """"
Explanation: There is no way to replace a single character to make ""a"" not a palindrome, so return an empty string.


Example 3:
Input: palindrome = ""aa""
Output: ""ab""

Example 4:
Input: palindrome = ""aba""
Output: ""abb""

Constraints:
`1 <= palindrome.length <= 1000`
`palindrome` consists of only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until reaching the matrix's end. For example, the matrix diagonal starting from `mat[2][0]`, where `mat` is a `6 x 3` matrix, includes cells `mat[2][0]`, `mat[3][1]`, and `mat[4][2]`.

Given an `m x n` matrix `mat` of integers, sort each matrix diagonal in ascending order and return the resulting matrix.


Example 1:
Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]

Example 2:
Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22,27,33,25,68,4],[84,28,14,11,5,50]]
Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27,31,36,50,66],[84,28,75,33,55,68]]

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= m, n <= 100`
`1 <= mat[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. The value of this array is defined as the sum of `|nums[i]-nums[i+1]|` for all `0 <= i < nums.length-1`.

You are allowed to select any subarray of the given array and reverse it. You can perform this operation only once.

Find maximum possible value of the final array.


Example 1:
Input: nums = [2,3,1,5,4]
Output: 10
Explanation: By reversing the subarray [3,1,5] the array becomes [2,5,1,3,4] whose value is 10.


Example 2:
Input: nums = [2,4,9,24,2,1,10]
Output: 68

Constraints:
`1 <= nums.length <= 3*10^4`
`-10^5 <= nums[i] <= 10^5`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:
Rank is an integer starting from 1.

The larger the element, the larger the rank. If two elements are equal, their rank must be the same.

Rank should be as small as possible.


Example 1:
Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.


Example 2:
Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: Same elements share the same rank.


Example 3:
Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]

Constraints:
`0 <= arr.length <= 105`
`-109 <= arr[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` consisting only of letters `'a'` and `'b'`. In a single step you can remove one palindromic subsequence from `s`.

Return the minimum number of steps to make the given string empty.

A string is a subsequence of a given string if it is generated by deleting some characters of a given string without changing its order. Note that a subsequence does not necessarily need to be contiguous.

A string is called palindrome if is one that reads the same backward as well as forward.


Example 1:
Input: s = ""ababa""
Output: 1
Explanation: s is already a palindrome, so its entirety can be removed in a single step.


Example 2:
Input: s = ""abb""
Output: 2
Explanation: ""abb"" -> ""bb"" -> """". 
Remove palindromic subsequence ""a"" then ""bb"".


Example 3:
Input: s = ""baabb""
Output: 2
Explanation: ""baabb"" -> ""b"" -> """". 
Remove palindromic subsequence ""baab"" then ""b"".


Constraints:
`1 <= s.length <= 1000`
`s[i]` is either `'a'` or `'b'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `restaurants` where  `restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]`. You have to filter the restaurants using three filters.

The `veganFriendly` filter will be either true (meaning you should only include restaurants with `veganFriendlyi` set to true) or false (meaning you can include any restaurant). In addition, you have the filters `maxPrice` and `maxDistance` which are the maximum value for price and distance of restaurants you should consider respectively.

Return the array of restaurant IDs after filtering, ordered by rating from highest to lowest. For restaurants with the same rating, order them by id from highest to lowest. For simplicity `veganFriendlyi` and `veganFriendly` take value 1 when it is true, and 0 when it is false.


Example 1:
Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10
Output: [3,1,5] 
Explanation: 
The restaurants are:
Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]
Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]
Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]
Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]
Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1] 
After filter restaurants with veganFriendly = 1, maxPrice = 50 and maxDistance = 10 we have restaurant 3, restaurant 1 and restaurant 5 (ordered by rating from highest to lowest). 

Example 2:
Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10
Output: [4,3,2,1,5]
Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, therefore all restaurants are considered.


Example 3:
Input: restaurants = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10,3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3
Output: [4,5]

Constraints:
`1 <= restaurants.length <= 10^4`
`restaurants[i].length == 5`
`1 <= idi, ratingi, pricei, distancei <= 10^5`
`1 <= maxPrice, maxDistance <= 10^5`
`veganFriendlyi` and `veganFriendly` are 0 or 1.

All `idi` are distinct.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities numbered from `0` to `n-1`. Given the array `edges` where `edges[i] = [fromi, toi, weighti]` represents a bidirectional and weighted edge between cities `fromi` and `toi`, and given the integer `distanceThreshold`.

Return the city with the smallest number of cities that are reachable through some path and whose distance is at most `distanceThreshold`, If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.


Example 1:
Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.


Example 2:
Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -> [City 1] 
City 1 -> [City 0, City 4] 
City 2 -> [City 3, City 4] 
City 3 -> [City 2, City 4]
City 4 -> [City 1, City 2, City 3] 
The city 0 has 1 neighboring city at a distanceThreshold = 2.


Constraints:
`2 <= n <= 100`
`1 <= edges.length <= n * (n - 1) / 2`
`edges[i].length == 3`
`0 <= fromi < toi < n`
`1 <= weighti, distanceThreshold <= 10^4`
All pairs `(fromi, toi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You want to schedule a list of jobs in `d` days. Jobs are dependent (i.e To work on the `i-th` job, you have to finish all the jobs `j` where `0 <= j < i`).

You have to finish at least one task every day. The difficulty of a job schedule is the sum of difficulties of each day of the `d` days. The difficulty of a day is the maximum difficulty of a job done in that day.

Given an array of integers `jobDifficulty` and an integer `d`. The difficulty of the `i-th` job is `jobDifficulty[i]`.

Return the minimum difficulty of a job schedule. If you cannot find a schedule for the jobs return -1.


Example 1:
Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: First day you can finish the first 5 jobs, total difficulty = 6.

Second day you can finish the last job, total difficulty = 1.

The difficulty of the schedule = 6 + 1 = 7 

Example 2:
Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you finish a job per day you will still have a free day. you cannot find a schedule for the given jobs.


Example 3:
Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: The schedule is one job per day. total difficulty will be 3.


Example 4:
Input: jobDifficulty = [7,1,7,1,7,1], d = 3
Output: 15

Example 5:
Input: jobDifficulty = [11,111,22,222,33,333,44,444], d = 6
Output: 843

Constraints:
`1 <= jobDifficulty.length <= 300`
`0 <= jobDifficulty[i] <= 1000`
`1 <= d <= 10`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` binary matrix `mat` of `1`'s (representing soldiers) and `0`'s (representing civilians). The soldiers are positioned in front of the civilians. That is, all the `1`'s will appear to the left of all the `0`'s in each row.

A row `i` is weaker than a row `j` if one of the following is true:
The number of soldiers in row `i` is less than the number of soldiers in row `j`.

Both rows have the same number of soldiers and `i < j`.

Return the indices of the `k` weakest rows in the matrix ordered from weakest to strongest.


Example 1:
Input: mat = 
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]], 
k = 3
Output: [2,0,3]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 2 
- Row 1: 4 
- Row 2: 1 
- Row 3: 2 
- Row 4: 5 
The rows ordered from weakest to strongest are [2,0,3,1,4].


Example 2:
Input: mat = 
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]], 
k = 2
Output: [0,2]
Explanation: 
The number of soldiers in each row is: 
- Row 0: 1 
- Row 1: 4 
- Row 2: 1 
- Row 3: 1 
The rows ordered from weakest to strongest are [0,2,3,1].


Constraints:
`m == mat.length`
`n == mat[i].length`
`2 <= n, m <= 100`
`1 <= k <= m`
`matrix[i][j]` is either 0 or 1.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr`.  You can choose a set of integers and remove all the occurrences of these integers in the array.

Return the minimum size of the set so that at least half of the integers of the array are removed.


Example 1:
Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Choosing {3,7} will make the new array [5,5,5,2,2] which has size 5 (i.e equal to half of the size of the old array).

Possible sets of size 2 are {3,5},{3,2},{5,2}.

Choosing set {2,7} is not possible as it will make the new array [3,3,3,3,5,5,5] which has size greater than half of the size of the old array.


Example 2:
Input: arr = [7,7,7,7,7,7]
Output: 1
Explanation: The only possible set you can choose is {7}. This will make the new array empty.


Example 3:
Input: arr = [1,9]
Output: 1

Example 4:
Input: arr = [1000,1000,3,7]
Output: 1

Example 5:
Input: arr = [1,2,3,4,5,6,7,8,9,10]
Output: 5

Constraints:
`1 <= arr.length <= 10^5`
`arr.length` is even.

`1 <= arr[i] <= 10^5`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree `root`. Split the binary tree into two subtrees by removing 1 edge such that the product of the sums of the subtrees are maximized.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: 110
Explanation: Remove the red edge and get 2 binary trees with sum 11 and 10. Their product is 110 (11*10)

Example 2:
Input: root = [1,null,2,3,4,null,null,5,6]
Output: 90
Explanation:  Remove the red edge and get 2 binary trees with sum 15 and 6.Their product is 90 (15*6)

Example 3:
Input: root = [2,3,9,10,7,8,6,5,4,11,1]
Output: 1025

Example 4:
Input: root = [1,1]
Output: 1

Constraints:
Each tree has at most `50000` nodes and at least `2` nodes.

Each node's value is between `[1, 10000]`.",0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr` and an integer `d`. In one step you can jump from index `i` to index:
`i + x` where: `i + x < arr.length` and ` 0 < x <= d`.

`i - x` where: `i - x >= 0` and ` 0 < x <= d`.

In addition, you can only jump from index `i` to index `j` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` and `j` (More formally `min(i, j) < k < max(i, j)`).

You can choose any index of the array and start jumping. Return the maximum number of indices you can visit.

Notice that you can not jump outside of the array at any time.


Example 1:
Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
Output: 4
Explanation: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.

Note that if you start at index 6 you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You cannot jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.

Similarly You cannot jump from index 3 to index 2 or index 1.


Example 2:
Input: arr = [3,3,3,3,3], d = 3
Output: 1
Explanation: You can start at any index. You always cannot jump to any index.


Example 3:
Input: arr = [7,6,5,4,3,2,1], d = 1
Output: 7
Explanation: Start at index 0. You can visit all the indicies. 

Example 4:
Input: arr = [7,1,7,1,7,1], d = 2
Output: 2

Example 5:
Input: arr = [66], d = 1
Output: 1

Constraints:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 10^5`
`1 <= d <= arr.length`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer `num`, return the number of steps to reduce it to zero. If the current number is even, you have to divide it by 2, otherwise, you have to subtract 1 from it.


Example 1:
Input: num = 14
Output: 6
Explanation: 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.

Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.


Example 2:
Input: num = 8
Output: 4
Explanation: 
Step 1) 8 is even; divide by 2 and obtain 4. 
Step 2) 4 is even; divide by 2 and obtain 2. 
Step 3) 2 is even; divide by 2 and obtain 1. 
Step 4) 1 is odd; subtract 1 and obtain 0.


Example 3:
Input: num = 123
Output: 12

Constraints:
`0 <= num <= 10^6`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr` and two integers `k` and `threshold`.

Return the number of sub-arrays of size `k` and average greater than or equal to `threshold`.


Example 1:
Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4
Output: 3
Explanation: Sub-arrays [2,5,5],[5,5,5] and [5,5,8] have averages 4, 5 and 6 respectively. All other sub-arrays of size 3 have averages less than 4 (the threshold).


Example 2:
Input: arr = [1,1,1,1,1], k = 1, threshold = 0
Output: 5

Example 3:
Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5
Output: 6
Explanation: The first 6 sub-arrays of size 3 have averages greater than 5. Note that averages are not integers.


Example 4:
Input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7
Output: 1

Example 5:
Input: arr = [4,4,4,4], k = 4, threshold = 1
Output: 1

Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^4`
`1 <= k <= arr.length`
`0 <= threshold <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two numbers, `hour` and `minutes`. Return the smaller angle (in degrees) formed between the `hour` and the `minute` hand.


Example 1:
Input: hour = 12, minutes = 30
Output: 165

Example 2:
Input: hour = 3, minutes = 30
Output: 75

Example 3:
Input: hour = 3, minutes = 15
Output: 7.5

Example 4:
Input: hour = 4, minutes = 50
Output: 155

Example 5:
Input: hour = 12, minutes = 0
Output: 0

Constraints:
`1 <= hour <= 12`
`0 <= minutes <= 59`
Answers within `10^-5` of the actual value will be accepted as correct.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`, you are initially positioned at the first index of the array.

In one step you can jump from index `i` to index:
`i + 1` where: `i + 1 < arr.length`.

`i - 1` where: `i - 1 >= 0`.

`j` where: `arr[i] == arr[j]` and `i != j`.

Return the minimum number of steps to reach the last index of the array.

Notice that you can not jump outside of the array at any time.


Example 1:
Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need three jumps from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.


Example 2:
Input: arr = [7]
Output: 0
Explanation: Start index is the last index. You don't need to jump.


Example 3:
Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7 which is last index of the array.


Example 4:
Input: arr = [6,1,9]
Output: 2

Example 5:
Input: arr = [11,22,7,7,7,7,7,7,7,22,13]
Output: 3

Constraints:
`1 <= arr.length <= 5 * 104`
`-108 <= arr[i] <= 108`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr` of integers, check if there exists two integers `N` and `M` such that `N` is the double of `M` ( i.e. `N = 2 * M`).

More formally check if there exists two indices `i` and `j` such that :
`i != j`
`0 <= i, j < arr.length`
`arr[i] == 2 * arr[j]`

Example 1:
Input: arr = [10,2,5,3]
Output: true
Explanation: N` = 10` is the double of M` = 5`,that is, `10 = 2 * 5`.


Example 2:
Input: arr = [7,1,14,11]
Output: true
Explanation: N` = 14` is the double of M` = 7`,that is, `14 = 2 * 7`.


Example 3:
Input: arr = [3,1,7,11]
Output: false
Explanation: In this case does not exist N and M, such that N = 2 * M.


Constraints:
`2 <= arr.length <= 500`
`-10^3 <= arr[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two equal-size strings `s` and `t`. In one step you can choose any character of `t` and replace it with another character.

Return the minimum number of steps to make `t` an anagram of `s`.

An Anagram of a string is a string that contains the same characters with a different (or the same) ordering.


Example 1:
Input: s = ""bab"", t = ""aba""
Output: 1
Explanation: Replace the first 'a' in t with b, t = ""bba"" which is anagram of s.


Example 2:
Input: s = ""leetcode"", t = ""practice""
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' from t with proper characters to make t anagram of s.


Example 3:
Input: s = ""anagram"", t = ""mangaar""
Output: 0
Explanation: ""anagram"" and ""mangaar"" are anagrams. 

Example 4:
Input: s = ""xxyyzz"", t = ""xxyyzz""
Output: 0

Example 5:
Input: s = ""friend"", t = ""family""
Output: 4

Constraints:
`1 <= s.length <= 50000`
`s.length == t.length`
`s` and `t` contain lower-case English letters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A social media company is trying to monitor activity on their site by analyzing the number of tweets that occur in select periods of time. These periods can be partitioned into smaller time chunks based on a certain frequency (every minute, hour, or day).

For example, the period `[10, 10000]` (in seconds) would be partitioned into the following time chunks with these frequencies:
Every minute (60-second chunks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`
Every hour (3600-second chunks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`
Every day (86400-second chunks): `[10,10000]`
Notice that the last chunk may be shorter than the specified frequency's chunk size and will always end with the end time of the period (`10000` in the above example).

Design and implement an API to help the company with their analysis.

Implement the `TweetCounts` class:
`TweetCounts()` Initializes the `TweetCounts` object.

`void recordTweet(String tweetName, int time)` Stores the `tweetName` at the recorded `time` (in seconds).

`List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` Returns a list of integers representing the number of tweets with `tweetName` in each time chunk for the given period of time `[startTime, endTime]` (in seconds) and frequency `freq`.

	
`freq` is one of `""minute""`, `""hour""`, or `""day""` representing a frequency of every minute, hour, or day respectively.


Example:
Input
[""TweetCounts"",""recordTweet"",""recordTweet"",""recordTweet"",""getTweetCountsPerFrequency"",""getTweetCountsPerFrequency"",""recordTweet"",""getTweetCountsPerFrequency""]
[[],[""tweet3"",0],[""tweet3"",60],[""tweet3"",10],[""minute"",""tweet3"",0,59],[""minute"",""tweet3"",0,60],[""tweet3"",120],[""hour"",""tweet3"",0,210]]
Output
[null,null,null,null,[2],[2,1],null,[4]]
Explanation
TweetCounts tweetCounts = new TweetCounts();
tweetCounts.recordTweet(""tweet3"", 0);                              // New tweet ""tweet3"" at time 0
tweetCounts.recordTweet(""tweet3"", 60);                             // New tweet ""tweet3"" at time 60
tweetCounts.recordTweet(""tweet3"", 10);                             // New tweet ""tweet3"" at time 10
tweetCounts.getTweetCountsPerFrequency(""minute"", ""tweet3"", 0, 59); // return [2]; chunk [0,59] had 2 tweets
tweetCounts.getTweetCountsPerFrequency(""minute"", ""tweet3"", 0, 60); // return [2,1]; chunk [0,59] had 2 tweets, chunk [60,60] had 1 tweet
tweetCounts.recordTweet(""tweet3"", 120);                            // New tweet ""tweet3"" at time 120
tweetCounts.getTweetCountsPerFrequency(""hour"", ""tweet3"", 0, 210);  // return [4]; chunk [0,210] had 4 tweets

Constraints:
`0 <= time, startTime, endTime <= 109`
`0 <= endTime - startTime <= 104`
There will be at most `104` calls in total to `recordTweet` and `getTweetCountsPerFrequency`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m * n` matrix `seats`  that represent seats distributions in a classroom. If a seat is broken, it is denoted by `'#'` character otherwise it is denoted by a `'.'` character.

Students can see the answers of those sitting next to the left, right, upper left and upper right, but he cannot see the answers of the student sitting directly in front or behind him. Return the maximum number of students that can take the exam together without any cheating being possible..

Students must be placed in seats in good condition.


Example 1:
Input: seats = [[""#"",""."",""#"",""#"",""."",""#""],
                [""."",""#"",""#"",""#"",""#"","".""],
                [""#"",""."",""#"",""#"",""."",""#""]]
Output: 4
Explanation: Teacher can place 4 students in available seats so they don't cheat on the exam. 

Example 2:
Input: seats = [[""."",""#""],
                [""#"",""#""],
                [""#"","".""],
                [""#"",""#""],
                [""."",""#""]]
Output: 3
Explanation: Place all students in available seats. 

Example 3:
Input: seats = [[""#"",""."",""."",""."",""#""],
                [""."",""#"",""."",""#"","".""],
                [""."",""."",""#"",""."","".""],
                [""."",""#"",""."",""#"","".""],
                [""#"",""."",""."",""."",""#""]]
Output: 10
Explanation: Place students in available seats in column 1, 3 and 5.


Constraints:
`seats` contains only characters `'.' and``'#'.`
`m == seats.length`
`n == seats[i].length`
`1 <= m <= 8`
`1 <= n <= 8`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m x n` matrix `grid` which is sorted in non-increasing order both row-wise and column-wise, return the number of negative numbers in `grid`.


Example 1:
Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,-3]]
Output: 8
Explanation: There are 8 negatives number in the matrix.


Example 2:
Input: grid = [[3,2],[1,0]]
Output: 0

Example 3:
Input: grid = [[1,-1],[-1,-1]]
Output: 3

Example 4:
Input: grid = [[-1]]
Output: 1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`
`-100 <= grid[i][j] <= 100`
Follow up: Could you find an `O(n + m)` solution?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the class `ProductOfNumbers` that supports two methods:
1.` add(int num)`
Adds the number `num` to the back of the current list of numbers.

2.` getProduct(int k)`
Returns the product of the last `k` numbers in the current list.

You can assume that always the current list has at least `k` numbers.

At any time, the product of any contiguous sequence of numbers will fit into a single 32-bit integer without overflowing.


Example:
Input
[""ProductOfNumbers"",""add"",""add"",""add"",""add"",""add"",""getProduct"",""getProduct"",""getProduct"",""add"",""getProduct""]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
Output
[null,null,null,null,null,null,20,40,0,null,32]
Explanation
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers.add(3);        // [3]
productOfNumbers.add(0);        // [3,0]
productOfNumbers.add(2);        // [3,0,2]
productOfNumbers.add(5);        // [3,0,2,5]
productOfNumbers.add(4);        // [3,0,2,5,4]
productOfNumbers.getProduct(2); // return 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers.getProduct(3); // return 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers.getProduct(4); // return 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8);        // [3,0,2,5,4,8]
productOfNumbers.getProduct(2); // return 32. The product of the last 2 numbers is 4 * 8 = 32 

Constraints:
There will be at most `40000` operations considering both `add` and `getProduct`.

`0 <= num <= 100`
`1 <= k <= 40000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `events` where `events[i] = [startDayi, endDayi]`. Every event `i` starts at `startDayi` and ends at `endDayi`.

You can attend an event `i` at any day `d` where `startTimei <= d <= endTimei`. Notice that you can only attend one event at any time `d`.

Return the maximum number of events you can attend.


Example 1:
Input: events = [[1,2],[2,3],[3,4]]
Output: 3
Explanation: You can attend all the three events.

One way to attend them all is as shown.

Attend the first event on day 1.

Attend the second event on day 2.

Attend the third event on day 3.


Example 2:
Input: events= [[1,2],[2,3],[3,4],[1,2]]
Output: 4

Example 3:
Input: events = [[1,4],[4,4],[2,2],[3,4],[1,1]]
Output: 4

Example 4:
Input: events = [[1,100000]]
Output: 1

Example 5:
Input: events = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]
Output: 7

Constraints:
`1 <= events.length <= 105`
`events[i].length == 2`
`1 <= startDayi <= endDayi <= 105`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `target`. From a starting array, `A` consisting of all 1's, you may perform the following procedure :
let `x` be the sum of all elements currently in your array.

choose index `i`, such that `0 <= i < target.size` and set the value of `A` at index `i` to `x`.

You may repeat this procedure as many times as needed.

Return True if it is possible to construct the `target` array from `A` otherwise return False.


Example 1:
Input: target = [9,3,5]
Output: true
Explanation: Start with [1, 1, 1] 
[1, 1, 1], sum = 3 choose index 1
[1, 3, 1], sum = 5 choose index 2
[1, 3, 5], sum = 9 choose index 0
[9, 3, 5] Done

Example 2:
Input: target = [1,1,1,2]
Output: false
Explanation: Impossible to create target array from [1,1,1,1].


Example 3:
Input: target = [8,5]
Output: true

Constraints:
`N == target.length`
`1 <= target.length <= 5 * 10^4`
`1 <= target[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`. You have to sort the integers in the array in ascending order by the number of 1's in their binary representation and in case of two or more integers have the same number of 1's you have to sort them in ascending order.

Return the sorted array.


Example 1:
Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explantion: [0] is the only integer with 0 bits.

[1,2,4,8] all have 1 bit.

[3,5,6] have 2 bits.

[7] has 3 bits.

The sorted array by bits is [0,1,2,4,8,3,5,6,7]

Example 2:
Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
Output: [1,2,4,8,16,32,64,128,256,512,1024]
Explantion: All integers have 1 bit in the binary representation, you should just sort them in ascending order.


Example 3:
Input: arr = [10000,10000]
Output: [10000,10000]

Example 4:
Input: arr = [2,3,5,7,11,13,17,19]
Output: [2,3,5,17,7,11,13,19]

Example 5:
Input: arr = [10,100,1000,10000]
Output: [10,100,10000,1000]

Constraints:
`1 <= arr.length <= 500`
`0 <= arr[i] <= 10^4`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a sale in a supermarket, there will be a `discount` every `n` customer.

There are some products in the supermarket where the id of the `i-th` product is `products[i]` and the price per unit of this product is `prices[i]`.

The system will count the number of customers and when the `n-th` customer arrive he/she will have a `discount` on the bill. (i.e if the cost is `x` the new cost is `x - (discount * x) / 100`). Then the system will start counting customers again.

The customer orders a certain amount of each product where `product[i]` is the id of the `i-th` product the customer ordered and `amount[i]` is the number of units the customer ordered of that product.

Implement the `Cashier` class:
`Cashier(int n, int discount, int[] products, int[] prices)` Initializes the object with `n`, the `discount`, the `products` and their `prices`.

`double getBill(int[] product, int[] amount)` returns the value of the bill and apply the discount if needed. Answers within `10^-5` of the actual value will be accepted as correct.


Example 1:
Input
[""Cashier"",""getBill"",""getBill"",""getBill"",""getBill"",""getBill"",""getBill"",""getBill""]
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[[7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2,3,5],[5,3,2]]]
Output
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
Explanation
Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
cashier.getBill([1,2],[1,2]);                        // return 500.0, bill = 1 * 100 + 2 * 200 = 500.

cashier.getBill([3,7],[10,10]);                      // return 4000.0
cashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]);    // return 800.0, The bill was 1600.0 but as this is the third customer, he has a discount of 50% which means his bill is only 1600 - 1600 * (50 / 100) = 800.

cashier.getBill([4],[10]);                           // return 4000.0
cashier.getBill([7,3],[10,10]);                      // return 4000.0
cashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill was 14700.0 but as the system counted three more customers, he will have a 50% discount and the bill becomes 7350.0
cashier.getBill([2,3,5],[5,3,2]);                    // return 2500.0

Constraints:
`1 <= n <= 10^4`
`0 <= discount <= 100`
`1 <= products.length <= 200`
`1 <= products[i] <= 200`
There are not repeated elements in the array `products`.

`prices.length == products.length`
`1 <= prices[i] <= 1000`
`1 <= product.length <= products.length`
`product[i]` exists in `products`.

`amount.length == product.length`
`1 <= amount[i] <= 1000`
At most `1000` calls will be made to `getBill`.

Answers within `10^-5` of the actual value will be accepted as correct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.


Example 1:
Input: s = ""abcabc""
Output: 10
Explanation: The substrings containing at least one occurrence of the characters a, b and c are ""abc"", ""abca"", ""abcab"", ""abcabc"", ""bca"", ""bcab"", ""bcabc"", ""cab"", ""cabc"" and ""abc"" (again). 

Example 2:
Input: s = ""aaacb""
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b and c are ""aaacb"", ""aacb"" and ""acb"". 

Example 3:
Input: s = ""abc""
Output: 1

Constraints:
`3 <= s.length <= 5 x 10^4`
`s` only consists of a, b or c characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` orders, each order consist in pickup and delivery services. 
Count all valid pickup/delivery possible sequences such that delivery(i) is always after of pickup(i). 
Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: n = 1
Output: 1
Explanation: Unique order (P1, D1), Delivery 1 always is after of Pickup 1.


Example 2:
Input: n = 2
Output: 6
Explanation: All possible orders: 
(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2,D2,P1,D1).

This is an invalid order (P1,D2,P2,D1) because Pickup 2 is after of Delivery 2.


Example 3:
Input: n = 3
Output: 90

Constraints:
`1 <= n <= 500`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` binary tree nodes numbered from `0` to `n - 1` where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and only if all the given nodes form exactly one valid binary tree.

If node `i` has no left child then `leftChild[i]` will equal `-1`, similarly for the right child.

Note that the nodes have no values and that we only use the node numbers in this problem.


Example 1:
Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
Output: true

Example 2:
Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
Output: false

Example 3:
Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
Output: false

Example 4:
Input: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]
Output: false

Constraints:
`1 <= n <= 104`
`leftChild.length == rightChild.length == n`
`-1 <= leftChild[i], rightChild[i] <= n - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `num`, find the closest two integers in absolute difference whose product equals `num + 1` or `num + 2`.

Return the two integers in any order.


Example 1:
Input: num = 8
Output: [3,3]
Explanation: For num + 1 = 9, the closest divisors are 3 & 3, for num + 2 = 10, the closest divisors are 2 & 5, hence 3 & 3 is chosen.


Example 2:
Input: num = 123
Output: [5,25]

Example 3:
Input: num = 999
Output: [40,25]

Constraints:
`1 <= num <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array of `digits`, return the largest multiple of three that can be formed by concatenating some of the given digits in any order.

Since the answer may not fit in an integer data type, return the answer as a string.

If there is no answer return an empty string.


Example 1:
Input: digits = [8,1,9]
Output: ""981""

Example 2:
Input: digits = [8,6,7,1,0]
Output: ""8760""

Example 3:
Input: digits = [1]
Output: """"

Example 4:
Input: digits = [0,0,0,0,0,0]
Output: ""0""

Constraints:
`1 <= digits.length <= 10^4`
`0 <= digits[i] <= 9`
The returning answer must not contain unnecessary leading zeros.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `nums`, for each `nums[i]` find out how many numbers in the array are smaller than it. That is, for each `nums[i]` you have to count the number of valid `j's` such that `j != i` and `nums[j] < nums[i]`.

Return the answer in an array.


Example 1:
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
Explanation: 
For nums[0]=8 there exist four smaller numbers than it (1, 2, 2 and 3). 
For nums[1]=1 does not exist any smaller number than it.

For nums[2]=2 there exist one smaller number than it (1). 
For nums[3]=2 there exist one smaller number than it (1). 
For nums[4]=3 there exist three smaller numbers than it (1, 2 and 2).


Example 2:
Input: nums = [6,5,4,8]
Output: [2,1,0,3]

Example 3:
Input: nums = [7,7,7,7]
Output: [0,0,0,0]

Constraints:
`2 <= nums.length <= 500`
`0 <= nums[i] <= 100`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a special ranking system, each voter gives a rank from highest to lowest to all teams participated in the competition.

The ordering of teams is decided by who received the most position-one votes. If two or more teams tie in the first position, we consider the second position to resolve the conflict, if they tie again, we continue this process until the ties are resolved. If two or more teams are still tied after considering all positions, we rank them alphabetically based on their team letter.

Given an array of strings `votes` which is the votes of all voters in the ranking systems. Sort all teams according to the ranking system described above.

Return a string of all teams sorted by the ranking system.


Example 1:
Input: votes = [""ABC"",""ACB"",""ABC"",""ACB"",""ACB""]
Output: ""ACB""
Explanation: Team A was ranked first place by 5 voters. No other team was voted as first place so team A is the first team.

Team B was ranked second by 2 voters and was ranked third by 3 voters.

Team C was ranked second by 3 voters and was ranked third by 2 voters.

As most of the voters ranked C second, team C is the second team and team B is the third.


Example 2:
Input: votes = [""WXYZ"",""XYZW""]
Output: ""XWYZ""
Explanation: X is the winner due to tie-breaking rule. X has same votes as W for the first position but X has one vote as second position while W doesn't have any votes as second position. 

Example 3:
Input: votes = [""ZMNAGUEDSJYLBOPHRQICWFXTVK""]
Output: ""ZMNAGUEDSJYLBOPHRQICWFXTVK""
Explanation: Only one voter so his votes are used for the ranking.


Example 4:
Input: votes = [""BCA"",""CAB"",""CBA"",""ABC"",""ACB"",""BAC""]
Output: ""ABC""
Explanation: 
Team A was ranked first by 2 voters, second by 2 voters and third by 2 voters.

Team B was ranked first by 2 voters, second by 2 voters and third by 2 voters.

Team C was ranked first by 2 voters, second by 2 voters and third by 2 voters.

There is a tie and we rank teams ascending by their IDs.


Example 5:
Input: votes = [""M"",""M"",""M"",""M""]
Output: ""M""
Explanation: Only team M in the competition so it has the first rank.


Constraints:
`1 <= votes.length <= 1000`
`1 <= votes[i].length <= 26`
`votes[i].length == votes[j].length` for `0 <= i, j < votes.length`.

`votes[i][j]` is an English upper-case letter.

All characters of `votes[i]` are unique.

All the characters that occur in `votes[0]` also occur in `votes[j]` where `1 <= j < votes.length`.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree `root` and a linked list with `head` as the first node. 
Return True if all the elements in the linked list starting from the `head` correspond to some downward path connected in the binary tree otherwise return False.

In this context downward path means a path that starts at some node and goes downwards.


Example 1:
Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: true
Explanation: Nodes in blue form a subpath in the binary Tree.  

Example 2:
Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: true

Example 3:
Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
Output: false
Explanation: There is no path in the binary tree that contains all the elements of the linked list from `head`.


Constraints:
The number of nodes in the tree will be in the range `[1, 2500]`.

The number of nodes in the list will be in the range `[1, 100]`.

`1 <= Node.val <= 100` for each node in the linked list and binary tree.",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a m x n `grid`. Each cell of the `grid` has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of `grid[i][j]` can be:
1 which means go to the cell to the right. (i.e go from `grid[i][j]` to `grid[i][j + 1]`)
2 which means go to the cell to the left. (i.e go from `grid[i][j]` to `grid[i][j - 1]`)
3 which means go to the lower cell. (i.e go from `grid[i][j]` to `grid[i + 1][j]`)
4 which means go to the upper cell. (i.e go from `grid[i][j]` to `grid[i - 1][j]`)
Notice that there could be some invalid signs on the cells of the `grid` which points outside the `grid`.

You will initially start at the upper left cell `(0,0)`. A valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)` following the signs on the grid. The valid path doesn't have to be the shortest.

You can modify the sign on a cell with `cost = 1`. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.


Example 1:
Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).

The path to (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change the arrow to down with cost = 1 --> (1, 3) --> (1, 2) --> (1, 1) --> (1, 0) change the arrow to down with cost = 1 --> (2, 0) --> (2, 1) --> (2, 2) --> (2, 3) change the arrow to down with cost = 1 --> (3, 3)
The total cost = 3.


Example 2:
Input: grid = [[1,1,3],[3,2,2],[1,1,4]]
Output: 0
Explanation: You can follow the path from (0, 0) to (2, 2).


Example 3:
Input: grid = [[1,2],[4,3]]
Output: 1

Example 4:
Input: grid = [[2,2,2],[2,2,2]]
Output: 3

Example 5:
Input: grid = [[4]]
Output: 0

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`. You should re-order the string using the following algorithm:
Pick the smallest character from `s` and append it to the result.

Pick the smallest character from `s` which is greater than the last appended character to the result and append it.

Repeat step 2 until you cannot pick more characters.

Pick the largest character from `s` and append it to the result.

Pick the largest character from `s` which is smaller than the last appended character to the result and append it.

Repeat step 5 until you cannot pick more characters.

Repeat the steps from 1 to 6 until you pick all characters from `s`.

In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.

Return the result string after sorting `s` with this algorithm.


Example 1:
Input: s = ""aaaabbbbcccc""
Output: ""abccbaabccba""
Explanation: After steps 1, 2 and 3 of the first iteration, result = ""abc""
After steps 4, 5 and 6 of the first iteration, result = ""abccba""
First iteration is done. Now s = ""aabbcc"" and we go back to step 1
After steps 1, 2 and 3 of the second iteration, result = ""abccbaabc""
After steps 4, 5 and 6 of the second iteration, result = ""abccbaabccba""

Example 2:
Input: s = ""rat""
Output: ""art""
Explanation: The word ""rat"" becomes ""art"" after re-ordering it with the mentioned algorithm.


Example 3:
Input: s = ""leetcode""
Output: ""cdelotee""

Example 4:
Input: s = ""ggggggg""
Output: ""ggggggg""

Example 5:
Input: s = ""spo""
Output: ""ops""

Constraints:
`1 <= s.length <= 500`
`s` contains only lower-case English letters.",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the string `s`, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.


Example 1:
Input: s = ""eleetminicoworoep""
Output: 13
Explanation: The longest substring is ""leetminicowor"" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.


Example 2:
Input: s = ""leetcodeisgreat""
Output: 5
Explanation: The longest substring is ""leetc"" which contains two e's.


Example 3:
Input: s = ""bcbcbc""
Output: 6
Explanation: In this case, the given string ""bcbcbc"" is the longest because all vowels: a, e, i, o and u appear zero times.


Constraints:
`1 <= s.length <= 5 x 10^5`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `root` of a binary tree.

A ZigZag path for a binary tree is defined as follow:
Choose any node in the binary tree and a direction (right or left).

If the current direction is right, move to the right child of the current node; otherwise, move to the left child.

Change the direction from right to left or from left to right.

Repeat the second and third steps until you can't move in the tree.

Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.


Example 1:
Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
Output: 3
Explanation: Longest ZigZag path in blue nodes (right -> left -> right).


Example 2:
Input: root = [1,1,1,null,1,null,null,1,1,null,1]
Output: 4
Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).


Example 3:
Input: root = [1]
Output: 0

Constraints:
The number of nodes in the tree is in the range `[1, 5 * 104]`.

`1 <= Node.val <= 100`",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree `root`, the task is to return the maximum sum of all keys of any sub-tree which is also a Binary Search Tree (BST).

Assume a BST is defined as follows:
The left subtree of a node contains only nodes with keys less than the node's key.

The right subtree of a node contains only nodes with keys greater than the node's key.

Both the left and right subtrees must also be binary search trees.


Example 1:
Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: Maximum sum in a valid Binary search tree is obtained in root node with key equal to 3.


Example 2:
Input: root = [4,3,null,1,2]
Output: 2
Explanation: Maximum sum in a valid Binary search tree is obtained in a single root node with key equal to 2.


Example 3:
Input: root = [-4,-2,-5]
Output: 0
Explanation: All values are negatives. Return an empty BST.


Example 4:
Input: root = [2,1,3]
Output: 6

Example 5:
Input: root = [5,4,8,3,null,6,3]
Output: 7

Constraints:
The given binary tree will have between `1` and `40000` nodes.

Each node's value is between `[-4 * 10^4 , 4 * 10^4]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Given an integer `n`, return a string with `n` characters such that each character in such string occurs an odd number of times.

The returned string must contain only lowercase English letters. If there are multiples valid strings, return any of them.  

Example 1:
Input: n = 4
Output: ""pppz""
Explanation: ""pppz"" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as ""ohhh"" and ""love"".


Example 2:
Input: n = 2
Output: ""xy""
Explanation: ""xy"" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as ""ag"" and ""ur"".


Example 3:
Input: n = 7
Output: ""holasss""

Constraints:
`1 <= n <= 500`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a room with `n` bulbs, numbered from `1` to `n`, arranged in a row from left to right. Initially, all the bulbs are turned off.

At moment k (for k from `0` to `n - 1`), we turn on the `light[k]` bulb. A bulb change color to blue only if it is on and all the previous bulbs (to the left) are turned on too.

Return the number of moments in which all turned on bulbs are blue.


Example 1:
Input: light = [2,1,3,5,4]
Output: 3
Explanation: All bulbs turned on, are blue at the moment 1, 2 and 4.


Example 2:
Input: light = [3,2,4,1,5]
Output: 2
Explanation: All bulbs turned on, are blue at the moment 3, and 4 (index-0).


Example 3:
Input: light = [4,1,2,3]
Output: 1
Explanation: All bulbs turned on, are blue at the moment 3 (index-0).

Bulb 4th changes to blue at the moment 3.


Example 4:
Input: light = [2,1,4,3,6,5]
Output: 3

Example 5:
Input: light = [1,2,3,4,5,6]
Output: 6

Constraints:
`n == light.length`
`1 <= n <= 5 * 10^4`
`light` is a permutation of  `[1, 2, ..., n]`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A company has `n` employees with a unique ID for each employee from `0` to `n - 1`. The head of the company is the one with `headID`.

Each employee has one direct manager given in the `manager` array where `manager[i]` is the direct manager of the `i-th` employee, `manager[headID] = -1`. Also, it is guaranteed that the subordination relationships have a tree structure.

The head of the company wants to inform all the company employees of an urgent piece of news. He will inform his direct subordinates, and they will inform their subordinates, and so on until all employees know about the urgent news.

The `i-th` employee needs `informTime[i]` minutes to inform all of his direct subordinates (i.e., After informTime[i] minutes, all his direct subordinates can start spreading the news).

Return the number of minutes needed to inform all the employees about the urgent news.


Example 1:
Input: n = 1, headID = 0, manager = [-1], informTime = [0]
Output: 0
Explanation: The head of the company is the only employee in the company.


Example 2:
Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]
Output: 1
Explanation: The head of the company with id = 2 is the direct manager of all the employees in the company and needs 1 minute to inform them all.

The tree structure of the employees in the company is shown.


Example 3:
Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]
Output: 21
Explanation: The head has id = 6. He will inform employee with id = 5 in 1 minute.

The employee with id = 5 will inform the employee with id = 4 in 2 minutes.

The employee with id = 4 will inform the employee with id = 3 in 3 minutes.

The employee with id = 3 will inform the employee with id = 2 in 4 minutes.

The employee with id = 2 will inform the employee with id = 1 in 5 minutes.

The employee with id = 1 will inform the employee with id = 0 in 6 minutes.

Needed time = 1 + 2 + 3 + 4 + 5 + 6 = 21.


Example 4:
Input: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1,1,1,1,1,1,1,0,0,0,0,0,0,0,0]
Output: 3
Explanation: The first minute the head will inform employees 1 and 2.

The second minute they will inform employees 3, 4, 5 and 6.

The third minute they will inform the rest of employees.


Example 5:
Input: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]
Output: 1076

Constraints:
`1 <= n <= 105`
`0 <= headID < n`
`manager.length == n`
`0 <= manager[i] < n`
`manager[headID] == -1`
`informTime.length == n`
`0 <= informTime[i] <= 1000`
`informTime[i] == 0` if employee `i` has no subordinates.

It is guaranteed that all the employees can be informed.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected tree consisting of `n` vertices numbered from `1` to `n`. A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex if they are directly connected. The frog can not jump back to a visited vertex. In case the frog can jump to several vertices, it jumps randomly to one of them with the same probability. Otherwise, when the frog can not jump to any unvisited vertex, it jumps forever on the same vertex.

The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`.

Return the probability that after `t` seconds the frog is on the vertex `target`.


Example 1:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4
Output: 0.16666666666666666 
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 probability to the vertex 2 after second 1 and then jumping with 1/2 probability to vertex 4 after second 2. Thus the probability for the frog is on the vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666. 

Example 2:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7
Output: 0.3333333333333333
Explanation: The figure above shows the given graph. The frog starts at vertex 1, jumping with 1/3 = 0.3333333333333333 probability to the vertex 7 after second 1. 

Example 3:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6
Output: 0.16666666666666666

Constraints:
`1 <= n <= 100`
`edges.length == n - 1`
`edges[i].length == 2`
`1 <= ai, bi <= n`
`1 <= t <= 50`
`1 <= target <= n`
Answers within `10-5` of the actual value will be accepted as correct.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.

The `cloned` tree is a copy of the `original` tree.

Return a reference to the same node in the `cloned` tree.

Note that you are not allowed to change any of the two trees or the `target` node and the answer must be a reference to a node in the `cloned` tree.

Follow up: Solve the problem if repeated values on the tree are allowed.


Example 1:
Input: tree = [7,4,3,null,null,6,19], target = 3
Output: 3
Explanation: In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.


Example 2:
Input: tree = [7], target =  7
Output: 7

Example 3:
Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4
Output: 4

Example 4:
Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5
Output: 5

Example 5:
Input: tree = [1,2,null,3], target = 2
Output: 2

Constraints:
The number of nodes in the `tree` is in the range `[1, 10^4]`.

The values of the nodes of the `tree` are unique.

`target` node is a node from the `original` tree and is not `null`.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m * n` matrix of distinct numbers, return all lucky numbers in the matrix in any order.

A lucky number is an element of the matrix such that it is the minimum element in its row and maximum in its column.


Example 1:
Input: matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number since it is the minimum in its row and the maximum in its column

Example 2:
Input: matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number since it is the minimum in its row and the maximum in its column.


Example 3:
Input: matrix = [[7,8],[1,2]]
Output: [7]

Constraints:
`m == mat.length`
`n == mat[i].length`
`1 <= n, m <= 50`
`1 <= matrix[i][j] <= 10^5`.

All elements in the matrix are distinct.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a stack which supports the following operations.

Implement the `CustomStack` class:
`CustomStack(int maxSize)` Initializes the object with `maxSize` which is the maximum number of elements in the stack or do nothing if the stack reached the `maxSize`.

`void push(int x)` Adds `x` to the top of the stack if the stack hasn't reached the `maxSize`.

`int pop()` Pops and returns the top of stack or -1 if the stack is empty.

`void inc(int k, int val)` Increments the bottom `k` elements of the stack by `val`. If there are less than `k` elements in the stack, just increment all the elements in the stack.


Example 1:
Input
[""CustomStack"",""push"",""push"",""pop"",""push"",""push"",""push"",""increment"",""increment"",""pop"",""pop"",""pop"",""pop""]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
Output
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
Explanation
CustomStack customStack = new CustomStack(3); // Stack is Empty []
customStack.push(1);                          // stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.pop();                            // return 2 --> Return top of the stack 2, stack becomes [1]
customStack.push(2);                          // stack becomes [1, 2]
customStack.push(3);                          // stack becomes [1, 2, 3]
customStack.push(4);                          // stack still [1, 2, 3], Don't add another elements as size is 4
customStack.increment(5, 100);                // stack becomes [101, 102, 103]
customStack.increment(2, 100);                // stack becomes [201, 202, 103]
customStack.pop();                            // return 103 --> Return top of the stack 103, stack becomes [201, 202]
customStack.pop();                            // return 202 --> Return top of the stack 102, stack becomes [201]
customStack.pop();                            // return 201 --> Return top of the stack 101, stack becomes []
customStack.pop();                            // return -1 --> Stack is empty return -1.


Constraints:
`1 <= maxSize <= 1000`
`1 <= x <= 1000`
`1 <= k <= 1000`
`0 <= val <= 100`
At most `1000` calls will be made to each method of `increment`, `push` and `pop` each separately.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary search tree, return a balanced binary search tree with the same node values.

A binary search tree is balanced if and only if the depth of the two subtrees of every node never differ by more than 1.

If there is more than one answer, return any of them.


Example 1:
Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.


Constraints:
The number of nodes in the tree is between `1` and `10^4`.

The tree nodes will have distinct values between `1` and `10^5`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"There are `n` engineers numbered from 1 to `n` and two arrays: `speed` and `efficiency`, where `speed[i]` and `efficiency[i]` represent the speed and efficiency for the i-th engineer respectively. Return the maximum performance of a team composed of at most `k` engineers, since the answer can be a huge number, return this modulo 10^9 + 7.

The performance of a team is the sum of their engineers' speeds multiplied by the minimum efficiency among their engineers. 

Example 1:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
Output: 60
Explanation: 
We have the maximum performance of the team by selecting engineer 2 (with speed=10 and efficiency=4) and engineer 5 (with speed=5 and efficiency=7). That is, performance = (10 + 5) * min(4, 7) = 60.


Example 2:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
Output: 68
Explanation:
This is the same example as the first but k = 3. We can select engineer 1, engineer 2 and engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.


Example 3:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
Output: 72

Constraints:
`1 <= n <= 10^5`
`speed.length == n`
`efficiency.length == n`
`1 <= speed[i] <= 10^5`
`1 <= efficiency[i] <= 10^8`
`1 <= k <= n`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A cinema has `n` rows of seats, numbered from 1 to `n` and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.

Given the array `reservedSeats` containing the numbers of seats already reserved, for example, `reservedSeats[i] = [3,8]` means the seat located in row 3 and labelled with 8 is already reserved.

Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.


Example 1:
Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
Output: 4
Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.


Example 2:
Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
Output: 2

Example 3:
Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
Output: 4

Constraints:
`1 <= n <= 10^9`
`1 <= reservedSeats.length <= min(10*n, 10^4)`
`reservedSeats[i].length == 2`
`1 <= reservedSeats[i][0] <= n`
`1 <= reservedSeats[i][1] <= 10`
All `reservedSeats[i]` are distinct.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The power of an integer `x` is defined as the number of steps needed to transform `x` into `1` using the following steps:
if `x` is even then `x = x / 2`
if `x` is odd then `x = 3 * x + 1`
For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).

Given three integers `lo`, `hi` and `k`. The task is to sort all integers in the interval `[lo, hi]` by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.

Return the `k-th` integer in the range `[lo, hi]` sorted by the power value.

Notice that for any integer `x` `(lo <= x <= hi)` it is guaranteed that `x` will transform into `1` using these steps and that the power of `x` is will fit in 32 bit signed integer.


Example 1:
Input: lo = 12, hi = 15, k = 2
Output: 13
Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)
The power of 13 is 9
The power of 14 is 17
The power of 15 is 17
The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.

Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.


Example 2:
Input: lo = 1, hi = 1, k = 1
Output: 1

Example 3:
Input: lo = 7, hi = 11, k = 4
Output: 7
Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].

The interval sorted by power is [8, 10, 11, 7, 9].

The fourth number in the sorted array is 7.


Example 4:
Input: lo = 10, hi = 20, k = 5
Output: 13

Example 5:
Input: lo = 1, hi = 1000, k = 777
Output: 570

Constraints:
`1 <= lo <= hi <= 1000`
`1 <= k <= hi - lo + 1`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a pizza with 3n slices of varying size, you and your friends will take slices of pizza as follows:
You will pick any pizza slice.

Your friend Alice will pick next slice in anti clockwise direction of your pick. 
Your friend Bob will pick next slice in clockwise direction of your pick.

Repeat until there are no more slices of pizzas.

Sizes of Pizza slices is represented by circular array `slices` in clockwise direction.

Return the maximum possible sum of slice sizes which you can have.


Example 1:
Input: slices = [1,2,3,4,5,6]
Output: 10
Explanation: Pick pizza slice of size 4, Alice and Bob will pick slices with size 3 and 5 respectively. Then Pick slices with size 6, finally Alice and Bob will pick slice of size 2 and 1 respectively. Total = 4 + 6.


Example 2:
Input: slices = [8,9,8,6,1,1]
Output: 16
Output: Pick pizza slice of size 8 in each turn. If you pick slice with size 9 your partners will pick slices of size 8.

Example 3:
Input: slices = [4,1,2,5,8,3,1,9,7]
Output: 21

Example 4:
Input: slices = [3,1,2]
Output: 3

Constraints:
`1 <= slices.length <= 500`
`slices.length % 3 == 0`
`1 <= slices[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays of integers `nums` and `index`. Your task is to create target array under the following rules:
Initially target array is empty.

From left to right read nums[i] and index[i], insert at index `index[i]` the value `nums[i]` in target array.

Repeat the previous step until there are no elements to read in `nums` and `index.`
Return the target array.

It is guaranteed that the insertion operations will be valid.


Example 1:
Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]
Output: [0,4,1,3,2]
Explanation:
nums       index     target
0            0        [0]
1            1        [0,1]
2            2        [0,1,2]
3            2        [0,1,3,2]
4            1        [0,4,1,3,2]

Example 2:
Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]
Output: [0,1,2,3,4]
Explanation:
nums       index     target
1            0        [1]
2            1        [1,2]
3            2        [1,2,3]
4            3        [1,2,3,4]
0            0        [0,1,2,3,4]

Example 3:
Input: nums = [1], index = [0]
Output: [1]

Constraints:
`1 <= nums.length, index.length <= 100`
`nums.length == index.length`
`0 <= nums[i] <= 100`
`0 <= index[i] <= i`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return the sum of divisors of the integers in that array that have exactly four divisors.

If there is no such integer in the array, return `0`.


Example 1:
Input: nums = [21,4,7]
Output: 32
Explanation:
21 has 4 divisors: 1, 3, 7, 21
4 has 3 divisors: 1, 2, 4
7 has 2 divisors: 1, 7
The answer is the sum of divisors of 21 only.


Constraints:
`1 <= nums.length <= 10^4`
`1 <= nums[i] <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a m x n `grid`. Each cell of the `grid` represents a street. The street of `grid[i][j]` can be:
1 which means a street connecting the left cell and the right cell.

2 which means a street connecting the upper cell and the lower cell.

3 which means a street connecting the left cell and the lower cell.

4 which means a street connecting the right cell and the lower cell.

5 which means a street connecting the left cell and the upper cell.

6 which means a street connecting the right cell and the upper cell.

You will initially start at the street of the upper-left cell `(0,0)`. A valid path in the grid is a path which starts from the upper left cell `(0,0)` and ends at the bottom-right cell `(m - 1, n - 1)`. The path should only follow the streets.

Notice that you are not allowed to change any street.

Return true if there is a valid path in the grid or false otherwise.


Example 1:
Input: grid = [[2,4,3],[6,5,2]]
Output: true
Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).


Example 2:
Input: grid = [[1,2,1],[1,2,1]]
Output: false
Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)

Example 3:
Input: grid = [[1,1,2]]
Output: false
Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).


Example 4:
Input: grid = [[1,1,1,1,1,1,3]]
Output: true

Example 5:
Input: grid = [[2],[2],[2],[2],[2],[2],[6]]
Output: true

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 300`
`1 <= grid[i][j] <= 6`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is called a happy prefix if is a non-empty prefix which is also a suffix (excluding itself).

Given a string `s`. Return the longest happy prefix of `s` .

Return an empty string if no such prefix exists.


Example 1:
Input: s = ""level""
Output: ""l""
Explanation: s contains 4 prefix excluding itself (""l"", ""le"", ""lev"", ""leve""), and suffix (""l"", ""el"", ""vel"", ""evel""). The largest prefix which is also suffix is given by ""l"".


Example 2:
Input: s = ""ababab""
Output: ""abab""
Explanation: ""abab"" is the largest prefix which is also suffix. They can overlap in the original string.


Example 3:
Input: s = ""leetcodeleet""
Output: ""leet""

Example 4:
Input: s = ""a""
Output: """"

Constraints:
`1 <= s.length <= 10^5`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`, a lucky integer is an integer which has a frequency in the array equal to its value.

Return a lucky integer in the array. If there are multiple lucky integers return the largest of them. If there is no lucky integer return -1.


Example 1:
Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2 because frequency[2] == 2.


Example 2:
Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2 and 3 are all lucky numbers, return the largest of them.


Example 3:
Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.


Example 4:
Input: arr = [5]
Output: -1

Example 5:
Input: arr = [7,7,7,7,7,7,7]
Output: 7

Constraints:
`1 <= arr.length <= 500`
`1 <= arr[i] <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` soldiers standing in a line. Each soldier is assigned a unique `rating` value.

You have to form a team of 3 soldiers amongst them under the following rules:
Choose 3 soldiers with index (`i`, `j`, `k`) with rating (`rating[i]`, `rating[j]`, `rating[k]`).

A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).

Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).


Example 1:
Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 

Example 2:
Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.


Example 3:
Input: rating = [1,2,3,4]
Output: 4

Constraints:
`n == rating.length`
`3 <= n <= 1000`
`1 <= rating[i] <= 105`
All the integers in `rating` are unique.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An underground railway system is keeping track of customer travel times between different stations. They are using this data to calculate the average time it takes to travel from one station to another.

Implement the `UndergroundSystem` class:
`void checkIn(int id, string stationName, int t)`
	
A customer with a card ID equal to `id`, checks in at the station `stationName` at time `t`.

A customer can only be checked into one place at a time.

`void checkOut(int id, string stationName, int t)`
	
A customer with a card ID equal to `id`, checks out from the station `stationName` at time `t`.

`double getAverageTime(string startStation, string endStation)`
	
Returns the average time it takes to travel from `startStation` to `endStation`.

The average time is computed from all the previous traveling times from `startStation` to `endStation` that happened directly, meaning a check in at `startStation` followed by a check out from `endStation`.

The time it takes to travel from `startStation` to `endStation` may be different from the time it takes to travel from `endStation` to `startStation`.

There will be at least one customer that has traveled from `startStation` to `endStation` before `getAverageTime` is called.

You may assume all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time `t1` then checks out at time `t2`, then `t1 < t2`. All events happen in chronological order.


Example 1:
Input
[""UndergroundSystem"",""checkIn"",""checkIn"",""checkIn"",""checkOut"",""checkOut"",""checkOut"",""getAverageTime"",""getAverageTime"",""checkIn"",""getAverageTime"",""checkOut"",""getAverageTime""]
[[],[45,""Leyton"",3],[32,""Paradise"",8],[27,""Leyton"",10],[45,""Waterloo"",15],[27,""Waterloo"",20],[32,""Cambridge"",22],[""Paradise"",""Cambridge""],[""Leyton"",""Waterloo""],[10,""Leyton"",24],[""Leyton"",""Waterloo""],[10,""Waterloo"",38],[""Leyton"",""Waterloo""]]
Output
[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]
Explanation
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(45, ""Leyton"", 3);
undergroundSystem.checkIn(32, ""Paradise"", 8);
undergroundSystem.checkIn(27, ""Leyton"", 10);
undergroundSystem.checkOut(45, ""Waterloo"", 15);  // Customer 45 ""Leyton"" -> ""Waterloo"" in 15-3 = 12
undergroundSystem.checkOut(27, ""Waterloo"", 20);  // Customer 27 ""Leyton"" -> ""Waterloo"" in 20-10 = 10
undergroundSystem.checkOut(32, ""Cambridge"", 22); // Customer 32 ""Paradise"" -> ""Cambridge"" in 22-8 = 14
undergroundSystem.getAverageTime(""Paradise"", ""Cambridge""); // return 14.00000. One trip ""Paradise"" -> ""Cambridge"", (14) / 1 = 14
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo"");    // return 11.00000. Two trips ""Leyton"" -> ""Waterloo"", (10 + 12) / 2 = 11
undergroundSystem.checkIn(10, ""Leyton"", 24);
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo"");    // return 11.00000
undergroundSystem.checkOut(10, ""Waterloo"", 38);  // Customer 10 ""Leyton"" -> ""Waterloo"" in 38-24 = 14
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo"");    // return 12.00000. Three trips ""Leyton"" -> ""Waterloo"", (10 + 12 + 14) / 3 = 12

Example 2:
Input
[""UndergroundSystem"",""checkIn"",""checkOut"",""getAverageTime"",""checkIn"",""checkOut"",""getAverageTime"",""checkIn"",""checkOut"",""getAverageTime""]
[[],[10,""Leyton"",3],[10,""Paradise"",8],[""Leyton"",""Paradise""],[5,""Leyton"",10],[5,""Paradise"",16],[""Leyton"",""Paradise""],[2,""Leyton"",21],[2,""Paradise"",30],[""Leyton"",""Paradise""]]
Output
[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]
Explanation
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(10, ""Leyton"", 3);
undergroundSystem.checkOut(10, ""Paradise"", 8); // Customer 10 ""Leyton"" -> ""Paradise"" in 8-3 = 5
undergroundSystem.getAverageTime(""Leyton"", ""Paradise""); // return 5.00000, (5) / 1 = 5
undergroundSystem.checkIn(5, ""Leyton"", 10);
undergroundSystem.checkOut(5, ""Paradise"", 16); // Customer 5 ""Leyton"" -> ""Paradise"" in 16-10 = 6
undergroundSystem.getAverageTime(""Leyton"", ""Paradise""); // return 5.50000, (5 + 6) / 2 = 5.5
undergroundSystem.checkIn(2, ""Leyton"", 21);
undergroundSystem.checkOut(2, ""Paradise"", 30); // Customer 2 ""Leyton"" -> ""Paradise"" in 30-21 = 9
undergroundSystem.getAverageTime(""Leyton"", ""Paradise""); // return 6.66667, (5 + 6 + 9) / 3 = 6.66667

Constraints:
`1 <= id, t <= 106`
`1 <= stationName.length, startStation.length, endStation.length <= 10`
All strings consist of uppercase and lowercase English letters and digits.

There will be at most `2 * 104` calls in total to `checkIn`, `checkOut`, and `getAverageTime`.

Answers within `10-5` of the actual value will be accepted.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the strings `s1` and `s2` of size `n`, and the string `evil`. Return the number of good strings.

A good string has size `n`, it is alphabetically greater than or equal to `s1`, it is alphabetically smaller than or equal to `s2`, and it does not contain the string `evil` as a substring. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: n = 2, s1 = ""aa"", s2 = ""da"", evil = ""b""
Output: 51 
Explanation: There are 25 good strings starting with 'a': ""aa"",""ac"",""ad"",...,""az"". Then there are 25 good strings starting with 'c': ""ca"",""cc"",""cd"",...,""cz"" and finally there is one good string starting with 'd': ""da"". 

Example 2:
Input: n = 8, s1 = ""leetcode"", s2 = ""leetgoes"", evil = ""leet""
Output: 0 
Explanation: All strings greater than or equal to s1 and smaller than or equal to s2 start with the prefix ""leet"", therefore, there is not any good string.


Example 3:
Input: n = 2, s1 = ""gx"", s2 = ""gz"", evil = ""x""
Output: 2

Constraints:
`s1.length == n`
`s2.length == n`
`s1 <= s2`
`1 <= n <= 500`
`1 <= evil.length <= 50`
All strings consist of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`. Each number from `1` to `n` is grouped according to the sum of its digits. 
Return how many groups have the largest size.


Example 1:
Input: n = 13
Output: 4
Explanation: There are 9 groups in total, they are grouped according sum of its digits of numbers from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 groups with largest size.


Example 2:
Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.


Example 3:
Input: n = 15
Output: 6

Example 4:
Input: n = 24
Output: 5

Constraints:
`1 <= n <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer `k`. You should construct `k` non-empty palindrome strings using all the characters in `s`.

Return True if you can use all the characters in `s` to construct `k` palindrome strings or False otherwise.


Example 1:
Input: s = ""annabelle"", k = 2
Output: true
Explanation: You can construct two palindromes using all characters in s.

Some possible constructions ""anna"" + ""elble"", ""anbna"" + ""elle"", ""anellena"" + ""b""

Example 2:
Input: s = ""leetcode"", k = 3
Output: false
Explanation: It is impossible to construct 3 palindromes using all the characters of s.


Example 3:
Input: s = ""true"", k = 4
Output: true
Explanation: The only possible solution is to put each character in a separate string.


Example 4:
Input: s = ""yzyzyzyzyzyzyzy"", k = 2
Output: true
Explanation: Simply you can put all z's in one string and all y's in the other string. Both strings will be palindrome.


Example 5:
Input: s = ""cr"", k = 7
Output: false
Explanation: We don't have enough characters in s to construct 7 palindromes.


Constraints:
`1 <= s.length <= 10^5`
All characters in `s` are lower-case English letters.

`1 <= k <= 10^5`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a circle represented as (`radius`, `x_center`, `y_center`) and an axis-aligned rectangle represented as (`x1`, `y1`, `x2`, `y2`), where (`x1`, `y1`) are the coordinates of the bottom-left corner, and (`x2`, `y2`) are the coordinates of the top-right corner of the rectangle.

Return True if the circle and rectangle are overlapped otherwise return False.

In other words, check if there are any point (xi, yi) such that belongs to the circle and the rectangle at the same time.


Example 1:
Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
Output: true
Explanation: Circle and rectangle share the point (1,0) 

Example 2:
Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1
Output: true

Example 3:
Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3
Output: true

Example 4:
Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1
Output: false

Constraints:
`1 <= radius <= 2000`
`-10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4`
`x1 < x2`
`y1 < y2`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A chef has collected data on the `satisfaction` level of his `n` dishes. Chef can cook any dish in 1 unit of time.

Like-time coefficient of a dish is defined as the time taken to cook that dish including previous dishes multiplied by its satisfaction level  i.e.  `time[i]`*`satisfaction[i]`
Return the maximum sum of Like-time coefficient that the chef can obtain after dishes preparation.

Dishes can be prepared in any order and the chef can discard some dishes to get this maximum value.


Example 1:
Input: satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After Removing the second and last dish, the maximum total Like-time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is prepared in one unit of time.


Example 2:
Input: satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)

Example 3:
Input: satisfaction = [-1,-4,-5]
Output: 0
Explanation: People don't like the dishes. No dish is prepared.


Example 4:
Input: satisfaction = [-2,5,-1,0,3,-3]
Output: 35

Constraints:
`n == satisfaction.length`
`1 <= n <= 500`
`-10^3 <= satisfaction[i] <= 10^3`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `nums`, obtain a subsequence of the array whose sum of elements is strictly greater than the sum of the non included elements in such subsequence. 
If there are multiple solutions, return the subsequence with minimum size and if there still exist multiple solutions, return the subsequence with the maximum total sum of all its elements. A subsequence of an array can be obtained by erasing some (possibly zero) elements from the array. 
Note that the solution with the given constraints is guaranteed to be unique. Also return the answer sorted in non-increasing order.


Example 1:
Input: nums = [4,3,10,9,8]
Output: [10,9] 
Explanation: The subsequences [10,9] and [10,8] are minimal such that the sum of their elements is strictly greater than the sum of elements not included, however, the subsequence [10,9] has the maximum total sum of its elements. 

Example 2:
Input: nums = [4,4,7,6,7]
Output: [7,7,6] 
Explanation: The subsequence [7,7] has the sum of its elements equal to 14 which is not strictly greater than the sum of elements not included (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the minimal satisfying the conditions. Note the subsequence has to returned in non-decreasing order.  

Example 3:
Input: nums = [6]
Output: [6]

Constraints:
`1 <= nums.length <= 500`
`1 <= nums[i] <= 100`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a number `s` in their binary representation. Return the number of steps to reduce it to 1 under the following rules:
If the current number is even, you have to divide it by 2.

If the current number is odd, you have to add 1 to it.

It's guaranteed that you can always reach to one for all testcases.


Example 1:
Input: s = ""1101""
Output: 6
Explanation: ""1101"" corressponds to number 13 in their decimal representation.

Step 1) 13 is odd, add 1 and obtain 14. 
Step 2) 14 is even, divide by 2 and obtain 7.

Step 3) 7 is odd, add 1 and obtain 8.

Step 4) 8 is even, divide by 2 and obtain 4.  
Step 5) 4 is even, divide by 2 and obtain 2. 
Step 6) 2 is even, divide by 2 and obtain 1.  

Example 2:
Input: s = ""10""
Output: 1
Explanation: ""10"" corressponds to number 2 in their decimal representation.

Step 1) 2 is even, divide by 2 and obtain 1.  

Example 3:
Input: s = ""1""
Output: 0

Constraints:
`1 <= s.length <= 500`
`s` consists of characters '0' or '1'
`s[0] == '1'`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is called happy if it does not have any of the strings `'aaa'`, `'bbb'` or `'ccc'` as a substring.

Given three integers `a`, `b` and `c`, return any string `s`, which satisfies following conditions:
`s` is happy and longest possible.

`s` contains at most `a` occurrences of the letter `'a'`, at most `b` occurrences of the letter `'b'` and at most `c` occurrences of the letter `'c'`.

`s `will only contain `'a'`, `'b'` and `'c'` letters.

If there is no such string `s` return the empty string `""""`.


Example 1:
Input: a = 1, b = 1, c = 7
Output: ""ccaccbcc""
Explanation: ""ccbccacc"" would also be a correct answer.


Example 2:
Input: a = 2, b = 2, c = 1
Output: ""aabbc""

Example 3:
Input: a = 7, b = 1, c = 0
Output: ""aabaa""
Explanation: It's the only correct answer in this case.


Constraints:
`0 <= a, b, c <= 100`
`a + b + c > 0`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob continue their games with piles of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array `stoneValue`.

Alice and Bob take turns, with Alice starting first. On each player's turn, that player can take 1, 2 or 3 stones from the first remaining stones in the row.

The score of each player is the sum of values of the stones taken. The score of each player is 0 initially.

The objective of the game is to end with the highest score, and the winner is the player with the highest score and there could be a tie. The game continues until all the stones have been taken.

Assume Alice and Bob play optimally.

Return ""Alice"" if Alice will win, ""Bob"" if Bob will win or ""Tie"" if they end the game with the same score.


Example 1:
Input: values = [1,2,3,7]
Output: ""Bob""
Explanation: Alice will always lose. Her best move will be to take three piles and the score become 6. Now the score of Bob is 7 and Bob wins.


Example 2:
Input: values = [1,2,3,-9]
Output: ""Alice""
Explanation: Alice must choose all the three piles at the first move to win and leave Bob with negative score.

If Alice chooses one pile her score will be 1 and the next move Bob's score becomes 5. The next move Alice will take the pile with value = -9 and lose.

If Alice chooses two piles her score will be 3 and the next move Bob's score becomes 3. The next move Alice will take the pile with value = -9 and also lose.

Remember that both play optimally so here Alice will choose the scenario that makes her win.


Example 3:
Input: values = [1,2,3,6]
Output: ""Tie""
Explanation: Alice cannot win this game. She can end the game in a draw if she decided to choose all the first three piles, otherwise she will lose.


Example 4:
Input: values = [1,2,3,-1,-2,-3,7]
Output: ""Alice""

Example 5:
Input: values = [-1,-2,-3]
Output: ""Tie""

Constraints:
`1 <= values.length <= 50000`
`-1000 <= values[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of string `words`. Return all strings in `words` which is substring of another word in any order. 
String `words[i]` is substring of `words[j]`, if can be obtained removing some characters to left and/or right side of `words[j]`.


Example 1:
Input: words = [""mass"",""as"",""hero"",""superhero""]
Output: [""as"",""hero""]
Explanation: ""as"" is substring of ""mass"" and ""hero"" is substring of ""superhero"".

[""hero"",""as""] is also a valid answer.


Example 2:
Input: words = [""leetcode"",""et"",""code""]
Output: [""et"",""code""]
Explanation: ""et"", ""code"" are substring of ""leetcode"".


Example 3:
Input: words = [""blue"",""green"",""bu""]
Output: []

Constraints:
`1 <= words.length <= 100`
`1 <= words[i].length <= 30`
`words[i]` contains only lowercase English letters.

It's guaranteed that `words[i]` will be unique.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `queries` of positive integers between `1` and `m`, you have to process all `queries[i]` (from `i=0` to `i=queries.length-1`) according to the following rules:
In the beginning, you have the permutation `P=[1,2,3,...,m]`.

For the current `i`, find the position of `queries[i]` in the permutation `P` (indexing from 0) and then move this at the beginning of the permutation `P.` Notice that the position of `queries[i]` in `P` is the result for `queries[i]`.

Return an array containing the result for the given `queries`.


Example 1:
Input: queries = [3,1,2,1], m = 5
Output: [2,1,2,1] 
Explanation: The queries are processed as follow: 
For i=0: queries[i]=3, P=[1,2,3,4,5], position of 3 in P is 2, then we move 3 to the beginning of P resulting in P=[3,1,2,4,5]. 
For i=1: queries[i]=1, P=[3,1,2,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,3,2,4,5]. 
For i=2: queries[i]=2, P=[1,3,2,4,5], position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2,1,3,4,5]. 
For i=3: queries[i]=1, P=[2,1,3,4,5], position of 1 in P is 1, then we move 1 to the beginning of P resulting in P=[1,2,3,4,5]. 
Therefore, the array containing the result is [2,1,2,1].  

Example 2:
Input: queries = [4,1,2,2], m = 4
Output: [3,1,2,0]

Example 3:
Input: queries = [7,5,5,8,3], m = 8
Output: [6,5,0,7,5]

Constraints:
`1 <= m <= 10^3`
`1 <= queries.length <= m`
`1 <= queries[i] <= m`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.

The special characters and their entities for HTML are:
Quotation Mark: the entity is `&quot;` and symbol character is `""`.

Single Quote Mark: the entity is `&apos;` and symbol character is `'`.

Ampersand: the entity is `&amp;` and symbol character is `&`.

Greater Than Sign: the entity is `&gt;` and symbol character is `>`.

Less Than Sign: the entity is `&lt;` and symbol character is `<`.

Slash: the entity is `&frasl;` and symbol character is `/`.

Given the input `text` string to the HTML parser, you have to implement the entity parser.

Return the text after replacing the entities by the special characters.


Example 1:
Input: text = ""&amp; is an HTML entity but &ambassador; is not.""
Output: ""& is an HTML entity but &ambassador; is not.""
Explanation: The parser will replace the &amp; entity by &

Example 2:
Input: text = ""and I quote: &quot;...&quot;""
Output: ""and I quote: \""...\""""

Example 3:
Input: text = ""Stay home! Practice on Leetcode :)""
Output: ""Stay home! Practice on Leetcode :)""

Example 4:
Input: text = ""x &gt; y &amp;&amp; x &lt; y is always false""
Output: ""x > y && x < y is always false""

Example 5:
Input: text = ""leetcode.com&frasl;problemset&frasl;all""
Output: ""leetcode.com/problemset/all""

Constraints:
`1 <= text.length <= 10^5`
The string may contain any possible characters out of all the 256 ASCII characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a `grid` of size `n x 3` and you want to paint each cell of the grid with exactly one of the three colors: Red, Yellow, or Green while making sure that no two adjacent cells have the same color (i.e., no two cells that share vertical or horizontal sides have the same color).

Given `n` the number of rows of the grid, return the number of ways you can paint this `grid`. As the answer may grow large, the answer must be computed modulo `109 + 7`.


Example 1:
Input: n = 1
Output: 12
Explanation: There are 12 possible way to paint the grid as shown.


Example 2:
Input: n = 2
Output: 54

Example 3:
Input: n = 3
Output: 246

Example 4:
Input: n = 7
Output: 106494

Example 5:
Input: n = 5000
Output: 30228214

Constraints:
`n == grid.length`
`grid[i].length == 3`
`1 <= n <= 5000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums`, you start with an initial positive value startValue.

In each iteration, you calculate the step by step sum of startValue plus elements in `nums` (from left to right).

Return the minimum positive value of startValue such that the step by step sum is never less than 1.


Example 1:
Input: nums = [-3,2,-3,4,2]
Output: 5
Explanation: If you choose startValue = 4, in the third iteration your step by step sum is less than 1.

                step by step sum
                startValue = 4 | startValue = 5 | nums
                  (4 -3 ) = 1  | (5 -3 ) = 2    |  -3
                  (1 +2 ) = 3  | (2 +2 ) = 4    |   2
                  (3 -3 ) = 0  | (4 -3 ) = 1    |  -3
                  (0 +4 ) = 4  | (1 +4 ) = 5    |   4
                  (4 +2 ) = 6  | (5 +2 ) = 7    |   2

Example 2:
Input: nums = [1,2]
Output: 1
Explanation: Minimum start value should be positive. 

Example 3:
Input: nums = [1,-2,-3]
Output: 5

Constraints:
`1 <= nums.length <= 100`
`-100 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `k`, return the minimum number of Fibonacci numbers whose sum is equal to `k`. The same Fibonacci number can be used multiple times.

The Fibonacci numbers are defined as:
`F1 = 1`
`F2 = 1`
`Fn = Fn-1 + Fn-2` for `n > 2.`
It is guaranteed that for the given constraints we can always find such Fibonacci numbers that sum up to `k`.


Example 1:
Input: k = 7
Output: 2 
Explanation: The Fibonacci numbers are: 1, 1, 2, 3, 5, 8, 13, ... 
For k = 7 we can use 2 + 5 = 7.


Example 2:
Input: k = 10
Output: 2 
Explanation: For k = 10 we can use 2 + 8 = 10.


Example 3:
Input: k = 19
Output: 3 
Explanation: For k = 19 we can use 1 + 5 + 13 = 19.


Constraints:
`1 <= k <= 10^9`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A happy string is a string that:
consists only of letters of the set `['a', 'b', 'c']`.

`s[i] != s[i + 1]` for all values of `i` from `1` to `s.length - 1` (string is 1-indexed).

For example, strings ""abc"", ""ac"", ""b"" and ""abcbabcbcb"" are all happy strings and strings ""aa"", ""baa"" and ""ababbc"" are not happy strings.

Given two integers `n` and `k`, consider a list of all happy strings of length `n` sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than `k` happy strings of length `n`.


Example 1:
Input: n = 1, k = 3
Output: ""c""
Explanation: The list [""a"", ""b"", ""c""] contains all happy strings of length 1. The third string is ""c"".


Example 2:
Input: n = 1, k = 4
Output: """"
Explanation: There are only 3 happy strings of length 1.


Example 3:
Input: n = 3, k = 9
Output: ""cab""
Explanation: There are 12 different happy string of length 3 [""aba"", ""abc"", ""aca"", ""acb"", ""bab"", ""bac"", ""bca"", ""bcb"", ""cab"", ""cac"", ""cba"", ""cbc""]. You will find the 9th string = ""cab""

Example 4:
Input: n = 2, k = 7
Output: """"

Example 5:
Input: n = 10, k = 100
Output: ""abacbabacb""

Constraints:
`1 <= n <= 10`
`1 <= k <= 100`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A program was supposed to print an array of integers. The program forgot to print whitespaces and the array is printed as a string of digits and all we know is that all integers in the array were in the range `[1, k]` and there are no leading zeros in the array.

Given the string `s` and the integer `k`. There can be multiple ways to restore the array.

Return the number of possible array that can be printed as a string `s` using the mentioned program.

The number of ways could be very large so return it modulo `10^9 + 7`

Example 1:
Input: s = ""1000"", k = 10000
Output: 1
Explanation: The only possible array is [1000]

Example 2:
Input: s = ""1000"", k = 10
Output: 0
Explanation: There cannot be an array that was printed this way and has all integer >= 1 and <= 10.


Example 3:
Input: s = ""1317"", k = 2000
Output: 8
Explanation: Possible arrays are [1317],[131,7],[13,17],[1,317],[13,1,7],[1,31,7],[1,3,17],[1,3,1,7]

Example 4:
Input: s = ""2020"", k = 30
Output: 1
Explanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is ivalid because 020 contains leading zeros.


Example 5:
Input: s = ""1234567890"", k = 90
Output: 34

Constraints:
`1 <= s.length <= 10^5`.

`s` consists of only digits and doesn't contain leading zeros.

`1 <= k <= 10^9`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given alphanumeric string `s`. (Alphanumeric string is a string consisting of lowercase English letters and digits).

You have to find a permutation of the string where no letter is followed by another letter and no digit is followed by another digit. That is, no two adjacent characters have the same type.

Return the reformatted string or return an empty string if it is impossible to reformat the string.


Example 1:
Input: s = ""a0b1c2""
Output: ""0a1b2c""
Explanation: No two adjacent characters have the same type in ""0a1b2c"". ""a0b1c2"", ""0a1b2c"", ""0c2a1b"" are also valid permutations.


Example 2:
Input: s = ""leetcode""
Output: """"
Explanation: ""leetcode"" has only characters so we cannot separate them by digits.


Example 3:
Input: s = ""1229857369""
Output: """"
Explanation: ""1229857369"" has only digits so we cannot separate them by characters.


Example 4:
Input: s = ""covid2019""
Output: ""c2o0v1i9d""

Example 5:
Input: s = ""ab123""
Output: ""1a2b3""

Constraints:
`1 <= s.length <= 500`
`s` consists of only lowercase English letters and/or digits.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `orders`, which represents the orders that customers have done in a restaurant. More specifically `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table customer sit at, and `foodItemi` is the item customer orders.

Return the restaurant's “display table”. The “display table” is a table whose row entries denote how many of each food item each table ordered. The first column is the table number and the remaining columns correspond to each food item in alphabetical order. The first row should be a header whose first column is “Table”, followed by the names of the food items. Note that the customer names are not part of the table. Additionally, the rows should be sorted in numerically increasing order.


Example 1:
Input: orders = [[""David"",""3"",""Ceviche""],[""Corina"",""10"",""Beef Burrito""],[""David"",""3"",""Fried Chicken""],[""Carla"",""5"",""Water""],[""Carla"",""5"",""Ceviche""],[""Rous"",""3"",""Ceviche""]]
Output: [[""Table"",""Beef Burrito"",""Ceviche"",""Fried Chicken"",""Water""],[""3"",""0"",""2"",""1"",""0""],[""5"",""0"",""1"",""0"",""1""],[""10"",""1"",""0"",""0"",""0""]] 
Explanation:
The displaying table looks like:
Table,Beef Burrito,Ceviche,Fried Chicken,Water
3    ,0           ,2      ,1            ,0
5    ,0           ,1      ,0            ,1
10   ,1           ,0      ,0            ,0
For the table 3: David orders ""Ceviche"" and ""Fried Chicken"", and Rous orders ""Ceviche"".

For the table 5: Carla orders ""Water"" and ""Ceviche"".

For the table 10: Corina orders ""Beef Burrito"". 

Example 2:
Input: orders = [[""James"",""12"",""Fried Chicken""],[""Ratesh"",""12"",""Fried Chicken""],[""Amadeus"",""12"",""Fried Chicken""],[""Adam"",""1"",""Canadian Waffles""],[""Brianna"",""1"",""Canadian Waffles""]]
Output: [[""Table"",""Canadian Waffles"",""Fried Chicken""],[""1"",""2"",""0""],[""12"",""0"",""3""]] 
Explanation: 
For the table 1: Adam and Brianna order ""Canadian Waffles"".

For the table 12: James, Ratesh and Amadeus order ""Fried Chicken"".


Example 3:
Input: orders = [[""Laura"",""2"",""Bean Burrito""],[""Jhon"",""2"",""Beef Burrito""],[""Melissa"",""2"",""Soda""]]
Output: [[""Table"",""Bean Burrito"",""Beef Burrito"",""Soda""],[""2"",""1"",""1"",""1""]]

Constraints:
`1 <= orders.length <= 5 * 10^4`
`orders[i].length == 3`
`1 <= customerNamei.length, foodItemi.length <= 20`
`customerNamei` and `foodItemi` consist of lowercase and uppercase English letters and the space character.

`tableNumberi `is a valid integer between `1` and `500`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the string `croakOfFrogs`, which represents a combination of the string ""croak"" from different frogs, that is, multiple frogs can croak at the same time, so multiple “croak” are mixed. Return the minimum number of different frogs to finish all the croak in the given string.

A valid ""croak"" means a frog is printing 5 letters ‘c’, ’r’, ’o’, ’a’, ’k’ sequentially. The frogs have to print all five letters to finish a croak. If the given string is not a combination of valid ""croak"" return -1.


Example 1:
Input: croakOfFrogs = ""croakcroak""
Output: 1 
Explanation: One frog yelling ""croak"" twice.


Example 2:
Input: croakOfFrogs = ""crcoakroak""
Output: 2 
Explanation: The minimum number of frogs is two. 
The first frog could yell ""crcoakroak"".

The second frog could yell later ""crcoakroak"".


Example 3:
Input: croakOfFrogs = ""croakcrook""
Output: -1
Explanation: The given string is an invalid combination of ""croak"" from different frogs.


Example 4:
Input: croakOfFrogs = ""croakcroa""
Output: -1

Constraints:
`1 <= croakOfFrogs.length <= 10^5`
All characters in the string are: `'c'`, `'r'`, `'o'`, `'a'` or `'k'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given three integers `n`, `m` and `k`. Consider the following algorithm to find the maximum element of an array of positive integers:
You should build the array arr which has the following properties:
`arr` has exactly `n` integers.

`1 <= arr[i] <= m` where `(0 <= i < n)`.

After applying the mentioned algorithm to `arr`, the value `search_cost` is equal to `k`.

Return the number of ways to build the array `arr` under the mentioned conditions. As the answer may grow large, the answer must be computed modulo `10^9 + 7`.


Example 1:
Input: n = 2, m = 3, k = 1
Output: 6
Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]

Example 2:
Input: n = 5, m = 2, k = 3
Output: 0
Explanation: There are no possible arrays that satisify the mentioned conditions.


Example 3:
Input: n = 9, m = 1, k = 1
Output: 1
Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]

Example 4:
Input: n = 50, m = 100, k = 25
Output: 34549172
Explanation: Don't forget to compute the answer modulo 1000000007

Example 5:
Input: n = 37, m = 17, k = 7
Output: 418930126

Constraints:
`1 <= n <= 50`
`1 <= m <= 100`
`0 <= k <= n`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` of zeros and ones, return the maximum score after splitting the string into two non-empty substrings (i.e. left substring and right substring).

The score after splitting a string is the number of zeros in the left substring plus the number of ones in the right substring.


Example 1:
Input: s = ""011101""
Output: 5 
Explanation: 
All possible ways of splitting s into two non-empty substrings are:
left = ""0"" and right = ""11101"", score = 1 + 4 = 5 
left = ""01"" and right = ""1101"", score = 1 + 3 = 4 
left = ""011"" and right = ""101"", score = 1 + 2 = 3 
left = ""0111"" and right = ""01"", score = 1 + 1 = 2 
left = ""01110"" and right = ""1"", score = 2 + 1 = 3

Example 2:
Input: s = ""00111""
Output: 5
Explanation: When left = ""00"" and right = ""111"", we get the maximum score = 2 + 3 = 5

Example 3:
Input: s = ""1111""
Output: 3

Constraints:
`2 <= s.length <= 500`
The string `s` consists of characters '0' and '1' only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are several cards arranged in a row, and each card has an associated number of points The points are given in the integer array `cardPoints`.

In one step, you can take one card from the beginning or from the end of the row. You have to take exactly `k` cards.

Your score is the sum of the points of the cards you have taken.

Given the integer array `cardPoints` and the integer `k`, return the maximum score you can obtain.


Example 1:
Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The optimal strategy is to take the three cards on the right, giving a final score of 1 + 6 + 5 = 12.


Example 2:
Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: Regardless of which two cards you take, your score will always be 4.


Example 3:
Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You have to take all the cards. Your score is the sum of points of all cards.


Example 4:
Input: cardPoints = [1,1000,1], k = 1
Output: 1
Explanation: You cannot take the card in the middle. Your best score is 1. 

Example 5:
Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3
Output: 202

Constraints:
`1 <= cardPoints.length <= 10^5`
`1 <= cardPoints[i] <= 10^4`
`1 <= k <= cardPoints.length`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of lists of integers, `nums`, return all elements of `nums` in diagonal order as shown in the below images.


Example 1:
Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]

Example 2:
Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]

Example 3:
Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]
Output: [1,4,2,5,3,8,6,9,7,10,11]

Example 4:
Input: nums = [[1,2,3,4,5,6]]
Output: [1,2,3,4,5,6]

Constraints:
`1 <= nums.length <= 10^5`
`1 <= nums[i].length <= 10^5`
`1 <= nums[i][j] <= 10^9`
There at most `10^5` elements in `nums`.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`, return the maximum sum of a non-empty subsequence of that array such that for every two consecutive integers in the subsequence, `nums[i]` and `nums[j]`, where `i < j`, the condition `j - i <= k` is satisfied.

A subsequence of an array is obtained by deleting some number of elements (can be zero) from the array, leaving the remaining elements in their original order.


Example 1:
Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].


Example 2:
Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.


Example 3:
Input: nums = [10,-2,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].


Constraints:
`1 <= k <= nums.length <= 105`
`-104 <= nums[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.


Example 1:
Input: arr = [1,2,3]
Output: 2
Explanation: 1 and 2 are counted cause 2 and 3 are in arr.


Example 2:
Input: arr = [1,1,3,3,5,5,7,7]
Output: 0
Explanation: No numbers are counted, cause there's no 2, 4, 6, or 8 in arr.


Example 3:
Input: arr = [1,3,2,3,5,0]
Output: 3
Explanation: 0, 1 and 2 are counted cause 1, 2 and 3 are in arr.


Example 4:
Input: arr = [1,1,2,2]
Output: 2
Explanation: Two 1s are counted cause 2 is in arr.


Example 5:
Input: arr = [1,1,2]
Output: 2
Explanation: Both 1s are counted because 2 is in the array.


Constraints:
`1 <= arr.length <= 1000`
`0 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` containing lowercase English letters, and a matrix `shift`, where `shift[i] = [direction, amount]`:
`direction` can be `0` (for left shift) or `1` (for right shift). 
`amount` is the amount by which string `s` is to be shifted.

A left shift by 1 means remove the first character of `s` and append it to the end.

Similarly, a right shift by 1 means remove the last character of `s` and add it to the beginning.

Return the final string after all operations.


Example 1:
Input: s = ""abc"", shift = [[0,1],[1,2]]
Output: ""cab""
Explanation: 
[0,1] means shift to left by 1. ""abc"" -> ""bca""
[1,2] means shift to right by 2. ""bca"" -> ""cab""

Example 2:
Input: s = ""abcdefg"", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: ""efgabcd""
Explanation:  
[1,1] means shift to right by 1. ""abcdefg"" -> ""gabcdef""
[1,1] means shift to right by 1. ""gabcdef"" -> ""fgabcde""
[0,2] means shift to left by 2. ""fgabcde"" -> ""abcdefg""
[1,3] means shift to right by 3. ""abcdefg"" -> ""efgabcd""

Constraints:
`1 <= s.length <= 100`
`s` only contains lower case English letters.

`1 <= shift.length <= 100`
`shift[i].length == 2`
`0 <= shift[i][0] <= 1`
`0 <= shift[i][1] <= 100`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"(This problem is an interactive problem.)
A row-sorted binary matrix means that all elements are `0` or `1` and each row of the matrix is sorted in non-decreasing order.

Given a row-sorted binary matrix `binaryMatrix`, return the index (0-indexed) of the leftmost column with a 1 in it. If such an index does not exist, return `-1`.

You can't access the Binary Matrix directly. You may only access the matrix using a `BinaryMatrix` interface:
`BinaryMatrix.get(row, col)` returns the element of the matrix at index `(row, col)` (0-indexed).

`BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is `rows x cols`.

Submissions making more than `1000` calls to `BinaryMatrix.get` will be judged Wrong Answer. Also, any solutions that attempt to circumvent the judge will result in disqualification.

For custom testing purposes, the input will be the entire binary matrix `mat`. You will not have access to the binary matrix directly.


Example 1:
Input: mat = [[0,0],[1,1]]
Output: 0

Example 2:
Input: mat = [[0,0],[0,1]]
Output: 1

Example 3:
Input: mat = [[0,0],[0,0]]
Output: -1

Example 4:
Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]
Output: 1

Constraints:
`rows == mat.length`
`cols == mat[i].length`
`1 <= rows, cols <= 100`
`mat[i][j]` is either `0` or `1`.

`mat[i]` is sorted in non-decreasing order.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a queue of integers, you need to retrieve the first unique integer in the queue.

Implement the `FirstUnique` class:
`FirstUnique(int[] nums)` Initializes the object with the numbers in the queue.

`int showFirstUnique()` returns the value of the first unique integer of the queue, and returns -1 if there is no such integer.

`void add(int value)` insert value to the queue.


Example 1:
Input: 
[""FirstUnique"",""showFirstUnique"",""add"",""showFirstUnique"",""add"",""showFirstUnique"",""add"",""showFirstUnique""]
[[[2,3,5]],[],[5],[],[2],[],[3],[]]
Output: 
[null,2,null,2,null,3,null,-1]
Explanation: 
FirstUnique firstUnique = new FirstUnique([2,3,5]);
firstUnique.showFirstUnique(); // return 2
firstUnique.add(5);            // the queue is now [2,3,5,5]
firstUnique.showFirstUnique(); // return 2
firstUnique.add(2);            // the queue is now [2,3,5,5,2]
firstUnique.showFirstUnique(); // return 3
firstUnique.add(3);            // the queue is now [2,3,5,5,2,3]
firstUnique.showFirstUnique(); // return -1

Example 2:
Input: 
[""FirstUnique"",""showFirstUnique"",""add"",""add"",""add"",""add"",""add"",""showFirstUnique""]
[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]
Output: 
[null,-1,null,null,null,null,null,17]
Explanation: 
FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);
firstUnique.showFirstUnique(); // return -1
firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7]
firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3]
firstUnique.add(3);            // the queue is now [7,7,7,7,7,7,7,3,3]
firstUnique.add(7);            // the queue is now [7,7,7,7,7,7,7,3,3,7]
firstUnique.add(17);           // the queue is now [7,7,7,7,7,7,7,3,3,7,17]
firstUnique.showFirstUnique(); // return 17

Example 3:
Input: 
[""FirstUnique"",""showFirstUnique"",""add"",""showFirstUnique""]
[[[809]],[],[809],[]]
Output: 
[null,809,null,-1]
Explanation: 
FirstUnique firstUnique = new FirstUnique([809]);
firstUnique.showFirstUnique(); // return 809
firstUnique.add(809);          // the queue is now [809,809]
firstUnique.showFirstUnique(); // return -1

Constraints:
`1 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^8`
`1 <= value <= 10^8`
At most `50000` calls will be made to `showFirstUnique` and `add`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree where each path going from the root to any leaf form a valid sequence, check if a given string is a valid sequence in such binary tree. 
We get the given string from the concatenation of an array of integers `arr` and the concatenation of all values of the nodes along a path results in a sequence in the given binary tree.


Example 1:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]
Output: true
Explanation: 
The path 0 -> 1 -> 0 -> 1 is a valid sequence (green color in the figure). 
Other valid sequences are: 
0 -> 1 -> 1 -> 0 
0 -> 0 -> 0

Example 2:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]
Output: false 
Explanation: The path 0 -> 0 -> 1 does not exist, therefore it is not even a sequence.


Example 3:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]
Output: false
Explanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.


Constraints:
`1 <= arr.length <= 5000`
`0 <= arr[i] <= 9`
Each node's value is between [0 - 9].",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `candies` and the integer `extraCandies`, where `candies[i]` represents the number of candies that the ith kid has.

For each kid check if there is a way to distribute `extraCandies` among the kids such that he or she can have the greatest number of candies among them. Notice that multiple kids can have the greatest number of candies.


Example 1:
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true] 
Explanation: 
Kid 1 has 2 candies and if he or she receives all extra candies (3) will have 5 candies --- the greatest number of candies among the kids. 
Kid 2 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. 
Kid 3 has 5 candies and this is already the greatest number of candies among the kids. 
Kid 4 has 1 candy and even if he or she receives all extra candies will only have 4 candies. 
Kid 5 has 3 candies and if he or she receives at least 2 extra candies will have the greatest number of candies among the kids. 

Example 2:
Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true,false,false,false,false] 
Explanation: There is only 1 extra candy, therefore only kid 1 will have the greatest number of candies among the kids regardless of who takes the extra candy.


Example 3:
Input: candies = [12,1,12], extraCandies = 10
Output: [true,false,true]

Constraints:
`2 <= candies.length <= 100`
`1 <= candies[i] <= 100`
`1 <= extraCandies <= 50`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer `num`. You will apply the following steps exactly two times:
Pick a digit `x (0 <= x <= 9)`.

Pick another digit `y (0 <= y <= 9)`. The digit `y` can be equal to `x`.

Replace all the occurrences of `x` in the decimal representation of `num` by `y`.

The new integer cannot have any leading zeros, also the new integer cannot be 0.

Let `a` and `b` be the results of applying the operations to `num` the first and second times, respectively.

Return the max difference between `a` and `b`.


Example 1:
Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.

The second time pick x = 5 and y = 1 and store the new integer in b.

We have now a = 999 and b = 111 and max difference = 888

Example 2:
Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.

The second time pick x = 9 and y = 1 and store the new integer in b.

We have now a = 9 and b = 1 and max difference = 8

Example 3:
Input: num = 123456
Output: 820000

Example 4:
Input: num = 10000
Output: 80000

Example 5:
Input: num = 9288
Output: 8700

Constraints:
`1 <= num <= 10^8`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings: `s1` and `s2` with the same size, check if some permutation of string `s1` can break some permutation of string `s2` or vice-versa. In other words `s2` can break `s1` or vice-versa.

A string `x` can break string `y` (both of size `n`) if `x[i] >= y[i]` (in alphabetical order) for all `i` between `0` and `n-1`.


Example 1:
Input: s1 = ""abc"", s2 = ""xya""
Output: true
Explanation: ""ayx"" is a permutation of s2=""xya"" which can break to string ""abc"" which is a permutation of s1=""abc"".


Example 2:
Input: s1 = ""abe"", s2 = ""acd""
Output: false 
Explanation: All permutations for s1=""abe"" are: ""abe"", ""aeb"", ""bae"", ""bea"", ""eab"" and ""eba"" and all permutation for s2=""acd"" are: ""acd"", ""adc"", ""cad"", ""cda"", ""dac"" and ""dca"". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.


Example 3:
Input: s1 = ""leetcodee"", s2 = ""interview""
Output: true

Constraints:
`s1.length == n`
`s2.length == n`
`1 <= n <= 10^5`
All strings consist of lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` people and 40 types of hats labeled from 1 to 40.

Given a list of list of integers `hats`, where `hats[i]` is a list of all hats preferred by the i-th` person.

Return the number of ways that the n people wear different hats to each other.

Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: hats = [[3,4],[4,5],[5]]
Output: 1
Explanation: There is only one way to choose hats given the conditions. 
First person choose hat 3, Second person choose hat 4 and last one hat 5.


Example 2:
Input: hats = [[3,5,1],[3,5]]
Output: 4
Explanation: There are 4 ways to choose hats
(3,5), (5,3), (1,3) and (1,5)

Example 3:
Input: hats = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
Output: 24
Explanation: Each person can choose hats labeled from 1 to 4.

Number of Permutations of (1,2,3,4) = 24.


Example 4:
Input: hats = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]
Output: 111

Constraints:
`n == hats.length`
`1 <= n <= 10`
`1 <= hats[i].length <= 40`
`1 <= hats[i][j] <= 40`
`hats[i]` contains a list of unique integers.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. Return the destination city, that is, the city without any path outgoing to another city.

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.


Example 1:
Input: paths = [[""London"",""New York""],[""New York"",""Lima""],[""Lima"",""Sao Paulo""]]
Output: ""Sao Paulo"" 
Explanation: Starting at ""London"" city you will reach ""Sao Paulo"" city which is the destination city. Your trip consist of: ""London"" -> ""New York"" -> ""Lima"" -> ""Sao Paulo"".


Example 2:
Input: paths = [[""B"",""C""],[""D"",""B""],[""C"",""A""]]
Output: ""A""
Explanation: All possible trips are: 
""D"" -> ""B"" -> ""C"" -> ""A"". 
""B"" -> ""C"" -> ""A"". 
""C"" -> ""A"". 
""A"". 
Clearly the destination city is ""A"".


Example 3:
Input: paths = [[""A"",""Z""]]
Output: ""Z""

Constraints:
`1 <= paths.length <= 100`
`paths[i].length == 2`
`1 <= cityAi.length, cityBi.length <= 10`
`cityAi != cityBi`
All strings consist of lowercase and uppercase English letters and the space character.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of 0s and 1s and an integer `k`, return `True` if all 1's are at least `k` places away from each other, otherwise return `False`.


Example 1:
Input: nums = [1,0,0,0,1,0,0,1], k = 2
Output: true
Explanation: Each of the 1s are at least 2 places away from each other.


Example 2:
Input: nums = [1,0,0,1,0,1], k = 2
Output: false
Explanation: The second 1 and third 1 are only one apart from each other.


Example 3:
Input: nums = [1,1,1,1,1], k = 0
Output: true

Example 4:
Input: nums = [0,1,0,1], k = 1
Output: true

Constraints:
`1 <= nums.length <= 105`
`0 <= k <= nums.length`
`nums[i]` is `0` or `1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and an integer `limit`, return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to `limit`.


Example 1:
Input: nums = [8,2,4,7], limit = 4
Output: 2 
Explanation: All subarrays are: 
[8] with maximum absolute diff |8-8| = 0 <= 4.

[8,2] with maximum absolute diff |8-2| = 6 > 4. 
[8,2,4] with maximum absolute diff |8-2| = 6 > 4.

[8,2,4,7] with maximum absolute diff |8-2| = 6 > 4.

[2] with maximum absolute diff |2-2| = 0 <= 4.

[2,4] with maximum absolute diff |2-4| = 2 <= 4.

[2,4,7] with maximum absolute diff |2-7| = 5 > 4.

[4] with maximum absolute diff |4-4| = 0 <= 4.

[4,7] with maximum absolute diff |4-7| = 3 <= 4.

[7] with maximum absolute diff |7-7| = 0 <= 4. 
Therefore, the size of the longest subarray is 2.


Example 2:
Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4 
Explanation: The subarray [2,4,7,2] is the longest since the maximum absolute diff is |2-7| = 5 <= 5.


Example 3:
Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`0 <= limit <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m * n` matrix, `mat`, and an integer `k`, which has its rows sorted in non-decreasing order.

You are allowed to choose exactly 1 element from each row to form an array. Return the Kth smallest array sum among all possible arrays.


Example 1:
Input: mat = [[1,3,11],[2,4,6]], k = 5
Output: 7
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,2], [1,4], [3,2], [3,4], [1,6]. Where the 5th sum is 7.  

Example 2:
Input: mat = [[1,3,11],[2,4,6]], k = 9
Output: 17

Example 3:
Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7
Output: 9
Explanation: Choosing one element from each row, the first k smallest sum are:
[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1,5,3]. Where the 7th sum is 9.  

Example 4:
Input: mat = [[1,1,10],[2,2,9]], k = 7
Output: 12

Constraints:
`m == mat.length`
`n == mat.length[i]`
`1 <= m, n <= 40`
`1 <= k <= min(200, n ^ m)`
`1 <= mat[i][j] <= 5000`
`mat[i]` is a non decreasing array.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `target` and an integer `n`. In each iteration, you will read a number from  `list = {1,2,3..., n}`.

Build the `target` array using the following operations:
Push: Read a new element from the beginning `list`, and push it in the array.

Pop: delete the last element of the array.

If the target array is already built, stop reading more elements.

Return the operations to build the target array. You are guaranteed that the answer is unique.


Example 1:
Input: target = [1,3], n = 3
Output: [""Push"",""Push"",""Pop"",""Push""]
Explanation: 
Read number 1 and automatically push in the array -> [1]
Read number 2 and automatically push in the array then Pop it -> [1]
Read number 3 and automatically push in the array -> [1,3]

Example 2:
Input: target = [1,2,3], n = 3
Output: [""Push"",""Push"",""Push""]

Example 3:
Input: target = [1,2], n = 4
Output: [""Push"",""Push""]
Explanation: You only need to read the first 2 numbers and stop.


Example 4:
Input: target = [2,3,4], n = 4
Output: [""Push"",""Pop"",""Push"",""Push"",""Push""]

Constraints:
`1 <= target.length <= 100`
`1 <= target[i] <= n`
`1 <= n <= 100`
`target` is strictly increasing.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected tree consisting of `n` vertices numbered from `0` to `n-1`, which has some apples in their vertices. You spend 1 second to walk over one edge of the tree. Return the minimum time in seconds you have to spend to collect all apples in the tree, starting at vertex 0 and coming back to this vertex.

The edges of the undirected tree are given in the array `edges`, where `edges[i] = [ai, bi]` means that exists an edge connecting the vertices `ai` and `bi`. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apple.


Example 1:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,true,true,false]
Output: 8 
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Example 2:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,true,false,false,true,false]
Output: 6
Explanation: The figure above represents the given tree where red vertices have an apple. One optimal path to collect all apples is shown by the green arrows.  

Example 3:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false,false,false,false,false,false,false]
Output: 0

Constraints:
`1 <= n <= 10^5`
`edges.length == n - 1`
`edges[i].length == 2`
`0 <= ai < bi <= n - 1`
`fromi < toi`
`hasApple.length == n`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a rectangular pizza represented as a `rows x cols` matrix containing the following characters: `'A'` (an apple) and `'.'` (empty cell) and given the integer `k`. You have to cut the pizza into `k` pieces using `k-1` cuts. 
For each cut you choose the direction: vertical or horizontal, then you choose a cut position at the cell boundary and cut the pizza into two pieces. If you cut the pizza vertically, give the left part of the pizza to a person. If you cut the pizza horizontally, give the upper part of the pizza to a person. Give the last piece of pizza to the last person.

Return the number of ways of cutting the pizza such that each piece contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: pizza = [""A.."",""AAA"",""...""], k = 3
Output: 3 
Explanation: The figure above shows the three ways to cut the pizza. Note that pieces must contain at least one apple.


Example 2:
Input: pizza = [""A.."",""AA."",""...""], k = 3
Output: 1

Example 3:
Input: pizza = [""A.."",""A.."",""...""], k = 1
Output: 1

Constraints:
`1 <= rows, cols <= 50`
`rows == pizza.length`
`cols == pizza[i].length`
`1 <= k <= 10`
`pizza` consists of characters `'A'` and `'.'` only.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, the power of the string is the maximum length of a non-empty substring that contains only one unique character.

Return the power of the string.


Example 1:
Input: s = ""leetcode""
Output: 2
Explanation: The substring ""ee"" is of length 2 with the character 'e' only.


Example 2:
Input: s = ""abbcccddddeeeeedcba""
Output: 5
Explanation: The substring ""eeeee"" is of length 5 with the character 'e' only.


Example 3:
Input: s = ""triplepillooooow""
Output: 5

Example 4:
Input: s = ""hooraaaaaaaaaaay""
Output: 11

Example 5:
Input: s = ""tourist""
Output: 1

Constraints:
`1 <= s.length <= 500`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return a list of all simplified fractions between 0 and 1 (exclusive) such that the denominator is less-than-or-equal-to `n`. The fractions can be in any order.


Example 1:
Input: n = 2
Output: [""1/2""]
Explanation: ""1/2"" is the only unique fraction with a denominator less-than-or-equal-to 2.


Example 2:
Input: n = 3
Output: [""1/2"",""1/3"",""2/3""]

Example 3:
Input: n = 4
Output: [""1/2"",""1/3"",""1/4"",""2/3"",""3/4""]
Explanation: ""2/4"" is not a simplified fraction because it can be simplified to ""1/2"".


Example 4:
Input: n = 1
Output: []

Constraints:
`1 <= n <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree `root`, a node X in the tree is named good if in the path from root to X there are no nodes with a value greater than X.

Return the number of good nodes in the binary tree.


Example 1:
Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Nodes in blue are good.

Root Node (3) is always a good node.

Node 4 -> (3,4) is the maximum value in the path starting from the root.

Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.


Example 2:
Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is not good, because ""3"" is higher than it.


Example 3:
Input: root = [1]
Output: 1
Explanation: Root is considered as good.


Constraints:
The number of nodes in the binary tree is in the range `[1, 10^5]`.

Each node's value is between `[-10^4, 10^4]`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `cost` and an integer `target`. Return the maximum integer you can paint under the following rules:
The cost of painting a digit (i+1) is given by `cost[i]` (0 indexed).

The total cost used must be equal to `target`.

Integer does not have digits 0.

Since the answer may be too large, return it as string.

If there is no way to paint any integer given the condition, return ""0"".


Example 1:
Input: cost = [4,3,2,5,6,7,2,5,5], target = 9
Output: ""7772""
Explanation:  The cost to paint the digit '7' is 2, and the digit '2' is 3. Then cost(""7772"") = 2*3+ 3*1 = 9. You could also paint ""977"", but ""7772"" is the largest number.

Digit    cost
  1  ->   4
  2  ->   3
  3  ->   2
  4  ->   5
  5  ->   6
  6  ->   7
  7  ->   2
  8  ->   5
  9  ->   5

Example 2:
Input: cost = [7,6,5,5,5,6,8,7,8], target = 12
Output: ""85""
Explanation: The cost to paint the digit '8' is 7, and the digit '5' is 5. Then cost(""85"") = 7 + 5 = 12.


Example 3:
Input: cost = [2,4,6,2,4,6,4,4,4], target = 5
Output: ""0""
Explanation: It's not possible to paint any integer with total cost equal to target.


Example 4:
Input: cost = [6,10,15,40,40,40,40,40,40], target = 47
Output: ""32211""

Constraints:
`cost.length == 9`
`1 <= cost[i] <= 5000`
`1 <= target <= 5000`",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sentence `text` (A sentence is a string of space-separated words) in the following format:
First letter is in upper case.

Each word in `text` are separated by a single space.

Your task is to rearrange the words in text such that all words are rearranged in an increasing order of their lengths. If two words have the same length, arrange them in their original order.

Return the new text following the format shown above.


Example 1:
Input: text = ""Leetcode is cool""
Output: ""Is cool leetcode""
Explanation: There are 3 words, ""Leetcode"" of length 8, ""is"" of length 2 and ""cool"" of length 4.

Output is ordered by length and the new first word starts with capital letter.

Example 2:
Input: text = ""Keep calm and code on""
Output: ""On and keep calm code""
Explanation: Output is ordered as follows:
""On"" 2 letters.

""and"" 3 letters.

""keep"" 4 letters in case of tie order by position in original text.

""calm"" 4 letters.

""code"" 4 letters.


Example 3:
Input: text = ""To be or not to be""
Output: ""To be or to be not""

Constraints:
`text` begins with a capital letter and then contains lowercase letters and single space between words.

`1 <= text.length <= 10^5`",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `favoriteCompanies` where `favoriteCompanies[i]` is the list of favorites companies for the `ith` person (indexed from 0).

Return the indices of people whose list of favorite companies is not a subset of any other list of favorites companies. You must return the indices in increasing order.


Example 1:
Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""google"",""microsoft""],[""google"",""facebook""],[""google""],[""amazon""]]
Output: [0,1,4] 
Explanation: 
Person with index=2 has favoriteCompanies[2]=[""google"",""facebook""] which is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] corresponding to the person with index 0. 
Person with index=3 has favoriteCompanies[3]=[""google""] which is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] and favoriteCompanies[1]=[""google"",""microsoft""]. 
Other lists of favorite companies are not a subset of another list, therefore, the answer is [0,1,4].


Example 2:
Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""leetcode"",""amazon""],[""facebook"",""google""]]
Output: [0,1] 
Explanation: In this case favoriteCompanies[2]=[""facebook"",""google""] is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""], therefore, the answer is [0,1].


Example 3:
Input: favoriteCompanies = [[""leetcode""],[""google""],[""facebook""],[""amazon""]]
Output: [0,1,2,3]

Constraints:
`1 <= favoriteCompanies.length <= 100`
`1 <= favoriteCompanies[i].length <= 500`
`1 <= favoriteCompanies[i][j].length <= 20`
All strings in `favoriteCompanies[i]` are distinct.

All lists of favorite companies are distinct, that is, If we sort alphabetically each list then `favoriteCompanies[i] != favoriteCompanies[j].`
All strings consist of lowercase English letters only.",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a very large square wall and a circular dartboard placed on the wall. You have been challenged to throw darts into the board blindfolded. Darts thrown at the wall are represented as an array of `points` on a 2D plane. 
Return the maximum number of points that are within or lie on any circular dartboard of radius `r`.


Example 1:
Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2
Output: 4
Explanation: Circle dartboard with center in (0,0) and radius = 2 contain all points.


Example 2:
Input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5
Output: 5
Explanation: Circle dartboard with center in (0,4) and radius = 5 contain all points except the point (7,8).


Example 3:
Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1
Output: 1

Example 4:
Input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2
Output: 4

Constraints:
`1 <= points.length <= 100`
`points[i].length == 2`
`-10^4 <= points[i][0], points[i][1] <= 10^4`
`1 <= r <= 5000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `sentence` that consists of some words separated by a single space, and a `searchWord`.

You have to check if `searchWord` is a prefix of any word in `sentence`.

Return the index of the word in `sentence` where `searchWord` is a prefix of this word (1-indexed).

If `searchWord` is a prefix of more than one word, return the index of the first word (minimum index). If there is no such word return -1.

A prefix of a string `S` is any leading contiguous substring of `S`.


Example 1:
Input: sentence = ""i love eating burger"", searchWord = ""burg""
Output: 4
Explanation: ""burg"" is prefix of ""burger"" which is the 4th word in the sentence.


Example 2:
Input: sentence = ""this problem is an easy problem"", searchWord = ""pro""
Output: 2
Explanation: ""pro"" is prefix of ""problem"" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.


Example 3:
Input: sentence = ""i am tired"", searchWord = ""you""
Output: -1
Explanation: ""you"" is not a prefix of any word in the sentence.


Example 4:
Input: sentence = ""i use triple pillow"", searchWord = ""pill""
Output: 4

Example 5:
Input: sentence = ""hello from the other side"", searchWord = ""they""
Output: -1

Constraints:
`1 <= sentence.length <= 100`
`1 <= searchWord.length <= 10`
`sentence` consists of lowercase English letters and spaces.

`searchWord` consists of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer `k`.

Return the maximum number of vowel letters in any substring of `s` with length `k`.

Vowel letters in English are (a, e, i, o, u).


Example 1:
Input: s = ""abciiidef"", k = 3
Output: 3
Explanation: The substring ""iii"" contains 3 vowel letters.


Example 2:
Input: s = ""aeiou"", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.


Example 3:
Input: s = ""leetcode"", k = 3
Output: 2
Explanation: ""lee"", ""eet"" and ""ode"" contain 2 vowels.


Example 4:
Input: s = ""rhythms"", k = 4
Output: 0
Explanation: We can see that s doesn't have any vowel letters.


Example 5:
Input: s = ""tryhard"", k = 4
Output: 1

Constraints:
`1 <= s.length <= 10^5`
`s` consists of lowercase English letters.

`1 <= k <= s.length`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree where node values are digits from 1 to 9. A path in the binary tree is said to be pseudo-palindromic if at least one permutation of the node values in the path is a palindrome.

Return the number of pseudo-palindromic paths going from the root node to leaf nodes.


Example 1:
Input: root = [2,3,1,3,1,null,1]
Output: 2 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the red path [2,3,3], the green path [2,1,1], and the path [2,3,1]. Among these paths only red path and green path are pseudo-palindromic paths since the red path [2,3,3] can be rearranged in [3,2,3] (palindrome) and the green path [2,1,1] can be rearranged in [1,2,1] (palindrome).


Example 2:
Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1 
Explanation: The figure above represents the given binary tree. There are three paths going from the root node to leaf nodes: the green path [2,1,1], the path [2,1,3,1], and the path [2,1]. Among these paths only the green path is pseudo-palindromic since [2,1,1] can be rearranged in [1,2,1] (palindrome).


Example 3:
Input: root = [9]
Output: 1

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`1 <= Node.val <= 9`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays `nums1` and `nums2`.

Return the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of a array is a new array which is formed from the original array by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (ie, `[2,3,5]` is a subsequence of `[1,2,3,4,5]` while `[1,5,3]` is not).


Example 1:
Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
Output: 18
Explanation: Take subsequence [2,-2] from nums1 and subsequence [3,-6] from nums2.

Their dot product is (2*3 + (-2)*(-6)) = 18.


Example 2:
Input: nums1 = [3,-2], nums2 = [2,-6,7]
Output: 21
Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.

Their dot product is (3*7) = 21.


Example 3:
Input: nums1 = [-1,-1], nums2 = [1,1]
Output: -1
Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.

Their dot product is -1.


Constraints:
`1 <= nums1.length, nums2.length <= 500`
`-1000 <= nums1[i], nums2[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays of equal length `target` and `arr`.

In one step, you can select any non-empty sub-array of `arr` and reverse it. You are allowed to make any number of steps.

Return True if you can make `arr` equal to `target`, or False otherwise.


Example 1:
Input: target = [1,2,3,4], arr = [2,4,1,3]
Output: true
Explanation: You can follow the next steps to convert arr to target:
1- Reverse sub-array [2,4,1], arr becomes [1,4,2,3]
2- Reverse sub-array [4,2], arr becomes [1,2,4,3]
3- Reverse sub-array [4,3], arr becomes [1,2,3,4]
There are multiple ways to convert arr to target, this is not the only way to do so.


Example 2:
Input: target = [7], arr = [7]
Output: true
Explanation: arr is equal to target without any reverses.


Example 3:
Input: target = [1,12], arr = [12,1]
Output: true

Example 4:
Input: target = [3,7,9], arr = [3,7,11]
Output: false
Explanation: arr doesn't have value 9 and it can never be converted to target.


Example 5:
Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]
Output: true

Constraints:
`target.length == arr.length`
`1 <= target.length <= 1000`
`1 <= target[i] <= 1000`
`1 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string `s` and an integer `k`.

Return `true` if every binary code of length `k` is a substring of `s`. Otherwise, return `false`.


Example 1:
Input: s = ""00110110"", k = 2
Output: true
Explanation: The binary codes of length 2 are ""00"", ""01"", ""10"" and ""11"". They can be all found as substrings at indicies 0, 1, 3 and 2 respectively.


Example 2:
Input: s = ""00110"", k = 2
Output: true

Example 3:
Input: s = ""0110"", k = 1
Output: true
Explanation: The binary codes of length 1 are ""0"" and ""1"", it is clear that both exist as a substring. 

Example 4:
Input: s = ""0110"", k = 2
Output: false
Explanation: The binary code ""00"" is of length 2 and doesn't exist in the array.


Example 5:
Input: s = ""0000000001011100"", k = 4
Output: false

Constraints:
`1 <= s.length <= 5 * 105`
`s[i]` is either `'0'` or `'1'`.

`1 <= k <= 20`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are a total of `n` courses you have to take, labeled from `0` to `n-1`.

Some courses may have direct prerequisites, for example, to take course 0 you have first to take course 1, which is expressed as a pair: `[1,0]`
Given the total number of courses `n`, a list of direct `prerequisite` pairs and a list of `queries` pairs.

You should answer for each `queries[i]` whether the course `queries[i][0]` is a prerequisite of the course `queries[i][1]` or not.

Return a list of boolean, the answers to the given `queries`.

Please note that if course a is a prerequisite of course b and course b is a prerequisite of course c, then, course a is a prerequisite of course c.


Example 1:
Input: n = 2, prerequisites = [[1,0]], queries = [[0,1],[1,0]]
Output: [false,true]
Explanation: course 0 is not a prerequisite of course 1 but the opposite is true.


Example 2:
Input: n = 2, prerequisites = [], queries = [[1,0],[0,1]]
Output: [false,false]
Explanation: There are no prerequisites and each course is independent.


Example 3:
Input: n = 3, prerequisites = [[1,2],[1,0],[2,0]], queries = [[1,0],[1,2]]
Output: [true,true]

Example 4:
Input: n = 3, prerequisites = [[1,0],[2,0]], queries = [[0,1],[2,0]]
Output: [false,true]

Example 5:
Input: n = 5, prerequisites = [[0,1],[1,2],[2,3],[3,4]], queries = [[0,4],[4,0],[1,3],[3,0]]
Output: [true,false,true,false]

Constraints:
`2 <= n <= 100`
`0 <= prerequisite.length <= (n * (n - 1) / 2)`
`0 <= prerequisite[i][0], prerequisite[i][1] < n`
`prerequisite[i][0] != prerequisite[i][1]`
The prerequisites graph has no cycles.

The prerequisites graph has no repeated edges.

`1 <= queries.length <= 10^4`
`queries[i][0] != queries[i][1]`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `rows x cols` matrix `grid` representing a field of cherries. Each cell in `grid` represents the number of cherries that you can collect.

You have two robots that can collect cherries for you, Robot #1 is located at the top-left corner (0,0) , and Robot #2 is located at the top-right corner (0, cols-1) of the grid.

Return the maximum number of cherries collection using both robots  by following the rules below:
From a cell (i,j), robots can move to cell (i+1, j-1) , (i+1, j) or (i+1, j+1).

When any robot is passing through a cell, It picks it up all cherries, and the cell becomes an empty cell (0).

When both robots stay on the same cell, only one of them takes the cherries.

Both robots cannot move outside of the grid at any moment.

Both robots should reach the bottom row in the `grid`.


Example 1:
Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
Output: 24
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.

Cherries taken by Robot #1, (3 + 2 + 5 + 2) = 12.

Cherries taken by Robot #2, (1 + 5 + 5 + 1) = 12.

Total of cherries: 12 + 12 = 24.


Example 2:
Input: grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0,0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
Output: 28
Explanation: Path of robot #1 and #2 are described in color green and blue respectively.

Cherries taken by Robot #1, (1 + 9 + 5 + 2) = 17.

Cherries taken by Robot #2, (1 + 3 + 4 + 3) = 11.

Total of cherries: 17 + 11 = 28.


Example 3:
Input: grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]
Output: 22

Example 4:
Input: grid = [[1,1],[1,1]]
Output: 4

Constraints:
`rows == grid.length`
`cols == grid[i].length`
`2 <= rows, cols <= 70`
`0 <= grid[i][j] <= 100 `",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. Return the maximum value of `(nums[i]-1)*(nums[j]-1)`.


Example 1:
Input: nums = [3,4,5,2]
Output: 12 
Explanation: If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums[1]-1)*(nums[2]-1) = (4-1)*(5-1) = 3*4 = 12. 

Example 2:
Input: nums = [1,5,4,5]
Output: 16
Explanation: Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)*(5-1) = 16.


Example 3:
Input: nums = [3,7]
Output: 12

Constraints:
`2 <= nums.length <= 500`
`1 <= nums[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a rectangular cake with height `h` and width `w`, and two arrays of integers `horizontalCuts` and `verticalCuts` where `horizontalCuts[i]` is the distance from the top of the rectangular cake to the `ith` horizontal cut and similarly, `verticalCuts[j]` is the distance from the left of the rectangular cake to the `jth` vertical cut.

Return the maximum area of a piece of cake after you cut at each horizontal and vertical position provided in the arrays `horizontalCuts` and `verticalCuts`. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4 
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green piece of cake has the maximum area.


Example 2:
Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The figure above represents the given rectangular cake. Red lines are the horizontal and vertical cuts. After you cut the cake, the green and yellow pieces of cake have the maximum area.


Example 3:
Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9

Constraints:
`2 <= h, w <= 10^9`
`1 <= horizontalCuts.length < min(h, 10^5)`
`1 <= verticalCuts.length < min(w, 10^5)`
`1 <= horizontalCuts[i] < h`
`1 <= verticalCuts[i] < w`
It is guaranteed that all elements in `horizontalCuts` are distinct.

It is guaranteed that all elements in `verticalCuts` are distinct.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities numbered from `0` to `n-1` and `n-1` roads such that there is only one way to travel between two different cities (this network form a tree). Last year, The ministry of transport decided to orient the roads in one direction because they are too narrow.

Roads are represented by `connections` where `connections[i] = [a, b]` represents a road from city `a` to `b`.

This year, there will be a big event in the capital (city 0), and many people want to travel to this city.

Your task consists of reorienting some roads such that each city can visit the city 0. Return the minimum number of edges changed.

It's guaranteed that each city can reach the city 0 after reorder.


Example 1:
Input: n = 6, connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).


Example 2:
Input: n = 5, connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Change the direction of edges show in red such that each node can reach the node 0 (capital).


Example 3:
Input: n = 3, connections = [[1,0],[2,0]]
Output: 0

Constraints:
`2 <= n <= 5 * 10^4`
`connections.length == n-1`
`connections[i].length == 2`
`0 <= connections[i][0], connections[i][1] <= n-1`
`connections[i][0] != connections[i][1]`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a binary tree, a lonely node is a node that is the only child of its parent node. The root of the tree is not lonely because it does not have a parent node.

Given the `root` of a binary tree, return an array containing the values of all lonely nodes in the tree. Return the list in any order.


Example 1:
Input: root = [1,2,3,null,4]
Output: [4]
Explanation: Light blue node is the only lonely node.

Node 1 is the root and is not lonely.

Nodes 2 and 3 have the same parent and are not lonely.


Example 2:
Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2]
Output: [6,2]
Explanation: Light blue nodes are lonely nodes.

Please remember that order doesn't matter, [2,6] is also an acceptable answer.


Example 3:
Input: root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]
Output: [77,55,33,66,44,22]
Explanation: Nodes 99 and 88 share the same parent. Node 11 is the root.

All other nodes are lonely.


Example 4:
Input: root = [197]
Output: []

Example 5:
Input: root = [31,null,78,null,28]
Output: [78,28]

Constraints:
The number of nodes in the `tree` is in the range `[1, 1000].`
Each node's value is between `[1, 10^6]`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `nums` consisting of `2n` elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.

Return the array in the form `[x1,y1,x2,y2,...,xn,yn]`.


Example 1:
Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7] 
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].


Example 2:
Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]

Example 3:
Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]

Constraints:
`1 <= n <= 500`
`nums.length == 2n`
`1 <= nums[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr` and an integer `k`.

A value `arr[i]` is said to be stronger than a value `arr[j]` if `|arr[i] - m| > |arr[j] - m|` where `m` is the median of the array.

If `|arr[i] - m| == |arr[j] - m|`, then `arr[i]` is said to be stronger than `arr[j]` if `arr[i] > arr[j]`.

Return a list of the strongest `k` values in the array. return the answer in any arbitrary order.

Median is the middle value in an ordered integer list. More formally, if the length of the list is n, the median is the element in position `((n - 1) / 2)` in the sorted list (0-indexed).

For `arr = [6, -3, 7, 2, 11]`, `n = 5` and the median is obtained by sorting the array `arr = [-3, 2, 6, 7, 11]` and the median is `arr[m]` where `m = ((5 - 1) / 2) = 2`. The median is `6`.

For `arr = [-7, 22, 17, 3]`, `n = 4` and the median is obtained by sorting the array `arr = [-7, 3, 17, 22]` and the median is `arr[m]` where `m = ((4 - 1) / 2) = 1`. The median is `3`.


Example 1:
Input: arr = [1,2,3,4,5], k = 2
Output: [5,1]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.

Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.


Example 2:
Input: arr = [1,1,3,5,5], k = 2
Output: [5,5]
Explanation: Median is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].


Example 3:
Input: arr = [6,7,11,7,6,8], k = 5
Output: [11,8,6,6,7]
Explanation: Median is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].

Any permutation of [11,8,6,6,7] is accepted.


Example 4:
Input: arr = [6,-3,7,2,11], k = 3
Output: [-3,11,2]

Example 5:
Input: arr = [-7,22,17,3], k = 2
Output: [22,17]

Constraints:
`1 <= arr.length <= 10^5`
`-10^5 <= arr[i] <= 10^5`
`1 <= k <= arr.length`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a browser of one tab where you start on the `homepage` and you can visit another `url`, get back in the history number of `steps` or move forward in the history number of `steps`.

Implement the `BrowserHistory` class:
`BrowserHistory(string homepage)` Initializes the object with the `homepage` of the browser.

`void visit(string url)` Visits `url` from the current page. It clears up all the forward history.

`string back(int steps)` Move `steps` back in history. If you can only return `x` steps in the history and `steps > x`, you will return only `x` steps. Return the current `url` after moving back in history at most `steps`.

`string forward(int steps)` Move `steps` forward in history. If you can only forward `x` steps in the history and `steps > x`, you will forward only `x` steps. Return the current `url` after forwarding in history at most `steps`.


Example:
Input:
[""BrowserHistory"",""visit"",""visit"",""visit"",""back"",""back"",""forward"",""visit"",""forward"",""back"",""back""]
[[""leetcode.com""],[""google.com""],[""facebook.com""],[""youtube.com""],[1],[1],[1],[""linkedin.com""],[2],[2],[7]]
Output:
[null,null,null,null,""facebook.com"",""google.com"",""facebook.com"",null,""linkedin.com"",""google.com"",""leetcode.com""]
Explanation:
BrowserHistory browserHistory = new BrowserHistory(""leetcode.com"");
browserHistory.visit(""google.com"");       // You are in ""leetcode.com"". Visit ""google.com""
browserHistory.visit(""facebook.com"");     // You are in ""google.com"". Visit ""facebook.com""
browserHistory.visit(""youtube.com"");      // You are in ""facebook.com"". Visit ""youtube.com""
browserHistory.back(1);                   // You are in ""youtube.com"", move back to ""facebook.com"" return ""facebook.com""
browserHistory.back(1);                   // You are in ""facebook.com"", move back to ""google.com"" return ""google.com""
browserHistory.forward(1);                // You are in ""google.com"", move forward to ""facebook.com"" return ""facebook.com""
browserHistory.visit(""linkedin.com"");     // You are in ""facebook.com"". Visit ""linkedin.com""
browserHistory.forward(2);                // You are in ""linkedin.com"", you cannot move forward any steps.

browserHistory.back(2);                   // You are in ""linkedin.com"", move back two steps to ""facebook.com"" then to ""google.com"". return ""google.com""
browserHistory.back(7);                   // You are in ""google.com"", you can move back only one step to ""leetcode.com"". return ""leetcode.com""

Constraints:
`1 <= homepage.length <= 20`
`1 <= url.length <= 20`
`1 <= steps <= 100`
`homepage` and `url` consist of  '.' or lower case English letters.

At most `5000` calls will be made to `visit`, `back`, and `forward`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a row of `m` houses in a small city, each house must be painted with one of the `n` colors (labeled from `1` to `n`), some houses that have been painted last summer should not be painted again.

A neighborhood is a maximal group of continuous houses that are painted with the same color.

For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` neighborhoods `[{1}, {2,2}, {3,3}, {2}, {1,1}]`.

Given an array `houses`, an `m x n` matrix `cost` and an integer `target` where:
`houses[i]`: is the color of the house `i`, and `0` if the house is not painted yet.

`cost[i][j]`: is the cost of paint the house `i` with the color `j + 1`.

Return the minimum cost of painting all the remaining houses in such a way that there are exactly `target` neighborhoods. If it is not possible, return `-1`.


Example 1:
Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint houses of this way [1,2,2,1,1]
This array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].

Cost of paint all houses (1 + 1 + 1 + 1 + 5) = 9.


Example 2:
Input: houses = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 11
Explanation: Some houses are already painted, Paint the houses of this way [2,2,1,2,2]
This array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}]. 
Cost of paint the first and last house (10 + 1) = 11.


Example 3:
Input: houses = [0,0,0,0,0], cost = [[1,10],[10,1],[1,10],[10,1],[1,10]], m = 5, n = 2, target = 5
Output: 5

Example 4:
Input: houses = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
Output: -1
Explanation: Houses are already painted with a total of 4 neighborhoods [{3},{1},{2},{3}] different of target = 3.


Constraints:
`m == houses.length == cost.length`
`n == cost[i].length`
`1 <= m <= 100`
`1 <= n <= 20`
`1 <= target <= m`
`0 <= houses[i] <= n`
`1 <= cost[i][j] <= 10^4`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `head` of a linked list and two integers `m` and `n`. Traverse the linked list and remove some nodes in the following way:
Start with the head as the current node.

Keep the first `m` nodes starting with the current node.

Remove the next `n` nodes
Keep repeating steps 2 and 3 until you reach the end of the list.

Return the head of the modified list after removing the mentioned nodes.

Follow up question: How can you solve this problem by modifying the list in-place?

Example 1:
Input: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3
Output: [1,2,6,7,11,12]
Explanation: Keep the first (m = 2) nodes starting from the head of the linked List  (1 ->2) show in black nodes.

Delete the next (n = 3) nodes (3 -> 4 -> 5) show in read nodes.

Continue with the same procedure until reaching the tail of the Linked List.

Head of linked list after removing nodes is returned.


Example 2:
Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3
Output: [1,5,9]
Explanation: Head of linked list after removing nodes is returned.


Example 3:
Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1
Output: [1,2,3,5,6,7,9,10,11]

Example 4:
Input: head = [9,3,7,7,9,10,8,2], m = 1, n = 2
Output: [9,7,8]

Constraints:
The given linked list will contain between `1` and `10^4` nodes.

The value of each node in the linked list will be in the range` [1, 10^6]`.

`1 <= m,n <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `prices` where `prices[i]` is the price of the `ith` item in a shop. There is a special discount for items in the shop, if you buy the `ith` item, then you will receive a discount equivalent to `prices[j]` where `j` is the minimum index such that `j > i` and `prices[j] <= prices[i]`, otherwise, you will not receive any discount at all.

Return an array where the `ith` element is the final price you will pay for the `ith` item of the shop considering the special discount.


Example 1:
Input: prices = [8,4,6,2,3]
Output: [4,2,4,2,3]
Explanation: 
For item 0 with price[0]=8 you will receive a discount equivalent to prices[1]=4, therefore, the final price you will pay is 8 - 4 = 4. 
For item 1 with price[1]=4 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 4 - 2 = 2. 
For item 2 with price[2]=6 you will receive a discount equivalent to prices[3]=2, therefore, the final price you will pay is 6 - 2 = 4. 
For items 3 and 4 you will not receive any discount at all.


Example 2:
Input: prices = [1,2,3,4,5]
Output: [1,2,3,4,5]
Explanation: In this case, for all items, you will not receive any discount at all.


Example 3:
Input: prices = [10,1,1,6]
Output: [9,0,1,6]

Constraints:
`1 <= prices.length <= 500`
`1 <= prices[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the class `SubrectangleQueries` which receives a `rows x cols` rectangle as a matrix of integers in the constructor and supports two methods:
1.` updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`
Updates all values with `newValue` in the subrectangle whose upper left coordinate is `(row1,col1)` and bottom right coordinate is `(row2,col2)`.

2.` getValue(int row, int col)`
Returns the current value of the coordinate `(row,col)` from the rectangle.


Example 1:
Input
[""SubrectangleQueries"",""getValue"",""updateSubrectangle"",""getValue"",""getValue"",""updateSubrectangle"",""getValue"",""getValue""]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3,2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
Output
[null,1,null,5,5,null,10,5]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);  
// The initial rectangle (4x3) looks like:
// 1 2 1
// 4 3 4
// 3 2 1
// 1 1 1
subrectangleQueries.getValue(0, 2); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 3, 2, 5);
// After this update the rectangle looks like:
// 5 5 5
// 5 5 5
// 5 5 5
// 5 5 5 
subrectangleQueries.getValue(0, 2); // return 5
subrectangleQueries.getValue(3, 1); // return 5
subrectangleQueries.updateSubrectangle(3, 0, 3, 2, 10);
// After this update the rectangle looks like:
// 5   5   5
// 5   5   5
// 5   5   5
// 10  10  10 
subrectangleQueries.getValue(3, 1); // return 10
subrectangleQueries.getValue(0, 2); // return 5

Example 2:
Input
[""SubrectangleQueries"",""getValue"",""updateSubrectangle"",""getValue"",""getValue"",""updateSubrectangle"",""getValue""]
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0],[2,2],[1,1,2,2,20],[2,2]]
Output
[null,1,null,100,100,null,20]
Explanation
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);
subrectangleQueries.getValue(0, 0); // return 1
subrectangleQueries.updateSubrectangle(0, 0, 2, 2, 100);
subrectangleQueries.getValue(0, 0); // return 100
subrectangleQueries.getValue(2, 2); // return 100
subrectangleQueries.updateSubrectangle(1, 1, 2, 2, 20);
subrectangleQueries.getValue(2, 2); // return 20

Constraints:
There will be at most `500` operations considering both methods: `updateSubrectangle` and `getValue`.

`1 <= rows, cols <= 100`
`rows == rectangle.length`
`cols == rectangle[i].length`
`0 <= row1 <= row2 < rows`
`0 <= col1 <= col2 < cols`
`1 <= newValue, rectangle[i][j] <= 10^9`
`0 <= row < rows`
`0 <= col < cols`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr` and an integer `target`.

You have to find two non-overlapping sub-arrays of `arr` each with sum equal `target`. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.

Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.


Example 1:
Input: arr = [3,2,2,4,3], target = 3
Output: 2
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.


Example 2:
Input: arr = [7,3,4,7], target = 7
Output: 2
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.


Example 3:
Input: arr = [4,3,2,6,2,3,4], target = 6
Output: -1
Explanation: We have only one sub-array of sum = 6.


Example 4:
Input: arr = [5,5,4,4,5], target = 3
Output: -1
Explanation: We cannot find a sub-array of sum = 3.


Example 5:
Input: arr = [3,1,1,1,5,1,2,1], target = 3
Output: 3
Explanation: Note that sub-arrays [1,2] and [2,1] cannot be an answer because they overlap.


Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 1000`
`1 <= target <= 10^8`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `houses` and an integer `k`. where `houses[i]` is the location of the ith house along a street, your task is to allocate `k` mailboxes in the street.

Return the minimum total distance between each house and its nearest mailbox.

The answer is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: houses = [1,4,8,10,20], k = 3
Output: 5
Explanation: Allocate mailboxes in position 3, 9 and 20.

Minimum total distance from each houses to nearest mailboxes is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5 

Example 2:
Input: houses = [2,3,5,12,18], k = 2
Output: 9
Explanation: Allocate mailboxes in position 3 and 14.

Minimum total distance from each houses to nearest mailboxes is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.


Example 3:
Input: houses = [7,4,6,1], k = 1
Output: 8

Example 4:
Input: houses = [3,6,14,10], k = 4
Output: 0

Constraints:
`n == houses.length`
`1 <= n <= 100`
`1 <= houses[i] <= 10^4`
`1 <= k <= n`
Array `houses` contain unique integers.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums`. We define a running sum of an array as `runningSum[i] = sum(nums[0]...nums[i])`.

Return the running sum of `nums`.


Example 1:
Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running sum is obtained as follows: [1, 1+2, 1+2+3, 1+2+3+4].


Example 2:
Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running sum is obtained as follows: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].


Example 3:
Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]

Constraints:
`1 <= nums.length <= 1000`
`-10^6 <= nums[i] <= 10^6`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr` and an integer `k`. Find the least number of unique integers after removing exactly `k` elements.


Example 1:
Input: arr = [5,5,4], k = 1
Output: 1
Explanation: Remove the single 4, only 5 is left.


Example 2:
Input: arr = [4,3,1,1,3,3,2], k = 3
Output: 2
Explanation: Remove 4, 2 and either one of the two 1s or three 3s. 1 and 3 will be left.


Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^9`
`0 <= k <= arr.length`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `bloomDay`, an integer `m` and an integer `k`.

We need to make `m` bouquets. To make a bouquet, you need to use `k` adjacent flowers from the garden.

The garden consists of `n` flowers, the `ith` flower will bloom in the `bloomDay[i]` and then can be used in exactly one bouquet.

Return the minimum number of days you need to wait to be able to make `m` bouquets from the garden. If it is impossible to make `m` bouquets return -1.


Example 1:
Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let's see what happened in the first three days. x means flower bloomed and _ means flower didn't bloom in the garden.

We need 3 bouquets each should contain 1 flower.

After day 1: [x, _, _, _, _]   // we can only make one bouquet.

After day 2: [x, _, _, _, x]   // we can only make two bouquets.

After day 3: [x, _, x, _, x]   // we can make 3 bouquets. The answer is 3.


Example 2:
Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets each has 2 flowers, that means we need 6 flowers. We only have 5 flowers so it is impossible to get the needed bouquets and we return -1.


Example 3:
Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
Output: 12
Explanation: We need 2 bouquets each should have 3 flowers.

Here's the garden after the 7 and 12 days:
After day 7: [x, x, x, x, _, x, x]
We can make one bouquet of the first three flowers that bloomed. We cannot make another bouquet from the last three flowers that bloomed because they are not adjacent.

After day 12: [x, x, x, x, x, x, x]
It is obvious that we can make two bouquets in different ways.


Example 4:
Input: bloomDay = [1000000000,1000000000], m = 1, k = 1
Output: 1000000000
Explanation: You need to wait 1000000000 days to have a flower ready for a bouquet.


Example 5:
Input: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2
Output: 9

Constraints:
`bloomDay.length == n`
`1 <= n <= 10^5`
`1 <= bloomDay[i] <= 10^9`
`1 <= m <= 10^6`
`1 <= k <= n`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a tree with `n` nodes numbered from `0` to `n-1` in the form of a parent array where `parent[i]` is the parent of node `i`. The root of the tree is node `0`.

Implement the function `getKthAncestor``(int node, int k)` to return the `k`-th ancestor of the given `node`. If there is no such ancestor, return `-1`.

The k-th ancestor of a tree node is the `k`-th node in the path from that node to the root.


Example:
Input:
[""TreeAncestor"",""getKthAncestor"",""getKthAncestor"",""getKthAncestor""]
[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]
Output:
[null,1,0,-1]
Explanation:
TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);
treeAncestor.getKthAncestor(3, 1);  // returns 1 which is the parent of 3
treeAncestor.getKthAncestor(5, 2);  // returns 0 which is the grandparent of 5
treeAncestor.getKthAncestor(6, 3);  // returns -1 because there is no such ancestor

Constraints:
`1 <= k <= n <= 5*10^4`
`parent[0] == -1` indicating that `0` is the root node.

`0 <= parent[i] < n` for all `0 < i < n`
`0 <= node < n`
There will be at most `5*10^4` queries.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary tree is given such that each node contains an additional random pointer which could point to any node in the tree or null.

Return a deep copy of the tree.

The tree is represented in the same input/output way as normal binary trees where each node is represented as a pair of `[val, random_index]` where:
`val`: an integer representing `Node.val`
`random_index`: the index of the node (in the input) where the random pointer points to, or `null` if it does not point to any node.

You will be given the tree in class `Node` and you should return the cloned tree in class `NodeCopy`. `NodeCopy` class is just a clone of `Node` class with the same attributes and constructors.


Example 1:
Input: root = [[1,null],null,[4,3],[7,0]]
Output: [[1,null],null,[4,3],[7,0]]
Explanation: The original binary tree is [1,null,4,7].

The random pointer of node one is null, so it is represented as [1, null].

The random pointer of node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.

The random pointer of node 7 is node 1, so it is represented as [7, 0] where 0 is the index of node 1 in the array representing the tree.


Example 2:
Input: root = [[1,4],null,[1,0],null,[1,5],[1,5]]
Output: [[1,4],null,[1,0],null,[1,5],[1,5]]
Explanation: The random pointer of a node can be the node itself.


Example 3:
Input: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
Output: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]

Example 4:
Input: root = []
Output: []

Example 5:
Input: root = [[1,null],null,[2,null],null,[1,null]]
Output: [[1,null],null,[2,null],null,[1,null]]

Constraints:
The number of nodes in the `tree` is in the range `[0, 1000].`
Each node's value is between `[1, 10^6]`.",0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n` and an integer `start`.

Define an array `nums` where `nums[i] = start + 2*i` (0-indexed) and `n == nums.length`.

Return the bitwise XOR of all elements of `nums`.


Example 1:
Input: n = 5, start = 0
Output: 8
Explanation: Array nums is equal to [0, 2, 4, 6, 8] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.

Where ""^"" corresponds to bitwise XOR operator.


Example 2:
Input: n = 4, start = 3
Output: 8
Explanation: Array nums is equal to [3, 5, 7, 9] where (3 ^ 5 ^ 7 ^ 9) = 8.


Example 3:
Input: n = 1, start = 7
Output: 7

Example 4:
Input: n = 10, start = 5
Output: 2

Constraints:
`1 <= n <= 1000`
`0 <= start <= 1000`
`n == nums.length`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings `names` of size `n`. You will create `n` folders in your file system such that, at the `ith` minute, you will create a folder with the name `names[i]`.

Since two files cannot have the same name, if you enter a folder name which is previously used, the system will have a suffix addition to its name in the form of `(k)`, where, `k` is the smallest positive integer such that the obtained name remains unique.

Return an array of strings of length `n` where `ans[i]` is the actual name the system will assign to the `ith` folder when you create it.


Example 1:
Input: names = [""pes"",""fifa"",""gta"",""pes(2019)""]
Output: [""pes"",""fifa"",""gta"",""pes(2019)""]
Explanation: Let's see how the file system creates folder names:
""pes"" --> not assigned before, remains ""pes""
""fifa"" --> not assigned before, remains ""fifa""
""gta"" --> not assigned before, remains ""gta""
""pes(2019)"" --> not assigned before, remains ""pes(2019)""

Example 2:
Input: names = [""gta"",""gta(1)"",""gta"",""avalon""]
Output: [""gta"",""gta(1)"",""gta(2)"",""avalon""]
Explanation: Let's see how the file system creates folder names:
""gta"" --> not assigned before, remains ""gta""
""gta(1)"" --> not assigned before, remains ""gta(1)""
""gta"" --> the name is reserved, system adds (k), since ""gta(1)"" is also reserved, systems put k = 2. it becomes ""gta(2)""
""avalon"" --> not assigned before, remains ""avalon""

Example 3:
Input: names = [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece""]
Output: [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece(4)""]
Explanation: When the last folder is created, the smallest positive valid k is 4, and it becomes ""onepiece(4)"".


Example 4:
Input: names = [""wano"",""wano"",""wano"",""wano""]
Output: [""wano"",""wano(1)"",""wano(2)"",""wano(3)""]
Explanation: Just increase the value of k each time you create folder ""wano"".


Example 5:
Input: names = [""kaido"",""kaido(1)"",""kaido"",""kaido(1)""]
Output: [""kaido"",""kaido(1)"",""kaido(2)"",""kaido(1)(1)""]
Explanation: Please note that system adds the suffix (k) to current name even it contained the same suffix before.


Constraints:
`1 <= names.length <= 5 * 10^4`
`1 <= names[i].length <= 20`
`names[i]` consists of lower case English letters, digits and/or round brackets.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the `nth` lake, the `nth` lake becomes full of water. If it rains over a lake which is full of water, there will be a flood. Your goal is to avoid the flood in any lake.

Given an integer array `rains` where:
`rains[i] > 0` means there will be rains over the `rains[i]` lake.

`rains[i] == 0` means there are no rains this day and you can choose one lake this day and dry it.

Return an array `ans` where:
`ans.length == rains.length`
`ans[i] == -1` if `rains[i] > 0`.

`ans[i]` is the lake you choose to dry in the `ith` day if `rains[i] == 0`.

If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.

Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes. (see example 4)

Example 1:
Input: rains = [1,2,3,4]
Output: [-1,-1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day full lakes are [1,2,3]
After the fourth day full lakes are [1,2,3,4]
There's no day to dry any lake and there is no flood in any lake.


Example 2:
Input: rains = [1,2,0,0,2,1]
Output: [-1,-1,2,1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day, we dry lake 2. Full lakes are [1]
After the fourth day, we dry lake 1. There is no full lakes.

After the fifth day, full lakes are [2].

After the sixth day, full lakes are [1,2].

It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.


Example 3:
Input: rains = [1,2,0,1,2]
Output: []
Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.

After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.


Example 4:
Input: rains = [69,0,0,0,69]
Output: [-1,69,1,1,-1]
Explanation: Any solution on one of the forms [-1,69,x,y,-1], [-1,x,69,y,-1] or [-1,x,y,69,-1] is acceptable where 1 <= x,y <= 10^9

Example 5:
Input: rains = [10,20,20]
Output: []
Explanation: It will rain over lake 20 two consecutive days. There is no chance to dry any lake.


Constraints:
`1 <= rains.length <= 105`
`0 <= rains[i] <= 109`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a weighted undirected connected graph with `n` vertices numbered from `0` to `n - 1`, and an array `edges` where `edges[i] = [ai, bi, weighti]` represents a bidirectional and weighted edge between nodes `ai` and `bi`. A minimum spanning tree (MST) is a subset of the graph's edges that connects all vertices without cycles and with the minimum possible total edge weight.

Find all the critical and pseudo-critical edges in the given graph's minimum spanning tree (MST). An MST edge whose deletion from the graph would cause the MST weight to increase is called a critical edge. On the other hand, a pseudo-critical edge is that which can appear in some MSTs but not all.

Note that you can return the indices of the edges in any order.


Example 1:
Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[3,4,3],[1,4,6]]
Output: [[0,1],[2,3,4,5]]
Explanation: The figure above describes the graph.

The following figure shows all the possible MSTs:
Notice that the two edges 0 and 1 appear in all MSTs, therefore they are critical edges, so we return them in the first list of the output.

The edges 2, 3, 4, and 5 are only part of some MSTs, therefore they are considered pseudo-critical edges. We add them to the second list of the output.


Example 2:
Input: n = 4, edges = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
Output: [[],[0,1,2,3]]
Explanation: We can observe that since all 4 edges have equal weight, choosing any 3 edges from the given 4 will yield an MST. Therefore all 4 edges are pseudo-critical.


Constraints:
`2 <= n <= 100`
`1 <= edges.length <= min(200, n * (n - 1) / 2)`
`edges[i].length == 3`
`0 <= ai < bi < n`
`1 <= weighti <= 1000`
All pairs `(ai, bi)` are distinct.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `root` of an N-ary tree, return a deep copy (clone) of the tree.

Each node in the n-ary tree contains a val (`int`) and a list (`List[Node]`) of its children.

class Node {
    public int val;
    public List<Node> children;
}
Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

Follow up: Can your solution work for the graph problem?

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [1,null,3,2,4,null,5,6]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]

Constraints:
The depth of the n-ary tree is less than or equal to `1000`.

The total number of nodes is between `[0, 10^4]`.",0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of unique integers `salary` where `salary[i]` is the salary of the employee `i`.

Return the average salary of employees excluding the minimum and maximum salary.


Example 1:
Input: salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: Minimum salary and maximum salary are 1000 and 4000 respectively.

Average salary excluding minimum and maximum salary is (2000+3000)/2= 2500

Example 2:
Input: salary = [1000,2000,3000]
Output: 2000.00000
Explanation: Minimum salary and maximum salary are 1000 and 3000 respectively.

Average salary excluding minimum and maximum salary is (2000)/1= 2000

Example 3:
Input: salary = [6000,5000,4000,3000,2000,1000]
Output: 3500.00000

Example 4:
Input: salary = [8000,9000,2000,3000,6000,1000]
Output: 4750.00000

Constraints:
`3 <= salary.length <= 100`
`10^3 <= salary[i] <= 10^6`
`salary[i]` is unique.

Answers within `10^-5` of the actual value will be accepted as correct.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two positive integers `n` and `k`.

A factor of an integer `n` is defined as an integer `i` where `n % i == 0`.

Consider a list of all factors of `n` sorted in ascending order, return the `kth` factor in this list or return -1 if `n` has less than `k` factors.


Example 1:
Input: n = 12, k = 3
Output: 3
Explanation: Factors list is [1, 2, 3, 4, 6, 12], the 3rd factor is 3.


Example 2:
Input: n = 7, k = 2
Output: 7
Explanation: Factors list is [1, 7], the 2nd factor is 7.


Example 3:
Input: n = 4, k = 4
Output: -1
Explanation: Factors list is [1, 2, 4], there is only 3 factors. We should return -1.


Example 4:
Input: n = 1, k = 1
Output: 1
Explanation: Factors list is [1], the 1st factor is 1.


Example 5:
Input: n = 1000, k = 3
Output: 4
Explanation: Factors list is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].


Constraints:
`1 <= k <= n <= 1000`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array `nums`, you should delete one element from it.

Return the size of the longest non-empty subarray containing only 1's in the resulting array.

Return 0 if there is no such subarray.


Example 1:
Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number in position 2, [1,1,1] contains 3 numbers with value of 1's.


Example 2:
Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number in position 4, [0,1,1,1,1,1,0,1] longest subarray with value of 1's is [1,1,1,1,1].


Example 3:
Input: nums = [1,1,1]
Output: 2
Explanation: You must delete one element.


Example 4:
Input: nums = [1,1,0,0,1,1,1,0,1]
Output: 4

Example 5:
Input: nums = [0,0,0]
Output: 0

Constraints:
`1 <= nums.length <= 10^5`
`nums[i]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the integer `n` representing the number of courses at some university labeled from `1` to `n`, and the array `dependencies` where `dependencies[i] = [xi, yi]` represents a prerequisite relationship, that is, the course `xi` must be taken before the course `yi`. Also, you are given the integer `k`.

In one semester you can take at most `k` courses as long as you have taken all the prerequisites for the courses you are taking.

Return the minimum number of semesters to take all courses. It is guaranteed that you can take all courses in some way.


Example 1:
Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2
Output: 3 
Explanation: The figure above represents the given graph. In this case we can take courses 2 and 3 in the first semester, then take course 1 in the second semester and finally take course 4 in the third semester.


Example 2:
Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2
Output: 4 
Explanation: The figure above represents the given graph. In this case one optimal way to take all courses is: take courses 2 and 3 in the first semester and take course 4 in the second semester, then take course 1 in the third semester and finally take course 5 in the fourth semester.


Example 3:
Input: n = 11, dependencies = [], k = 2
Output: 6

Constraints:
`1 <= n <= 15`
`1 <= k <= n`
`0 <= dependencies.length <= n * (n-1) / 2`
`dependencies[i].length == 2`
`1 <= xi, yi <= n`
`xi != yi`
All prerequisite relationships are distinct, that is, `dependencies[i] != dependencies[j]`.

The given graph is a directed acyclic graph.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.

Return `True` if the path crosses itself at any point, that is, if at any time you are on a location you've previously visited. Return `False` otherwise.


Example 1:
Input: path = ""NES""
Output: false 
Explanation: Notice that the path doesn't cross any point more than once.


Example 2:
Input: path = ""NESWW""
Output: true
Explanation: Notice that the path visits the origin twice.


Constraints:
`1 <= path.length <= 10^4`
`path` will only consist of characters in `{'N', 'S', 'E', 'W}`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr` of even length `n` and an integer `k`.

We want to divide the array into exactly `n / 2` pairs such that the sum of each pair is divisible by `k`.

Return True If you can find a way to do that or False otherwise.


Example 1:
Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
Output: true
Explanation: Pairs are (1,9),(2,8),(3,7),(4,6) and (5,10).


Example 2:
Input: arr = [1,2,3,4,5,6], k = 7
Output: true
Explanation: Pairs are (1,6),(2,5) and(3,4).


Example 3:
Input: arr = [1,2,3,4,5,6], k = 10
Output: false
Explanation: You can try all possible pairs to see that there is no way to divide arr into 3 pairs each with sum divisible by 10.


Example 4:
Input: arr = [-10,10], k = 2
Output: true

Example 5:
Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3
Output: true

Constraints:
`arr.length == n`
`1 <= n <= 105`
`n` is even.

`-109 <= arr[i] <= 109`
`1 <= k <= 105`",1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and an integer `target`.

Return the number of non-empty subsequences of `nums` such that the sum of the minimum and maximum element on it is less or equal to `target`. Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.

[3] -> Min value + max value <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)

Example 2:
Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).

[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]

Example 3:
Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of them don't satisfy the condition ([6,7], [7]).

Number of valid subsequences (63 - 2 = 61).


Example 4:
Input: nums = [5,2,4,1,7,6,8], target = 16
Output: 127
Explanation: All non-empty subset satisfy the condition (2^7 - 1) = 127

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 106`
`1 <= target <= 106`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `points` containing the coordinates of points on a 2D plane, sorted by the x-values, where `points[i] = [xi, yi]` such that `xi < xj` for all `1 <= i < j <= points.length`. You are also given an integer `k`.

Find the maximum value of the equation `yi + yj + |xi - xj|` where `|xi - xj| <= k` and `1 <= i < j <= points.length`. It is guaranteed that there exists at least one pair of points that satisfy the constraint `|xi - xj| <= k`.


Example 1:
Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1
Output: 4
Explanation: The first two points satisfy the condition |xi - xj| <= 1 and if we calculate the equation we get 3 + 0 + |1 - 2| = 4. Third and fourth points also satisfy the condition and give a value of 10 + -10 + |5 - 6| = 1.

No other pairs satisfy the condition, so we return the max of 4 and 1.


Example 2:
Input: points = [[0,0],[3,0],[9,2]], k = 3
Output: 3
Explanation: Only the first two points have an absolute difference of 3 or less in the x-values, and give the value of 0 + 0 + |0 - 3| = 3.


Constraints:
`2 <= points.length <= 10^5`
`points[i].length == 2`
`-10^8 <= points[i][0], points[i][1] <= 10^8`
`0 <= k <= 2 * 10^8`
`points[i][0] < points[j][0]` for all `1 <= i < j <= points.length`
`xi` form a strictly increasing sequence.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We will use a file-sharing system to share a very large file which consists of `m` small chunks with IDs from `1` to `m`.

When users join the system, the system should assign a unique ID to them. The unique ID should be used once for each user, but when a user leaves the system, the ID can be reused again.

Users can request a certain chunk of the file, the system should return a list of IDs of all the users who own this chunk. If the user receive a non-empty list of IDs, they receive the requested chunk successfully.

Implement the `FileSharing` class:
`FileSharing(int m)` Initializes the object with a file of `m` chunks.

`int join(int[] ownedChunks)`: A new user joined the system owning some chunks of the file, the system should assign an id to the user which is the smallest positive integer not taken by any other user. Return the assigned id.

`void leave(int userID)`: The user with `userID` will leave the system, you cannot take file chunks from them anymore.

`int[] request(int userID, int chunkID)`: The user `userID` requested the file chunk with `chunkID`. Return a list of the IDs of all users that own this chunk sorted in ascending order.

Follow-ups:
What happens if the system identifies the user by their IP address instead of their unique ID and users disconnect and connect from the system with the same IP?
If the users in the system join and leave the system frequently without requesting any chunks, will your solution still be efficient?
If all each user join the system one time, request all files and then leave, will your solution still be efficient?
If the system will be used to share `n` files where the `ith` file consists of `m[i]`, what are the changes you have to do?

Example:
Input:
[""FileSharing"",""join"",""join"",""join"",""request"",""request"",""leave"",""request"",""leave"",""join""]
[[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[2],[[]]]
Output:
[null,1,2,3,[2],[1,2],null,[],null,1]
Explanation:
FileSharing fileSharing = new FileSharing(4); // We use the system to share a file of 4 chunks.

fileSharing.join([1, 2]);    // A user who has chunks [1,2] joined the system, assign id = 1 to them and return 1.

fileSharing.join([2, 3]);    // A user who has chunks [2,3] joined the system, assign id = 2 to them and return 2.

fileSharing.join([4]);       // A user who has chunk [4] joined the system, assign id = 3 to them and return 3.

fileSharing.request(1, 3);   // The user with id = 1 requested the third file chunk, as only the user with id = 2 has the file, return [2] . Notice that user 1 now has chunks [1,2,3].

fileSharing.request(2, 2);   // The user with id = 2 requested the second file chunk, users with ids [1,2] have this chunk, thus we return [1,2].

fileSharing.leave(1);        // The user with id = 1 left the system, all the file chunks with them are no longer available for other users.

fileSharing.request(2, 1);   // The user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list [].

fileSharing.leave(2);        // The user with id = 2 left the system.

fileSharing.join([]);        // A user who doesn't have any chunks joined the system, assign id = 1 to them and return 1. Notice that ids 1 and 2 are free and we can reuse them.


Constraints:
`1 <= m <= 10^5`
`0 <= ownedChunks.length <= min(100, m)`
`1 <= ownedChunks[i] <= m`
Values of `ownedChunks` are unique.

`1 <= chunkID <= m`
`userID` is guaranteed to be a user in the system if you assign the IDs correctly. 
At most `10^4` calls will be made to `join`, `leave` and `request`.

Each call to `leave` will have a matching call for `join`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of numbers `arr`. A sequence of numbers is called an arithmetic progression if the difference between any two consecutive elements is the same.

Return `true` if the array can be rearranged to form an arithmetic progression, otherwise, return `false`.


Example 1:
Input: arr = [3,5,1]
Output: true
Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with differences 2 and -2 respectively, between each consecutive elements.


Example 2:
Input: arr = [1,2,4]
Output: false
Explanation: There is no way to reorder the elements to obtain an arithmetic progression.


Constraints:
`2 <= arr.length <= 1000`
`-10^6 <= arr[i] <= 10^6`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have a wooden plank of the length `n` units. Some ants are walking on the plank, each ant moves with speed 1 unit per second. Some of the ants move to the left, the other move to the right.

When two ants moving in two different directions meet at some point, they change their directions and continue moving again. Assume changing directions doesn't take any additional time.

When an ant reaches one end of the plank at a time `t`, it falls out of the plank imediately.

Given an integer `n` and two integer arrays `left` and `right`, the positions of the ants moving to the left and the right. Return the moment when the last ant(s) fall out of the plank.


Example 1:
Input: n = 4, left = [4,3], right = [0,1]
Output: 4
Explanation: In the image above:
-The ant at index 0 is named A and going to the right.

-The ant at index 1 is named B and going to the right.

-The ant at index 3 is named C and going to the left.

-The ant at index 4 is named D and going to the left.

Note that the last moment when an ant was on the plank is t = 4 second, after that it falls imediately out of the plank. (i.e. We can say that at t = 4.0000000001, there is no ants on the plank).


Example 2:
Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]
Output: 7
Explanation: All ants are going to the right, the ant at index 0 needs 7 seconds to fall.


Example 3:
Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []
Output: 7
Explanation: All ants are going to the left, the ant at index 7 needs 7 seconds to fall.


Example 4:
Input: n = 9, left = [5], right = [4]
Output: 5
Explanation: At t = 1 second, both ants will be at the same intial position but with different direction.


Example 5:
Input: n = 6, left = [6], right = [0]
Output: 6

Constraints:
`1 <= n <= 10^4`
`0 <= left.length <= n + 1`
`0 <= left[i] <= n`
`0 <= right.length <= n + 1`
`0 <= right[i] <= n`
`1 <= left.length + right.length <= n + 1`
All values of `left` and `right` are unique, and each value can appear only in one of the two arrays.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `rows * columns` matrix `mat` of ones and zeros, return how many submatrices have all ones.


Example 1:
Input: mat = [[1,0,1],
              [1,1,0],
              [1,1,0]]
Output: 13
Explanation:
There are 6 rectangles of side 1x1.

There are 2 rectangles of side 1x2.

There are 3 rectangles of side 2x1.

There is 1 rectangle of side 2x2. 
There is 1 rectangle of side 3x1.

Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.


Example 2:
Input: mat = [[0,1,1,0],
              [0,1,1,1],
              [1,1,1,0]]
Output: 24
Explanation:
There are 8 rectangles of side 1x1.

There are 5 rectangles of side 1x2.

There are 2 rectangles of side 1x3. 
There are 4 rectangles of side 2x1.

There are 2 rectangles of side 2x2. 
There are 2 rectangles of side 3x1. 
There is 1 rectangle of side 3x2. 
Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.


Example 3:
Input: mat = [[1,1,1,1,1,1]]
Output: 21

Example 4:
Input: mat = [[1,0,1],[0,1,0],[1,0,1]]
Output: 5

Constraints:
`1 <= rows <= 150`
`1 <= columns <= 150`
`0 <= mat[i][j] <= 1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `num` representing the digits of a very large integer and an integer `k`.

You are allowed to swap any two adjacent digits of the integer at most `k` times.

Return the minimum integer you can obtain also as a string.


Example 1:
Input: num = ""4321"", k = 4
Output: ""1342""
Explanation: The steps to obtain the minimum integer from 4321 with 4 adjacent swaps are shown.


Example 2:
Input: num = ""100"", k = 1
Output: ""010""
Explanation: It's ok for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.


Example 3:
Input: num = ""36789"", k = 1000
Output: ""36789""
Explanation: We can keep the number without any swaps.


Example 4:
Input: num = ""22"", k = 22
Output: ""22""

Example 5:
Input: num = ""9438957234785635408"", k = 23
Output: ""0345989723478563548""

Constraints:
`1 <= num.length <= 30000`
`num` contains digits only and doesn't have leading zeros.

`1 <= k <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `date` string in the form `Day Month Year`, where:
`Day` is in the set `{""1st"", ""2nd"", ""3rd"", ""4th"", ..., ""30th"", ""31st""}`.

`Month` is in the set `{""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""Nov"", ""Dec""}`.

`Year` is in the range `[1900, 2100]`.

Convert the date string to the format `YYYY-MM-DD`, where:
`YYYY` denotes the 4 digit year.

`MM` denotes the 2 digit month.

`DD` denotes the 2 digit day.


Example 1:
Input: date = ""20th Oct 2052""
Output: ""2052-10-20""

Example 2:
Input: date = ""6th Jun 1933""
Output: ""1933-06-06""

Example 3:
Input: date = ""26th May 1960""
Output: ""1960-05-26""

Constraints:
The given dates are guaranteed to be valid, so no error handling is necessary.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the array `nums` consisting of `n` positive integers. You computed the sum of all non-empty continous subarrays from the array and then sort them in non-decreasing order, creating a new array of `n * (n + 1) / 2` numbers.

Return the sum of the numbers from index `left` to index `right` (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 10^9 + 7.


Example 1:
Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 

Example 2:
Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.


Example 3:
Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50

Constraints:
`1 <= nums.length <= 10^3`
`nums.length == n`
`1 <= nums[i] <= 100`
`1 <= left <= right <= n * (n + 1) / 2`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums`, you are allowed to choose one element of `nums` and change it by any value in one move.

Return the minimum difference between the largest and smallest value of `nums` after perfoming at most 3 moves.


Example 1:
Input: nums = [5,3,2,4]
Output: 0
Explanation: Change the array [5,3,2,4] to [2,2,2,2].

The difference between the maximum and minimum is 2-2 = 0.


Example 2:
Input: nums = [1,5,0,10,14]
Output: 1
Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1]. 
The difference between the maximum and minimum is 1-0 = 1.


Example 3:
Input: nums = [6,6,0,1,1,4,6]
Output: 2

Example 4:
Input: nums = [1,5,6,14,15]
Output: 1

Constraints:
`1 <= nums.length <= 10^5`
`-10^9 <= nums[i] <= 10^9`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing a game, with Alice starting first.

Initially, there are `n` stones in a pile.  On each player's turn, that player makes a move consisting of removing any non-zero square number of stones in the pile.

Also, if a player cannot make a move, he/she loses the game.

Given a positive integer `n`. Return `True` if and only if Alice wins the game otherwise return `False`, assuming both players play optimally.


Example 1:
Input: n = 1
Output: true
Explanation: Alice can remove 1 stone winning the game because Bob doesn't have any moves.


Example 2:
Input: n = 2
Output: false
Explanation: Alice can only remove 1 stone, after that Bob removes the last one winning the game (2 -> 1 -> 0).


Example 3:
Input: n = 4
Output: true
Explanation: n is already a perfect square, Alice can win with one move, removing 4 stones (4 -> 0).


Example 4:
Input: n = 7
Output: false
Explanation: Alice can't win the game if Bob plays optimally.

If Alice starts removing 4 stones, Bob will remove 1 stone then Alice should remove only 1 stone and finally Bob removes the last one (7 -> 3 -> 2 -> 1 -> 0). 
If Alice starts removing 1 stone, Bob will remove 4 stones then Alice only can remove 1 stone and finally Bob removes the last one (7 -> 6 -> 2 -> 1 -> 0).


Example 5:
Input: n = 17
Output: false
Explanation: Alice can't win the game if Bob plays optimally.


Constraints:
`1 <= n <= 10^5`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums`.

A pair `(i,j)` is called good if `nums[i]` == `nums[j]` and `i` < `j`.

Return the number of good pairs.


Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.


Example 2:
Input: nums = [1,1,1,1]
Output: 6
Explanation: Each pair in the array are good.


Example 3:
Input: nums = [1,2,3]
Output: 0

Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string `s` (a string consisting only of '0' and '1's).

Return the number of substrings with all characters 1's.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: s = ""0110111""
Output: 9
Explanation: There are 9 substring in total with only 1's characters.

""1"" -> 5 times.

""11"" -> 3 times.

""111"" -> 1 time.


Example 2:
Input: s = ""101""
Output: 2
Explanation: Substring ""1"" is shown 2 times in s.


Example 3:
Input: s = ""111111""
Output: 21
Explanation: Each substring contains only 1's characters.


Example 4:
Input: s = ""000""
Output: 0

Constraints:
`s[i] == '0'` or `s[i] == '1'`
`1 <= s.length <= 10^5`",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an undirected weighted graph of `n` nodes (0-indexed), represented by an edge list where `edges[i] = [a, b]` is an undirected edge connecting the nodes `a` and `b` with a probability of success of traversing that edge `succProb[i]`.

Given two nodes `start` and `end`, find the path with the maximum probability of success to go from `start` to `end` and return its success probability.

If there is no path from `start` to `end`, return 0. Your answer will be accepted if it differs from the correct answer by at most 1e-5.


Example 1:
Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to end, one having a probability of success = 0.2 and the other has 0.5 * 0.5 = 0.25.


Example 2:
Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000

Example 3:
Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.


Constraints:
`2 <= n <= 10^4`
`0 <= start, end < n`
`start != end`
`0 <= a, b < n`
`a != b`
`0 <= succProb.length == edges.length <= 2*10^4`
`0 <= succProb[i] <= 1`
There is at most one edge between every two nodes.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A delivery company wants to build a new service centre in a new city. The company knows the positions of all the customers in this city on a 2D-Map and wants to build the new centre in a position such that the sum of the euclidean distances to all customers is minimum.

Given an array `positions` where `positions[i] = [xi, yi]` is the position of the `ith` customer on the map, return the minimum sum of the euclidean distances to all customers.

In other words, you need to choose the position of the service centre `[xcentre, ycentre]` such that the following formula is minimized:
Answers within `10^-5` of the actual value will be accepted.


Example 1:
Input: positions = [[0,1],[1,0],[1,2],[2,1]]
Output: 4.00000
Explanation: As shown, you can see that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, the sum of all distances is 4 which is the minimum possible we can achieve.


Example 2:
Input: positions = [[1,1],[3,3]]
Output: 2.82843
Explanation: The minimum possible sum of distances = sqrt(2) + sqrt(2) = 2.82843

Example 3:
Input: positions = [[1,1]]
Output: 0.00000

Example 4:
Input: positions = [[1,1],[0,0],[2,0]]
Output: 2.73205
Explanation: At the first glance, you may think that locating the centre at [1, 0] will achieve the minimum sum, but locating it at [1, 0] will make the sum of distances = 3.

Try to locate the centre at [1.0, 0.5773502711] you will see that the sum of distances is 2.73205.

Be careful with the precision!

Example 5:
Input: positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]
Output: 32.94036
Explanation: You can use [4.3460852395, 4.9813795505] as the position of the centre.


Constraints:
`1 <= positions.length <= 50`
`positions[i].length == 2`
`0 <= positions[i][0], positions[i][1] <= 100`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of an N-ary tree of unique values, and two nodes of the tree `p` and `q`.

You should move the subtree of the node `p` to become a direct child of node `q`. If `p` is already a direct child of `q`, don't change anything. Node `p` must be the last child in the children list of node `q`.

Return the root of the tree after adjusting it.

There are 3 cases for nodes `p` and `q`:
Node `q` is in the sub-tree of node `p`.

Node `p` is in the sub-tree of node `q`.

Neither node `p` is in the sub-tree of node `q` nor node `q` is in the sub-tree of node `p`.

In cases 2 and 3, you just need to move `p` (with its sub-tree) to be a child of `q`, but in case 1 the tree may be disconnected, thus you need to reconnect the tree again. Please read the examples carefully before solving this problem.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

For example, the above tree is serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14].


Example 1:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 4, q = 1
Output: [1,null,2,3,4,null,5,null,6,null,7,8]
Explanation: This example follows the second case as node p is in the sub-tree of node q. We move node p with its sub-tree to be a direct child of node q.

Notice that node 4 is the last child of node 1.


Example 2:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 7, q = 4
Output: [1,null,2,3,null,4,5,null,6,null,7,8]
Explanation: Node 7 is already a direct child of node 4. We don't change anything.


Example 3:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 3, q = 8
Output: [1,null,2,null,4,5,null,7,8,null,null,null,3,null,6]
Explanation: This example follows case 3 because node p is not in the sub-tree of node q and vice-versa. We can move node 3 with its sub-tree and make it as node 8's child.


Example 4:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 2, q = 7
Output: [1,null,7,3,null,2,null,6,null,4,5,null,null,8]
Explanation: Node q is in the sub-tree of node p, so this is case 1.

The first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q.

Then we will see that the tree is disconnected, you need to reconnect node q to replace node p as shown.


Example 5:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 1, q = 2
Output: [2,null,4,5,1,null,7,8,null,null,3,null,null,null,6]
Explanation: Node q is in the sub-tree of node p, so this is case 1.

The first step, we move node p (with all of its sub-tree except for node q) and add it as a child to node q.

As node p was the root of the tree, node q replaces it and becomes the root of the tree.


Constraints:
The total number of nodes is between `[2, 1000]`.

Each node has a unique value.

`p != null`
`q != null`
`p` and `q` are two different nodes (i.e. `p != q`).",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `numBottles` full water bottles, you can exchange `numExchange` empty water bottles for one full water bottle.

The operation of drinking a full water bottle turns it into an empty bottle.

Return the maximum number of water bottles you can drink.


Example 1:
Input: numBottles = 9, numExchange = 3
Output: 13
Explanation: You can exchange 3 empty bottles to get 1 full water bottle.

Number of water bottles you can drink: 9 + 3 + 1 = 13.


Example 2:
Input: numBottles = 15, numExchange = 4
Output: 19
Explanation: You can exchange 4 empty bottles to get 1 full water bottle. 
Number of water bottles you can drink: 15 + 3 + 1 = 19.


Example 3:
Input: numBottles = 5, numExchange = 5
Output: 6

Example 4:
Input: numBottles = 2, numExchange = 3
Output: 2

Constraints:
`1 <= numBottles <= 100`
`2 <= numExchange <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a tree (i.e. a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` `edges`. The root of the tree is the node `0`, and each node of the tree has a label which is a lower-case character given in the string `labels` (i.e. The node with the number `i` has the label `labels[i]`).

The `edges` array is given on the form `edges[i] = [ai, bi]`, which means there is an edge between nodes `ai` and `bi` in the tree.

Return an array of size `n` where `ans[i]` is the number of nodes in the subtree of the `ith` node which have the same label as node `i`.

A subtree of a tree `T` is the tree consisting of a node in `T` and all of its descendant nodes.


Example 1:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = ""abaedcd""
Output: [2,1,1,1,1,1,1]
Explanation: Node 0 has label 'a' and its sub-tree has node 2 with label 'a' as well, thus the answer is 2. Notice that any node is part of its sub-tree.

Node 1 has a label 'b'. The sub-tree of node 1 contains nodes 1,4 and 5, as nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).


Example 2:
Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = ""bbbb""
Output: [4,2,1,1]
Explanation: The sub-tree of node 2 contains only node 2, so the answer is 1.

The sub-tree of node 3 contains only node 3, so the answer is 1.

The sub-tree of node 1 contains nodes 1 and 2, both have label 'b', thus the answer is 2.

The sub-tree of node 0 contains nodes 0, 1, 2 and 3, all with label 'b', thus the answer is 4.


Example 3:
Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = ""aabab""
Output: [3,2,1,1,1]

Example 4:
Input: n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = ""cbabaa""
Output: [1,2,1,1,2,1]

Example 5:
Input: n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = ""aaabaaa""
Output: [6,5,4,1,3,2,1]

Constraints:
`1 <= n <= 10^5`
`edges.length == n - 1`
`edges[i].length == 2`
`0 <= ai, bi < n`
`ai != bi`
`labels.length == n`
`labels` is consisting of only of lower-case English letters.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` of lowercase letters, you need to find the maximum number of non-empty substrings of `s` that meet the following conditions:
The substrings do not overlap, that is for any two substrings `s[i..j]` and `s[k..l]`, either `j < k` or `i > l` is true.

A substring that contains a certain character `c` must also contain all occurrences of `c`.

Find the maximum number of substrings that meet the above conditions. If there are multiple solutions with the same number of substrings, return the one with minimum total length. It can be shown that there exists a unique solution of minimum total length.

Notice that you can return the substrings in any order.


Example 1:
Input: s = ""adefaddaccc""
Output: [""e"",""f"",""ccc""]
Explanation: The following are all the possible substrings that meet the conditions:
[
  ""adefaddaccc""
  ""adefadda"",
  ""ef"",
  ""e"",
  ""f"",
  ""ccc"",
]
If we choose the first string, we cannot choose anything else and we'd get only 1. If we choose ""adefadda"", we are left with ""ccc"" which is the only one that doesn't overlap, thus obtaining 2 substrings. Notice also, that it's not optimal to choose ""ef"" since it can be split into two. Therefore, the optimal way is to choose [""e"",""f"",""ccc""] which gives us 3 substrings. No other solution of the same number of substrings exist.


Example 2:
Input: s = ""abbaccd""
Output: [""d"",""bb"",""cc""]
Explanation: Notice that while the set of substrings [""d"",""abba"",""cc""] also has length 3, it's considered incorrect since it has larger total length.


Constraints:
`1 <= s.length <= 10^5`
`s` contains only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Winston was given the above mysterious function `func`. He has an integer array `arr` and an integer `target` and he wants to find the values `l` and `r` that make the value `|func(arr, l, r) - target|` minimum possible.

Return the minimum possible value of `|func(arr, l, r) - target|`.

Notice that `func` should be called with the values `l` and `r` where `0 <= l, r < arr.length`.


Example 1:
Input: arr = [9,12,3,7,15], target = 5
Output: 2
Explanation: Calling func with all the pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4],[0,4]], Winston got the following results [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The value closest to 5 is 7 and 3, thus the minimum difference is 2.


Example 2:
Input: arr = [1000000,1000000,1000000], target = 1
Output: 999999
Explanation: Winston called the func with all possible values of [l,r] and he always got 1000000, thus the min difference is 999999.


Example 3:
Input: arr = [1,2,4,8,16], target = 0
Output: 0

Constraints:
`1 <= arr.length <= 105`
`1 <= arr[i] <= 106`
`0 <= target <= 107`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-negative integers `low` and `high`. Return the count of odd numbers between `low` and `high` (inclusive).


Example 1:
Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].


Example 2:
Input: low = 8, high = 10
Output: 1
Explanation: The odd numbers between 8 and 10 are [9].


Constraints:
`0 <= low <= high <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`. Return the number of sub-arrays with odd sum.

As the answer may grow large, the answer must be computed modulo `10^9 + 7`.


Example 1:
Input: arr = [1,3,5]
Output: 4
Explanation: All sub-arrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All sub-arrays sum are [1,4,9,3,8,5].

Odd sums are [1,9,3,5] so the answer is 4.


Example 2:
Input: arr = [2,4,6]
Output: 0
Explanation: All sub-arrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
All sub-arrays sum are [2,6,12,4,10,6].

All sub-arrays have even sum and the answer is 0.


Example 3:
Input: arr = [1,2,3,4,5,6,7]
Output: 16

Example 4:
Input: arr = [100,100,99,99]
Output: 4

Example 5:
Input: arr = [7]
Output: 1

Constraints:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 100`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s`, a split is called good if you can split `s` into 2 non-empty strings `p` and `q` where its concatenation is equal to `s` and the number of distinct letters in `p` and `q` are the same.

Return the number of good splits you can make in `s`.


Example 1:
Input: s = ""aacaba""
Output: 2
Explanation: There are 5 ways to split `""aacaba""` and 2 of them are good. 
(""a"", ""acaba"") Left string and right string contains 1 and 3 different letters respectively.

(""aa"", ""caba"") Left string and right string contains 1 and 3 different letters respectively.

(""aac"", ""aba"") Left string and right string contains 2 and 2 different letters respectively (good split).

(""aaca"", ""ba"") Left string and right string contains 2 and 2 different letters respectively (good split).

(""aacab"", ""a"") Left string and right string contains 3 and 1 different letters respectively.


Example 2:
Input: s = ""abcd""
Output: 1
Explanation: Split the string as follows (""ab"", ""cd"").


Example 3:
Input: s = ""aaaaa""
Output: 4
Explanation: All possible splits are good.


Example 4:
Input: s = ""acbadbaada""
Output: 2

Constraints:
`s` contains only lowercase English letters.

`1 <= s.length <= 10^5`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers `target` and an array `initial` of same size with all zeros.

Return the minimum number of operations to form a `target` array from `initial` if you are allowed to do the following operation:
Choose any subarray from `initial` and increment each value by one.

The answer is guaranteed to fit within the range of a 32-bit signed integer.


Example 1:
Input: target = [1,2,3,2,1]
Output: 3
Explanation: We need at least 3 operations to form the target array from the initial array.

[0,0,0,0,0] increment 1 from index 0 to 4 (inclusive).

[1,1,1,1,1] increment 1 from index 1 to 3 (inclusive).

[1,2,2,2,1] increment 1 at index 2.

[1,2,3,2,1] target array is formed.


Example 2:
Input: target = [3,1,1,2]
Output: 4
Explanation: (initial)[0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [3,1,1,2] (target).


Example 3:
Input: target = [3,1,5,4,2]
Output: 7
Explanation: (initial)[0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1,1,1] 
                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4,2] (target).


Example 4:
Input: target = [1,1,1,1]
Output: 1

Constraints:
`1 <= target.length <= 10^5`
`1 <= target[i] <= 10^5`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an integer array `indices` of the same length.

The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.

Return the shuffled string.


Example 1:
Input: s = ""codeleet"", `indices` = [4,5,6,7,0,2,1,3]
Output: ""leetcode""
Explanation: As shown, ""codeleet"" becomes ""leetcode"" after shuffling.


Example 2:
Input: s = ""abc"", `indices` = [0,1,2]
Output: ""abc""
Explanation: After shuffling, each character remains in its position.


Example 3:
Input: s = ""aiohn"", `indices` = [3,1,4,2,0]
Output: ""nihao""

Example 4:
Input: s = ""aaiougrt"", `indices` = [4,0,2,6,7,3,1,5]
Output: ""arigatou""

Example 5:
Input: s = ""art"", `indices` = [1,0,2]
Output: ""rat""

Constraints:
`s.length == indices.length == n`
`1 <= n <= 100`
`s` contains only lower-case English letters.

`0 <= indices[i] < n`
All values of `indices` are unique (i.e. `indices` is a permutation of the integers from `0` to `n - 1`).",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a room with `n` bulbs, numbered from `0` to `n-1`, arranged in a row from left to right. Initially all the bulbs are turned off.

Your task is to obtain the configuration represented by `target` where `target[i]` is '1' if the i-th bulb is turned on and is '0' if it is turned off.

You have a switch to flip the state of the bulb, a flip operation is defined as follows:
Choose any bulb (index `i`) of your current configuration.

Flip each bulb from index `i` to `n-1`.

When any bulb is flipped it means that if it is 0 it changes to 1 and if it is 1 it changes to 0.

Return the minimum number of flips required to form `target`.


Example 1:
Input: target = ""10111""
Output: 3
Explanation: Initial configuration ""00000"".

flip from the third bulb:  ""00000"" -> ""00111""
flip from the first bulb:  ""00111"" -> ""11000""
flip from the second bulb:  ""11000"" -> ""10111""
We need at least 3 flip operations to form target.


Example 2:
Input: target = ""101""
Output: 3
Explanation: ""000"" -> ""111"" -> ""100"" -> ""101"".


Example 3:
Input: target = ""00000""
Output: 0

Example 4:
Input: target = ""001011101""
Output: 5

Constraints:
`1 <= target.length <= 10^5`
`target[i] == '0'` or `target[i] == '1'`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree and an integer `distance`. A pair of two different leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to `distance`.

Return the number of good leaf node pairs in the tree.


Example 1:
Input: root = [1,2,3,null,4], distance = 3
Output: 1
Explanation: The leaf nodes of the tree are 3 and 4 and the length of the shortest path between them is 3. This is the only good pair.


Example 2:
Input: root = [1,2,3,4,5,6,7], distance = 3
Output: 2
Explanation: The good pairs are [4,5] and [6,7] with shortest path = 2. The pair [4,6] is not good because the length of ther shortest path between them is 4.


Example 3:
Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
Output: 1
Explanation: The only good pair is [2,5].


Example 4:
Input: root = [100], distance = 1
Output: 0

Example 5:
Input: root = [1,1,1], distance = 2
Output: 1

Constraints:
The number of nodes in the `tree` is in the range `[1, 2^10].`
Each node's value is between `[1, 100]`.

`1 <= distance <= 10`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and the number marking the count of the characters (length of the run). For example, to compress the string `""aabccc""` we replace `""aa""` by `""a2""` and replace `""ccc""` by `""c3""`. Thus the compressed string becomes `""a2bc3""`.

Notice that in this problem, we are not adding `'1'` after single characters.

Given a string `s` and an integer `k`. You need to delete at most `k` characters from `s` such that the run-length encoded version of `s` has minimum length.

Find the minimum length of the run-length encoded version of `s` after deleting at most `k` characters.


Example 1:
Input: s = ""aaabcccd"", k = 2
Output: 4
Explanation: Compressing s without deleting anything will give us ""a3bc3d"" of length 6. Deleting any of the characters 'a' or 'c' would at most decrease the length of the compressed string to 5, for instance delete 2 'a' then we will have s = ""abcccd"" which compressed is abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be ""a3c3"" of length 4.


Example 2:
Input: s = ""aabbaa"", k = 2
Output: 2
Explanation: If we delete both 'b' characters, the resulting compressed string would be ""a4"" of length 2.


Example 3:
Input: s = ""aaaaaaaaaaa"", k = 0
Output: 3
Explanation: Since k is zero, we cannot delete anything. The compressed string is ""a11"" of length 3.


Constraints:
`1 <= s.length <= 100`
`0 <= k <= s.length`
`s` contains only lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an integer array `arr`, where all the integers in `arr` are equal except for one integer which is larger than the rest of the integers. You will not be given direct access to the array, instead, you will have an API `ArrayReader` which have the following functions:
`int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y`. The function compares the sum of sub-array `arr[l..r]` with the sum of the sub-array `arr[x..y]` and returns:
	
1 if `arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y]`.

0 if `arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y]`.

-1 if `arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]`.

`int length()`: Returns the size of the array.

You are allowed to call `compareSub()` 20 times at most. You can assume both functions work in `O(1)` time.

Return the index of the array `arr` which has the largest integer.

Follow-up:
What if there are two numbers in `arr` that are bigger than all other numbers?
What if there is one number that is bigger than other numbers and one number that is smaller than other numbers?

Example 1:
Input: arr = [7,7,7,7,10,7,7,7]
Output: 4
Explanation: The following calls to the API
reader.compareSub(0, 0, 1, 1) // returns 0 this is a query comparing the sub-array (0, 0) with the sub array (1, 1), (i.e. compares arr[0] with arr[1]).

Thus we know that arr[0] and arr[1] doesn't contain the largest element.

reader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].

reader.compareSub(4, 4, 5, 5) // returns 1, thus for sure arr[4] is the largest element in the array.

Notice that we made only 3 calls, so the answer is valid.


Example 2:
Input: nums = [6,6,12]
Output: 2

Constraints:
`2 <= arr.length <= 5 * 10^5`
`1 <= arr[i] <= 100`
All elements of `arr` are equal except for one element which is larger than all other elements.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `arr`, and three integers `a`, `b` and `c`. You need to find the number of good triplets.

A triplet `(arr[i], arr[j], arr[k])` is good if the following conditions are true:
`0 <= i < j < k < arr.length`
`|arr[i] - arr[j]| <= a`
`|arr[j] - arr[k]| <= b`
`|arr[i] - arr[k]| <= c`
Where `|x|` denotes the absolute value of `x`.

Return the number of good triplets.


Example 1:
Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3
Output: 4
Explanation: There are 4 good triplets: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].


Example 2:
Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1
Output: 0
Explanation: No triplet satisfies all conditions.


Constraints:
`3 <= arr.length <= 100`
`0 <= arr[i] <= 1000`
`0 <= a, b, c <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr` of distinct integers and an integer `k`.

A game will be played between the first two elements of the array (i.e. `arr[0]` and `arr[1]`). In each round of the game, we compare `arr[0]` with `arr[1]`, the larger integer wins and remains at position `0` and the smaller integer moves to the end of the array. The game ends when an integer wins `k` consecutive rounds.

Return the integer which will win the game.

It is guaranteed that there will be a winner of the game.


Example 1:
Input: arr = [2,1,3,5,4,6,7], k = 2
Output: 5
Explanation: Let's see the rounds of the game:
Round |       arr       | winner | win_count
  1   | [2,1,3,5,4,6,7] | 2      | 1
  2   | [2,3,5,4,6,7,1] | 3      | 1
  3   | [3,5,4,6,7,1,2] | 5      | 1
  4   | [5,4,6,7,1,2,3] | 5      | 2
So we can see that 4 rounds will be played and 5 is the winner because it wins 2 consecutive games.


Example 2:
Input: arr = [3,2,1], k = 10
Output: 3
Explanation: 3 will win the first 10 rounds consecutively.


Example 3:
Input: arr = [1,9,8,2,3,7,6,4,5], k = 7
Output: 9

Example 4:
Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000
Output: 99

Constraints:
`2 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^6`
`arr` contains distinct integers.

`1 <= k <= 10^9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `n x n` binary `grid`, in one step you can choose two adjacent rows of the grid and swap them.

A grid is said to be valid if all the cells above the main diagonal are zeros.

Return the minimum number of steps needed to make the grid valid, or -1 if the grid cannot be valid.

The main diagonal of a grid is the diagonal that starts at cell `(1, 1)` and ends at cell `(n, n)`.


Example 1:
Input: grid = [[0,0,1],[1,1,0],[1,0,0]]
Output: 3

Example 2:
Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
Output: -1
Explanation: All rows are similar, swaps have no effect on the grid.


Example 3:
Input: grid = [[1,0,0],[1,1,0],[1,1,1]]
Output: 0

Constraints:
`n == grid.length`
`n == grid[i].length`
`1 <= n <= 200`
`grid[i][j]` is `0` or `1`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two sorted arrays of distinct integers `nums1` and `nums2.`
A valid path is defined as follows:
Choose array nums1 or nums2 to traverse (from index-0).

Traverse the current array from left to right.

If you are reading any value that is present in `nums1` and `nums2` you are allowed to change your path to the other array. (Only one repeated value is considered in the valid path).

Score is defined as the sum of uniques values in a valid path.

Return the maximum score you can obtain of all possible valid paths.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
Output: 30
Explanation: Valid paths:
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10],  (starting from nums1)
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10]    (starting from nums2)
The maximum is obtained with the path in green [2,4,6,8,10].


Example 2:
Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]
Output: 109
Explanation: Maximum sum is obtained with the path [1,3,5,100].


Example 3:
Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
Output: 40
Explanation: There are no common elements between nums1 and nums2.

Maximum sum is obtained with the path [6,7,8,9,10].


Example 4:
Input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]
Output: 61

Constraints:
`1 <= nums1.length <= 10^5`
`1 <= nums2.length <= 10^5`
`1 <= nums1[i], nums2[i] <= 10^7`
`nums1` and `nums2` are strictly increasing.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr` of positive integers sorted in a strictly increasing order, and an integer `k`.

Find the `kth` positive integer that is missing from this array.


Example 1:
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.


Example 2:
Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The 2nd missing positive integer is 6.


Constraints:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 1000`
`1 <= k <= 1000`
`arr[i] < arr[j]` for `1 <= i < j <= arr.length`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, your goal is to convert `s` into `t` in `k` moves or less.

During the `ith` (`1 <= i <= k`) move you can:
Choose any index `j` (1-indexed) from `s`, such that `1 <= j <= s.length` and `j` has not been chosen in any previous move, and shift the character at that index `i` times.

Do nothing.

Shifting a character means replacing it by the next letter in the alphabet (wrapping around so that `'z'` becomes `'a'`). Shifting a character by `i` means applying the shift operations `i` times.

Remember that any index `j` can be picked at most once.

Return `true` if it's possible to convert `s` into `t` in no more than `k` moves, otherwise return `false`.


Example 1:
Input: s = ""input"", t = ""ouput"", k = 9
Output: true
Explanation: In the 6th move, we shift 'i' 6 times to get 'o'. And in the 7th move we shift 'n' to get 'u'.


Example 2:
Input: s = ""abc"", t = ""bcd"", k = 10
Output: false
Explanation: We need to shift each character in s one time to convert it into t. We can shift 'a' to 'b' during the 1st move. However, there is no way to shift the other characters in the remaining moves to obtain t from s.


Example 3:
Input: s = ""aab"", t = ""bbb"", k = 27
Output: true
Explanation: In the 1st move, we shift the first 'a' 1 time to get 'b'. In the 27th move, we shift the second 'a' 27 times to get 'b'.


Constraints:
`1 <= s.length, t.length <= 10^5`
`0 <= k <= 10^9`
`s`, `t` contain only lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a parentheses string `s` containing only the characters `'('` and `')'`. A parentheses string is balanced if:
Any left parenthesis `'('` must have a corresponding two consecutive right parenthesis `'))'`.

Left parenthesis `'('` must go before the corresponding two consecutive right parenthesis `'))'`.

In other words, we treat `'('` as openning parenthesis and `'))'` as closing parenthesis.

For example, `""())""`, `""())(())))""` and `""(())())))""` are balanced, `"")()""`, `""()))""` and `""(()))""` are not balanced.

You can insert the characters `'('` and `')'` at any position of the string to balance it if needed.

Return the minimum number of insertions needed to make `s` balanced.


Example 1:
Input: s = ""(()))""
Output: 1
Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to to add one more ')' at the end of the string to be ""(())))"" which is balanced.


Example 2:
Input: s = ""())""
Output: 0
Explanation: The string is already balanced.


Example 3:
Input: s = ""))())(""
Output: 3
Explanation: Add '(' to match the first '))', Add '))' to match the last '('.


Example 4:
Input: s = ""((((((""
Output: 12
Explanation: Add 12 ')' to balance the string.


Example 5:
Input: s = "")))))))""
Output: 5
Explanation: Add 4 '(' at the beginning of the string and one ')' at the end. The string becomes ""(((())))))))"".


Constraints:
`1 <= s.length <= 10^5`
`s` consists of `'('` and `')'` only.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`. An awesome substring is a non-empty substring of `s` such that we can make any number of swaps in order to make it palindrome.

Return the length of the maximum length awesome substring of `s`.


Example 1:
Input: s = ""3242415""
Output: 5
Explanation: ""24241"" is the longest awesome substring, we can form the palindrome ""24142"" with some swaps.


Example 2:
Input: s = ""12345678""
Output: 1

Example 3:
Input: s = ""213123""
Output: 6
Explanation: ""213123"" is the longest awesome substring, we can form the palindrome ""231132"" with some swaps.


Example 4:
Input: s = ""00""
Output: 2

Constraints:
`1 <= s.length <= 10^5`
`s` consists only of digits.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` of lower and upper case English letters.

A good string is a string which doesn't have two adjacent characters `s[i]` and `s[i + 1]` where:
`0 <= i <= s.length - 2`
`s[i]` is a lower-case letter and `s[i + 1]` is the same letter but in upper-case or vice-versa.

To make the string good, you can choose two adjacent characters that make the string bad and remove them. You can keep doing this until the string becomes good.

Return the string after making it good. The answer is guaranteed to be unique under the given constraints.

Notice that an empty string is also good.


Example 1:
Input: s = ""leEeetcode""
Output: ""leetcode""
Explanation: In the first step, either you choose i = 1 or i = 2, both will result ""leEeetcode"" to be reduced to ""leetcode"".


Example 2:
Input: s = ""abBAcC""
Output: """"
Explanation: We have many possible scenarios, and all lead to the same answer. For example:
""abBAcC"" --> ""aAcC"" --> ""cC"" --> """"
""abBAcC"" --> ""abBA"" --> ""aA"" --> """"

Example 3:
Input: s = ""s""
Output: ""s""

Constraints:
`1 <= s.length <= 100`
`s` contains only lower and upper case English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two positive integers `n` and `k`, the binary string  `Sn` is formed as follows:
`S1 = ""0""`
`Si = Si-1 + ""1"" + reverse(invert(Si-1))` for `i > 1`
Where `+` denotes the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 changes to 1 and 1 changes to 0).

For example, the first 4 strings in the above sequence are:
`S1 = ""0""`
`S2 = ""011""`
`S3 = ""0111001""`
`S4 = ""011100110110001""`
Return the `kth` bit in `Sn`. It is guaranteed that `k` is valid for the given `n`.


Example 1:
Input: n = 3, k = 1
Output: ""0""
Explanation: S3 is ""0111001"". The first bit is ""0"".


Example 2:
Input: n = 4, k = 11
Output: ""1""
Explanation: S4 is ""011100110110001"". The 11th bit is ""1"".


Example 3:
Input: n = 1, k = 1
Output: ""0""

Example 4:
Input: n = 2, k = 3
Output: ""1""

Constraints:
`1 <= n <= 20`
`1 <= k <= 2n - 1`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` and an integer `target`.

Return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to `target`.


Example 1:
Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).


Example 2:
Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays with sum equal to 6.

([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.


Example 3:
Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10
Output: 3

Example 4:
Input: nums = [0,0,0], target = 0
Output: 3

Constraints:
`1 <= nums.length <= 10^5`
`-10^4 <= nums[i] <= 10^4`
`0 <= target <= 10^6`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a wooden stick of length `n` units. The stick is labelled from `0` to `n`. For example, a stick of length 6 is labelled as follows:
Given an integer array `cuts` where `cuts[i]` denotes a position you should perform a cut at.

You should perform the cuts in order, you can change the order of the cuts as you wish.

The cost of one cut is the length of the stick to be cut, the total cost is the sum of costs of all cuts. When you cut a stick, it will be split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before the cut). Please refer to the first example for a better explanation.

Return the minimum total cost of the cuts.


Example 1:
Input: n = 7, cuts = [1,3,4,5]
Output: 16
Explanation: Using cuts order = [1, 3, 4, 5] as in the input leads to the following scenario:
The first cut is done to a rod of length 7 so the cost is 7. The second cut is done to a rod of length 6 (i.e. the second part of the first cut), the third is done to a rod of length 4 and the last cut is to a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.

Rearranging the cuts to be [3, 5, 1, 4] for example will lead to a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).


Example 2:
Input: n = 9, cuts = [5,6,1,4,2]
Output: 22
Explanation: If you try the given cuts ordering the cost will be 25.

There are much ordering with total cost <= 25, for example, the order [4, 6, 5, 2, 1] has total cost = 22 which is the minimum possible.


Constraints:
`2 <= n <= 10^6`
`1 <= cuts.length <= min(n - 1, 100)`
`1 <= cuts[i] <= n - 1`
All the integers in `cuts` array are distinct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` cities and `m` bi-directional `roads` where `roads[i] = [ai, bi]` connects city `ai` with city `bi`. Each city has a name consisting of exactly 3 upper-case English letters given in the string array `names`. Starting at any city `x`, you can reach any city `y` where `y != x` (i.e. the cities and the roads are forming an undirected connected graph).

You will be given a string array `targetPath`. You should find a path in the graph of the same length and with the minimum edit distance to `targetPath`.

You need to return the order of the nodes in the path with the minimum edit distance, The path should be of the same length of `targetPath` and should be valid (i.e. there should be a direct road between `ans[i]` and `ans[i + 1]`). If there are multiple answers return any one of them.

The edit distance is defined as follows:
Follow-up: If each node can be visited only once in the path, What should you change in your solution?

Example 1:
Input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = [""ATL"",""PEK"",""LAX"",""DXB"",""HND""], targetPath = [""ATL"",""DXB"",""HND"",""LAX""]
Output: [0,2,4,2]
Explanation: [0,2,4,2], [0,3,0,2] and [0,3,1,2] are accepted answers.

[0,2,4,2] is equivalent to [""ATL"",""LAX"",""HND"",""LAX""] which has edit distance = 1 with targetPath.

[0,3,0,2] is equivalent to [""ATL"",""DXB"",""ATL"",""LAX""] which has edit distance = 1 with targetPath.

[0,3,1,2] is equivalent to [""ATL"",""DXB"",""PEK"",""LAX""] which has edit distance = 1 with targetPath.


Example 2:
Input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = [""ATL"",""PEK"",""LAX"",""DXB""], targetPath = [""ABC"",""DEF"",""GHI"",""JKL"",""MNO"",""PQR"",""STU"",""VWX""]
Output: [0,1,0,1,0,1,0,1]
Explanation: Any path in this graph has edit distance = 8 with targetPath.


Example 3:
Input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [""ATL"",""PEK"",""LAX"",""ATL"",""DXB"",""HND""], targetPath = [""ATL"",""DXB"",""HND"",""DXB"",""ATL"",""LAX"",""PEK""]
Output: [3,4,5,4,3,2,1]
Explanation: [3,4,5,4,3,2,1] is the only path with edit distance = 0 with targetPath.

It's equivalent to [""ATL"",""DXB"",""HND"",""DXB"",""ATL"",""LAX"",""PEK""]

Constraints:
`2 <= n <= 100`
`m == roads.length`
`n - 1 <= m <= (n * (n - 1) / 2)`
`0 <= ai, bi <= n - 1`
`ai != bi `
The graph is guaranteed to be connected and each pair of nodes may have at most one direct road.

`names.length == n`
`names[i].length == 3`
`names[i]` consists of upper-case English letters.

There can be two cities with the same name.

`1 <= targetPath.length <= 100`
`targetPath[i].length == 3`
`targetPath[i]` consists of upper-case English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.


Example 1:
Input: arr = [2,6,4,1]
Output: false
Explanation: There are no three consecutive odds.


Example 2:
Input: arr = [1,2,34,3,4,5,7,23,12]
Output: true
Explanation: [5,7,23] are three consecutive odds.


Constraints:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an array `arr` of length `n` where `arr[i] = (2 * i) + 1` for all valid values of `i` (i.e. `0 <= i < n`).

In one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. perform `arr[x] -=1 `and `arr[y] += 1`). The goal is to make all the elements of the array equal. It is guaranteed that all the elements of the array can be made equal using some operations.

Given an integer `n`, the length of the array. Return the minimum number of operations needed to make all the elements of arr equal.


Example 1:
Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
First operation choose x = 2 and y = 0, this leads arr to be [2, 3, 4]
In the second operation choose x = 2 and y = 0 again, thus arr = [3, 3, 3].


Example 2:
Input: n = 6
Output: 9

Constraints:
`1 <= n <= 10^4`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has `n` empty baskets, the `ith` basket is at `position[i]`, Morty has `m` balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.

Rick stated that magnetic force between two different balls at positions `x` and `y` is `|x - y|`.

Given the integer array `position` and the integer `m`. Return the required force.


Example 1:
Input: position = [1,2,3,4,7], m = 3
Output: 3
Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.


Example 2:
Input: position = [5,4,3,2,1,1000000000], m = 2
Output: 999999999
Explanation: We can use baskets 1 and 1000000000.


Constraints:
`n == position.length`
`2 <= n <= 10^5`
`1 <= position[i] <= 10^9`
All integers in `position` are distinct.

`2 <= m <= position.length`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` oranges in the kitchen and you decided to eat some of these oranges every day as follows:
Eat one orange.

If the number of remaining oranges (`n`) is divisible by 2 then you can eat  n/2 oranges.

If the number of remaining oranges (`n`) is divisible by 3 then you can eat  2*(n/3) oranges.

You can only choose one of the actions per day.

Return the minimum number of days to eat `n` oranges.


Example 1:
Input: n = 10
Output: 4
Explanation: You have 10 oranges.

Day 1: Eat 1 orange,  10 - 1 = 9.  
Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (Since 9 is divisible by 3)
Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. 
Day 4: Eat the last orange  1 - 1  = 0.

You need at least 4 days to eat the 10 oranges.


Example 2:
Input: n = 6
Output: 3
Explanation: You have 6 oranges.

Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (Since 6 is divisible by 2).

Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (Since 3 is divisible by 3)
Day 3: Eat the last orange  1 - 1  = 0.

You need at least 3 days to eat the 6 oranges.


Example 3:
Input: n = 1
Output: 1

Example 4:
Input: n = 56
Output: 6

Constraints:
`1 <= n <= 2*10^9`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a directed acyclic graph, with `n` vertices numbered from `0` to `n-1`, and an array `edges` where `edges[i] = [fromi, toi]` represents a directed edge from node `fromi` to node `toi`.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.


Example 1:
Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].


Example 2:
Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.


Constraints:
`2 <= n <= 10^5`
`1 <= edges.length <= min(10^5, n * (n - 1) / 2)`
`edges[i].length == 2`
`0 <= fromi, toi < n`
All pairs `(fromi, toi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your task is to form an integer array `nums` from an initial array of zeros `arr` that is the same size as `nums`.

Return the minimum number of function calls to make `nums` from `arr`.

The answer is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: nums = [1,5]
Output: 5
Explanation: Increment by 1 (second element): [0, 0] to get [0, 1] (1 operation).

Double all the elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).

Increment by 1 (both elements)  [0, 4] -> [1, 4] -> [1, 5] (2 operations).

Total of operations: 1 + 2 + 2 = 5.


Example 2:
Input: nums = [2,2]
Output: 3
Explanation: Increment by 1 (both elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).

Double all the elements: [1, 1] -> [2, 2] (1 operation).

Total of operations: 2 + 1 = 3.


Example 3:
Input: nums = [4,2,5]
Output: 6
Explanation: (initial)[0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5](nums).


Example 4:
Input: nums = [3,2,2,4]
Output: 7

Example 5:
Input: nums = [2,4,8,16]
Output: 8

Constraints:
`1 <= nums.length <= 10^5`
`0 <= nums[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D array of characters `grid` of size `m x n`, you need to find if there exists any cycle consisting of the same value in `grid`.

A cycle is a path of length 4 or more in the grid that starts and ends at the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of the four directions (up, down, left, or right), if it has the same value of the current cell.

Also, you cannot move to the cell that you visited in your last move. For example, the cycle `(1, 1) -> (1, 2) -> (1, 1)` is invalid because from `(1, 2)` we visited `(1, 1)` which was the last visited cell.

Return `true` if any cycle of the same value exists in `grid`, otherwise, return `false`.


Example 1:
Input: grid = [[""a"",""a"",""a"",""a""],[""a"",""b"",""b"",""a""],[""a"",""b"",""b"",""a""],[""a"",""a"",""a"",""a""]]
Output: true
Explanation: There are two valid cycles shown in different colors in the image below:

Example 2:
Input: grid = [[""c"",""c"",""c"",""a""],[""c"",""d"",""c"",""c""],[""c"",""c"",""e"",""c""],[""f"",""c"",""c"",""c""]]
Output: true
Explanation: There is only one valid cycle highlighted in the image below:

Example 3:
Input: grid = [[""a"",""b"",""b""],[""b"",""z"",""b""],[""b"",""b"",""a""]]
Output: false

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m <= 500`
`1 <= n <= 500`
`grid` consists only of lowercase English letters.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`
Return an array of the most visited sectors sorted in ascending order.

Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).


Example 1:
Input: n = 4, rounds = [1,3,1,2]
Output: [1,2]
Explanation: The marathon starts at sector 1. The order of the visited sectors is as follows:
1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)
We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.


Example 2:
Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]
Output: [2]

Example 3:
Input: n = 7, rounds = [1,3,5,7]
Output: [1,2,3,4,5,6,7]

Constraints:
`2 <= n <= 100`
`1 <= m <= 100`
`rounds.length == m + 1`
`1 <= rounds[i] <= n`
`rounds[i] != rounds[i + 1]` for `0 <= i < m`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr` that represents a permutation of numbers from `1` to `n`. You have a binary string of size `n` that initially has all its bits set to zero.

At each step `i` (assuming both the binary string and `arr` are 1-indexed) from `1` to `n`, the bit at position `arr[i]` is set to `1`. You are given an integer `m` and you need to find the latest step at which there exists a group of ones of length `m`. A group of ones is a contiguous substring of 1s such that it cannot be extended in either direction.

Return the latest step at which there exists a group of ones of length exactly `m`. If no such group exists, return `-1`.


Example 1:
Input: arr = [3,5,1,2,4], m = 1
Output: 4
Explanation:
Step 1: ""00100"", groups: [""1""]
Step 2: ""00101"", groups: [""1"", ""1""]
Step 3: ""10101"", groups: [""1"", ""1"", ""1""]
Step 4: ""11101"", groups: [""111"", ""1""]
Step 5: ""11111"", groups: [""11111""]
The latest step at which there exists a group of size 1 is step 4.


Example 2:
Input: arr = [3,1,5,4,2], m = 2
Output: -1
Explanation:
Step 1: ""00100"", groups: [""1""]
Step 2: ""10100"", groups: [""1"", ""1""]
Step 3: ""10101"", groups: [""1"", ""1"", ""1""]
Step 4: ""10111"", groups: [""1"", ""111""]
Step 5: ""11111"", groups: [""11111""]
No group of size 2 exists during any step.


Example 3:
Input: arr = [1], m = 1
Output: 1

Example 4:
Input: arr = [2,1], m = 2
Output: 2

Constraints:
`n == arr.length`
`1 <= n <= 10^5`
`1 <= arr[i] <= n`
All integers in `arr` are distinct.

`1 <= m <= arr.length`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labelled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.

Boxes are put into the warehouse by the following rules:
Boxes cannot be stacked.

You can rearrange the insertion order of the boxes.

Boxes can only be pushed into the warehouse from left to right only.

If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.

Return the maximum number of boxes you can put into the warehouse.


Example 1:
Input: boxes = [4,3,4,1], warehouse = [5,3,3,4,1]
Output: 3
Explanation: 
We can first put the box of height 1 in room 4. Then we can put the box of height 3 in either of the 3 rooms 1, 2, or 3. Lastly, we can put one box of height 4 in room 0.

There is no way we can fit all 4 boxes in the warehouse.


Example 2:
Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
Output: 3
Explanation: 
Notice that it's not possible to put the box of height 4 into the warehouse since it cannot pass the first room of height 3.

Also, for the last two rooms, 2 and 3, only boxes of height 1 can fit.

We can fit 3 boxes maximum as shown above. The yellow box can also be put in room 2 instead.

Swapping the orange and green boxes is also valid, or swapping one of them with the red box.


Example 3:
Input: boxes = [1,2,3], warehouse = [1,2,3,4]
Output: 1
Explanation: Since the first room in the warehouse is of height 1, we can only put boxes of height 1.


Example 4:
Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
Output: 0

Constraints:
`n == warehouse.length`
`1 <= boxes.length, warehouse.length <= 10^5`
`1 <= boxes[i], warehouse[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers `arr`,  find a pattern of length `m` that is repeated `k` or more times.

A pattern is a subarray (consecutive sub-sequence) that consists of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and the number of repetitions.

Return `true` if there exists a pattern of length `m` that is repeated `k` or more times, otherwise return `false`.


Example 1:
Input: arr = [1,2,4,4,4,4], m = 1, k = 3
Output: true
Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Notice that pattern can be repeated k or more times but not less.


Example 2:
Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2
Output: true
Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.


Example 3:
Input: arr = [1,2,1,2,1,3], m = 2, k = 3
Output: false
Explanation: The pattern (1,2) is of length 2 but is repeated only 2 times. There is no pattern of length 2 that is repeated 3 or more times.


Example 4:
Input: arr = [1,2,3,1,2], m = 2, k = 2
Output: false
Explanation: Notice that the pattern (1,2) exists twice but not consecutively, so it doesn't count.


Example 5:
Input: arr = [2,2,2,2], m = 2, k = 3
Output: false
Explanation: The only pattern of length 2 is (2,2) however it's repeated only twice. Notice that we do not count overlapping repetitions.


Constraints:
`2 <= arr.length <= 100`
`1 <= arr[i] <= 100`
`1 <= m <= 100`
`2 <= k <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums`, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.


Example 1:
Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.


Example 2:
Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.

Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.


Example 3:
Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].


Example 4:
Input: nums = [-1,2]
Output: 1

Example 5:
Input: nums = [1,2,3,5,-6,4,0,10]
Output: 4

Constraints:
`1 <= nums.length <= 10^5`
`-10^9 <= nums[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D `grid` consisting of `1`s (land) and `0`s (water).  An island is a maximal 4-directionally (horizontal or vertical) connected group of `1`s.

The grid is said to be connected if we have exactly one island, otherwise is said disconnected.

In one day, we are allowed to change any single land cell `(1)` into a water cell `(0)`.

Return the minimum number of days to disconnect the grid.


Example 1:
Input: grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]
Output: 2
Explanation: We need at least 2 days to get a disconnected grid.

Change land grid[1][1] and grid[0][2] to water and get 2 disconnected island.


Example 2:
Input: grid = [[1,1]]
Output: 2
Explanation: Grid of full water is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.


Example 3:
Input: grid = [[1,0,1,0]]
Output: 0

Example 4:
Input: grid = [[1,1,0,1,1],
               [1,1,1,1,1],
               [1,1,0,1,1],
               [1,1,0,1,1]]
Output: 1

Example 5:
Input: grid = [[1,1,0,1,1],
               [1,1,1,1,1],
               [1,1,0,1,1],
               [1,1,1,1,1]]
Output: 2

Constraints:
`1 <= grid.length, grid[i].length <= 30`
`grid[i][j]` is `0` or `1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` that represents a permutation of integers from `1` to `n`. We are going to construct a binary search tree (BST) by inserting the elements of `nums` in order into an initially empty BST. Find the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`.

For example, given `nums = [2,1,3]`, we will have 2 as the root, 1 as a left child, and 3 as a right child. The array `[2,3,1]` also yields the same BST but `[3,2,1]` yields a different BST.

Return the number of ways to reorder `nums` such that the BST formed is identical to the original BST formed from `nums`.

Since the answer may be very large, return it modulo `10^9 + 7`.


Example 1:
Input: nums = [2,1,3]
Output: 1
Explanation: We can reorder nums to be [2,3,1] which will yield the same BST. There are no other ways to reorder nums which will yield the same BST.


Example 2:
Input: nums = [3,4,5,1,2]
Output: 5
Explanation: The following 5 arrays will yield the same BST: 
[3,1,2,4,5]
[3,1,4,2,5]
[3,1,4,5,2]
[3,4,1,2,5]
[3,4,1,5,2]

Example 3:
Input: nums = [1,2,3]
Output: 0
Explanation: There are no other orderings of nums that will yield the same BST.


Example 4:
Input: nums = [3,1,2,5,4,6]
Output: 19

Example 5:
Input: nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]
Output: 216212978
Explanation: The number of ways to reorder nums to get the same BST is 3216212999. Taking this number modulo 10^9 + 7 gives 216212978.


Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= nums.length`
All integers in `nums` are distinct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sparse vectors, compute their dot product.

Implement class `SparseVector`:
`SparseVector(nums)` Initializes the object with the vector `nums`
`dotProduct(vec)` Compute the dot product between the instance of SparseVector and `vec`
A sparse vector is a vector that has mostly zero values, you should store the sparse vector efficiently and compute the dot product between two SparseVector.

Follow up: What if only one of the vectors is sparse?

Example 1:
Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
Output: 8
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8

Example 2:
Input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]
Output: 0
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0

Example 3:
Input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]
Output: 6

Constraints:
`n == nums1.length == nums2.length`
`1 <= n <= 10^5`
`0 <= nums1[i], nums2[i] <= 100`",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a square matrix `mat`, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.


Example 1:
Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25
Explanation: Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat[1][1] = 5 is counted only once.


Example 2:
Input: mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]
Output: 8

Example 3:
Input: mat = [[5]]
Output: 5

Constraints:
`n == mat.length == mat[i].length`
`1 <= n <= 100`
`1 <= mat[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string `s` (a string consisting only of '0's and '1's), we can split `s` into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).

Return the number of ways `s` can be split such that the number of characters '1' is the same in s1, s2, and s3.

Since the answer may be too large, return it modulo 10^9 + 7.


Example 1:
Input: s = ""10101""
Output: 4
Explanation: There are four ways to split s in 3 parts where each part contain the same number of letters '1'.

""1|010|1""
""1|01|01""
""10|10|1""
""10|1|01""

Example 2:
Input: s = ""1001""
Output: 0

Example 3:
Input: s = ""0000""
Output: 3
Explanation: There are three ways to split s in 3 parts.

""0|0|00""
""0|00|0""
""00|0|0""

Example 4:
Input: s = ""100100010100110""
Output: 12

Constraints:
`3 <= s.length <= 10^5`
`s[i]` is `'0'` or `'1'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, remove a subarray (can be empty) from `arr` such that the remaining elements in `arr` are non-decreasing.

A subarray is a contiguous subsequence of the array.

Return the length of the shortest subarray to remove.


Example 1:
Input: arr = [1,2,3,10,4,2,3,5]
Output: 3
Explanation: The shortest subarray we can remove is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5] which are sorted.

Another correct solution is to remove the subarray [3,10,4].


Example 2:
Input: arr = [5,4,3,2,1]
Output: 4
Explanation: Since the array is strictly decreasing, we can only keep a single element. Therefore we need to remove a subarray of length 4, either [5,4,3,2] or [4,3,2,1].


Example 3:
Input: arr = [1,2,3]
Output: 0
Explanation: The array is already non-decreasing. We do not need to remove any elements.


Example 4:
Input: arr = [1]
Output: 0

Constraints:
`1 <= arr.length <= 10^5`
`0 <= arr[i] <= 10^9`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of distinct positive integers locations where `locations[i]` represents the position of city `i`. You are also given integers `start`, `finish` and `fuel` representing the starting city, ending city, and the initial amount of fuel you have, respectively.

At each step, if you are at city `i`, you can pick any city `j` such that `j != i` and `0 <= j < locations.length` and move to city `j`. Moving from city `i` to city `j` reduces the amount of fuel you have by `|locations[i] - locations[j]|`. Please notice that `|x|` denotes the absolute value of `x`.

Notice that `fuel` cannot become negative at any point in time, and that you are allowed to visit any city more than once (including `start` and `finish`).

Return the count of all possible routes from `start` to `finish`.

Since the answer may be too large, return it modulo `10^9 + 7`.


Example 1:
Input: locations = [2,3,6,8,4], start = 1, finish = 3, fuel = 5
Output: 4
Explanation: The following are all possible routes, each uses 5 units of fuel:
1 -> 3
1 -> 2 -> 3
1 -> 4 -> 3
1 -> 4 -> 2 -> 3

Example 2:
Input: locations = [4,3,1], start = 1, finish = 0, fuel = 6
Output: 5
Explanation: The following are all possible routes:
1 -> 0, used fuel = 1
1 -> 2 -> 0, used fuel = 5
1 -> 2 -> 1 -> 0, used fuel = 5
1 -> 0 -> 1 -> 0, used fuel = 3
1 -> 0 -> 1 -> 0 -> 1 -> 0, used fuel = 5

Example 3:
Input: locations = [5,2,1], start = 0, finish = 2, fuel = 3
Output: 0
Explanation: It's impossible to get from 0 to 2 using only 3 units of fuel since the shortest route needs 4 units of fuel.


Example 4:
Input: locations = [2,1,5], start = 0, finish = 0, fuel = 3
Output: 2
Explanation: There are two possible routes, 0 and 0 -> 1 -> 0.


Example 5:
Input: locations = [1,2,3], start = 0, finish = 2, fuel = 40
Output: 615088286
Explanation: The total number of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives us 615088286.


Constraints:
`2 <= locations.length <= 100`
`1 <= locations[i] <= 10^9`
All integers in `locations` are distinct.

`0 <= start, finish < locations.length`
`1 <= fuel <= 200`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` containing only lower case English letters and the '?' character, convert all the '?' characters into lower case letters such that the final string does not contain any consecutive repeating characters. You cannot modify the non '?' characters.

It is guaranteed that there are no consecutive repeating characters in the given string except for '?'.

Return the final string after all the conversions (possibly zero) have been made. If there is more than one solution, return any of them. It can be shown that an answer is always possible with the given constraints.


Example 1:
Input: s = ""?zs""
Output: ""azs""
Explanation: There are 25 solutions for this problem. From ""azs"" to ""yzs"", all are valid. Only ""z"" is an invalid modification as the string will consist of consecutive repeating characters in ""zzs"".


Example 2:
Input: s = ""ubv?w""
Output: ""ubvaw""
Explanation: There are 24 solutions for this problem. Only ""v"" and ""w"" are invalid modifications as the strings will consist of consecutive repeating characters in ""ubvvw"" and ""ubvww"".


Example 3:
Input: s = ""j?qg??b""
Output: ""jaqgacb""

Example 4:
Input: s = ""??yw?ipkj?""
Output: ""acywaipkja""

Constraints:
`1 <= s.length <= 100`
`s` contains only lower case English letters and `'?'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` and an array of integers `cost` where `cost[i]` is the cost of deleting the `ith` character in `s`.

Return the minimum cost of deletions such that there are no two identical letters next to each other.

Notice that you will delete the chosen characters at the same time, in other words, after deleting a character, the costs of deleting other characters will not change.


Example 1:
Input: s = ""abaac"", cost = [1,2,3,4,5]
Output: 3
Explanation: Delete the letter ""a"" with cost 3 to get ""abac"" (String without two identical letters next to each other).


Example 2:
Input: s = ""abc"", cost = [1,2,3]
Output: 0
Explanation: You don't need to delete any character because there are no identical letters next to each other.


Example 3:
Input: s = ""aabaa"", cost = [1,2,3,4,1]
Output: 2
Explanation: Delete the first and the last character, getting the string (""aba"").


Constraints:
`s.length == cost.length`
`1 <= s.length, cost.length <= 10^5`
`1 <= cost[i] <= 10^4`
`s` contains only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob have an undirected graph of `n` nodes and 3 types of edges:
Type 1: Can be traversed by Alice only.

Type 2: Can be traversed by Bob only.

Type 3: Can by traversed by both Alice and Bob.

Given an array `edges` where `edges[i] = [typei, ui, vi]` represents a bidirectional edge of type `typei` between nodes `ui` and `vi`, find the maximum number of edges you can remove so that after removing the edges, the graph can still be fully traversed by both Alice and Bob. The graph is fully traversed by Alice and Bob if starting from any node, they can reach all other nodes.

Return the maximum number of edges you can remove, or return `-1` if it's impossible for the graph to be fully traversed by Alice and Bob.


Example 1:
Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[2,3,4]]
Output: 2
Explanation: If we remove the 2 edges [1,1,2] and [1,1,3]. The graph will still be fully traversable by Alice and Bob. Removing any additional edge will not make it so. So the maximum number of edges we can remove is 2.


Example 2:
Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
Output: 0
Explanation: Notice that removing any edge will not make the graph fully traversable by Alice and Bob.


Example 3:
Input: n = 4, edges = [[3,2,3],[1,1,2],[2,3,4]]
Output: -1
Explanation: In the current graph, Alice cannot reach node 4 from the other nodes. Likewise, Bob cannot reach 1. Therefore it's impossible to make the graph fully traversable.


Constraints:
`1 <= n <= 10^5`
`1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)`
`edges[i].length == 3`
`1 <= edges[i][0] <= 3`
`1 <= edges[i][1] < edges[i][2] <= n`
All tuples `(typei, ui, vi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two arrays of positive integers, `boxes` and `warehouse`, representing the heights of some boxes of unit width and the heights of `n` rooms in a warehouse respectively. The warehouse's rooms are labeled from `0` to `n - 1` from left to right where `warehouse[i]` (0-indexed) is the height of the `ith` room.

Boxes are put into the warehouse by the following rules:
Boxes cannot be stacked.

You can rearrange the insertion order of the boxes.

Boxes can be pushed into the warehouse from either side (left or right)
If the height of some room in the warehouse is less than the height of a box, then that box and all other boxes behind it will be stopped before that room.

Return the maximum number of boxes you can put into the warehouse.


Example 1:
Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
Output: 4
Explanation:
We can store the boxes in the following order:
1- Put the yellow box in room 2 from either the left or right side.

2- Put the orange box in room 3 from the right side.

3- Put the green box in room 1 from the left side.

4- Put the red box in room 0 from the left side.

Notice that there are other valid ways to put 4 boxes such as swapping the red and green boxes or the red and orange boxes.


Example 2:
Input: boxes = [3,5,5,2], warehouse = [2,1,3,4,5]
Output: 3
Explanation:
It's not possible to put the two boxes of height 5 in the warehouse since there's only 1 room of height >= 5.

Other valid solutions are to put the green box in room 2 or to put the orange box first in room 2 before putting the green and red boxes.


Example 3:
Input: boxes = [1,2,3], warehouse = [1,2,3,4]
Output: 3

Example 4:
Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
Output: 0

Constraints:
`n == warehouse.length`
`1 <= boxes.length, warehouse.length <= 105`
`1 <= boxes[i], warehouse[i] <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `rows x cols` matrix `mat`, where `mat[i][j]` is either `0` or `1`, return the number of special positions in `mat`.

A position `(i,j)` is called special if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are 0-indexed).


Example 1:
Input: mat = [[1,0,0],
              [0,0,1],
              [1,0,0]]
Output: 1
Explanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.


Example 2:
Input: mat = [[1,0,0],
              [0,1,0],
              [0,0,1]]
Output: 3
Explanation: (0,0), (1,1) and (2,2) are special positions. 

Example 3:
Input: mat = [[0,0,0,1],
              [1,0,0,0],
              [0,1,1,0],
              [0,0,0,0]]
Output: 2

Example 4:
Input: mat = [[0,0,0,0,0],
              [1,0,0,0,0],
              [0,1,0,0,0],
              [0,0,1,0,0],
              [0,0,0,1,1]]
Output: 3

Constraints:
`rows == mat.length`
`cols == mat[i].length`
`1 <= rows, cols <= 100`
`mat[i][j]` is `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a list of `preferences` for `n` friends, where `n` is always even.

For each person `i`, `preferences[i]` contains a list of friends sorted in the order of preference. In other words, a friend earlier in the list is more preferred than a friend later in the list. Friends in each list are denoted by integers from `0` to `n-1`.

All the friends are divided into pairs. The pairings are given in a list `pairs`, where `pairs[i] = [xi, yi]` denotes `xi` is paired with `yi` and `yi` is paired with `xi`.

However, this pairing may cause some of the friends to be unhappy. A friend `x` is unhappy if `x` is paired with `y` and there exists a friend `u` who is paired with `v` but:
`x` prefers `u` over `y`, and
`u` prefers `x` over `v`.

Return the number of unhappy friends.


Example 1:
Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1], [2, 3]]
Output: 2
Explanation:
Friend 1 is unhappy because:
- 1 is paired with 0 but prefers 3 over 0, and
- 3 prefers 1 over 2.

Friend 3 is unhappy because:
- 3 is paired with 2 but prefers 1 over 2, and
- 1 prefers 3 over 0.

Friends 0 and 2 are happy.


Example 2:
Input: n = 2, preferences = [[1], [0]], pairs = [[1, 0]]
Output: 0
Explanation: Both friends 0 and 1 are happy.


Example 3:
Input: n = 4, preferences = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pairs = [[1, 3], [0, 2]]
Output: 4

Constraints:
`2 <= n <= 500`
`n` is even.

`preferences.length == n`
`preferences[i].length == n - 1`
`0 <= preferences[i][j] <= n - 1`
`preferences[i]` does not contain `i`.

All values in `preferences[i]` are unique.

`pairs.length == n/2`
`pairs[i].length == 2`
`xi != yi`
`0 <= xi, yi <= n - 1`
Each person is contained in exactly one pair.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `points` representing integer coordinates of some points on a 2D-plane, where `points[i] = [xi, yi]`.

The cost of connecting two points `[xi, yi]` and `[xj, yj]` is the manhattan distance between them: `|xi - xj| + |yi - yj|`, where `|val|` denotes the absolute value of `val`.

Return the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.


Example 1:
Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
Output: 20
Explanation:
We can connect the points as shown above to get the minimum cost of 20.

Notice that there is a unique path between every pair of points.


Example 2:
Input: points = [[3,12],[-2,5],[-4,1]]
Output: 18

Example 3:
Input: points = [[0,0],[1,1],[1,0],[-1,1]]
Output: 4

Example 4:
Input: points = [[-1000000,-1000000],[1000000,1000000]]
Output: 4000000

Example 5:
Input: points = [[0,0]]
Output: 0

Constraints:
`1 <= points.length <= 1000`
`-106 <= xi, yi <= 106`
All pairs `(xi, yi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, you want to transform string `s` into string `t` using the following operation any number of times:
Choose a non-empty substring in `s` and sort it in-place so the characters are in ascending order.

For example, applying the operation on the underlined substring in `""14234""` results in `""12344""`.

Return `true` if it is possible to transform string `s` into string `t`. Otherwise, return `false`.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""84532"", t = ""34852""
Output: true
Explanation: You can transform s into t using the following sort operations:
""84532"" (from index 2 to 3) -> ""84352""
""84352"" (from index 0 to 2) -> ""34852""

Example 2:
Input: s = ""34521"", t = ""23415""
Output: true
Explanation: You can transform s into t using the following sort operations:
""34521"" -> ""23451""
""23451"" -> ""23415""

Example 3:
Input: s = ""12345"", t = ""12435""
Output: false

Example 4:
Input: s = ""1"", t = ""2""
Output: false

Constraints:
`s.length == t.length`
`1 <= s.length <= 105`
`s` and `t` only contain digits from `'0'` to `'9'`.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `BSTIterator` class that represents an iterator over the in-order traversal of a binary search tree (BST):
`BSTIterator(TreeNode root)` Initializes an object of the `BSTIterator` class. The `root` of the BST is given as part of the constructor. The pointer should be initialized to a non-existent number smaller than any element in the BST.

`boolean hasNext()` Returns `true` if there exists a number in the traversal to the right of the pointer, otherwise returns `false`.

`int next()` Moves the pointer to the right, then returns the number at the pointer.

`boolean hasPrev()` Returns `true` if there exists a number in the traversal to the left of the pointer, otherwise returns `false`.

`int prev()` Moves the pointer to the left, then returns the number at the pointer.

Notice that by initializing the pointer to a non-existent smallest number, the first call to `next()` will return the smallest element in the BST.

You may assume that `next()` and `prev()` calls will always be valid. That is, there will be at least a next/previous number in the in-order traversal when `next()`/`prev()` is called.


Example 1:
Input
[""BSTIterator"", ""next"", ""next"", ""prev"", ""next"", ""hasNext"", ""next"", ""next"", ""next"", ""hasNext"", ""hasPrev"", ""prev"", ""prev""]
[[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null], [null]]
Output
[null, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]
Explanation
// The underlined element is where the pointer currently is.

BSTIterator bSTIterator = new BSTIterator([7, 3, 15, null, null, 9, 20]); // state is   [3, 7, 9, 15, 20]
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 3
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 3
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 7
bSTIterator.hasNext(); // return true
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 9
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 15
bSTIterator.next(); // state becomes [3, 7, 9, 15, 20], return 20
bSTIterator.hasNext(); // return false
bSTIterator.hasPrev(); // return true
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 15
bSTIterator.prev(); // state becomes [3, 7, 9, 15, 20], return 9

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`0 <= Node.val <= 106`
At most `105` calls will be made to `hasNext`, `next`, `hasPrev`, and `prev`.

Follow up: Could you solve the problem without precalculating the values of the tree?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers `arr`, calculate the sum of all possible odd-length subarrays.

A subarray is a contiguous subsequence of the array.

Return the sum of all odd-length subarrays of `arr`.


Example 1:
Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

Example 2:
Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.


Example 3:
Input: arr = [10,11,12]
Output: 66

Constraints:
`1 <= arr.length <= 100`
`1 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an array of integers, `nums`, and an array of `requests` where `requests[i] = [starti, endi]`. The `ith` request asks for the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are 0-indexed.

Return the maximum total sum of all requests among all permutations of `nums`.

Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
Total sum: 8 + 3 = 11.

A permutation with a higher total sum is [3,5,4,2,1] with the following result:
requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
Total sum: 11 + 8 = 19, which is the best that you can do.


Example 2:
Input: nums = [1,2,3,4,5,6], requests = [[0,1]]
Output: 11
Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].


Example 3:
Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
Output: 47
Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].


Constraints:
`n == nums.length`
`1 <= n <= 105`
`0 <= nums[i] <= 105`
`1 <= requests.length <= 105`
`requests[i].length == 2`
`0 <= starti <= endi < n`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers `nums`, remove the smallest subarray (possibly empty) such that the sum of the remaining elements is divisible by `p`. It is not allowed to remove the whole array.

Return the length of the smallest subarray that you need to remove, or `-1` if it's impossible.

A subarray is defined as a contiguous block of elements in the array.


Example 1:
Input: nums = [3,1,4,2], p = 6
Output: 1
Explanation: The sum of the elements in nums is 10, which is not divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is divisible by 6.


Example 2:
Input: nums = [6,3,5,2], p = 9
Output: 2
Explanation: We cannot remove a single element to get a sum divisible by 9. The best way is to remove the subarray [5,2], leaving us with [6,3] with sum 9.


Example 3:
Input: nums = [1,2,3], p = 3
Output: 0
Explanation: Here the sum is 6. which is already divisible by 3. Thus we do not need to remove anything.


Example 4:
Input: nums = [1,2,3], p = 7
Output: -1
Explanation: There is no way to remove a subarray in order to get a sum divisible by 7.


Example 5:
Input: nums = [1000000000,1000000000,1000000000], p = 3
Output: 0

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`1 <= p <= 109`",1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a strange printer with the following two special requirements:
On each turn, the printer will print a solid rectangular pattern of a single color on the grid. This will cover up the existing colors in the rectangle.

Once the printer has used a color for the above operation, the same color cannot be used again.

You are given a `m x n` matrix `targetGrid`, where `targetGrid[row][col]` is the color in the position `(row, col)` of the grid.

Return `true` if it is possible to print the matrix `targetGrid`, otherwise, return `false`.


Example 1:
Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
Output: true

Example 2:
Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
Output: true

Example 3:
Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
Output: false
Explanation: It is impossible to form targetGrid because it is not allowed to print the same color in different turns.


Example 4:
Input: targetGrid = [[1,1,1],[3,1,3]]
Output: false

Constraints:
`m == targetGrid.length`
`n == targetGrid[i].length`
`1 <= m, n <= 60`
`1 <= targetGrid[row][col] <= 60`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `text` of words that are placed among some number of spaces. Each word consists of one or more lowercase English letters and are separated by at least one space. It's guaranteed that `text` contains at least one word.

Rearrange the spaces so that there is an equal number of spaces between every pair of adjacent words and that number is maximized. If you cannot redistribute all the spaces equally, place the extra spaces at the end, meaning the returned string should be the same length as `text`.

Return the string after rearranging the spaces.


Example 1:
Input: text = ""  this   is  a sentence ""
Output: ""this   is   a   sentence""
Explanation: There are a total of 9 spaces and 4 words. We can evenly divide the 9 spaces between the words: 9 / (4-1) = 3 spaces.


Example 2:
Input: text = "" practice   makes   perfect""
Output: ""practice   makes   perfect ""
Explanation: There are a total of 7 spaces and 3 words. 7 / (3-1) = 3 spaces plus 1 extra space. We place this extra space at the end of the string.


Example 3:
Input: text = ""hello   world""
Output: ""hello   world""

Example 4:
Input: text = ""  walks  udp package   into  bar a""
Output: ""walks  udp  package  into  bar  a ""

Example 5:
Input: text = ""a""
Output: ""a""

Constraints:
`1 <= text.length <= 100`
`text` consists of lowercase English letters and `' '`.

`text` contains at least one word.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the maximum number of unique substrings that the given string can be split into.

You can split string `s` into any list of non-empty substrings, where the concatenation of the substrings forms the original string. However, you must split the substrings such that all of them are unique.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""ababccc""
Output: 5
Explanation: One way to split maximally is ['a', 'b', 'ab', 'c', 'cc']. Splitting like ['a', 'b', 'a', 'b', 'c', 'cc'] is not valid as you have 'a' and 'b' multiple times.


Example 2:
Input: s = ""aba""
Output: 2
Explanation: One way to split maximally is ['a', 'ba'].


Example 3:
Input: s = ""aa""
Output: 1
Explanation: It is impossible to split the string any further.


Constraints:
`1 <= s.length <= 16`
`s` contains only lower case English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a `rows x cols` matrix `grid`. Initially, you are located at the top-left corner `(0, 0)`, and in each step, you can only move right or down in the matrix.

Among all possible paths starting from the top-left corner `(0, 0)` and ending in the bottom-right corner `(rows - 1, cols - 1)`, find the path with the maximum non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.

Return the maximum non-negative product modulo `109 + 7`. If the maximum product is negative return `-1`.

Notice that the modulo is performed after getting the maximum product.


Example 1:
Input: grid = [[-1,-2,-3],
               [-2,-3,-3],
               [-3,-3,-2]]
Output: -1
Explanation: It's not possible to get non-negative product in the path from (0, 0) to (2, 2), so return -1.


Example 2:
Input: grid = [[1,-2,1],
               [1,-2,1],
               [3,-4,1]]
Output: 8
Explanation: Maximum non-negative product is in bold (1 * 1 * -2 * -4 * 1 = 8).


Example 3:
Input: grid = [[1, 3],
               [0,-4]]
Output: 0
Explanation: Maximum non-negative product is in bold (1 * 0 * -4 = 0).


Example 4:
Input: grid = [[ 1, 4,4,0],
               [-2, 0,0,1],
               [ 1,-1,1,1]]
Output: 2
Explanation: Maximum non-negative product is in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).


Constraints:
`1 <= rows, cols <= 15`
`-4 <= grid[i][j] <= 4`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two groups of points where the first group has `size1` points, the second group has `size2` points, and `size1 >= size2`.

The `cost` of the connection between any two points are given in an `size1 x size2` matrix where `cost[i][j]` is the cost of connecting point `i` of the first group and point `j` of the second group. The groups are connected if each point in both groups is connected to one or more points in the opposite group. In other words, each point in the first group must be connected to at least one point in the second group, and each point in the second group must be connected to at least one point in the first group.

Return the minimum cost it takes to connect the two groups.


Example 1:
Input: cost = [[15, 96], [36, 2]]
Output: 17
Explanation: The optimal way of connecting the groups is:
1--A
2--B
This results in a total cost of 17.


Example 2:
Input: cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
Output: 4
Explanation: The optimal way of connecting the groups is:
1--A
2--B
2--C
3--A
This results in a total cost of 4.

Note that there are multiple points connected to point 2 in the first group and point A in the second group. This does not matter as there is no limit to the number of points that can be connected. We only care about the minimum total cost.


Example 3:
Input: cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
Output: 10

Constraints:
`size1 == cost.length`
`size2 == cost[i].length`
`1 <= size1, size2 <= 12`
`size1 >= size2`
`0 <= cost[i][j] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with 2 children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).

For each internal node with operator `o`, the infix expression that it represents is `(A o B)`, where `A` is the expression the left subtree represents and `B` is the expression the right subtree represents.

You are given a string `s`, an infix expression containing operands, the operators described above, and parentheses `'('` and `')'`.

Return any valid binary expression tree, which its in-order traversal reproduces `s` after omitting the parenthesis from it (see examples below).

Please note that order of operations applies in `s`. That is, expressions in parentheses are evaluated first, and multiplication and division happen before addition and subtraction.

Operands must also appear in the same order in both `s` and the in-order traversal of the tree.


Example 1:
Input: s = ""3*4-2*5""
Output: [-,*,*,3,4,2,5]
Explanation: The tree above is the only valid tree whose inorder traversal produces s.


Example 2:
Input: s = ""2-3/(5*2)+1""
Output: [+,-,1,2,/,null,null,null,null,3,*,null,null,5,2]
Explanation: The inorder traversal of the tree above is 2-3/5*2+1 which is the same as s without the parenthesis. The tree also produces the correct result and its operands are in the same order as they appear in s.

The tree below is also a valid binary expression tree with the same inorder traversal as s, but it not a valid answer because it does not evaluate to the same value.

The third tree below is also not valid. Although it produces the same result and is equivalent to the above trees, its inorder traversal does not produce s and its operands are not in the same order as s.


Example 3:
Input: s = ""1+2+3+4+5""
Output: [+,+,5,+,4,null,null,+,3,null,null,1,2]
Explanation: The tree [+,+,5,+,+,null,null,1,2,3,4] is also one of many other valid trees.


Constraints:
`1 <= s.length <= 1000`
`s` consists of digits and the characters `'+'`, `'-'`, `'*'`, and `'/'`.

Operands in `s` are exactly 1 digit.

It is guaranteed that `s` is a valid expression.",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Leetcode file system keeps a log each time some user performs a change folder operation.

The operations are described below:
`""../""` : Move to the parent folder of the current folder. (If you are already in the main folder, remain in the same folder).

`""./""` : Remain in the same folder.

`""x/""` : Move to the child folder named `x` (This folder is guaranteed to always exist).

You are given a list of strings `logs` where `logs[i]` is the operation performed by the user at the `ith` step.

The file system starts in the main folder, then the operations in `logs` are performed.

Return the minimum number of operations needed to go back to the main folder after the change folder operations.


Example 1:
Input: logs = [""d1/"",""d2/"",""../"",""d21/"",""./""]
Output: 2
Explanation: Use this change folder operation ""../"" 2 times and go back to the main folder.


Example 2:
Input: logs = [""d1/"",""d2/"",""./"",""d3/"",""../"",""d31/""]
Output: 3

Example 3:
Input: logs = [""d1/"",""../"",""../"",""../""]
Output: 0

Constraints:
`1 <= logs.length <= 103`
`2 <= logs[i].length <= 10`
`logs[i]` contains lowercase English letters, digits, `'.'`, and `'/'`.

`logs[i]` follows the format described in the statement.

Folder names consist of lowercase English letters and digits.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are the operator of a Centennial Wheel that has four gondolas, and each gondola has room for up to four people. You have the ability to rotate the gondolas counterclockwise, which costs you `runningCost` dollars.

You are given an array `customers` of length `n` where `customers[i]` is the number of new customers arriving just before the `ith` rotation (0-indexed). This means you must rotate the wheel `i` times before the `customers[i]` customers arrive. You cannot make customers wait if there is room in the gondola. Each customer pays `boardingCost` dollars when they board on the gondola closest to the ground and will exit once that gondola reaches the ground again.

You can stop the wheel at any time, including before serving all customers. If you decide to stop serving customers, all subsequent rotations are free in order to get all the customers down safely. Note that if there are currently more than four customers waiting at the wheel, only four will board the gondola, and the rest will wait for the next rotation.

Return the minimum number of rotations you need to perform to maximize your profit. If there is no scenario where the profit is positive, return `-1`.


Example 1:
Input: customers = [8,3], boardingCost = 5, runningCost = 6
Output: 3
Explanation: The numbers written on the gondolas are the number of people currently there.

1. 8 customers arrive, 4 board and 4 wait for the next gondola, the wheel rotates. Current profit is 4 * $5 - 1 * $6 = $14.

2. 3 customers arrive, the 4 waiting board the wheel and the other 3 wait, the wheel rotates. Current profit is 8 * $5 - 2 * $6 = $28.

3. The final 3 customers board the gondola, the wheel rotates. Current profit is 11 * $5 - 3 * $6 = $37.

The highest profit was $37 after rotating the wheel 3 times.


Example 2:
Input: customers = [10,9,6], boardingCost = 6, runningCost = 4
Output: 7
Explanation:
1. 10 customers arrive, 4 board and 6 wait for the next gondola, the wheel rotates. Current profit is 4 * $6 - 1 * $4 = $20.

2. 9 customers arrive, 4 board and 11 wait (2 originally waiting, 9 newly waiting), the wheel rotates. Current profit is 8 * $6 - 2 * $4 = $40.

3. The final 6 customers arrive, 4 board and 13 wait, the wheel rotates. Current profit is 12 * $6 - 3 * $4 = $60.

4. 4 board and 9 wait, the wheel rotates. Current profit is 16 * $6 - 4 * $4 = $80.

5. 4 board and 5 wait, the wheel rotates. Current profit is 20 * $6 - 5 * $4 = $100.

6. 4 board and 1 waits, the wheel rotates. Current profit is 24 * $6 - 6 * $4 = $120.

7. 1 boards, the wheel rotates. Current profit is 25 * $6 - 7 * $4 = $122.

The highest profit was $122 after rotating the wheel 7 times.


Example 3:
Input: customers = [3,4,0,5,1], boardingCost = 1, runningCost = 92
Output: -1
Explanation:
1. 3 customers arrive, 3 board and 0 wait, the wheel rotates. Current profit is 3 * $1 - 1 * $92 = -$89.

2. 4 customers arrive, 4 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 2 * $92 = -$177.

3. 0 customers arrive, 0 board and 0 wait, the wheel rotates. Current profit is 7 * $1 - 3 * $92 = -$269.

4. 5 customers arrive, 4 board and 1 waits, the wheel rotates. Current profit is 11 * $1 - 4 * $92 = -$357.

5. 1 customer arrives, 2 board and 0 wait, the wheel rotates. Current profit is 13 * $1 - 5 * $92 = -$447.

The profit was never positive, so return -1.


Example 4:
Input: customers = [10,10,6,4,7], boardingCost = 3, runningCost = 8
Output: 9
Explanation:
1. 10 customers arrive, 4 board and 6 wait, the wheel rotates. Current profit is 4 * $3 - 1 * $8 = $4.

2. 10 customers arrive, 4 board and 12 wait, the wheel rotates. Current profit is 8 * $3 - 2 * $8 = $8.

3. 6 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 12 * $3 - 3 * $8 = $12.

4. 4 customers arrive, 4 board and 14 wait, the wheel rotates. Current profit is 16 * $3 - 4 * $8 = $16.

5. 7 customers arrive, 4 board and 17 wait, the wheel rotates. Current profit is 20 * $3 - 5 * $8 = $20.

6. 4 board and 13 wait, the wheel rotates. Current profit is 24 * $3 - 6 * $8 = $24.

7. 4 board and 9 wait, the wheel rotates. Current profit is 28 * $3 - 7 * $8 = $28.

8. 4 board and 5 wait, the wheel rotates. Current profit is 32 * $3 - 8 * $8 = $32.

9. 4 board and 1 waits, the wheel rotates. Current profit is 36 * $3 - 9 * $8 = $36.

10. 1 board and 0 wait, the wheel rotates. Current profit is 37 * $3 - 10 * $8 = $31.

The highest profit was $36 after rotating the wheel 9 times.


Constraints:
`n == customers.length`
`1 <= n <= 105`
`0 <= customers[i] <= 50`
`1 <= boardingCost, runningCost <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A kingdom consists of a king, his children, his grandchildren, and so on. Every once in a while, someone in the family dies or a child is born.

The kingdom has a well-defined order of inheritance that consists of the king as the first member. Let's define the recursive function `Successor(x, curOrder)`, which given a person `x` and the inheritance order so far, returns who should be the next person after `x` in the order of inheritance.

Successor(x, curOrder):
    if x has no children or all of x's children are in curOrder:
        if x is the king return null
        else return Successor(x's parent, curOrder)
    else return x's oldest child who's not in curOrder
For example, assume we have a kingdom that consists of the king, his children Alice and Bob (Alice is older than Bob), and finally Alice's son Jack.

In the beginning, `curOrder` will be `[""king""]`.

Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[""king"", ""Alice""]`.

Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[""king"", ""Alice"", ""Jack""]`.

Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[""king"", ""Alice"", ""Jack"", ""Bob""]`.

Calling `Successor(Bob, curOrder)` will return `null`. Thus the order of inheritance will be `[""king"", ""Alice"", ""Jack"", ""Bob""]`.

Using the above function, we can always obtain a unique order of inheritance.

Implement the `ThroneInheritance` class:
`ThroneInheritance(string kingName)` Initializes an object of the `ThroneInheritance` class. The name of the king is given as part of the constructor.

`void birth(string parentName, string childName)` Indicates that `parentName` gave birth to `childName`.

`void death(string name)` Indicates the death of `name`. The death of the person doesn't affect the `Successor` function nor the current inheritance order. You can treat it as just marking the person as dead.

`string[] getInheritanceOrder()` Returns a list representing the current order of inheritance excluding dead people.


Example 1:
Input
[""ThroneInheritance"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""getInheritanceOrder"", ""death"", ""getInheritanceOrder""]
[[""king""], [""king"", ""andy""], [""king"", ""bob""], [""king"", ""catherine""], [""andy"", ""matthew""], [""bob"", ""alex""], [""bob"", ""asha""], [null], [""bob""], [null]]
Output
[null, null, null, null, null, null, null, [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""], null, [""king"", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]]
Explanation
ThroneInheritance t= new ThroneInheritance(""king""); // order: king
t.birth(""king"", ""andy""); // order: king > andy
t.birth(""king"", ""bob""); // order: king > andy > bob
t.birth(""king"", ""catherine""); // order: king > andy > bob > catherine
t.birth(""andy"", ""matthew""); // order: king > andy > matthew > bob > catherine
t.birth(""bob"", ""alex""); // order: king > andy > matthew > bob > alex > catherine
t.birth(""bob"", ""asha""); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // return [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""]
t.death(""bob""); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // return [""king"", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]

Constraints:
`1 <= kingName.length, parentName.length, childName.length, name.length <= 15`
`kingName`, `parentName`, `childName`, and `name` consist of lowercase English letters only.

All arguments `childName` and `kingName` are distinct.

All `name` arguments of `death` will be passed to either the constructor or as `childName` to `birth` first.

For each call to `birth(parentName, childName)`, it is guaranteed that `parentName` is alive.

At most `105` calls will be made to `birth` and `death`.

At most `10` calls will be made to `getInheritanceOrder`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` buildings numbered from `0` to `n - 1`. Each building has a number of employees. It's transfer season, and some employees want to change the building they reside in.

You are given an array `requests` where `requests[i] = [fromi, toi]` represents an employee's request to transfer from building `fromi` to building `toi`.

All buildings are full, so a list of requests is achievable only if for each building, the net change in employee transfers is zero. This means the number of employees leaving is equal to the number of employees moving in. For example if `n = 3` and two employees are leaving building `0`, one is leaving building `1`, and one is leaving building `2`, there should be two employees moving to building `0`, one employee moving to building `1`, and one employee moving to building `2`.

Return the maximum number of achievable requests.


Example 1:
Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
Output: 5
Explantion: Let's see the requests:
From building 0 we have employees x and y and both want to move to building 1.

From building 1 we have employees a and b and they want to move to buildings 2 and 0 respectively.

From building 2 we have employee z and they want to move to building 0.

From building 3 we have employee c and they want to move to building 4.

From building 4 we don't have any requests.

We can achieve the requests of users x and b by swapping their places.

We can achieve the requests of users y, a and z by swapping the places in the 3 buildings.


Example 2:
Input: n = 3, requests = [[0,0],[1,2],[2,1]]
Output: 3
Explantion: Let's see the requests:
From building 0 we have employee x and they want to stay in the same building 0.

From building 1 we have employee y and they want to move to building 2.

From building 2 we have employee z and they want to move to building 1.

We can achieve all the requests. 

Example 3:
Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]
Output: 4

Constraints:
`1 <= n <= 20`
`1 <= requests.length <= 16`
`requests[i].length == 2`
`0 <= fromi, toi < n`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree and a node `u` in the tree, return the nearest node on the same level that is to the right of `u`, or return `null` if `u` is the rightmost node in its level.


Example 1:
Input: root = [1,2,3,null,4,5,6], u = 4
Output: 5
Explanation: The nearest node on the same level to the right of node 4 is node 5.


Example 2:
Input: root = [3,null,4,2], u = 2
Output: null
Explanation: There are no nodes to the right of 2.


Example 3:
Input: root = [1], u = 1
Output: null

Example 4:
Input: root = [3,4,2,null,null,null,1], u = 4
Output: 2

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`1 <= Node.val <= 105`
All values in the tree are distinct.

`u` is a node in the binary tree rooted at `root`.",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.

Implement the `ParkingSystem` class:
`ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.

`bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. A car can only park in a parking space of its `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.


Example 1:
Input
[""ParkingSystem"", ""addCar"", ""addCar"", ""addCar"", ""addCar""]
[[1, 1, 0], [1], [2], [3], [1]]
Output
[null, true, true, false, false]
Explanation
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // return true because there is 1 available slot for a big car
parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car
parkingSystem.addCar(3); // return false because there is no available slot for a small car
parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.


Constraints:
`0 <= big, medium, small <= 1000`
`carType` is `1`, `2`, or `3`
At most `1000` calls will be made to `addCar`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"LeetCode company workers use key-cards to unlock office doors. Each time a worker uses their key-card, the security system saves the worker's name and the time when it was used. The system emits an alert if any worker uses the key-card three or more times in a one-hour period.

You are given a list of strings `keyName` and `keyTime` where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time when their key-card was used in a single day.

Access times are given in the 24-hour time format ""HH:MM"", such as `""23:51""` and `""09:49""`.

Return a list of unique worker names who received an alert for frequent keycard use. Sort the names in ascending order alphabetically.

Notice that `""10:00""` - `""11:00""` is considered to be within a one-hour period, while `""22:51""` - `""23:52""` is not considered to be within a one-hour period.


Example 1:
Input: keyName = [""daniel"",""daniel"",""daniel"",""luis"",""luis"",""luis"",""luis""], keyTime = [""10:00"",""10:40"",""11:00"",""09:00"",""11:00"",""13:00"",""15:00""]
Output: [""daniel""]
Explanation: ""daniel"" used the keycard 3 times in a one-hour period (""10:00"",""10:40"", ""11:00"").


Example 2:
Input: keyName = [""alice"",""alice"",""alice"",""bob"",""bob"",""bob"",""bob""], keyTime = [""12:01"",""12:00"",""18:00"",""21:00"",""21:20"",""21:30"",""23:00""]
Output: [""bob""]
Explanation: ""bob"" used the keycard 3 times in a one-hour period (""21:00"",""21:20"", ""21:30"").


Example 3:
Input: keyName = [""john"",""john"",""john""], keyTime = [""23:58"",""23:59"",""00:01""]
Output: []

Example 4:
Input: keyName = [""leslie"",""leslie"",""leslie"",""clare"",""clare"",""clare"",""clare""], keyTime = [""13:00"",""13:20"",""14:00"",""18:00"",""18:51"",""19:30"",""19:49""]
Output: [""clare"",""leslie""]

Constraints:
`1 <= keyName.length, keyTime.length <= 105`
`keyName.length == keyTime.length`
`keyTime[i]` is in the format ""HH:MM"".

`[keyName[i], keyTime[i]]` is unique.

`1 <= keyName[i].length <= 10`
`keyName[i] contains only lowercase English letters.`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two arrays `rowSum` and `colSum` of non-negative integers where `rowSum[i]` is the sum of the elements in the `ith` row and `colSum[j]` is the sum of the elements of the `jth` column of a 2D matrix. In other words, you do not know the elements of the matrix, but you do know the sums of each row and column.

Find any matrix of non-negative integers of size `rowSum.length x colSum.length` that satisfies the `rowSum` and `colSum` requirements.

Return a 2D array representing any matrix that fulfills the requirements. It's guaranteed that at least one matrix that fulfills the requirements exists.


Example 1:
Input: rowSum = [3,8], colSum = [4,7]
Output: [[3,0],
         [1,7]]
Explanation:
0th row: 3 + 0 = 3 == rowSum[0]
1st row: 1 + 7 = 8 == rowSum[1]
0th column: 3 + 1 = 4 == colSum[0]
1st column: 0 + 7 = 7 == colSum[1]
The row and column sums match, and all matrix elements are non-negative.

Another possible matrix is: [[1,2],
                             [3,5]]

Example 2:
Input: rowSum = [5,7,10], colSum = [8,6,8]
Output: [[0,5,0],
         [6,1,0],
         [2,0,8]]

Example 3:
Input: rowSum = [14,9], colSum = [6,9,8]
Output: [[0,9,5],
         [6,0,3]]

Example 4:
Input: rowSum = [1,0], colSum = [1]
Output: [[1],
         [0]]

Example 5:
Input: rowSum = [0], colSum = [0]
Output: [[0]]

Constraints:
`1 <= rowSum.length, colSum.length <= 500`
`0 <= rowSum[i], colSum[i] <= 108`
`sum(rows) == sum(columns)`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `k` servers numbered from `0` to `k-1` that are being used to handle multiple requests simultaneously. Each server has infinite computational capacity but cannot handle more than one request at a time. The requests are assigned to servers according to a specific algorithm:
The `ith` (0-indexed) request arrives.

If all servers are busy, the request is dropped (not handled at all).

If the `(i % k)th` server is available, assign the request to that server.

Otherwise, assign the request to the next available server (wrapping around the list of servers and starting from 0 if necessary). For example, if the `ith` server is busy, try to assign the request to the `(i+1)th` server, then the `(i+2)th` server, and so on.

You are given a strictly increasing array `arrival` of positive integers, where `arrival[i]` represents the arrival time of the `ith` request, and another array `load`, where `load[i]` represents the load of the `ith` request (the time it takes to complete). Your goal is to find the busiest server(s). A server is considered busiest if it handled the most number of requests successfully among all the servers.

Return a list containing the IDs (0-indexed) of the busiest server(s). You may return the IDs in any order.


Example 1:
Input: k = 3, arrival = [1,2,3,4,5], load = [5,2,3,3,3] 
Output: [1] 
Explanation:
All of the servers start out available.

The first 3 requests are handled by the first 3 servers in order.

Request 3 comes in. Server 0 is busy, so it's assigned to the next available server, which is 1.

Request 4 comes in. It cannot be handled since all servers are busy, so it is dropped.

Servers 0 and 2 handled one request each, while server 1 handled two requests. Hence server 1 is the busiest server.


Example 2:
Input: k = 3, arrival = [1,2,3,4], load = [1,2,1,2]
Output: [0]
Explanation:
The first 3 requests are handled by first 3 servers.

Request 3 comes in. It is handled by server 0 since the server is available.

Server 0 handled two requests, while servers 1 and 2 handled one request each. Hence server 0 is the busiest server.


Example 3:
Input: k = 3, arrival = [1,2,3], load = [10,12,11]
Output: [0,1,2]
Explanation: Each server handles a single request, so they are all considered the busiest.


Example 4:
Input: k = 3, arrival = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]
Output: [1]

Example 5:
Input: k = 1, arrival = [1], load = [1]
Output: [0]

Constraints:
`1 <= k <= 105`
`1 <= arrival.length, load.length <= 105`
`arrival.length == load.length`
`1 <= arrival[i], load[i] <= 109`
`arrival` is strictly increasing.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `nums` of non-negative integers. `nums` is considered special if there exists a number `x` such that there are exactly `x` numbers in `nums` that are greater than or equal to `x`.

Notice that `x` does not have to be an element in `nums`.

Return `x` if the array is special, otherwise, return `-1`. It can be proven that if `nums` is special, the value for `x` is unique.


Example 1:
Input: nums = [3,5]
Output: 2
Explanation: There are 2 values (3 and 5) that are greater than or equal to 2.


Example 2:
Input: nums = [0,0]
Output: -1
Explanation: No numbers fit the criteria for x.

If x = 0, there should be 0 numbers >= x, but there are 2.

If x = 1, there should be 1 number >= x, but there are 0.

If x = 2, there should be 2 numbers >= x, but there are 0.

x cannot be greater since there are only 2 numbers in nums.


Example 3:
Input: nums = [0,4,3,0,4]
Output: 3
Explanation: There are 3 values that are greater than or equal to 3.


Example 4:
Input: nums = [3,6,7,7,0]
Output: -1

Constraints:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary tree is named Even-Odd if it meets the following conditions:
The root of the binary tree is at level index `0`, its children are at level index `1`, their children are at level index `2`, etc.

For every even-indexed level, all nodes at the level have odd integer values in strictly increasing order (from left to right).

For every odd-indexed level, all nodes at the level have even integer values in strictly decreasing order (from left to right).

Given the `root` of a binary tree, return `true` if the binary tree is Even-Odd, otherwise return `false`.


Example 1:
Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
Output: true
Explanation: The node values on each level are:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are all odd and increasing, and levels 1 and 3 are all even and decreasing, the tree is Even-Odd.


Example 2:
Input: root = [5,4,2,3,3,7]
Output: false
Explanation: The node values on each level are:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values in the level 2 must be in strictly increasing order, so the tree is not Even-Odd.


Example 3:
Input: root = [5,9,1,3,5,7]
Output: false
Explanation: Node values in the level 1 should be even integers.


Example 4:
Input: root = [1]
Output: true

Example 5:
Input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]
Output: true

Constraints:
The number of nodes in the tree is in the range `[1, 105]`.

`1 <= Node.val <= 106`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `points`, an integer `angle`, and your `location`, where `location = [posx, posy]` and `points[i] = [xi, yi]` both denote integral coordinates on the X-Y plane.

Initially, you are facing directly east from your position. You cannot move from your position, but you can rotate. In other words, `posx` and `posy` cannot be changed. Your field of view in degrees is represented by `angle`, determining how wide you can see from any given view direction. Let `d` be the amount in degrees that you rotate counterclockwise. Then, your field of view is the inclusive range of angles `[d - angle/2, d + angle/2]`.

Your browser does not support the video tag or this video format.

You can see some set of points if, for each point, the angle formed by the point, your position, and the immediate east direction from your position is in your field of view.

There can be multiple points at one coordinate. There may be points at your location, and you can always see these points regardless of your rotation. Points do not obstruct your vision to other points.

Return the maximum number of points you can see.


Example 1:
Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
Output: 3
Explanation: The shaded region represents your field of view. All points can be made visible in your field of view, including [3,3] even though [2,2] is in front and in the same line of sight.


Example 2:
Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]
Output: 4
Explanation: All points can be made visible in your field of view, including the one at your location.


Example 3:
Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]
Output: 1
Explanation: You can only see one of the two points, as shown above.


Constraints:
`1 <= points.length <= 105`
`points[i].length == 2`
`location.length == 2`
`0 <= angle < 360`
`0 <= posx, posy, xi, yi <= 100`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, you must transform it into `0` using the following operations any number of times:
Change the rightmost (`0th`) bit in the binary representation of `n`.

Change the `ith` bit in the binary representation of `n` if the `(i-1)th` bit is set to `1` and the `(i-2)th` through `0th` bits are set to `0`.

Return the minimum number of operations to transform `n` into `0`.


Example 1:
Input: n = 0
Output: 0

Example 2:
Input: n = 3
Output: 2
Explanation: The binary representation of 3 is ""11"".

""11"" -> ""01"" with the 2nd operation since the 0th bit is 1.

""01"" -> ""00"" with the 1st operation.


Example 3:
Input: n = 6
Output: 4
Explanation: The binary representation of 6 is ""110"".

""110"" -> ""010"" with the 2nd operation since the 1st bit is 1 and 0th through 0th bits are 0.

""010"" -> ""011"" with the 1st operation.

""011"" -> ""001"" with the 2nd operation since the 0th bit is 1.

""001"" -> ""000"" with the 1st operation.


Example 4:
Input: n = 9
Output: 14

Example 5:
Input: n = 333
Output: 393

Constraints:
`0 <= n <= 109`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to the operators. In this problem, we only consider the `'+'` operator (i.e. addition).

You are given the roots of two binary expression trees, `root1` and `root2`. Return `true` if the two binary expression trees are equivalent. Otherwise, return `false`.

Two binary expression trees are equivalent if they evaluate to the same value regardless of what the variables are set to.

Follow up: What will you change in your solution if the tree also supports the `'-'` operator (i.e. subtraction)?

Example 1:
Input: root1 = [x], root2 = [x]
Output: true

Example 2:
Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c]
Output: true
Explaination: `a + (b + c) == (b + c) + a`

Example 3:
Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d]
Output: false
Explaination: `a + (b + c) != (b + d) + a`

Constraints:
The number of nodes in both trees are equal, odd and, in the range `[1, 4999]`.

`Node.val` is `'+'` or a lower-case English letter.

It's guaranteed that the tree given is a valid binary expression tree.",0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is a valid parentheses string (denoted VPS) if it meets one of the following:
It is an empty string `""""`, or a single character not equal to `""(""` or `"")""`,
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are VPS's, or
It can be written as `(A)`, where `A` is a VPS.

We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:
`depth("""") = 0`
`depth(C) = 0`, where `C` is a string with a single character not equal to `""(""` or `"")""`.

`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS's.

`depth(""("" + A + "")"") = 1 + depth(A)`, where `A` is a VPS.

For example, `""""`, `""()()""`, and `""()(()())""` are VPS's (with nesting depths 0, 1, and 2), and `"")(""` and `""(()""` are not VPS's.

Given a VPS represented as string `s`, return the nesting depth of `s`.


Example 1:
Input: s = ""(1+(2*3)+((8)/4))+1""
Output: 3
Explanation: Digit 8 is inside of 3 nested parentheses in the string.


Example 2:
Input: s = ""(1)+((2))+(((3)))""
Output: 3

Example 3:
Input: s = ""1+(2*3)/(2-1)""
Output: 1

Example 4:
Input: s = ""1""
Output: 0

Constraints:
`1 <= s.length <= 100`
`s` consists of digits `0-9` and characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.

It is guaranteed that parentheses expression `s` is a VPS.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an infrastructure of `n` cities with some number of `roads` connecting these cities. Each `roads[i] = [ai, bi]` indicates that there is a bidirectional road between cities `ai` and `bi`.

The network rank of two different cities is defined as the total number of directly connected roads to either city. If a road is directly connected to both cities, it is only counted once.

The maximal network rank of the infrastructure is the maximum network rank of all pairs of different cities.

Given the integer `n` and the array `roads`, return the maximal network rank of the entire infrastructure.


Example 1:
Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]
Output: 4
Explanation: The network rank of cities 0 and 1 is 4 as there are 4 roads that are connected to either 0 or 1. The road between 0 and 1 is only counted once.


Example 2:
Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
Output: 5
Explanation: There are 5 roads that are connected to cities 1 or 2.


Example 3:
Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
Output: 5
Explanation: The network rank of 2 and 5 is 5. Notice that all the cities do not have to be connected.


Constraints:
`2 <= n <= 100`
`0 <= roads.length <= n * (n - 1) / 2`
`roads[i].length == 2`
`0 <= ai, bi <= n-1`
`ai != bi`
Each pair of cities has at most one road connecting them.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `a` and `b` of the same length. Choose an index and split both strings at the same index, splitting `a` into two strings: `aprefix` and `asuffix` where `a = aprefix + asuffix`, and splitting `b` into two strings: `bprefix` and `bsuffix` where `b = bprefix + bsuffix`. Check if `aprefix + bsuffix` or `bprefix + asuffix` forms a palindrome.

When you split a string `s` into `sprefix` and `ssuffix`, either `ssuffix` or `sprefix` is allowed to be empty. For example, if `s = ""abc""`, then `"""" + ""abc""`, `""a"" + ""bc""`, `""ab"" + ""c""` , and `""abc"" + """"` are valid splits.

Return `true` if it is possible to form a palindrome string, otherwise return `false`.

Notice that `x + y` denotes the concatenation of strings `x` and `y`.


Example 1:
Input: a = ""x"", b = ""y""
Output: true
Explaination: If either a or b are palindromes the answer is true since you can split in the following way:
aprefix = """", asuffix = ""x""
bprefix = """", bsuffix = ""y""
Then, aprefix + bsuffix = """" + ""y"" = ""y"", which is a palindrome.


Example 2:
Input: a = ""abdef"", b = ""fecab""
Output: true

Example 3:
Input: a = ""ulacfd"", b = ""jizalu""
Output: true
Explaination: Split them at index 3:
aprefix = ""ula"", asuffix = ""cfd""
bprefix = ""jiz"", bsuffix = ""alu""
Then, aprefix + bsuffix = ""ula"" + ""alu"" = ""ulaalu"", which is a palindrome.


Example 4:
Input: a = ""xbdef"", b = ""xecab""
Output: false

Constraints:
`1 <= a.length, b.length <= 105`
`a.length == b.length`
`a` and `b` consist of lowercase English letters",0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities numbered from `1` to `n`. You are given an array `edges` of size `n-1`, where `edges[i] = [ui, vi]` represents a bidirectional edge between cities `ui` and `vi`. There exists a unique path between each pair of cities. In other words, the cities form a tree.

A subtree is a subset of cities where every city is reachable from every other city in the subset, where the path between each pair passes through only the cities from the subset. Two subtrees are different if there is a city in one subtree that is not present in the other.

For each `d` from `1` to `n-1`, find the number of subtrees in which the maximum distance between any two cities in the subtree is equal to `d`.

Return an array of size `n-1` where the `dth` element (1-indexed) is the number of subtrees in which the maximum distance between any two cities is equal to `d`.

Notice that the distance between the two cities is the number of edges in the path between them.


Example 1:
Input: n = 4, edges = [[1,2],[2,3],[2,4]]
Output: [3,4,0]
Explanation:
The subtrees with subsets {1,2}, {2,3} and {2,4} have a max distance of 1.

The subtrees with subsets {1,2,3}, {1,2,4}, {2,3,4} and {1,2,3,4} have a max distance of 2.

No subtree has two nodes where the max distance between them is 3.


Example 2:
Input: n = 2, edges = [[1,2]]
Output: [1]

Example 3:
Input: n = 3, edges = [[1,2],[2,3]]
Output: [2,1]

Constraints:
`2 <= n <= 15`
`edges.length == n-1`
`edges[i].length == 2`
`1 <= ui, vi <= n`
All pairs `(ui, vi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `text`. We want to display `text` on a screen of width `w` and height `h`. You can choose any font size from array `fonts`, which contains the available font sizes in ascending order.

You can use the `FontInfo` interface to get the width and height of any character at any available font size.

The `FontInfo` interface is defined as such:
interface FontInfo {
  // Returns the width of character ch on the screen using font size fontSize.

  // O(1) per call
  public int getWidth(int fontSize, char ch);
  // Returns the height of any character on the screen using font size fontSize.

  // O(1) per call
  public int getHeight(int fontSize);
}
The calculated width of `text` for some `fontSize` is the sum of every `getWidth(fontSize, text[i])` call for each `0 <= i < text.length` (0-indexed). The calculated height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on a single line.

It is guaranteed that `FontInfo` will return the same value if you call `getHeight` or `getWidth` with the same parameters.

It is also guaranteed that for any font size `fontSize` and any character `ch`:
`getHeight(fontSize) <= getHeight(fontSize+1)`
`getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)`
Return the maximum font size you can use to display `text` on the screen. If `text` cannot fit on the display with any font size, return `-1`.


Example 1:
Input: text = ""helloworld"", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]
Output: 6

Example 2:
Input: text = ""leetcode"", w = 1000, h = 50, fonts = [1,2,4]
Output: 4

Example 3:
Input: text = ""easyquestion"", w = 100, h = 100, fonts = [10,15,20,25]
Output: -1

Constraints:
`1 <= text.length <= 50000`
`text` contains only lowercase English letters.

`1 <= w <= 107`
`1 <= h <= 104`
`1 <= fonts.length <= 105`
`1 <= fonts[i] <= 105`
`fonts` is sorted in ascending order and does not contain duplicates.",0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `arr`, return the mean of the remaining integers after removing the smallest `5%` and the largest `5%` of the elements.

Answers within `10-5` of the actual answer will be considered accepted.


Example 1:
Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
Output: 2.00000
Explanation: After erasing the minimum and the maximum values of this array, all elements are equal to 2, so the mean is 2.


Example 2:
Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
Output: 4.00000

Example 3:
Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
Output: 4.77778

Example 4:
Input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6,7,2,9,7,7,3,0,1,6,1,10,3]
Output: 5.27778

Example 5:
Input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10,7,7,8,2,0,1,1]
Output: 5.29167

Constraints:
`20 <= arr.length <= 1000`
`arr.length` is a multiple of `20`.

`0 <= arr[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of network towers `towers` and an integer `radius`, where `towers[i] = [xi, yi, qi]` denotes the `ith` network tower with location `(xi, yi)` and quality factor `qi`. All the coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.

The integer `radius` denotes the maximum distance in which the tower is reachable. The tower is reachable if the distance is less than or equal to `radius`. Outside that distance, the signal becomes garbled, and the tower is not reachable.

The signal quality of the `ith` tower at a coordinate `(x, y)` is calculated with the formula `⌊qi / (1 + d)⌋`, where `d` is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal qualities from all the reachable towers.

Return the integral coordinate where the network quality is maximum. If there are multiple coordinates with the same network quality, return the lexicographically minimum coordinate.

Note:
A coordinate `(x1, y1)` is lexicographically smaller than `(x2, y2)` if either `x1 < x2` or `x1 == x2` and `y1 < y2`.

`⌊val⌋` is the greatest integer less than or equal to `val` (the floor function).


Example 1:
Input: towers = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
Output: [2,1]
Explanation: 
At coordinate (2, 1) the total quality is 13
- Quality of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
- Quality of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
- Quality of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
No other coordinate has higher quality.


Example 2:
Input: towers = [[23,11,21]], radius = 9
Output: [23,11]

Example 3:
Input: towers = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
Output: [1,2]

Example 4:
Input: towers = [[2,1,9],[0,1,9]], radius = 2
Output: [0,1]
Explanation: Both (0, 1) and (2, 1) are optimal in terms of quality but (0, 1) is lexicograpically minimal.


Constraints:
`1 <= towers.length <= 50`
`towers[i].length == 3`
`0 <= xi, yi, qi <= 50`
`1 <= radius <= 50`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` points on a 1-D plane, where the `ith` point (from `0` to `n-1`) is at `x = i`, find the number of ways we can draw exactly `k` non-overlapping line segments such that each segment covers two or more points. The endpoints of each segment must have integral coordinates. The `k` line segments do not have to cover all `n` points, and they are allowed to share endpoints.

Return the number of ways we can draw `k` non-overlapping line segments. Since this number can be huge, return it modulo `109 + 7`.


Example 1:
Input: n = 4, k = 2
Output: 5
Explanation: 
The two line segments are shown in red and blue.

The image above shows the 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)}, {(1,2),(2,3)}, {(0,1),(1,2)}.


Example 2:
Input: n = 3, k = 1
Output: 3
Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.


Example 3:
Input: n = 30, k = 7
Output: 796297179
Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives us 796297179.


Example 4:
Input: n = 5, k = 3
Output: 7

Example 5:
Input: n = 3, k = 2
Output: 1

Constraints:
`2 <= n <= 1000`
`1 <= k <= n-1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an API that generates fancy sequences using the `append`, `addAll`, and `multAll` operations.

Implement the `Fancy` class:
`Fancy()` Initializes the object with an empty sequence.

`void append(val)` Appends an integer `val` to the end of the sequence.

`void addAll(inc)` Increments all existing values in the sequence by an integer `inc`.

`void multAll(m)` Multiplies all existing values in the sequence by an integer `m`.

`int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence modulo `109 + 7`. If the index is greater or equal than the length of the sequence, return `-1`.


Example 1:
Input
[""Fancy"", ""append"", ""addAll"", ""append"", ""multAll"", ""getIndex"", ""addAll"", ""append"", ""multAll"", ""getIndex"", ""getIndex"", ""getIndex""]
[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]
Output
[null, null, null, null, null, 10, null, null, null, 26, 34, 20]
Explanation
Fancy fancy = new Fancy();
fancy.append(2);   // fancy sequence: [2]
fancy.addAll(3);   // fancy sequence: [2+3] -> [5]
fancy.append(7);   // fancy sequence: [5, 7]
fancy.multAll(2);  // fancy sequence: [5*2, 7*2] -> [10, 14]
fancy.getIndex(0); // return 10
fancy.addAll(3);   // fancy sequence: [10+3, 14+3] -> [13, 17]
fancy.append(10);  // fancy sequence: [13, 17, 10]
fancy.multAll(2);  // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]
fancy.getIndex(0); // return 26
fancy.getIndex(1); // return 34
fancy.getIndex(2); // return 20

Constraints:
`1 <= val, inc, m <= 100`
`0 <= idx <= 105`
At most `105` calls total will be made to `append`, `addAll`, `multAll`, and `getIndex`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` of even length consisting of digits from `0` to `9`, and two integers `a` and `b`.

You can apply either of the following two operations any number of times and in any order on `s`:
Add `a` to all odd indices of `s` (0-indexed). Digits post `9` are cycled back to `0`. For example, if `s = ""3456""` and `a = 5`, `s` becomes `""3951""`.

Rotate `s` to the right by `b` positions. For example, if `s = ""3456""` and `b = 1`, `s` becomes `""6345""`.

Return the lexicographically smallest string you can obtain by applying the above operations any number of times on `s`.

A string `a` is lexicographically smaller than a string `b` (of the same length) if in the first position where `a` and `b` differ, string `a` has a letter that appears earlier in the alphabet than the corresponding letter in `b`. For example, `""0158""` is lexicographically smaller than `""0190""` because the first position they differ is at the third letter, and `'5'` comes before `'9'`.


Example 1:
Input: s = ""5525"", a = 9, b = 2
Output: ""2050""
Explanation: We can apply the following operations:
Start:  ""5525""
Rotate: ""2555""
Add:    ""2454""
Add:    ""2353""
Rotate: ""5323""
Add:    ""5222""
​​​​​​​Add:    ""5121""
​​​​​​​Rotate: ""2151""
​​​​​​​Add:    ""2050""​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then ""2050"".


Example 2:
Input: s = ""74"", a = 5, b = 1
Output: ""24""
Explanation: We can apply the following operations:
Start:  ""74""
Rotate: ""47""
​​​​​​​Add:    ""42""
​​​​​​​Rotate: ""24""​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller then ""24"".


Example 3:
Input: s = ""0011"", a = 4, b = 2
Output: ""0011""
Explanation: There are no sequence of operations that will give us a lexicographically smaller string than ""0011"".


Example 4:
Input: s = ""43987654"", a = 7, b = 3
Output: ""00553311""

Constraints:
`2 <= s.length <= 100`
`s.length` is even.

`s` consists of digits from `0` to `9` only.

`1 <= a <= 9`
`1 <= b <= s.length - 1`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are the manager of a basketball team. For the upcoming tournament, you want to choose the team with the highest overall score. The score of the team is the sum of scores of all the players in the team.

However, the basketball team is not allowed to have conflicts. A conflict exists if a younger player has a strictly higher score than an older player. A conflict does not occur between players of the same age.

Given two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represents the score and age of the `ith` player, respectively, return the highest overall score of all possible basketball teams.


Example 1:
Input: scores = [1,3,5,10,15], ages = [1,2,3,4,5]
Output: 34
Explanation: You can choose all the players.


Example 2:
Input: scores = [4,5,6,5], ages = [2,1,2,1]
Output: 16
Explanation: It is best to choose the last 3 players. Notice that you are allowed to choose multiple people of the same age.


Example 3:
Input: scores = [1,2,3,5], ages = [8,9,10,1]
Output: 6
Explanation: It is best to choose the first 3 players. 

Constraints:
`1 <= scores.length, ages.length <= 1000`
`scores.length == ages.length`
`1 <= scores[i] <= 106`
`1 <= ages[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` cities labeled from `1` to `n`. Two different cities with labels `x` and `y` are directly connected by a bidirectional road if and only if `x` and `y` share a common divisor strictly greater than some `threshold`. More formally, cities with labels `x` and `y` have a road between them if there exists an integer `z` such that all of the following are true:
`x % z == 0`,
`y % z == 0`, and
`z > threshold`.

Given the two integers, `n` and `threshold`, and an array of `queries`, you must determine for each `queries[i] = [ai, bi]` if cities `ai` and `bi` are connected directly or indirectly. (i.e. there is some path between them).

Return an array `answer`, where `answer.length == queries.length` and `answer[i]` is `true` if for the `ith` query, there is a path between `ai` and `bi`, or `answer[i]` is `false` if there is no path.


Example 1:
Input: n = 6, threshold = 2, queries = [[1,4],[2,5],[3,6]]
Output: [false,false,true]
Explanation: The divisors for each number:
1:   1
2:   1, 2
3:   1, 3
4:   1, 2, 4
5:   1, 5
6:   1, 2, 3, 6
Using the underlined divisors above the threshold, only cities 3 and 6 share a common divisor, so they are the
only ones directly connected. The result of each query:
[1,4]   1 is not connected to 4
[2,5]   2 is not connected to 5
[3,6]   3 is connected to 6 through path 3--6

Example 2:
Input: n = 6, threshold = 0, queries = [[4,5],[3,4],[3,2],[2,6],[1,3]]
Output: [true,true,true,true,true]
Explanation: The divisors for each number are the same as the previous example. However, since the threshold is 0,
all divisors can be used. Since all numbers share 1 as a divisor, all cities are connected.


Example 3:
Input: n = 5, threshold = 1, queries = [[4,5],[4,5],[3,2],[2,3],[3,4]]
Output: [false,false,false,false,false]
Explanation: Only cities 2 and 4 share a common divisor 2 which is strictly greater than the threshold 1, so they are the only ones directly connected.

Please notice that there can be multiple queries for the same pair of nodes [x, y], and that the query [x, y] is equivalent to the query [y, x].


Constraints:
`2 <= n <= 104`
`0 <= threshold <= n`
`1 <= queries.length <= 105`
`queries[i].length == 2`
`1 <= ai, bi <= cities`
`ai != bi`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `postfix` tokens of an arithmetic expression, build and return the binary expression tree that represents this expression.

Postfix notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix tokens of the expression `4*(5-(7+2))` are represented in the array `postfix = [""4"",""5"",""7"",""2"",""+"",""-"",""*""]`.

The class `Node` is an interface you should use to implement the binary expression tree. The returned tree will be tested using the `evaluate` function, which is supposed to evaluate the tree's value. You should not remove the `Node` class; however, you can modify it as you wish, and you can define other classes to implement it if needed.

A binary expression tree is a kind of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has either zero or two children. Leaf nodes (nodes with 0 children) correspond to operands (numbers), and internal nodes (nodes with two children) correspond to the operators `'+'` (addition), `'-'` (subtraction), `'*'` (multiplication), and `'/'` (division).

It's guaranteed that no subtree will yield a value that exceeds `109` in absolute value, and all the operations are valid (i.e., no division by zero).

Follow up: Could you design the expression tree such that it is more modular? For example, is your design able to support additional operators without making changes to your existing `evaluate` implementation?

Example 1:
Input: s = [""3"",""4"",""+"",""2"",""*"",""7"",""/""]
Output: 2
Explanation: this expression evaluates to the above binary tree with expression (`(3+4)*2)/7) = 14/7 = 2.`

Example 2:
Input: s = [""4"",""5"",""7"",""2"",""+"",""-"",""*""]
Output: -16
Explanation: this expression evaluates to the above binary tree with expression 4*(5-`(2+7)) = 4*(-4) = -16.`

Example 3:
Input: s = [""4"",""2"",""+"",""3"",""5"",""1"",""-"",""*"",""+""]
Output: 18

Example 4:
Input: s = [""100"",""200"",""+"",""2"",""/"",""5"",""*"",""7"",""+""]
Output: 757

Constraints:
`1 <= s.length < 100`
`s.length` is odd.

`s` consists of numbers and the characters `'+'`, `'-'`, `'*'`, and `'/'`.

If `s[i]` is a number, its integer representation is no more than `105`.

It is guaranteed that `s` is a valid expression.

The absolute value of the result and intermediate values will not exceed `109`.

It is guaranteed that no expression will include division by zero.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"A newly designed keypad was tested, where a tester pressed a sequence of `n` keys, one at a time.

You are given a string `keysPressed` of length `n`, where `keysPressed[i]` was the `ith` key pressed in the testing sequence, and a sorted list `releaseTimes`, where `releaseTimes[i]` was the time the `ith` key was released. Both arrays are 0-indexed. The `0th` key was pressed at the time `0`, and every subsequent key was pressed at the exact time the previous key was released.

The tester wants to know the key of the keypress that had the longest duration. The `ith` keypress had a duration of `releaseTimes[i] - releaseTimes[i - 1]`, and the `0th` keypress had a duration of `releaseTimes[0]`.

Note that the same key could have been pressed multiple times during the test, and these multiple presses of the same key may not have had the same duration.

Return the key of the keypress that had the longest duration. If there are multiple such keypresses, return the lexicographically largest key of the keypresses.


Example 1:
Input: releaseTimes = [9,29,49,50], keysPressed = ""cbcd""
Output: ""c""
Explanation: The keypresses were as follows:
Keypress for 'c' had a duration of 9 (pressed at time 0 and released at time 9).

Keypress for 'b' had a duration of 29 - 9 = 20 (pressed at time 9 right after the release of the previous character and released at time 29).

Keypress for 'c' had a duration of 49 - 29 = 20 (pressed at time 29 right after the release of the previous character and released at time 49).

Keypress for 'd' had a duration of 50 - 49 = 1 (pressed at time 49 right after the release of the previous character and released at time 50).

The longest of these was the keypress for 'b' and the second keypress for 'c', both with duration 20.

'c' is lexicographically larger than 'b', so the answer is 'c'.


Example 2:
Input: releaseTimes = [12,23,36,46,62], keysPressed = ""spuda""
Output: ""a""
Explanation: The keypresses were as follows:
Keypress for 's' had a duration of 12.

Keypress for 'p' had a duration of 23 - 12 = 11.

Keypress for 'u' had a duration of 36 - 23 = 13.

Keypress for 'd' had a duration of 46 - 36 = 10.

Keypress for 'a' had a duration of 62 - 46 = 16.

The longest of these was the keypress for 'a' with duration 16.


Constraints:
`releaseTimes.length == n`
`keysPressed.length == n`
`2 <= n <= 1000`
`1 <= releaseTimes[i] <= 109`
`releaseTimes[i] < releaseTimes[i+1]`
`keysPressed` contains only lowercase English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sequence of numbers is called arithmetic if it consists of at least two elements, and the difference between every two consecutive elements is the same. More formally, a sequence `s` is arithmetic if and only if `s[i+1] - s[i] == s[1] - s[0] `for all valid `i`.

For example, these are arithmetic sequences:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequence is not arithmetic:
1, 1, 2, 5, 7
You are given an array of `n` integers, `nums`, and two arrays of `m` integers each, `l` and `r`, representing the `m` range queries, where the `ith` query is the range `[l[i], r[i]]`. All the arrays are 0-indexed.

Return a list of `boolean` elements `answer`, where `answer[i]` is `true` if the subarray `nums[l[i]], nums[l[i]+1], ... , nums[r[i]]` can be rearranged to form an arithmetic sequence, and `false` otherwise.


Example 1:
Input: nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]`
Output: `[true,false,true]`
Explanation:
In the 0th query, the subarray is [4,6,5]. This can be rearranged as [6,5,4], which is an arithmetic sequence.

In the 1st query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic sequence.

In the 2nd query, the subarray is `[5,9,3,7]. This` can be rearranged as `[3,5,7,9]`, which is an arithmetic sequence.


Example 2:
Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8,7], r = [4,4,9,7,9,10]
Output: [false,true,false,false,true,true]

Constraints:
`n == nums.length`
`m == l.length`
`m == r.length`
`2 <= n <= 500`
`1 <= m <= 500`
`0 <= l[i] < r[i] < n`
`-105 <= nums[i] <= 105`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a hiker preparing for an upcoming hike. You are given `heights`, a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of cell `(row, col)`. You are situated in the top-left cell, `(0, 0)`, and you hope to travel to the bottom-right cell, `(rows-1, columns-1)` (i.e., 0-indexed). You can move up, down, left, or right, and you wish to find a route that requires the minimum effort.

A route's effort is the maximum absolute difference in heights between two consecutive cells of the route.

Return the minimum effort required to travel from the top-left cell to the bottom-right cell.


Example 1:
Input: heights = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The route of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.

This is better than the route of [1,2,2,2,5], where the maximum absolute difference is 3.


Example 2:
Input: heights = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than route [1,3,5,3,5].


Example 3:
Input: heights = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2,1],[1,1,1,2,1]]
Output: 0
Explanation: This route does not require any effort.


Constraints:
`rows == heights.length`
`columns == heights[i].length`
`1 <= rows, columns <= 100`
`1 <= heights[i][j] <= 106`",0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` `matrix`, return a new matrix `answer` where `answer[row][col]` is the rank of `matrix[row][col]`.

The rank is an integer that represents how large an element is compared to other elements. It is calculated using the following rules:
The rank is an integer starting from `1`.

If two elements `p` and `q` are in the same row or column, then:
	
If `p < q` then `rank(p) < rank(q)`
If `p == q` then `rank(p) == rank(q)`
If `p > q` then `rank(p) > rank(q)`
The rank should be as small as possible.

It is guaranteed that `answer` is unique under the given rules.


Example 1:
Input: matrix = [[1,2],[3,4]]
Output: [[1,2],[2,3]]
Explanation:
The rank of matrix[0][0] is 1 because it is the smallest integer in its row and column.

The rank of matrix[0][1] is 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.

The rank of matrix[1][0] is 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.

The rank of matrix[1][1] is 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and both matrix[0][1] and matrix[1][0] are rank 2.


Example 2:
Input: matrix = [[7,7],[7,7]]
Output: [[1,1],[1,1]]

Example 3:
Input: matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]

Example 4:
Input: matrix = [[7,3,6],[1,4,5],[9,8,2]]
Output: [[5,1,4],[1,2,3],[6,3,1]]

Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 500`
`-109 <= matrix[row][col] <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A polynomial linked list is a special type of linked list where every node represents a term in a polynomial expression.

Each node has three attributes:
`coefficient`: an integer representing the number multiplier of the term. The coefficient of the term `9x4` is `9`.

`power`: an integer representing the exponent. The power of the term `9x4` is `4`.

`next`: a pointer to the next node in the list, or `null` if it is the last node of the list.

For example, the polynomial `5x3 + 4x - 7` is represented by the polynomial linked list illustrated below:
The polynomial linked list must be in its standard form: the polynomial must be in strictly descending order by its `power` value. Also, terms with a `coefficient` of `0` are omitted.

Given two polynomial linked list heads, `poly1` and `poly2`, add the polynomials together and return the head of the sum of the polynomials.

`PolyNode` format:
The input/output format is as a list of `n` nodes, where each node is represented as its `[coefficient, power]`. For example, the polynomial `5x3 + 4x - 7` would be represented as: `[[5,3],[4,1],[-7,0]]`.


Example 1:
Input: poly1 = [[1,1]], poly2 = [[1,0]]
Output: [[1,1],[1,0]]
Explanation: poly1 = x. poly2 = 1. The sum is x + 1.


Example 2:
Input: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]
Output: [[5,2],[2,0]]
Explanation: poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Notice that we omit the ""0x"" term.


Example 3:
Input: poly1 = [[1,2]], poly2 = [[-1,2]]
Output: []
Explanation: The sum is 0. We return an empty list.


Constraints:
`0 <= n <= 104`
`-109 <= PolyNode.coefficient <= 109`
`PolyNode.coefficient != 0`
`0 <= PolyNode.power <= 109`
`PolyNode.power > PolyNode.next.power`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums`, sort the array in increasing order based on the frequency of the values. If multiple values have the same frequency, sort them in decreasing order.

Return the sorted array.


Example 1:
Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: '3' has a frequency of 1, '1' has a frequency of 2, and '2' has a frequency of 3.


Example 2:
Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in decreasing order.


Example 3:
Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]

Constraints:
`1 <= nums.length <= 100`
`-100 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` `points` on a 2D plane where `points[i] = [xi, yi]`, Return the widest vertical area between two points such that no points are inside the area.

A vertical area is an area of fixed-width extending infinitely along the y-axis (i.e., infinite height). The widest vertical area is the one with the maximum width.

Note that points on the edge of a vertical area are not considered included in the area.


Example 1:
​
Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1
Explanation: Both the red and the blue area are optimal.


Example 2:
Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3

Constraints:
`n == points.length`
`2 <= n <= 105`
`points[i].length == 2`
`0 <= xi, yi <= 109`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, find the number of ways you can choose a non-empty substring of `s` and replace a single character by a different character such that the resulting substring is a substring of `t`. In other words, find the number of substrings in `s` that differ from some substring in `t` by exactly one character.

For example, the underlined substrings in `""computer""` and `""computation""` only differ by the `'e'`/`'a'`, so this is a valid way.

Return the number of substrings that satisfy the condition above.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""aba"", t = ""baba""
Output: 6
Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
(""aba"", ""baba"")
The underlined portions are the substrings that are chosen from s and t.


​​Example 2:
Input: s = ""ab"", t = ""bb""
Output: 3
Explanation: The following are the pairs of substrings from s and t that differ by 1 character:
(""ab"", ""bb"")
(""ab"", ""bb"")
(""ab"", ""bb"")
​​​​The underlined portions are the substrings that are chosen from s and t.


Example 3:
Input: s = ""a"", t = ""a""
Output: 0

Example 4:
Input: s = ""abe"", t = ""bbc""
Output: 10

Constraints:
`1 <= s.length, t.length <= 100`
`s` and `t` consist of lowercase English letters only.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"You are given a list of strings of the same length `words` and a string `target`.

Your task is to form `target` using the given `words` under the following rules:
`target` should be formed from left to right.

To form the `ith` character (0-indexed) of `target`, you can choose the `kth` character of the `jth` string in `words` if `target[i] = words[j][k]`.

Once you use the `kth` character of the `jth` string of `words`, you can no longer use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index `k` become unusuable for every string.

Repeat the process until you form the string `target`.

Notice that you can use multiple characters from the same string in `words` provided the conditions above are met.

Return the number of ways to form `target` from `words`. Since the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: words = [""acca"",""bbbb"",""caca""], target = ""aba""
Output: 6
Explanation: There are 6 ways to form target.

""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""acca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""caca"")

Example 2:
Input: words = [""abba"",""baab""], target = ""bab""
Output: 4
Explanation: There are 4 ways to form target.

""bab"" -> index 0 (""baab""), index 1 (""baab""), index 2 (""abba"")
""bab"" -> index 0 (""baab""), index 1 (""baab""), index 3 (""baab"")
""bab"" -> index 0 (""baab""), index 2 (""baab""), index 3 (""baab"")
""bab"" -> index 1 (""abba""), index 2 (""baab""), index 3 (""baab"")

Example 3:
Input: words = [""abcd""], target = ""abcd""
Output: 1

Example 4:
Input: words = [""abab"",""baba"",""abba"",""baab""], target = ""abba""
Output: 16

Constraints:
`1 <= words.length <= 1000`
`1 <= words[i].length <= 1000`
All strings in `words` have the same length.

`1 <= target.length <= 1000`
`words[i]` and `target` contain only lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of distinct integers `arr` and an array of integer arrays `pieces`, where the integers in `pieces` are distinct. Your goal is to form `arr` by concatenating the arrays in `pieces` in any order. However, you are not allowed to reorder the integers in each array `pieces[i]`.

Return `true` if it is possible to form the array `arr` from `pieces`. Otherwise, return `false`.


Example 1:
Input: arr = [85], pieces = [[85]]
Output: true

Example 2:
Input: arr = [15,88], pieces = [[88],[15]]
Output: true
Explanation: Concatenate `[15]` then `[88]`

Example 3:
Input: arr = [49,18,16], pieces = [[16,18,49]]
Output: false
Explanation: Even though the numbers match, we cannot reorder pieces[0].


Example 4:
Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
Output: true
Explanation: Concatenate `[91]` then `[4,64]` then `[78]`

Example 5:
Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]
Output: false

Constraints:
`1 <= pieces.length <= arr.length <= 100`
`sum(pieces[i].length) == arr.length`
`1 <= pieces[i].length <= arr.length`
`1 <= arr[i], pieces[i][j] <= 100`
The integers in `arr` are distinct.

The integers in `pieces` are distinct (i.e., If we flatten pieces in a 1D array, all the integers in this array are distinct).",1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the number of strings of length `n` that consist only of vowels (`a`, `e`, `i`, `o`, `u`) and are lexicographically sorted.

A string `s` is lexicographically sorted if for all valid `i`, `s[i]` is the same as or comes before `s[i+1]` in the alphabet.


Example 1:
Input: n = 1
Output: 5
Explanation: The 5 sorted strings that consist of vowels only are `[""a"",""e"",""i"",""o"",""u""].`

Example 2:
Input: n = 2
Output: 15
Explanation: The 15 sorted strings that consist of vowels only are
[""aa"",""ae"",""ai"",""ao"",""au"",""ee"",""ei"",""eo"",""eu"",""ii"",""io"",""iu"",""oo"",""ou"",""uu""].

Note that ""ea"" is not a valid string since 'e' comes after 'a' in the alphabet.


Example 3:
Input: n = 33
Output: 66045

Constraints:
`1 <= n <= 50`",0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `heights` representing the heights of buildings, some `bricks`, and some `ladders`.

You start your journey from building `0` and move to the next building by possibly using bricks or ladders.

While moving from building `i` to building `i+1` (0-indexed),
If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.

If the current building's height is less than the next building's height, you can either use one ladder or `(h[i+1] - h[i])` bricks.

Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.


Example 1:
Input: heights = [4,2,7,6,9,14,12], bricks = 5, ladders = 1
Output: 4
Explanation: Starting at building 0, you can follow these steps:
- Go to building 1 without using ladders nor bricks since 4 >= 2.

- Go to building 2 using 5 bricks. You must use either bricks or ladders because 2 < 7.

- Go to building 3 without using ladders nor bricks since 7 >= 6.

- Go to building 4 using your only ladder. You must use either bricks or ladders because 6 < 9.

It is impossible to go beyond building 4 because you do not have any more bricks or ladders.


Example 2:
Input: heights = [4,12,2,7,3,18,20,3,19], bricks = 10, ladders = 2
Output: 7

Example 3:
Input: heights = [14,3,19,3], bricks = 17, ladders = 0
Output: 3

Constraints:
`1 <= heights.length <= 105`
`1 <= heights[i] <= 106`
`0 <= bricks <= 109`
`0 <= ladders <= heights.length`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Bob is standing at cell `(0, 0)`, and he wants to reach `destination`: `(row, column)`. He can only travel right and down. You are going to help Bob by providing instructions for him to reach `destination`.

The instructions are represented as a string, where each character is either:
`'H'`, meaning move horizontally (go right), or
`'V'`, meaning move vertically (go down).

Multiple instructions will lead Bob to `destination`. For example, if `destination` is `(2, 3)`, both `""HHHVV""` and `""HVHVH""` are valid instructions.

However, Bob is very picky. Bob has a lucky number `k`, and he wants the `kth` lexicographically smallest instructions that will lead him to `destination`. `k` is 1-indexed.

Given an integer array `destination` and an integer `k`, return the `kth` lexicographically smallest instructions that will take Bob to `destination`.


Example 1:
Input: destination = [2,3], k = 1
Output: ""HHHVV""
Explanation: All the instructions that reach (2, 3) in lexicographic order are as follows:
[""HHHVV"", ""HHVHV"", ""HHVVH"", ""HVHHV"", ""HVHVH"", ""HVVHH"", ""VHHHV"", ""VHHVH"", ""VHVHH"", ""VVHHH""].


Example 2:
Input: destination = [2,3], k = 2
Output: ""HHVHV""

Example 3:
Input: destination = [2,3], k = 3
Output: ""HHVVH""

Constraints:
`destination.length == 2`
`1 <= row, column <= 15`
`1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` denotes `a` choose `b`​​​​​.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree, return the lowest common ancestor (LCA) of two given nodes, `p` and `q`. If either node `p` or `q` does not exist in the tree, return `null`. All values of the nodes in the tree are unique.

According to the definition of LCA on Wikipedia: ""The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has both `p` and `q` as descendants (where we allow a node to be a descendant of itself)"". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5. A node can be a descendant of itself according to the definition of LCA.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10
Output: null
Explanation: Node 10 does not exist in the tree, so return null.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
Follow up: Can you find the LCA traversing the tree, without checking nodes existence?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string `s` is called good if there are no two different characters in `s` that have the same frequency.

Given a string `s`, return the minimum number of characters you need to delete to make `s` good.

The frequency of a character in a string is the number of times it appears in the string. For example, in the string `""aab""`, the frequency of `'a'` is `2`, while the frequency of `'b'` is `1`.


Example 1:
Input: s = ""aab""
Output: 0
Explanation: `s` is already good.


Example 2:
Input: s = ""aaabbbcc""
Output: 2
Explanation: You can delete two 'b's resulting in the good string ""aaabcc"".

Another way it to delete one 'b' and one 'c' resulting in the good string ""aaabbc"".


Example 3:
Input: s = ""ceabaacb""
Output: 2
Explanation: You can delete both 'c's resulting in the good string ""eabaab"".

Note that we only care about characters that are still in the string at the end (i.e. frequency of 0 is ignored).


Constraints:
`1 <= s.length <= 105`
`s` contains only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an `inventory` of different colored balls, and there is a customer that wants `orders` balls of any color.

The customer weirdly values the colored balls. Each colored ball's value is the number of balls of that color you currently have in your `inventory`. For example, if you own `6` yellow balls, the customer would pay `6` for the first yellow ball. After the transaction, there are only `5` yellow balls left, so the next yellow ball is then valued at `5` (i.e., the value of the balls decreases as you sell more to the customer).

You are given an integer array, `inventory`, where `inventory[i]` represents the number of balls of the `ith` color that you initially own. You are also given an integer `orders`, which represents the total number of balls that the customer wants. You can sell the balls in any order.

Return the maximum total value that you can attain after selling `orders` colored balls. As the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: inventory = [2,5], orders = 4
Output: 14
Explanation: Sell the 1st color 1 time (2) and the 2nd color 3 times (5 + 4 + 3).

The maximum total value is 2 + 5 + 4 + 3 = 14.


Example 2:
Input: inventory = [3,5], orders = 6
Output: 19
Explanation: Sell the 1st color 2 times (3 + 2) and the 2nd color 4 times (5 + 4 + 3 + 2).

The maximum total value is 3 + 2 + 5 + 4 + 3 + 2 = 19.


Example 3:
Input: inventory = [2,8,4,10,6], orders = 20
Output: 110

Example 4:
Input: inventory = [1000000000], orders = 1000000000
Output: 21
Explanation: Sell the 1st color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21.


Constraints:
`1 <= inventory.length <= 105`
`1 <= inventory[i] <= 109`
`1 <= orders <= min(sum(inventory[i]), 109)`",0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `instructions`, you are asked to create a sorted array from the elements in `instructions`. You start with an empty container `nums`. For each element from left to right in `instructions`, insert it into `nums`. The cost of each insertion is the minimum of the following:
The number of elements currently in `nums` that are strictly less than `instructions[i]`.

The number of elements currently in `nums` that are strictly greater than `instructions[i]`.

For example, if inserting element `3` into `nums = [1,2,3,5]`, the cost of insertion is `min(2, 1)` (elements `1` and `2` are less than `3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.

Return the total cost to insert all elements from `instructions` into `nums`. Since the answer may be large, return it modulo `109 + 7`

Example 1:
Input: instructions = [1,5,6,2]
Output: 1
Explanation: Begin with nums = [].

Insert 1 with cost min(0, 0) = 0, now nums = [1].

Insert 5 with cost min(1, 0) = 0, now nums = [1,5].

Insert 6 with cost min(2, 0) = 0, now nums = [1,5,6].

Insert 2 with cost min(1, 2) = 1, now nums = [1,2,5,6].

The total cost is 0 + 0 + 0 + 1 = 1.


Example 2:
Input: instructions = [1,2,3,6,5,4]
Output: 3
Explanation: Begin with nums = [].

Insert 1 with cost min(0, 0) = 0, now nums = [1].

Insert 2 with cost min(1, 0) = 0, now nums = [1,2].

Insert 3 with cost min(2, 0) = 0, now nums = [1,2,3].

Insert 6 with cost min(3, 0) = 0, now nums = [1,2,3,6].

Insert 5 with cost min(3, 1) = 1, now nums = [1,2,3,5,6].

Insert 4 with cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].

The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.


Example 3:
Input: instructions = [1,3,3,3,2,4,2,1,2]
Output: 4
Explanation: Begin with nums = [].

Insert 1 with cost min(0, 0) = 0, now nums = [1].

Insert 3 with cost min(1, 0) = 0, now nums = [1,3].

Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3].

Insert 3 with cost min(1, 0) = 0, now nums = [1,3,3,3].

Insert 2 with cost min(1, 3) = 1, now nums = [1,2,3,3,3].

Insert 4 with cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].

​​​​​​​Insert 2 with cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].

​​​​​​​Insert 1 with cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].

​​​​​​​Insert 2 with cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].

The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.


Constraints:
`1 <= instructions.length <= 105`
`1 <= instructions[i] <= 105`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two nodes of a binary tree `p` and `q`, return their lowest common ancestor (LCA).

Each node will have a reference to its parent node. The definition for `Node` is below:
class Node {
    public int val;
    public Node left;
    public Node right;
    public Node parent;
}
According to the definition of LCA on Wikipedia: ""The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has both p and q as descendants (where we allow a node to be a descendant of itself).""

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: The LCA of nodes 5 and 1 is 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 since a node can be a descendant of itself according to the LCA definition.


Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

Constraints:
The number of nodes in the tree is in the range `[2, 105]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` exist in the tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` consisting only of characters `'a'` and `'b'`​​​​.

You can delete any number of characters in `s` to make `s` balanced. `s` is balanced if there is no pair of indices `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j]= 'a'`.

Return the minimum number of deletions needed to make `s` balanced.


Example 1:
Input: s = ""aababbab""
Output: 2
Explanation: You can either:
Delete the characters at 0-indexed positions 2 and 6 (""aababbab"" -> ""aaabbb""), or
Delete the characters at 0-indexed positions 3 and 6 (""aababbab"" -> ""aabbbb"").


Example 2:
Input: s = ""bbaaaaabb""
Output: 2
Explanation: The only solution is to delete the first two characters.


Constraints:
`1 <= s.length <= 105`
`s[i]` is `'a'` or `'b'`​​.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of `n` integers, `nums`, where there are at most `50` unique values in the array. You are also given an array of `m` customer order quantities, `quantity`, where `quantity[i]` is the amount of integers the `ith` customer ordered. Determine if it is possible to distribute `nums` such that:
The `ith` customer gets exactly `quantity[i]` integers,
The integers the `ith` customer gets are all equal, and
Every customer is satisfied.

Return `true` if it is possible to distribute `nums` according to the above conditions.


Example 1:
Input: nums = [1,2,3,4], quantity = [2]
Output: false
Explanation: The 0th customer cannot be given two different integers.


Example 2:
Input: nums = [1,2,3,3], quantity = [2]
Output: true
Explanation: The 0th customer is given [3,3]. The integers [1,2] are not used.


Example 3:
Input: nums = [1,1,2,2], quantity = [2,2]
Output: true
Explanation: The 0th customer is given [1,1], and the 1st customer is given [2,2].


Example 4:
Input: nums = [1,1,2,3], quantity = [2,2]
Output: false
Explanation: Although the 0th customer could be given [1,1], the 1st customer cannot be satisfied.


Example 5:
Input: nums = [1,1,1,1,1], quantity = [2,3]
Output: true
Explanation: The 0th customer is given [1,1], and the 1st customer is given [1,1,1].


Constraints:
`n == nums.length`
`1 <= n <= 105`
`1 <= nums[i] <= 1000`
`m == quantity.length`
`1 <= m <= 10`
`1 <= quantity[i] <= 105`
There are at most `50` unique values in `nums`.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a stream of `n` `(idKey, value)` pairs arriving in an arbitrary order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.

Design a stream that returns the values in increasing order of their IDs by returning a chunk (list) of values after each insertion. The concatenation of all the chunks should result in a list of the sorted values.

Implement the `OrderedStream` class:
`OrderedStream(int n)` Constructs the stream to take `n` values.

`String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the largest possible chunk of currently inserted values that appear next in the order.


Example:
Input
[""OrderedStream"", ""insert"", ""insert"", ""insert"", ""insert"", ""insert""]
[[5], [3, ""ccccc""], [1, ""aaaaa""], [2, ""bbbbb""], [5, ""eeeee""], [4, ""ddddd""]]
Output
[null, [], [""aaaaa""], [""bbbbb"", ""ccccc""], [], [""ddddd"", ""eeeee""]]
Explanation
// Note that the values ordered by ID is [""aaaaa"", ""bbbbb"", ""ccccc"", ""ddddd"", ""eeeee""].

OrderedStream os = new OrderedStream(5);
os.insert(3, ""ccccc""); // Inserts (3, ""ccccc""), returns [].

os.insert(1, ""aaaaa""); // Inserts (1, ""aaaaa""), returns [""aaaaa""].

os.insert(2, ""bbbbb""); // Inserts (2, ""bbbbb""), returns [""bbbbb"", ""ccccc""].

os.insert(5, ""eeeee""); // Inserts (5, ""eeeee""), returns [].

os.insert(4, ""ddddd""); // Inserts (4, ""ddddd""), returns [""ddddd"", ""eeeee""].

// Concatentating all the chunks returned:
// [] + [""aaaaa""] + [""bbbbb"", ""ccccc""] + [] + [""ddddd"", ""eeeee""] = [""aaaaa"", ""bbbbb"", ""ccccc"", ""ddddd"", ""eeeee""]
// The resulting order is the same as the order above.


Constraints:
`1 <= n <= 1000`
`1 <= id <= n`
`value.length == 5`
`value` consists only of lowercase letters.

Each call to `insert` will have a unique `id.`
Exactly `n` calls will be made to `insert`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Two strings are considered close if you can attain one from the other using the following operations:
Operation 1: Swap any two existing characters.

	
For example, `abcde -> aecdb`
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.

	
For example, `aacabb -> bbcbaa` (all `a`'s turn into `b`'s, and all `b`'s turn into `a`'s)
You can use the operations on either string as many times as necessary.

Given two strings, `word1` and `word2`, return `true` if `word1` and `word2` are close, and `false` otherwise.


Example 1:
Input: word1 = ""abc"", word2 = ""bca""
Output: true
Explanation: You can attain word2 from word1 in 2 operations.

Apply Operation 1: ""abc"" -> ""acb""
Apply Operation 1: ""acb"" -> ""bca""

Example 2:
Input: word1 = ""a"", word2 = ""aa""
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any number of operations.


Example 3:
Input: word1 = ""cabbba"", word2 = ""abbccc""
Output: true
Explanation: You can attain word2 from word1 in 3 operations.

Apply Operation 1: ""cabbba"" -> ""caabbb""
`Apply Operation 2: ""`caabbb"" -> ""baaccc""
Apply Operation 2: ""baaccc"" -> ""abbccc""

Example 4:
Input: word1 = ""cabbba"", word2 = ""aabbss""
Output: false
Explanation: It is impossible to attain word2 from word1, or vice versa, in any amount of operations.


Constraints:
`1 <= word1.length, word2.length <= 105`
`word1` and `word2` contain only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` and an integer `x`. In one operation, you can either remove the leftmost or the rightmost element from the array `nums` and subtract its value from `x`. Note that this modifies the array for future operations.

Return the minimum number of operations to reduce `x` to exactly `0` if it's possible, otherwise, return `-1`.


Example 1:
Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to remove the last two elements to reduce x to zero.


Example 2:
Input: nums = [5,6,7,8,9], x = 4
Output: -1

Example 3:
Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (5 operations in total) to reduce x to zero.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`
`1 <= x <= 109`",0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given four integers, `m`, `n`, `introvertsCount`, and `extrovertsCount`. You have an `m x n` grid, and there are two types of people: introverts and extroverts. There are `introvertsCount` introverts and `extrovertsCount` extroverts.

You should decide how many people you want to live in the grid and assign each of them one grid cell. Note that you do not have to have all the people living in the grid.

The happiness of each person is calculated as follows:
Introverts start with `120` happiness and lose `30` happiness for each neighbor (introvert or extrovert).

Extroverts start with `40` happiness and gain `20` happiness for each neighbor (introvert or extrovert).

Neighbors live in the directly adjacent cells north, east, south, and west of a person's cell.

The grid happiness is the sum of each person's happiness. Return the maximum possible grid happiness.


Example 1:
Input: m = 2, n = 3, introvertsCount = 1, extrovertsCount = 2
Output: 240
Explanation: Assume the grid is 1-indexed with coordinates (row, column).

We can put the introvert in cell (1,1) and put the extroverts in cells (1,3) and (2,3).

- Introvert at (1,1) happiness: 120 (starting happiness) - (0 * 30) (0 neighbors) = 120
- Extrovert at (1,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
- Extrovert at (2,3) happiness: 40 (starting happiness) + (1 * 20) (1 neighbor) = 60
The grid happiness is 120 + 60 + 60 = 240.

The above figure shows the grid in this example with each person's happiness. The introvert stays in the light green cell while the extroverts live on the light purple cells.


Example 2:
Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1
Output: 260
Explanation: Place the two introverts in (1,1) and (3,1) and the extrovert at (2,1).

- Introvert at (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
- Extrovert at (2,1) happiness: 40 (starting happiness) + (2 * 20) (2 neighbors) = 80
- Introvert at (3,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
The grid happiness is 90 + 80 + 90 = 260.


Example 3:
Input: m = 2, n = 2, introvertsCount = 4, extrovertsCount = 0
Output: 240

Constraints:
`1 <= m, n <= 5`
`0 <= introvertsCount, extrovertsCount <= min(m * n, 6)`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a binary tree with a small defect. There is exactly one invalid node where its right child incorrectly points to another node at the same depth but to the invalid node's right.

Given the root of the binary tree with this defect, `root`, return the root of the binary tree after removing this invalid node and every node underneath it (minus the node it incorrectly points to).

Custom testing:
The test input is read as 3 lines:
`TreeNode root`
`int fromNode` (not available to `correctBinaryTree`)
`int toNode` (not available to `correctBinaryTree`)
After the binary tree rooted at `root` is parsed, the `TreeNode` with value of `fromNode` will have its right child pointer pointing to the `TreeNode` with a value of `toNode`. Then, `root` is passed to `correctBinaryTree`.


Example 1:
Input: root = [1,2,3], fromNode = 2, toNode = 3
Output: [1,null,3]
Explanation: The node with value 2 is invalid, so remove it.


Example 2:
Input: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4
Output: [8,3,1,null,null,9,4,null,null,5,6]
Explanation: The node with value 7 is invalid, so remove it and the node underneath it, node 2.


Constraints:
The number of nodes in the tree is in the range `[3, 104]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`fromNode != toNode`
`fromNode` and `toNode` will exist in the tree and will be on the same depth.

`toNode` is to the right of `fromNode`.

`fromNode.right` is `null` in the initial tree from the test data.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two string arrays `word1` and `word2`, return `true` if the two arrays represent the same string, and `false` otherwise.

A string is represented by an array if the array elements concatenated in order forms the string.


Example 1:
Input: word1 = [""ab"", ""c""], word2 = [""a"", ""bc""]
Output: true
Explanation:
word1 represents string ""ab"" + ""c"" -> ""abc""
word2 represents string ""a"" + ""bc"" -> ""abc""
The strings are the same, so return true.


Example 2:
Input: word1 = [""a"", ""cb""], word2 = [""ab"", ""c""]
Output: false

Example 3:
Input: word1  = [""abc"", ""d"", ""defg""], word2 = [""abcddefg""]
Output: true

Constraints:
`1 <= word1.length, word2.length <= 103`
`1 <= word1[i].length, word2[i].length <= 103`
`1 <= sum(word1[i].length), sum(word2[i].length) <= 103`
`word1[i]` and `word2[i]` consist of lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The numeric value of a lowercase character is defined as its position `(1-indexed)` in the alphabet, so the numeric value of `a` is `1`, the numeric value of `b` is `2`, the numeric value of `c` is `3`, and so on.

The numeric value of a string consisting of lowercase characters is defined as the sum of its characters' numeric values. For example, the numeric value of the string `""abe""` is equal to `1 + 2 + 5 = 8`.

You are given two integers `n` and `k`. Return the lexicographically smallest string with length equal to `n` and numeric value equal to `k`.

Note that a string `x` is lexicographically smaller than string `y` if `x` comes before `y` in dictionary order, that is, either `x` is a prefix of `y`, or if `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes before `y[i]` in alphabetic order.


Example 1:
Input: n = 3, k = 27
Output: ""aay""
Explanation: The numeric value of the string is 1 + 1 + 25 = 27, and it is the smallest string with such a value and length equal to 3.


Example 2:
Input: n = 5, k = 73
Output: ""aaszz""

Constraints:
`1 <= n <= 105`
`n <= k <= 26 * n`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.

For example, if `nums = [6,1,7,4,1]`:
Choosing to remove index `1` results in `nums = [6,7,4,1]`.

Choosing to remove index `2` results in `nums = [6,1,4,1]`.

Choosing to remove index `4` results in `nums = [6,1,7,4]`.

An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.

Return the number of indices that you could choose such that after the removal, `nums` is fair. 

Example 1:
Input: nums = [2,1,6,4]
Output: 1
Explanation:
Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.

Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.

Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.

Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.

There is 1 index that you can remove to make nums fair.


Example 2:
Input: nums = [1,1,1]
Output: 3
Explanation: You can remove any index and the remaining array is fair.


Example 3:
Input: nums = [1,2,3]
Output: 0
Explanation: You cannot make a fair array after removing any index.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `tasks` where `tasks[i] = [actuali, minimumi]`:
`actuali` is the actual amount of energy you spend to finish the `ith` task.

`minimumi` is the minimum amount of energy you require to begin the `ith` task.

For example, if the task is `[10, 12]` and your current energy is `11`, you cannot start this task. However, if your current energy is `13`, you can complete this task, and your energy will be `3` after finishing it.

You can finish the tasks in any order you like.

Return the minimum initial amount of energy you will need to finish all the tasks.


Example 1:
Input: tasks = [[1,2],[2,4],[4,8]]
Output: 8
Explanation:
Starting with 8 energy, we finish the tasks in the following order:
    - 3rd task. Now energy = 8 - 4 = 4.

    - 2nd task. Now energy = 4 - 2 = 2.

    - 1st task. Now energy = 2 - 1 = 1.

Notice that even though we have leftover energy, starting with 7 energy does not work because we cannot do the 3rd task.


Example 2:
Input: tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]
Output: 32
Explanation:
Starting with 32 energy, we finish the tasks in the following order:
    - 1st task. Now energy = 32 - 1 = 31.

    - 2nd task. Now energy = 31 - 2 = 29.

    - 3rd task. Now energy = 29 - 10 = 19.

    - 4th task. Now energy = 19 - 10 = 9.

    - 5th task. Now energy = 9 - 8 = 1.


Example 3:
Input: tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
Output: 27
Explanation:
Starting with 27 energy, we finish the tasks in the following order:
    - 5th task. Now energy = 27 - 5 = 22.

    - 2nd task. Now energy = 22 - 2 = 20.

    - 3rd task. Now energy = 20 - 3 = 17.

    - 1st task. Now energy = 17 - 1 = 16.

    - 4th task. Now energy = 16 - 4 = 12.

    - 6th task. Now energy = 12 - 6 = 6.


Constraints:
`1 <= tasks.length <= 105`
`1 <= actual​i <= minimumi <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree and a `leaf` node, reroot the tree so that the `leaf` is the new root.

You can reroot the tree with the following steps for each node `cur` on the path starting from the `leaf` up to the `root`​​​ excluding the root:
If `cur` has a left child, then that child becomes `cur`'s right child.

`cur`'s original parent becomes `cur`'s left child. Note that in this process the original parent's pointer to `cur` becomes `null`, making it have at most one child.

Return the new root of the rerooted tree.

Note: Ensure that your solution sets the `Node.parent` pointers correctly after rerooting or you will receive ""Wrong Answer"".


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7
Output: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0
Output: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]

Constraints:
The number of nodes in the tree is in the range `[2, 100]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`leaf` exist in the tree.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For a string `sequence`, a string `word` is `k`-repeating if `word` concatenated `k` times is a substring of `sequence`. The `word`'s maximum `k`-repeating value is the highest value `k` where `word` is `k`-repeating in `sequence`. If `word` is not a substring of `sequence`, `word`'s maximum `k`-repeating value is `0`.

Given strings `sequence` and `word`, return the maximum `k`-repeating value of `word` in `sequence`.


Example 1:
Input: sequence = ""ababc"", word = ""ab""
Output: 2
Explanation: ""abab"" is a substring in ""ababc"".


Example 2:
Input: sequence = ""ababc"", word = ""ba""
Output: 1
Explanation: ""ba"" is a substring in ""ababc"". ""baba"" is not a substring in ""ababc"".


Example 3:
Input: sequence = ""ababc"", word = ""ac""
Output: 0
Explanation: ""ac"" is not a substring in ""ababc"". 

Constraints:
`1 <= sequence.length <= 100`
`1 <= word.length <= 100`
`sequence` and `word` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two linked lists: `list1` and `list2` of sizes `n` and `m` respectively.

Remove `list1`'s nodes from the `ath` node to the `bth` node, and put `list2` in their place.

The blue edges and nodes in the following figure incidate the result:
Build the result list and return its head.


Example 1:
Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
Output: [0,1,2,1000000,1000001,1000002,5]
Explanation: We remove the nodes 3 and 4 and put the entire list2 in their place. The blue edges and nodes in the above figure indicate the result.


Example 2:
Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]
Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]
Explanation: The blue edges and nodes in the above figure indicate the result.


Constraints:
`3 <= list1.length <= 104`
`1 <= a <= b < list1.length - 1`
`1 <= list2.length <= 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a queue that supports `push` and `pop` operations in the front, middle, and back.

Implement the `FrontMiddleBack` class:
`FrontMiddleBack()` Initializes the queue.

`void pushFront(int val)` Adds `val` to the front of the queue.

`void pushMiddle(int val)` Adds `val` to the middle of the queue.

`void pushBack(int val)` Adds `val` to the back of the queue.

`int popFront()` Removes the front element of the queue and returns it. If the queue is empty, return `-1`.

`int popMiddle()` Removes the middle element of the queue and returns it. If the queue is empty, return `-1`.

`int popBack()` Removes the back element of the queue and returns it. If the queue is empty, return `-1`.

Notice that when there are two middle position choices, the operation is performed on the frontmost middle position choice. For example:
Pushing `6` into the middle of `[1, 2, 3, 4, 5]` results in `[1, 2, 6, 3, 4, 5]`.

Popping the middle from `[1, 2, 3, 4, 5, 6]` returns `3` and results in `[1, 2, 4, 5, 6]`.


Example 1:
Input:
[""FrontMiddleBackQueue"", ""pushFront"", ""pushBack"", ""pushMiddle"", ""pushMiddle"", ""popFront"", ""popMiddle"", ""popMiddle"", ""popBack"", ""popFront""]
[[], [1], [2], [3], [4], [], [], [], [], []]
Output:
[null, null, null, null, null, 1, 3, 4, 2, -1]
Explanation:
FrontMiddleBackQueue q = new FrontMiddleBackQueue();
q.pushFront(1);   // [1]
q.pushBack(2);    // [1, 2]
q.pushMiddle(3);  // [1, 3, 2]
q.pushMiddle(4);  // [1, 4, 3, 2]
q.popFront();     // return 1 -> [4, 3, 2]
q.popMiddle();    // return 3 -> [4, 2]
q.popMiddle();    // return 4 -> [2]
q.popBack();      // return 2 -> []
q.popFront();     // return -1 -> [] (The queue is empty)

Constraints:
`1 <= val <= 109`
At most `1000` calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle`, and `popBack`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"You may recall that an array `arr` is a mountain array if and only if:
`arr.length >= 3`
There exists some index `i` (0-indexed) with `0 < i < arr.length - 1` such that:
	
`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`
`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`
Given an integer array `nums`​​​, return the minimum number of elements to remove to make `nums​​​` a mountain array.


Example 1:
Input: nums = [1,3,1]
Output: 0
Explanation: The array itself is a mountain array so we do not need to remove any elements.


Example 2:
Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to remove the elements at indices 0, 1, and 5, making the array nums = [1,5,6,3,1].


Example 3:
Input: nums = [4,3,2,1,1,2,3,1]
Output: 4

Example 4:
Input: nums = [1,2,3,4,4,3,2,1]
Output: 1

Constraints:
`3 <= nums.length <= 1000`
`1 <= nums[i] <= 109`
It is guaranteed that you can make a mountain array out of `nums`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i​​​​​​​​​​​th​​​​` customer has in the `j​​​​​​​​​​​th`​​​​ bank. Return the wealth that the richest customer has.

A customer's wealth is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum wealth.


Example 1:
Input: accounts = [[1,2,3],[3,2,1]]
Output: 6
Explanation:
`1st customer has wealth = 1 + 2 + 3 = 6
``2nd customer has wealth = 3 + 2 + 1 = 6
`Both customers are considered the richest with a wealth of 6 each, so return 6.


Example 2:
Input: accounts = [[1,5],[7,3],[3,5]]
Output: 10
Explanation: 
1st customer has wealth = 6
2nd customer has wealth = 10 
3rd customer has wealth = 8
The 2nd customer is the richest with a wealth of 10.


Example 3:
Input: accounts = [[2,8,7],[7,1,3],[1,9,5]]
Output: 17

Constraints:
`m == accounts.length`
`n == accounts[i].length`
`1 <= m, n <= 50`
`1 <= accounts[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and a positive integer `k`, return the most competitive subsequence of `nums` of size `k`.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence `a` is more competitive than a subsequence `b` (of the same length) if in the first position where `a` and `b` differ, subsequence `a` has a number less than the corresponding number in `b`. For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is at the final number, and `4` is less than `5`.


Example 1:
Input: nums = [3,5,2,6], k = 2
Output: [2,6]
Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.


Example 2:
Input: nums = [2,4,3,3,5,4,9,6], k = 4
Output: [2,3,3,4]

Constraints:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`
`1 <= k <= nums.length`",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` of even length `n` and an integer `limit`. In one move, you can replace any integer from `nums` with another integer between `1` and `limit`, inclusive.

The array `nums` is complementary if for all indices `i` (0-indexed), `nums[i] + nums[n - 1 - i]` equals the same number. For example, the array `[1,2,3,4]` is complementary because for all indices `i`, `nums[i] + nums[n - 1 - i] = 5`.

Return the minimum number of moves required to make `nums` complementary.


Example 1:
Input: nums = [1,2,4,3], limit = 4
Output: 1
Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).

nums[0] + nums[3] = 1 + 3 = 4.

nums[1] + nums[2] = 2 + 2 = 4.

nums[2] + nums[1] = 2 + 2 = 4.

nums[3] + nums[0] = 3 + 1 = 4.

Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.


Example 2:
Input: nums = [1,2,2,1], limit = 2
Output: 2
Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.


Example 3:
Input: nums = [1,2,1,2], limit = 2
Output: 0
Explanation: nums is already complementary.


Constraints:
`n == nums.length`
`2 <= n <= 105`
`1 <= nums[i] <= limit <= 105`
`n` is even.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `nums` of `n` positive integers.

You can perform two types of operations on any element of the array any number of times:
If the element is even, divide it by `2`.

	
For example, if the array is `[1,2,3,4]`, then you can do this operation on the last element, and the array will be `[1,2,3,2].`
If the element is odd, multiply it by `2`.

	
For example, if the array is `[1,2,3,4]`, then you can do this operation on the first element, and the array will be `[2,2,3,4].`
The deviation of the array is the maximum difference between any two elements in the array.

Return the minimum deviation the array can have after performing some number of operations.


Example 1:
Input: nums = [1,2,3,4]
Output: 1
Explanation: You can transform the array to [1,2,3,2], then to [2,2,3,2], then the deviation will be 3 - 2 = 1.


Example 2:
Input: nums = [4,1,5,20,3]
Output: 3
Explanation: You can transform the array after two operations to [4,2,5,5,3], then the deviation will be 5 - 2 = 3.


Example 3:
Input: nums = [2,10,8]
Output: 3

Constraints:
`n == nums.length`
`2 <= n <= 105`
`1 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the `root` of a binary tree and an array of `TreeNode` objects `nodes`, return the lowest common ancestor (LCA) of all the nodes in `nodes`. All the nodes will exist in the tree, and all values of the tree's nodes are unique.

Extending the definition of LCA on Wikipedia: ""The lowest common ancestor of `n` nodes `p1`, `p2`, ..., `pn` in a binary tree `T` is the lowest node that has every `pi` as a descendant (where we allow a node to be a descendant of itself) for every valid `i`"". A descendant of a node `x` is a node `y` that is on the path from node `x` to some leaf node.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [4,7]
Output: 2
Explanation: The lowest common ancestor of nodes 4 and 7 is node 2.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [1]
Output: 1
Explanation: The lowest common ancestor of a single node is the node itself.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [7,6,2,4]
Output: 5
Explanation: The lowest common ancestor of the nodes 7, 6, 2, and 4 is node 5.


Example 4:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], nodes = [0,1,2,3,4,5,6,7,8]
Output: 3
Explanation: The lowest common ancestor of all the nodes is the root node.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

All `nodes[i]` will exist in the tree.

All `nodes[i]` are distinct.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` and an integer `k`.

In one operation, you can pick two numbers from the array whose sum equals `k` and remove them from the array.

Return the maximum number of operations you can perform on the array.


Example 1:
Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Starting with nums = [1,2,3,4]:
- Remove numbers 1 and 4, then nums = [2,3]
- Remove numbers 2 and 3, then nums = []
There are no more pairs that sum up to 5, hence a total of 2 operations.


Example 2:
Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- Remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum up to 6, hence a total of 1 operation.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`1 <= k <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return the decimal value of the binary string formed by concatenating the binary representations of `1` to `n` in order, modulo `109 + 7`.


Example 1:
Input: n = 1
Output: 1
Explanation: ""1"" in binary corresponds to the decimal value 1. 

Example 2:
Input: n = 3
Output: 27
Explanation: In binary, 1, 2, and 3 corresponds to ""1"", ""10"", and ""11"".

After concatenating them, we have ""11011"", which corresponds to the decimal value 27.


Example 3:
Input: n = 12
Output: 505379714
Explanation: The concatenation results in ""1101110010111011110001001101010111100"".

The decimal value of that is 118505380540.

After modulo 109 + 7, the result is 505379714.


Constraints:
`1 <= n <= 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`​​​ and an integer `k`. You are asked to distribute this array into `k` subsets of equal size such that there are no two equal elements in the same subset.

A subset's incompatibility is the difference between the maximum and minimum elements in that array.

Return the minimum possible sum of incompatibilities of the `k` subsets after distributing the array optimally, or return `-1` if it is not possible.

A subset is a group integers that appear in the array with no particular order.


Example 1:
Input: nums = [1,2,1,4], k = 2
Output: 4
Explanation: The optimal distribution of subsets is [1,2] and [1,4].

The incompatibility is (2-1) + (4-1) = 4.

Note that [1,1] and [2,4] would result in a smaller sum, but the first subset contains 2 equal elements.


Example 2:
Input: nums = [6,3,8,1,3,1,2,2], k = 4
Output: 6
Explanation: The optimal distribution of subsets is [1,2], [2,3], [6,8], and [1,3].

The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.


Example 3:
Input: nums = [5,3,3,6,3,3], k = 3
Output: -1
Explanation: It is impossible to distribute nums into 3 subsets where no two elements are equal in the same subset.


Constraints:
`1 <= k <= nums.length <= 16`
`nums.length` is divisible by `k`
`1 <= nums[i] <= nums.length`",0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A subsequence of a string `s` is considered a good palindromic subsequence if:
It is a subsequence of `s`.

It is a palindrome (has the same value if reversed).

It has an even length.

No two consecutive characters are equal, except the two middle ones.

For example, if `s = ""abcabcabb""`, then `""abba""` is considered a good palindromic subsequence, while `""bcb""` (not even length) and `""bbbb""` (has equal consecutive characters) are not.

Given a string `s`, return the length of the longest good palindromic subsequence in `s`.


Example 1:
Input: s = ""bbabab""
Output: 4
Explanation: The longest good palindromic subsequence of s is ""baab"".


Example 2:
Input: s = ""dcbccacdb""
Output: 4
Explanation: The longest good palindromic subsequence of s is ""dccd"".


Constraints:
`1 <= s.length <= 250`
`s` consists of lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `allowed` consisting of distinct characters and an array of strings `words`. A string is consistent if all characters in the string appear in the string `allowed`.

Return the number of consistent strings in the array `words`.


Example 1:
Input: allowed = ""ab"", words = [""ad"",""bd"",""aaab"",""baa"",""badab""]
Output: 2
Explanation: Strings ""aaab"" and ""baa"" are consistent since they only contain characters 'a' and 'b'.


Example 2:
Input: allowed = ""abc"", words = [""a"",""b"",""c"",""ab"",""ac"",""bc"",""abc""]
Output: 7
Explanation: All strings are consistent.


Example 3:
Input: allowed = ""cad"", words = [""cc"",""acd"",""b"",""ba"",""bac"",""bad"",""ac"",""d""]
Output: 4
Explanation: Strings ""cc"", ""acd"", ""ac"", and ""d"" are consistent.


Constraints:
`1 <= words.length <= 104`
`1 <= allowed.length <= 26`
`1 <= words[i].length <= 10`
The characters in `allowed` are distinct.

`words[i]` and `allowed` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing a game, with Alice starting first.

There are `n` stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.

You are given two integer arrays of length `n`, `aliceValues` and `bobValues`. Each `aliceValues[i]` and `bobValues[i]` represents how Alice and Bob, respectively, value the `ith` stone.

The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.

Determine the result of the game, and:
If Alice wins, return `1`.

If Bob wins, return `-1`.

If the game results in a draw, return `0`.


Example 1:
Input: aliceValues = [1,3], bobValues = [2,1]
Output: 1
Explanation:
If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.

Bob can only choose stone 0, and will only receive 2 points.

Alice wins.


Example 2:
Input: aliceValues = [1,2], bobValues = [3,1]
Output: 0
Explanation:
If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.

Draw.


Example 3:
Input: aliceValues = [2,4,3], bobValues = [1,6,7]
Output: -1
Explanation:
Regardless of how Alice plays, Bob will be able to have more points than Alice.

For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.

Bob wins.


Constraints:
`n == aliceValues.length == bobValues.length`
`1 <= n <= 105`
`1 <= aliceValues[i], bobValues[i] <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have the task of delivering some boxes from storage to their ports using only one ship. However, this ship has a limit on the number of boxes and the total weight that it can carry.

You are given an array `boxes`, where `boxes[i] = [ports​​i​, weighti]`, and three integers `portsCount`, `maxBoxes`, and `maxWeight`.

`ports​​i` is the port where you need to deliver the `ith` box and `weightsi` is the weight of the `ith` box.

`portsCount` is the number of ports.

`maxBoxes` and `maxWeight` are the respective box and weight limits of the ship.

The boxes need to be delivered in the order they are given. The ship will follow these steps:
The ship will take some number of boxes from the `boxes` queue, not violating the `maxBoxes` and `maxWeight` constraints.

For each loaded box in order, the ship will make a trip to the port the box needs to be delivered to and deliver it. If the ship is already at the correct port, no trip is needed, and the box can immediately be delivered.

The ship then makes a return trip to storage to take more boxes from the queue.

The ship must end at storage after all the boxes have been delivered.

Return the minimum number of trips the ship needs to make to deliver all boxes to their respective ports.


Example 1:
Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3
Output: 4
Explanation: The optimal strategy is as follows: 
- The ship takes all the boxes in the queue, goes to port 1, then port 2, then port 1 again, then returns to storage. 4 trips.

So the total number of trips is 4.

Note that the first and third boxes cannot be delivered together because the boxes need to be delivered in order (i.e. the second box needs to be delivered at port 2 before the third box).


Example 2:
Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6
Output: 6
Explanation: The optimal strategy is as follows: 
- The ship takes the first box, goes to port 1, then returns to storage. 2 trips.

- The ship takes the second, third and fourth boxes, goes to port 3, then returns to storage. 2 trips.

- The ship takes the fifth box, goes to port 3, then returns to storage. 2 trips.

So the total number of trips is 2 + 2 + 2 = 6.


Example 3:
Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, maxWeight = 7
Output: 6
Explanation: The optimal strategy is as follows:
- The ship takes the first and second boxes, goes to port 1, then returns to storage. 2 trips.

- The ship takes the third and fourth boxes, goes to port 2, then returns to storage. 2 trips.

- The ship takes the fifth and sixth boxes, goes to port 3, then returns to storage. 2 trips.

So the total number of trips is 2 + 2 + 2 = 6.


Example 4:
Input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1,3],[5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7
Output: 14
Explanation: The optimal strategy is as follows:
- The ship takes the first box, goes to port 2, then storage. 2 trips.

- The ship takes the second box, goes to port 2, then storage. 2 trips.

- The ship takes the third and fourth boxes, goes to port 3, then storage. 2 trips.

- The ship takes the fifth box, goes to port 3, then storage. 2 trips.

- The ship takes the sixth and seventh boxes, goes to port 3, then port 4, then storage. 3 trips. 
- The ship takes the eighth and ninth boxes, goes to port 1, then port 5, then storage. 3 trips.

So the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.


Constraints:
`1 <= boxes.length <= 105`
`1 <= portsCount, maxBoxes, maxWeight <= 105`
`1 <= ports​​i <= portsCount`
`1 <= weightsi <= maxWeight`",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"A decimal number is called deci-binary if each of its digits is either `0` or `1` without any leading zeros. For example, `101` and `1100` are deci-binary, while `112` and `3001` are not.

Given a string `n` that represents a positive decimal integer, return the minimum number of positive deci-binary numbers needed so that they sum up to `n`.


Example 1:
Input: n = ""32""
Output: 3
Explanation: 10 + 11 + 11 = 32

Example 2:
Input: n = ""82734""
Output: 8

Example 3:
Input: n = ""27346209830709182346""
Output: 9

Constraints:
`1 <= n.length <= 105`
`n` consists of only digits.

`n` does not contain any leading zeros and represents a positive integer.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing a game, with Alice starting first.

There are `n` stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.

Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.

Given an array of integers `stones` where `stones[i]` represents the value of the `ith` stone from the left, return the difference in Alice and Bob's score if they both play optimally.


Example 1:
Input: stones = [5,3,1,4,2]
Output: 6
Explanation: 
- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].

- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].

- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].

- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].

- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].

The score difference is 18 - 12 = 6.


Example 2:
Input: stones = [7,90,5,1,100,10,10,2]
Output: 122

Constraints:
`n == stones.length`
`2 <= n <= 1000`
`1 <= stones[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` `cuboids` where the dimensions of the `ith` cuboid is `cuboids[i] = [widthi, lengthi, heighti]` (0-indexed). Choose a subset of `cuboids` and place them on each other.

You can place cuboid `i` on cuboid `j` if `widthi <= widthj` and `lengthi <= lengthj` and `heighti <= heightj`. You can rearrange any cuboid's dimensions by rotating it to put it on another cuboid.

Return the maximum height of the stacked `cuboids`.


Example 1:
Input: cuboids = [[50,45,20],[95,37,53],[45,23,12]]
Output: 190
Explanation:
Cuboid 1 is placed on the bottom with the 53x37 side facing down with height 95.

Cuboid 0 is placed next with the 45x20 side facing down with height 50.

Cuboid 2 is placed next with the 23x12 side facing down with height 45.

The total height is 95 + 50 + 45 = 190.


Example 2:
Input: cuboids = [[38,25,45],[76,35,3]]
Output: 76
Explanation:
You can't place any of the cuboids on the other.

We choose cuboid 1 and rotate it so that the 35x3 side is facing down and its height is 76.


Example 3:
Input: cuboids = [[7,11,17],[7,17,11],[11,7,17],[11,17,7],[17,7,11],[17,11,7]]
Output: 102
Explanation:
After rearranging the cuboids, you can see that all cuboids have the same dimension.

You can place the 11x7 side down on all cuboids so their heights are 17.

The maximum height of stacked cuboids is 6 * 17 = 102.


Constraints:
`n == cuboids.length`
`1 <= n <= 100`
`1 <= widthi, lengthi, heighti <= 100`",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` unique candies (labeled `1` through `n`) and `k` bags. You are asked to distribute all the candies into the bags such that every bag has at least one candy.

There can be multiple ways to distribute the candies. Two ways are considered different if the candies in one bag in the first way are not all in the same bag in the second way. The order of the bags and the order of the candies within each bag do not matter.

For example, `(1), (2,3)` and `(2), (1,3)` are considered different because candies `2` and `3` in the bag `(2,3)` in the first way are not in the same bag in the second way (they are split between the bags `(2)` and `(1,3)`). However, `(1), (2,3)` and `(3,2), (1)` are considered the same because the candies in each bag are all in the same bags in both ways.

Given two integers, `n` and `k`, return the number of different ways to distribute the candies. As the answer may be too large, return it modulo `109 + 7`.


Example 1:
Input: n = 3, k = 2
Output: 3
Explanation: You can distribute 3 candies into 2 bags in 3 ways:
(1), (2,3)
(1,2), (3)
(1,3), (2)

Example 2:
Input: n = 4, k = 2
Output: 7
Explanation: You can distribute 4 candies into 2 bags in 7 ways:
(1), (2,3,4)
(1,2), (3,4)
(1,3), (2,4)
(1,4), (2,3)
(1,2,3), (4)
(1,2,4), (3)
(1,3,4), (2)

Example 3:
Input: n = 20, k = 5
Output: 206085257
Explanation: You can distribute 20 candies into 5 bags in 1881780996 ways. 1881780996 modulo 109 + 7 = 206085257.


Constraints:
`1 <= k <= n <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.

You would like to reformat the phone number in a certain manner. Firstly, remove all spaces and dashes. Then, group the digits from left to right into blocks of length 3 until there are 4 or fewer digits. The final digits are then grouped as follows:
2 digits: A single block of length 2.

3 digits: A single block of length 3.

4 digits: Two blocks of length 2 each.

The blocks are then joined by dashes. Notice that the reformatting process should never produce any blocks of length 1 and produce at most two blocks of length 2.

Return the phone number after formatting.


Example 1:
Input: number = ""1-23-45 6""
Output: ""123-456""
Explanation: The digits are ""123456"".

Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is ""123"".

Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is ""456"".

Joining the blocks gives ""123-456"".


Example 2:
Input: number = ""123 4-567""
Output: ""123-45-67""
Explanation: The digits are ""1234567"".

Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is ""123"".

Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are ""45"" and ""67"".

Joining the blocks gives ""123-45-67"".


Example 3:
Input: number = ""123 4-5678""
Output: ""123-456-78""
Explanation: The digits are ""12345678"".

Step 1: The 1st block is ""123"".

Step 2: The 2nd block is ""456"".

Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is ""78"".

Joining the blocks gives ""123-456-78"".


Example 4:
Input: number = ""12""
Output: ""12""

Example 5:
Input: number = ""--17-5 229 35-39475 ""
Output: ""175-229-353-94-75""

Constraints:
`2 <= number.length <= 100`
`number` consists of digits and the characters `'-'` and `' '`.

There are at least two digits in `number`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of positive integers `nums` and want to erase a subarray containing unique elements. The score you get by erasing the subarray is equal to the sum of its elements.

Return the maximum score you can get by erasing exactly one subarray.

An array `b` is called to be a subarray of `a` if it forms a contiguous subsequence of `a`, that is, if it is equal to `a[l],a[l+1],...,a[r]` for some `(l,r)`.


Example 1:
Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].


Example 2:
Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a 0-indexed integer array `nums` and an integer `k`.

You are initially standing at index `0`. In one move, you can jump at most `k` steps forward without going outside the boundaries of the array. That is, you can jump from index `i` to any index in the range `[i + 1, min(n - 1, i + k)]` inclusive.

You want to reach the last index of the array (index `n - 1`). Your score is the sum of all `nums[j]` for each index `j` you visited in the array.

Return the maximum score you can get.


Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps forming the subsequence [1,-1,4,3] (underlined above). The sum is 7.


Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps forming the subsequence [10,4,3] (underlined above). The sum is 17.


Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
Output: 0

Constraints:
 `1 <= nums.length, k <= 105`
`-104 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be multiple edges between two nodes.

Given an array `queries`, where `queries[j] = [pj, qj, limitj]`, your task is to determine for each `queries[j]` whether there is a path between `pj` and `qj` such that each edge on the path has a distance strictly less than `limitj` .

Return a boolean array `answer`, where `answer.length == queries.length` and the `jth` value of `answer` is `true` if there is a path for `queries[j]` is `true`, and `false` otherwise.


Example 1:
Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1,2],[0,2,5]]
Output: [false,true]
Explanation: The above figure shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.

For the first query, between 0 and 1 there is no path where each distance is less than 2, thus we return false for this query.

For the second query, there is a path (0 -> 1 -> 2) of two edges with distances less than 5, thus we return true for this query.


Example 2:
Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4,14],[1,4,13]]
Output: [true,false]
Exaplanation: The above figure shows the given graph.


Constraints:
`2 <= n <= 105`
`1 <= edgeList.length, queries.length <= 105`
`edgeList[i].length == 3`
`queries[j].length == 3`
`0 <= ui, vi, pj, qj <= n - 1`
`ui != vi`
`pj != qj`
`1 <= disi, limitj <= 109`
There may be multiple edges between two nodes.",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the number of distinct substrings of `s`.

A substring of a string is obtained by deleting any number of characters (possibly zero) from the front of the string and any number (possibly zero) from the back of the string.


Example 1:
Input: s = ""aabbaba""
Output: 21
Explanation: The set of distinct strings is [""a"",""b"",""aa"",""bb"",""ab"",""ba"",""aab"",""abb"",""bab"",""bba"",""aba"",""aabb"",""abba"",""bbab"",""baba"",""aabba"",""abbab"",""bbaba"",""aabbab"",""abbaba"",""aabbaba""]

Example 2:
Input: s = ""abcdefg""
Output: 28

Constraints:
`1 <= s.length <= 500`
`s` consists of lowercase English letters.

Follow up: Can you solve this problem in `O(n)` time complexity?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
"The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a stack. At each step:
If the student at the front of the queue prefers the sandwich on the top of the stack, they will take it and leave the queue.

Otherwise, they will leave it and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i​​​​​​th` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j​​​​​​th` student in the initial queue (`j = 0` is the front of the queue). Return the number of students that are unable to eat.


Example 1:
Input: students = [1,1,0,0], sandwiches = [0,1,0,1]
Output: 0 
Explanation:
- Front student leaves the top sandwich and returns to the end of the line making students = [1,0,0,1].

- Front student leaves the top sandwich and returns to the end of the line making students = [0,0,1,1].

- Front student takes the top sandwich and leaves the line making students = [0,1,1] and sandwiches = [1,0,1].

- Front student leaves the top sandwich and returns to the end of the line making students = [1,1,0].

- Front student takes the top sandwich and leaves the line making students = [1,0] and sandwiches = [0,1].

- Front student leaves the top sandwich and returns to the end of the line making students = [0,1].

- Front student takes the top sandwich and leaves the line making students = [1] and sandwiches = [1].

- Front student takes the top sandwich and leaves the line making students = [] and sandwiches = [].

Hence all students are able to eat.


Example 2:
Input: students = [1,1,1,0,0,1], sandwiches = [1,0,0,0,1,1]
Output: 3

Constraints:
`1 <= students.length, sandwiches.length <= 100`
`students.length == sandwiches.length`
`sandwiches[i]` is `0` or `1`.

`students[i]` is `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a restaurant with a single chef. You are given an array `customers`, where `customers[i] = [arrivali, timei]:`
`arrivali` is the arrival time of the `ith` customer. The arrival times are sorted in non-decreasing order.

`timei` is the time needed to prepare the order of the `ith` customer.

When a customer arrives, he gives the chef his order, and the chef starts preparing it once he is idle. The customer waits till the chef finishes preparing his order. The chef does not prepare food for more than one customer at a time. The chef prepares food for customers in the order they were given in the input.

Return the average waiting time of all customers. Solutions within `10-5` from the actual answer are considered accepted.


Example 1:
Input: customers = [[1,2],[2,5],[4,3]]
Output: 5.00000
Explanation:
1) The first customer arrives at time 1, the chef takes his order and starts preparing it immediately at time 1, and finishes at time 3, so the waiting time of the first customer is 3 - 1 = 2.

2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes at time 8, so the waiting time of the second customer is 8 - 2 = 6.

3) The third customer arrives at time 4, the chef takes his order and starts preparing it at time 8, and finishes at time 11, so the waiting time of the third customer is 11 - 4 = 7.

So the average waiting time = (2 + 6 + 7) / 3 = 5.


Example 2:
Input: customers = [[5,2],[5,4],[10,3],[20,1]]
Output: 3.25000
Explanation:
1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes at time 7, so the waiting time of the first customer is 7 - 5 = 2.

2) The second customer arrives at time 5, the chef takes his order and starts preparing it at time 7, and finishes at time 11, so the waiting time of the second customer is 11 - 5 = 6.

3) The third customer arrives at time 10, the chef takes his order and starts preparing it at time 11, and finishes at time 14, so the waiting time of the third customer is 14 - 10 = 4.

4) The fourth customer arrives at time 20, the chef takes his order and starts preparing it immediately at time 20, and finishes at time 21, so the waiting time of the fourth customer is 21 - 20 = 1.

So the average waiting time = (2 + 6 + 4 + 1) / 4 = 3.25.


Constraints:
`1 <= customers.length <= 105`
`1 <= arrivali, timei <= 104`
`arrivali <= arrivali+1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a binary string `binary` consisting of only `0`'s or `1`'s. You can apply each of the following operations any number of times:
Operation 1: If the number contains the substring `""00""`, you can replace it with `""10""`.

	
For example, `""00010"" -> ""10010`""
Operation 2: If the number contains the substring `""10""`, you can replace it with `""01""`.

	
For example, `""00010"" -> ""00001""`
Return the maximum binary string you can obtain after any number of operations. Binary string `x` is greater than binary string `y` if `x`'s decimal representation is greater than `y`'s decimal representation.


Example 1:
Input: binary = ""000110""
Output: ""111011""
Explanation: A valid transformation sequence can be:
""000110"" -> ""000101"" 
""000101"" -> ""100101"" 
""100101"" -> ""110101"" 
""110101"" -> ""110011"" 
""110011"" -> ""111011""

Example 2:
Input: binary = ""01""
Output: ""01""
Explanation: ""01"" cannot be transformed any further.


Constraints:
`1 <= binary.length <= 105`
`binary` consist of `'0'` and `'1'`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array, `nums`, and an integer `k`. `nums` comprises of only `0`'s and `1`'s. In one move, you can choose two adjacent indices and swap their values.

Return the minimum number of moves required so that `nums` has `k` consecutive `1`'s.


Example 1:
Input: nums = [1,0,0,1,0,1], k = 2
Output: 1
Explanation: In 1 move, nums could be [1,0,0,0,1,1] and have 2 consecutive 1's.


Example 2:
Input: nums = [1,0,0,0,0,0,1,1], k = 3
Output: 5
Explanation: In 5 moves, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].


Example 3:
Input: nums = [1,1,0,1], k = 2
Output: 0
Explanation: nums already has 2 consecutive 1's.


Constraints:
`1 <= nums.length <= 105`
`nums[i]` is `0` or `1`.

`1 <= k <= sum(nums)`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a special kind of apple tree that grows apples every day for `n` days. On the `ith` day, the tree grows `apples[i]` apples that will rot after `days[i]` days, that is on day `i + days[i]` the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by `apples[i] == 0` and `days[i] == 0`.

You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first `n` days.

Given two integer arrays `days` and `apples` of length `n`, return the maximum number of apples you can eat.


Example 1:
Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]
Output: 7
Explanation: You can eat 7 apples:
- On the first day, you eat an apple that grew on the first day.

- On the second day, you eat an apple that grew on the second day.

- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.

- On the fourth to the seventh days, you eat apples that grew on the fourth day.


Example 2:
Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
Output: 5
Explanation: You can eat 5 apples:
- On the first to the third day you eat apples that grew on the first day.

- Do nothing on the fouth and fifth days.

- On the sixth and seventh days you eat apples that grew on the sixth day.


Constraints:
`apples.length == n`
`days.length == n`
`1 <= n <= 2 * 104`
`0 <= apples[i], days[i] <= 2 * 104`
`days[i] = 0` if and only if `apples[i] = 0`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a 2-D `grid` of size `m x n` representing a box, and you have `n` balls. The box is open on the top and bottom sides.

Each cell in the box has a diagonal board spanning two corners of the cell that can redirect a ball to the right or to the left.

A board that redirects the ball to the right spans the top-left corner to the bottom-right corner and is represented in the grid as `1`.

A board that redirects the ball to the left spans the top-right corner to the bottom-left corner and is represented in the grid as `-1`.

We drop one ball at the top of each column of the box. Each ball can get stuck in the box or fall out of the bottom. A ball gets stuck if it hits a ""V"" shaped pattern between two boards or if a board redirects the ball into either wall of the box.

Return an array `answer` of size `n` where `answer[i]` is the column that the ball falls out of at the bottom after dropping the ball from the `ith` column at the top, or `-1` if the ball gets stuck in the box.


Example 1:
Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1,1,1,1,-1],[-1,-1,-1,-1,-1]]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the photo.

Ball b0 is dropped at column 0 and falls out of the box at column 1.

Ball b1 is dropped at column 1 and will get stuck in the box between column 2 and 3 and row 1.

Ball b2 is dropped at column 2 and will get stuck on the box between column 2 and 3 and row 0.

Ball b3 is dropped at column 3 and will get stuck on the box between column 2 and 3 and row 0.

Ball b4 is dropped at column 4 and will get stuck on the box between column 2 and 3 and row 1.


Example 2:
Input: grid = [[-1]]
Output: [-1]
Explanation: The ball gets stuck against the left wall.


Example 3:
Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1]]
Output: [0,1,2,3,4,-1]

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 100`
`grid[i][j]` is `1` or `-1`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `nums` consisting of non-negative integers. You are also given a `queries` array, where `queries[i] = [xi, mi]`.

The answer to the `ith` query is the maximum bitwise `XOR` value of `xi` and any element of `nums` that does not exceed `mi`. In other words, the answer is `max(nums[j] XOR xi)` for all `j` such that `nums[j] <= mi`. If all elements in `nums` are larger than `mi`, then the answer is `-1`.

Return an integer array `answer` where `answer.length == queries.length` and `answer[i]` is the answer to the `ith` query.


Example 1:
Input: nums = [0,1,2,3,4], queries = [[3,1],[1,3],[5,6]]
Output: [3,3,7]
Explanation:
1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.

2) 1 XOR 2 = 3.

3) 5 XOR 2 = 7.


Example 2:
Input: nums = [5,2,4,6,6,3], queries = [[12,4],[8,1],[6,3]]
Output: [15,-1,5]

Constraints:
`1 <= nums.length, queries.length <= 105`
`queries[i].length == 2`
`0 <= nums[j], xi, mi <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An array `A` is larger than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.

For example, consider `0`-indexing:
`[1,3,2,4] > [1,2,2,4]`, since at index `1`, `3 > 2`.

`[1,4,4,4] < [2,1,1,1]`, since at index `0`, `1 < 2`.

A subarray is a contiguous subsequence of the array.

Given an integer array `nums` of distinct integers, return the largest subarray of `nums` of length `k`.


Example 1:
Input: nums = [1,4,5,2,3], k = 3
Output: [5,2,3]
Explanation: The subarrays of size 3 are: [1,4,5], [4,5,2], and [5,2,3].

Of these, [5,2,3] is the largest.


Example 2:
Input: nums = [1,4,5,2,3], k = 4
Output: [4,5,2,3]
Explanation: The subarrays of size 4 are: [1,4,5,2], and [4,5,2,3].

Of these, [4,5,2,3] is the largest.


Example 3:
Input: nums = [1,4,5,2,3], k = 1
Output: [5]

Constraints:
`1 <= k <= nums.length <= 105`
`1 <= nums[i] <= 109`
All the integers of `nums` are unique.

Follow up: What if the integers in `nums` are not distinct?",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are assigned to put some amount of boxes onto one truck. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:
`numberOfBoxesi` is the number of boxes of type `i`.

`numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.

You are also given an integer `truckSize`, which is the maximum number of boxes that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.

Return the maximum total number of units that can be put on the truck.


Example 1:
Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type that contains 3 units.

- 2 boxes of the second type that contain 2 units each.

- 3 boxes of the third type that contain 1 unit each.

You can take all the boxes of the first and second types, and one box of the third type.

The total number of units will be = (1 * 3) + (2 * 2) + (1 * 1) = 8.


Example 2:
Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91

Constraints:
`1 <= boxTypes.length <= 1000`
`1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`
`1 <= truckSize <= 106`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A good meal is a meal that contains exactly two different food items with a sum of deliciousness equal to a power of two.

You can pick any two different foods to make a good meal.

Given an array of integers `deliciousness` where `deliciousness[i]` is the deliciousness of the `i​​​​​​th​​​​`​​​​ item of food, return the number of different good meals you can make from this list modulo `109 + 7`.

Note that items with different indices are considered different even if they have the same deliciousness value.


Example 1:
Input: deliciousness = [1,3,5,7,9]
Output: 4
Explanation: The good meals are (1,3), (1,7), (3,5) and, (7,9).

Their respective sums are 4, 8, 8, and 16, all of which are powers of 2.


Example 2:
Input: deliciousness = [1,1,1,3,3,3,7]
Output: 15
Explanation: The good meals are (1,1) with 3 ways, (1,3) with 9 ways, and (1,7) with 3 ways.


Constraints:
`1 <= deliciousness.length <= 105`
`0 <= deliciousness[i] <= 220`",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A split of an integer array is good if:
The array is split into three non-empty contiguous subarrays - named `left`, `mid`, `right` respectively from left to right.

The sum of the elements in `left` is less than or equal to the sum of the elements in `mid`, and the sum of the elements in `mid` is less than or equal to the sum of the elements in `right`.

Given `nums`, an array of non-negative integers, return the number of good ways to split `nums`. As the number may be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [1,1,1]
Output: 1
Explanation: The only good way to split nums is [1] [1] [1].


Example 2:
Input: nums = [1,2,2,2,5,0]
Output: 3
Explanation: There are three good ways of splitting nums:
[1] [2] [2,2,5,0]
[1] [2,2] [2,5,0]
[1,2] [2,2] [5,0]

Example 3:
Input: nums = [3,2,1]
Output: 0
Explanation: There is no good way to split nums.


Constraints:
`3 <= nums.length <= 105`
`0 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `target` that consists of distinct integers and another integer array `arr` that can have duplicates.

In one operation, you can insert any integer at any position in `arr`. For example, if `arr = [1,4,1,2]`, you can add `3` in the middle and make it `[1,4,3,1,2]`. Note that you can insert the integer at the very beginning or end of the array.

Return the minimum number of operations needed to make `target` a subsequence of `arr`.

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the remaining elements' relative order. For example, `[2,7,4]` is a subsequence of `[4,2,3,7,2,1,4]` (the underlined elements), while `[2,4,2]` is not.


Example 1:
Input: target = [5,1,3], `arr` = [9,4,2,3,4]
Output: 2
Explanation: You can add 5 and 1 in such a way that makes `arr` = [5,9,4,1,2,3,4], then target will be a subsequence of `arr`.


Example 2:
Input: target = [6,4,8,1,3,2], `arr` = [4,7,6,2,3,8,6,1]
Output: 3

Constraints:
`1 <= target.length, arr.length <= 105`
`1 <= target[i], arr[i] <= 109`
`target` contains no duplicates.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Hercy wants to save money for his first car. He puts money in the Leetcode bank every day.

He starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the previous Monday. 
Given `n`, return the total amount of money he will have in the Leetcode bank at the end of the `nth` day.


Example 1:
Input: n = 4
Output: 10
Explanation: After the 4th day, the total is 1 + 2 + 3 + 4 = 10.


Example 2:
Input: n = 10
Output: 37
Explanation: After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.


Example 3:
Input: n = 20
Output: 96
Explanation: After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.


Constraints:
`1 <= n <= 1000`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` and two integers `x` and `y`. You can perform two types of operations any number of times.

Remove substring `""ab""` and gain `x` points.

	
For example, when removing `""ab""` from `""cabxbae""` it becomes `""cxbae""`.

Remove substring `""ba""` and gain `y` points.

	
For example, when removing `""ba""` from `""cabxbae""` it becomes `""cabxe""`.

Return the maximum points you can gain after applying the above operations on `s`.


Example 1:
Input: s = ""cdbcbbaaabab"", x = 4, y = 5
Output: 19
Explanation:
- Remove the ""ba"" underlined in ""cdbcbbaaabab"". Now, s = ""cdbcbbaaab"" and 5 points are added to the score.

- Remove the ""ab"" underlined in ""cdbcbbaaab"". Now, s = ""cdbcbbaa"" and 4 points are added to the score.

- Remove the ""ba"" underlined in ""cdbcbbaa"". Now, s = ""cdbcba"" and 5 points are added to the score.

- Remove the ""ba"" underlined in ""cdbcba"". Now, s = ""cdbc"" and 5 points are added to the score.

Total score = 5 + 4 + 5 + 5 = 19.


Example 2:
Input: s = ""aabbaaxybbaabb"", x = 5, y = 4
Output: 20

Constraints:
`1 <= s.length <= 105`
`1 <= x, y <= 104`
`s` consists of lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, find a sequence that satisfies all of the following:
The integer `1` occurs once in the sequence.

Each integer between `2` and `n` occurs twice in the sequence.

For every integer `i` between `2` and `n`, the distance between the two occurrences of `i` is exactly `i`.

The distance between two numbers on the sequence, `a[i]` and `a[j]`, is the absolute difference of their indices, `|j - i|`.

Return the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution. 
A sequence `a` is lexicographically larger than a sequence `b` (of the same length) if in the first position where `a` and `b` differ, sequence `a` has a number greater than the corresponding number in `b`. For example, `[0,1,9,0]` is lexicographically larger than `[0,1,5,6]` because the first position they differ is at the third number, and `9` is greater than `5`.


Example 1:
Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.


Example 2:
Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]

Constraints:
`1 <= n <= 20`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `pairs`, where `pairs[i] = [xi, yi]`, and:
There are no duplicates.

`xi < yi`
Let `ways` be the number of rooted trees that satisfy the following conditions:
The tree consists of nodes whose values appeared in `pairs`.

A pair `[xi, yi]` exists in `pairs` if and only if `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.

Note: the tree does not have to be a binary tree.

Two ways are considered to be different if there is at least one node that has different parents in both ways.

Return:
`0` if `ways == 0`
`1` if `ways == 1`
`2` if `ways > 1`
A rooted tree is a tree that has a single root node, and all edges are oriented to be outgoing from the root.

An ancestor of a node is any node on the path from the root to that node (excluding the node itself). The root has no ancestors.


Example 1:
Input: pairs = [[1,2],[2,3]]
Output: 1
Explanation: There is exactly one valid rooted tree, which is shown in the above figure.


Example 2:
Input: pairs = [[1,2],[2,3],[1,3]]
Output: 2
Explanation: There are multiple valid rooted trees. Three of them are shown in the above figures.


Example 3:
Input: pairs = [[1,2],[2,3],[2,4],[1,5]]
Output: 0
Explanation: There are no valid rooted trees.


Constraints:
`1 <= pairs.length <= 105`
`1 <= xi < yi <= 500`
The elements in `pairs` are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the `head` of a linked list, and an integer `k`.

Return the head of the linked list after swapping the values of the `kth` node from the beginning and the `kth` node from the end (the list is 1-indexed).


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [1,4,3,2,5]

Example 2:
Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
Output: [7,9,6,6,8,7,3,0,9,5]

Example 3:
Input: head = [1], k = 1
Output: [1]

Example 4:
Input: head = [1,2], k = 1
Output: [2,1]

Example 5:
Input: head = [1,2,3], k = 2
Output: [1,2,3]

Constraints:
The number of nodes in the list is `n`.

`1 <= k <= n <= 105`
`0 <= Node.val <= 100`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two integer arrays, `source` and `target`, both of length `n`. You are also given an array `allowedSwaps` where each `allowedSwaps[i] = [ai, bi]` indicates that you are allowed to swap the elements at index `ai` and index `bi` (0-indexed) of array `source`. Note that you can swap elements at a specific pair of indices multiple times and in any order.

The Hamming distance of two arrays of the same length, `source` and `target`, is the number of positions where the elements are different. Formally, it is the number of indices `i` for `0 <= i <= n-1` where `source[i] != target[i]` (0-indexed).

Return the minimum Hamming distance of `source` and `target` after performing any amount of swap operations on array `source`.


Example 1:
Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]
Output: 1
Explanation: source can be transformed the following way:
- Swap indices 0 and 1: source = [2,1,3,4]
- Swap indices 2 and 3: source = [2,1,4,3]
The Hamming distance of source and target is 1 as they differ in 1 position: index 3.


Example 2:
Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []
Output: 2
Explanation: There are no allowed swaps.

The Hamming distance of source and target is 2 as they differ in 2 positions: index 1 and index 2.


Example 3:
Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3],[1,4]]
Output: 0

Constraints:
`n == source.length == target.length`
`1 <= n <= 105`
`1 <= source[i], target[i] <= 105`
`0 <= allowedSwaps.length <= 105`
`allowedSwaps[i].length == 2`
`0 <= ai, bi <= n - 1`
`ai != bi`",0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `jobs`, where `jobs[i]` is the amount of time it takes to complete the `ith` job.

There are `k` workers that you can assign jobs to. Each job should be assigned to exactly one worker. The working time of a worker is the sum of the time it takes to complete all jobs assigned to them. Your goal is to devise an optimal assignment such that the maximum working time of any worker is minimized.

Return the minimum possible maximum working time of any assignment. 

Example 1:
Input: jobs = [3,2,3], k = 3
Output: 3
Explanation: By assigning each person one job, the maximum time is 3.


Example 2:
Input: jobs = [1,2,4,7,8], k = 2
Output: 11
Explanation: Assign the jobs the following way:
Worker 1: 1, 2, 8 (working time = 1 + 2 + 8 = 11)
Worker 2: 4, 7 (working time = 4 + 7 = 11)
The maximum working time is 11.


Constraints:
`1 <= k <= jobs.length <= 12`
`1 <= jobs[i] <= 107`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` denotes an edge between nodes `ui` and `vi` with distance `disi`. Note that there may be multiple edges between two nodes, and the graph may not be connected.

Implement the `DistanceLimitedPathsExist` class:
`DistanceLimitedPathsExist(int n, int[][] edgeList)` Initializes the class with an undirected graph.

`boolean query(int p, int q, int limit)` Returns `true` if there exists a path from `p` to `q` such that each edge on the path has a distance strictly less than `limit`, and otherwise `false`.


Example 1:
Input
[""DistanceLimitedPathsExist"", ""query"", ""query"", ""query"", ""query""]
[[6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2], [1, 3, 3], [2, 0, 3], [0, 5, 6]]
Output
[null, true, false, true, false]
Explanation
DistanceLimitedPathsExist distanceLimitedPathsExist = new DistanceLimitedPathsExist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]);
distanceLimitedPathsExist.query(2, 3, 2); // return true. There is an edge from 2 to 3 of distance 1, which is less than 2.

distanceLimitedPathsExist.query(1, 3, 3); // return false. There is no way to go from 1 to 3 with distances strictly less than 3.

distanceLimitedPathsExist.query(2, 0, 3); // return true. There is a way to go from 2 to 0 with distance < 3: travel from 2 to 3 to 0.

distanceLimitedPathsExist.query(0, 5, 6); // return false. There are no paths from 0 to 5.


`Constraints:`
`2 <= n <= 104`
`0 <= edgeList.length <= 104`
`edgeList[i].length == 3`
`0 <= ui, vi, p, q <= n-1`
`ui != vi`
`p != q`
`1 <= disi, limit <= 109`
At most `104` calls will be made to `query`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `rectangles` where `rectangles[i] = [li, wi]` represents the `ith` rectangle of length `li` and width `wi`.

You can cut the `ith` rectangle to form a square with a side length of `k` if both `k <= li` and `k <= wi`. For example, if you have a rectangle `[4,6]`, you can cut it to get a square with a side length of at most `4`.

Let `maxLen` be the side length of the largest square you can obtain from any of the given rectangles.

Return the number of rectangles that can make a square with a side length of `maxLen`.


Example 1:
Input: rectangles = [[5,8],[3,9],[5,12],[16,5]]
Output: 3
Explanation: The largest squares you can get from each rectangle are of lengths [5,3,5,5].

The largest possible square is of length 5, and you can get it out of 3 rectangles.


Example 2:
Input: rectangles = [[2,3],[3,7],[4,3],[3,7]]
Output: 3

Constraints:
`1 <= rectangles.length <= 1000`
`rectangles[i].length == 2`
`1 <= li, wi <= 109`
`li != wi`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of distinct positive integers, return the number of tuples `(a, b, c, d)` such that `a * b = c * d` where `a`, `b`, `c`, and `d` are elements of `nums`, and `a != b != c != d`.


Example 1:
Input: nums = [2,3,4,6]
Output: 8
Explanation: There are 8 valid tuples:
(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)

Example 2:
Input: nums = [1,2,4,5,10]
Output: 16
Explanation: There are 16 valids tuples:
(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)
(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)
(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)
(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)

Example 3:
Input: nums = [2,3,4,6,8,12]
Output: 40

Example 4:
Input: nums = [2,3,5,7]
Output: 0

Constraints:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 104`
All elements in `nums` are distinct.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a binary matrix `matrix` of size `m x n`, and you are allowed to rearrange the columns of the `matrix` in any order.

Return the area of the largest submatrix within `matrix` where every element of the submatrix is `1` after reordering the columns optimally.


Example 1:
Input: matrix = [[0,0,1],[1,1,1],[1,0,1]]
Output: 4
Explanation: You can rearrange the columns as shown above.

The largest submatrix of 1s, in bold, has an area of 4.


Example 2:
Input: matrix = [[1,0,1,0,1]]
Output: 3
Explanation: You can rearrange the columns as shown above.

The largest submatrix of 1s, in bold, has an area of 3.


Example 3:
Input: matrix = [[1,1,0],[1,0,1]]
Output: 2
Explanation: Notice that you must rearrange entire columns, and there is no way to make a submatrix of 1s larger than an area of 2.


Example 4:
Input: matrix = [[0,0],[0,0]]
Output: 0
Explanation: As there are no 1s, no submatrix of 1s can be formed and the area is 0.


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m * n <= 105`
`matrix[i][j]` is `0` or `1`.",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A game is played by a cat and a mouse named Cat and Mouse.

The environment is represented by a `grid` of size `rows x cols`, where each element is a wall, floor, player (Cat, Mouse), or food.

Players are represented by the characters `'C'`(Cat)`,'M'`(Mouse).

Floors are represented by the character `'.'` and can be walked on.

Walls are represented by the character `'#'` and cannot be walked on.

Food is represented by the character `'F'` and can be walked on.

There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.

Mouse and Cat play according to the following rules:
Mouse moves first, then they take turns to move.

During each turn, Cat and Mouse can jump in one of the four directions (left, right, up, down). They cannot jump over the wall nor outside of the `grid`.

`catJump, mouseJump` are the maximum lengths Cat and Mouse can jump at a time, respectively. Cat and Mouse can jump less than the maximum length.

Staying in the same position is allowed.

Mouse can jump over Cat.

The game can end in 4 ways:
If Cat occupies the same position as Mouse, Cat wins.

If Cat reaches the food first, Cat wins.

If Mouse reaches the food first, Mouse wins.

If Mouse cannot get to the food within 1000 turns, Cat wins.

Given a `rows x cols` matrix `grid` and two integers `catJump` and `mouseJump`, return `true` if Mouse can win the game if both Cat and Mouse play optimally, otherwise return `false`.


Example 1:
Input: grid = [""####F"",""#C..."",""M....""], catJump = 1, mouseJump = 2
Output: true
Explanation: Cat cannot catch Mouse on its turn nor can it get the food before Mouse.


Example 2:
Input: grid = [""M.C...F""], catJump = 1, mouseJump = 4
Output: true

Example 3:
Input: grid = [""M.C...F""], catJump = 1, mouseJump = 3
Output: false

Example 4:
Input: grid = [""C...#"",""...#F"",""....#"",""M....""], catJump = 2, mouseJump = 5
Output: false

Example 5:
Input: grid = ["".M..."",""..#.."",""#..#."",""C#.#."",""...#F""], catJump = 3, mouseJump = 1
Output: true

Constraints:
`rows == grid.length`
`cols = grid[i].length`
`1 <= rows, cols <= 8`
`grid[i][j]` consist only of characters `'C'`, `'M'`, `'F'`, `'.'`, and `'#'`.

There is only one of each character `'C'`, `'M'`, and `'F'` in `grid`.

`1 <= catJump, mouseJump <= 8`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are starving and you want to eat food as quickly as possible. You want to find the shortest path to arrive at any food cell.

You are given an `m x n` character matrix, `grid`, of these different types of cells:
`'*'` is your location. There is exactly one `'*'` cell.

`'#'` is a food cell. There may be multiple food cells.

`'O'` is free space, and you can travel through these cells.

`'X'` is an obstacle, and you cannot travel through these cells.

You can travel to any adjacent cell north, east, south, or west of your current location if there is not an obstacle.

Return the length of the shortest path for you to reach any food cell. If there is no path for you to reach food, return `-1`.


Example 1:
Input: grid = [[""X"",""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""O"",""O"",""O"",""X""],[""X"",""O"",""O"",""#"",""O"",""X""],[""X"",""X"",""X"",""X"",""X"",""X""]]
Output: 3
Explanation: It takes 3 steps to reach the food.


Example 2:
Input: grid = [[""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""X"",""O"",""X""],[""X"",""O"",""X"",""#"",""X""],[""X"",""X"",""X"",""X"",""X""]]
Output: -1
Explanation: It is not possible to reach the food.


Example 3:
Input: grid = [[""X"",""X"",""X"",""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""O"",""X"",""O"",""#"",""O"",""X""],[""X"",""O"",""O"",""X"",""O"",""O"",""X"",""X""],[""X"",""O"",""O"",""O"",""O"",""#"",""O"",""X""],[""X"",""X"",""X"",""X"",""X"",""X"",""X"",""X""]]
Output: 6
Explanation: There can be multiple food cells. It only takes 6 steps to reach the bottom food.


Example 4:
Input: grid = [[""O"",""*""],[""#"",""O""]]
Output: 2

Example 5:
Input: grid = [[""X"",""*""],[""#"",""X""]]
Output: -1

Constraints:
`m == grid.length`
`n == grid[i].length`
`1 <= m, n <= 200`
`grid[row][col]` is `'*'`, `'X'`, `'O'`, or `'#'`.

The `grid` contains exactly one `'*'`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a social network consisting of `m` users and some friendships between users, two users can communicate with each other if they know a common language.

You are given an integer `n`, an array `languages`, and an array `friendships` where:
There are `n` languages numbered `1` through `n`,
`languages[i]` is the set of languages the `i​​​​​​th`​​​​ user knows, and
`friendships[i] = [u​​​​​​i​​​, v​​​​​​i]` denotes a friendship between the users `u​​​​​​​​​​​i`​​​​​ and `vi`.

You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.

Note that friendships are not transitive, meaning if `x` is a friend of `y` and `y` is a friend of `z`, this doesn't guarantee that `x` is a friend of `z`.


Example 1:
Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]
Output: 1
Explanation: You can either teach user 1 the second language or user 2 the first language.


Example 2:
Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]
Output: 2
Explanation: Teach the third language to users 1 and 3, yielding two users to teach.


Constraints:
`2 <= n <= 500`
`languages.length == m`
`1 <= m <= 500`
`1 <= languages[i].length <= n`
`1 <= languages[i][j] <= n`
`1 <= u​​​​​​i < v​​​​​​i <= languages.length`
`1 <= friendships.length <= 500`
All tuples `(u​​​​​i, v​​​​​​i)` are unique
`languages[i]` contains only unique values",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an integer array `perm` that is a permutation of the first `n` positive integers, where `n` is always odd.

It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = perm[i] XOR perm[i + 1]`. For example, if `perm = [1,3,2]`, then `encoded = [2,1]`.

Given the `encoded` array, return the original array `perm`. It is guaranteed that the answer exists and is unique.


Example 1:
Input: encoded = [3,1]
Output: [1,2,3]
Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]

Example 2:
Input: encoded = [6,5,4,6]
Output: [2,4,1,5,3]

Constraints:
`3 <= n < 105`
`n` is odd.

`encoded.length == n - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a 2D integer array, `queries`. For each `queries[i]`, where `queries[i] = [ni, ki]`, find the number of different ways you can place positive integers into an array of size `ni` such that the product of the integers is `ki`. As the number of ways may be too large, the answer to the `ith` query is the number of ways modulo `109 + 7`.

Return an integer array `answer` where `answer.length == queries.length`, and `answer[i]` is the answer to the `ith` query.


Example 1:
Input: queries = [[2,6],[5,1],[73,660]]
Output: [4,1,50734910]
Explanation: Each query is independent.

[2,6]: There are 4 ways to fill an array of size 2 that multiply to 6: [1,6], [2,3], [3,2], [6,1].

[5,1]: There is 1 way to fill an array of size 5 that multiply to 1: [1,1,1,1,1].

[73,660]: There are 1050734917 ways to fill an array of size 73 that multiply to 660. 1050734917 modulo 109 + 7 = 50734910.


Example 2:
Input: queries = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: [1,2,3,10,5]

Constraints:
`1 <= queries.length <= 104 `
`1 <= ni, ki <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `time` in the form of ` hh:mm`, where some of the digits in the string are hidden (represented by `?`).

The valid times are those inclusively between `00:00` and `23:59`.

Return the latest valid time you can get from `time` by replacing the hidden digits.


Example 1:
Input: time = ""2?:?0""
Output: ""23:50""
Explanation: The latest hour beginning with the digit '2' is 23 and the latest minute ending with the digit '0' is 50.


Example 2:
Input: time = ""0?:3?""
Output: ""09:39""

Example 3:
Input: time = ""1?:22""
Output: ""19:22""

Constraints:
`time` is in the format `hh:mm`.

It is guaranteed that you can produce a valid time from the given string.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `a` and `b` that consist of lowercase letters. In one operation, you can change any character in `a` or `b` to any lowercase letter.

Your goal is to satisfy one of the following three conditions:
Every letter in `a` is strictly less than every letter in `b` in the alphabet.

Every letter in `b` is strictly less than every letter in `a` in the alphabet.

Both `a` and `b` consist of only one distinct letter.

Return the minimum number of operations needed to achieve your goal.


Example 1:
Input: a = ""aba"", b = ""caa""
Output: 2
Explanation: Consider the best way to make each condition true:
1) Change b to ""ccc"" in 2 operations, then every letter in a is less than every letter in b.

2) Change a to ""bbb"" and b to ""aaa"" in 3 operations, then every letter in b is less than every letter in a.

3) Change a to ""aaa"" and b to ""aaa"" in 2 operations, then a and b consist of one distinct letter.

The best way was done in 2 operations (either condition 1 or condition 3).


Example 2:
Input: a = ""dabadd"", b = ""cda""
Output: 3
Explanation: The best way is to make condition 1 true by changing b to ""eee"".


Constraints:
`1 <= a.length, b.length <= 105`
`a` and `b` consist only of lowercase letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a 2D `matrix` of size `m x n`, consisting of non-negative integers. You are also given an integer `k`.

The value of coordinate `(a, b)` of the matrix is the XOR of all `matrix[i][j]` where `0 <= i <= a < m` and `0 <= j <= b < n` (0-indexed).

Find the `kth` largest value (1-indexed) of all the coordinates of `matrix`.


Example 1:
Input: matrix = [[5,2],[1,6]], k = 1
Output: 7
Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the largest value.


Example 2:
Input: matrix = [[5,2],[1,6]], k = 2
Output: 5
Explanation: The value of coordinate (0,0) is 5 = 5, which is the 2nd largest value.


Example 3:
Input: matrix = [[5,2],[1,6]], k = 3
Output: 4
Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.


Example 4:
Input: matrix = [[5,2],[1,6]], k = 4
Output: 0
Explanation: The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value.


Constraints:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m, n <= 1000`
`0 <= matrix[i][j] <= 106`
`1 <= k <= m * n`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a cubic storeroom where the width, length, and height of the room are all equal to `n` units. You are asked to place `n` boxes in this room where each box is a cube of unit side length. There are however some rules to placing the boxes:
You can place the boxes anywhere on the floor.

If box `x` is placed on top of the box `y`, then each side of the four vertical sides of the box `y` must either be adjacent to another box or to a wall.

Given an integer `n`, return the minimum possible number of boxes touching the floor.


Example 1:
Input: n = 3
Output: 3
Explanation: The figure above is for the placement of the three boxes.

These boxes are placed in the corner of the room, where the corner is on the left side.


Example 2:
Input: n = 4
Output: 3
Explanation: The figure above is for the placement of the four boxes.

These boxes are placed in the corner of the room, where the corner is on the left side.


Example 3:
Input: n = 10
Output: 6
Explanation: The figure above is for the placement of the ten boxes.

These boxes are placed in the corner of the room, where the corner is on the back side.


Constraints:
`1 <= n <= 109`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the root of a binary tree and two integers `p` and `q`, return the distance between the nodes of value `p` and value `q` in the tree.

The distance between two nodes is the number of edges on the path from one to the other.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 0
Output: 3
Explanation: There are 3 edges between 5 and 0: 5-3-1-0.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 7
Output: 2
Explanation: There are 2 edges between 5 and 7: 5-2-7.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 5
Output: 0
Explanation: The distance between a node and itself is 0.


Constraints:
The number of nodes in the tree is in the range `[1, 104]`.

`0 <= Node.val <= 109`
All `Node.val` are unique.

`p` and `q` are values in the tree.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` inclusive (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.

Given two integers `lowLimit` and `highLimit`, return the number of balls in the box with the most balls.


Example 1:
Input: lowLimit = 1, highLimit = 10
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...

Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...

Box 1 has the most number of balls with 2 balls.


Example 2:
Input: lowLimit = 5, highLimit = 15
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...

Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...

Boxes 5 and 6 have the most number of balls with 2 balls in each.


Example 3:
Input: lowLimit = 19, highLimit = 28
Output: 2
Explanation:
Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...

Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...

Box 10 has the most number of balls with 2 balls.


Constraints:
`1 <= lowLimit <= highLimit <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an integer array `nums` that consists of `n` unique elements, but you have forgotten it. However, you do remember every pair of adjacent elements in `nums`.

You are given a 2D integer array `adjacentPairs` of size `n - 1` where each `adjacentPairs[i] = [ui, vi]` indicates that the elements `ui` and `vi` are adjacent in `nums`.

It is guaranteed that every adjacent pair of elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either as `[nums[i], nums[i+1]]` or `[nums[i+1], nums[i]]`. The pairs can appear in any order.

Return the original array `nums`. If there are multiple solutions, return any of them.


Example 1:
Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: This array has all its adjacent pairs in adjacentPairs.

Notice that adjacentPairs[i] may not be in left-to-right order.


Example 2:
Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.

Another solution is [-3,1,4,-2], which would also be accepted.


Example 3:
Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]

Constraints:
`nums.length == n`
`adjacentPairs.length == n - 1`
`adjacentPairs[i].length == 2`
`2 <= n <= 105`
`-105 <= nums[i], ui, vi <= 105`
There exists some `nums` that has `adjacentPairs` as its pairs.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a (0-indexed) array of positive integers `candiesCount` where `candiesCount[i]` represents the number of candies of the `ith` type you have. You are also given a 2D array `queries` where `queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]`.

You play a game with the following rules:
You start eating candies on day `0`.

You cannot eat any candy of type `i` unless you have eaten all candies of type `i - 1`.

You must eat at least one candy per day until you have eaten all the candies.

Construct a boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` if you can eat a candy of type `favoriteTypei` on day `favoriteDayi` without eating more than `dailyCapi` candies on any day, and `false` otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.

Return the constructed array `answer`.


Example 1:
Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]
Output: [true,false,true]
Explanation:
1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.

2- You can eat at most 4 candies each day.

   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.

   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.

3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.


Example 2:
Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
Output: [false,true,true,false,false]

Constraints:
`1 <= candiesCount.length <= 105`
`1 <= candiesCount[i] <= 105`
`1 <= queries.length <= 105`
`queries[i].length == 3`
`0 <= favoriteTypei < candiesCount.length`
`0 <= favoriteDayi <= 109`
`1 <= dailyCapi <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return `true` if it is possible to split the string `s` into three non-empty palindromic substrings. Otherwise, return `false`.​​​​​
A string is said to be palindrome if it the same string when reversed.


Example 1:
Input: s = ""abcbdd""
Output: true
Explanation: ""abcbdd"" = ""a"" + ""bcb"" + ""dd"", and all three substrings are palindromes.


Example 2:
Input: s = ""bcbddxy""
Output: false
Explanation: s cannot be split into 3 palindromes.


Constraints:
`3 <= s.length <= 2000`
`s`​​​​​​ consists only of lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. You must perform exactly one operation where you can replace one element `nums[i]` with `nums[i] * nums[i]`. 
Return the maximum possible subarray sum after exactly one operation. The subarray must be non-empty.


Example 1:
Input: nums = [2,-1,-4,-3]
Output: 17
Explanation: You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.


Example 2:
Input: nums = [1,-1,1,1,-1,-1,1]
Output: 4
Explanation: You can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.


Constraints:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. The unique elements of an array are the elements that appear exactly once in the array.

Return the sum of all the unique elements of `nums`.


Example 1:
Input: nums = [1,2,3,2]
Output: 4
Explanation: The unique elements are [1,3], and the sum is 4.


Example 2:
Input: nums = [1,1,1,1,1]
Output: 0
Explanation: There are no unique elements, and the sum is 0.


Example 3:
Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The unique elements are [1,2,3,4,5], and the sum is 15.


Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s` consisting only of characters `'a'`, `'b'`, and `'c'`. You are asked to apply the following algorithm on the string any number of times:
Pick a non-empty prefix from the string `s` where all the characters in the prefix are equal.

Pick a non-empty suffix from the string `s` where all the characters in this suffix are equal.

The prefix and the suffix should not intersect at any index.

The characters from the prefix and suffix must be the same.

Delete both the prefix and the suffix.

Return the minimum length of `s` after performing the above operation any number of times (possibly zero times).


Example 1:
Input: s = ""ca""
Output: 2
Explanation: You can't remove any characters, so the string stays as is.


Example 2:
Input: s = ""cabaabac""
Output: 0
Explanation: An optimal sequence of operations is:
- Take prefix = ""c"" and suffix = ""c"" and remove them, s = ""abaaba"".

- Take prefix = ""a"" and suffix = ""a"" and remove them, s = ""baab"".

- Take prefix = ""b"" and suffix = ""b"" and remove them, s = ""aa"".

- Take prefix = ""a"" and suffix = ""a"" and remove them, s = """".


Example 3:
Input: s = ""aabccabba""
Output: 3
Explanation: An optimal sequence of operations is:
- Take prefix = ""aa"" and suffix = ""a"" and remove them, s = ""bccabb"".

- Take prefix = ""b"" and suffix = ""bb"" and remove them, s = ""cca"".


Constraints:
`1 <= s.length <= 105`
`s` only consists of characters `'a'`, `'b'`, and `'c'`.",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of `events` where `events[i] = [startDayi, endDayi, valuei]`. The `ith` event starts at `startDayi` and ends at `endDayi`, and if you attend this event, you will receive a value of `valuei`. You are also given an integer `k` which represents the maximum number of events you can attend.

You can only attend one event at a time. If you choose to attend an event, you must attend the entire event. Note that the end day is inclusive: that is, you cannot attend two events where one of them starts and the other ends on the same day.

Return the maximum sum of values that you can receive by attending events.


Example 1:
Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2
Output: 7
Explanation: Choose the green events, 0 and 1 (0-indexed) for a total value of 4 + 3 = 7.


Example 2:
Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2
Output: 10
Explanation: Choose event 2 for a total value of 10.

Notice that you cannot attend any other event as they overlap, and that you do not have to attend k events.


Example 3:
Input: events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3
Output: 9
Explanation: Although the events do not overlap, you can only attend 3 events. Pick the highest valued three.


Constraints:
`1 <= k <= events.length`
`1 <= k * events.length <= 106`
`1 <= startDayi <= endDayi <= 109`
`1 <= valuei <= 106`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums`, return `true` if the array was originally sorted in non-decreasing order, then rotated some number of positions (including zero). Otherwise, return `false`.

There may be duplicates in the original array.

Note: An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.


Example 1:
Input: nums = [3,4,5,1,2]
Output: true
Explanation: [1,2,3,4,5] is the original sorted array.

You can rotate the array by x = 3 positions to begin on the the element of value 3: [3,4,5,1,2].


Example 2:
Input: nums = [2,1,3,4]
Output: false
Explanation: There is no sorted array once rotated that can make nums.


Example 3:
Input: nums = [1,2,3]
Output: true
Explanation: [1,2,3] is the original sorted array.

You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.


Example 4:
Input: nums = [1,1,1]
Output: true
Explanation: [1,1,1] is the original sorted array.

You can rotate any number of positions to make nums.


Example 5:
Input: nums = [2,1]
Output: true
Explanation: [1,2] is the original sorted array.

You can rotate the array by x = 5 positions to begin on the element of value 2: [2,1].


Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a solitaire game with three piles of stones of sizes `a`​​​​​​, `b`,​​​​​​ and `c`​​​​​​ respectively. Each turn you choose two different non-empty piles, take one stone from each, and add `1` point to your score. The game stops when there are fewer than two non-empty piles (meaning there are no more available moves).

Given three integers `a`​​​​​, `b`,​​​​​ and `c`​​​​​, return the maximum score you can get.


Example 1:
Input: a = 2, b = 4, c = 6
Output: 6
Explanation: The starting state is (2, 4, 6). One optimal set of moves is:
- Take from 1st and 3rd piles, state is now (1, 4, 5)
- Take from 1st and 3rd piles, state is now (0, 4, 4)
- Take from 2nd and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 6 points.


Example 2:
Input: a = 4, b = 4, c = 6
Output: 7
Explanation: The starting state is (4, 4, 6). One optimal set of moves is:
- Take from 1st and 2nd piles, state is now (3, 3, 6)
- Take from 1st and 3rd piles, state is now (2, 3, 5)
- Take from 1st and 3rd piles, state is now (1, 3, 4)
- Take from 1st and 3rd piles, state is now (0, 3, 3)
- Take from 2nd and 3rd piles, state is now (0, 2, 2)
- Take from 2nd and 3rd piles, state is now (0, 1, 1)
- Take from 2nd and 3rd piles, state is now (0, 0, 0)
There are fewer than two non-empty piles, so the game ends. Total: 7 points.


Example 3:
Input: a = 1, b = 8, c = 8
Output: 8
Explanation: One optimal set of moves is to take from the 2nd and 3rd piles for 8 turns until they are empty.

After that, there are fewer than two non-empty piles, so the game ends.


Constraints:
`1 <= a, b, c <= 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `word1` and `word2`. You want to construct a string `merge` in the following way: while either `word1` or `word2` are non-empty, choose one of the following options:
If `word1` is non-empty, append the first character in `word1` to `merge` and delete it from `word1`.

	
For example, if `word1 = ""abc"" `and `merge = ""dv""`, then after choosing this operation, `word1 = ""bc""` and `merge = ""dva""`.

If `word2` is non-empty, append the first character in `word2` to `merge` and delete it from `word2`.

	
For example, if `word2 = ""abc"" `and `merge = """"`, then after choosing this operation, `word2 = ""bc""` and `merge = ""a""`.

Return the lexicographically largest `merge` you can construct.

A string `a` is lexicographically larger than a string `b` (of the same length) if in the first position where `a` and `b` differ, `a` has a character strictly larger than the corresponding character in `b`. For example, `""abcd""` is lexicographically larger than `""abcc""` because the first position they differ is at the fourth character, and `d` is greater than `c`.


Example 1:
Input: word1 = ""cabaa"", word2 = ""bcaaa""
Output: ""cbcabaaaaa""
Explanation: One way to get the lexicographically largest merge is:
- Take from word1: merge = ""c"", word1 = ""abaa"", word2 = ""bcaaa""
- Take from word2: merge = ""cb"", word1 = ""abaa"", word2 = ""caaa""
- Take from word2: merge = ""cbc"", word1 = ""abaa"", word2 = ""aaa""
- Take from word1: merge = ""cbca"", word1 = ""baa"", word2 = ""aaa""
- Take from word1: merge = ""cbcab"", word1 = ""aa"", word2 = ""aaa""
- Append the remaining 5 a's from word1 and word2 at the end of merge.


Example 2:
Input: word1 = ""abcabc"", word2 = ""abdcaba""
Output: ""abdcabcabcaba""

Constraints:
`1 <= word1.length, word2.length <= 3000`
`word1` and `word2` consist only of lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"You are given an integer array `nums` and an integer `goal`.

You want to choose a subsequence of `nums` such that the sum of its elements is the closest possible to `goal`. That is, if the sum of the subsequence's elements is `sum`, then you want to minimize the absolute difference `abs(sum - goal)`.

Return the minimum possible value of `abs(sum - goal)`.

Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.


Example 1:
Input: nums = [5,-7,3,5], goal = 6
Output: 0
Explanation: Choose the whole array as a subsequence, with a sum of 6.

This is equal to the goal, so the absolute difference is 0.


Example 2:
Input: nums = [7,-9,15,-2], goal = -5
Output: 1
Explanation: Choose the subsequence [7,-9,-2], with a sum of -4.

The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum.


Example 3:
Input: nums = [1,2,3], goal = -7
Output: 7

Constraints:
`1 <= nums.length <= 40`
`-107 <= nums[i] <= 107`
`-109 <= goal <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
"Design a queue-like data structure that moves the most recently used element to the end of the queue.

Implement the `MRUQueue` class:
`MRUQueue(int n)` constructs the `MRUQueue` with `n` elements: `[1,2,3,...,n]`.

`fetch(int k)` moves the `kth` element (1-indexed) to the end of the queue and returns it.


Example 1:
Input:
[""MRUQueue"", ""fetch"", ""fetch"", ""fetch"", ""fetch""]
[[8], [3], [5], [2], [8]]
Output:
[null, 3, 6, 2, 2]
Explanation:
MRUQueue mRUQueue = new MRUQueue(8); // Initializes the queue to [1,2,3,4,5,6,7,8].

mRUQueue.fetch(3); // Moves the 3rd element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and returns it.

mRUQueue.fetch(5); // Moves the 5th element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and returns it.

mRUQueue.fetch(2); // Moves the 2nd element (2) to the end of the queue to become [1,4,5,7,8,3,6,2] and returns it.

mRUQueue.fetch(8); // The 8th element (2) is already at the end of the queue so just return it.


Constraints:
`1 <= n <= 2000`
`1 <= k <= n`
At most `2000` calls will be made to `fetch`.

Follow up: Finding an `O(n)` algorithm per `fetch` is a bit easy. Can you find an algorithm with a better complexity for each `fetch` call?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string `""010""` is alternating, while the string `""0100""` is not.

Return the minimum number of operations needed to make `s` alternating.


Example 1:
Input: s = ""0100""
Output: 1
Explanation: If you change the last character to '1', s will be ""0101"", which is alternating.


Example 2:
Input: s = ""10""
Output: 0
Explanation: s is already alternating.


Example 3:
Input: s = ""1111""
Output: 2
Explanation: You need two operations to reach ""0101"" or ""1010"".


Constraints:
`1 <= s.length <= 104`
`s[i]` is either `'0'` or `'1'`.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `s`, return the number of homogenous substrings of `s`. Since the answer may be too large, return it modulo `109 + 7`.

A string is homogenous if all the characters of the string are the same.

A substring is a contiguous sequence of characters within a string.


Example 1:
Input: s = ""abbcccaa""
Output: 13
Explanation: The homogenous substrings are listed as below:
""a""   appears 3 times.

""aa""  appears 1 time.

""b""   appears 2 times.

""bb""  appears 1 time.

""c""   appears 3 times.

""cc""  appears 2 times.

""ccc"" appears 1 time.

3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.


Example 2:
Input: s = ""xy""
Output: 2
Explanation: The homogenous substrings are ""x"" and ""y"".


Example 3:
Input: s = ""zzzzz""
Output: 15

Constraints:
`1 <= s.length <= 105`
`s` consists of lowercase letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` where the `ith` bag contains `nums[i]` balls. You are also given an integer `maxOperations`.

You can perform the following operation at most `maxOperations` times:
Take any bag of balls and divide it into two new bags with a positive number of balls.

	
For example, a bag of `5` balls can become two new bags of `1` and `4` balls, or two new bags of `2` and `3` balls.

Your penalty is the maximum number of balls in a bag. You want to minimize your penalty after the operations.

Return the minimum possible penalty after performing the operations.


Example 1:
Input: nums = [9], maxOperations = 2
Output: 3
Explanation: 
- Divide the bag with 9 balls into two bags of sizes 6 and 3. [9] -> [6,3].

- Divide the bag with 6 balls into two bags of sizes 3 and 3. [6,3] -> [3,3,3].

The bag with the most number of balls has 3 balls, so your penalty is 3 and you should return 3.


Example 2:
Input: nums = [2,4,8,2], maxOperations = 4
Output: 2
Explanation:
- Divide the bag with 8 balls into two bags of sizes 4 and 4. [2,4,8,2] -> [2,4,4,4,2].

- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].

- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].

- Divide the bag with 4 balls into two bags of sizes 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2].

The bag with the most number of balls has 2 balls, so your penalty is 2 an you should return 2.


Example 3:
Input: nums = [7,17], maxOperations = 2
Output: 7

Constraints:
`1 <= nums.length <= 105`
`1 <= maxOperations, nums[i] <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an undirected graph. You are given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` indicates that there is an undirected edge between `ui` and `vi`.

A connected trio is a set of three nodes where there is an edge between every pair of them.

The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.

Return the minimum degree of a connected trio in the graph, or `-1` if the graph has no connected trios.


Example 1:
Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
Output: 3
Explanation: There is exactly one trio, which is [1,2,3]. The edges that form its degree are bolded in the figure above.


Example 2:
Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5],[2,6]]
Output: 0
Explanation: There are exactly three trios:
1) [1,4,3] with degree 0.

2) [2,5,6] with degree 2.

3) [5,6,7] with degree 2.


Constraints:
`2 <= n <= 400`
`edges[i].length == 2`
`1 <= edges.length <= n * (n-1) / 2`
`1 <= ui, vi <= n`
`ui != vi`
There are no repeated edges.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` buildings in a line. You are given an integer array `heights` of size `n` that represents the heights of the buildings in the line.

The ocean is to the right of the buildings. A building has an ocean view if the building can see the ocean without obstructions. Formally, a building has an ocean view if all the buildings to its right have a smaller height.

Return a list of indices (0-indexed) of buildings that have an ocean view, sorted in increasing order.


Example 1:
Input: heights = [4,2,3,1]
Output: [0,2,3]
Explanation: Building 1 (0-indexed) does not have an ocean view because building 2 is taller.


Example 2:
Input: heights = [4,3,2,1]
Output: [0,1,2,3]
Explanation: All the buildings have an ocean view.


Example 3:
Input: heights = [1,3,2,4]
Output: [3]
Explanation: Only building 3 has an ocean view.


Example 4:
Input: heights = [2,2,2,2]
Output: [3]
Explanation: Buildings cannot see the ocean if there are buildings of the same height to its right.


Constraints:
`1 <= heights.length <= 105`
`1 <= heights[i] <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string `s` is nice if, for every letter of the alphabet that `s` contains, it appears both in uppercase and lowercase. For example, `""abABB""` is nice because `'A'` and `'a'` appear, and `'B'` and `'b'` appear. However, `""abA""` is not because `'b'` appears, but `'B'` does not.

Given a string `s`, return the longest substring of `s` that is nice. If there are multiple, return the substring of the earliest occurrence. If there are none, return an empty string.


Example 1:
Input: s = ""YazaAay""
Output: ""aAa""
Explanation: ""aAa"" is a nice string because 'A/a' is the only letter of the alphabet in s, and both 'A' and 'a' appear.

""aAa"" is the longest nice substring.


Example 2:
Input: s = ""Bb""
Output: ""Bb""
Explanation: ""Bb"" is a nice string because both 'B' and 'b' appear. The whole string is a substring.


Example 3:
Input: s = ""c""
Output: """"
Explanation: There are no nice substrings.


Example 4:
Input: s = ""dDzeE""
Output: ""dD""
Explanation: Both ""dD"" and ""eE"" are the longest nice substrings.

As there are multiple longest nice substrings, return ""dD"" since it occurs earlier.


Constraints:
`1 <= s.length <= 100`
`s` consists of uppercase and lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a 2D integer array `groups` of length `n`. You are also given an integer array `nums`.

You are asked if you can choose `n` disjoint subarrays from the array `nums` such that the `ith` subarray is equal to `groups[i]` (0-indexed), and if `i > 0`, the `(i-1)th` subarray appears before the `ith` subarray in `nums` (i.e. the subarrays must be in the same order as `groups`).

Return `true` if you can do this task, and `false` otherwise.

Note that the subarrays are disjoint if and only if there is no index `k` such that `nums[k]` belongs to more than one subarray. A subarray is a contiguous sequence of elements within an array.


Example 1:
Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]
Output: true
Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st one as [1,-1,0,1,-1,-1,3,-2,0].

These subarrays are disjoint as they share no common nums[k] element.


Example 2:
Input: groups = [[10,-2],[1,2,3,4]], nums = [1,2,3,4,10,-2]
Output: false
Explanation: Note that choosing the subarrays [1,2,3,4,10,-2] and [1,2,3,4,10,-2] is incorrect because they are not in the same order as in groups.

[10,-2] must come before [1,2,3,4].


Example 3:
Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]
Output: false
Explanation: Note that choosing the subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] is invalid because they are not disjoint.

They share a common elements nums[4] (0-indexed).


Constraints:
`groups.length == n`
`1 <= n <= 103`
`1 <= groups[i].length, sum(groups[i].length) <= 103`
`1 <= nums.length <= 103`
`-107 <= groups[i][j], nums[k] <= 107`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer matrix `isWater` of size `m x n` that represents a map of land and water cells.

If `isWater[i][j] == 0`, cell `(i, j)` is a land cell.

If `isWater[i][j] == 1`, cell `(i, j)` is a water cell.

You must assign each cell a height in a way that follows these rules:
The height of each cell must be non-negative.

If the cell is a water cell, its height must be `0`.

Any two adjacent cells must have an absolute height difference of at most `1`. A cell is adjacent to another cell if the former is directly north, east, south, or west of the latter (i.e., their sides are touching).

Find an assignment of heights such that the maximum height in the matrix is maximized.

Return an integer matrix `height` of size `m x n` where `height[i][j]` is cell `(i, j)`'s height. If there are multiple solutions, return any of them.


Example 1:
Input: isWater = [[0,1],[0,0]]
Output: [[1,0],[2,1]]
Explanation: The image shows the assigned heights of each cell.

The blue cell is the water cell, and the green cells are the land cells.


Example 2:
Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]
Output: [[1,1,0],[0,1,1],[1,2,2]]
Explanation: A height of 2 is the maximum possible height of any assignment.

Any height assignment that has a maximum height of 2 while still meeting the rules will also be accepted.


Constraints:
`m == isWater.length`
`n == isWater[i].length`
`1 <= m, n <= 1000`
`isWater[i][j]` is `0` or `1`.

There is at least one water cell.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a tree (i.e., a connected, undirected graph that has no cycles) consisting of `n` nodes numbered from `0` to `n - 1` and exactly `n - 1` edges. Each node has a value associated with it, and the root of the tree is node `0`.

To represent this tree, you are given an integer array `nums` and a 2D array `edges`. Each `nums[i]` represents the `ith` node's value, and each `edges[j] = [uj, vj]` represents an edge between nodes `uj` and `vj` in the tree.

Two values `x` and `y` are coprime if `gcd(x, y) == 1` where `gcd(x, y)` is the greatest common divisor of `x` and `y`.

An ancestor of a node `i` is any other node on the shortest path from node `i` to the root. A node is not considered an ancestor of itself.

Return an array `ans` of size `n`, where `ans[i]` is the closest ancestor to node `i` such that `nums[i]` and `nums[ans[i]]` are coprime, or `-1` if there is no such ancestor.


Example 1:
Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]
Output: [-1,0,0,1]
Explanation: In the above figure, each node's value is in parentheses.

- Node 0 has no coprime ancestors.

- Node 1 has only one ancestor, node 0. Their values are coprime (gcd(2,3) == 1).

- Node 2 has two ancestors, nodes 1 and 0. Node 1's value is not coprime (gcd(3,3) == 3), but node 0's
  value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.

- Node 3 has two ancestors, nodes 1 and 0. It is coprime with node 1 (gcd(3,2) == 1), so node 1 is its
  closest valid ancestor.


Example 2:
Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]
Output: [-1,0,-1,0,0,0,-1]

Constraints:
`nums.length == n`
`1 <= nums[i] <= 50`
`1 <= n <= 105`
`edges.length == n - 1`
`edges[j].length == 2`
`0 <= uj, vj < n`
`uj != vj`",0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `word1` and `word2`. Merge the strings by adding letters in alternating order, starting with `word1`. If a string is longer than the other, append the additional letters onto the end of the merged string.

Return the merged string.


Example 1:
Input: word1 = ""abc"", word2 = ""pqr""
Output: ""apbqcr""
Explanation: The merged string will be merged as so:
word1:  a   b   c
word2:    p   q   r
merged: a p b q c r

Example 2:
Input: word1 = ""ab"", word2 = ""pqrs""
Output: ""apbqrs""
Explanation: Notice that as word2 is longer, ""rs"" is appended to the end.

word1:  a   b 
word2:    p   q   r   s
merged: a p b q   r   s

Example 3:
Input: word1 = ""abcd"", word2 = ""pq""
Output: ""apbqcd""
Explanation: Notice that as word1 is longer, ""cd"" is appended to the end.

word1:  a   b   c   d
word2:    p   q 
merged: a p b q c   d

Constraints:
`1 <= word1.length, word2.length <= 100`
`word1` and `word2` consist of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` boxes. You are given a binary string `boxes` of length `n`, where `boxes[i]` is `'0'` if the `ith` box is empty, and `'1'` if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box `i` is adjacent to box `j` if `abs(i - j) == 1`. Note that after doing so, there may be more than one ball in some boxes.

Return an array `answer` of size `n`, where `answer[i]` is the minimum number of operations needed to move all the balls to the `ith` box.

Each `answer[i]` is calculated considering the initial state of the boxes.


Example 1:
Input: boxes = ""110""
Output: [1,1,3]
Explanation: The answer for each box is as follows:
1) First box: you will have to move one ball from the second box to the first box in one operation.

2) Second box: you will have to move one ball from the first box to the second box in one operation.

3) Third box: you will have to move one ball from the first box to the third box in two operations, and move one ball from the second box to the third box in one operation.


Example 2:
Input: boxes = ""001011""
Output: [11,8,5,4,3,4]

Constraints:
`n == boxes.length`
`1 <= n <= 2000`
`boxes[i]` is either `'0'` or `'1'`.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two integer arrays `nums` and `multipliers` of size `n` and `m` respectively, where `n >= m`. The arrays are 1-indexed.

You begin with a score of `0`. You want to perform exactly `m` operations. On the `ith` operation (1-indexed), you will:
Choose one integer `x` from either the start or the end of the array `nums`.

Add `multipliers[i] * x` to your score.

Remove `x` from the array `nums`.

Return the maximum score after performing `m` operations.


Example 1:
Input: nums = [1,2,3], multipliers = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Choose from the end, [1,2,3], adding 3 * 3 = 9 to the score.

- Choose from the end, [1,2], adding 2 * 2 = 4 to the score.

- Choose from the end, [1], adding 1 * 1 = 1 to the score.

The total score is 9 + 4 + 1 = 14.


Example 2:
Input: nums = [-5,-3,-3,-2,7,1], multipliers = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Choose from the start, [-5,-3,-3,-2,7,1], adding -5 * -10 = 50 to the score.

- Choose from the start, [-3,-3,-2,7,1], adding -3 * -5 = 15 to the score.

- Choose from the start, [-3,-2,7,1], adding -3 * 3 = -9 to the score.

- Choose from the end, [-2,7,1], adding 1 * 4 = 4 to the score.

- Choose from the end, [-2,7], adding 7 * 6 = 42 to the score. 
The total score is 50 + 15 - 9 + 4 + 42 = 102.


Constraints:
`n == nums.length`
`m == multipliers.length`
`1 <= m <= 103`
`m <= n <= 105`` `
`-1000 <= nums[i], multipliers[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings, `word1` and `word2`. You want to construct a string in the following manner:
Choose some non-empty subsequence `subsequence1` from `word1`.

Choose some non-empty subsequence `subsequence2` from `word2`.

Concatenate the subsequences: `subsequence1 + subsequence2`, to make the string.

Return the length of the longest palindrome that can be constructed in the described manner. If no palindromes can be constructed, return `0`.

A subsequence of a string `s` is a string that can be made by deleting some (possibly none) characters from `s` without changing the order of the remaining characters.

A palindrome is a string that reads the same forward as well as backward.


Example 1:
Input: word1 = ""cacb"", word2 = ""cbba""
Output: 5
Explanation: Choose ""ab"" from word1 and ""cba"" from word2 to make ""abcba"", which is a palindrome.


Example 2:
Input: word1 = ""ab"", word2 = ""ab""
Output: 3
Explanation: Choose ""ab"" from word1 and ""a"" from word2 to make ""aba"", which is a palindrome.


Example 3:
Input: word1 = ""aa"", word2 = ""bb""
Output: 0
Explanation: You cannot construct a palindrome from the described method, so return 0.


Constraints:
`1 <= word1.length, word2.length <= 1000`
`word1` and `word2` consist of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string array `features` where `features[i]` is a single word that represents the name of a feature of the latest product you are working on. You have made a survey where users have reported which features they like. You are given a string array `responses`, where each `responses[i]` is a string containing space-separated words.

The popularity of a feature is the number of `responses[i]` that contain the feature. You want to sort the features in non-increasing order by their popularity. If two features have the same popularity, order them by their original index in `features`. Notice that one response could contain the same feature multiple times; this feature is only counted once in its popularity.

Return the features in sorted order.


Example 1:
Input: features = [""cooler"",""lock"",""touch""], responses = [""i like cooler cooler"",""lock touch cool"",""locker like touch""]
Output: [""touch"",""cooler"",""lock""]
Explanation: appearances(""cooler"") = 1, appearances(""lock"") = 1, appearances(""touch"") = 2. Since ""cooler"" and ""lock"" both had 1 appearance, ""cooler"" comes first because ""cooler"" came first in the features array.


Example 2:
Input: features = [""a"",""aa"",""b"",""c""], responses = [""a"",""a aa"",""a a a a a"",""b a""]
Output: [""a"",""aa"",""b"",""c""]

Constraints:
`1 <= features.length <= 104`
`1 <= features[i].length <= 10`
`features` contains no duplicates.

`features[i]` consists of lowercase letters.

`1 <= responses.length <= 102`
`1 <= responses[i].length <= 103`
`responses[i]` consists of lowercase letters and spaces.

`responses[i]` contains no two consecutive spaces.

`responses[i]` has no leading or trailing spaces.",0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `items`, where each `items[i] = [typei, colori, namei]` describes the type, color, and name of the `ith` item. You are also given a rule represented by two strings, `ruleKey` and `ruleValue`.

The `ith` item is said to match the rule if one of the following is true:
`ruleKey == ""type""` and `ruleValue == typei`.

`ruleKey == ""color""` and `ruleValue == colori`.

`ruleKey == ""name""` and `ruleValue == namei`.

Return the number of items that match the given rule.


Example 1:
Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""lenovo""],[""phone"",""gold"",""iphone""]], ruleKey = ""color"", ruleValue = ""silver""
Output: 1
Explanation: There is only one item matching the given rule, which is [""computer"",""silver"",""lenovo""].


Example 2:
Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""phone""],[""phone"",""gold"",""iphone""]], ruleKey = ""type"", ruleValue = ""phone""
Output: 2
Explanation: There are only two items matching the given rule, which are [""phone"",""blue"",""pixel""] and [""phone"",""gold"",""iphone""]. Note that the item [""computer"",""silver"",""phone""] does not match.


Constraints:
`1 <= items.length <= 104`
`1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`
`ruleKey` is equal to either `""type""`, `""color""`, or `""name""`.

All strings consist only of lowercase letters.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You would like to make dessert and are preparing to buy the ingredients. You have `n` ice cream base flavors and `m` types of toppings to choose from. You must follow these rules when making your dessert:
There must be exactly one ice cream base.

You can add one or more types of topping or have no toppings at all.

There are at most two of each type of topping.

You are given three inputs:
`baseCosts`, an integer array of length `n`, where each `baseCosts[i]` represents the price of the `ith` ice cream base flavor.

`toppingCosts`, an integer array of length `m`, where each `toppingCosts[i]` is the price of one of the `ith` topping.

`target`, an integer representing your target price for dessert.

You want to make a dessert with a total cost as close to `target` as possible.

Return the closest possible cost of the dessert to `target`. If there are multiple, return the lower one.


Example 1:
Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10
Output: 10
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 7
- Take 1 of topping 0: cost 1 x 3 = 3
- Take 0 of topping 1: cost 0 x 4 = 0
Total: 7 + 3 + 0 = 10.


Example 2:
Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
Output: 17
Explanation: Consider the following combination (all 0-indexed):
- Choose base 1: cost 3
- Take 1 of topping 0: cost 1 x 4 = 4
- Take 2 of topping 1: cost 2 x 5 = 10
- Take 0 of topping 2: cost 0 x 100 = 0
Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.


Example 3:
Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9
Output: 8
Explanation: It is possible to make desserts with cost 8 and 10. Return 8 as it is the lower cost.


Example 4:
Input: baseCosts = [10], toppingCosts = [1], target = 1
Output: 10
Explanation: Notice that you don't have to have any toppings, but you must have exactly one base.


Constraints:
`n == baseCosts.length`
`m == toppingCosts.length`
`1 <= n, m <= 10`
`1 <= baseCosts[i], toppingCosts[i] <= 104`
`1 <= target <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two arrays of integers `nums1` and `nums2`, possibly of different lengths. The values in the arrays are between `1` and `6`, inclusive.

In one operation, you can change any integer's value in any of the arrays to any value between `1` and `6`, inclusive.

Return the minimum number of operations required to make the sum of values in `nums1` equal to the sum of values in `nums2`. Return `-1`​​​​​ if it is not possible to make the sum of the two arrays equal.


Example 1:
Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.

- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].

- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].

- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].


Example 2:
Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
Output: -1
Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.


Example 3:
Input: nums1 = [6,6], nums2 = [1]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. 
- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].

- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].

- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].


Constraints:
`1 <= nums1.length, nums2.length <= 105`
`1 <= nums1[i], nums2[i] <= 6`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cars traveling at different speeds in the same direction along a one-lane road. You are given an array `cars` of length `n`, where `cars[i] = [positioni, speedi]` represents:
`positioni` is the distance between the `ith` car and the beginning of the road in meters. It is guaranteed that `positioni < positioni+1`.

`speedi` is the initial speed of the `ith` car in meters per second.

For simplicity, cars can be considered as points moving along the number line. Two cars collide when they occupy the same position. Once a car collides with another car, they unite and form a single car fleet. The cars in the formed fleet will have the same position and the same speed, which is the initial speed of the slowest car in the fleet.

Return an array `answer`, where `answer[i]` is the time, in seconds, at which the `ith` car collides with the next car, or `-1` if the car does not collide with the next car. Answers within `10-5` of the actual answers are accepted.


Example 1:
Input: cars = [[1,2],[2,1],[4,3],[7,2]]
Output: [1.00000,-1.00000,3.00000,-1.00000]
Explanation: After exactly one second, the first car will collide with the second car, and form a car fleet with speed 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car, and form a car fleet with speed 2 m/s.


Example 2:
Input: cars = [[3,4],[5,4],[6,3],[9,1]]
Output: [2.00000,1.00000,1.50000,-1.00000]

Constraints:
`1 <= cars.length <= 105`
`1 <= positioni, speedi <= 106`
`positioni < positioni+1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is an interactive problem.

There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.

You want to find the minimum distance to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.

Thr `GridMaster` class has the following functions:
`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.

`void move(char direction)` Moves the robot in that direction. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, and the robot will remain in the same position.

`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.

Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.

Return the minimum distance between the robot's initial starting cell and the target cell. If there is no valid path between the cells, return `-1`.

Custom testing:
The test input is read as a 2D matrix `grid` of size `m x n` where:
`grid[i][j] == -1` indicates that the robot is in cell `(i, j)` (the starting cell).

`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.

`grid[i][j] == 1` indicates that the cell `(i, j)` is empty.

`grid[i][j] == 2` indicates that the cell `(i, j)` is the target cell.

There is exactly one `-1` and `2` in `grid`. Remember that you will not have this information in your code.


Example 1:
Input: grid = [[1,2],[-1,0]]
Output: 2
Explanation: One possible interaction is described below:
The robot is initially standing on cell (1, 0), denoted by the -1.

- master.canMove('U') returns true.

- master.canMove('D') returns false.

- master.canMove('L') returns false.

- master.canMove('R') returns false.

- master.move('U') moves the robot to the cell (0, 0).

- master.isTarget() returns false.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns false.

- master.canMove('R') returns true.

- master.move('R') moves the robot to the cell (0, 1).

- master.isTarget() returns true. 
We now know that the target is the cell (0, 1), and the shortest path to the target cell is 2.


Example 2:
Input: grid = [[0,0,-1],[1,1,1],[2,0,0]]
Output: 4
Explanation: The minimum distance between the robot and the target cell is 4.


Example 3:
Input: grid = [[-1,0],[0,2]]
Output: -1
Explanation: There is no path from the robot to the target cell.


Constraints:
`1 <= n, m <= 500`
`m == grid.length`
`n == grid[i].length`
`grid[i][j]` is either `-1`, `0`, `1`, or `2`.

There is exactly one `-1` in `grid`.

There is exactly one `2` in `grid`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two integers, `x` and `y`, which represent your current location on a Cartesian grid: `(x, y)`. You are also given an array `points` where each `points[i] = [ai, bi]` represents that a point exists at `(ai, bi)`. A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.

Return the index (0-indexed) of the valid point with the smallest Manhattan distance from your current location. If there are multiple, return the valid point with the smallest index. If there are no valid points, return `-1`.

The Manhattan distance between two points `(x1, y1)` and `(x2, y2)` is `abs(x1 - x2) + abs(y1 - y2)`.


Example 1:
Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
Output: 2
Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance from your current location, with a distance of 1. [2,4] has the smallest index, so return 2.


Example 2:
Input: x = 3, y = 4, points = [[3,4]]
Output: 0
Explanation: The answer is allowed to be on the same location as your current location.


Example 3:
Input: x = 3, y = 4, points = [[2,3]]
Output: -1
Explanation: There are no valid points.


Constraints:
`1 <= points.length <= 104`
`points[i].length == 2`
`1 <= x, y, ai, bi <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return `true` if it is possible to represent `n` as the sum of distinct powers of three. Otherwise, return `false`.

An integer `y` is a power of three if there exists an integer `x` such that `y == 3x`.


Example 1:
Input: n = 12
Output: true
Explanation: 12 = 31 + 32

Example 2:
Input: n = 91
Output: true
Explanation: 91 = 30 + 32 + 34

Example 3:
Input: n = 21
Output: false

Constraints:
`1 <= n <= 107`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The beauty of a string is the difference in frequencies between the most frequent and least frequent characters.

For example, the beauty of `""abaacc""` is `3 - 1 = 2`.

Given a string `s`, return the sum of beauty of all of its substrings.


Example 1:
Input: s = ""aabcb""
Output: 5
Explanation: The substrings with non-zero beauty are [""aab"",""aabc"",""aabcb"",""abcb"",""bcb""], each with beauty equal to 1.


Example 2:
Input: s = ""aabcbaa""
Output: 17

Constraints:
`1 <= s.length <= 500`
`s` consists of only lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an undirected graph represented by an integer `n`, which is the number of nodes, and `edges`, where `edges[i] = [ui, vi]` which indicates that there is an undirected edge between `ui` and `vi`. You are also given an integer array `queries`.

The answer to the `jth` query is the number of pairs of nodes `(a, b)` that satisfy the following conditions:
`a < b`
`cnt` is strictly greater than `queries[j]`, where `cnt` is the number of edges incident to `a` or `b`.

Return an array `answers` such that `answers.length == queries.length` and `answers[j]` is the answer of the `jth` query.

Note that there can be repeated edges.


Example 1:
Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], queries = [2,3]
Output: [6,5]
Explanation: The number of edges incident to at least one of each pair is shown above.


Example 2:
Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3],[2,5]], queries = [1,2,3,4,5]
Output: [10,10,9,8,6]

Constraints:
`2 <= n <= 2 * 104`
`1 <= edges.length <= 105`
`1 <= ui, vi <= n`
`ui != vi`
`1 <= queries.length <= 20`
`0 <= queries[j] < edges.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string `s` ​​​​​without leading zeros, return `true`​​​ if `s` contains at most one contiguous segment of ones. Otherwise, return `false`.


Example 1:
Input: s = ""1001""
Output: false
Explanation: The ones do not form a contiguous segment.


Example 2:
Input: s = ""110""
Output: true

Constraints:
`1 <= s.length <= 100`
`s[i]`​​​​ is either `'0'` or `'1'`.

`s[0]` is `'1'`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums` and two integers `limit` and `goal`. The array `nums` has an interesting property that `abs(nums[i]) <= limit`.

Return the minimum number of elements you need to add to make the sum of the array equal to `goal`. The array must maintain its property that `abs(nums[i]) <= limit`.

Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.


Example 1:
Input: nums = [1,-1,1], limit = 3, goal = -4
Output: 2
Explanation: You can add -2 and -3, then the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.


Example 2:
Input: nums = [1,-10,9,1], limit = 100, goal = 0
Output: 1

Constraints:
`1 <= nums.length <= 105`
`1 <= limit <= 106`
`-limit <= nums[i] <= limit`
`-109 <= goal <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an undirected weighted connected graph. You are given a positive integer `n` which denotes that the graph has `n` nodes labeled from `1` to `n`, and an array `edges` where each `edges[i] = [ui, vi, weighti]` denotes that there is an edge between nodes `ui` and `vi` with weight equal to `weighti`.

A path from node `start` to node `end` is a sequence of nodes `[z0, z1, z2, ..., zk]` such that `z0 = start` and `zk = end` and there is an edge between `zi` and `zi+1` where `0 <= i <= k-1`.

The distance of a path is the sum of the weights on the edges of the path. Let `distanceToLastNode(x)` denote the shortest distance of a path between node `n` and node `x`. A restricted path is a path that also satisfies that `distanceToLastNode(zi) > distanceToLastNode(zi+1)` where `0 <= i <= k-1`.

Return the number of restricted paths from node `1` to node `n`. Since that number may be too large, return it modulo `109 + 7`.


Example 1:
Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[3,5,1],[5,4,10]]
Output: 3
Explanation: Each circle contains the node number in black and its `distanceToLastNode value in blue. `The three restricted paths are:
1) 1 --> 2 --> 5
2) 1 --> 2 --> 3 --> 5
3) 1 --> 3 --> 5

Example 2:
Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[6,7,2],[7,5,3],[2,6,4]]
Output: 1
Explanation: Each circle contains the node number in black and its `distanceToLastNode value in blue. `The only restricted path is 1 --> 3 --> 7.


Constraints:
`1 <= n <= 2 * 104`
`n - 1 <= edges.length <= 4 * 104`
`edges[i].length == 3`
`1 <= ui, vi <= n`
`ui != vi`
`1 <= weighti <= 105`
There is at most one edge between any two nodes.

There is at least one path between any two nodes.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `nums`​​​ and an integer `k`​​​​​. The XOR of a segment `[left, right]` where `left <= right` is the `XOR` of all the elements with indices between `left` and `right`, inclusive: `nums[left] XOR nums[left+1] XOR ... XOR nums[right]`.

Return the minimum number of elements to change in the array such that the `XOR` of all segments of size `k`​​​​​​ is equal to zero.


Example 1:
Input: nums = [1,2,0,3,0], k = 1
Output: 3
Explanation: Modify the array from [1,2,0,3,0] to from [0,0,0,0,0].


Example 2:
Input: nums = [3,4,5,2,1,7,3,4,7], k = 3
Output: 3
Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].


Example 3:
Input: nums = [1,2,4,1,2,5,1,2,6], k = 3
Output: 3
Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].


Constraints:
`1 <= k <= nums.length <= 2000`
`​​​​​​0 <= nums[i] < 210`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a garden of `n` flowers, and each flower has an integer beauty value. The flowers are arranged in a line. You are given an integer array `flowers` of size `n` and each `flowers[i]` represents the beauty of the `ith` flower.

A garden is valid if it meets these conditions:
The garden has at least two flowers.

The first and the last flower of the garden have the same beauty value.

As the appointed gardener, you have the ability to remove any (possibly none) flowers from the garden. You want to remove flowers in a way that makes the remaining garden valid. The beauty of the garden is the sum of the beauty of all the remaining flowers.

Return the maximum possible beauty of some valid garden after you have removed any (possibly none) flowers.


Example 1:
Input: flowers = [1,2,3,1,2]
Output: 8
Explanation: You can produce the valid garden [2,3,1,2] to have a total beauty of 2 + 3 + 1 + 2 = 8.


Example 2:
Input: flowers = [100,1,1,-3,1]
Output: 3
Explanation: You can produce the valid garden [1,1,1] to have a total beauty of 1 + 1 + 1 = 3.


Example 3:
Input: flowers = [-1,-2,0,-1]
Output: -2
Explanation: You can produce the valid garden [-1,-1] to have a total beauty of -1 + -1 = -2.


Constraints:
`2 <= flowers.length <= 105`
`-104 <= flowers[i] <= 104`
It is possible to create a valid garden by removing some (possibly none) flowers.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `s1` and `s2` of equal length. A string swap is an operation where you choose two indices in a string (not necessarily different) and swap the characters at these indices.

Return `true` if it is possible to make both strings equal by performing at most one string swap on exactly one of the strings. Otherwise, return `false`.


Example 1:
Input: s1 = ""bank"", s2 = ""kanb""
Output: true
Explanation: For example, swap the first character with the last character of s2 to make ""bank"".


Example 2:
Input: s1 = ""attack"", s2 = ""defend""
Output: false
Explanation: It is impossible to make them equal with one string swap.


Example 3:
Input: s1 = ""kelb"", s2 = ""kelb""
Output: true
Explanation: The two strings are already equal, so no string swap operation is required.


Example 4:
Input: s1 = ""abcd"", s2 = ""dcba""
Output: false

Constraints:
`1 <= s1.length, s2.length <= 100`
`s1.length == s2.length`
`s1` and `s2` consist of only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an undirected star graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one center node and exactly `n - 1` edges that connect the center node with every other node.

You are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.


Example 1:
Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the figure above, node 2 is connected to every other node, so 2 is the center.


Example 2:
Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1

Constraints:
`3 <= n <= 105`
`edges.length == n - 1`
`edges[i].length == 2`
`1 <= ui, vi <= n`
`ui != vi`
The given `edges` represent a valid star graph.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a school that has classes of students and each class will be having a final exam. You are given a 2D integer array `classes`, where `classes[i] = [passi, totali]`. You know beforehand that in the `ith` class, there are `totali` total students, but only `passi` number of students will pass the exam.

You are also given an integer `extraStudents`. There are another `extraStudents` brilliant students that are guaranteed to pass the exam of any class they are assigned to. You want to assign each of the `extraStudents` students to a class in a way that maximizes the average pass ratio across all the classes.

The pass ratio of a class is equal to the number of students of the class that will pass the exam divided by the total number of students of the class. The average pass ratio is the sum of pass ratios of all the classes divided by the number of the classes.

Return the maximum possible average pass ratio after assigning the `extraStudents` students. Answers within `10-5` of the actual answer will be accepted.


Example 1:
Input: classes = [[1,2],[3,5],[2,2]], `extraStudents` = 2
Output: 0.78333
Explanation: You can assign the two extra students to the first class. The average pass ratio will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.


Example 2:
Input: classes = [[2,4],[3,9],[4,5],[2,10]], `extraStudents` = 4
Output: 0.53485

Constraints:
`1 <= classes.length <= 105`
`classes[i].length == 2`
`1 <= passi <= totali <= 105`
`1 <= extraStudents <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of integers `nums` (0-indexed) and an integer `k`.

The score of a subarray `(i, j)` is defined as `min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)`. A good subarray is a subarray where `i <= k <= j`.

Return the maximum possible score of a good subarray.


Example 1:
Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5) with a score of min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15. 

Example 2:
Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4) with a score of min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.


Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 2 * 104`
`0 <= k < nums.length`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two strings `firstString` and `secondString` that are 0-indexed and consist only of lowercase English letters. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:
`0 <= i <= j < firstString.length`
`0 <= a <= b < secondString.length`
The substring of `firstString` that starts at the `ith` character and ends at the `jth` character (inclusive) is equal to the substring of `secondString` that starts at the `ath` character and ends at the `bth` character (inclusive).

`j - a` is the minimum possible value among all quadruples that satisfy the previous conditions.

Return the number of such quadruples.


Example 1:
Input: firstString = ""abcd"", secondString = ""bccda""
Output: 1
Explanation: The quadruple (0,0,4,4) is the only one that satisfies all the conditions and minimizes j - a.


Example 2:
Input: firstString = ""ab"", secondString = ""cd""
Output: 0
Explanation: There are no quadruples satisfying all the conditions.


Constraints:
`1 <= firstString.length, secondString.length <= 2 * 105`
Both strings consist only of lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an alphanumeric string `s`, return the second largest numerical digit that appears in `s`, or `-1` if it does not exist.

An alphanumeric string is a string consisting of lowercase English letters and digits.


Example 1:
Input: s = ""dfa12321afd""
Output: 2
Explanation: The digits that appear in s are [1, 2, 3]. The second largest digit is 2.


Example 2:
Input: s = ""abc1111""
Output: -1
Explanation: The digits that appear in s are [1]. There is no second largest digit. 

Constraints:
`1 <= s.length <= 500`
`s` consists of only lowercase English letters and/or digits.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an authentication system that works with authentication tokens. For each session, the user will receive a new authentication token that will expire `timeToLive` seconds after the `currentTime`. If the token is renewed, the expiry time will be extended to expire `timeToLive` seconds after the (potentially different) `currentTime`.

Implement the `AuthenticationManager` class:
`AuthenticationManager(int timeToLive)` constructs the `AuthenticationManager` and sets the `timeToLive`.

`generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.

`renew(string tokenId, int currentTime)` renews the unexpired token with the given `tokenId` at the given `currentTime` in seconds. If there are no unexpired tokens with the given `tokenId`, the request is ignored, and nothing happens.

`countUnexpiredTokens(int currentTime)` returns the number of unexpired tokens at the given currentTime.

Note that if a token expires at time `t`, and another action happens on time `t` (`renew` or `countUnexpiredTokens`), the expiration takes place before the other actions.


Example 1:
Input
[""AuthenticationManager"", ""`renew`"", ""generate"", ""`countUnexpiredTokens`"", ""generate"", ""`renew`"", ""`renew`"", ""`countUnexpiredTokens`""]
[[5], [""aaa"", 1], [""aaa"", 2], [6], [""bbb"", 7], [""aaa"", 8], [""bbb"", 10], [15]]
Output
[null, null, null, 1, null, null, null, 0]
Explanation
AuthenticationManager authenticationManager = new AuthenticationManager(5); // Constructs the AuthenticationManager with `timeToLive` = 5 seconds.

authenticationManager.`renew`(""aaa"", 1); // No token exists with tokenId ""aaa"" at time 1, so nothing happens.

authenticationManager.generate(""aaa"", 2); // Generates a new token with tokenId ""aaa"" at time 2.

authenticationManager.`countUnexpiredTokens`(6); // The token with tokenId ""aaa"" is the only unexpired one at time 6, so return 1.

authenticationManager.generate(""bbb"", 7); // Generates a new token with tokenId ""bbb"" at time 7.

authenticationManager.`renew`(""aaa"", 8); // The token with tokenId ""aaa"" expired at time 7, and 8 >= 7, so at time 8 the `renew` request is ignored, and nothing happens.

authenticationManager.`renew`(""bbb"", 10); // The token with tokenId ""bbb"" is unexpired at time 10, so the `renew` request is fulfilled and now the token will expire at time 15.

authenticationManager.`countUnexpiredTokens`(15); // The token with tokenId ""bbb"" expires at time 15, and the token with tokenId ""aaa"" expired at time 7, so currently no token is unexpired, so return 0.


Constraints:
`1 <= timeToLive <= 108`
`1 <= currentTime <= 108`
`1 <= tokenId.length <= 5`
`tokenId` consists only of lowercase letters.

All calls to `generate` will contain unique values of `tokenId`.

The values of `currentTime` across all the function calls will be strictly increasing.

At most `2000` calls will be made to all functions combined.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `coins` of length `n` which represents the `n` coins that you own. The value of the `ith` coin is `coins[i]`. You can make some value `x` if you can choose some of your `n` coins such that their values sum up to `x`.

Return the maximum number of consecutive integer values that you can make with your coins starting from and including `0`.

Note that you may have multiple coins of the same value.


Example 1:
Input: coins = [1,3]
Output: 2
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
You can make 2 consecutive integer values starting from 0.


Example 2:
Input: coins = [1,1,1,4]
Output: 8
Explanation: You can make the following values:
- 0: take []
- 1: take [1]
- 2: take [1,1]
- 3: take [1,1,1]
- 4: take [4]
- 5: take [4,1]
- 6: take [4,1,1]
- 7: take [4,1,1,1]
You can make 8 consecutive integer values starting from 0.


Example 3:
Input: nums = [1,4,10,3,1]
Output: 20

Constraints:
`coins.length == n`
`1 <= n <= 4 * 104`
`1 <= coins[i] <= 4 * 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `nums`, an array of positive integers of size `2 * n`. You must perform `n` operations on this array.

In the `ith` operation (1-indexed), you will:
Choose two elements, `x` and `y`.

Receive a score of `i * gcd(x, y)`.

Remove `x` and `y` from `nums`.

Return the maximum score you can receive after performing `n` operations.

The function `gcd(x, y)` is the greatest common divisor of `x` and `y`.


Example 1:
Input: nums = [1,2]
Output: 1
Explanation: The optimal choice of operations is:
(1 * gcd(1, 2)) = 1

Example 2:
Input: nums = [3,4,6,8]
Output: 11
Explanation: The optimal choice of operations is:
(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11

Example 3:
Input: nums = [1,2,3,4,5,6]
Output: 14
Explanation: The optimal choice of operations is:
(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14

Constraints:
`1 <= n <= 7`
`nums.length == 2 * n`
`1 <= nums[i] <= 106`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers `nums`, return the maximum possible sum of an ascending subarray in `nums`.

A subarray is defined as a contiguous sequence of numbers in an array.

A subarray `[numsl, numsl+1, ..., numsr-1, numsr]` is ascending if for all `i` where `l <= i < r`, `numsi  < numsi+1`. Note that a subarray of size `1` is ascending.


Example 1:
Input: nums = [10,20,30,5,10,50]
Output: 65
Explanation: [5,10,50] is the ascending subarray with the maximum sum of 65.


Example 2:
Input: nums = [10,20,30,40,50]
Output: 150
Explanation: [10,20,30,40,50] is the ascending subarray with the maximum sum of 150.


Example 3:
Input: nums = [12,17,15,13,10,11,12]
Output: 33
Explanation: [10,11,12] is the ascending subarray with the maximum sum of 33.


Example 4:
Input: nums = [100,10,1]
Output: 100

Constraints:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a 2D integer array `orders`, where each `orders[i] = [pricei, amounti, orderTypei]` denotes that `amounti` orders have been placed of type `orderTypei` at the price `pricei`. The `orderTypei` is:
`0` if it is a batch of `buy` orders, or
`1` if it is a batch of `sell` orders.

Note that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. All orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]` for all valid `i`.

There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:
If the order is a `buy` order, you look at the `sell` order with the smallest price in the backlog. If that `sell` order's price is smaller than or equal to the current `buy` order's price, they will match and be executed, and that `sell` order will be removed from the backlog. Else, the `buy` order is added to the backlog.

Vice versa, if the order is a `sell` order, you look at the `buy` order with the largest price in the backlog. If that `buy` order's price is larger than or equal to the current `sell` order's price, they will match and be executed, and that `buy` order will be removed from the backlog. Else, the `sell` order is added to the backlog.

Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo `109 + 7`.


Example 1:
Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
Output: 6
Explanation: Here is what happens with the orders:
- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.

- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.

- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.

- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.

Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.


Example 2:
Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
Output: 999999984
Explanation: Here is what happens with the orders:
- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.

- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.

- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.

- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.

Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).


Constraints:
`1 <= orders.length <= 105`
`orders[i].length == 3`
`1 <= pricei, amounti <= 109`
`orderTypei` is either `0` or `1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given three positive integers: `n`, `index`, and `maxSum`. You want to construct an array `nums` (0-indexed) that satisfies the following conditions:
`nums.length == n`
`nums[i]` is a positive integer where `0 <= i < n`.

`abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.

The sum of all the elements of `nums` does not exceed `maxSum`.

`nums[index]` is maximized.

Return `nums[index]` of the constructed array.

Note that `abs(x)` equals `x` if `x >= 0`, and `-x` otherwise.


Example 1:
Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.

There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].


Example 2:
Input: n = 6, index = 1,  maxSum = 10
Output: 3

Constraints:
`1 <= n <= maxSum <= 109`
`0 <= index < n`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a (0-indexed) integer array `nums` and two integers `low` and `high`, return the number of nice pairs.

A nice pair is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.


Example 1:
Input: nums = [1,4,2,7], low = 2, high = 6
Output: 6
Explanation: All nice pairs (i, j) are as follows:
    - (0, 1): nums[0] XOR nums[1] = 5 
    - (0, 2): nums[0] XOR nums[2] = 3
    - (0, 3): nums[0] XOR nums[3] = 6
    - (1, 2): nums[1] XOR nums[2] = 6
    - (1, 3): nums[1] XOR nums[3] = 3
    - (2, 3): nums[2] XOR nums[3] = 5

Example 2:
Input: nums = [9,8,4,2,1], low = 5, high = 14
Output: 8
Explanation: All nice pairs (i, j) are as follows:
​​​​​    - (0, 2): nums[0] XOR nums[2] = 13
    - (0, 3): nums[0] XOR nums[3] = 11
    - (0, 4): nums[0] XOR nums[4] = 8
    - (1, 2): nums[1] XOR nums[2] = 12
    - (1, 3): nums[1] XOR nums[3] = 10
    - (1, 4): nums[1] XOR nums[4] = 9
    - (2, 3): nums[2] XOR nums[3] = 6
    - (2, 4): nums[2] XOR nums[4] = 5

Constraints:
`1 <= nums.length <= 2 * 104`
`1 <= nums[i] <= 2 * 104`
`1 <= low <= high <= 2 * 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an even integer `n`​​​​​​. You initially have a permutation `perm` of size `n`​​ where `perm[i] == i`​ (0-indexed)​​​​.

In one operation, you will create a new array `arr`, and for each `i`:
If `i % 2 == 0`, then `arr[i] = perm[i / 2]`.

If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.

You will then assign `arr`​​​​ to `perm`.

Return the minimum non-zero number of operations you need to perform on `perm` to return the permutation to its initial value.


Example 1:
Input: n = 2
Output: 1
Explanation: perm = [0,1] initially.

After the 1st operation, perm = [0,1]
So it takes only 1 operation.


Example 2:
Input: n = 4
Output: 2
Explanation: perm = [0,1,2,3] initially.

After the 1st operation, perm = [0,2,1,3]
After the 2nd operation, perm = [0,1,2,3]
So it takes only 2 operations.


Example 3:
Input: n = 6
Output: 4

Constraints:
`2 <= n <= 1000`
`n`​​​​​​ is even.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string `s` that contains some bracket pairs, with each pair containing a non-empty key.

For example, in the string `""(name)is(age)yearsold""`, there are two bracket pairs that contain the keys `""name""` and `""age""`.

You know the values of a wide range of keys. This is represented by a 2D string array `knowledge` where each `knowledge[i] = [keyi, valuei]` indicates that key `keyi` has a value of `valuei`.

You are tasked to evaluate all of the bracket pairs. When you evaluate a bracket pair that contains some key `keyi`, you will:
Replace `keyi` and the bracket pair with the key's corresponding `valuei`.

If you do not know the value of the key, you will replace `keyi` and the bracket pair with a question mark `""?""` (without the quotation marks).

Each key will appear at most once in your `knowledge`. There will not be any nested brackets in `s`.

Return the resulting string after evaluating all of the bracket pairs.


Example 1:
Input: s = ""(name)is(age)yearsold"", knowledge = [[""name"",""bob""],[""age"",""two""]]
Output: ""bobistwoyearsold""
Explanation:
The key ""name"" has a value of ""bob"", so replace ""(name)"" with ""bob"".

The key ""age"" has a value of ""two"", so replace ""(age)"" with ""two"".


Example 2:
Input: s = ""hi(name)"", knowledge = [[""a"",""b""]]
Output: ""hi?""
Explanation: As you do not know the value of the key ""name"", replace ""(name)"" with ""?"".


Example 3:
Input: s = ""(a)(a)(a)aaa"", knowledge = [[""a"",""yes""]]
Output: ""yesyesyesaaa""
Explanation: The same key can appear multiple times.

The key ""a"" has a value of ""yes"", so replace all occurrences of ""(a)"" with ""yes"".

Notice that the ""a""s not in a bracket pair are not evaluated.


Example 4:
Input: s = ""(a)(b)"", knowledge = [[""a"",""b""],[""b"",""a""]]
Output: ""ba""

Constraints:
`1 <= s.length <= 105`
`0 <= knowledge.length <= 105`
`knowledge[i].length == 2`
`1 <= keyi.length, valuei.length <= 10`
`s` consists of lowercase English letters and round brackets `'('` and `')'`.

Every open bracket `'('` in `s` will have a corresponding close bracket `')'`.

The key in each bracket pair of `s` will be non-empty.

There will not be any nested bracket pairs in `s`.

`keyi` and `valuei` consist of lowercase English letters.

Each `keyi` in `knowledge` is unique.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a positive integer `primeFactors`. You are asked to construct a positive integer `n` that satisfies the following conditions:
The number of prime factors of `n` (not necessarily distinct) is at most `primeFactors`.

The number of nice divisors of `n` is maximized. Note that a divisor of `n` is nice if it is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are nice divisors, while `3` and `4` are not.

Return the number of nice divisors of `n`. Since that number can be too large, return it modulo `109 + 7`.

Note that a prime number is a natural number greater than `1` that is not a product of two smaller natural numbers. The prime factors of a number `n` is a list of prime numbers such that their product equals `n`.


Example 1:
Input: primeFactors = 5
Output: 6
Explanation: 200 is a valid value of n.

It has 5 prime factors: [2,2,2,5,5], and it has 6 nice divisors: [10,20,40,50,100,200].

There is not other value of n that has at most 5 prime factors and more nice divisors.


Example 2:
Input: primeFactors = 8
Output: 18

Constraints:
`1 <= primeFactors <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is an interactive problem.

There is a robot in a hidden grid, and you are trying to get it from its starting cell to the target cell in this grid. The grid is of size `m x n`, and each cell in the grid is either empty or blocked. It is guaranteed that the starting cell and the target cell are different, and neither of them is blocked.

Each cell has a cost that you need to pay each time you move to the cell. The starting cell's cost is not applied before the robot moves.

You want to find the minimum total cost to move the robot to the target cell. However, you do not know the grid's dimensions, the starting cell, nor the target cell. You are only allowed to ask queries to the `GridMaster` object.

The `GridMaster` class has the following functions:
`boolean canMove(char direction)` Returns `true` if the robot can move in that direction. Otherwise, it returns `false`.

`int move(char direction)` Moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot to a blocked cell or off the grid, the move will be ignored, the robot will remain in the same position, and the function will return `-1`.

`boolean isTarget()` Returns `true` if the robot is currently on the target cell. Otherwise, it returns `false`.

Note that `direction` in the above functions should be a character from `{'U','D','L','R'}`, representing the directions up, down, left, and right, respectively.

Return the minimum total cost to get the robot from its initial starting cell to the target cell. If there is no valid path between the cells, return `-1`.

Custom testing:
The test input is read as a 2D matrix `grid` of size `m x n` and four integers `r1`, `c1`, `r2`, and `c2` where:
`grid[i][j] == 0` indicates that the cell `(i, j)` is blocked.

`grid[i][j] >= 1` indicates that the cell `(i, j)` is empty and `grid[i][j]` is the cost to move to that cell.

`(r1, c1)` is the starting cell of the robot.

`(r2, c2)` is the target cell of the robot.

Remember that you will not have this information in your code.


Example 1:
Input: grid = [[2,3],[1,1]], r1 = 0, c1 = 1, r2 = 1, c2 = 0
Output: 2
Explanation: One possible interaction is described below:
The robot is initially standing on cell (0, 1), denoted by the 3.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns true.

- master.canMove('R') returns false.

- master.move('L') moves the robot to the cell (0, 0) and returns 2.

- master.isTarget() returns false.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns false.

- master.canMove('R') returns true.

- master.move('D') moves the robot to the cell (1, 0) and returns 1.

- master.isTarget() returns true.

- master.move('L') doesn't move the robot and returns -1.

- master.move('R') moves the robot to the cell (1, 1) and returns 1.

We now know that the target is the cell (0, 1), and the minimum total cost to reach it is 2. 

Example 2:
Input: grid = [[0,3,1],[3,4,2],[1,2,0]], r1 = 2, c1 = 0, r2 = 0, c2 = 2
Output: 9
Explanation: The minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2).


Example 3:
Input: grid = [[1,0],[0,1]], r1 = 0, c1 = 0, r2 = 1, c2 = 1
Output: -1
Explanation: There is no path from the robot to the target cell.


Constraints:
`1 <= n, m <= 100`
`m == grid.length`
`n == grid[i].length`
`0 <= grid[i][j] <= 100`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given `coordinates`, a string that represents the coordinates of a square of the chessboard. Below is a chessboard for your reference.

Return `true` if the square is white, and `false` if the square is black.

The coordinate will always represent a valid chessboard square. The coordinate will always have the letter first, and the number second.


Example 1:
Input: coordinates = ""a1""
Output: false
Explanation: From the chessboard above, the square with coordinates ""a1"" is black, so return false.


Example 2:
Input: coordinates = ""h3""
Output: true
Explanation: From the chessboard above, the square with coordinates ""h3"" is white, so return true.


Example 3:
Input: coordinates = ""c7""
Output: false

Constraints:
`coordinates.length == 2`
`'a' <= coordinates[0] <= 'h'`
`'1' <= coordinates[1] <= '8'`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sentence is a list of words that are separated by a single space with no leading or trailing spaces. For example, `""Hello World""`, `""HELLO""`, `""hello world hello world""` are all sentences. Words consist of only uppercase and lowercase English letters.

Two sentences `sentence1` and `sentence2` are similar if it is possible to insert an arbitrary sentence (possibly empty) inside one of these sentences such that the two sentences become equal. For example, `sentence1 = ""Hello my name is Jane""` and `sentence2 = ""Hello Jane""` can be made equal by inserting `""my name is""` between `""Hello""` and `""Jane""` in `sentence2`.

Given two sentences `sentence1` and `sentence2`, return `true` if `sentence1` and `sentence2` are similar. Otherwise, return `false`.


Example 1:
Input: sentence1 = ""My name is Haley"", sentence2 = ""My Haley""
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting ""name is"" between ""My"" and ""Haley"".


Example 2:
Input: sentence1 = ""of"", sentence2 = ""A lot of words""
Output: false
Explanation: No single sentence can be inserted inside one of the sentences to make it equal to the other.


Example 3:
Input: sentence1 = ""Eating right now"", sentence2 = ""Eating""
Output: true
Explanation: sentence2 can be turned to sentence1 by inserting ""right now"" at the end of the sentence.


Example 4:
Input: sentence1 = ""Luky"", sentence2 = ""Lucccky""
Output: false

Constraints:
`1 <= sentence1.length, sentence2.length <= 100`
`sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.

The words in `sentence1` and `sentence2` are separated by a single space.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `nums` that consists of non-negative integers. Let us define `rev(x)` as the reverse of the non-negative integer `x`. For example, `rev(123) = 321`, and `rev(120) = 21`. A pair of indices `(i, j)` is nice if it satisfies all of the following conditions:
`0 <= i < j < nums.length`
`nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`
Return the number of nice pairs of indices. Since that number can be too large, return it modulo `109 + 7`.


Example 1:
Input: nums = [42,11,1,97]
Output: 2
Explanation: The two pairs are:
 - (0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.

 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.


Example 2:
Input: nums = [13,10,35,24,76]
Output: 4

Constraints:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a donuts shop that bakes donuts in batches of `batchSize`. They have a rule where they must serve all of the donuts of a batch before serving any donuts of the next batch. You are given an integer `batchSize` and an integer array `groups`, where `groups[i]` denotes that there is a group of `groups[i]` customers that will visit the shop. Each customer will get exactly one donut.

When a group visits the shop, all customers of the group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer of the group does not receive a donut that was left over from the previous group.

You can freely rearrange the ordering of the groups. Return the maximum possible number of happy groups after rearranging the groups.


Example 1:
Input: batchSize = 3, groups = [1,2,3,4,5,6]
Output: 4
Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then the 1st, 2nd, 4th, and 6th groups will be happy.


Example 2:
Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]
Output: 4

Constraints:
`1 <= batchSize <= 9`
`1 <= groups.length <= 30`
`1 <= groups[i] <= 109`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sentence is a list of words that are separated by a single space with no leading or trailing spaces. Each of the words consists of only uppercase and lowercase English letters (no punctuation).

For example, `""Hello World""`, `""HELLO""`, and `""hello world hello world""` are all sentences.

You are given a sentence `s`​​​​​​ and an integer `k`​​​​​​. You want to truncate `s`​​​​​​ such that it contains only the first `k`​​​​​​ words. Return `s`​​​​​​ after truncating it.


Example 1:
Input: s = ""Hello how are you Contestant"", k = 4
Output: ""Hello how are you""
Explanation:
The words in s are [""Hello"", ""how"" ""are"", ""you"", ""Contestant""].

The first 4 words are [""Hello"", ""how"", ""are"", ""you""].

Hence, you should return ""Hello how are you"".


Example 2:
Input: s = ""What is the solution to this problem"", k = 4
Output: ""What is the solution""
Explanation:
The words in s are [""What"", ""is"" ""the"", ""solution"", ""to"", ""this"", ""problem""].

The first 4 words are [""What"", ""is"", ""the"", ""solution""].

Hence, you should return ""What is the solution"".


Example 3:
Input: s = ""chopper is not a tanuki"", k = 5
Output: ""chopper is not a tanuki""

Constraints:
`1 <= s.length <= 500`
`k` is in the range `[1, the number of words in s]`.

`s` consist of only lowercase and uppercase English letters and spaces.

The words in `s` are separated by a single space.

There are no leading or trailing spaces.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given the logs for users' actions on LeetCode, and an integer `k`. The logs are represented by a 2D integer array `logs` where each `logs[i] = [IDi, timei]` indicates that the user with `IDi` performed an action at the minute `timei`.

Multiple users can perform actions simultaneously, and a single user can perform multiple actions in the same minute.

The user active minutes (UAM) for a given user is defined as the number of unique minutes in which the user performed an action on LeetCode. A minute can only be counted once, even if multiple actions occur during it.

You are to calculate a 1-indexed array `answer` of size `k` such that, for each `j` (`1 <= j <= k`), `answer[j]` is the number of users whose UAM equals `j`.

Return the array `answer` as described above.


Example 1:
Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5
Output: [0,2,0,0,0]
Explanation:
The user with ID=0 performed actions at minutes 5, 2, and 5 again. Hence, they have a UAM of 2 (minute 5 is only counted once).

The user with ID=1 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.

Since both users have a UAM of 2, answer[2] is 2, and the remaining answer[j] values are 0.


Example 2:
Input: logs = [[1,1],[2,2],[2,3]], k = 4
Output: [1,1,0,0]
Explanation:
The user with ID=1 performed a single action at minute 1. Hence, they have a UAM of 1.

The user with ID=2 performed actions at minutes 2 and 3. Hence, they have a UAM of 2.

There is one user with a UAM of 1 and one with a UAM of 2.

Hence, answer[1] = 1, answer[2] = 1, and the remaining values are 0.


Constraints:
`1 <= logs.length <= 104`
`0 <= IDi <= 109`
`1 <= timei <= 105`
`k` is in the range `[The maximum UAM for a user, 105]`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two positive integer arrays `nums1` and `nums2`, both of length `n`.

The absolute sum difference of arrays `nums1` and `nums2` is defined as the sum of `|nums1[i] - nums2[i]|` for each `0 <= i < n` (0-indexed).

You can replace at most one element of `nums1` with any other element in `nums1` to minimize the absolute sum difference.

Return the minimum absolute sum difference after replacing at most one element in the array `nums1`. Since the answer may be large, return it modulo `109 + 7`.

`|x|` is defined as:
`x` if `x >= 0`, or
`-x` if `x < 0`.


Example 1:
Input: nums1 = [1,7,5], nums2 = [2,3,5]
Output: 3
Explanation: There are two possible optimal solutions:
- Replace the second element with the first: [1,7,5] => [1,1,5], or
- Replace the second element with the third: [1,7,5] => [1,5,5].

Both will yield an absolute sum difference of `|1-2| + (|1-3| or |5-3|) + |5-5| = `3.


Example 2:
Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]
Output: 0
Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an 
absolute sum difference of 0.


Example 3:
Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]
Output: 20
Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].

This yields an absolute sum difference of `|10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20`

Constraints:
`n == nums1.length`
`n == nums2.length`
`1 <= n <= 105`
`1 <= nums1[i], nums2[i] <= 105`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `nums` that consists of positive integers.

The GCD of a sequence of numbers is defined as the greatest integer that divides all the numbers in the sequence evenly.

For example, the GCD of the sequence `[4,6,16]` is `2`.

A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, `[2,5,10]` is a subsequence of `[1,2,1,2,4,1,5,10]`.

Return the number of different GCDs among all non-empty subsequences of `nums`.


Example 1:
Input: nums = [6,10,3]
Output: 5
Explanation: The figure shows all the non-empty subsequences and their GCDs.

The different GCDs are 6, 10, 3, 2, and 1.


Example 2:
Input: nums = [5,15,40,5,6]
Output: 7

Constraints:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 2 * 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `m` boys and `n` girls in a class attending an upcoming party.

You are given an `m x n` integer matrix `grid`, where `grid[i][j]` equals `0` or `1`. If `grid[i][j] == 1`, then that means the `ith` boy can invite the `jth` girl to the party. A boy can invite at most one girl, and a girl can accept at most one invitation from a boy.

Return the maximum possible number of accepted invitations.


Example 1:
Input: grid = [[1,1,1],
               [1,0,1],
               [0,0,1]]
Output: 3
Explanation: The invitations are sent as follows:
- The 1st boy invites the 2nd girl.

- The 2nd boy invites the 1st girl.

- The 3rd boy invites the 3rd girl.


Example 2:
Input: grid = [[1,0,1,0],
               [1,0,0,0],
               [0,0,1,0],
               [1,1,1,0]]
Output: 3
Explanation: The invitations are sent as follows:
-The 1st boy invites the 3rd girl.

-The 2nd boy invites the 1st girl.

-The 3rd boy invites no one.

-The 4th boy invites the 2nd girl.


Constraints:
`grid.length == m`
`grid[i].length == n`
`1 <= m, n <= 200`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a function `signFunc(x)` that returns:
`1` if `x` is positive.

`-1` if `x` is negative.

`0` if `x` is equal to `0`.

You are given an integer array `nums`. Let `product` be the product of all values in the array `nums`.

Return `signFunc(product)`.


Example 1:
Input: nums = [-1,-2,-3,-4,3,2,1]
Output: 1
Explanation: The product of all values in the array is 144, and signFunc(144) = 1

Example 2:
Input: nums = [1,5,0,2,-3]
Output: 0
Explanation: The product of all values in the array is 0, and signFunc(0) = 0

Example 3:
Input: nums = [-1,1,-1,1,-1]
Output: -1
Explanation: The product of all values in the array is -1, and signFunc(-1) = -1

Constraints:
`1 <= nums.length <= 1000`
`-100 <= nums[i] <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` friends that are playing a game. The friends are sitting in a circle and are numbered from `1` to `n` in clockwise order. More formally, moving clockwise from the `ith` friend brings you to the `(i+1)th` friend for `1 <= i < n`, and moving clockwise from the `nth` friend brings you to the `1st` friend.

The rules of the game are as follows:
Start at the `1st` friend.

Count the next `k` friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.

The last friend you counted leaves the circle and loses the game.

If there is still more than one friend in the circle, go back to step `2` starting from the friend immediately clockwise of the friend who just lost and repeat.

Else, the last friend in the circle wins the game.

Given the number of friends, `n`, and an integer `k`, return the winner of the game.


Example 1:
Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.

2) Count 2 friends clockwise, which are friends 1 and 2.

3) Friend 2 leaves the circle. Next start is friend 3.

4) Count 2 friends clockwise, which are friends 3 and 4.

5) Friend 4 leaves the circle. Next start is friend 5.

6) Count 2 friends clockwise, which are friends 5 and 1.

7) Friend 1 leaves the circle. Next start is friend 3.

8) Count 2 friends clockwise, which are friends 3 and 5.

9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.


Example 2:
Input: n = 6, k = 5
Output: 1
Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.


Constraints:
`1 <= k <= n <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a 3 lane road of length `n` that consists of `n + 1` points labeled from `0` to `n`. A frog starts at point `0` in the second lane and wants to jump to point `n`. However, there could be obstacles along the way.

You are given an array `obstacles` of length `n + 1` where each `obstacles[i]` (ranging from 0 to 3) describes an obstacle on the lane `obstacles[i]` at point `i`. If `obstacles[i] == 0`, there are no obstacles at point `i`. There will be at most one obstacle in the 3 lanes at each point.

For example, if `obstacles[2] == 1`, then there is an obstacle on lane 1 at point 2.

The frog can only travel from point `i` to point `i + 1` on the same lane if there is not an obstacle on the lane at point `i + 1`. To avoid obstacles, the frog can also perform a side jump to jump to another lane (even if they are not adjacent) at the same point if there is no obstacle on the new lane.

For example, the frog can jump from lane 3 at point 3 to lane 1 at point 3.

Return the minimum number of side jumps the frog needs to reach any lane at point n starting from lane `2` at point 0.

Note: There will be no obstacles on points `0` and `n`.


Example 1:
Input: obstacles = [0,1,2,3,0]
Output: 2 
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps (red arrows).

Note that the frog can jump over obstacles only when making side jumps (as shown at point 2).


Example 2:
Input: obstacles = [0,1,1,3,3,0]
Output: 0
Explanation: There are no obstacles on lane 2. No side jumps are required.


Example 3:
Input: obstacles = [0,2,1,0,3,0]
Output: 2
Explanation: The optimal solution is shown by the arrows above. There are 2 side jumps.


Constraints:
`obstacles.length == n + 1`
`1 <= n <= 5 * 105`
`0 <= obstacles[i] <= 3`
`obstacles[0] == obstacles[n] == 0`",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two integers, `m` and `k`, and a stream of integers. You are tasked to implement a data structure that calculates the MKAverage for the stream.

The MKAverage can be calculated using these steps:
If the number of the elements in the stream is less than `m` you should consider the MKAverage to be `-1`. Otherwise, copy the last `m` elements of the stream to a separate container.

Remove the smallest `k` elements and the largest `k` elements from the container.

Calculate the average value for the rest of the elements rounded down to the nearest integer.

Implement the `MKAverage` class:
`MKAverage(int m, int k)` Initializes the MKAverage object with an empty stream and the two integers `m` and `k`.

`void addElement(int num)` Inserts a new element `num` into the stream.

`int calculateMKAverage()` Calculates and returns the MKAverage for the current stream rounded down to the nearest integer.


Example 1:
Input
[""MKAverage"", ""addElement"", ""addElement"", ""calculateMKAverage"", ""addElement"", ""calculateMKAverage"", ""addElement"", ""addElement"", ""addElement"", ""calculateMKAverage""]
[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
Output
[null, null, null, -1, null, 3, null, null, null, 5]
Explanation
MKAverage obj = new MKAverage(3, 1); 
obj.addElement(3);        // current elements are [3]
obj.addElement(1);        // current elements are [3,1]
obj.calculateMKAverage(); // return -1, because m = 3 and only 2 elements exist.

obj.addElement(10);       // current elements are [3,1,10]
obj.calculateMKAverage(); // The last 3 elements are [3,1,10].

                          // After removing smallest and largest 1 element the container will be `[3].

                          // The average of [3] equals 3/1 = 3, return 3
obj.addElement(5);        // current elements are [3,1,10,5]
obj.addElement(5);        // current elements are [3,1,10,5,5]
obj.addElement(5);        // current elements are [3,1,10,5,5,5]
obj.calculateMKAverage(); // The last 3 elements are [5,5,5].

                          // After removing smallest and largest 1 element the container will be `[5].

                          // The average of [5] equals 5/1 = 5, return 5
``

Constraints:
`3 <= m <= 105`
`1 <= k*2 < m`
`1 <= num <= 105`
At most `105` calls will be made to `addElement` and `calculateMKAverage`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""target"", return the indices of the two numbers such that they add up to equal ""target"".

You may assume there is only one solution per input, and you may not use the same element twice.

You can return answers in any order.


Example 1:
Input: nums = [2,7,11,15], target = 9
output: [0,1]
Output: Since nums[0] + nums[1] == 9, we return [0, 1].

Example 2:
Input: nums = [3,2,4], target = 6
output: [1,2]

Example 3:
Input: nums = [3,3], target = 6
output: [0,1]

constraint:
`2 <= nums.length <= 103`
`-109 <= nums[i] <= 109`
`-109 <= target <= 109`
Only one valid answer exists.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-empty linked lists, representing two non-negative integers. Numbers are stored in reverse order, and each of their nodes contains a number. Adds two numbers and returns the sum as a linked list.

You can assume that these two numbers do not contain any leading zeros, except for the number 0 itself.


Example 1:
Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.


Example 2:
Input: l1 = [0], l2 = [0]
output: [0]

Example 3:
Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]

constraint:
The number of nodes in each linked list is in the range of ""[1, 100]"".

`0 <= Node.val <= 9`
The list is guaranteed to represent a number without leading zeros.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s , find the length of the longest substring without repeating characters.


Example 1:
Input: s = ""abcabcbb""
Output: 3
Explanation: The answer is ""abc"" with length 3.


Example 2:
Input: s = ""bbbbb""
Output: 1
Explanation: The answer is ""b"" with length 1.


Example 3:
Input: s = ""pwwkew""
Output: 3
Explanation: The answer is ""wke"" and has length 3.

Note that the answer must be a substring, ""pwke"" is a subsequence not a substring.


Example 4:
Input: s = """"
output: 0

constraint:
`0 <= s.length <= 5 * 104`
`s` consists of English letters, numbers, symbols and spaces.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sorted arrays ""nums1"" and ""nums2"" of size ""m"" and ""n"", return the median of the two sorted arrays.


Example 1:
Input: nums1 = [1,3], nums2 = [2]
Output: 2.00000
Explanation: Combined array = [1,2,3] with a median of 2.


Example 2:
Input: nums1 = [1,2], nums2 = [3,4]
Output: 2.50000
Explanation: Combined array = [1,2,3,4] with a median of (2 + 3) / 2 = 2.5.


Example 3:
Input: nums1 = [0,0], nums2 = [0,0]
Output: 0.00000

Example 4:
Input: nums1 = [], nums2 = [1]
Output: 1.00000

Example 5:
Input: nums1 = [2], nums2 = []
Output: 2.00000

constraint:
`nums1.length == m`
`nums2.length == n`
`0 <= m <= 1000`
`0 <= n <= 1000`
`1 <= m + n <= 2000`
`-106 <= nums1[i], nums2[i] <= 106`
Follow up: The overall runtime complexity should be `O(log (m+n))`.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return the longest palindromic substring in s.


Example 1:
Input: s = ""babad""
Output: ""bab""
Note: ""aba"" is also a valid answer.


Example 2:
Input: s = ""cbbd""
Output: ""bb""

Example 3:
Input: s = ""a""
output: ""one""

Example 4:
Input: s = ""ac""
output: ""one""

constraint:
`1 <= s.length <= 1000`
`s` consists only of numbers and English letters (lowercase and/or uppercase),",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The string `""PAYPALISHIRING""` is written in a zigzag pattern on the given number of lines, like this: (you may want to display this pattern in a fixed font for better legibility)
PAHN
A P L S I I G
YIR
Then read line by line: `""PAHNAPLSIIGYIR""`
Write code that will take a string and do this conversion given the number of lines:
String convert(string s, int numRows);

Example 1:
Input: s = ""PAYPALISHIRING"", numRows = 3
Output: ""PAHNAPLSIIGYIR""

Example 2:
Input: s = ""PAYPALISHIRING"", numRows = 4
Output: ""PINALSIGYAHRPI""
explain:
pin
A L S I G
Yes
index

Example 3:
Input: s = ""A"", numRows = 1
Output: ""A""

constraint:
`1 <= s.length <= 1000`
`s` consists of English letters (lowercase and uppercase), `','` and `'.'.

`1 <= numRows <= 1000`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a signed 32-bit integer ""x"", return the digit-reversed ""x"". Returns '0' if reversing 'x' would result in a value outside the signed 32-bit integer range '[-231, 231 - 1]'.

Let's say the environment doesn't allow you to store 64-bit integers (signed or unsigned).


Example 1:
Input: x = 123
Output: 321

Example 2:
Input: x = -123
Output: -321

Example 3:
Input: x = 120
Output: 21

Example 4:
Input: x = 0
output: 0

constraint:
`-231 <= x <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `myAtoi(string s)` function, which converts a string to a 32-bit signed integer (similar to the C/C++ `atoi` function).

The algorithm for `myAtoi(string s)` is as follows:
Read in and ignore any leading whitespace.

Checks if the next character (if not at the end of the string) is a ""-"" or ""+"". If yes, read in this character. This determines whether the final result is negative or positive, respectively. If neither is present, the result is assumed to be positive.

Reads the next character until the next non-numeric character is reached or the end of input is reached. The rest of the string will be ignored.

Convert these numbers to integers (i.e. ""123"" -> 123, ""0032"" -> 32). The integer is ""0"" if no digits were read. Change symbols as needed (from step 2).

If the integer is outside the 32-bit signed integer range [-231, 231 - 1]"", the integer is clamped to stay within the range. Specifically, integers less than ""-231"" should be restricted to ""-231"", and integers greater than ""231 - 1"" should be restricted to ""231 - 1"".

Returns an integer as the final result.

notes:
Only space characters `' '` are considered whitespace characters.

Do not omit any characters other than leading whitespace or the rest of the string after a number.


Example 1:
Input: s = ""42""
Output: 42
Explanation: The underline character is the read-in content, and the caret is the current reader position.

Step 1: ""42"" (no characters are read because there is no leading space)
         ^
Step 2: ""42"" (no characters are read because there are neither ""-"" nor ""+"")
         ^
Step 3: ""42"" (read ""42"")
           ^
The parsed integer is 42.

Since 42 is in the range [-231, 231 - 1], the final result is 42.


Example 2:
Input: s = ""-42""
Output: -42
explain:
Step 1: ""-42"" (read and ignore leading spaces)
            ^
Step 2: ""-42"" ('-' is read, so the result should be negative)
             ^
Step 3: ""-42"" (read ""42"")
               ^
The parsed integer is -42.

Since -42 is in the range [-231, 231 - 1], the final result is -42.


Example 3:
Input: s = ""4193 with words""
Output: 4193
explain:
Step 1: ""4193 with words"" (no characters are read because there is no leading space)
         ^
Step 2: ""4193 with words"" (no characters are read because there are neither ""-"" nor ""+"")
         ^
Step 3: ""4193 with words"" (read ""4193""; read stops because the next character is a non-digit)
             ^
The parsed integer is 4193.

Since 4193 is in the range [-231, 231 - 1], the final result is 4193.


Example 4:
Input: s = ""words and 987""
output: 0
explain:
Step 1: ""word and 987"" (no characters are read because there is no leading space)
         ^
Step 2: ""Word and 987"" (no characters are read because there are neither ""-"" nor ""+"")
         ^
Step 3: ""words and 987"" (reading stops immediately because there is a non-digit 'w')
         ^
The parsed integer is 0 because no digits were read.

Since 0 is in the range [-231, 231 - 1], the final result is 0.


Example 5:
Input: s = ""-91283472332""
Output: -2147483648
explain:
Step 1: ""-91283472332"" (no characters are read because there is no leading space)
         ^
Step 2: ""-91283472332"" (reads '-', so the result should be negative)
          ^
Step 3: ""-91283472332"" (read into ""91283472332"")
                     ^
The parsed integer is -91283472332.

Since -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is fixed at -231 = -2147483648.

constraint:
`0 <= s.length <= 200`
`s` consists of English letters (lowercase and uppercase), digits (`0-9`), `' '`, `'+'`, `'-'` and `'.'`.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer x, return true if x is a palindromic integer.

When an integer reads backwards the same as it reads forwards, it is a palindrome. For example, ""121"" is a palindrome, but ""123"" is not.


Example 1:
Input: x = 121
output: true

Example 2:
Input: x = -121
output: error
Explanation: -121 from left to right. From right to left, it becomes 121-. Therefore it is not a palindrome.


Example 3:
Input: x = 10
output: error
Explanation: 01 is read from right to left. Therefore it is not a palindrome.


Example 4:
Input: x = -101
output: error

constraint:
`-231 <= x <= 231 - 1`
Follow up: Can you solve it without converting the integer to a string?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an input string (`s`) and a pattern (`p`), the implementation supports regular expression matching of `'.'` and `'*'`, where: ` `
`'.'` matches any single character.
`'*'` matches zero or more of the preceding element.

Matches should cover the entire input string (not parts).


Example 1:
Input: s = ""aa"", p = ""a""
output: error
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:
Input: s = ""aa"", p = ""a*""
output: true
Explanation: '*' means zero or more of the preceding element, 'a'. So by repeating 'a' once, it becomes ""aa"".


Example 3:
Input: s = ""ab"", p = "".*""
output: true
Explanation: "".*"" means ""zero or more (*) of any character (.)"".


Example 4:
Input: s = ""aab"", p = ""c*a*b""
output: true
Explanation: c can be repeated 0 times, and a can be repeated 1 time. Therefore, it matches ""aab"".


Example 5:
Input: s = ""mississippi"", p = ""mis*is*p*.""
output: error

constraint:
`0 <= s.length <= 20`
`0 <= p.length <= 30`
`s` contains only lowercase English letters.

`p` contains only lowercase English letters, `'.'` and `'*'`.

It is guaranteed that every time the character `'*'` appears, there will be a previous valid character to match.",0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` non-negative integers `a1, a2, ..., an`, each of which represents a point at coordinates `(i, ai)`. Draw ""n"" vertical lines such that the two endpoints of line ""i"" are at ""(i, ai)"" and ""(i, 0)"". Find the two lines that together with the x-axis form a container such that the container contains the most water.

Note that you cannot tilt the container.


Example 1:
Input: Height = [1,8,6,2,5,4,8,3,7]
Output: 49
Explanation: The vertical line above is represented by the array [1,8,6,2,5,4,8,3,7]. In this case, the maximum water area (blue) that the container can hold is 49.


Example 2:
Input: height = [1,1]
Output: 1

Example 3:
Input: Height = [4,3,2,1,4]
output: 16

Example 4:
Input: Height = [1,2,1]
Output: 2

constraint:
`n == height. length`
`2 <= n <= 105`
`0 <= height[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`.

symbolic value
I 1
5
X 10
L 50
C 100
Day 500
m 1000
For example, `2` is written as `II` in Roman numerals, which is the addition of two 1s. `12` is written as `XII`, which is `X + II`. The number ""27"" is written as ""XXVII"", that is, ""XX + V + II"".

Roman numerals are usually written from left to right, from largest to smallest. However, the number four is not ""IIII"". Instead, the number four is written as ""IV"". Since one comes before five, we subtract it to get four. The same principle applies to the number nine, written ""IX"". There are six situations where subtraction is used:
`I` can be placed before `V` (5) and `X` (10), making 4 and 9.
`X` can be placed before `L` (50) and `C` (100), making 40 and 90.
`C` can be placed before `D` (500) and `M` (1000), making 400 and 900.

Given an integer, convert it to a Roman numeral.


Example 1:
Input: num = 3
Output: ""III""

Example 2:
Input: num = 4
Output: ""IV""

Example 3:
Input: num = 9
Output: ""IX""

Example 4:
Input: num = 58
Output: ""LVIII""
Explanation: L=50, V=5, III=3.


Example 5:
Input: num = 1994
Output: ""MCMXCIV""
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


constraint:
`1 <= num <= 3999`",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Roman numerals are represented by seven different symbols: `I`, `V`, `X`, `L`, `C`, `D`, and `M`.

symbolic value
I 1
5
X 10
L 50
C 100
Day 500
m 1000
For example, `2` is written as `II` in Roman numerals, which is the addition of two 1s. `12` is written as `XII`, which is `X + II`. The number ""27"" is written as ""XXVII"", that is, ""XX + V + II"".

Roman numerals are usually written from left to right, from largest to smallest. However, the number four is not ""IIII"". Instead, the number four is written as ""IV"". Since one comes before five, we subtract it to get four. The same principle applies to the number nine, written ""IX"". There are six situations where subtraction is used:
`I` can be placed before `V` (5) and `X` (10), making 4 and 9.
`X` can be placed before `L` (50) and `C` (100), making 40 and 90.
`C` can be placed before `D` (500) and `M` (1000), making 400 and 900.

Given a Roman numeral, convert it to an integer.


Example 1:
Input: s = ""III""
Output: 3

Example 2:
Input: s = ""IV""
Output: 4

Example 3:
Input: s = ""IX""
Output: 9

Example 4:
Input: s = ""LVIII""
Output: 58
Explanation: L=50, V=5, III=3.


Example 5:
Input: s = ""MCMXCIV""
Output: 1994
Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.


constraint:
`1 <= s.length <= 15`
`s` contains only the characters `('I', 'V', 'X', 'L', 'C', 'D', 'M')`.

`s` is guaranteed to be a valid Roman numeral in the range `[1, 3999]`.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function to find the longest common prefix string in an array of strings.

Returns an empty string """" if there is no common prefix.


Example 1:
Input: strs = [""flower"",""flow"",""flight""]
Output: ""fl""

Example 2:
Input: strs = [""dog"",""racecar"",""car""]
Output: """"
Explanation: There is no common prefix among the input strings.


constraint:
`0 <= strs.length <= 200`
`0 <= strs[i].length <= 200`
`strs[i]` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, return all triples `[nums[i], nums[j], nums[k]]` such that `i != j`, `i != k` and `j != k `, and `nums[i] + nums[j] + nums[k] == 0`.

Note that solution sets must not contain duplicate triples.


Example 1:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Example 2:
input: nums = []
output: []

Example 3:
input: nums = [0]
output: []

constraint:
`0 <= nums.length <= 3000`
`-105 <= nums[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" containing n integers and an integer ""target"", find three integers in ""nums"" such that the sum is closest to ""target"". Returns the sum of three integers. You might assume that there is a solution for every input.


Example 1:
Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The closest sum to the target is 2. (-1 + 2 + 1 = 2).


constraint:
`3 <= nums.length <= 10^3`
`-10^3 <= nums[i] <= 10^3`
`-10^4 <= target <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string containing a number ""2-9"" (inclusive), return all possible letter combinations that the number can represent. Return answers in any order.

The mapping of numbers to letters (like on a phone button) is given below. Note that 1 does not map to any letter.


Example 1:
input:number=""23""
Output: [""ad"",""ae"",""af"",""bd"",""be"",""bf"",""cd"",""ce"",""cf""]

Example 2:
input:number=""""
output: []

Example 3:
input:number=""2""
Output: [""a"",""b"",""c""]

constraint:
`0 <= digits.length <= 4`
`digits[i]` are numbers in the range `['2', '9']`.",0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" containing n integers and an integer ""target"", are there elements a, b, c, and d in ""nums"" such that a + b + c + d = ""target""? Find all unique quadruples in the array giving the sum of ""target"".

Note that the solution set must not contain duplicate quadruples.


Example 1:
Input: nums = [1,0,-1,0,-2,2], target = 0
Output: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]

Example 2:
Input: nums = [], target = 0
output: []

constraint:
`0 <= nums.length <= 200`
`-109 <= nums[i] <= 109`
`-109 <= target <= 109`",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a linked list, remove the nth node from the end of the list and return its head.

Follow up: Can you do it all in one go?

Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]

Example 2:
Input: head = [1], n = 1
output: []

Example 3:
Input: head = [1,2], n = 1
output: [1]

constraint:
The number of nodes in the list is sz.

`1 <= sz <= 30`
`0 <= Node.val <= 100`
`1 <= n <= sz`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s containing only the characters `'('`, `')'`, `'{'`, `'}'`, `'['` and `']'`, determine whether the input is a character The string is valid.

The input string is valid if the following conditions are met:
An opening bracket must be closed by a bracket of the same type.

Opening brackets must be closed in the correct order.


Example 1:
Input: s = ""()""
output: true

Example 2:
Input: s = ""()[]{}""
output: true

Example 3:
Input: s = ""(]""
output: error

Example 4:
Input: s = ""([)]""
output: error

Example 5:
Input: s = ""{[]}""
output: true

constraint:
`1 <= s.length <= 104`
`s` contains only parentheses `'()[]{}'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Merges two sorted linked lists and returns them as a sorted list. The list should be made by stitching together the nodes of the first two lists.


Example 1:
Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]

Example 2:
Input: l1 = [], l2 = []
output: []

Example 3:
Input: l1 = [], l2 = [0]
output: [0]

constraint:
The number of nodes in both lists is in the range ""[0, 50]"".

`-100 <= Node.val <= 100`
Both `l1` and `l2` are in non-descending order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.


Example 1:
Input: n = 3
Output: [""(())"",""(()())"",""(()())"",""()()()"",""()()()""]

Example 2:
Input: n = 1
Output: [""()""]

constraint:
`1 <= n <= 8`",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `k` linked lists `lists`, each list sorted in ascending order.

Merge all linked lists into one sorted linked list and return it.


Example 1:
Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked list is:
[
  1->4->5,
  1->3->4,
  2->6
]
Combine them into a sorted list:
1->1->2->3->4->4->5->6

Example 2:
input: list = []
output: []

Example 3:
input: list = [[]]
output: []

constraint:
`k == lists.length`
`0 <= k <= 10^4`
`0 <= lists[i].length <= 500`
`-10^4 <= list[i][j] <= 10^4`
`lists[i]` sorts in ascending order.

The sum of `lists[i].length` will not exceed `10^4`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list, swap every two adjacent nodes and return its head.


Example 1:
Input: head = [1,2,3,4]
Output: [2,1,4,3]

Example 2:
input: head = []
output: []

Example 3:
Input: head = [1]
output: [1]

constraint:
The number of nodes in the list is in the range '[0, 100]'.

`0 <= Node.val <= 100`
Follow up: Can you solve the problem without modifying the list node values? (i.e. only the node itself can change.)",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list, reverse the nodes of the linked list k one at a time and return its modified list.

k is a positive integer, less than or equal to the length of the linked list. If the number of nodes is not a multiple of k, then the last missing node should remain as it is.

follow up:
Can you solve the problem of `O(1)` extra memory space?
You cannot change the values ​​in the list nodes, only the nodes themselves.


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [2,1,4,3,5]

Example 2:
Input: head = [1,2,3,4,5], k = 3
Output: [3,2,1,4,5]

Example 3:
Input: head = [1,2,3,4,5], k = 1
Output: [1,2,3,4,5]

Example 4:
Input: head = [1], k = 1
output: [1]

constraint:
The number of nodes in the list is in the range sz.

`1 <= sz <= 5000`
`0 <= Node.val <= 1000`
`1 <= k <= sz`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array nums, remove duplicates in-place such that each element occurs only once and return the new length.

Don't allocate extra space for another array, you have to do it by modifying the input array in-place with O(1) extra memory.

clarify:
Confused why the return value is an integer but your answer is an array?
Note that the input array is passed by reference, which means that modifications to the input array will also be known to the caller.

Internally you can think of it like this:
// nums is passed in by reference. (ie without making a copy)
int len ​​= removeDuplicates(nums);
// The caller will be aware of any modifications to nums in the function.

// Using the length returned by the function, print the first len ​​elements.

for (int i = 0; i < len; i++) {
    print(number[i]);
}

Example 1:
Input: nums = [1,1,2]
Output: 2, nums = [1,2]
Explanation: Your function should return length = `2`, where the first two elements of `nums` are `1` and `2` respectively. It doesn't matter what goes beyond the returned length.


Example 2:
Input: nums = [0,0,1,1,1,2,2,3,3,4]
Output: 5, nums = [0,1,2,3,4]
Explanation: Your function should return length = `5`, where the first five elements of `nums` are modified to be `0`, `1`, `2`, `3` and `4` respectively. It doesn't matter what value is set beyond the returned length.


constraint:
`0 <= nums.length <= 3 * 104`
`-104 <= nums[i] <= 104`
`nums` are sorted in ascending order.",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array nums and a value ""val"", delete all instances of that value in-place and return the new length.

Do not allocate additional space for another array, you must do so by modifying the input array in-place with `O(1)` additional memory.

The order of elements can be changed. It doesn't matter what is left after the new length is exceeded.

clarify:
Confused why the return value is an integer but your answer is an array?
Note that the input array is passed by reference, which means that modifications to the input array will also be known to the caller.

Internally you can think of it like this:
// nums is passed in by reference. (ie without making a copy)
int len ​​= removeElement(nums, val);
// The caller will be aware of any modifications to nums in the function.

// Using the length returned by the function, print the first len ​​elements.

for (int i = 0; i < len; i++) {
    print(number[i]);
}

Example 1:
Input: nums = [3,2,2,3], val = 3
Output: 2, nums = [2,2]
Explanation: Your function should return length = 2, the first two elements of nums are 2.

It doesn't matter what goes beyond the returned length. For example, if you use nums = [2,2,3,3] or nums = [2,2,0,0] to return 2, your answer will be accepted.


Example 2:
Input: nums = [0,1,2,2,3,0,4,2], val = 2
Output: 5, nums = [0,1,4,0​​,3]
Explanation: Your function should return length = `5`, where the first five elements of `nums` contain `0`, `1`, `3`, `0`, and 4. Note that the order of these five elements can be arbitrary. It doesn't matter what value is set beyond the returned length.


constraint:
`0 <= nums.length <= 100`
`0 <= nums[i] <= 50`
`0 <= value <= 100`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement strStr().

Returns the index of the first occurrence of needle in haystack, or -1 if needle is not part of haystack.

clarify:
What should we return when needle is an empty string? This is a great question to ask during an interview.

For the purposes of this question, we will return 0 when needle is an empty string. This is consistent with C's strstr() and Java's indexOf().


Example 1:
Input: haystack = ""hello"", needle = ""ll""
Output: 2

Example 2:
Input: haystack = ""aaaaa"", needle = ""bba""
Output: -1

Example 3:
Input: haystack = """", needle = """"
output: 0

constraint:
`0 <= haystack.length, needle.length <= 5 * 104`
`haystack` and `needle` contain only lowercase English characters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""dividend"" and ""divisor"", divide two integers without using multiplication, division, and modulo operators.

Returns the quotient of Dividend divided by Divisor.

Integer division should truncate to zero, which means losing its fractional part. For example, `truncate(8.345) = 8` and `truncate(-2.7335) = -2`.

Note: Suppose we are dealing with an environment that can only store integers in the range of 32-bit signed integers: `[−231, 231 − 1]`. For this question, suppose your function returns 231 − 1 when the result of division overflows.


Example 1:
Input: Dividend = 10, Divisor = 3
Output: 3
Explanation: 10/3 = truncated(3.33333..) = 3.


Example 2:
Input: Dividend = 7, Divisor = -3
Output: -2
Explanation: 7/-3 = truncation(-2.33333..) = -2.


Example 3:
Input: Dividend = 0, Divisor = 1
output: 0

Example 4:
Input: Dividend = 1, Divisor = 1
Output: 1

constraint:
`-231 <= dividend, divisor <= 231 - 1`
`Divisor! = 0`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" and an array of strings ""words"" of the same length. Returns all starting indices of the substring in s that is the concatenation of each word in words, in any order and without any intervening characters.

You can return answers in any order.


Example 1:
Input: s = ""barfoothefoobarman"", words = [""foo"",""bar""]
Output: [0,9]
Explanation: The substrings starting at indices 0 and 9 are ""barfoo"" and ""foobar"", respectively.

Output order doesn't matter, returning [9,0] is fine too.


Example 2:
Input: s = ""wordgoodgoodgoodbestword"", words = [""word"",""good"",""best"",""word""]
output: []

Example 3:
Input: s = ""barfoofoobarthefoobarman"", words = [""bar"",""foo"",""the""]
Output: [6,9,12]

constraint:
`1 <= s.length <= 104`
`s` consists of lowercase English letters.

`1 <= words.length <= 5000`
`1 <= word[i].length <= 30`
`words[i]` consists of lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implements the next permutation, which rearranges the numbers into the next larger permutation of numbers in lexicographical order.

If such an arrangement is not possible, it must be rearranged into the lowest possible order (ie sorted in ascending order).

Replacement must be in place and only use constant extra memory.


Example 1:
Input: nums = [1,2,3]
Output: [1,3,2]

Example 2:
Input: nums = [3,2,1]
Output: [1,2,3]

Example 3:
Input: nums = [1,1,5]
Output: [1,5,1]

Example 4:
input: nums = [1]
output: [1]

constraint:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string containing only the characters `'('` and `')'`, find the length of the longest valid (well-formed) parenthesized substring.


Example 1:
Input: s = ""(()""
Output: 2
Explanation: The longest valid bracket substring is ""()"".


Example 2:
Input: s = "")()())""
Output: 4
Explanation: The longest valid parenthesis substring is ""()()"".


Example 3:
Input: s = """"
output: 0

constraint:
`0 <= s.length <= 3 * 104`
`s[i]` is `'('` or `')'`.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an integer array nums sorted (with distinct values) in ascending order.

`nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) before being passed to your function such that the resulting array is `[nums[k], nums[k+ 1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0 indexed). For example, ""[0,1,2,4,5,6,7]"" might rotate at pivot index ""3"" and become ""[4,5,6,7,0,1,2]"" .

Given a rotated array ""nums"" and an integer ""target"", return the index of ""target"" if ""target"" is in ""nums"", or ""-1"" if not.


Example 1:
Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4

Example 2:
Input: nums = [4,5,6,7,0,1,2], target = 3
Output: -1

Example 3:
Input: nums = [1], target = 0
Output: -1

constraint:
`1 <= nums.length <= 5000`
`-104 <= nums[i] <= 104`
All values ​​of `nums` are unique.

`nums` is guaranteed to rotate around some pivot.

`-104 <= target <= 104`
Follow up: Can you do it in `O(log n)` time complexity?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"" sorted in ascending order, find the start and end positions of a given ""target"" value.

Returns ""[-1, -1]"" if ""target"" is not found in the array.

Follow up: Can you write an algorithm with runtime complexity ""O(log n)""?

Example 1:
Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]

Example 2:
Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]

Example 3:
Input: nums = [], target = 0
Output: [-1,-1]

constraint:
`0 <= nums.length <= 105`
`-109 <= nums[i] <= 109`
`nums` is a non-decreasing array.

`-109 <= target <= 109`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, returns the index when inserted in order.


Example 1:
Input: nums = [1,3,5,6], target = 5
Output: 2

Example 2:
Input: nums = [1,3,5,6], target = 2
Output: 1

Example 3:
Input: nums = [1,3,5,6], target = 7
Output: 4

Example 4:
Input: nums = [1,3,5,6], target = 0
output: 0

Example 5:
Input: nums = [1], target = 0
output: 0

constraint:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` contains the distinct values ​​sorted in ascending order.

`-104 <= target <= 104`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Determine if `9 x 9` sudoku board is valid. Only populated cells need to be validated according to the following rules:
Each line must contain the unique numbers ""1-9"".

Each column must contain the unique numbers ""1-9"".

Each of the nine ""3 x 3"" sub-boxes of the grid must contain a unique number ""1-9"".

notes:
Sudoku boards (partially filled) may work, but not necessarily solvable.

Only populated cells need to be validated according to the above rules.


Example 1:
input: board=
[[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
output: true

Example 2:
input: board=
[[""8"",""3"",""."",""."",""7"",""."",""."",""."","".""]
,[""6"",""."",""."",""1"",""9"",""5"",""."",""."","".""]
,[""."",""9"",""8"",""."",""."",""."",""."",""6"","".""]
,[""8"",""."",""."",""."",""6"",""."",""."",""."",""3""]
,[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""]
,[""7"",""."",""."",""."",""2"",""."",""."",""."",""6""]
,[""."",""6"",""."",""."",""."",""."",""2"",""8"","".""]
,[""."",""."",""."",""4"",""1"",""9"",""."",""."",""5""]
,[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
output: error

Explanation: Same as example 1, just change the 5 in the upper left corner to 8. Invalid due to two 8's in the upper left 3x3 subbox.


constraint:
`board.length == 9`
`board[i].length == 9`
`board[i][j]` is a number or `'.'`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a program that solves Sudoku puzzles by filling in blank cells.

A sudoku solution must satisfy all of the following rules:
Each number ""1-9"" must appear exactly once on each line.

Each number ""1-9"" must appear exactly once in each column.

Each number ""1-9"" must appear exactly once in the 9 ""3x3"" sub-boxes of the grid.

The `'.'` character indicates an empty cell.


Example 1:
Input: board = [[""5"",""3"",""."",""."",""7"",""."",""."",""."","".""],[""6"","". "","".,""1"",""9"",""5"",""."",""."","".""],[""."",""9"",""8"",""."",""."" "",""."","".,""6"","".""],[""8"",""."",""."",""."",""6"",""."",""."","".""."" ,""3""],[""4"",""."",""."",""8"",""."",""3"",""."",""."",""1""],[""7"","" ."",""."",""."",""2"",""."",""."",""."",""6""],[""."",""6"",""."",""."", "" ."",""."",""2"",""8"","".""],[""."",""."",""."",""4"",""1"",""9"",""."", "" ."",""5""],[""."",""."",""."",""."",""8"",""."",""."",""7"",""9""]]
Output: [[""5"",""3"",""4"",""6"",""7"",""8"",""9"",""1"",""2""],[""6"",""7"", ""2"",""1"",""9"",""5"",""3"",""4"",""8""],[""1"",""9"",""8"",""3"",""4"", ""2"",""5"",""6"",""7""],[""8"",""5"",""9"",""7"",""6"",""1"",""4"",""2"", ""3""],[""4"",""2"",""6"",""8"",""5"",""3"",""7"",""9"",""1""],[""7"",""1 "",""3"",""9"",""2"",""4"",""8"",""5"",""6""],[""9"",""6"",""1"",""5"",""3 "",""7"",""2"",""8"",""4""],[""2"",""8"",""7"",""4"",""1"",""9"",""6"",""3 "",""5""],[""3"",""4"",""5"",""2"",""8"",""6"",""1"",""7"",""9""]]
Explanation: The input board is shown above, and the only valid solution is as follows:

constraint:
`board.length == 9`
`board[i].length == 9`
`board[i][j]` is a number or `'.'`.

Make sure there is only one option for the input board.",0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The count-and-say sequence is a sequence of numeric strings defined by the recursive formula:
`countAndSay(1) = ""1""`
`countAndSay(n)` is how you ""say"" the string of numbers from `countAndSay(n-1)`, which is then converted into a different string of numbers.

To determine how you ""say"" a string of digits, divide it into the fewest number of groups such that each group is a contiguous section and all the characters are the same. Then each group said the number of words first, and then the words. To convert saying to a string of numbers, replace the count with a number and concatenate each saying.

For example, the representation and conversion of the number string ""3322251"":
Given a positive integer n, return the nth item of the count-and-say sequence.


Example 1:
Input: n = 1
Output: ""1""
Explanation: This is the base case.


Example 2:
Input: n = 4
Output: ""1211""
explain:
countAndSay(1) = ""1""
countAndSay(2) = say ""1"" = a 1 = ""11""
countAndSay(3) = say ""11"" = two 1 = ""21""
countAndSay(4) = say ""21"" = a 2 + a 1 = ""12"" + ""11"" = ""1211""

constraint:
`1 <= n <= 30`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of distinct integers ""candidates"" and a target integer ""target"", return a list containing all unique combinations of ""candidates"" where the selected numbers sum to ""target"". You can return combinations in any order.

The same number can be selected from the ""candidates"" an infinite number of times. Two combinations are unique if at least one of the selected numbers differs in frequency.

For a given input, the number of unique combinations that sum to ""target"" is guaranteed to be less than ""150"" combinations.


Example 1:
Input: candidates = [2,3,6,7], target = 7
Output: [[2,2,3],[7]]
explain:
2 and 3 are candidates, 2+2+3=7. Note 2 can be used multiple times.

7 is a candidate, 7 = 7.

These are the only two combinations.


Example 2:
Input: candidates = [2,3,5], target = 8
Output: [[2,2,2,2],[2,3,3],[3,5]]

Example 3:
Input: candidates = [2], target = 1
output: []

Example 4:
Input: candidates = [1], target = 1
output: [[1]]

Example 5:
Input: candidates = [1], target = 2
Output: [[1,1]]

constraint:
`1 <= candidates. length <= 30`
`1 <= candidates[i] <= 200`
All elements of `candidates` are distinct.

`1 <= target <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a collection of candidate numbers (`candidates`) and a target number (`target`), find all unique combinations of candidates in `candidates` that sum to `target`.

Each number in `candidates` can only be used once in the combination.

Note: Solution sets must not contain duplicate combinations.


Example 1:
Input: candidates = [10,1,2,7,6,1,5], target = 8
output:
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]

Example 2:
Input: candidates = [2,5,2,1,2], target = 5
output:
[
[1,2,2],
[5]
]

constraint:
`1 <= candidates.length <= 100`
`1 <= candidates[i] <= 50`
`1 <= target <= 30`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an unsorted integer array nums, find the smallest missing positive integer.


Example 1:
Input: nums = [1,2,0]
Output: 3

Example 2:
Input: nums = [3,4,-1,1]
Output: 2

Example 3:
Input: nums = [7,8,9,11,12]
Output: 1

constraint:
`0 <= nums.length <= 300`
`-231 <= nums[i] <= 231 - 1`
Follow up: Can you implement an algorithm that runs in `O(n)` time and uses constant extra space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given ""n"" non-negative integers representing an elevation map, where each bar has a width of ""1"", calculate how much water it can collect after it rains.


Example 1:
Input: Height = [0,1,0,2,1,0,1,3,2,1,2,1]
Output: 6
Explanation: The above elevation map (black part) is represented by the array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rainwater (blue) are retained.


Example 2:
Input: Height = [4,2,0,3,2,5]
Output: 9

constraint:
`n == height. length`
`0 <= n <= 3 * 104`
`0 <= height[i] <= 105`",1,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-negative integers `num1` and `num2` represented as strings, return the product of `num1` and `num2`, also represented as strings.

Note: You must not use any of the built-in BigInteger libraries or convert the input directly to an integer.


Example 1:
Input: num1 = ""2"", num2 = ""3""
Output: ""6""

Example 2:
Input: num1 = ""123"", num2 = ""456""
Output: ""56088""

constraint:
`1 <= num1.length, num2.length <= 200`
`num1` and `num2` contain only numbers.

Neither `num1` nor `num2` contain any leading zeros, except for the number `0` itself.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an input string (`s`) and a pattern (`p`), implements wildcard pattern matching and supports `'?'` and `'*'`, where:
`'?'` matches any single character.

`'*'` matches any sequence of characters (including the empty sequence).

Matches should cover the entire input string (not parts).


Example 1:
Input: s = ""aa"", p = ""a""
output: error
Explanation: ""a"" does not match the entire string ""aa"".


Example 2:
Input: s = ""aa"", p = ""*""
output: true
Explanation: '*' matches any sequence.


Example 3:
Input: s = ""cb"", p = ""?a""
output: error
explain: '? ' matches 'c', but the second letter is 'a', not 'b'.


Example 4:
Input: s = ""adceb"", p = ""*a*b""
output: true
Explanation: The first '*' matches an empty sequence, while the second '*' matches the substring ""dce"".


Example 5:
Input: s = ""acdcb"", p = ""a*c?b""
output: error

constraint:
`0 <= s.length, p.length <= 2000`
`s` contains only lowercase English letters.

`p` contains only lowercase English letters, `'?'` or `'*'`.",0,1,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of non-negative integers, you are initially located at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Your goal is to get to the last index with the fewest number of hops.

You can assume that you can always reach the last index.


Example 1:
Input: nums = [2,3,1,1,4]
Output: 2
Explanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then jump 3 steps to the last index.


Example 2:
Input: nums = [2,3,0,1,4]
Output: 2

constraint:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 105`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of distinct integers, return all possible permutations. You can return answers in any order.


Example 1:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1] ]

Example 2:
Input: nums = [0,1]
Output: [[0,1],[1,0]]

Example 3:
input: nums = [1]
output: [[1]]

constraint:
`1 <= nums.length <= 6`
`-10 <= nums[i] <= 10`
All integers in `nums` are unique.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a collection of numbers ""nums"" that may contain duplicates, return all possible unique permutations in any order.


Example 1:
Input: nums = [1,1,2]
output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]

Example 2:
Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1] ]

constraint:
`1 <= nums.length <= 8`
`-10 <= nums[i] <= 10`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an n x n 2D ""matrix"" representing an image, rotate the image 90 degrees (clockwise).

You have to rotate the image in-place, which means you have to directly modify the input 2D matrix. Don't allocate another 2D matrix and do the rotation.


Example 1:
Input: Matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[7,4,1],[8,5,2],[9,6,3]]

Example 2:
Input: Matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]
Output: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]

Example 3:
Input: matrix = [[1]]
output: [[1]]

Example 4:
Input: matrix = [[1,2],[3,4]]
Output: [[3,1],[4,2]]

constraint:
`matrix.length == n`
`matrix[i].length == n`
`1 <= n <= 20`
`-1000 <= matrix[i][j] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings ""strs"", group anagrams together. You can return answers in any order.

Anagrams are words or phrases formed by rearranging the letters of different words or phrases, usually using all the original letters only once.


Example 1:
Input: strs = [""eat"",""tea"",""tan"",""ate"",""nat"",""bat""]
Output: [[""bat""],[""nat"",""tan""],[""ate"",""eat"",""tea""]]

Example 2:
Input: strs = [""""]
Output: [[""""]]

Example 3:
Input: strs = [""a""]
output: [[""a""]]

constraint:
`1 <= strs.length <= 104`
`0 <= strs[i].length <= 100`
`strs[i]` consists of lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement pow(x, n), which computes `x` to the `n` power (i.e. `xn`).


Example 1:
Input: x = 2.00000, n = 10
Output: 1024.00000

Example 2:
Input: x = 2.10000, n = 3
Output: 9.26100

Example 3:
Input: x = 2.00000, n = -2
Output: 0.25000
Explanation: 2-2 = 1/22 = 1/4 = 0.25

constraint:
`-100.0 < x < 100.0`
`-231 <= n <= 231-1`
`-104 <= xn <= 104`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The n queens puzzle is a problem of placing `n` queens on an `n x n` board such that no two queens attack each other.

Given an integer ""n"", return all different solutions to the n queens puzzle.

Each solution consists of a unique n-queens-placed chessboard configuration, where ""Q"" and ""."" represent queens and empty space, respectively.


Example 1:
Input: n = 4
Output: [["".Q.."",""...Q"",""Q..."",""..Q.""],[""..Q."",""Q..."","". ..Q"", "".Q..""]]
Explanation: As shown above, there are two different solutions to the 4 queens puzzle

Example 2:
Input: n = 1
Output: [[""Q""]]

constraint:
`1 <= n <= 9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The n queens puzzle is a problem of placing `n` queens on an `n x n` board such that no two queens attack each other.

Given an integer ""n"", return the number of distinct solutions to the n queens puzzle.


Example 1:
Input: n = 4
Output: 2
Explanation: As shown in the figure, there are two distinct solutions to the 4 queens puzzle.


Example 2:
Input: n = 1
Output: 1

constraint:
`1 <= n <= 9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, find the contiguous subarray (containing at least one number) with the largest sum and return its sum.


Example 1:
Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: The maximum sum of [4,-1,2,1] = 6.


Example 2:
input: nums = [1]
Output: 1

Example 3:
Input: nums = [5,4,-1,7,8]
Output: 23

constraint:
`1 <= nums.length <= 3 * 104`
`-105 <= nums[i] <= 105`
Follow up: If you've already found an `O(n)` solution, try writing another one using a more subtle divide and conquer approach.",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" ""matrix"", return all elements of the ""matrix"" in spiral order.


Example 1:
Input: Matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,2,3,6,9,8,7,4,5]

Example 2:
Input: Matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]
Output: [1,2,3,4,8,12,11,10,9,5,6,7]

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 10`
`-100 <= matrix[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of non-negative integers, you are initially located at the first index of the array.

Each element in the array represents your maximum jump length at that position.

Determine if you were able to reach the last index.


Example 1:
Input: nums = [2,3,1,1,4]
output: true
Explanation: Jump 1 step from index 0 to 1, then jump 3 steps to the last index.


Example 2:
Input: nums = [3,2,1,0,4]
output: error
Explanation: You will always reach index 3 no matter what. It has a maximum jump length of 0, making it impossible to reach the last index.


constraint:
`1 <= nums.length <= 3 * 104`
`0 <= nums[i] <= 105`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of intervals where intervals[i] = [starti, endi] , merge all overlapping intervals and return an array of non-overlapping intervals covering all intervals in the input.


Example 1:
Input: Interval = [[1,3],[2,6],[8,10],[15,18]]
Output: [[1,6],[8,10],[15,18]]
Explanation: Since the intervals [1,3] and [2,6] overlap, merge them into [1,6].


Example 2:
Input: Interval = [[1,4],[4,5]]
Output: [[1,5]]
Explanation: The intervals [1,4] and [4,5] are considered to overlap.


constraint:
`1 <= intervals. length <= 104`
`interval[i].length == 2`
`0 <= start <= end <= 104`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of non-overlapping intervals, insert a new interval in the interval (merging if necessary).

You can assume that the intervals are initially sorted according to their start time.


Example 1:
Input: intervals = [[1,3],[6,9]], newInterval = [2,5]
Output: [[1,5],[6,9]]

Example 2:
Input: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]
Output: [[1,2],[3,10],[12,16]]
Explanation: Because the new interval `[4,8]` overlaps with `[3,5],[6,7],[8,10]`.


Example 3:
Input: intervals = [], newInterval = [5,7]
Output: [[5,7]]

Example 4:
Input: intervals = [[1,5]], newInterval = [2,3]
Output: [[1,5]]

Example 5:
Input: intervals = [[1,5]], newInterval = [2,7]
Output: [[1,7]]

constraint:
`0 <= intervals. length <= 104`
`interval[i].length == 2`
`0 <= interval[i][0] <= interval[i][1] <= 105`
`intervals` are ordered by `intervals[i][0]` in ascending order.

`newInterval. length == 2`
`0 <= newInterval[0] <= newInterval[1] <= 105`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s consisting of space-separated words, return the length of the last word in the string. Returns ""0"" if the last word does not exist.

A word is the largest substring consisting only of non-space characters.


Example 1:
Input: s = ""Hello World""
Output: 5

Example 2:
Input: s = "" ""
output: 0

constraint:
`1 <= s.length <= 104`
`s` contains only English letters and spaces `' '`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer ""n"", generate an ""n x n"" ""matrix"" filled with elements from ""1"" to ""n2"" in spiral order.


Example 1:
Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]

Example 2:
Input: n = 1
output: [[1]]

constraint:
`1 <= n <= 20`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The set ""[1, 2, 3, ..., n]"" contains a total of ""n!"" unique permutations.

By listing and labeling all permutations in order, we obtain the following n = 3 sequence:
`""123""`
`""132""`
`""213""`
`""231""`
`""312""`
`""321""`
Given 'n' and 'k', return the kth permutation sequence.


Example 1:
Input: n = 3, k = 3
Output: ""213""

Example 2:
Input: n = 4, k = 9
Output: ""2314""

Example 3:
Input: n = 3, k = 1
Output: ""123""

constraint:
`1 <= n <= 9`
`1 <= k <= n!`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of the linked list, rotate the list right by ""k"" positions.


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]

Example 2:
Input: head = [0,1,2], k = 4
Output: [2,0,1]

constraint:
The number of nodes in the list is in the range '[0, 500]'.

`-100 <= Node.val <= 100`
`0 <= k <= 2 * 109`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The robot is located in the upper left corner of the ""m x n"" grid (labeled ""start"" in the image below).

The robot can only move down or to the right at any point in time. The robot is trying to reach the bottom right corner of the grid (marked ""Done"" in the image below).

How many possible unique paths are there?

Example 1:
Input: m = 3, n = 7
Output: 28

Example 2:
Input: m = 3, n = 2
Output: 3
explain:
There are 3 ways from the upper left corner to the lower right corner:
1. Right -> Down -> Down
2. Down -> Down -> Right
3. Down -> Right -> Down

Example 3:
Input: m = 7, n = 3
Output: 28

Example 4:
Input: m = 3, n = 3
Output: 6

constraint:
`1 <= meters, n <= 100`
It is guaranteed that the answer will be less than or equal to ""2*109"".",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The robot is located in the upper left corner of the ""m x n"" grid (labeled ""start"" in the image below).

The robot can only move down or to the right at any point in time. The robot is trying to reach the bottom right corner of the grid (marked ""Done"" in the image below).

Now consider if some obstacles are added to the grid. How many unique paths will there be?
Obstacles and spaces in the grid are labeled ""1"" and ""0"", respectively.


Example 1:
Input: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]
Output: 2
Explanation: There is an obstacle in the middle of the 3x3 grid above.

There are two ways to get to the bottom right corner:
1. Right -> Right -> Down -> Down
2. Down -> Down -> Right -> Right

Example 2:
Input: obstacleGrid = [[0,1],[0,0]]
Output: 1

constraint:
`m == obstacleGrid. length`
`n == obstacleGrid[i].length`
`1 <= meters, n <= 100`
`obstacleGrid[i][j]` is either `0` or `1`.",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" ""grid"" filled with non-negative numbers, find a path from top left to bottom right that minimizes the sum of all numbers along the way.

NOTE: You can only move down or right at any point in time.


Example 1:
Input: grid = [[1,3,1],[1,5,1],[4,2,1]]
Output: 7
Explanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.


Example 2:
Input: Grid = [[1,2,3],[4,5,6]]
Output: 12

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 200`
`0 <= grid[i][j] <= 100`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A valid number can be broken into these parts (in order):
Decimal or integer.

(Optional) An ""e"" or ""E"" followed by an integer.

A decimal number can be broken into these parts (in order):
(Optional) A sign character (""+"" or ""-"").

One of the following formats:

At least one digit followed by a dot ""."".

At least one digit, followed by a dot ""."", followed by at least one digit.

A dot ""."" followed by at least one digit.

An integer can be broken into these parts (in order):
(Optional) A sign character (""+"" or ""-"").

At least one digit.

For example, all of the following are valid numbers: `[""2"", ""0089"", ""-0.1"", ""+3.14"", ""4."", ""-.9"", ""2e10"", ""-90E3"", "" 3e+7"", ""+6e-1"", ""53.5e93"", ""-123.456e789""]`, and the following are not valid numbers: `[""abc"", ""1a"", ""1e"", ""e3 "", "" 99e2.5"", ""--6"", ""-+3"", ""95a54e53""]`.

Given a string s, return true if s is a valid number.


Example 1:
Input: s = ""0""
output: true

Example 2:
Input: s = ""e""
output: error

Example 3:
Input: s = "".""
output: error

Example 4:
Input: s = "".1""
output: true

constraint:
`1 <= s.length <= 20`
`s` consists only of English letters (uppercase and lowercase), digits (`0-9`) plus `'+'`, minus `'-'`, or dot `'.'`.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a nonempty array of decimal digits representing nonnegative integers, increment the integer by 1.

When storing numbers, the most significant number is at the beginning of the list, and each element in the array contains a number.

You can assume that integers don't contain any leading zeros, except for the number 0 itself.


Example 1:
Input: number = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.


Example 2:
Input: number = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.


Example 3:
Input: number = [0]
output: [1]

constraint:
`1 <= digits.length <= 100`
`0 <= number[i] <= 9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two binary strings ""a"" and ""b"", return their sum as a binary string.


Example 1:
Input: a = ""11"", b = ""1""
Output: ""100""

Example 2:
Input: a = ""1010"", b = ""1011""
Output: ""10101""

constraint:
`1 <= a.length, b.length <= 104`
`a` and `b` contain only `'0'` or `'1'` characters.

Each string contains no leading zeros, except zero itself.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of words and a width maxWidth, formats the text so that each line has exactly maxWidth characters and is perfectly (left and right) aligned.

You should wrap your words greedily; that is, include as many words as possible on each line. Pad with extra spaces `' '` as necessary so that each line has exactly maxWidth characters.

Extra spaces between words should be distributed as evenly as possible. If the number of spaces in a line is not evenly distributed between words, the slots on the left will be assigned more spaces than the slots on the right.

For the last line of text, it should be left aligned with no extra spaces between words.

notes:
A word is defined as a sequence of characters consisting only of non-whitespace characters.

The length of each word is guaranteed to be greater than 0 and not exceed maxWidth.

The input array ""words"" contains at least one word.


Example 1:
Input: words = [""This"", ""is"", ""an"", ""example"", ""of"", ""text"", ""justification.""], maxWidth = 16
output:
[
   ""this is one"",
   ""text example"",
   ""reason.""
]

Example 2:
Input: words = [""What"",""must"",""be"",""acknowledgment"",""shall"",""be""], maxWidth = 16
output:
[
  ""what must be"",
  ""Thank you"",
  ""should        ""
]
Explanation: Note that the last line says ""shall be"" instead of ""shall be"", because the last line must be left-aligned rather than fully aligned.

Note that the second line is also left-aligned, since it contains only one word.


Example 3:
Input: words = [""Science"",""is"",""what"",""we"",""understand"",""well"",""enough"",""to"",""explain"",""to"",""a"","" computer."",""Art"",""is"",""everything"",""else"",""we"",""do""], maxWidth = 20
output:
[
  ""Science is us"",
  ""Easy to understand"",
  ""enough to explain"",
  ""A computer. Art is"",
  ""Our Everything"",
  ""Do                  ""
]

constraint:
`1 <= words.length <= 300`
`1 <= words[i].length <= 20`
`words[i]` contains only English letters and symbols.

`1 <= max-width <= 100`
`words[i].length <= maxWidth`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer ""x"", compute and return the square root of ""x"".

Since the return type is an integer, the fractional part is truncated and only the integer part of the result is returned.


Example 1:
Input: x = 4
Output: 2

Example 2:
Input: x = 8
Output: 2
Explanation: The square root of 8 is 2.82842..., which returns 2 because the fractional part is truncated.


constraint:
`0 <= x <= 231 - 1`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are climbing stairs. It takes `n` steps to reach the top.

You can climb `1` or `2` steps each time. How many different ways can you get to the top?

Example 1:
Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top of the mountain.

1. 1 step + 1 step
2. 2 steps

Example 2:
Input: n = 3
Output: 3
Instructions: There are 3 ways to get to the top.

1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step

constraint:
`1 <= n <= 45`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""path"" which is an absolute path to a file or directory (starting with a slash ""/"") in a Unix-style filesystem, convert it to a simplified canonical path.

In a Unix-style file system, a period ""."" indicates the current directory, a double period "".."" indicates the previous directory, and any multiple consecutive slashes (ie ""//"" `) are treated as single slashes `'/'`. For this question, periods in any other format (such as ""..."") are treated as file/directory names.

The canonical path should have the following format:
The path starts with a single slash ""/"".

Any two directories are separated by a slash ""/"".

The path does not end with a trailing ""/"".

The path contains only directories on the path from the root directory to the target file or directory (i.e. no period ""."" or double period "".."")
Returns the simplified canonical path.


Example 1:
Input: path = ""/home/""
Output: ""/home""
Note: Note that there is no trailing slash after the last directory name.


Example 2:
Input: path = ""/../""
Output: ""/""
Explanation: Going one level up from the root directory is a no-op, since the root directory is the highest level you can reach.


Example 3:
Input: path = ""/home//foo/""
Output: ""/home/foo""
Explanation: In a canonical path, multiple consecutive slashes are replaced by a single slash.


Example 4:
Input: path = ""/a/./b/../../c/""
Output: ""/c""

constraint:
`1 <= path length <= 3000`
`path` consists of English letters, numbers, periods `'.'`, slashes `'/'` or `'_'`.

`path` is a valid absolute Unix path.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""word1"" and ""word2"", return the minimum number of operations required to convert ""word1"" to ""word2"".

You can perform three operations on a word:
insert a character
delete a character
replace a character

Example 1:
Input: word1 = ""horse"", word2 = ""ros""
Output: 3
explain:
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')

Example 2:
Input: word1 = ""Intent"", word2 = ""Execute""
Output: 5
explain:
Intent -> Intent (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
Extend -> Execute (replace ""n"" with ""c"")
execute -> execute (insert 'u')

constraint:
`0 <= word1.length, word2.length <= 500`
`word1` and `word2` consist of lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" matrix. If an element is 0, set its entire row and column to 0. Execute in-place.

follow up:
A straightforward solution using O(mn) space is probably not a good idea.

A simple improvement uses O(m + n) space, but still not the best solution.

Can you devise a constant space solution?

Example 1:
Input: Matrix = [[1,1,1],[1,0,1],[1,1,1]]
Output: [[1,0,1],[0,0,0],[1,0,1]]

Example 2:
Input: Matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]
Output: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]

constraint:
`m == matrix.length`
`n == matrix[0].length`
`1 <= meters, n <= 200`
`-231 <= matrix[i][j] <= 231 - 1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an efficient algorithm to search for a value in an `m x n` matrix. This matrix has the following properties:
The integers in each row are sorted from left to right.

The first integer in each row is greater than the last integer in the previous row.


Example 1:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3
output: true

Example 2:
Input: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13
output: error

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 100`
`-104 <= matrix[i][j], target <= 104`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array nums containing `n` red, white, or blue objects, sort them in-place so that objects of the same color are adjacent, in the color order red, white, and blue.

We will use the integers ""0"", ""1"" and ""2"" to represent red, white and blue respectively.


Example 1:
Input: nums = [2,0,2,1,1,0]
Output: [0,0,1,1,2,2]

Example 2:
Input: nums = [2,0,1]
Output: [0,1,2]

Example 3:
input: nums = [0]
output: [0]

Example 4:
input: nums = [1]
output: [1]

constraint:
`n == nums. length`
`1 <= n <= 300`
`nums[i]` is `0`, `1` or `2`.

follow up:
Can you solve this without using the library's sort function?
Can you come up with a one-shot algorithm that uses only ""O(1)"" constant space?",1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, return the smallest window in `s` that will contain all characters in `t`. Returns the empty string `""""` if there is no window in s covering all characters in `t`.

Note that if such a window exists, it is guaranteed that there is always only one unique minimum window in s.


Example 1:
Input: s = ""ADOBECODEBANC"", t = ""ABC""
Output: ""BANC""

Example 2:
Input: s = ""a"", t = ""a""
output: ""one""

constraint:
`1 <= s.length, t.length <= 105`
`s` and `t` are composed of English letters.

Follow up: Can you find an algorithm that runs in `O(n)` time?",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""n"" and ""k"", return all possible combinations of ""k"" numbers in the range ""[1, n]"".

You can return answers in any order.


Example 1:
Input: n = 4, k = 2
output:
[
  [2,4],
  [3,4],
  [2,3],
  [1,2],
  [1,3],
  [1,4],
]

Example 2:
Input: n = 1, k = 1
output: [[1]]

constraint:
`1 <= n <= 20`
`1 <= k <= n`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" containing unique elements, return all possible subsets (power sets).

Solution sets must not contain duplicate subsets. Solutions are returned in any order.


Example 1:
Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]

Example 2:
input: nums = [0]
Output: [[],[0]]

constraint:
`1 <= nums.length <= 10`
`-10 <= nums[i] <= 10`
All numbers in `nums` are unique.",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" grid consisting of the characters ""board"" and the string ""word"", return ""true"" if ""word"" exists in the grid.

The word can be formed from the letters of sequentially adjacent cells, where the adjacent cells are either horizontally or vertically adjacent. The same letter cell cannot be used more than once.


Example 1:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"", ""E"",""E""]], word = ""ABCCED""
output: true

Example 2:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"", ""E"",""E""]], word = ""SEE""
output: true

Example 3:
Input: board = [[""A"",""B"",""C"",""E""],[""S"",""F"",""C"",""S""],[""A"",""D"", ""E"",""E""]], word = ""ABCB""
output: error

constraint:
`m == board. length`
`n = board[i].length`
`1 <= m, n <= 6`
`1 <= word.length <= 15`
`board` and `word` contain only lowercase and uppercase English letters.

Follow up: Can you use search pruning to make your solution faster on larger ""boards""?",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array nums, remove duplicates in-place such that the duplicates occur at most twice and return the new length.

Do not allocate additional space for another array; you must do so by modifying the input array in-place with O(1) additional memory.

clarify:
Confused why the return value is an integer while your answer is an array?
Note that the input array is passed by reference, which means that the caller will be aware of modifications to the input array.

Internally you can think of it like this:
// nums is passed in by reference. (ie without making a copy)
int len ​​= removeDuplicates(nums);
// The caller will be aware of any modifications to nums in the function.

// Using the length returned by the function, print the first len ​​elements.

for (int i = 0; i < len; i++) {
    print(number[i]);
}

Example 1:
Input: nums = [1,1,1,2,2,3]
Output: 5, nums = [1,1,2,2,3]
Explanation: Your function should return length = `5`, the first five elements of `nums` are `1, 1, 2, 2` and 3 respectively. It doesn't matter what goes beyond the returned length.


Example 2:
Input: nums = [0,0,1,1,1,1,2,3,3]
Output: 7, nums = [0,0,1,1,2,3,3]
Explanation: Your function should return length = `7`, and the first seven elements of `nums` are modified to `0`, 0, 1, 1, 2, 3, and 3, respectively. It doesn't matter what value is set beyond the returned length.


constraint:
`1 <= nums.length <= 3 * 104`
`-104 <= nums[i] <= 104`
`nums` are sorted in ascending order.",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an array ""nums"" of integers (not necessarily with distinct values) sorted in non-decreasing order.

`nums` is rotated at an unknown pivot index `k` (`0 <= k < nums.length`) before being passed to your function such that the resulting array is `[nums[k], nums[k +1] ], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]` (0 indexed). For example, ""[0,1,2,4,4,4,5,6,6,7]"" might rotate at pivot index ""5"" and become ""[4,5,6,6,7 ,0”, 1,2,4,4]`.

Given a rotated array ""nums"" and an integer ""target"", return ""true"" if ""target"" is in ""nums"", and ""false"" if not.


Example 1:
Input: nums = [2,5,6,0,0,1,2], target = 0
output: true

Example 2:
Input: nums = [2,5,6,0,0,1,2], target = 3
output: error

constraint:
`1 <= nums.length <= 5000`
`-104 <= nums[i] <= 104`
`nums` is guaranteed to rotate around some pivot.

`-104 <= target <= 104`
Follow up: This question is the same as Search in Rotated Sorted Array, where `nums` may contain duplicates. Does this affect runtime complexity? How and why?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a sorted linked list, remove all nodes with duplicate numbers, leaving only numbers that differ from the original list. Returns a sorted linked list.


Example 1:
Input: head = [1,2,3,3,4,4,5]
Output: [1,2,5]

Example 2:
Input: head = [1,1,1,2,3]
output: [2,3]

constraint:
The number of nodes in the list is in the range '[0, 300]'.

`-100 <= Node.val <= 100`
The list is guaranteed to be sorted in ascending order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a sorted linked list, remove all duplicates such that each element appears only once. Returns a sorted linked list.


Example 1:
Input: head = [1,1,2]
output: [1,2]

Example 2:
Input: head = [1,1,2,3,3]
Output: [1,2,3]

constraint:
The number of nodes in the list is in the range '[0, 300]'.

`-100 <= Node.val <= 100`
The list is guaranteed to be sorted in ascending order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""heights"" representing the bar heights of the histogram, where each bar has a width of ""1"", returns the area of ​​the largest rectangle in the histogram.


Example 1:
Input: Height = [2,1,5,6,2,3]
Output: 10
Explanation: Above is a histogram where each bar has a width of 1.

The largest rectangle is shown in the red area, area = 10 units.


Example 2:
Input: height = [2,4]
Output: 4

constraint:
`1 <= heights. length <= 105`
`0 <= height[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""rows x columns"" binary ""matrix"" filled with ""0s"" and ""1s"", find the largest rectangle containing only ""1s"" and return its area.


Example 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[ ""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 6
Explanation: The largest rectangle is shown in the figure above.


Example 2:
Input: matrix = []
output: 0

Example 3:
Input: matrix = [[""0""]]
output: 0

Example 4:
Input: matrix = [[""1""]]
Output: 1

Example 5:
Input: matrix = [[""0"",""0""]]
output: 0

constraint:
`rows == matrix.length`
`cols == matrix[i].length`
`0 <= rows, columns <= 200`
`matrix[i][j]` is either `'0'` or `'1'`.",1,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a linked list and a value ""x"", partition it such that all nodes less than ""x"" come before nodes greater than or equal to ""x"".

You should preserve the original relative order of the nodes in each of the two partitions.


Example 1:
Input: head = [1,4,3,2,5,2], x = 3
Output: [1,2,2,4,3,5]

Example 2:
Input: head = [2,1], x = 2
output: [1,2]

constraint:
The number of nodes in the list is in the range '[0, 200]'.

`-100 <= Node.val <= 100`
`-200 <= x <= 200`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can shuffle the string s to obtain the string t using the following algorithm:
Stop if the string has length 1.

If the length of the string is > 1, do the following:

Splits the string into two non-empty substrings at random indices, i.e., if the string is s, splits it into x and y, where s = x + y.

Randomly decide to swap two substrings or keep their order the same. That is, after this step, `s` may become `s = x + y` or `s = y + x`.

Recursively applies step 1 to each of the two substrings ""x"" and ""y"".

Given two strings s1 and s2 of the same length, return true if s2 is an unordered string of s1, false otherwise.


Example 1:
Input: s1 = ""great"", s2 = ""rgeat""
output: true
Explanation: One possible case to apply to s1 is:
""great"" --> ""gr/eat"" // divide at random index.

""gr/eat"" --> ""gr/eat"" // Randomly decide not to swap two substrings and keep their order.

""gr/eat"" --> ""g/r / e/at"" // Recursively apply the same algorithm on two substrings. Divide each of them by a random index.

""g/r / e/at"" --> ""r/g / e/at"" // A random decision is to swap the first substring and keep the order of the second substring the same.

""r/g / e/at"" --> ""r/g / e/ a/t"" // Apply the algorithm recursively again, dividing ""at"" by ""a/t"".

""r/g / e/ a/t"" --> ""r/g / e/ a/t"" // The random decision is to keep the two substrings in the same order.

The algorithm now stops and the resulting string is ""rgeat"", which is s2.

Since there is a condition that could cause s1 to be scrambled into s2, we return true.


Example 2:
Input: s1 = ""abcde"", s2 = ""caebd""
output: error

Example 3:
Input: s1 = ""a"", s2 = ""a""
output: true

constraint:
`s1.length == s2.length`
`1 <= s1.length <= 30`
`s1` and `s2` consist of lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sorted integer arrays `nums1` and `nums2`, merge `nums2` into `nums1` as a sorted array.

The number of elements initialized in `nums1` and `nums2` are `m` and `n` respectively. You can assume that `nums1` is of size equal to `m + n`, so that it has enough room for the extra elements from `nums2`.


Example 1:
Input: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
Output: [1,2,2,3,5,6]

Example 2:
Input: nums1 = [1], m = 1, nums2 = [], n = 0
output: [1]

constraint:
`nums1.length == m + n`
`nums2.length == n`
`0 <= meters, n <= 200`
`1 <= m + n <= 200`
`-109 <= nums1[i], nums2[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Gray code is a binary number system in which two consecutive values ​​differ by only one bit.

Given an integer 'n' representing the total number of bits in the code, return an arbitrary Gray code sequence.

Gray code sequence must start with ""0"".


Example 1:
Input: n = 2
Output: [0,1,3,2]
explain:
00 - 0
01-1
11 - 3
10 - 2
[0,2,3,1] is also a valid Gray code sequence.

00 - 0
10 - 2
11 - 3
01-1

Example 2:
Input: n = 1
output: [0,1]

constraint:
`1 <= n <= 16`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums that may contain duplicates, return all possible subsets (power sets).

Solution sets must not contain duplicate subsets. Solutions are returned in any order.


Example 1:
Input: nums = [1,2,2]
Output: [[],[1],[1,2],[1,2,2],[2],[2,2]]

Example 2:
input: nums = [0]
Output: [[],[0]]

constraint:
`1 <= nums.length <= 10`
`-10 <= nums[i] <= 10`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Messages containing letters ""A-Z"" can be encoded as numbers using the following mapping:
'A' -> ""1""
'B' -> ""2""
...

'Z' -> ""26""
To decode an encoded message, all digits must be grouped and then mapped back to letters using the inverse of the above mapping (multiple methods are possible). For example, `""11106""` could map to:
`""AAJF""` with grouping `(1 1 10 6)`
`""KJF""` with grouping `(11 10 6)`
Note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'F' because `""6""` is different from `""06""`.

Given a string s containing only digits, return the number of ways to decode it.

The answer is guaranteed to fit in a 32-bit integer.


Example 1:
Input: s = ""12""
Output: 2
Explanation: ""12"" can be decoded as ""AB"" (1 2) or ""L"" (12).


Example 2:
Input: s = ""226""
Output: 3
Explanation: ""226"" can be decoded as ""BZ"" (2 26), ""VF"" (22 6), or ""BBF"" (2 2 6).


Example 3:
Input: s = ""0""
output: 0
Explanation: There is no character mapped to a number starting with 0.

The only valid 0 mappings are 'J' -> ""10"" and 'T' -> ""20"", neither of which starts with 0.

Therefore, there is no efficient way to decode this, since all numbers need to be mapped.


Example 4:
Input: s = ""06""
output: 0
Explanation: ""06"" cannot be mapped to ""F"" because of leading zeros (""6"" is not the same as ""06"").


constraint:
`1 <= s.length <= 100`
`s` contains only digits, and may contain leading zeros.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the head of a singly linked list and two integers left and right , where left <= right , reverses the list's nodes from position left to position right , and returns the reversed list.


Example 1:
Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Example 2:
Input: head = [5], left = 1, right = 1
Output: [5]

constraint:
The number of nodes in the list is ""n"".

`1 <= n <= 500`
`-500 <= Node.val <= 500`
`1 <= left <= right <= n`
Follow up: Can you do it all in one go?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s containing only numbers, return all possible valid IP addresses that can be obtained from s. You may return items in any order.

A valid IP address consists of exactly four integers, each between ""0"" and ""255"", separated by a single period and without leading zeros. For example, ""0.1.2.201"" and ""192.168.1.1"" are valid IP addresses, and ""0.011.255.245"", ""192.168.1.312"", and ""192.168@1.1"" are invalid IP addresses.

Example 1:
Input: s = ""25525511135""
Output: [""255.255.11.135"",""255.255.111.35""]

Example 2:
Input: s = ""0000""
Output: [""0.0.0.0""]

Example 3:
Input: s = ""1111""
Output: [""1.1.1.1""]

Example 4:
Input: s = ""010010""
Output: [""0.10.0.10"",""0.100.1.0""]

Example 5:
Input: s = ""101023""
Output: [""1.0.10.23"",""1.0.102.3"",""10.1.0.23"",""10.10.2.3"",""101.0.2.3""]

constraint:
`0 <= s.length <= 3000`
`s` consists of numbers only.",0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return an inorder traversal of its node values.


Example 1:
Input: root = [1,null,2,3]
Output: [1,3,2]

Example 2:
input: root = []
output: []

Example 3:
input: root = [1]
output: [1]

Example 4:
Input: root = [1,2]
output: [2,1]

Example 5:
Input: root = [1,null,2]
output: [1,2]

constraint:
The number of nodes in the tree is in the range '[0, 100]'.

`-100 <= Node.val <= 100`
follow up:
The recursive solution is trivial, can you iterate?",0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return all structurally unique BSTs (Binary Search Trees) that have exactly ""n"" nodes with unique values ​​from ""1"" to ""n"". Return answers in any order.


Example 1:
Input: n = 3
Output: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2, empty, 1]]

Example 2:
Input: n = 1
output: [[1]]

constraint:
`1 <= n <= 8`",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", returns the number of structurally unique BSTs (Binary Search Trees) that have exactly ""n"" nodes with unique values ​​from ""1"" to ""n"".


Example 1:
Input: n = 3
Output: 5

Example 2:
Input: n = 1
Output: 1

constraint:
`1 <= n <= 19`",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the strings `s1`, `s2`, and `s3`, find whether `s3` is formed by interleaving `s1` and `s2`.

The interleaving of two strings s and t is a configuration in which they are divided into non-empty substrings such that:
`s = s1 + s2 + ... + sn`
`t = t1 + t2 + ... + tm`
`|n-m| <= 1`
Interleaving is `s1 + t1 + s2 + t2 + s3 + t3 + ...` or `t1 + s1 + t2 + s2 + t3 + s3 + ...`
Note: `a + b` is the concatenation of the strings `a` and `b`.


Example 1:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbcbcac""
output: true

Example 2:
Input: s1 = ""aabcc"", s2 = ""dbbca"", s3 = ""aadbbbaccc""
output: error

Example 3:
Input: s1 = """", s2 = """", s3 = """"
output: true

constraint:
`0 <= s1.length, s2.length <= 100`
`0 <= s3.length <= 200`
`s1`, `s2` and `s3` consist of lowercase English letters.

Follow up: Can you solve it with only `O(s2.length)` extra memory space?",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get the ""root"" of a Binary Search Tree (BST), where two nodes of the tree are mistakenly swapped. Restores the tree without changing its structure.

Follow up: The solution using ""O(n)"" space is very simple. Can you devise a constant space solution?

Example 1:
Input: root = [1,3,null,null,2]
Output: [3,1,null,null,2]
Explanation: 3 cannot be the left child of 1 because 3 > 1. Swap 1 and 3 to make BST valid.


Example 2:
Input: root = [3,1,4,null,null,2]
Output: [2,1,4,null,null,3]
Explanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swap 2 and 3 to make BST valid.


constraint:
The number of nodes in the tree is in the range ""[2, 1000]"".

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the roots of two binary trees ""p"" and ""q"", write a function to check if they are the same.

Two binary trees are considered identical if they are structurally identical and the nodes have the same value.


Example 1:
Input: p = [1,2,3], q = [1,2,3]
output: true

Example 2:
Input: p = [1,2], q = [1,null,2]
output: error

Example 3:
Input: p = [1,2,1], q = [1,1,2]
output: error

constraint:
The number of nodes in both trees is in the range ""[0, 100]"".

`-104 <= Node.val <= 104`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, check if it is a mirror image of itself (i.e. is symmetric around its center).


Example 1:
Input: root = [1,2,2,3,4,4,3]
output: true

Example 2:
Input: root = [1,2,2,null,3,null,3]
output: error

constraint:
The number of nodes in the tree is in the range ""[1, 1000]"".

`-100 <= Node.val <= 100`
Follow up: Can you solve it recursively and iteratively?",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return a level-order traversal of its node values. (ie, from left to right, layer by layer).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[9,20],[15,7]]

Example 2:
input: root = [1]
output: [[1]]

Example 3:
input: root = []
output: []

constraint:
The number of nodes in the tree is in the range '[0, 2000]'.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return a zigzag level-order traversal of its node values. (ie, go left to right, then right to left to the next level, and alternate between the two).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[3],[20,9],[15,7]]

Example 2:
input: root = [1]
output: [[1]]

Example 3:
input: root = []
output: []

constraint:
The number of nodes in the tree is in the range '[0, 2000]'.

`-100 <= Node.val <= 100`",0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return its maximum depth.

The maximum depth of a binary tree is the number of nodes on the longest path from the root node to the furthest leaf node.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 3

Example 2:
Input: root = [1,null,2]
Output: 2

Example 3:
input: root = []
output: 0

Example 4:
input: root = [0]
Output: 1

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`-100 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `preorder` and `inorder`, where `preorder` is the preorder traversal of a binary tree and `inorder` is the inorder traversal of the same tree, construct and return a binary tree.


Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
output: [-1]

constraint:
`1 <= preorder.length <= 3000`
`inorder.length == preorder.length`
`-3000 <= preorder[i], inorder[i] <= 3000`
`preorder` and `inorder` consist of unique values.

Every value of `inorder` also appears in `preorder`.

`preorder` is guaranteed to be a preorder traversal of the tree.

`inorder` is guaranteed to be an inorder traversal of the tree.",1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays ""inorder"" and ""postorder"", where ""inorder"" is the inorder traversal of a binary tree and ""postorder"" is the postorder traversal of the same tree, construct and return a binary tree.


Example 1:
Input: Inorder = [9,3,15,20,7], Postorder = [9,15,7,20,3]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: inorder = [-1], postorder = [-1]
output: [-1]

constraint:
`1 <= inorder.length <= 3000`
`postorder.length == inorder.length`
`-3000 <= inorder[i], postorder[i] <= 3000`
`inorder` and `postorder` consist of unique values.

Every value of `postorder` also appears in `inorder`.

`inorder` is guaranteed to be an inorder traversal of the tree.

`postorder` is guaranteed to be a postorder traversal of the tree.",1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""root"" of a binary tree, return a bottom-up hierarchical order traversal of its node values. (ie, layer by layer from left to right, from leaf to root).


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[15,7],[9,20],[3]]

Example 2:
input: root = [1]
output: [[1]]

Example 3:
input: root = []
output: []

constraint:
The number of nodes in the tree is in the range '[0, 2000]'.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums with elements sorted in ascending order, convert it to a height-balanced binary search tree.

A height-balanced binary tree is a binary tree in which the depths of the two subtrees of each node never differ by more than one.


Example 1:
Input: nums = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: [0,-10,5,null,-3,null,9] is also accepted:

Example 2:
Input: nums = [1,3]
Output: [3,1]
Explanation: [1,3] and [3,1] are highly balanced BSTs.


constraint:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` are sorted in strictly increasing order.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a singly linked list whose elements are sorted in ascending order, convert it to a height-balanced BST.

For this problem, a height-balanced binary tree is defined as a binary tree in which the depths of the two subtrees at each node never differ by more than 1.


Example 1:
Input: head = [-10,-3,0,5,9]
Output: [0,-3,9,-10,null,5]
Explanation: One possible answer is [0,-3,9,-10,null,5], which represents the displayed height balanced BST.


Example 2:
input: head = []
output: []

Example 3:
input: head = [0]
output: [0]

Example 4:
Input: head = [1,3]
Output: [3,1]

constraint:
The number of nodes in `head` is in the range `[0, 2 * 104]`.

`-10^5 <= Node.val <= 10^5`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, determine whether it is height balanced.

For this problem, a height-balanced binary tree is defined as:
A binary tree in which the heights of the left and right subtrees of each node differ by no more than 1.


Example 1:
Input: root = [3,9,20,null,null,15,7]
output: true

Example 2:
Input: root = [1,2,2,3,3,null,null,4,4]
output: error

Example 3:
input: root = []
output: true

constraint:
The number of nodes in the tree is in the range '[0, 5000]'.

`-104 <= Node.val <= 104`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes on the shortest path from the root node to the nearest leaf node.

Note: A leaf is a node with no children.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: 2

Example 2:
Input: root = [2,null,3,null,4,null,5,null,6]
Output: 5

constraint:
The number of nodes in the tree is in the range '[0, 105]'.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree and an integer ""targetSum"", return ""true"" if the tree has a path from root to leaf such that all values ​​along the path sum to equal ""targetSum"".

A leaf is a node with no children.


Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22
output: true

Example 2:
Input: root = [1,2,3], targetSum = 5
output: error

Example 3:
Input: root = [1,2], targetSum = 0
output: error

constraint:
The number of nodes in the tree is in the range '[0, 5000]'.

`-1000 <= Node.val <= 1000`
`-1000 <= target sum <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree ""root"" and an integer ""targetSum"", return all root-to-leaf paths where the sum of each path equals ""targetSum"".

A leaf is a node with no children.


Example 1:
Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]

Example 2:
Input: root = [1,2,3], targetSum = 5
output: []

Example 3:
Input: root = [1,2], targetSum = 0
output: []

constraint:
The number of nodes in the tree is in the range '[0, 5000]'.

`-1000 <= Node.val <= 1000`
`-1000 <= target sum <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""root"" of a binary tree, flatten the tree into a ""linked list"":
A ""linked list"" should use the same `TreeNode` class, where the `right` subpointer points to the next node in the list, and the `left` subpointer is always `null`.

The ""linked list"" should be in the same preorder traversal order as the binary tree.


Example 1:
Input: root = [1,2,5,3,4,null,6]
Output: [1,null,2,null,3,null,4,null,5,null,6]

Example 2:
input: root = []
output: []

Example 3:
input: root = [0]
output: [0]

constraint:
The number of nodes in the tree is in the range '[0, 2000]'.

`-100 <= Node.val <= 100`
Follow up: Can you flatten the tree in-place (with `O(1)` extra space)?",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s"" and ""t"", return the number of distinct subsequences of ""s"" equal to ""t"".

A subsequence of a string is a new string formed by deleting some (or none) characters from the original string without affecting the relative positions of the remaining characters. (i.e., ""ACE"" is a subsequence of ""ABCDE"", but ""AEC"" is not).

The answer is guaranteed to fit into a 32-bit signed integer.


Example 1:
Input: s = ""rabbit"", t = ""rabbit""
Output: 3
explain:
As shown below, there are 3 ways to generate a ""rabbit"" from S.

`rabbit`
`rabbit`
`rabbit`

Example 2:
Input: s = ""babgbag"", t = ""bag""
Output: 5
explain:
As shown below, there are 5 ways to generate a ""package"" from S.

`babbag`
`babbag`
`babbag`
`babbag`
`babbag`

constraint:
`1 <= s.length, t.length <= 1000`
`s` and `t` are composed of English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a perfect binary tree where all leaves are on the same level and each parent has two children. A binary tree is defined as follows:
struct node {
  integer value;
  node *left;
  node *right;
  node *next;
}
Fill each next pointer to point to its next right node. If there is no next right node, the next pointer shall be set to ""NULL"".

Initially, all next pointers are set to ""NULL"".

follow up:
You can only use constant extra space.

The recursive approach is fine, and you can assume that the implicit stack space doesn't count as extra space for this problem.


Example 1:
Input: root = [1,2,3,4,5,6,7]
Output: [1,#,2,3,#,4,5,6,7,#]
Explanation: Given the perfect binary tree above (diagram A), your function should fill each next pointer to point to its next right node, just like in diagram B. The serialized output is in order of levels connected by next pointers, with ' #' indicating the end of each level.


constraint:
The number of nodes in the given tree is less than '4096'.

`-1000 <= node.val <= 1000`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree
struct node {
  integer value;
  node *left;
  node *right;
  node *next;
}
Fill each next pointer to point to its next right node. If there is no next right node, the next pointer shall be set to ""NULL"".

Initially, all next pointers are set to ""NULL"".

follow up:
You can only use constant extra space.

The recursive approach is fine, and you can assume that the implicit stack space doesn't count as extra space for this problem.


Example 1:
Input: root = [1,2,3,4,5,null,7]
Output: [1,#,2,3,#,4,5,7,#]
Explanation: Given the binary tree above (diagram A), your function should fill each next pointer to point to its next right node, just like in diagram B. The serialized output is in level order, connected by next pointers, with '#' indicating the end of each level.


constraint:
The number of nodes in the given tree is less than '6000'.

`-100 <= node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""numRows"", return the first numRows of the Pascal triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it, as follows:

Example 1:
Input: numRows = 5
Output: [[1],[1,1],[1,2,1],[1,3,3,1],[1,4,6,4,1]]

Example 2:
Input: numRows = 1
output: [[1]]

constraint:
`1 <= numRows <= 30`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""rowIndex"", returns the ""rowIndexth"" (0-indexed) row of the Pascal triangle.

In Pascal's triangle, each number is the sum of the two numbers directly above it, as follows:

Example 1:
Input: rowIndex = 3
Output: [1,3,3,1]

Example 2:
Input: rowIndex = 0
output: [1]

Example 3:
Input: rowIndex = 1
output: [1,1]

constraint:
`0 <= row index <= 33`
Follow up: Can you optimize your algorithm to use only ""O(rowIndex)"" extra space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""triangular"" array, return the minimum path sum from top to bottom.

For each step, you can move to the adjacent number on the row below. More formally, if you are at index ""i"" of the current row, you can move to index ""i"" or index ""i+1"" of the next row.


Example 1:
Input: Triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]
Output: 11
Explanation: The triangle looks like:
   2
  3 4
 6 5 7
4 1 8 3
The minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined).


Example 2:
Input: Triangle = [[-10]]
Output: -10

constraint:
`1 <= triangle length <= 200`
`triangle[0].length == 1`
`triangle[i].length == triangle[i - 1].length + 1`
`-104 <= triangle[i][j] <= 104`
Follow up: Can you do this with only ""O(n)"" extra space, where ""n"" is the total number of rows in the triangle?",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `prices`, where `prices[i]` is the price of a given stock on day `ith`.

You want to maximize your profits by choosing one day to buy a stock and choosing another day in the future to sell that stock.

Returns the maximum profit you can make from this trade. Return `0` if you can't get any profit.


Example 1:
Input: Price = [7,1,5,3,6,4]
Output: 5
Explanation: buy on day 2 (price = 1), sell on day 5 (price = 6), profit = 6-1 = 5.

Note that buying on day 2 and selling on day 1 is not allowed as you have to buy first and then sell.


Example 2:
Input: Price = [7,6,4,3,1]
output: 0
Explanation: In this case, no trades are completed and max profit = 0.


constraint:
`1 <= prices.length <= 105`
`0 <= price[i] <= 104`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `prices`, where `prices[i]` is the price of a given stock on day `ith`.

Find the maximum profit you can make. You can complete any number of transactions (ie buying and selling one share of stock multiple times).

Note: You cannot have multiple trades in place at the same time (i.e. you must sell the stock before you can buy it again).


Example 1:
Input: Price = [7,1,5,3,6,4]
Output: 7
Explanation: buy on day 2 (price = 1), sell on day 3 (price = 5), profit = 5-1 = 4.

Then buy on the 4th day (price=3), sell on the 5th day (price=6), profit=6-3=3.


Example 2:
Input: Price = [1,2,3,4,5]
Output: 4
Explanation: buy on day 1 (price = 1), sell on day 5 (price = 5), profit = 5-1 = 4.

Note that you cannot buy on day 1, buy on day 2, and sell again, because you are doing multiple trades at the same time. You must sell before buying again.


Example 3:
Input: Price = [7,6,4,3,1]
output: 0
Explanation: In this case, no trades are completed, i.e. maximum profit = 0.


constraint:
`1 <= prices. length <= 3 * 104`
`0 <= price[i] <= 104`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `prices`, where `prices[i]` is the price of a given stock on day `ith`.

Find the maximum profit you can make. You can complete up to two transactions.

Note: You cannot have multiple trades in place at the same time (i.e. you must sell the stock before you can buy it again).


Example 1:
Input: Price = [3,3,5,0,0,3,1,4]
Output: 6
Explanation: buy on day 4 (price = 0), sell on day 6 (price = 3), profit = 3-0 = 3.

Then buy on the 7th day (price=1), sell on the 8th day (price=4), profit=4-1=3.


Example 2:
Input: Price = [1,2,3,4,5]
Output: 4
Explanation: buy on day 1 (price = 1), sell on day 5 (price = 5), profit = 5-1 = 4.

Note that you cannot buy on day 1, buy on day 2, and sell again, because you are doing multiple trades at the same time. You must sell before buying again.


Example 3:
Input: Price = [7,6,4,3,1]
output: 0
Explanation: In this case, no trades are completed, i.e. maximum profit = 0.


Example 4:
Input: Price = [1]
output: 0

constraint:
`1 <= prices.length <= 105`
`0 <= price[i] <= 105`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can appear at most once in the sequence. Note that the path does not need to go through the root.

The path sum of a path is the sum of the node values ​​in the path.

Given the ""root"" of a binary tree, return the maximum path sum of any path.


Example 1:
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3, and the sum of the paths is 2 + 1 + 3 = 6.


Example 2:
Input: root = [-10,9,20,null,null,15,7]
Output: 42
Explanation: The optimal path is 15 -> 20 -> 7, and the sum of the paths is 15 + 20 + 7 = 42.


constraint:
The number of nodes in the tree is in the range ""[1, 3 * 104]"".

`-1000 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s , determine whether it is a palindrome, considering only alphanumeric characters and ignoring case.


Example 1:
Input: s = ""A man, a plan, a canal: Panama""
output: true
Explanation: ""amanaplanacanalpanama"" is a palindrome.


Example 2:
Input: s = ""racing car""
output: error
Explanation: ""raceacar"" is not a palindrome.


constraint:
`1 <= s.length <= 2 * 105`
`s` contains only printable ASCII characters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The conversion sequence from the word ""beginWord"" to the word ""endWord"" using the dictionary ""wordList"" is a sequence of words ""beginWord -> s1 -> s2 -> ... -> sk"" such that:
Each pair of adjacent words differs by one letter.

Every `si` for `1 <= i <= k` is in `wordList`. Note that ""beginWord"" does not need to be in ""wordList"".

`sk == endWord`
Given two words ""beginWord"" and ""endWord"", and a dictionary ""wordList"", return all shortest transition sequences from ""beginWord"" to ""endWord"", or an empty list if no such sequence exists. Each sequence should return [beginWord, s1, s2, ..., sk] as a list of words.


Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: [[""hit"",""hot"",""dot"",""dog"",""cog""],[""hit"",""hot"",""lot"",""log"",""cog""]]
Explanation: There are 2 shortest transformation sequences:
""Hit"" -> ""Heat"" -> ""Spot"" -> ""Dog"" -> ""Gear""
""Hits"" -> ""Hot"" -> ""Lots"" -> ""Logs"" -> ""Gears""

Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
output: []
Explanation: endWord ""cog"" is not in wordList, so there is no valid conversion sequence.


constraint:
`1 <= beginWord.length <= 10`
`endWord.length == beginWord.length`
`1 <= wordList. length <= 5000`
`wordList[i].length == beginWord.length`
`beginWord`, `endWord` and `wordList[i]` consist of lowercase English letters.

`beginWord != endWord`
All words in `wordList` are unique.",1,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The conversion sequence from the word ""beginWord"" to the word ""endWord"" using the dictionary ""wordList"" is a sequence of words ""beginWord -> s1 -> s2 -> ... -> sk"" such that:
Each pair of adjacent words differs by one letter.

Every `si` for `1 <= i <= k` is in `wordList`. Note that ""beginWord"" does not need to be in ""wordList"".

`sk == endWord`
Given two words ""beginWord"" and ""endWord"", and a dictionary ""wordList"", return the number of words in the shortest transition sequence from ""beginWord"" to ""endWord"", or ""0"" if no such sequence exists .


Example 1:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log"",""cog""]
Output: 5
Explanation: A shortest transformation sequence is ""hit""->""hot""->""dot""->""dog""->cog"", which is 5 words long.


Example 2:
Input: beginWord = ""hit"", endWord = ""cog"", wordList = [""hot"",""dot"",""dog"",""lot"",""log""]
output: 0
Explanation: endWord ""cog"" is not in wordList, so there is no valid conversion sequence.


constraint:
`1 <= beginWord.length <= 10`
`endWord.length == beginWord.length`
`1 <= wordList. length <= 5000`
`wordList[i].length == beginWord.length`
`beginWord`, `endWord` and `wordList[i]` consist of lowercase English letters.

`beginWord != endWord`
All words in `wordList` are unique.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an unsorted integer array ""nums"", return the length of the longest sequence of consecutive elements.


Example 1:
Input: nums = [100,4,200,1,3,2]
Output: 4
Explanation: The longest sequence of consecutive elements is `[1, 2, 3, 4]`. So its length is 4.


Example 2:
Input: nums = [0,3,7,2,5,8,4,6,0,1]
Output: 9

constraint:
`0 <= nums.length <= 104`
`-109 <= nums[i] <= 109`
Follow up: Can you implement an ""O(n)"" solution?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get the ""root"" of the binary tree containing only numbers from ""0"" to ""9"".

Each root-to-leaf path in the tree represents a number.

For example, the path ""1 -> 2 -> 3"" from root to leaf represents the number ""123"".

Returns the sum of all root to leaf numbers.

A leaf node is a node that has no children.


Example 1:
Input: root = [1,2,3]
Output: 25
explain:
The path ""1->2"" from root to leaf represents the number ""12"".

The path ""1->3"" from root to leaf represents the number ""13"".

Therefore, sum = 12 + 13 = `25`.


Example 2:
Input: root = [4,9,0,5,1]
Output: 1026
explain:
The root-to-leaf path ""4->9->5"" represents the number 495.

The root-to-leaf path 4->9->1 represents the number 491.

The path ""4->0"" from root to leaf represents the number 40.

Therefore, sum = 495 + 491 + 40 = `1026`.


constraint:
The number of nodes in the tree is in the range ""[1, 1000]"".

`0 <= Node.val <= 9`
The depth of the tree will not exceed 10.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" matrix ""board"" containing ""X"" and ""O"", capture all regions surrounded by ""X"".

Capture the area by flipping all ""O""s in the surrounding area to ""X"".


Example 1:
Input: board = [[""X"",""X"",""X"",""X""],[""X"",""O"",""O"",""X""],[""X"",""X"", ""O"",""X""],[""X"",""O"",""X"",""X""]]
Output: [[""X"",""X"",""X"",""X""],[""X"",""X"",""X"",""X""],[""X"",""X"",""X"" "" "",""X""],[""X"",""O"",""X"",""X""]]
Explanation: The enclosed area should not be on the border, which means that any ""O""s on the border of the board will not be flipped to ""X"". Any ""O"" that is not on the boundary and not connected to an ""O"" on the boundary will be flipped to an ""X"". Two cells are connected if they are adjacent cells connected horizontally or vertically.


Example 2:
Input: chessboard = [[""X""]]
Output: [[""X""]]

constraint:
`m == board. length`
`n == board[i].length`
`1 <= meters, n <= 200`
`board[i][j]` is either `'X'` or `'O'`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, partition s such that each substring of the partition is a palindrome. Return all possible palindromic partitions of s.

A palindrome is a string that reads backwards the same as it reads forwards.


Example 1:
Input: s = ""aab""
Output: [[""a"",""a"",""b""],[""aa"",""b""]]

Example 2:
Input: s = ""a""
output: [[""a""]]

constraint:
`1 <= s.length <= 16`
`s` contains only lowercase English letters.",0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, partition s such that each substring of the partition is a palindrome.

Returns the minimum cut required for the palindromic partition of s.


Example 1:
Input: s = ""aab""
Output: 1
Explanation: Palindromic segmentation [""aa"",""b""] can be generated using 1 cut.


Example 2:
Input: s = ""a""
output: 0

Example 3:
Input: s = ""ab""
Output: 1

constraint:
`1 <= s.length <= 2000`
`s` contains only lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A reference to a node in the undirected graph for a given connection.

Returns a deep copy (clone) of the graph.

Each node in the graph contains a val (`int`) and a list of neighbors (`List[Node]`).

class node {
    public integer value;
    public List<Node> neighbors;
}
Test case format:
For simplicity, the value of each node is the same as the node's index (1 - index). For example, the first node is ""val=1"", the second node is ""val=2"", and so on. The graph is represented using an adjacency list in the test case.

An adjacency list is a collection of unordered lists used to represent finite graphs. Each list describes the set of neighbors of a node in the graph.

The given node will always be the first node with ""val=1"". You must return a copy of the given node as a reference to the cloned graph.


Example 1:
Input: adjList = [[2,4],[1,3],[2,4],[1,3]]
Output: [[2,4],[1,3],[2,4],[1,3]]
Explanation: There are 4 nodes in the graph.

The neighbors of the first node (val = 1) are the second node (val = 2) and the fourth node (val = 4).

The neighbors of the second node (val = 2) are the first node (val = 1) and the third node (val = 3).

The neighbors of the third node (val = 3) are the second node (val = 2) and the fourth node (val = 4).

The neighbors of the 4th node (val = 4) are the 1st node (val = 1) and the 3rd node (val = 3).


Example 2:
Input: adjList = [[]]
output: [[]]
Explanation: Note that the input contains an empty list. The graph contains only one node with val = 1 and does not have any neighbors.


Example 3:
Input: adjList = []
output: []
Explanation: This is an empty graph, it does not have any nodes.


Example 4:
Input: adjList = [[2],[1]]
Output: [[2],[1]]

constraint:
`1 <= Node.val <= 100`
`Node.val` is unique for each node.

The number of nodes will not exceed 100.

There are no repeated edges and no self-loops in the graph.

A graph is connected and all nodes can be visited starting from a given node.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n gas stations on a circular route, and the fuel volume of the i-th gas station is gas[i].

You have a car with unlimited fuel tanks, and it takes cost[i] gasoline to travel from the ith station to the next (i+1)th station. You start your journey with an empty fuel tank at one of the gas stations.

Given two integer arrays `gas` and `cost`, return the index of the starting gas station if you can go around clockwise once, else return `-1`. If a solution exists, it is guaranteed to be unique

Example 1:
Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
Output: 3
explain:
From station 3 (index 3), fill up 4 units of gas. your tank = 0 + 4 = 4
Go to stop 4. Your tank = 4 - 1 + 5 = 8
Go to station 0. Your tank = 8 - 2 + 1 = 7
Go to station 1. Your tank = 7 - 3 + 2 = 6
Go to station 2. Your tank = 6 - 4 + 3 = 5
Go to station 3. The cost is 5. You have just enough gas to return to station 3.

Therefore, 3 is returned as the starting index.


Example 2:
Input: gas = [2,3,4], cost = [3,4,3]
Output: -1
explain:
You can't start at stop 0 or 1 because there isn't enough gas to get to the next stop.

Let's start at station 2 and fill up 4 units of gas. your tank = 0 + 4 = 4
Go to station 0. Your tank = 4 - 3 + 2 = 3
Go to station 1. Your tank = 3 - 3 + 3 = 3
You can't go back to station 2 because it takes 4 units of gas, but you only have 3.

Therefore, no matter where you start, you can't make a lap around the track.


constraint:
`gas.length == n`
`cost. length == n`
`1 <= n <= 104`
`0 <= gas[i], cost[i] <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n children standing in a row. Each child is assigned a rating value, given in the integer array ""ratings"".

You give candy to these children based on the following requirements:
Each child must have at least one candy.

Children with higher ratings get more candy than their neighbors.

Returns the minimum number of candies required to distribute candies to children.


Example 1:
Input: Ratings = [1,0,2]
Output: 5
Explanation: You can distribute 2, 1, and 2 candies to the first, second, and third children, respectively.


Example 2:
Input: Ratings = [1,2,2]
Output: 4
Explanation: You can distribute 1, 2, and 1 candies to the first, second, and third children, respectively.

The third child gets 1 candy because the above two conditions are met.


constraint:
`n == ratings. length`
`1 <= n <= 2 * 104`
`0 <= score[i] <= 2 * 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty integer array ""nums"", each element appears twice except one. find that one.

Follow up: Can you implement a solution with linear runtime complexity without using additional memory?

Example 1:
Input: nums = [2,2,1]
Output: 1

Example 2:
Input: nums = [4,1,2,1,2]
Output: 4

Example 3:
input: nums = [1]
Output: 1

constraint:
`1 <= nums.length <= 3 * 104`
`-3 * 104 <= nums[i] <= 3 * 104`
Every element in the array appears twice, except for one element that appears only once.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, each element appears 3 times and only one element appears once. Find a single element and return it.


Example 1:
Input: nums = [2,2,3,2]
Output: 3

Example 2:
Input: nums = [0,1,0,1,0,1,99]
Output: 99

constraint:
`1 <= nums.length <= 3 * 104`
`-231 <= nums[i] <= 231 - 1`
Each element in `nums` appears 3 times, and only one element appears once.

Follow up: Your algorithm should have linear runtime complexity. Can you achieve it without using extra memory?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list of length ""n"", each node contains an additional random pointer which can point to any node in the list, or ""null"".

Build a deep copy of the list. A deep copy should consist of n brand new nodes, with each new node's value set to the value of its corresponding original node. Both the ""next"" and ""random"" pointers of the new node should point to the new node in the copied list, so that the pointers in the original list and the copied list represent the same list state. All pointers in the new list should not point to nodes in the original list.

For example, if there are two nodes `X` and `Y` in the original list, where `X.random --> Y`, then for the corresponding two nodes `x` and `y` in the copied list, `x. random --> y`.

Returns the head of the copied list.

A linked list is represented in input/output as a list of ""n"" nodes. Each node is represented as a pair ""[val, random_index]"", where:
`val`: Integer representing `Node.val`
`random_index`: The node index pointed to by the `random` pointer (ranging from `0` to `n-1`), or `null` if it does not point to any node.

Your code will only be given the ""head"" of the original linked list.


Example 1:
Input: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]
Output: [[7,null],[13,0],[11,4],[10,2],[1,0]]

Example 2:
Input: head = [[1,1],[2,1]]
Output: [[1,1],[2,1]]

Example 3:
Input: head = [[3,null],[3,0],[3,null]]
Output: [[3,null],[3,0],[3,null]]

Example 4:
input: head = []
output: []
Explanation: The given linked list is empty (null pointer), so return null.


constraint:
`0 <= n <= 1000`
`-10000 <= Node.val <= 10000`
`Node.random` is `null` or points to a node in the linked list.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" and a dictionary of strings ""wordDict"", return ""true"" if ""s"" can be split into a space-separated sequence of one or more dictionary words.

Note that the same word in the dictionary may be reused multiple times in the segmentation.


Example 1:
Input: s = ""leetcode"", wordDict = [""leet"",""code""]
output: true
Explanation: Return true because ""leetcode"" can be divided into ""leet code"".


Example 2:
Input: s = ""applepenapple"", wordDict = [""apple"",""pen""]
output: true
Explanation: Returns true because ""applepenapple"" can be split into ""apple pen apple"".

Note that you can reuse words from the dictionary.


Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
output: error

constraint:
`1 <= s.length <= 300`
`1 <= wordDict.length <= 1000`
`1 <= wordDict[i].length <= 20`
`s` and `wordDict[i]` contain only lowercase English letters.

All strings of `wordDict` are unique.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and a string dictionary wordDict, add spaces to s to construct a sentence where each word is a valid dictionary word. Return all these possible sentences in any order.

Note that the same word in the dictionary may be reused multiple times in the segmentation.


Example 1:
Input: s = ""catsanddog"", wordDict = [""cat"",""cats"",""and"",""sand"",""dog""]
Output: [""cats and dog"",""cat sand dog""]

Example 2:
Input: s = ""pineapplepenapple"", wordDict = [""apple"",""pen"",""applepen"",""pine"",""pineapple""]
Output: [""pine apple pen apple"",""pine apple pen apple"",""pine apple pen apple""]
Instructions: Note that you can reuse words from the dictionary.


Example 3:
Input: s = ""catsandog"", wordDict = [""cats"",""dog"",""sand"",""and"",""cat""]
output: []

constraint:
`1 <= s.length <= 20`
`1 <= wordDict.length <= 1000`
`1 <= wordDict[i].length <= 10`
`s` and `wordDict[i]` contain only lowercase English letters.

All strings of `wordDict` are unique.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `head`, the head of the linked list, determine whether there is a cycle in the linked list.

A cycle exists in a linked list if there is a node in the linked list that can be reached again by continuously following the ""next"" pointer. Internally, `pos` is used to represent the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as an argument.

Returns true if there is a cycle in the linked list. Otherwise, return ""false"".


Example 1:
Input: head = [3,2,0,-4], pos = 1
output: true
Explanation: There is a cycle in the linked list, the tail is connected to the first node (with index 0).


Example 2:
Input: head = [1,2], pos = 0
output: true
Explanation: There is a ring in the linked list, and the tail is connected to the 0th node.


Example 3:
Input: head = [1], pos = -1
output: error
Explanation: There are no cycles in the linked list.


constraint:
The number of nodes in the list is in the range '[0, 104]'.

`-105 <= Node.val <= 105`
`pos` is `-1` or a valid index in the linked list.

Follow up: Can you solve it with `O(1)` (i.e. constant) memory?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list, return the node where the loop starts. Returns ""null"" if there is no loop.

A cycle exists in a linked list if there is a node in the linked list that can be reached again by continuously following the ""next"" pointer. Internally, `pos` is used to represent the index of the node that tail's `next` pointer is connected to. Note that `pos` is not passed as an argument.

Note that you should not modify the linked list.


Example 1:
Input: head = [3,2,0,-4], pos = 1
Output: tail connected to node index 1
Explanation: There is a cycle in the linked list, the tail is connected to the second node.


Example 2:
Input: head = [1,2], pos = 0
Output: tail connected to node index 0
Explanation: There is a cycle in the linked list, the tail is connected to the first node.


Example 3:
Input: head = [1], pos = -1
output: no loop
Explanation: There are no cycles in the linked list.


constraint:
The number of nodes in the list is in the range '[0, 104]'.

`-105 <= Node.val <= 105`
`pos` is `-1` or a valid index in the linked list.

Follow up: Can you solve it with `O(1)` (i.e. constant) memory?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Gives you the head of a singly linked list. The list can be represented as:
L0 → L1 → ... → Ln - 1 → Ln
Reorder the list as follows:
L0 → Ln → L1 → Ln - 1 → L2 → Ln - 2 → ...

You cannot modify values ​​in list nodes. Only the node itself can be changed.


Example 1:
Input: head = [1,2,3,4]
Output: [1,4,2,3]

Example 2:
Input: head = [1,2,3,4,5]
Output: [1,5,2,4,3]

constraint:
The number of nodes in the list is in the range ""[1, 5 * 104]"".

`1 <= Node.val <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return a preorder traversal of its node values.


Example 1:
Input: root = [1,null,2,3]
Output: [1,2,3]

Example 2:
input: root = []
output: []

Example 3:
input: root = [1]
output: [1]

Example 4:
Input: root = [1,2]
output: [1,2]

Example 5:
Input: root = [1,null,2]
output: [1,2]

constraint:
The number of nodes in the tree is in the range '[0, 100]'.

`-100 <= Node.val <= 100`
Follow up: Solving recursively is trivial, can you iterate?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return a postorder traversal of its node values.


Example 1:
Input: root = [1,null,2,3]
Output: [3,2,1]

Example 2:
input: root = []
output: []

Example 3:
input: root = [1]
output: [1]

Example 4:
Input: root = [1,2]
output: [2,1]

Example 5:
Input: root = [1,null,2]
output: [2,1]

constraint:
The number of nodes in the tree is in the range '[0, 100]'.

`-100 <= Node.val <= 100`
follow up:
The recursive solution is trivial, can you iterate?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design data structures that obey the least recently used (LRU) cache constraint.

Implement the ""LRUCache"" class:
`LRUCache(int capacity)` initializes the LRU cache with a positive size of `capacity`.

`int get(int key)` returns the value of `key` if key exists, otherwise returns `-1`.

`void put(int key, int value)` If `key` exists, update the value of `key`. Otherwise, add the ""key-value"" pair to the cache. If the number of keys exceeds the ""capacity"" for this operation, the least recently used key is evicted.

follow up:
Can you perform `get` and `put` in `O(1)` time complexity?

Example 1:
enter
[""LRUCache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""put"", ""get"", ""get"", ""get""]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]
output
[empty, empty, empty, 1, empty, -1, empty, -1, 3, 4]
explain
LRUCache lRUCache = new LRUCache(2);
lRUCache.put(1, 1); // cache is {1=1}
lRUCache.put(2, 2); // cache is {1=1, 2=2}
lRUCache.get(1); // returns 1
lRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}
lRUCache.get(2); // returns -1 (not found)
lRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}
lRUCache.get(1); // returns -1 (not found)
lRUCache.get(3); // returns 3
lRUCache.get(4); // returns 4

constraint:
`1 <= capacity <= 3000`
`0 <= key <= 3000`
`0 <= value <= 104`
There will be at most 3 * 104 calls to get and put.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a singly linked list, sort the list using insertion sort and return the head of the sorted list.

The steps of the insertion sort algorithm:
Insertion sort iterates, each iteration consuming one input element and growing a sorted output list.

On each iteration, insertion sort removes an element from the input data, finds where it belongs in the sorted list and inserts it there.

It repeats until no input elements remain.

Following is a graphical example of the insertion sort algorithm. A partially sorted list (black) initially contains only the first element in the list. An element (red) is removed from the input data and inserted in-place into the sorted list on each iteration.


Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

constraint:
The number of nodes in the list is in the range ""[1, 5000]"".

`-5000 <= Node.val <= 5000`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a linked list, return the list sorted in ascending order.

Follow up: Can you sort a linked list in `O(n logn)` time and `O(1)` memory (i.e. constant space)?

Example 1:
Input: head = [4,2,1,3]
Output: [1,2,3,4]

Example 2:
Input: head = [-1,5,3,4,0]
Output: [-1,0,3,4,5]

Example 3:
input: head = []
output: []

constraint:
The number of nodes in the list is in the range ""[0, 5 * 104]"".

`-105 <= Node.val <= 105`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane, return the maximum number of points that lie on the same line.


Example 1:
Input: points = [[1,1],[2,2],[3,3]]
Output: 3

Example 2:
Input: points = [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]
Output: 4

constraint:
`1 <= points. length <= 300`
`points[i].length == 2`
`-104 <= xi, yi <= 104`
All ""points"" are unique.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Evaluates an arithmetic expression in reverse Polish notation.

Valid operators are ""+"", ""-"", ""*"", and ""/"". Each operand can be an integer or another expression.

Note that division between two integers should truncate to zero.

Guarantees that the given RPN expression is always valid. This means that the expression will always evaluate to a result, and there won't be any division by zero.


Example 1:
Input: token = [""2"",""1"",""+"",""3"",""*""]
Output: 9
Explanation: ((2 + 1) * 3) = 9

Example 2:
Input: tokens = [""4"",""13"",""5"",""/"",""+""]
Output: 6
Explanation: (4 + (13 / 5)) = 6

Example 3:
Input: tokens = [""10"",""6"",""9"",""3"",""+"",""-11"",""*"",""/"",""*"",""17"",""+"", ""5"", ""+""]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

constraint:
`1 <= tokens.length <= 104`
`tokens[i]` is an operator: `""+""`, `""-""`, `""*""` or `""/""`, or an integer in the range `[-200, 200]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an input string s, reverse the order of the words.

A word is defined as a sequence of non-whitespace characters. Words in s will be separated by at least one space.

Returns a string of reversed words joined by single spaces.

Note that `s` may contain leading or trailing spaces or multiple spaces between two words. The returned string should have only one space separating words. Do not include any extra spaces.


Example 1:
Input: s = ""The sky is blue""
Output: ""Blue is the sky""

Example 2:
Input: s = ""Hello world""
Output: ""Hello world""
Explanation: Your reversed string should not contain leading or trailing spaces.


Example 3:
Input: s = ""A good example""
Output: ""example ok""
Explanation: You need to reduce multiple spaces between two words to one space in the reversed string.


Example 4:
Input: s = ""Bob Loves Alice""
Output: ""Alice loves Bob""

Example 5:
Input: s = ""Alice doesn't even like bob""
Output: ""Bob doesn't even like Alice""

constraint:
`1 <= s.length <= 104`
`s` contains English letters (uppercase and lowercase), numbers and spaces `' '`.

There is at least one word in s.

Follow up: Can you solve it in-place with O(1) extra space?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, find a contiguous non-empty subarray in the array that has the largest product, and return that product.

The answer is guaranteed to fit in a 32-bit integer.

A subarray is a contiguous subsequence of an array.


Example 1:
Input: nums = [2,3,-2,4]
Output: 6
Explanation: [2,3] has the largest product 6.


Example 2:
Input: nums = [-2,0,-1]
output: 0
Explanation: The result cannot be 2 because [-2,-1] is not a subarray.


constraint:
`1 <= nums.length <= 2 * 104`
`-10 <= nums[i] <= 10`
The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose an array of length ""n"" sorted in ascending order is rotated between ""1"" and ""n"". For example, the array nums = [0,1,2,4,5,6,7] might become:
`[4,5,6,7,0,1,2]` if rotated `4` times.

`[0,1,2,4,5,6,7]` if rotated `7` times.

Note that rotating the array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a [ 0], a[1], a[2], ..., a[n-2]]`.

Given a sorted rotated array ""nums"" of unique elements, return the smallest element of this array.


Example 1:
Input: nums = [3,4,5,1,2]
Output: 1
Explanation: The original array is rotated 3 times by [1,2,3,4,5].


Example 2:
Input: nums = [4,5,6,7,0,1,2]
output: 0
Explanation: The original array is [0,1,2,4,5,6,7], rotated 4 times.


Example 3:
Input: nums = [11,13,15,17]
Output: 11
Explanation: The original array is [11,13,15,17], rotated 4 times.

constraint:
`n == nums. length`
`1 <= n <= 5000`
`-5000 <= nums[i] <= 5000`
All integers in `nums` are unique.

`nums` sorts and rotates between `1` and `n` times.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose an array of length ""n"" sorted in ascending order is rotated between ""1"" and ""n"". For example, the array nums = [0,1,4,4,5,6,7] might become:
`[4,5,6,7,0,1,4]` if rotated `4` times.

`[0,1,4,4,5,6,7]` if rotated `7` times.

Note that rotating the array `[a[0], a[1], a[2], ..., a[n-1]]` 1 time results in the array `[a[n-1], a [ 0], a[1], a[2], ..., a[n-2]]`.

Given a sorted rotated array ""nums"" that may contain duplicates, return the smallest element of this array.


Example 1:
Input: nums = [1,3,5]
Output: 1

Example 2:
Input: nums = [2,2,2,0,1]
output: 0

constraint:
`n == nums. length`
`1 <= n <= 5000`
`-5000 <= nums[i] <= 5000`
`nums` sorts and rotates between `1` and `n` times.

Follow up: This is the same as finding the minimum in a rotated sorted array, but with duplicates. Does allowing repetition affect runtime complexity? How and why?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a stack that supports push, pop, top, and obtains the smallest element in constant time.

Implement the ""MinStack"" class:
`MinStack()` initializes the stack object.

`void push(val)` pushes the element `val` onto the stack.

`void pop()` removes the top element of the stack.

`int top()` Gets the top element of the stack.

`int getMin()` Retrieves the smallest element in the stack.


Example 1:
enter
[""MinStack"",""push"",""push"",""push"",""getMin"",""pop"",""top"",""getMin""]
[[],[-2],[0],[-3],[],[],[],[]]
output
[empty, empty, empty, empty, -3, empty, 0, -2]
explain
MinStack minStack = new MinStack();
minStack. push(-2);
minStack. push(0);
minStack. push(-3);
minStack.getMin(); // returns -3
minStack. pop();
minStack.top(); // returns 0
minStack.getMin(); // returns -2

constraint:
`-231 <= value <= 231 - 1`
The methods `pop`, `top` and `getMin` operations will always be called on a non-empty stack.

At most `3 * 104` calls will be made to `push`, `pop`, `top` and `getMin`.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, invert the tree and return the new root.

You can turn a binary tree upside down with the following steps:
The original left child becomes the new root.

The original root becomes the new right child.

The original right child becomes the new left child.

The above steps are done layer by layer, ensuring that each node in a given tree has either 0 or 2 child nodes.


Example 1:
Input: root = [1,2,3,4,5]
Output: [4,5,2,null,null,3,1]

Example 2:
input: root = []
output: []

Example 3:
input: root = [1]
output: [1]

constraint:
The number of nodes in the tree will be in the range ""[0, 10]"".

`1 <= Node.val <= 10`
`Each node has either 0 or 2 children. `",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""file"", and assuming you can only read that file using the given ""read4"" method, implement a method that reads ""n"" characters.

Method reads 4:
The API `read4` reads four consecutive characters from `file` and writes these characters into the buffer array `buf4`.

The return value is the number of characters actually read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

Definition of read4:
    Parameters: char[] buf4
    Return value: integer
buf4[] is a destination, not a source. The result of read4 will be copied to buf4[].

Here's a high-level example of how read4 works:
file file(""abcde`""); // file is ""`abcde`"", initially the file pointer (fp) points to 'a'
char[] buf4 = new char[4]; // create a buffer with enough space to store the char
Read 4(buf4); // read4 returns 4. Now buf4 = ""abcd"", fp points to 'e'
Read 4(buf4); // read4 returns 1. Now buf4 = ""e"", fp points to end of file
Read 4(buf4); // read4 returns 0. Now buf4 = """", fp points to end of file`
The method reads:
Implement the read method through the `read4` method, read `n` characters from `file`, and store them in the buffer array `buf`. Take into account that you cannot manipulate ""files"" directly.

The return value is the number of characters actually read.

Read the definition:
    Parameters: char[] buf, int n
    Return value: integer
buf[] is a destination, not a source. You need to write the result to buf[].

notes:
Take into account that you cannot manipulate files directly. The file can only be accessed by read4, not by read.

The `read` function will only be called once for each test case.

You can assume that the destination buffer array buf is guaranteed to have enough space to store n characters.


Example 1:
Input: file = ""abc"", n = 4
Output: 3
Explanation: After calling your read method, buf should contain ""abc"". We read a total of 3 characters from the file, so 3 is returned.

Note that ""abc"" is the content of the file, not buf. buf is the destination buffer to which you must write the result.


Example 2:
Input: file = ""abcde"", n = 5
Output: 5
Explanation: After calling your read method, buf should contain ""abcde"". We read a total of 5 characters from the file, so 5 is returned.


Example 3:
Input: file = ""abcdABCD1234"", n = 12
Output: 12
Explanation: After calling your read method, buf should contain ""abcdABCD1234"". We read a total of 12 characters from the file, so 12 is returned.


Example 4:
Input: file = ""leetcode"", n = 5
Output: 5
Explanation: After calling your read method, buf should contain ""leetc"". We read a total of 5 characters from the file, so 5 is returned.


constraint:
`1 <= file length <= 500`
`file` consists of English letters and numbers.

`1 <= n <= 1000`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""file"", and assuming you can only read the file using the given ""read4"" method, implement a ""read"" method to read ""n"" characters. Your method `read` may be called multiple times.

Method reads 4:
The API `read4` reads four consecutive characters from `file` and writes these characters into the buffer array `buf4`.

The return value is the number of characters actually read.

Note that `read4()` has its own file pointer, much like `FILE *fp` in C.

Definition of read4:
    Parameters: char[] buf4
    Return value: integer
buf4[] is a destination, not a source. The result of read4 will be copied to buf4[].

Here's a high-level example of how read4 works:
file file(""abcde`""); // file is ""`abcde`"", initially the file pointer (fp) points to 'a'
char[] buf4 = new char[4]; // create a buffer with enough space to store the char
Read 4(buf4); // read4 returns 4. Now buf4 = ""abcd"", fp points to 'e'
Read 4(buf4); // read4 returns 1. Now buf4 = ""e"", fp points to end of file
Read 4(buf4); // read4 returns 0. Now buf4 = """", fp points to end of file`
The method reads:
Implement the read method through the `read4` method, read `n` characters from `file`, and store them in the buffer array `buf`. Take into account that you cannot manipulate ""files"" directly.

The return value is the number of characters actually read.

Read the definition:
    Parameters: char[] buf, int n
    Return value: integer
buf[] is a destination, not a source. You need to write the result to buf[].

notes:
Take into account that you cannot manipulate files directly. The file can only be accessed by read4, not by read.

The read function may be called multiple times.

Remember to reset class variables you declare in your solution, as static/class variables persist across multiple test cases. See here for more details.

You can assume that the destination buffer array buf is guaranteed to have enough space to store n characters.

Guarantees that the same buffer buf is called by read in a given test case.


Example 1:
Input: file = ""abc"", query = [1,2,1]
Output: [1,2,0]
Explanation: The test cases represent the following scenarios:
file file(""abc"");
solution sol;
sol.read(buf, 1); // After calling your read method, buf should contain ""a"". We read a total of 1 character from the file, so return 1.

sol.read(buf, 2); // now buf should contain ""bc"". We read a total of 2 characters from the file, so 2 is returned.

sol.read(buf, 1); // We've reached the end of the file, no more characters can be read. So return 0.

Assume buf is allocated and guaranteed to have enough space to store all characters in the file.


Example 2:
Input: file = ""abc"", query = [4,1]
Output: [3,0]
Explanation: The test cases represent the following scenarios:
file file(""abc"");
solution sol;
sol.read(buf, 4); // After calling your read method, buf should contain ""abc"". We read a total of 3 characters from the file, so 3 is returned.

sol.read(buf, 1); // We've reached the end of the file, no more characters can be read. So return 0.


constraint:
`1 <= file length <= 500`
`file` consists of English letters and numbers.

`1 <= queries.length <= 10`
`1 <= query[i] <= 500`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return the length of the longest substring containing at most two distinct characters.


Example 1:
Input: s = ""eceba""
Output: 3
Explanation: The substring is ""ece"" and the length is 3.


Example 2:
Input: s = ""ccaabbb""
Output: 5
Explanation: The substring is ""aabbb"" with a length of 5.


constraint:
`1 <= s.length <= 104`
`s` consists of English letters.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the heads of two singly linked lists ""headA"" and ""headB"", return the node where the two lists intersect. Returns null if the two linked lists do not intersect at all.

For example, the following two linked lists intersect starting at node ""c1"":
Make sure there are no loops anywhere in the entire link structure.

Note that the linked list must retain its original structure after the function returns.


Example 1:
Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3
Output: Intersect at ""8""
Explanation: Intersect node has value 8 (note that it must not be 0 if two lists intersect).

Starting at the head of A, it reads [4,1,8,4,5]. From B's head, it reads [5,6,1,8,4,5]. There are 2 nodes before the intersecting node in A; 3 nodes before the intersecting node in B.


Example 2:
Input: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1
Output: Intersect at ""2""
Explanation: Intersect node has value 2 (note that it must not be 0 if two lists intersect).

Starting at the head of A, it reads [1,9,1,2,4]. Starting at the head of B, it reads [3,2,4]. There are 3 nodes before the intersecting node in A; there is 1 node before the intersecting node in B.


Example 3:
Input: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2
Output: no intersection
Explanation: Starting from the head of A, it is read as [2,6,4]. Starting at the head of B, it reads [1,5]. Since the two lists are disjoint, intersectVal must be 0, while skipA and skipB can be arbitrary values.

Explanation: The two lists are disjoint, so null is returned.


constraint:
The number of nodes of `listA` is in `m`.

The number of nodes of `listB` is in `n`.

`0 <= m, n <= 3*104`
`1 <= Node.val <= 105`
`0 <= skipA <= m`
`0 <= skipB <= n`
intersectVal is 0 if listA and listB do not intersect.

`intersectVal == listA[skipA + 1] == listB[skipB + 1]` if `listA` and `listB` intersect.

Follow up: Can you write a solution that runs in `O(n)` time and uses only `O(1)` memory?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s"" and ""t"", return ""true"" if they are separated by an edit distance, otherwise return ""false"".

A string s is said to be a distance away from a string t if it can:
Inserts exactly one character into s to obtain t.

Remove exactly one character from `s` to get `t`.

Replace one character of s with a different character to obtain t.


Example 1:
Input: s = ""ab"", t = ""acb""
output: true
Explanation: We can insert 'c' into s to get t.


Example 2:
Input: s = """", t = """"
output: error
Explanation: We cannot get t from s in only one step.


Example 3:
Input: s = ""a"", t = """"
output: true

Example 4:
Input: s = """", t = ""A""
output: true

constraint:
`0 <= s.length <= 104`
`0 <= t.length <= 104`
`s` and `t` consist of lowercase letters, uppercase letters, and/or numbers.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Peak elements are elements that are strictly larger than their neighbors.

Given an integer array nums, find a peak element and return its index. If the array contains more than one peak, return the index to any peak.

You can imagine `nums[-1] = nums[n] = -∞`.


Example 1:
Input: nums = [1,2,3,1]
Output: 2
Explanation: 3 is a peak element and your function should return index number 2.


Example 2:
Input: nums = [1,2,1,3,5,6,4]
Output: 5
Explanation: Your function can return index number 1 with a peak element of 2, or index number 5 with a peak element of 6.


constraint:
`1 <= nums.length <= 1000`
`-231 <= nums[i] <= 231 - 1`
`nums[i] != nums[i + 1]` for all valid `i`s.

Follow up: Can you implement a solution in logarithmic complexity?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an inclusive range ""[lower, upper]"" and a sorted array ""nums"" of unique integers where all elements are in the inclusive range.

A number `x` is considered missing if `x` is in the range `[lower, upper]` and `x` is not in `nums`.

Return a list of the smallest sorted ranges that exactly cover each missing number. That is, no elements of `nums` are in any range, and each missing number is in one of the ranges.

Each range ""[a,b]"" in the list should be output as:
`""a->b""` if `a != b`
`""a""` if `a == b`

Example 1:
Input: nums = [0,1,3,50,75], lower = 0, upper = 99
Output: [""2"",""4->49"",""51->74"",""76->99""]
Explanation: The scope is:
[2,2] --> ""2""
[4,49] --> ""4->49""
[51,74] --> ""51->74""
[76,99] --> ""76->99""

Example 2:
Input: nums = [], lower = 1, upper = 1
Output: [""1""]
Explanation: The only missing range is [1,1], which becomes ""1"".


Example 3:
Input: nums = [], lower = -3, upper = -1
Output: [""-3->-1""]
Explanation: The only missing range is [-3,-1], which becomes ""-3->-1"".


Example 4:
Input: nums = [-1], lower = -1, upper = -1
output: []
Explanation: Since there are no missing numbers, there is no missing range.


Example 5:
Input: nums = [-1], lower = -2, upper = -1
Output: [""-2""]

constraint:
`-109 <= down <= up <= 109`
`0 <= nums.length <= 100`
`down <= nums[i] <= up`
All values ​​of `nums` are unique.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, return the maximum difference between two consecutive elements in its sorted form. Returns ""0"" if the array contains fewer than two elements.


Example 1:
Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorting form of the array is [1,3,6,9], and the maximum difference between (3,6) or (6,9) is 3.


Example 2:
input: nums = [10]
output: 0
Explanation: The array contains less than 2 elements, so 0 is returned.


constraint:
`1 <= nums.length <= 104`
`0 <= nums[i] <= 109`
Follow up: Can you solve it in linear time/space?",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two version numbers, `version1` and `version2`, compare them.

A version number consists of one or more revisions joined by a dot ""."". Each revision consists of numbers and may contain leading zeros. Each revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example `2.5.33` and `0.1` are valid version numbers.

To compare version numbers, compare their revisions in left-to-right order. Compare revisions using integer values ​​ignoring any leading zeros. This means that versions ""1"" and ""001"" are considered equal. If the version number does not specify a revision at an index, the revision is treated as ""0"". For example, version 1.0 is less than version 1.1 because their version 0 is the same, but version 1 is 0 and 1 respectively, and 0 < 1.

returns the following:
If ""version1 < version2"", return ""-1"".

Returns ""1"" if ""Version 1 > Version 2"".

Otherwise, return ""0"".


Example 1:
Input: version1 = ""1.01"", version2 = ""1.001""
output: 0
Explanation: Ignoring leading zeros, both ""01"" and ""001"" represent the same integer ""1"".


Example 2:
Input: version1 = ""1.0"", version2 = ""1.0.0""
output: 0
Explanation: Version 1 does not specify revision 2, which means it is treated as ""0"".


Example 3:
Input: version1 = ""0.1"", version2 = ""1.1""
Output: -1
Explanation: Revision 0 of version 1 is ""0"" and revision 0 of version 2 is ""1"". 0 < 1, so version 1 < version 2.


Example 4:
Input: version1 = ""1.0.1"", version2 = ""1""
Output: 1

Example 5:
Input: version1 = ""7.5.2.4"", version2 = ""7.5.3""
Output: -1

constraint:
`1 <= version1.length, version2.length <= 500`
`version1` and `version2` only contain numbers and `'.'`.

`version1` and `version2` are valid version numbers.

All given revisions in `version1` and `version2` can be stored in a 32-bit integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers representing the ""numerator"" and ""denominator"" of a fraction, return the fraction in string format.

If the decimal portion repeats, enclose the repeating portion in parentheses.

If multiple answers are possible, return any of them.

For all given inputs, the length of the answer string is guaranteed to be less than ""104"".


Example 1:
Input: Numerator = 1, Denominator = 2
Output: ""0.5""

Example 2:
Input: Numerator = 2, Denominator = 1
Output: ""2""

Example 3:
Input: Numerator = 2, Denominator = 3
Output: ""0.(6)""

Example 4:
Input: Numerator = 4, Denominator = 333
Output: ""0.(012)""

Example 5:
Input: Numerator = 1, Denominator = 5
Output: ""0.2""

constraint:
`-231 <= numerator, denominator <= 231 - 1`
`Denominator! = 0`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""numbers"" already sorted in ascending order, find two numbers such that they add up to a particular ""target"" number.

Returns the indices (starting at 1) of two numbers as an integer array ""answer"" of size ""2"", where ""1 <= answer[0] < answer[1] <= numbers.length"".

You may assume that there is only one solution for each input, and you may not use the same element twice.


Example 1:
Input: number = [2,7,11,15], target = 9
output: [1,2]
Explanation: The sum of 2 and 7 is 9. So index1 = 1 and index2 = 2.


Example 2:
Input: number = [2,3,4], target = 6
Output: [1,3]

Example 3:
Input: number = [-1,0], target = -1
output: [1,2]

constraint:
`2 <= numbers.length <= 3 * 104`
`-1000 <= number[i] <= 1000`
`numbers` are sorted in ascending order.

`-1000 <= target <= 1000`
Only one valid answer exists.",1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""columnNumber"", return its corresponding column heading as it appears in the Excel worksheet.

For example:
a -> 1
B -> 2
C -> 3
...

Z -> 26
AA -> 27
AB -> 28
...


Example 1:
Input: columnNumber = 1
Output: ""A""

Example 2:
Input: columnNumber = 28
Output: ""AB""

Example 3:
Input: columnNumber = 701
Output: ""ZY""

Example 4:
Input: columnNumber = 2147483647
Output: ""FXSHRXW""

constraint:
`1 <= columnNumber <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of size ""n"", return the majority element.

Most elements are elements that occur more than `⌊n / 2⌋` times. You can assume that the majority of elements are always present in the array.


Example 1:
Input: nums = [3,2,3]
Output: 3

Example 2:
Input: nums = [2,2,1,1,1,2,2]
Output: 2

constraint:
`n == nums. length`
`1 <= n <= 5 * 104`
`-231 <= nums[i] <= 231 - 1`
Follow-up: Can you solve this problem in linear time and O(1) space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that accepts a stream of integers, and checks if it has a pair of integers that sum to a certain value.

Implement the ""TwoSum"" class:
`TwoSum()` initializes a `TwoSum` object, initially an empty array.

`void add(int number)` adds `number` to the data structure.

`boolean find(int value)` returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise returns `false`.


Example 1:
enter
[""TwoSum"", ""Add"", ""Add"", ""Add"", ""Find"", ""Find""]
[[], [1], [3], [5], [4], [7]]
output
[empty, empty, empty, empty, true, false]
explain
TwoSum twoSum = new TwoSum();
twoSum.add(1); // [] --> [1]
twoSum.add(3); // [1] --> [1,3]
twoSum.add(5); // [1,3] --> [1,3,5]
twoSum.find(4); // 1 + 3 = 4, return true
twoSum.find(7); // returns false if no two integers sum to 7

constraint:
`-105 <= number <= 105`
`-231 <= value <= 231 - 1`
There will be at most 5 * 104 calls to add and find.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""columnTitle"" representing a column title in an Excel worksheet, return its corresponding column number.

For example:
a -> 1
B -> 2
C -> 3
...

Z -> 26
AA -> 27
AB -> 28
...


Example 1:
Input: columnTitle = ""A""
Output: 1

Example 2:
Input: columnTitle = ""AB""
Output: 28

Example 3:
Input: columnTitle = ""ZY""
Output: 701

Example 4:
Input: columnTitle = ""FXSHRXW""
Output: 2147483647

constraint:
`1 <= columnTitle.length <= 7`
`columnTitle` consists of uppercase English letters only.

`columnTitle` is in the range `[""A"", ""FXSHRXW""]`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return the number of trailing zeros in ""n!"".

Follow up: Can you write a solution that works in logarithmic time complexity?

Example 1:
Input: n = 3
output: 0
Explanation: 3! = 6 without trailing zeros.


Example 2:
Input: n = 5
Output: 1
Explanation: 5! = 120, with a trailing zero.


Example 3:
Input: n = 0
output: 0

constraint:
`0 <= n <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `BSTIerator` class representing an inorder traversal iterator for a binary search tree (BST):
`BSTIerator(TreeNode root)` initializes an object of class `BSTIerator`. The ""root"" of the BST is given as part of the constructor. The pointer should be initialized to a non-existing number that is less than any element in the BST.

`boolean hasNext()` returns `true` if there is a number to the right of the pointer, otherwise returns `false`.

`int next()` moves the pointer to the right and returns the number at the pointer.

Note that the first call to `next()` will return the smallest element in the BST by initializing the pointer to a non-existing smallest number.

You can assume that `next()` calls will always work. That is, when next() is called, the inorder traversal will have at least the next number.


Example 1:
enter
[""BSTIerator"", ""next"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[[7, 3, 15, null, null, 9, 20]], [], [], [], [], [], [], [], [], []]
output
[empty, 3, 7, true, 9, true, 15, true, 20, false]
explain
BSTIerator bSTIterator = new BSTIerator([7, 3, 15, null, null, 9, 20]);
bSTIterator.next(); // returns 3
bSTIterator.next(); // returns 7
bSTIterator.hasNext(); // return true
bSTIterator.next(); // returns 9
bSTIterator.hasNext(); // return true
bSTIterator.next(); // returns 15
bSTIterator.hasNext(); // return true
bSTIterator.next(); // returns 20
bSTIterator.hasNext(); // returns false

constraint:
The number of nodes in the tree is in the range '[1, 105]'.

`0 <= Node.val <= 106`
There will be at most `105` calls to `hasNext` and `next`.

follow up:
Can you implement `next()` and `hasNext()` to run in average `O(1)` time and use `O(h)` memory, where `h` is the height of the tree?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The demon captured the princess and imprisoned her in the lower right corner of the ""dungeon"". The ""dungeon"" consists of ""m x n"" rooms arranged in a two-dimensional grid. Our brave knight is initially located in the upper left room and must fight his way through the ""dungeon"" to save the princess.

Knights have an initial health point represented by a positive integer. If at any time his health points drop to ""0"" or below, he dies instantly.

Some rooms have demon guards (denoted by negative integers), so knights lose health as soon as they enter these rooms; other rooms are either empty (denoted by 0) or contain magic orbs that increase the knight's health (denoted by positive integers) .

In order to reach the princess as soon as possible, the knight decided to move only to the right or down at each step.

Return the knight's minimum starting health so he can rescue the princess.

Note that any room can contain threats or props, even the first room the knight enters and the room where the princess is held in the lower right corner.


Example 1:
Input: Dungeon = [[-2,-3,3],[-5,-10,1],[10,30,-5]]
Output: 7
Explanation: If a knight follows the optimal path: RIGHT-> RIGHT -> DOWN -> DOWN, his initial health must be at least 7.


Example 2:
Input: Dungeon = [[0]]
Output: 1

constraint:
`m == dungeon. length`
`n == dungeon[i].length`
`1 <= meters, n <= 200`
`-1000 <= dungeon[i][j] <= 1000`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list ""nums"" of non-negative integers, sort them into the largest number.

Note: the result can be very large, so you need to return a string, not an integer.


Example 1:
Input: nums = [10,2]
Output: ""210""

Example 2:
Input: nums = [3,30,34,5,9]
Output: ""9534330""

Example 3:
input: nums = [1]
Output: ""1""

Example 4:
input: nums = [10]
Output: ""10""

constraint:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a character array s, reverse the order of the words.

A word is defined as a sequence of non-whitespace characters. Words in s will be separated by a space.


Example 1:
Input: s = [""t"",""h"",""e"","""",""s"",""k"",""y"","""",""i"",""s"","""",""b"", ""l"", ""u"", ""e""]
Output: [""b"",""l"",""u"",""e"","""",""i"",""s"","""",""s"",""k"",""y"","""",""t "",""he""]

Example 2:
Input: s = [""a""]
output: [""one""]

constraint:
`1 <= s.length <= 105`
`s[i]` is an English letter (uppercase or lowercase), a number or a space `' '`.

There is at least one word in s.

`s` contains no leading or trailing spaces.

All words in s are guaranteed to be separated by a single space.

Follow up: Can you do it in-place without allocating additional space?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A DNA sequence consists of a series of nucleotides abbreviated ""A"", ""C"", ""G"" and ""T"".

For example, ""ACGAATTCCG"" is a DNA sequence.

When studying DNA, it is useful to identify repetitive sequences in DNA.

Given a string s representing a DNA sequence, return all 10-letter sequences (substrings) that occur multiple times in the DNA molecule. You can return answers in any order.


Example 1:
Input: s = ""AAAAACCCCCAAAAACCCCCCAAAAAAGGGTTT""
Output: [""AAAAACCCCC"",""CCCCCAAAAA""]

Example 2:
Input: s = ""AAAAAAAAAAAAAA""
Output: [""AAAAAAAAAA""]

constraint:
`1 <= s.length <= 105`
`s[i]` is `'A'`, `'C'`, `'G'`, or `'T'`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `prices`, where `prices[i]` is the price of a given stock on day `ith`, and an integer `k`.

Find the maximum profit you can make. You can complete up to ""k"" transactions.

Note: You cannot have multiple trades in place at the same time (i.e. you must sell the stock before you can buy it again).


Example 1:
Input: k = 2, price = [2,4,1]
Output: 2
Explanation: buy on day 1 (price = 2), sell on day 2 (price = 4), profit = 4-2 = 2.


Example 2:
Input: k = 2, price = [3,2,6,5,0,3]
Output: 7
Explanation: buy on day 2 (price = 2), sell on day 3 (price = 6), profit = 6-2 = 4. Then buy on day 5 (price = 0), sell on day 6 (price = 3), profit = 3-0 = 3.


constraint:
`0 <= k <= 100`
`0 <= prices.length <= 1000`
`0 <= price[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array, rotate the array to the right by k steps, where k is a non-negative number.


Example 1:
Input: nums = [1,2,3,4,5,6,7], k = 3
Output: [5,6,7,1,2,3,4]
explain:
Rotate right by 1 step: [7,1,2,3,4,5,6]
Rotate 2 steps to the right: [6,7,1,2,3,4,5]
Rotate right by 3 steps: [5,6,7,1,2,3,4]

Example 2:
Input: nums = [-1,-100,3,99], k = 2
Output: [3,99,-1,-100]
explain:
Rotate right by 1 step: [99,-1,-100,3]
Rotate right by 2 steps: [3,99,-1,-100]

constraint:
`1 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`0 <= k <= 105`
follow up:
Try to come up with as many solutions as possible. There are at least three different ways to go about this.

Can you do it in-place with O(1) extra space?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Inverts the bits of the given 32-bit unsigned integer.

notes:
Note that in some languages, such as Java, there is no unsigned integer type. In this case both input and output will be given as signed integer types. They shouldn't affect your implementation, since the internal binary representation of an integer is the same whether it's signed or unsigned.


In Java, the compiler uses 2's complement representation for signed integers. So, in example 2 above, the input represents the signed integer ""-3"" and the output represents the signed integer ""-1073741825"".

follow up:
How would you optimize this function if it is called multiple times?

Example 1:
Input: n = 00000010100101000001111010011100
Output: 964176192 (00111001011110000010100101000000)
Explanation: The input binary string 00000010100101000001111010011100 represents the unsigned integer 43261596, so return 964176192, whose binary representation is 00111001011110000010100101000000.


Example 2:
Input: n = 111111111111111111111111111101
Output: 3221225471 (101111111111111111111111111111)
Explanation: The input binary string 111111111111111111111111111101 represents the unsigned integer 4294967293, so returns 3221225471, whose binary representation is 101111111111111111111111111111.


constraint:
Input must be a binary string of length '32'",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function that takes an unsigned integer and returns the number of ""1"" bits it has (also known as the Hamming weight).

notes:
Note that in some languages, such as Java, there is no unsigned integer type. In this case the input will be given as a signed integer type. It shouldn't affect your implementation, since the internal binary representation of an integer is the same whether it's signed or unsigned.


In Java, the compiler uses 2's complement representation for signed integers. Thus, in example 3, the input represents a signed integer. `-3`.


Example 1:
Input: n = 00000000000000000000000000001011
Output: 3
Explanation: The input binary string 00000000000000000000000000001011 has three ""1"" bits.


Example 2:
Input: n = 00000000000000000000000010000000
Output: 1
Explanation: The input binary string 00000000000000000000000010000000 has a total of one ""1"" bit.


Example 3:
Input: n = 111111111111111111111111111101
Output: 31
Explanation: The input binary string 11111111111111111111111111101 has thirty-one ""1"" bits in total.


constraint:
Input must be a binary string of length '32'.

Follow up: How would you optimize this function if it was called multiple times?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a professional robber planning to rob houses along the street. Each house has a certain amount of money hidden in it, and the only limitation preventing you from robbing each house is that adjacent houses have connected security systems that automatically contact the police if two adjacent houses are broken into on the same night .

Given an integer array nums representing the amount of money in each house, return the maximum amount you can rob tonight without calling the police.


Example 1:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house number 1 (money = 1), then rob house number 3 (money = 3).

Total you can loot = 1 + 3 = 4.


Example 2:
Input: nums = [2,7,9,3,1]
Output: 12
Explanation: Rob house 1 (money = 2), rob house 3 (money = 9), and rob house 5 (money = 1).

Total you can loot = 2 + 9 + 1 = 12.


constraint:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 400`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, imagine yourself standing to the right of it, and return the values ​​of the nodes you can see sorted from top to bottom.


Example 1:
Input: root = [1,2,3,null,5,null,4]
Output: [1,3,4]

Example 2:
Input: root = [1,null,3]
Output: [1,3]

Example 3:
input: root = []
output: []

constraint:
The number of nodes in the tree is in the range '[0, 100]'.

`-100 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" 2D binary grid ""grid"" representing a map of ""1""s (land) and ""0""s (water), return the number of islands.

Islands are surrounded by water on all sides and formed by connecting adjacent lands either horizontally or vertically. You can assume that all four edges of the mesh are surrounded by water.


Example 1:
input: grid = [
  [""1"", ""1"", ""1"", ""1"", ""0""],
  [""1"", ""1"", ""0"", ""1"", ""0""],
  [""1"", ""1"", ""0"", ""0"", ""0""],
  [""0"", ""0"", ""0"", ""0"", ""0""]
]
Output: 1

Example 2:
input: grid = [
  [""1"", ""1"", ""0"", ""0"", ""0""],
  [""1"", ""1"", ""0"", ""0"", ""0""],
  [""0"", ""0"", ""1"", ""0"", ""0""],
  [""0"", ""0"", ""0"", ""1"", ""1""]
]
Output: 3

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 300`
`grid[i][j]` is either `'0'` or `'1'`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""left"" and ""right"" representing the range ""[left, right]"", return the bitwise AND of all numbers in that range, inclusive.


Example 1:
Input: Left = 5, Right = 7
Output: 4

Example 2:
Input: Left = 0, Right = 0
output: 0

Example 3:
Input: Left = 1, Right = 2147483647
output: 0

constraint:
`0 <= Left <= Right <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an algorithm to determine if the number ""n"" is happy.

Happy numbers are numbers defined by the following process:
Starting with any positive integer, replace the number with the sum of squares of its digits.

Repeat the process until the number equals 1 (where it will stay), or loop infinitely in a loop that doesn't include 1.

Those numbers that this process ends in 1 are happy.

Returns `true` if `n` is a happy number, otherwise `false`.


Example 1:
Input: n = 19
output: true
explain:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1

Example 2:
Input: n = 2
output: error

constraint:
`1 <= n <= 231 - 1`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a linked list `head` and an integer `val`, remove all nodes in the linked list with `Node.val == val` and return the new head.


Example 1:
Input: head = [1,2,6,3,4,5,6], val = 6
Output: [1,2,3,4,5]

Example 2:
Input: head = [], val = 1
output: []

Example 3:
Input: head = [7,7,7,7], val = 7
output: []

constraint:
The number of nodes in the list is in the range '[0, 104]'.

`1 <= Node.val <= 50`
`0 <= k <= 50`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Counts the number of prime numbers less than the nonnegative number 'n'.


Example 1:
Input: n = 10
Output: 4
Explanation: There are 4 prime numbers less than 10 and they are 2, 3, 5, 7.


Example 2:
Input: n = 0
output: 0

Example 3:
Input: n = 1
output: 0

constraint:
`0 <= n <= 5 * 106`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s"" and ""t"", determine whether they are isomorphic.

Two strings s and t are isomorphic if the characters in s can be replaced by t .

All occurrences of a character must be replaced with another character while preserving the order of the characters. No two characters can map to the same character, but a character can map to itself.


Example 1:
Input: s = ""egg"", t = ""add""
output: true

Example 2:
Input: s = ""foo"", t = ""bar""
output: error

Example 3:
Input: s = ""paper"", t = ""title""
output: true

constraint:
`1 <= s.length <= 5 * 104`
`t.length == s.length`
`s` and `t` consist of any valid ascii characters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a singly linked list, reverse the list, and return the reversed list.


Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

Example 2:
Input: head = [1,2]
output: [2,1]

Example 3:
input: head = []
output: []

constraint:
The number of nodes in the list is in the range '[0, 5000]'.

`-5000 <= Node.val <= 5000`
Follow up: A linked list can be reversed iteratively or recursively. Can you implement both?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are a total of `numCourses` courses you have to take, marked from `0` to `numCourses - 1`. Given an array `prerequisites`, where `prerequisites[i] = [ai, bi]` means that if you want to take the course `ai`, you must first take the course `bi`.

For example, a pair ""[0, 1]"", indicating that to take course ""0"", you must first take course ""1"".

Returns true if you can complete all courses. Otherwise, return ""false"".


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
output: true
Instructions: There are a total of 2 courses to take.
To take Lesson 1, you should have completed Lesson 0. So it's possible.


Example 2:
Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
output: error
Instructions: There are a total of 2 courses to take.
If you want to take class 1, you have to finish class 0, and if you want to take class 0, you have to finish class 1, so it is impossible.


constraint:
`1 <= numCourses <= 105`
`0 <= preconditions.length <= 5000`
`preconditions[i].length == 2`
`0 <= ai, bi < numCourses`
All pairs are unique to prerequisites[i] .",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"A trie (pronounced ""try"") or prefix tree is a tree data structure used to efficiently store and retrieve keys from a dataset of strings. This data structure has various applications, such as autocompletion and spell checking.

Implement the Trie class:
`Trie()` initializes a trie object.

`void insert(String word)` inserts the string `word` into the trie.

`boolean search(String word)` returns `true` if the string `word` is in the trie (i.e. was inserted before), otherwise returns `false`.

`boolean startsWith(String prefix)` returns `true` if the previously inserted string `word` has prefix `prefix`, otherwise returns `false`.


Example 1:
enter
[""trie"", ""insert"", ""search"", ""search"", ""startsWith"", ""insert"", ""search""]
[[], [""apple""], [""apple""], [""app""], [""app""], [""app""], [""app""]]
output
[empty, empty, true, false, true, empty, true]
explain
trie trie = new trie();
trie.insert(""Apple"");
trie.search(""Apple""); // return true
trie.search(""app""); // returns false
trie.startsWith(""app""); // returns true
trie.insert(""app"");
trie.search(""app""); // returns true

constraint:
`1 <= word.length, prefix.length <= 2000`
`word` and `prefix` contain only lowercase English letters.

A total of at most 3 * 104 calls to `insert`, `search` and `startsWith`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of positive integers ""nums"" and a positive integer ""target"", return the minimum length of a contiguous subarray ""[numsl, numsl+1, ..., numsr-1, numsr]"" where the sum is greater than or equal to ""target"". Returns ""0"" if there is no such subarray.


Example 1:
Input: target = 7, nums = [2,3,1,2,4,3]
Output: 2
Explanation: The subarray [4,3] has minimum length under the problem constraints.


Example 2:
Input: target = 4, nums = [1,4,4]
Output: 1

Example 3:
Input: target = 11, nums = [1,1,1,1,1,1,1,1]
output: 0

constraint:
`1 <= target <= 109`
`1 <= nums.length <= 105`
`1 <= nums[i] <= 105`
Follow up: If you've already found an ""O(n)"" solution, try writing another solution with ""O(n log(n))"" time complexity.",1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In total you need to study `n` courses, labeled from `0` to `n - 1`.

Some courses may have ""prerequisites"", for example, if ""prerequisites[i] = [ai, bi]"", it means that you must take course ""bi"" before course ""ai"".

Given a list of total number of courses `numCourses` and `prerequisite` pairs, return the order of courses required to complete all courses.

If there are many valid answers, return any of them. Returns an empty array if it is not possible to complete all courses.


Example 1:
Input: numCourses = 2, prerequisites = [[1,0]]
output: [0,1]
Instructions: There are a total of 2 courses to take. To take Lesson 1, you should have completed Lesson 0. So the correct class order is [0,1].


Example 2:
Input: numCourses = 4, prerequisites = [[1,0],[2,0],[3,1],[3,2]]
Output: [0,2,1,3]
Instructions: There are a total of 4 courses to take. To study Course 3, you should have completed Course 1 and Course 2. Both courses 1 and 2 should be taken after you have completed course 0.

So a correct class order is [0,1,2,3]. Another correct order is [0,2,1,3].


Example 3:
Input: numCourses = 1, prerequisites = []
output: [0]

constraint:
`1 <= numCourses <= 2000`
`0 <= prerequisites. length <= numCourses * (numCourses - 1)`
`preconditions[i].length == 2`
`0 <= ai, bi < numCourses`
`ai != bi`
All pairs `[ai, bi]` are distinct.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that supports adding new words and checking whether a string matches any previously added strings.

Implement the WordDictionary class:
`WordDictionary()` initializes the object.

`void addWord(word)` adds `word` to the data structure, which can be matched later.

`bool search(word)` returns `true` if any string in the data structure matches `word`, otherwise returns `false`. `word` may contain a dot `'.'`, where a dot can match any letter.


example:
enter
[""WordDictionary"",""addWord"",""addWord"",""addWord"",""search"",""search"",""search"",""search""]
[[],[""bad""],[""dad""],[""crazy""],[""mat""],[""bad""],["".ad""],[""b..""]]
output
[empty, empty, empty, empty, false, true, true, true]
explain
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord(""bad"");
wordDictionary.addWord(""Dad"");
wordDictionary.addWord(""Crazy"");
wordDictionary.search(""pad""); // returns false
wordDictionary.search(""bad""); // return true
wordDictionary.search("".ad""); // returns true
wordDictionary.search(""b..""); // returns true

constraint:
`1 <= word.length <= 500`
`word` in `addWord` consists of lowercase English letters.

`word` in `search` consists of `'.'` or lowercase English letters.

Up to 50000 calls to addWord and search will be made.",0,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""board"" of ""m x n"" characters and a list of strings ""words"", return all the words on the board.

Each word must consist of letters from consecutive adjacent cells, where adjacent cells are either horizontally or vertically adjacent. The same letter cell cannot be used more than once in a word.


Example 1:
Input: board = [[""o"",""a"",""a"",""n""],[""e"",""t"",""a"",""e""],[""i"",""h"", ""k"",""r""],[""i"",""f"",""l"",""v""]], words = [""oath"",""peas"",""eat"",""rain""]
output: [""eat"", ""swear""]

Example 2:
Input: board = [[""a"",""b""],[""c"",""d""]], words = [""abcb""]
output: []

constraint:
`m == board. length`
`n == board[i].length`
`1 <= m, n <= 12`
`board[i][j]` are lowercase English letters.

`1 <= words.length <= 3 * 104`
`1 <= word[i].length <= 10`
`words[i]` consists of lowercase English letters.

All strings in `words` are unique.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a professional robber planning to rob houses along the street. Each house hides a certain amount of money. All the houses in this place are arranged in a circle. This means that the first house is a neighbor of the last house. At the same time, adjacent houses are connected to the security system, and if two adjacent houses are broken into on the same night, it will automatically contact the police.

Given an integer array nums representing the amount of money in each house, return the maximum amount you can rob tonight without calling the police.


Example 1:
Input: nums = [2,3,2]
Output: 3
Explanation: You can't rob house 1 (money = 2) and then rob house 3 (money = 2) because they are adjacent houses.


Example 2:
Input: nums = [1,2,3,1]
Output: 4
Explanation: Rob house number 1 (money = 1), then rob house number 3 (money = 3).

Total you can loot = 1 + 3 = 4.


Example 3:
input: nums = [0]
output: 0

constraint:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s. You can convert s to a palindrome by prefixing it with characters.

Return the shortest palindrome you can find by performing this transformation.


Example 1:
Input: s = ""aacecaaa""
Output: ""aaacecaaa""

Example 2:
Input: s = ""abcd""
Output: ""dcbabcd""

constraint:
`0 <= s.length <= 5 * 104`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums and an integer k, return the kth largest element in the array.

Note that it is the ""kth"" largest element in the sort order, not the ""kth"" distinct element.


Example 1:
Input: nums = [3,2,1,5,6,4], k = 2
Output: 5

Example 2:
Input: nums = [3,2,3,1,2,4,5,5,6], k = 4
Output: 4

constraint:
`1 <= k <= nums.length <= 104`
`-104 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Find all valid combinations of ""k"" numbers that sum to ""n"", satisfying the following conditions:
Only use the numbers ""1"" through ""9"".

Each number can be used at most once.

Returns a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.


Example 1:
Input: k = 3, n = 7
Output: [[1,2,4]]
explain:
1 + 2 + 4 = 7
There are no other valid combinations.


Example 2:
Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
explain:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.


Example 3:
Input: k = 4, n = 1
output: []
Explanation: No valid combination. [1,2,1] is invalid because 1 is used twice.


Example 4:
Input: k = 3, n = 2
output: []
Explanation: No valid combination.


Example 5:
Input: k = 9, n = 45
Output: [[1,2,3,4,5,6,7,8,9]]
explain:
1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 45
There are no other valid combinations.


constraint:
`2 <= k <= 9`
`1 <= n <= 60`",1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of integers, return ""true"" if any value appears in the array at least twice, or ""false"" if every element is distinct.


Example 1:
Input: nums = [1,2,3,1]
output: true

Example 2:
Input: nums = [1,2,3,4]
output: error

Example 3:
Input: nums = [1,1,1,3,3,4,3,2,4,2]
output: true

constraint:
`1 <= nums.length <= 105`
`-109 <= nums[i] <= 109`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A city's skyline is the outer outline of the silhouette formed by all the buildings in that city when viewed from a distance. Given the locations and heights of all buildings, return the skyline that these buildings collectively form.

The geometry information of each building is given in the array `buildings`, where `buildings[i] = [lefti, righti, heighti]`:
`lefti` is the x-coordinate of the left edge of the `ith` building.

`righti` is the x-coordinate of the right edge of the `ith` building.

`heighti` is the height of the `ith` building.

You might assume that all buildings are perfect rectangles, on an absolutely flat surface with height ""0"".

The skyline should be represented as a list of ""keypoints"" sorted by x-coordinates in the format '[[x1,y1],[x2,y2],...]'. Each keypoint is the left endpoint of a horizontal line segment in the skyline, except for the last point in the list, which always has a y-coordinate of ""0"" and marks the end of the skyline, which is the end of the rightmost building . Any ground between the leftmost and rightmost buildings should be part of the skyline silhouette.

Note: There must not be consecutive contour lines in the output skyline. For example, `[...,[2 3],[4 5],[7 5],[11 5],[12 7],...]` is not acceptable; three rows with height 5 should be Combined into one line in the final output: `[...,[2 3],[4 5],[12 7],...]`

Example 1:
Input: Buildings = [[2,9,10],[3,7,15],[5,12,12],[15,20,10],[19,24,8]]
Output: [[2,10],[3,15],[7,12],[12,0],[15,10],[20,8],[24,0]]
explain:
Figure A shows the input buildings.

Figure B shows the skyline formed by these buildings. The red dots in Figure B represent keypoints in the output list.


Example 2:
Input: Buildings = [[0,2,3],[2,5,3]]
Output: [[0,3],[5,0]]

constraint:
`1 <= buildings.length <= 104`
`0 <= left hand < right hand <= 231 - 1`
`1 <= height i <= 231 - 1`
`buildings` sorted by `lefti` non-descending order.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0
"Given an array of integers `nums` and an integer `k`, return `true if there are two different indices `i` and `j` in the array such that `nums[i] == nums[j]` and ` `abs(i - j) <= k`.


Example 1:
Input: nums = [1,2,3,1], k = 3
output: true

Example 2:
Input: nums = [1,0,1,1], k = 1
output: true

Example 3:
Input: nums = [1,2,3,1,2,3], k = 2
output: error

constraint:
`1 <= nums.length <= 105`
`-109 <= nums[i] <= 109`
`0 <= k <= 105`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and two integers `k` and `t`, if there are two different indices `i` and `j` in the array such that `abs(nums[i] - nums[ j]) <= t` and abs(i - j) <= k`.


Example 1:
Input: nums = [1,2,3,1], k = 3, t = 0
output: true

Example 2:
Input: nums = [1,0,1,1], k = 1, t = 2
output: true

Example 3:
Input: nums = [1,5,9,1,5,9], k = 2, t = 3
output: error

constraint:
`0 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`0 <= k <= 104`
`0 <= t <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" binary ""matrix"" filled with ""0s"" and ""1s"", find the largest square containing only ""1s"" and return its area.


Example 1:
Input: matrix = [[""1"",""0"",""1"",""0"",""0""],[""1"",""0"",""1"",""1"",""1""],[ ""1"",""1"",""1"",""1"",""1""],[""1"",""0"",""0"",""1"",""0""]]
Output: 4

Example 2:
Input: Matrix = [[""0"",""1""],[""1"",""0""]]
Output: 1

Example 3:
Input: matrix = [[""0""]]
output: 0

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 300`
`matrix[i][j]` is either `'0'` or `'1'`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a complete binary tree, return the number of nodes in the tree.

According to Wikipedia, each level, except possibly the last level, is completely populated in a complete binary tree, with all nodes of the last level being as far left as possible. It can contain nodes between `1` and `2h` in the last level `h`.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: 6

Example 2:
input: root = []
output: 0

Example 3:
input: root = [1]
Output: 1

constraint:
The number of nodes in the tree is in the range ""[0, 5 * 104]"".

`0 <= Node.val <= 5 * 104`
The tree is guaranteed to be complete.

Follow up: Traversing the tree to count the number of nodes in the tree is a simple solution, but has a complexity of ""O(n)"". Can you find a faster algorithm?",0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the coordinates of two rectilinear rectangles in a 2D plane, returns the total area covered by the two rectangles.

The first rectangle is defined by its lower left corner ""(A, B)"" and upper right corner ""(C, D)"".

The second rectangle is defined by its lower left corner ""(E, F)"" and upper right corner ""(G, H)"".


Example 1:
Input: A=-3, B=0, C=3, D=4, E=0, F=-1, G=9, H=2
Output: 45

Example 2:
Input: A=-2, B=-2, C=2, D=2, E=-2, F=-2, G=2, H=2
output: 16

constraint:
`-104 <= A, B, C, D, E, F, G, H <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s representing an expression, implement a basic calculator to evaluate it.


Example 1:
Input: s = ""1 + 1""
Output: 2

Example 2:
Input: s = ""2-1 + 2""
Output: 3

Example 3:
Input: s = ""(1+(4+5+2)-3)+(6+8)""
Output: 23

constraint:
`1 <= s.length <= 3 * 105`
`s` consists of numbers, `'+'`, `'-'`, `'('`, `')'` and `' '`.

`s` represents a valid expression.",0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A last-in-first-out (LIFO) stack is implemented using only two queues. Implemented stacks should support all functionality of normal queues (`push`, `top`, `pop` and `empty`).

Implement the ""MyStack"" class:
`void push(int x)` pushes element x onto the stack.

`int pop()` removes the top element of the stack and returns.

`int top()` returns the top element of the stack.

`boolean empty()` returns `true` if the stack is empty, `false` otherwise.

notes:
You must use only the standard operations of the queue, which means only `push to back`, `peek/pop from front`, `size` and `is empty` operations work.

Depending on your language, queues may not be natively supported. You can simulate a queue using a list or a double-ended queue (double-ended queue), as long as you only use the queue's standard operations.


Example 1:
enter
[""MyStack"", ""push"", ""push"", ""top"", ""pop"", ""empty""]
[[], [1], [2], [], [], []]
output
[empty, empty, empty, 2, 2, false]
explain
MyStack myStack = new MyStack();
myStack. push(1);
myStack. push(2);
top of my stack(); // return 2
pop() my stack; // return 2
my stack.empty(); // return false

constraint:
`1 <= x <= 9`
At most `100` calls will be made to `push`, `pop`, `top` and `empty`.

All calls to `pop` and `top` are valid.

Follow-up: Can you implement a stack so that the time complexity of each operation is amortized as ""O(1)""? In other words, performing ""n"" operations will take overall ""O(n)"" time, even though one of the operations may take longer. You can use more than two queues.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, reverse the tree and return its root.


Example 1:
Input: root = [4,2,7,1,3,6,9]
Output: [4,7,2,9,6,3,1]

Example 2:
Input: root = [2,1,3]
Output: [2,3,1]

Example 3:
input: root = []
output: []

constraint:
The number of nodes in the tree is in the range '[0, 100]'.

`-100 <= Node.val <= 100`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s representing an expression, evaluate the expression and return its value.
Integer division should truncate to zero.


Example 1:
Input: s = ""3+2*2""
Output: 7

Example 2:
Input: s = ""3/2""
Output: 1

Example 3:
Input: s = "" 3+5 / 2 ""
Output: 5

constraint:
`1 <= s.length <= 3 * 105`
`s` consists of an integer and an operator `('+', '-', '*', '/')` separated by some spaces.

`s` represents a valid expression.

All integers in the expression are non-negative integers in the range ""[0, 231 - 1]"".

The answer is guaranteed to fit in a 32-bit integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get a sorted array of unique integers ""nums"".

Returns a list of the smallest sorted ranges that exactly cover all numbers in the array. That is, each element of `nums` is contained in exactly one range, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.

Each range ""[a,b]"" in the list should be output as:
`""a->b""` if `a != b`
`""a""` if `a == b`

Example 1:
Input: nums = [0,1,2,4,5,7]
Output: [""0->2"",""4->5"",""7""]
Explanation: The scope is:
[0,2] --> ""0->2""
[4,5] --> ""4->5""
[7,7] --> ""7""

Example 2:
Input: nums = [0,2,3,4,6,8,9]
Output: [""0"",""2->4"",""6"",""8->9""]
Explanation: The scope is:
[0,0] --> ""0""
[2,4] --> ""2->4""
[6,6] --> ""6""
[8,9] --> ""8->9""

Example 3:
input: nums = []
output: []

Example 4:
Input: nums = [-1]
Output: [""-1""]

Example 5:
input: nums = [0]
Output: [""0""]

constraint:
`0 <= nums.length <= 20`
`-231 <= nums[i] <= 231 - 1`
All values ​​of `nums` are unique.

`nums` are sorted in ascending order.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array of size `n`, find all elements that occur more than `⌊ n/3 ⌋` times.

Follow-up: Can you solve this problem in linear time and O(1) space?

Example 1:
Input: nums = [3,2,3]
Output: [3]

Example 2:
input: nums = [1]
output: [1]

Example 3:
Input: nums = [1,2]
output: [1,2]

constraint:
`1 <= nums.length <= 5 * 104`
`-109 <= nums[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree and an integer ""k"", return the kth (indexed from 1) smallest element in the tree.


Example 1:
Input: root = [3,1,4,null,2], k = 1
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
Output: 3

constraint:
The number of nodes in the tree is ""n"".

`1 <= k <= n <= 104`
`0 <= Node.val <= 104`
Follow-up: If the BST is frequently modified (that is, we can perform insertion and deletion operations), you need to find the kth smallest frequently, how would you optimize it?",0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return ""true"" if it is a power of 2. Otherwise, return ""false"".

An integer `n` is a power of 2 if there exists an integer `x` such that `n == 2x`.


Example 1:
Input: n = 1
output: true
Explanation: 20 = 1

Example 2:
Input: n = 16
output: true
Explanation: 24 = 16

Example 3:
Input: n = 3
output: error

Example 4:
Input: n = 4
output: true

Example 5:
Input: n = 5
output: error

constraint:
`-231 <= n <= 231 - 1`
Follow up: Can you solve without loop/recursion?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A first-in-first-out (FIFO) queue is implemented using only two stacks. Implemented queues should support all functionality of normal queues (`push`, `peek`, `pop` and `empty`).

Implement the ""MyQueue"" class:
`void push(int x)` pushes element x to the back of the queue.

`int pop()` removes an element from the front of the queue and returns it.

`int peek()` returns the element at the front of the queue.

`boolean empty()` returns `true` if the queue is empty, `false` otherwise.

notes:
You must use only the standard operations of the stack, which means only `push to top`, `peek/pop from top`, `size` and `is empty` operations work.

Depending on your language, stacks may not be natively supported. A list or deque (double-ended queue) can be used to emulate a stack as long as you only use the standard operations of the stack.

Follow-up question: Can you implement a queue so that the time complexity of each operation is amortized as ""O(1)""? In other words, performing ""n"" operations will take overall ""O(n)"" time, even though one of the operations may take longer.


Example 1:
enter
[""MyQueue"", ""push"", ""push"", ""peek"", ""pop"", ""empty""]
[[], [1], [2], [], [], []]
output
[empty, empty, empty, 1, 1, false]
explain
My Queue myQueue = new MyQueue();
myQueue.push(1); //The queue is: [1]
myQueue.push(2); // The queue is: [1, 2] (the leftmost is the front of the queue)
myQueue.peek(); // returns 1
myqueue.pop(); // returns 1, queue is [2]
myqueue.empty(); // return false

constraint:
`1 <= x <= 9`
At most `100` calls will be made to `push`, `pop`, `peek` and `empty`.

All calls to `pop` and `peek` are valid.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", calculate the total number of digits ""1"" that occur in all non-negative integers less than or equal to ""n"".


Example 1:
Input: n = 13
Output: 6

Example 2:
Input: n = 0
output: 0

constraint:
`0 <= n <= 2 * 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a singly linked list, return ""true"" if it is a palindrome.


Example 1:
Input: head = [1,2,2,1]
output: true

Example 2:
Input: head = [1,2]
output: error

constraint:
The number of nodes in the list is in the range '[1, 105]'.

`0 <= Node.val <= 9`
Follow up: Can you do it in `O(n)` time and `O(1)` space?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary search tree (BST), find the lowest common ancestor (LCA) of two given nodes in the BST.

According to the definition of LCA on Wikipedia: ""The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (we allow a node is its own descendant).

Example 1:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 8
Output: 6
Explanation: Nodes 2 and 8 have an LCA of 6.


Example 2:
Input: root = [6,2,8,0,4,7,9,null,null,3,5], p = 2, q = 4
Output: 2
Explanation: Nodes 2 and 4 have an LCA of 2 because a node can be a descendant of itself by the LCA definition.


Example 3:
Input: root = [2,1], p = 2, q = 1
Output: 2

constraint:
The number of nodes in the tree is in the range '[2, 105]'.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` will exist in the BST.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, find the lowest common ancestor (LCA) of two given nodes in the tree.

According to the definition of LCA on Wikipedia: ""The lowest common ancestor is defined between two nodes `p` and `q` as the lowest node in `T` that has both `p` and `q` as descendants (we allow a node is its own descendant).

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: Nodes 5 and 1 have an LCA of 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 because a node can be a descendant of itself by the LCA definition.


Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

constraint:
The number of nodes in the tree is in the range '[2, 105]'.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` will exist in the tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function to delete a node in a singly linked list. You won't be able to access the ""head"" of the list, but rather the node you want to delete directly.

Ensure that the node to be removed is not the tail node in the list.


Example 1:
Input: head = [4,5,1,9], node = 5
Output: [4,1,9]
Explanation: Given your second node with value 5, the linked list should become 4 -> 1 -> 9 after calling your function.


Example 2:
Input: head = [4,5,1,9], node = 1
Output: [4,5,9]
Explanation: Given your third node with value 1, the linked list should become 4 -> 5 -> 9 after calling your function.


Example 3:
Input: head = [1,2,3,4], node = 3
Output: [1,2,4]

Example 4:
Input: head = [0,1], node = 0
output: [1]

Example 5:
Input: head = [-3,5,-99], node = -3
Output: [5,-99]

constraint:
The number of nodes in the given list is in the range ""[2, 1000]"".

`-1000 <= Node.val <= 1000`
The value of each node in the list is unique.

The node to be deleted is in the linked list, not the tail node",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return an array `answer` such that `answer[i]` is equal to the product of all elements in `nums` except `nums[i]`.

The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.


Example 1:
Input: nums = [1,2,3,4]
Output: [24,12,8,6]

Example 2:
Input: nums = [-1,1,0,-3,3]
Output: [0,0,9,0,0]

constraint:
`2 <= nums.length <= 105`
`-30 <= nums[i] <= 30`
The product of any prefix or suffix of `nums` is guaranteed to fit in a 32-bit integer.

follow up:
Can you solve it in ""O(n)"" time complexity without using division?
Can you solve it with ""O(1)"" constant space complexity? (Output arrays do not count as extra space for space complexity analysis.)",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, there is a sliding window of size k that moves from the leftmost to the rightmost of the array. You can only see ""k"" numbers in the window. Each time the sliding window moves one position to the right.

Returns the maximum sliding window.


Example 1:
Input: nums = [1,3,-1,-3,5,3,6,7], k = 3
Output: [3,3,5,5,6,7]
explain:
window position maximum
--------------------
[1 3 -1] -3 5 3 6 7 3
 1 [3 -1 -3] 5 3 6 7 3
 1 3 [-1 -3 5] 3 6 7 5
 1 3 -1 [-3 5 3] 6 7 5
 1 3 -1 -3 [5 3 6] 7 6
 1 3 -1 -3 5 [3 6 7] 7

Example 2:
Input: nums = [1], k = 1
output: [1]

Example 3:
Input: nums = [1,-1], k = 1
Output: [1,-1]

Example 4:
Input: nums = [9,11], k = 2
Output: [11]

Example 5:
Input: nums = [4,-2], k = 2
output: [4]

constraint:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`
`1 <= k <= nums.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Write an efficient algorithm to search for a ""target"" value in an ""m x n"" integer ""matrix"". A ""matrix"" has the following properties:
The integers in each row are sorted in ascending order from left to right.

The integers in each column are sorted in ascending order from top to bottom.


Example 1:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17, 24],[18,21,23,26,30]], target=5
output: true

Example 2:
Input: matrix = [[1,4,7,11,15],[2,5,8,12,19],[3,6,9,16,22],[10,13,14,17, 24],[18,21,23,26,30]], target = 20
output: error

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= n, m <= 300`
`-109 <= matrix[i][j] <= 109`
All integers in each row are sorted in ascending order.

All integers in each column are sorted in ascending order.

`-109 <= target <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""expression"" consisting of numbers and operators, return all possible results by evaluating all the different possible ways of grouping numbers and operators. You can return answers in any order.


Example 1:
Input: expression = ""2-1-1""
output: [0,2]
explain:
((2-1)-1) = 0
(2-(1-1)) = 2

Example 2:
Input: expression = ""2*3-4*5""
Output: [-34,-14,-10,-10,10]
explain:
(2*(3-(4*5))) = -34
((2*3)-(4*5)) = -14
((2*(3-4))*5) = -10
(2*((3-4)*5)) = -10
(((2*3)-4)*5) = 10

constraint:
`1 <= expression.length <= 20`
An ""expression"" consists of numbers and the operators ""+"", ""-"" and ""*"".",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s"" and ""t"", return ""true"" if ""t"" is an anagram of ""s"", else return ""false"".


Example 1:
Input: s = ""anagram"", t = ""nagaram""
output: true

Example 2:
Input: s = ""rat"", t = ""car""
output: error

constraint:
`1 <= s.length, t.length <= 5 * 104`
`s` and `t` consist of lowercase English letters.

Follow-up: What if the input contains Unicode characters? How would you adapt your solution to this situation?",0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure that will be initialized with an array of strings, then it should answer the query for the shortest distance between two different strings in the array.

Implement the WordDistance class:
`WordDistance(String[] wordsDict)` initializes object with string array `wordsDict`.

`int shortest(String word1, String word2)` returns the shortest distance between `word1` and `word2` in the array `wordsDict`.


Example 1:
enter
[""WordDistance"", ""Shortest"", ""Shortest""]
[[[""practice"", ""make"", ""perfect"", ""code"", ""make""]], [""code"", ""practice""], [""make"", ""make""]]
output
[empty, 3, 1]
explain
WordDistance wordDistance = new WordDistance([""practice"", ""production"", ""perfect"", ""coding"", ""production""]);
wordDistance.shortest(""Coding"", ""Exercise""); // returns 3
wordDistance.shortest(""Manufacturing"", ""Coding""); // return 1

constraint:
`1 <= wordsDict. length <= 3 * 104`
`1 <= wordsDict[i].length <= 10`
`wordsDict[i]` consists of lowercase English letters.

`word1` and `word2` are in `wordsDict`.

`word1 != word2`
At most `5000` calls will be made to `shortest`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings wordsDict and two strings already present in arrays word1 and word2 , return the shortest distance between those two words in the list.

Note that ""word1"" and ""word2"" may be the same. They are guaranteed to represent two separate words in the list.


Example 1:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""coding""
Output: 1

Example 2:
Input: wordsDict = [""practice"", ""makes"", ""perfect"", ""coding"", ""makes""], word1 = ""makes"", word2 = ""makes""
Output: 3

constraint:
`1 <= wordsDict. length <= 3 * 104`
`1 <= wordsDict[i].length <= 10`
`wordsDict[i]` consists of lowercase English letters.

`word1` and `word2` are in `wordsDict`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""num"" representing an integer, return ""true"" if ""num"" is a strobe number.

Strobe numbers are numbers that look the same when rotated ""180"" degrees (viewed upside down).


Example 1:
Input: num = ""69""
output: true

Example 2:
Input: num = ""88""
output: true

Example 3:
Input: num = ""962""
output: error

Example 4:
Input: num = ""1""
output: true

constraint:
`1 <= num.length <= 50`
`num` contains only numbers.

`num` does not contain any leading zeros, except zero itself.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return all strobe numbers of length ""n"". You can return answers in any order.

Strobe numbers are numbers that look the same when rotated ""180"" degrees (viewed upside down).


Example 1:
Input: n = 2
Output: [""11"",""69"",""88"",""96""]

Example 2:
Input: n = 1
Output: [""0"",""1"",""8""]

constraint:
`1 <= n <= 14`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings low and high, which represent two integers ""low"" and ""high"", where ""low <= high"", return the number of strobe digits in the range ""[low, high]"".

Strobe numbers are numbers that look the same when rotated ""180"" degrees (viewed upside down).


Example 1:
Input: low=""50"", high=""100""
Output: 3

Example 2:
Input: low=""0"", high=""0""
Output: 1

constraint:
`1 <= low.length, high.length <= 15`
`low` and `high` contain only numbers.

`low <= high`
`low` and `high` do not contain any leading zeros, except the zero itself.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can shift a string by shifting each letter to its consecutive letter.

For example, `""abc""` can be converted to `""bcd""`.

We can keep shifting strings to form a sequence.

For example, we can keep shifting `""abc""` to form the sequence: `""abc"" -> ""bcd"" -> ... -> ""xyz""`.

Given an array of strings ""strings"", group all ""strings[i]"" that belong to the same shift sequence. You can return answers in any order.


Example 1:
Input: String = [""abc"",""bcd"",""acef"",""xyz"",""az"",""ba"",""a"",""z""]
Output: [[""acef""],[""a"",""z""],[""abc"",""bcd"",""xyz""],[""az"",""ba""]]

Example 2:
Input: String = [""a""]
output: [[""a""]]

constraint:
`1 <= strings.length <= 200`
`1 <= strings[i].length <= 50`
`strings[i]` consists of lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the number of unique subtrees.

A single-valued subtree means that all nodes of the subtree have the same value.


Example 1:
Input: root = [5,1,5,5,5,null,5]
Output: 4

Example 2:
input: root = []
output: 0

Example 3:
Input: root = [5,5,5,5,5,null,5]
Output: 6

constraint:
The numbers of the nodes in the tree will be in the range ""[0, 1000]"".

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an iterator to flatten a 2D vector. It should support `next` and `hasNext` operations.

Implement the ""Vector2D"" class:
`Vector2D(int[][] vec)` initializes an object with a two-dimensional vector `vec`.

`next()` returns the next element of a 2D vector and advances the pointer one step. You might assume that all calls to `next` are valid.

`hasNext()` returns `true` if there are still some elements in the vector, otherwise `false`.


Example 1:
enter
[""Vector2D"", ""next"", ""next"", ""next"", ""hasNext"", ""hasNext"", ""next"", ""hasNext""]
[[[[1, 2], [3], [4]], [], [], [], [], [], [], []]
output
[null, 1, 2, 3, true, true, 4, false]
explain
Vector2D vector2D = new Vector2D([[1, 2], [3], [4]]);
vector2D.next(); // returns 1
vector2D.next(); // returns 2
vector2D.next(); // returns 3
vector2D.hasNext(); // return true
vector2D.hasNext(); // return true
vector2D.next(); // returns 4
vector2D.hasNext(); // returns false

constraint:
`0 <= vec.length <= 200`
`0 <= vec[i].length <= 500`
`-500 <= vec[i][j] <= 500`
There will be at most `105` calls to `next` and `hasNext`.

Follow up: As an added challenge, try coding it using only iterators in C++ or iterators in Java.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of meeting times ""intervals"" where ""intervals[i] = [starti, endi]"", determine whether a person can attend all meetings.


Example 1:
Input: Interval = [[0,30],[5,10],[15,20]]
output: error

Example 2:
Input: Interval = [[7,10],[2,4]]
output: true

constraint:
`0 <= intervals. length <= 104`
`interval[i].length == 2`
`0 <= start < end <= 106`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of meeting intervals ""intervals"" where ""intervals[i] = [starti, endi]"", return the minimum number of meeting rooms required.


Example 1:
Input: Interval = [[0,30],[5,10],[15,20]]
Output: 2

Example 2:
Input: Interval = [[7,10],[2,4]]
Output: 1

constraint:
`1 <= intervals. length <= 104`
`0 <= start < end <= 106`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Numbers can be thought of as the product of their factors.

For example, ""8 = 2 x 2 x 2 = 2 x 4"".

Given an integer ""n"", return all possible combinations of its factors. You can return answers in any order.

Note that these factors should be in the range ""[2, n - 1]"".


Example 1:
Input: n = 1
output: []

Example 2:
Input: n = 12
Output: [[2,6],[3,4],[2,2,3]]

Example 3:
Input: n = 37
output: []

Example 4:
Input: n = 32
Output: [[2,16],[4,8],[2,2,8],[2,4,4],[2,2,2,4],[2,2,2,2, 2]]

constraint:
`1 <= n <= 108`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of unique integers `preorder`, return `true` if it is the correct preorder traversal sequence for a binary search tree.


Example 1:
Input: preorder = [5,2,1,3,6]
output: true

Example 2:
Input: preorder = [5,2,6,1,3]
output: error

constraint:
`1 <= preorder.length <= 104`
`1 <= preorder[i] <= 104`
All elements of `preorder` are unique.

Follow up: Can you do this with only constant space complexity?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a row of n houses, each of which can be painted in one of three colors: red, blue, or green. The cost of painting each house with a certain color is different. You have to paint all the houses so that no two adjacent houses will have the same color.

The cost of painting each house a certain color is represented by the ""n x 3"" cost matrix ""cost"".

For example, `costs[0][0]` is the cost of painting house `0` in red; `costs[1][2]` is the cost of painting house 1 in green, and so on...

Returns the minimum cost to paint all houses.


Example 1:
Input: Cost = [[17,2,17],[16,16,5],[14,3,19]]
Output: 10
Explanation: Paint house 0 blue, house 1 green, and house 2 blue.

Minimum cost: 2 + 5 + 3 = 10.


Example 2:
Input: cost = [[7,6,2]]
Output: 2

constraint:
`costs. length == n`
`cost[i].length == 3`
`1 <= n <= 100`
`1 <= cost[i][j] <= 20`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return all root-to-leaf paths in arbitrary order.

A leaf is a node with no children.


Example 1:
Input: root = [1,2,3,null,5]
Output: [""1->2->5"", ""1->3""]

Example 2:
input: root = [1]
Output: [""1""]

constraint:
The number of nodes in the tree is in the range ""[1, 100]"".

`-100 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer num , repeatedly add all its digits until the result has only one digit, then return it.


Example 1:
Input: num = 38
Output: 2
Explanation: The process is
38 --> 3 + 8 --> 11
11 --> 1 + 1 --> 2
Since 2 has only one digit, it is returned.


Example 2:
Input: num = 0
output: 0

constraint:
`0 <= num <= 231 - 1`
Follow up: Can you do this in ""O(1)"" runtime without any loops/recursion?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array containing `n` integers `nums` and an integer `target`, find index triples `i`, `j`, `k satisfying `0 <= i < j < k < n` `Number of conditions `nums[i] + nums[j] + nums[k] < target`.

Follow up: Can you solve it in `O(n2)` runtime?

Example 1:
Input: nums = [-2,0,1,3], target = 2
Output: 2
Explanation: Because there are two triples whose sum is less than 2:
[-2,0,1]
[-2,0,3]

Example 2:
Input: nums = [], target = 0
output: 0

Example 3:
Input: nums = [0], target = 0
output: 0

constraint:
`n == nums. length`
`0 <= n <= 300`
`-100 <= nums[i] <= 100`
`-100 <= target <= 100`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums in which exactly two elements appear exactly once and all other elements appear exactly twice. Find two elements that occur exactly once. You can return answers in any order.

Follow up: Your algorithm should run in linear runtime complexity. Can you implement it with only constant space complexity?

Example 1:
Input: nums = [1,2,1,3,2,5]
Output: [3,5]
Explanation: [5, 3] is also a valid answer.


Example 2:
Input: nums = [-1,0]
Output: [-1,0]

Example 3:
Input: nums = [0,1]
Output: [1,0]

constraint:
`2 <= nums.length <= 3 * 104`
`-231 <= nums[i] <= 231 - 1`
Every integer in `nums` will appear twice, and only two integers will appear once.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a graph consisting of ""n"" nodes labeled ""0"" to ""n - 1"". Given an integer n and a list of ""edges"", where ""edges[i] = [ai, bi]"" means that there is an undirected edge between nodes ""ai"" and ""bi"" in the graph.

Returns ""true"" if the edges of the given graph form a valid tree, otherwise returns ""false"".


Example 1:
Input: n = 5, sides = [[0,1],[0,2],[0,3],[1,4]]
output: true

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[1,3],[1,4]]
output: error

constraint:
`1 <= 2000 <= n`
`0 <= edges.length <= 5000`
`edge[i].length == 2`
`0 <= ai, bi < n`
`ai != bi`
There are no self-loops or repeated edges.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, return `true` if `n` is an ugly number.

An ugly number is a positive number whose prime factors include only ""2"", ""3"" and/or ""5"".


Example 1:
Input: n = 6
output: true
Explanation: 6 = 2 × 3

Example 2:
Input: n = 8
output: true
Explanation: 8 = 2 × 2 × 2

Example 3:
Input: n = 14
output: error
Explanation: 14 is not ugly because it contains another prime factor of 7.


Example 4:
Input: n = 1
output: true
Explanation: 1 is often seen as an ugly number.


constraint:
`-231 <= n <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer n, return the nth ugly number.

An ugly number is a positive number whose prime factors include only ""2"", ""3"" and/or ""5"".


Example 1:
Input: n = 10
Output: 12
Explanation: [1, 2, 3, 4, 5, 6, 8, 9, 10, 12] is the sequence of the first 10 ugly numbers.


Example 2:
Input: n = 1
Output: 1
Explanation: 1 is often seen as an ugly number.


constraint:
`1 <= n <= 1690`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a row of 'n' houses, each of which can be painted in one of 'k' colors. The cost of painting each house with a certain color is different. You have to paint all the houses so that no two adjacent houses will have the same color.

The cost of painting each house a certain color is represented by an ""n x k"" cost matrix cost.

For example, `costs[0][0]` is the cost of painting house `0` with color `0`; `costs[1][2]` is the cost of painting house `1` with color `2`, and so on analogy...

Returns the minimum cost to paint all houses.


Example 1:
Input: Cost = [[1,5,3],[2,9,4]]
Output: 5
explain:
Paint house 0 color 0 and house 1 color 2. Minimum cost: 1 + 4 = 5;
Or paint house 0 color 2 and house 1 color 0. Minimum cost: 3 + 2 = 5.


Example 2:
Input: cost = [[1,3],[2,4]]
Output: 5

constraint:
`costs. length == n`
`cost[i].length == k`
`1 <= n <= 100`
`1 <= k <= 20`
`1 <= cost[i][j] <= 20`
Follow up: Can you solve it in `O(nk)` runtime?",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return true if permutations of the string form a palindrome.


Example 1:
Input: s = ""Code""
output: error

Example 2:
Input: s = ""aab""
output: true

Example 3:
Input: s = ""carerac""
output: true

constraint:
`1 <= s.length <= 5000`
`s` contains only lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return all palindromic permutations (without repetitions) of it.

You can return answers in any order. If `s` has no palindromic permutations, an empty list is returned.


Example 1:
Input: s = ""aabb""
Output: [""abba"",""baab""]

Example 2:
Input: s = ""abc""
output: []

constraint:
`1 <= s.length <= 16`
`s` contains only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return the only missing number in the array in that range.

Follow up: Can you implement a solution using only ""O(1)"" extra space complexity and ""O(n)"" runtime complexity?

Example 1:
Input: nums = [3,0,1]
Output: 2
Explanation: n = 3 Since there are 3 numbers, all numbers are in the range [0,3]. 2 is the missing number in the range because it doesn't appear in nums .


Example 2:
Input: nums = [0,1]
Output: 2
Explanation: n = 2 Since there are 2 numbers, all numbers are in the range [0,2]. 2 is the missing number in the range because it doesn't appear in nums .


Example 3:
Input: nums = [9,6,4,2,3,5,7,0,1]
Output: 8
Explanation: n = 9 Since there are 9 numbers, all numbers are in the range [0,9]. 8 is the missing number in the range because it doesn't appear in nums .


Example 4:
input: nums = [0]
Output: 1
Explanation: n = 1 Since there is 1 number, all numbers are in the range [0,1]. 1 is the missing number in the range because it does not appear in nums.


constraint:
`n == nums. length`
`1 <= n <= 104`
`0 <= nums[i] <= n`
All numbers in `nums` are unique.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a new alien language that uses the English alphabet. However, you don't know the order between the letters.

You will get a list of strings ""words"" from the dictionary of the alien language, where the strings in ""words"" are sorted lexicographically according to the rules of this new language.

Returns a string of unique letters in the new alien language sorted in ascending lexicographical order according to the rules of the new language. If there is no solution, return `""""`. If there are multiple solutions, return any of them.

If the string ""s"" is lexicographically smaller than the string ""t"" at the first distinct letter, then the letter in ""s"" precedes the letter in ""t"" in the alien language. If the first min(s.length, t.length) letters are the same, then s is smaller if and only if s.length < t.length.


Example 1:
Input: words = [""wrt"",""wrf"",""er"",""ett"",""rftt""]
Output: ""wertf""

Example 2:
Input: words = [""z"",""x""]
Output: ""zx""

Example 3:
Input: words = [""z"",""x"",""z""]
Output: """"
Explanation: The order is invalid, so `""""` is returned.


constraint:
`1 <= words.length <= 100`
`1 <= words[i].length <= 100`
`words[i]` contains only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Given the 'root' and 'target' values ​​of a binary search tree, returns the value in the BST closest to 'target'.


Example 1:
Input: root = [4,2,5,1,3], target = 3.714286
Output: 4

Example 2:
Input: root = [1], target = 4.428571
Output: 1

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`0 <= Node.val <= 109`
`-109 <= target <= 109`",0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an algorithm to encode a list of strings into a string. The encoded strings are then sent over the network and decoded back to the original list of strings.

Machine 1 (sender) has the following functions:
string encoding(vector<string> strs) {
  // ... your code
  return the encoded string;
}
Machine 2 (receiver) has the following functions:
vector<string> decode(string s) {
  //...your code
  return String;
}
So machine 1 will:
String encoded_string = encode(strs);
Machine 2 does the following:
vector<string> strs2 = decode(encoded_string);
strs2 on machine 2 should be the same as strs on machine 1.

Implement `encode` and `decode` methods.


Example 1:
Input: dummy_input = [""Hello"",""World""]
Output: [""hello"", ""world""]
explain:
Machine 1:
codec encoder = new codec();
String msg = encoder. encode(strs);
machine 1 --- message ---> machine 2
Machine 2:
codec decoder = new codec();
String[] strs = decoder. decode(msg);

Example 2:
input: dummy_input = [""""]
Output: [""""]

constraint:
`1 <= strs.length <= 200`
`0 <= strs[i].length <= 200`
`strs[i]` contains any possible character from the `256` valid ASCII characters.

follow up:
Can you write a general algorithm to handle any possible character?
Can you solve the problem without using any serialization method (such as `eval`)?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 'root' of a binary search tree, a 'target' value, and an integer 'k', returns the 'k' value in the BST closest to 'target'. You can return answers in any order.

You are guaranteed to have only a unique set of ""k"" values ​​closest to the ""target"" in the BST.


Example 1:
Input: root = [4,2,5,1,3], target = 3.714286, k = 2
Output: [4,3]

Example 2:
Input: root = [1], target = 0.000000, k = 1
output: [1]

constraint:
The number of nodes in the tree is ""n"".

`1 <= k <= n <= 104`.

`0 <= Node.val <= 109`
`-109 <= target <= 109`
Follow-up: Assume BST is balanced. Can you solve it in less than `O(n)` runtime (where `n = total number of nodes`)?",0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Convert a non-negative integer `num` to its English word representation.


Example 1:
Input: num = 123
Output: ""one hundred and twenty three""

Example 2:
Input: num = 12345
Output: ""12345""

Example 3:
Input: num = 1234567
Output: ""One million two hundred thirty-four thousand five hundred and sixty-seven""

Example 4:
Input: num = 1234567891
Output: ""Two billion three thousand four hundred and fifty-six seven thousand eight hundred and ninety-one""

constraint:
`0 <= num <= 231 - 1`",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `citations`, where `citations[i]` is the number of citations a researcher has received in his `ith` paper, returns the computed researcher's `h` index.

According to the definition of h-index on Wikipedia: If `h` among `n` papers of a scientist has at least `h` citations each, and other `n − h` papers have no more citations, then The scientist's index for `h` is greater than the `h` references for each.

If h has more than one possible value, take the largest value as h index.


Example 1:
Input: reference = [3,0,6,1,5]
Output: 3
Explanation: [3,0,6,1,5] means that the researcher has a total of 5 papers, and each paper has been cited 3, 0, 6, 1, 5 times respectively.

Since the researcher has 3 papers with at least 3 citations each and the remaining 2 papers with no more than 3 citations each, they have an h-index of 3.


Example 2:
Input: reference = [1,3,1]
Output: 1

constraint:
`n == citations. length`
`1 <= n <= 5000`
`0 <= references[i] <= 1000`",0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `citations`, where `citations[i]` is the number of citations a researcher has received in his `ith` paper, and `citations` is sorted in ascending order, returns the computed researcher's `h` index.

According to the definition of h-index on Wikipedia: If `h` among `n` papers of a scientist has at least `h` citations each, and other `n − h` papers have no more citations, then The scientist's index for `h` is greater than the `h` references for each.

If h has more than one possible value, take the largest value as h index.


Example 1:
Input: reference = [0,1,3,5,6]
Output: 3
Explanation: [0,1,3,5,6] means that the researcher has a total of 5 papers, and each paper has been cited 0, 1, 3, 5, 6 times respectively.

Since the researcher has 3 papers with at least 3 citations each and the remaining 2 papers with no more than 3 citations each, they have an h-index of 3.


Example 2:
Input: References = [1,2,100]
Output: 2

constraint:
`n == citations. length`
`1 <= n <= 105`
`0 <= references[i] <= 1000`
`citations` are sorted in ascending order.

Follow up: Can you solve it in logarithmic time complexity?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are drawing a fence of `n` posts in `k` different colors. You must draw posts according to the following rules:
Each post must be colored in exactly one color.

At most one pair of adjacent fence posts can have the same color.

Given two integers ""n"" and ""k"", return the number of ways to draw the fence.


Example 1:
Input: n = 3, k = 2
Output: 6
Explanation: Shows all possibilities.

Note that it is not valid to color all posts red or all posts green because at most there can be at most one pair of adjacent posts that are the same color.


Example 2:
Input: n = 1, k = 1
Output: 1

Example 3:
Input: n = 7, k = 2
Output: 42

constraint:
`1 <= n <= 50`
`1 <= k <= 105`
For a given ""n"" and ""k"", the answer is guaranteed to be in the range ""[0, 231 - 1]"".",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose you are at a party and there are n people (labeled from 0 to n - 1), one of whom may be a famous person. The definition of celebrity is that all other `n-1` people know him/her, but he/she doesn't know anyone.

Now you want to find out who the famous people are, or confirm that there are no famous people. The only thing you can do is ask a question like: ""Hi, A. Do you know B?"" to get information about whether A knows B. You need to find out who's famous (or verify that there isn't one) by asking as few questions as possible (in an asymptotic sense).

You'll get a helper function ""bool knows(a, b)"" that tells you whether A knows B. Implement a function ""int findCelebrity(n)"". There will be only one celebrity if he/she is in the party. If there is a celebrity in the party, return the celebrity's tag. If there are no celebrities, return `-1`.


Example 1:
Input: graph = [[1,1,0],[0,1,0],[1,1,1]]
Output: 1
Explanation: There are three people labeled 0, 1 and 2. graph[i][j] = 1 means person i knows person j, otherwise graph[i][j] = 0 means person i does not know person j. A celebrity is someone labeled 1 because both 0 and 2 know him, but 1 doesn't know anyone.


Example 2:
Input: graph = [[1,0,1],[1,1,0],[0,1,1]]
Output: -1
Explanation: No celebrities.


constraint:
`n == graph. length`
`n == graph[i].length`
`2 <= n <= 100`
`graph[i][j]` is either `0` or `1`.

`graph[i][i] == 1`
Follow-up: If the maximum allowable number of calls to the calling interface `knows` is `3 * n`, can you find a solution that does not exceed the maximum number of calls?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a product manager and you are currently leading a team developing a new product. Unfortunately, the latest version of your product failed QA. Since each version builds on the previous one, all versions after a bad version are also broken.

Suppose you have `n` versions of `[1, 2, ..., n]` and you want to find the first one that is broken, which causes all subsequent ones to be broken.

You will get an API `bool isBadVersion(version)` which returns whether `version` is bad. Implement a function to find the first wrong version. You should minimize the number of calls to the API.


Example 1:
Input: n = 5, bad = 4
Output: 4
explain:
call isBadVersion(3) -> false
Call isBadVersion(5) -> true
Call isBadVersion(4) -> true
Then 4 is the first bad version.


Example 2:
Input: n = 1, bad = 1
Output: 1

constraint:
`1 <= bad <= n <= 231 - 1`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return the least number of perfect squares that sum to ""n"".

A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer by itself. For example, ""1"", ""4"", ""9"", and ""16"" are perfect squares, but ""3"" and ""11"" are not.


Example 1:
Input: n = 12
Output: 3
Explanation: 12 = 4 + 4 + 4.


Example 2:
Input: n = 13
Output: 2
Explanation: 13 = 4 + 9.


constraint:
`1 <= n <= 104`",0,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, reorder it such that `nums[0] <= nums[1] >= nums[2] <= nums[3]...`.

You can assume that the input array always has a valid answer.


Example 1:
Input: nums = [3,5,2,1,6,4]
Output: [3,5,1,6,2,4]
Explanation: [1,6,2,5,3,4] is also accepted.


Example 2:
Input: nums = [6,6,5,6,3,8]
Output: [6,6,5,6,3,8]

constraint:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 104`
Guaranteed to have an answer for the given input ""nums"".

Follow up: Can you unsort the array?",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer vectors ""v1"" and ""v2"", implement an iterator to alternately return their elements.

Implement the `ZigzagIterator` class:
`ZigzagIterator(List<int> v1, List<int> v2)` initializes an object with two vectors `v1` and `v2`.

`boolean hasNext()` returns `true` if the iterator still has elements, otherwise `false`.

`int next()` returns the current element of the iterator and moves the iterator to the next element.


Example 1:
Input: v1 = [1,2], v2 = [3,4,5,6]
Output: [1,3,2,4,5,6]
Explanation: By repeatedly calling next until hasNext returns false, the order of elements returned by next should be: [1,3,2,4,5,6].


Example 2:
Input: v1 = [1], v2 = []
output: [1]

Example 3:
Input: v1 = [], v2 = [1]
output: [1]

constraint:
`0 <= v1.length, v2.length <= 1000`
`1 <= v1.length + v2.length <= 2000`
`-231 <= v1[i], v2[i] <= 231 - 1`
Follow up: What if you were given `k` vectors? How well does your code scale in this case?
Clarification for follow-up questions:
The ""Zigzag"" order is not well defined and is ambiguous for the case `k > 2`. If ""Zigzag"" is not suitable for you, please replace ""Zigzag"" with ""Cyclic"".


example:
Input: v1 = [1,2,3], v2 = [4,5,6,7], v3 = [8,9]
Output: [1,4,8,2,5,9,3,6,7]",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""num"" containing only numbers and an integer ""target"", return all possibilities of adding the binary operators ""+"", ""-"", or ""*"" between the digits of ""num"" so that the result The expression evaluates to the ""target"" value.


Example 1:
Input: num = ""123"", target = 6
Output: [""1*2*3"",""1+2+3""]

Example 2:
Input: num = ""232"", target = 8
Output: [""2*3+2"",""2+3*2""]

Example 3:
Input: num = ""105"", target = 5
Output: [""1*0+5"",""10-5""]

Example 4:
Input: num = ""00"", target = 0
Output: [""0*0"",""0+0"",""0-0""]

Example 5:
Input: num = ""3456237490"", target = 9191
output: []

constraint:
`1 <= num.length <= 10`
`num` contains only numbers.

`-231 <= target <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", move all ""0""s to the end of it while maintaining the relative order of the nonzero elements.

Note that you have to do this in-place without copying the array.


Example 1:
Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]

Example 2:
input: nums = [0]
output: [0]

constraint:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
Follow up: Can you minimize the total number of operations done?",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an iterator that supports `peek` operations on lists in addition to `hasNext` and `next` operations.

Implement the `PeekingIterator` class:
`PeekingIterator(int[] nums)` initializes an object with the given integer array `nums`.

`int next()` returns the next element in the array and moves the pointer to the next element.

`bool hasNext()` returns `true` if there are still elements in the array.

`int peek()` returns the next element in the array without moving the pointer.


Example 1:
enter
[""PeekingIterator"", ""next"", ""peek"", ""next"", ""next"", ""hasNext""]
[[[1, 2, 3]], [], [], [], [], []]
output
[empty, 1, 2, 2, 3, false]
explain
PeekingIterator peekingIterator = new PeekingIterator([1, 2, 3]); // [1,2,3]
peekingIterator.next(); // Return 1, the pointer moves to the next element [1,2,3].

peekingIterator.peek(); // Return 2, the pointer does not move [1,2,3].

peekingIterator.next(); // return 2, the pointer moves to the next element [1,2,3]
peekingIterator.next(); // return 3, the pointer moves to the next element [1,2,3]
peekingIterator.hasNext(); // returns false

constraint:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 1000`
All calls to `next` and `peek` are valid.

At most, `1000` calls to `next`, `hasNext` and `peek` will be made.

Follow up: How would you extend your design to be generic and work for all types, not just integers?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree and a node ""p"" within it, return the ordered successors of that node in the BST. Returns ""null"" if the given node has no sequential successor in the tree.

The successor of node ""p"" is the node with the smallest key greater than ""p.val"".


Example 1:
Input: root = [2,1,3], p = 1
Output: 2
Explanation: The inorder successor node of 1 is 2. Note that both p and the return value are of type TreeNode.


Example 2:
Input: root = [5,3,6,2,4,null,null,1], p = 6
output: empty
Explanation: The current node has no ordered successor nodes, so the answer is ""null"".


constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-105 <= Node.val <= 105`
All nodes will have unique values.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll end up with an ""m x n"" grid ""room"" initialized with these three possible values.

`-1` for walls or obstacles.

`0` is a gate.

`INF` infinite means an empty room. We use the value ""231 - 1 = 2147483647"" for ""INF"" because you might assume that the distance to the door is less than ""2147483647"".

Fill each empty room with the distance to the nearest door. If the gate cannot be reached, `INF` should be populated.


Example 1:
Input: Room = [[2147483647,-1,0,2147483647],[2147483647,2147483647,2147483647,-1],[2147483647,-1,2147483647,-1],[0,-1,2147483647,2147]486
Output: [[3,-1,0,1],[2,2,1,-1],[1,-1,2,-1],[0,-1,3,4]]

Example 2:
Input: room = [[-1]]
Output: [[-1]]

Example 3:
Input: room = [[2147483647]]
Output: [[2147483647]]

Example 4:
Input: room = [[0]]
output: [[0]]

constraint:
`m == rooms. length`
`n == rooms[i].length`
`1 <= meters, n <= 250`
`rooms[i][j]` is `-1`, `0`, or `231 - 1`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` containing `n + 1` integers, where each integer is in the range `[1, n]` (inclusive).

There is only one repeated number in `nums`, return this repeated number.


Example 1:
Input: nums = [1,3,4,2,2]
Output: 2

Example 2:
Input: nums = [3,1,3,4,2]
Output: 3

Example 3:
Input: nums = [1,1]
Output: 1

Example 4:
Input: nums = [1,1,2]
Output: 1

constraint:
`2 <= n <= 3 * 104`
`nums.length == n+1`
`1 <= nums[i] <= n`
All integers in `nums` appear exactly once, and only one integer appears two or more times.

follow up:
How to prove that there is at least one duplicate number in `nums`?
Can you solve the problem without modifying the array `nums`?
Can you solve this using only constant, `O(1)` extra space?
Can you solve the problem with runtime complexity less than `O(n2)`?",1,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The abbreviation of a word is the concatenation of its first letter, the number of characters between the first and last letter, and the last letter. If a word has only two characters, then it is an abbreviation of itself.

For example:
`dog --> d1g` because there is a letter between the first letter `'d'` and the last letter `'g'`.

`internationalization --> i18n` because there are 18 letters between the first letter i and the last letter n.

`it --> it` because any word with only two characters is an abbreviation of itself.

Implement the `ValidWordAbbr` class:
`ValidWordAbbr(String[] dictionary)` initializes an object with a `dictionary` of words.

`boolean isUnique(string word)` returns `true` if any of the following conditions are true (otherwise `false`):

There is no word in `dictionary` that has an abbreviation equal to the abbreviation of `word`.

For any word in `dictionary` whose abbreviation is equal to the abbreviation of `word`, the word is the same as `word`.


Example 1:
enter
[""ValidWordAbbr"", ""isUnique"", ""isUnique"", ""isUnique"", ""isUnique""]
[[[""deer"", ""door"", ""cake"", ""card""]], [""honey""], [""trolley""], [""cane""], [""make""]]
output
[empty, false, true, false, true]
explain
ValidWordAbbr validWordAbbr = new ValidWordAbbr([""deer"", ""door"", ""cake"", ""card""]);
validWordAbbr.isUnique(""Dear""); // returns false, the dictionary word ""deer"" has the same abbreviation as the word ""dear""
                                // ""d2r"" but not the same.

validWordAbbr.isUnique(""shopping cart""); // returns true, the abbreviation ""c2t"" does not exist in the dictionary.

validWordAbbr.isUnique(""cane""); // returns false, the dictionary word ""cake"" has the same abbreviation as the word ""cane""
                                // ""c2e"" but not the same.

validWordAbbr.isUnique(""make""); // returns true, there is no word abbreviation ""m2e"" in the dictionary.

validWordAbbr.isUnique(""cake""); // Returns true because ""cake"" is already in the dictionary and no other word in the dictionary has the abbreviation ""c2e"".


constraint:
`1 <= dictionary.length <= 3 * 104`
`1 <= dictionary[i].length <= 20`
`dictionary[i]` consists of lowercase English letters.

`1 <= word.length <= 20`
`word` consists of lowercase English letters.

Up to 5000 calls to isUnique will be made.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"According to the Wikipedia article: ""The Game of Life, also simply called Life, is a cellular automaton devised by British mathematician John Horton Conway in 1970.""
The board consists of ""m x n"" cells, where each cell has an initial state: alive (indicated by ""1"") or dead (indicated by ""0""). Each cell interacts with its eight neighbors (horizontal, vertical, diagonal) using the following four rules (taken from the aforementioned Wikipedia article):
Any live cell with fewer than two live neighbors dies as if caused by underpopulation.

Any living cell with two or three living neighbors will survive to the next generation.

Any living cell with more than three living neighbors dies, as in overpopulation.

Any dead cell that happens to have three live neighbors becomes a living cell, as if by reproduction.

The next state is created by simultaneously applying the above rules to every cell in the current state, where birth and death occur simultaneously. Given the current state of a `m x n` grid `board`, return the next state.


Example 1:
Input: board = [[0,1,0],[0,0,1],[1,1,1],[0,0,0]]
Output: [[0,0,0],[1,0,1],[0,1,1],[0,1,0]]

Example 2:
Input: chessboard = [[1,1],[1,0]]
Output: [[1,1],[1,1]]

constraint:
`m == board. length`
`n == board[i].length`
`1 <= meters, n <= 25`
`board[i][j]` is either `0` or `1`.

follow up:
Can you fix it on the spot? Remember that the board needs to be updated at the same time: you can't update some cells and then use their updated values ​​to update other cells.

In this problem, we represent the circuit board using a 2D array. In principle, the plate is infinite, which leads to problems when active regions encroach on the boundaries of the array (i.e. living cells reach the boundaries). How would you solve these problems?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""pattern"" and a string ""s"", find out whether ""s"" follows the same pattern.

Here follow means an exact match, such that there is a bijection between letters in `pattern` and non-empty words in `s`.


Example 1:
Input: pattern = ""abba"", s = ""dog cat cat dog""
output: true

Example 2:
Input: pattern = ""abba"", s = ""dog cat cat fish""
output: error

Example 3:
Input: pattern = ""aaaa"", s = ""dog cat cat dog""
output: error

Example 4:
Input: pattern = ""abba"", s = ""dog dog dog dog""
output: error

constraint:
`1 <= pattern.length <= 300`
`pattern` contains only lowercase English letters.

`1 <= s.length <= 3000`
`s` contains only lowercase English letters and spaces `' '`.

`s` does not contain any leading or trailing spaces.

All words in s are separated by a space.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""pattern"" and a string ""s"", return ""true"" if ""s"" matches ""pattern"".

The string ""s"" is matched against ""pattern"" if there exists some bijective mapping of single characters to strings such that if every character in ""pattern"" is replaced by the string it maps to, the resulting character The string is ""s"". A bijective mapping means that no two characters map to the same string, and no characters map to two different strings.


Example 1:
Input: pattern = ""abab"", s = ""redblueredblue""
output: true
Explanation: One possible mapping is as follows:
'a' -> ""red""
'b' -> ""blue""

Example 2:
Input: pattern = ""aaaa"", s = ""asdasdasdasd""
output: true
Explanation: One possible mapping is as follows:
'a' -> ""asd""

Example 3:
Input: pattern = ""abab"", s = ""asdasdasdasd""
output: true
Explanation: One possible mapping is as follows:
'A' -> ""A""
'b' -> ""sdasd""
Note that ""a"" and ""b"" cannot both be mapped to ""asd"" because the mapping is bijective.


Example 4:
Input: pattern = ""aabb"", s = ""xyzabcxzyabc""
output: error

constraint:
`1 <= pattern.length, s.length <= 20`
`pattern` and `s` consist of lowercase English letters only.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing the following Nim game with your friends:
Initially, there was a pile of stones on the table.

You and your friend take turns, you go first.

Each round, the person whose turn it is will remove 1 to 3 stones from the pile.

Whoever removes the last stone is the winner.

Given `n`, the number of stones in the pile, assuming you and your friends are the best players, return `true` if you can win the game, and `false` otherwise.


Example 1:
Input: n = 4
output: error
Explanation: These are the possible outcomes:
1. You remove 1 stone. Your friend removed 3 pieces, including the last one. Your friend has won.

2. You remove 2 gems. Your friend removed 2 pieces, including the last one. Your friend has won.

3. You remove 3 stones. Your friend removed the last stone. Your friend has won.

In all outcomes, your friend wins.


Example 2:
Input: n = 1
output: true

Example 3:
Input: n = 2
output: true

constraint:
`1 <= n <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing flip game with your friends.

You will get a string ""currentState"" containing only ""+"" and ""-"". You and your friend take turns flipping two consecutive ""++""s into ""--"". When one person can take no more moves, the game is over, so the other person will be the winner.

Returns all possible states of the string `currentState` after a valid move. You can return answers in any order. Returns an empty list `[]` if there are no valid moves.


Example 1:
Input: currentState = ""++++""
Output: [""--++"",""+--+"",""++--""]

Example 2:
Input: currentState = ""+""
output: []

constraint:
`1 <= currentState.length <= 500`
`currentState[i]` is `'+'` or `'-'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing flip game with your friends.

You will get a string ""currentState"" containing only ""+"" and ""-"". You and your friend take turns flipping two consecutive ""++""s into ""--"". When one person can take no more moves, the game is over, so the other person will be the winner.

Returns ""true"" if the starting player is guaranteed to win, otherwise returns ""false"".


Example 1:
Input: currentState = ""++++""
output: true
Explanation: The first player can flip the ""++"" in the middle to ""+--+"" to guarantee the victory.


Example 2:
Input: currentState = ""+""
output: error

constraint:
`1 <= currentState.length <= 60`
`currentState[i]` is `'+'` or `'-'`.

Follow up: Derive the runtime complexity of the algorithm.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The median is the middle value in an ordered list of integers. If the size of the list is even, there is no middle value and the median is the average of the two middle values.

For example, for arr = [2,3,4], the median is 3.

For example, for ""arr = [2,3]"", the median is ""(2 + 3) / 2 = 2.5"".

Implement the MedianFinder class:
`MedianFinder()` initializes a `MedianFinder` object.

`void addNum(int num)` adds the integer `num` from the stream to the data structure.

`double findMedian()` returns the median of all elements so far. Answers within 10-5 of the actual answer will be accepted.


Example 1:
enter
[""MedianFinder"", ""addNum"", ""addNum"", ""findMedian"", ""addNum"", ""findMedian""]
[[], [1], [2], [], [3], []]
output
[empty, empty, empty, 1.5, empty, 2.0]
explain
MedianFinder medianFinder = new MedianFinder();
medianFinder. addNum(1); // arr = [1]
medianFinder. addNum(2); // arr = [1, 2]
medianFinder.findMedian(); // returns 1.5 (ie (1 + 2) / 2)
medianFinder.addNum(3); // reaches [1, 2, 3]
medianFinder.findMedian(); // returns 2.0

constraint:
`-105 <= number <= 105`
There will be at least one element in the data structure before calling findMedian .

There will be at most 5 * 104 calls to addNum and findMedian.

follow up:
How would you optimize your solution if all integers in the stream were in the range ""[0, 100]""?
How would you optimize your solution if ""99%"" of all integers in the stream were in the range ""[0, 100]""?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m x n` binary grid `grid` where each `1` represents a friend's home, return the minimum total trip distance.

The total travel distance is the sum of the distances from the friends' homes to the meeting point.

Calculate distance using Manhattan distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.


Example 1:
Input: Grid = [[1,0,0,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 6
Explanation: Given three friends who live in (0,0), (0,4) and (2,2).

The point (0,2) is an ideal junction because the total travel distance of 2 + 2 + 2 = 6 is minimal.

So return 6.


Example 2:
Input: Grid = [[1,1]]
Output: 1

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 200`
`grid[i][j]` is either `0` or `1`.

There must be at least two friends in the `grid`.",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted over a network connection link, for later reconstruction in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There are no restrictions on how the serialization/deserialization algorithm works. You just need to make sure that a binary tree can be serialized to a string which can be deserialized to the original tree structure.

Clarification: The input/output format is the same as how LeetCode serializes a binary tree. You don't necessarily need to follow this format, so get creative and come up with different approaches yourself.


Example 1:
Input: root = [1,2,3,null,null,4,5]
Output: [1,2,3,null,null,4,5]

Example 2:
input: root = []
output: []

Example 3:
input: root = [1]
output: [1]

Example 4:
Input: root = [1,2]
output: [1,2]

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the length of the longest contiguous sequence path.

A path is any sequence of nodes from some starting node to any node in the tree along a parent-child connection. The longest continuous path needs to be from parent to child (not the other way around).


Example 1:
Input: root = [1,null,3,2,4,null,null,null,5]
Output: 3
Explanation: The longest continuous sequence path is 3-4-5, so return 3.


Example 2:
Input: root = [2,null,3,2,null,1]
Output: 2
Explanation: The longest continuous sequence path is 2-3, not 3-2-1, so return 2.


constraint:
The number of nodes in the tree is in the range ""[1, 3 * 104]"".

`-3 * 104 <= Node.val <= 3 * 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a game of Bulls and Cows with your friends.

You write down a secret number and ask your friends to guess what it is. When your friend makes a guess, you'll be prompted with the following information:
The number of ""cows"", i.e. the number in the correct position in the guess.

The number of ""cows"", the number that was guessed, but located in your secret number, but in the wrong place. Specifically, non-bull numbers in guesses can be rearranged to make them bulls.

Given the secret number ""secret"" and your friend's guess ""guess"", return the hint for your friend's guess.

The prompt should be in the format ""xAyB"", where ""x"" is the number of bulls and ""y"" is the number of cows. Note that both `secret` and `guess` may contain duplicate numbers.


Example 1:
Input: secret = ""1807"", guess = ""7810""
Output: ""1A3B""
Explanation: longs are connected with ""|"" and cows are underlined:
""1807""
  |
""7810""

Example 2:
Input: secret = ""1123"", guess = ""0111""
Output: ""1A1B""
Explanation: longs are connected with ""|"" and cows are underlined:
""1123"" ""1123""
  |or |
""0111"" ""0111""
Note that only one of two non-matching 1s is counted as a cow, since the non-cow numbers can only be rearranged to allow a 1 to be a cow.


Example 3:
Input: secret = ""1"", guess = ""0""
Output: ""0A0B""

Example 4:
Input: secret = ""1"", guess = ""1""
Output: ""1A0B""

constraint:
`1 <= secret.length, guess.length <= 1000`
`secret.length == guess.length`
`secret` and `guess` only contain numbers.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, return the length of the longest strictly increasing subsequence.

A subsequence is a sequence that can be derived from an array by removing some or none of its elements without changing the order of the remaining elements. For example, ""[3,6,2,7]"" is a subsequence of the array ""[0,3,1,6,2,2,7]"".


Example 1:
Input: nums = [10,9,2,5,3,7,101,18]
Output: 4
Explanation: The longest increasing subsequence is [2,3,7,101], so the length is 4.


Example 2:
Input: nums = [0,1,0,3,2,3]
Output: 4

Example 3:
Input: nums = [7,7,7,7,7,7,7]
Output: 1

constraint:
`1 <= nums.length <= 2500`
`-104 <= nums[i] <= 104`
follow up:
Can you come up with `O(n2)` solution?
Can you improve it to `O(n log(n))` time complexity?",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s containing parentheses and letters, remove the minimum number of invalid parentheses to make the input string valid.

Return all possible results. You can return answers in any order.


Example 1:
Input: s = ""()())()""
Output: [""()()()"",""()()()""]

Example 2:
Input: s = ""(a)())()""
Output: [""(a())()"", ""(a)()()""]

Example 3:
Input: s = "")(""
Output: [""""]

constraint:
`1 <= s.length <= 25`
`s` consists of lowercase English letters and parentheses `'('` and `')'.

There are at most 20 parentheses in s.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get an ""image"" represented by a binary matrix, where ""0""s are white pixels and ""1""s are black pixels.

Black pixels are connected (i.e. there is only one black area). Pixels are connected horizontally and vertically.

Given two integers 'x' and 'y' representing the location of one of the black pixels, return the area of ​​the smallest (axis-aligned) rectangle that contains all black pixels.


Example 1:
Input: image = [[""0"",""0"",""1"",""0""],[""0"",""1"",""1"",""0""],[""0"",""1"", ""0"",""0""]], x = 0, y = 2
Output: 6

Example 2:
Input: image = [[""1""]], x = 0, y = 0
Output: 1

constraint:
`m == image.length`
`n == image[i].length`
`1 <= meters, n <= 100`
`image[i][j]` is either `'0'` or `'1'`.

`1 <= x < m`
`1 <= y < n`
`image[x][y] == '1'.`
The black pixels in `image` constitute only one component.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", find the sum of elements between indices ""left"" and ""right"", where ""(left <= right)"".

Implement the ""NumArray"" class:
`NumArray(int[] nums)` initializes an object with the integer array `nums`.

`int sumRange(int left, int right)` returns the sum of the elements of the `nums` array in the range `[left, right]` (i.e. `sum(nums[left], nums[left + 1 ], ..., nums[right])`).


Example 1:
enter
[""NumArray"", ""sumRange"", ""sumRange"", ""sumRange""]
[[[-2, 0, 3, -5, 2, -1]], [0, 2], [2, 5], [0, 5]]
output
[empty, 1, -1, -3]
explain
NumArray numArray = new NumArray([-2, 0, 3, -5, 2, -1]);
numArray.sumRange(0, 2); // returns 1 ((-2) + 0 + 3)
numArray.sumRange(2, 5); // returns -1 (3 + (-5) + 2 + (-1))
numArray.sumRange(0, 5); // returns -3 ((-2) + 0 + 3 + (-5) + 2 + (-1))

constraint:
`1 <= nums.length <= 104`
`-105 <= nums[i] <= 105`
`0 <= left <= right < nums.length`
Up to 104 calls to sumRange will be made.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D matrix ""matrix"", find the sum of the elements within the rectangle defined by its upper left corner ""(row1, col1)"" and its lower right corner ""(row2, col2)"".

Implement the NumMatrix class:
`NumMatrix(int[][] matrix)` initializes an object with a matrix of integers `matrix`.

`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array (row 2, col 2)`.


Example 1:
enter
[""NumMatrix"", ""sumRegion"", ""sumRegion"", ""sumRegion""]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7] , [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [1, 1, 2, 2], [1, 2, 2, 4]]
output
[empty, 8, 11, 12]
explain
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // returns 8 (the sum of the red rectangles).

numMatrix.sumRegion(1, 1, 2, 2); // returns 11 (the sum of the green rectangles).

numMatrix.sumRegion(1, 2, 2, 4); // returns 12 (the sum of the blue rectangle).


constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 200`
`-105 <= matrix[i][j] <= 105`
`0 <= row1 <= row2 < m`
`0 <= col1 <= col2 < n`
Up to 104 calls to sumRegion will be made.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get an empty 2D binary grid ""grid"" of size ""m x n"". The grid represents a map where ""0"" represents water and ""1"" represents land. Initially, all cells of the ""grid"" are water cells (ie, all cells are ""0"").

We can perform the Add Land operation to turn the water in a location into land. Given an array ""positions"" where ""positions[i] = [ri, ci]"" is the position ""(ri, ci)"" where we should do the ""ith"" operation.

Returns an integer array `answer`, where `answer[i]` is the number of islands after turning cell `(ri, ci)` into land.

Islands are surrounded by water on all sides and formed by connecting adjacent lands either horizontally or vertically. You can assume that all four edges of the mesh are surrounded by water.


Example 1:
Input: m = 3, n = 3, positions = [[0,0],[0,1],[1,2],[2,1]]
Output: [1,1,2,3]
explain:
Initially, the 2D grid is filled with water.

- Operation #1: addLand(0, 0) turns the water at grid[0][0] into land. We have 1 island.

- Operation #2: addLand(0, 1) turns the water at grid[0][1] into land. We also have 1 island.

- Operation #3: addLand(1, 2) turns the water at grid[1][2] into land. We have 2 islands.

- Operation #4: addLand(2, 1) turns the water at grid[2][1] into land. We have 3 islands.


Example 2:
Input: m = 1, n = 1, positions = [[0,0]]
output: [1]

constraint:
`1 <= m, n, positions.length <= 104`
`1 <= m * n <= 104`
`positions[i].length == 2`
`0 <= ri < m`
`0 <= ci < n`
Follow up: Can you solve it in `O(k log(mn))` time complexity, where `k == positions.length`?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The addend is a string whose digits can form the addend sequence.

A valid addition sequence should contain at least three numbers. In addition to the first two numbers, each subsequent number in the sequence must be the sum of the previous two numbers.

Given a string containing only the digits ""0""-""9"", write a function to determine if it is an additive number.

Note: Numbers in an additive sequence cannot have leading zeros, so the sequences 1, 2, 03 or 1, 02, 3 are invalid.


Example 1:
Enter: ""112358""
output: true
Explanation: These numbers can form an additive sequence: 1, 1, 2, 3, 5, 8.
             1 + 1 = 2, 1 + 2 = 3, 2 + 3 = 5, 3 + 5 = 8

Example 2:
Input: ""199100199""
output: true
Explanation: The addition sequence is: 1, 99, 100, 199.
             1 + 99 = 100, 99 + 100 = 199

constraint:
`num` contains only numbers `'0'-'9'`.

`1 <= num.length <= 35`
follow up:
How would you handle overflow for very large input integers?",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array nums and two types of queries where you should update the values ​​indexed in the array and retrieve the sum of a range in the array.

Implement the ""NumArray"" class:
`NumArray(int[] nums)` initializes an object with the integer array `nums`.

`void update(int index, int val)` updates the value of `nums[index]` to `val`.

`int sumRange(int left, int right)` returns the sum of the subarrays `nums[left, right]` (i.e. `nums[left] + nums[left + 1], ..., nums[right]`).


Example 1:
enter
[""NumArray"", ""sumRange"", ""update"", ""sumRange""]
[[[1, 3, 5]], [0, 2], [1, 2], [0, 2]]
output
[empty,9,empty,8]
explain
NumArray numArray = new NumArray([1, 3, 5]);
numArray. sumRange(0, 2); // returns 9 = sum([1,3,5])
numArray.update(1, 2); // number = [1,2,5]
numArray. sumRange(0, 2); // returns 8 = sum([1,2,5])

constraint:
`1 <= nums.length <= 3 * 104`
`-100 <= nums[i] <= 100`
`0 <= index < nums.length`
`-100 <= value <= 100`
`0 <= left <= right < nums.length`
There will be at most 3 * 104 calls to update and sumRange.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D matrix ""matrix"", find the sum of the elements within the rectangle defined by its upper left corner ""(row1, col1)"" and its lower right corner ""(row2, col2)"".

Implement the NumMatrix class:
`NumMatrix(int[][] matrix)` initializes an object with a matrix of integers `matrix`.

`void update(int row, int col, int val)` updates the value of `matrix[row][col]` to `val`.

`int sumRegion(int row1, int col1, int row2, int col2)` returns the sum of the elements of the `matrix` array (row 2, col 2)`.


Example 1:
enter
[""NumMatrix"", ""sumRegion"", ""update"", ""sumRegion""]
[[[[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7] , [1, 0, 3, 0, 5]]], [2, 1, 4, 3], [3, 2, 2], [2, 1, 4, 3]]
output
[empty, 8, empty, 10]
explain
NumMatrix numMatrix = new NumMatrix([[3, 0, 1, 4, 2], [5, 6, 3, 2, 1], [1, 2, 0, 1, 5], [4, 1, 0, 1, 7], [1, 0, 3, 0, 5]]);
numMatrix.sumRegion(2, 1, 4, 3); // returns 8
numMatrix. update(3, 2, 2);
numMatrix.sumRegion(2, 1, 4, 3); // returns 10

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 200`
`-105 <= matrix[i][j] <= 105`
`0 <= rows < m`
`0 <= col < n`
`-105 <= value <= 105`
`0 <= row1 <= row2 < m`
`0 <= col1 <= col2 < n`
Up to 104 calls to sumRegion and update will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `prices`, where `prices[i]` is the price of a given stock on day `ith`.

Find the maximum profit you can make. You may complete as many transactions (i.e. buying and selling one share of stock as many times) as you wish, subject to the following restrictions:
After selling the stock, you cannot buy the stock the next day (that is, cool down for one day).

Note: You cannot have multiple trades in place at the same time (i.e. you must sell the stock before you can buy it again).


Example 1:
Input: Price = [1,2,3,0,2]
Output: 3
Explanation: Transaction = [buy, sell, cooldown, buy, sell]

Example 2:
Input: Price = [1]
output: 0

constraint:
`1 <= prices.length <= 5000`
`0 <= price[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A tree is an undirected graph in which any two vertices are connected by only one path. In other words, any connected graph without simple cycles is a tree.

Given an ""n"" node tree from ""0"" to ""n - 1"", and an array containing ""n - 1"" ""edges"", where ""edges[i] = [ai, bi]"" means There is an undirected edge between two nodes ""ai"" and ""bi"" in a tree, and any node in the tree can be selected as the root node. When you choose node ""x"" as the root node, the resulting tree has height ""h"". Among all possible rooted trees, the one with the smallest height (i.e. `min(h)`) is called a minimum height tree (MHT).

Returns a list of all MHT root tags. You can return answers in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and the leaves.


Example 1:
Input: n = 4, sides = [[1,0],[1,2],[1,3]]
output: [1]
Explanation: As shown in the figure, the height of the tree is 1 when the root is the only MHT whose node is labeled 1.


Example 2:
Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
Output: [3,4]

Example 3:
Input: n = 1, sides = []
output: [0]

Example 4:
Input: n = 2, sides = [[0,1]]
output: [0,1]

constraint:
`1 <= n <= 2 * 104`
`edges. length == n - 1`
`0 <= ai, bi < n`
`ai != bi`
All pairs `(ai, bi)` are distinct.

The given input is guaranteed to be a tree and will not have duplicate edges.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sparse matrices ""mat1"" of size ""m x k"" and ""mat2"" of size ""k x n"", return the result of ""mat1 x mat2"". You might assume that multiplication is always possible.


Example 1:
Input: mat1 = [[1,0,0],[-1,0,3]], mat2 = [[7,0,0],[0,0,0],[0,0,1]]
Output: [[7,0,0],[-7,0,3]]

Example 2:
Input: mat1 = [[0]], mat2 = [[0]]
output: [[0]]

constraint:
`m == mat1. length`
`k == mat1[i].length == mat2.length`
`n == mat2[i].length`
`1 <= m, n, k <= 100`
`-100 <= mat1[i][j], mat2[i][j] <= 100`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` balloons, indexed from `0` to `n - 1`. Each balloon has a number drawn on it, represented by the array ""nums"". You are asked to burst all the balloons.

If you pop the ith balloon, you will get nums[i - 1] * nums[i] * nums[i + 1]` coins. If `i - 1` or `i + 1` is outside the bounds of the array, treat it as a balloon with `1` drawn on it.

Return the maximum number of coins you can collect by popping the balloons wisely.


Example 1:
Input: nums = [3,1,5,8]
Output: 167
explain:
nums = [3,1,5,8] --> [3,5,8] --> [3,8] --> [8] --> []
Coins = 3*1*5 + 3*5*8 + 1*3*8 + 1*8*1 = 167

Example 2:
Input: nums = [1,5]
Output: 10

constraint:
`n == nums. length`
`1 <= n <= 500`
`0 <= nums[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"" and an array of integers ""primes"", return the nth super ugly number.

A super ugly number is a positive number whose prime factors are in the array ""primes"".

The nth super-ugly number is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: n = 12, primes = [2,7,13,19]
Output: 32
Explanation: [1,2,4,7,8,13,14,16,19,26,28,32] is the sequence of the first 12 super ugly numbers of the given primes == [2,7,13,19 ] .


Example 2:
Input: n = 1, primes = [2,3,5]
Output: 1
Explanation: For any given prime number, 1 is a super ugly number.


constraint:
`1 <= n <= 106`
`1 <= primes.length <= 100`
`2 <= prime[i] <= 1000`
`primes[i]` is guaranteed to be prime.

All values ​​of `primes` are unique and sorted in ascending order.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return a vertical order traversal of its node values. (ie, top to bottom, column by column).

If two nodes are in the same row and column, the order should be left to right.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]

Example 2:
Input: root = [3,9,8,4,0,1,7]
Output: [[4],[9],[3,0,1],[8],[7]]

Example 3:
Input: root = [3,9,8,4,0,1,7,null,null,null,2,5]
Output: [[4],[9,5],[3,0,1],[8,2],[7]]

Example 4:
input: root = []
output: []

constraint:
The number of nodes in the tree is in the range '[0, 100]'.

`-100 <= Node.val <= 100`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", you must return a new ""counts"" array. The `counts` array has the following properties, where `counts[i]` is the number of smaller elements to the right of `nums[i]`.


Example 1:
Input: nums = [5,2,6,1]
Output: [2,1,1,0]
explain:
There are 2 smaller elements (2 and 1) to the right of 5.

There is only 1 smaller element (1) to the right of 2.

There is 1 smaller element (1) to the right of 6.

There are 0 smaller elements to the right of 1.


Example 2:
Input: nums = [-1]
output: [0]

Example 3:
Input: nums = [-1,-1]
Output: [0,0]

constraint:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, remove duplicate letters such that each letter occurs once and only once. You have to make sure your result is the lexicographically smallest of all possible results.

Note: This question is the same as 1081: https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/

Example 1:
Input: s = ""bcabc""
Output: ""abc""

Example 2:
Input: s = ""cbacdcbc""
Output: ""acdb""

constraint:
`1 <= s.length <= 104`
`s` consists of lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" grid ""grid"" with values ​​""0"", ""1"" or ""2"", where:
Each ""0"" represents an open space that can be freely traversed,
Each ""1"" represents a building you cannot pass through, and
Each ""2"" represents an obstacle that you cannot pass.

You want to build a house on a vacant lot with the shortest total travel distance to all buildings. You can only move up, down, left, and right.

Returns the shortest driving distance for this type of house. Returns ""-1"" if such a house cannot be built according to the above rules.

The total travel distance is the sum of the distances from the friends' homes to the meeting point.

Calculate distance using Manhattan distance, where `distance(p1, p2) = |p2.x - p1.x| + |p2.y - p1.y|`.


Example 1:
Input: Grid = [[1,0,2,0,1],[0,0,0,0,0],[0,0,1,0,0]]
Output: 7
Explanation: There are three buildings at (0,0), (0,4), (2,2) and one obstacle at (0,2).

Point (1,2) is an ideal open space to build a house because 3+3+1=7 has the smallest total travel distance.

So return 7.


Example 2:
Input: Grid = [[1,0]]
Output: 1

Example 3:
Input: Grid = [[1]]
Output: -1

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 100`
`grid[i][j]` is `0`, `1` or `2`.

There will be at least one building in the `grid`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array words, return the maximum value of length(word[i]) * length(word[j]) where no two words share the same letter. Returns ""0"" if neither word exists.


Example 1:
Input: words = [""abcw"",""baz"",""foo"",""bar"",""xtfn"",""abcdef""]
output: 16
Explanation: These two words can be ""abcw"", ""xtfn"".


Example 2:
Input: words = [""a"",""ab"",""abc"",""d"",""cd"",""bcd"",""abcd""]
Output: 4
Explanation: These two words can be ""ab"", ""cd"".


Example 3:
Input: words = [""a"",""aa"",""aaa"",""aaaa""]
output: 0
Explanation: There is no such word pair.


constraint:
`2 <= words.length <= 1000`
`1 <= word[i].length <= 1000`
`words[i]` contains only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Initially there are n bulbs that are off. You first turn on all the bulbs, and then turn off every other bulb.

On the third round, you switch every third bulb (on if off, off if on). For the ith round, you switch each `i` bulb. For round n, you switch only the last bulb.

Returns the number of bulbs that were lit after `n` rounds.


Example 1:
Input: n = 3
Output: 1
Explanation: At first, the three light bulbs were [OFF, OFF, OFF].

After the first round, three light bulbs [on, on, on].

After the second round, three light bulbs [on, off, on].

After the third round, three light bulbs [on, off, off].
So you should return 1 because only one bulb is on.


Example 2:
Input: n = 0
output: 0

Example 3:
Input: n = 1
Output: 1

constraint:
`0 <= n <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Generalized abbreviations of words can be constructed by taking any number of non-overlapping substrings and replacing them by their respective lengths. For example, `""abcde""` can be abbreviated to `""a3e""` (`""bcd""` can be abbreviated to `""3""`), `""1bcd1""` (`""a""` and `""e""` become ""1"") and ""23"" (""ab"" becomes ""2"", ""cde"" becomes ""3"").

Given a string ""word"", return a list of all possible common abbreviations for ""word"". Return answers in any order.


Example 1:
input: word = ""word""
Output: [""4"",""3d"",""2r1"",""2rd"",""1o2"",""1o1d"",""1or1"",""1ord"",""w3"",""w2d"",""w1r1"",""w1rd"" ""wo2"", ""wo1d"", ""wor1"", ""word""]

Example 2:
Input: word = ""a""
Output: [""1"",""a""]

constraint:
`1 <= word.length <= 15`
`word` consists of lowercase English letters only.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays ""nums1"" and ""nums2"" of length ""m"" and ""n"" respectively. `nums1` and `nums2` represent two-digit numbers. You also get an integer ""k"".

Create a maximum length `k <= m + n` from a number of two digits. The relative order of numbers in the same array must be preserved.

Returns an array of ""k"" numbers representing the answer.


Example 1:
Input: nums1 = [3,4,6,5], nums2 = [9,1,2,5,8,3], k = 5
Output: [9,8,6,5,3]

Example 2:
Input: nums1 = [6,7], nums2 = [6,0,4], k = 5
Output: [6,7,6,0,4]

Example 3:
Input: nums1 = [3,9], nums2 = [8,9], k = 3
Output: [9,8,9]

constraint:
`m == nums1. length`
`n == nums2. length`
`1 <= meters, n <= 500`
`0 <= nums1[i], nums2[i] <= 9`
`1 <= k <= m + n`
Follow up: try to optimize your time and space complexity.",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array ""coins"" representing coins of different denominations and an integer ""amount"" representing the total amount.

Returns the minimum number of coins required to make up the amount. Returns ""-1"" if no combination of coins makes up the amount.

You can assume that you have an infinite number of each coin.


Example 1:
Input: coins = [1,2,5], amount = 11
Output: 3
Explanation: 11 = 5 + 5 + 1

Example 2:
Input: coin = [2], amount = 3
Output: -1

Example 3:
Input: coin = [1], amount = 0
output: 0

Example 4:
Input: coin = [1], amount = 1
Output: 1

Example 5:
Input: coin = [1], amount = 2
Output: 2

constraint:
`1 <= coins.length <= 12`
`1 <= coins[i] <= 231 - 1`
`0 <= count <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a graph with ""n"" nodes. Given an integer `n` and an array `edges`, where `edges[i] = [ai, bi]` means that there is an edge between `ai` and `bi` in the graph.

Returns the number of connected components in the graph.


Example 1:
Input: n = 5, sides = [[0,1],[1,2],[3,4]]
Output: 2

Example 2:
Input: n = 5, edges = [[0,1],[1,2],[2,3],[3,4]]
Output: 1

constraint:
`1 <= n <= 2000`
`1 <= edges.length <= 5000`
`edge[i].length == 2`
`0 <= ai <= bi < n`
`ai != bi`
There are no duplicate edges.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, reorder it such that `nums[0] < nums[1] > nums[2] < nums[3]...`.

You can assume that the input array always has a valid answer.


Example 1:
Input: nums = [1,5,1,1,6,4]
Output: [1,6,1,5,1,4]
Explanation: [1,4,1,5,1,6] is also accepted.


Example 2:
Input: nums = [1,3,2,2,3,1]
Output: [2,3,1,3,1,2]

constraint:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 5000`
Guaranteed to have an answer for the given input ""nums"".

Follow up: Can you do it in-place in `O(n)` time and/or use `O(1)` extra space?",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"", return the maximum length of the subarray whose sum is ""k"". If not, return ""0"".


Example 1:
Input: nums = [1,-1,5,-2,3], k = 3
Output: 4
Explanation: The subarray [1, -1, 5, -2] sums to 3 and is the longest.


Example 2:
Input: nums = [-2,-1,2,1], k = 1
Output: 2
Explanation: The subarray [-1, 2] sums to 1 and is the longest.


constraint:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`-105 <= k <= 105`
Follow Up: Can you do it in `O(n)` time?",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return ""true"" if it is a power of 3. Otherwise, return ""false"".

An integer `n` is a power of 3 if there exists an integer `x` such that `n == 3x`.


Example 1:
Input: n = 27
output: true

Example 2:
Input: n = 0
output: error

Example 3:
Input: n = 9
output: true

Example 4:
Input: n = 45
output: error

constraint:
`-231 <= n <= 231 - 1`
Follow up: Can you solve without loop/recursion?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and two integers ""lower"" and ""upper"", return the range and number that lie in the range ""[lower, upper]"" (inclusive).

The range sum `S(i, j)` is defined as the sum of elements in `nums` between indices `i` and `j`, where `i <= j`.


Example 1:
Input: nums = [-2,5,-1], lower = -2, upper = 2
Output: 3
Explanation: The three ranges are: [0,0], [2,2] and [0,2], and their respective sums are: -2, -1, 2.


Example 2:
Input: nums = [0], lower = 0, upper = 0
Output: 1

constraint:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
`-3 * 104 <= down <= up <= 3 * 104`
Follow up: The naive algorithm for `O(n2)` is simple, can you do better?",0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a singly linked list, group together all nodes with odd indices, followed by nodes with even indices, and return the reordered list.

The first node is considered odd, the second even, and so on.

Note that the relative order within even and odd groups should remain the same as in the input.


Example 1:
Input: head = [1,2,3,4,5]
Output: [1,3,5,2,4]

Example 2:
Input: head = [2,1,3,5,6,4,7]
Output: [2,3,6,7,1,5,4]

constraint:
The number of nodes in the linked list is in the range ""[0, 104]"".

`-106 <= Node.val <= 106`
Follow up: Can you solve it with `O(1)` space complexity and `O(nodes)` time complexity?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""m x n"" integer ""matrix"", return the length of the longest increasing path in ""matrix"".

From each cell, you can move in four directions: left, right, up or down. You may not move diagonally or outside the boundary (i.e. wrapping is not allowed).


Example 1:
Input: Matrix = [[9,9,4],[6,6,8],[2,1,1]]
Output: 4
Explanation: The longest incremental path is ""[1, 2, 6, 9]"".


Example 2:
Input: Matrix = [[3,4,5],[3,2,6],[2,2,1]]
Output: 4
Explanation: The longest incremental path is `[3, 4, 5, 6]`. Diagonal movement is not allowed.


Example 3:
Input: matrix = [[1]]
Output: 1

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 200`
`0 <= matrix[i][j] <= 231 - 1`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0
"Given a sorted integer array ""nums"" and an integer ""n"", add/patch elements to the array such that any number in the range ""[1, n]"" can be formed by the sum of some elements in the array.

Returns the minimum number of patches required.


Example 1:
Input: nums = [1,3], n = 6
Output: 1
explain:
The combinations of nums are [1], [3], [1,3], which form the possible sums: 1, 3, 4.

Now, if we add/patch 2 to nums, the combination is: [1], [2], [3], [1,3], [2,3], [1,2,3].

Possible sums are 1, 2, 3, 4, 5, 6, which now covers the range [1, 6].

So we only need 1 patch.


Example 2:
Input: nums = [1,5,10], n = 20
Output: 2
Explanation: The two patches can be [2, 4].


Example 3:
Input: nums = [1,2,2], n = 5
output: 0

constraint:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 104`
`nums` are sorted in ascending order.

`1 <= n <= 231 - 1`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"One way to serialize a binary tree is to use a preorder traversal. When we encounter a non-null node, we record the value of that node. If it's an empty node, we'll log it with a tag value (eg ""#"").

For example, the binary tree above can be serialized as a string `""9,3,4,#,#,1,#,#,2,#,6,#,#""`, where `'#' represents an empty node.

Given a string of comma-separated values ​​`preorder`, return `true` if it is a correct preorder traversal serialization of a binary tree.

Guaranteed that each comma-separated value in the string must be an integer or the character ""#"" representing a null pointer.

You can assume that the input format is always valid.

For example, it can never contain two consecutive commas, such as ""1,,3"".


Example 1:
Input: preorder = ""9,3,4,#,#,1,#,#,2,#,6,#,#""
output: true

Example 2:
Input: preorder = ""1,#""
output: error

Example 3:
Input: preorder = ""9,#,#,1""
output: error

constraint:
`1 <= preorder.length <= 104`
`preoder` consists of integers in the range `[0, 100]` and `'#', separated by commas `','`.

Follow up: Find an algorithm without rebuilding the tree.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a list of airline ""tickets"" where ""ticket[i] = [fromi, toi]"" represents a flight's departure and arrival airports. Reconstruct the itinerary in order and return it.

All tickets belong to one person traveling from ""JFK"", so the itinerary must begin with ""JFK"". If there are multiple valid runs, you should return the run that has the smallest lexical order when read as a single string.

For example, the route `[""JFK"", ""LGA""]` has a lower word order than `[""JFK"", ""LGB""]`.

You can assume that all tickets constitute at least one valid itinerary. You must use all tickets one and only once.


Example 1:
Input: Tickets = [[""MUC"",""LHR""],[""JFK"",""MUC""],[""SFO"",""SJC""],[""LHR"",""SFO""]]
Output: [""JFK"",""MUC"",""LHR"",""SFO"",""SJC""]

Example 2:
Input: Ticket = [[""JFK"",""SFO""],[""JFK"",""ATL""],[""SFO"",""ATL""],[""ATL"",""JFK""],[""ATL"", ""San Francisco International Airport""]]
Output: [""JFK"",""ATL"",""JFK"",""SFO"",""ATL"",""SFO""]
Explanation: Another possible refactoring is [""JFK"",""SFO"",""ATL"",""JFK"",""ATL"",""SFO""] but it is lexically larger.


constraint:
`1 <= tickets.length <= 300`
`tickets[i].length == 2`
`fromi.length == 3`
`toi.length == 3`
`fromi` and `toi` consist of uppercase English letters.

`fromi != toi`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the root of a binary tree, find the largest subtree, which is also a binary search tree (BST), where largest means the subtree has the most number of nodes.

A binary search tree (BST) is a tree in which all nodes obey the following properties:
The value of the left subtree is less than the value of its parent (root) node.

The value of the right subtree is greater than the value of its parent (root) node.

Note: A subtree must include all its descendants.

Follow up: Can you think of a way to solve it in O(n) time complexity?

Example 1:
Input: root = [10,5,15,1,8,null,7]
Output: 3
Explanation: The largest BST subtree in this case is the one highlighted. The return value is the size of the subtree, which is 3.


Example 2:
Input: root = [4,2,7,2,3,5,null,2,null,null,null,null,null,1]
Output: 2

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`-104 <= Node.val <= 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""distance"".

You start at point ""(0,0)"" on the X-Y plane, move ""distance[0]"" meters north, then ""distance[1]"" meters west, and ""distance[2]"" meters west South, `distance[3]` meters east, and so on. In other words, after each move, your orientation changes counterclockwise.

Returns ""true"" if your path intersects itself, otherwise returns ""false"".


Example 1:
Input: Distance = [2,1,1,2]
output: true

Example 2:
Input: Distance = [1,2,3,4]
output: error

Example 3:
Input: Distance = [1,1,1,1]
output: true

constraint:
`1 <= distance.length <= 500`
`1 <= distance[i] <= 500`
Follow up: Can you write a one-shot algorithm with ""O(1)"" extra space?",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of unique words, return all pairs of distinct indices ""(i, j)"" in the given list such that the concatenation of two words ""words[i] + words[j]"" is a palindrome.


Example 1:
Input: words = [""abcd"",""dcba"",""lls"",""s"",""sssll""]
Output: [[0,1],[1,0],[3,2],[2,4]]
Explanation: The palindrome is [""dcbaabcd"",""abcddcba"",""slls"",""llssssll""]

Example 2:
Input: words = [""bat"",""tab"",""cat""]
Output: [[0,1],[1,0]]
Explanation: The palindrome is [""battab"",""tabbat""]

Example 3:
Input: words = [""a"",""""]
Output: [[0,1],[1,0]]

constraint:
`1 <= words.length <= 5000`
`0 <= word[i].length <= 300`
`words[i]` consists of lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The thief has found a new place for his theft. There is only one entry to this area, called ""root"".

Except for the ""root"", each house has one and only one parent house. After some sightseeing, the clever thief found that all the houses in this place formed a binary tree. It automatically contacts the police if two directly connected houses are broken into on the same night.

Given the ""root"" of a binary tree, return the maximum amount a thief can rob without calling the police.


Example 1:
Input: root = [3,2,3,null,3,null,1]
Output: 7
Explanation: The maximum amount of money a thief can steal = 3 + 3 + 1 = 7.


Example 2:
Input: root = [3,4,5,1,3,null,1]
Output: 9
Explanation: The maximum amount of money a thief can steal = 4 + 5 = 9.


constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`0 <= Node.val <= 104`",0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""num"", return an array containing the number of ""1""s in the binary representation of each number in the range ""[0, num]"".


Example 1:
Input: num = 2
Output: [0,1,1]
explain:
0 --> 0
1 --> 1
2 --> 10

Example 2:
Input: num = 5
Output: [0,1,1,2,1,2]
explain:
0 --> 0
1 --> 1
2 --> 10
3 --> 11
4 --> 100
5 --> 101

constraint:
`0 <= num <= 105`
follow up:
It's easy to come up with solutions that run in ""O(32n)"" time. Can you do it in linear time `O(n)` and possibly in one pass?
Can you solve it with `O(n)` space complexity?
Can you do it without using any builtin functions (i.e. __builtin_popcount in C++)?",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get a nested list of integers ""nestedList"". Each element is either an integer or a list whose elements can also be integers or other lists.

The depth of an integer is the number of lists it is in. For example, the nested list ""[1,[2,2],[[3],2],1]"" has the value of each integer set to its depth.

Returns the sum of each integer in ""nestedList"" multiplied by its depth.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: 10
Explanation: There are four 1s at depth 2, and one 2 at depth 1. 1*2 + 1*2 + 2*1 + 1*2 + 1*2 = 10.


Example 2:
Input: nestedList = [1,[4,[6]]]
Output: 27
Explanation: There is a 1 at depth 1, a 4 at depth 2, and a 6 at depth 3. 1*1 + 4*2 + 6*3 = 27.


Example 3:
Input: nestedList = [0]
output: 0

constraint:
`1 <= nestedList.length <= 50`
The values ​​of the integers in the nested list are in the range ""[-100, 100]"".

Any integer with a maximum depth less than or equal to ""50"".",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" and an integer ""k"", return the length of the longest substring of ""s"" containing at most ""k"" distinct characters.


Example 1:
Input: s = ""eceba"", k = 2
Output: 3
Explanation: The substring is ""ece"" and has length 3.


Example 2:
Input: s = ""aa"", k = 1
Output: 2
Explanation: The substring is ""aa"" with length 2.


constraint:
`1 <= s.length <= 5 * 104`
`0 <= k <= 50`",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get a nested list of integers ""nestedList"". Each element is either an integer or a list whose elements can also be integers or other lists. Implement an iterator to flatten it.

Implement the ""NestedIterator"" class:
`NestedIterator(List<NestedInteger> nestedList)` initializes an iterator using the nested list `nestedList`.

`int next()` returns the next integer in the nested list.

`boolean hasNext()` returns `true` if there are still some integers in the nested list, otherwise `false`.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: [1,1,2,1,1]
Explanation: By repeatedly calling next until hasNext returns false, the order of elements returned by next should be: [1,1,2,1,1].


Example 2:
Input: nestedList = [1,[4,[6]]]
Output: [1,4,6]
Explanation: By repeatedly calling next until hasNext returns false, the order of elements returned by next should be: [1,4,6].


constraint:
`1 <= nestedList.length <= 500`
The values ​​of the integers in the nested list are in the range ""[-106, 106]"".",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return ""true"" if it is a power of four. Otherwise, return ""false"".

An integer `n` is a power of four if there exists an integer `x` such that `n == 4x`.


Example 1:
Input: n = 16
output: true

Example 2:
Input: n = 5
output: error

Example 3:
Input: n = 1
output: true

constraint:
`-231 <= n <= 231 - 1`
Follow up: Can you solve without loop/recursion?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", decompose it into the sum of ""k"" positive integers, where ""k >= 2"", and maximize the product of these integers.

Returns the largest product you can get.


Example 1:
Input: n = 2
Output: 1
Explanation: 2 = 1 + 1, 1 × 1 = 1.


Example 2:
Input: n = 10
Output: 36
Explanation: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36.


constraint:
`2 <= n <= 58`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a function that reverses a string. The input string is given as an array of characters s.


Example 1:
Input: s = [""h"",""e"",""l"",""l"",""o""]
Output: [""o"", ""l"", ""l"", ""e"", ""h""]

Example 2:
Input: s = [""H"",""a"",""n"",""n"",""a"",""h""]
Output: [""h"",""a"",""n"",""n"",""a"",""H""]

constraint:
`1 <= s.length <= 105`
`s[i]` is a printable ascii character.

Follow up: don't allocate extra space for another array. You have to do this by modifying the input array in-place with ""O(1)"" extra memory.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, just reverse all vowels in the string and return it.

The vowels are ""a"", ""e"", ""i"", ""o"" and ""u"", which can occur in both cases.


Example 1:
Input: s = ""Hello""
Output: ""void""

Example 2:
Input: s = ""leetcode""
Output: ""leotcede""

constraint:
`1 <= s.length <= 3 * 105`
`s` consists of printable ASCII characters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a stream of integers and a window size, compute the moving average of all integers in the sliding window.

Implement the `MovingAverage` class:
`MovingAverage(int size)` initializes the object with the window size `size`.

`double next(int val)` returns the moving average of the last `size` values ​​of the stream.


Example 1:
enter
[""MovingAverage"", ""Next"", ""Next"", ""Next"", ""Next""]
[[3], [1], [10], [3], [5]]
output
[empty, 1.0, 5.5, 4.66667, 6.0]
explain
Moving Average movingAverage = new MovingAverage(3);
movingAverage.next(1); // returns 1.0 = 1 / 1
movingAverage.next(10); // returns 5.5 = (1 + 10) / 2
movingAverage.next(3); // returns 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // returns 6.0 = (10 + 3 + 5) / 3

constraint:
`1 <= size <= 1000`
`-105 <= value <= 105`
At most `104` calls to `next` will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"", return the ""k"" most frequently occurring elements. You can return answers in any order.


Example 1:
Input: nums = [1,1,1,2,2,3], k = 2
output: [1,2]

Example 2:
Input: nums = [1], k = 1
output: [1]

constraint:
`1 <= nums.length <= 105`
`k` in the range `[1, number of unique elements in the array]`.

The answer is guaranteed to be unique.

Follow up: Your algorithm must have a time complexity better than `O(n log n)`, where n is the size of the array.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose the following rules apply to a game of tic-tac-toe played by two players on an ""n x n"" board:
The move is guaranteed to be valid and placed on an empty block.

Once the win condition is met, no more moves are allowed.

The player who successfully places ""n"" tokens in a horizontal, vertical or diagonal row wins the game.

Implement the `TicTacToe` class:
`TicTacToe(int n)` initializes an object with a checkerboard of size `n`.

`int move(int row, int col, int player)` means that the player whose ID is `player` is playing in the cell `(row, col)` of the board. This step is guaranteed to be a valid step.

follow up:
Can you do better than `O(n2)` per `move()` operation?

Example 1:
enter
[""TicTacToe"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""]
[[3], [0, 0, 1], [0, 2, 2], [2, 2, 1], [1, 1, 2], [2, 0, 1], [1, 0, 2], [2, 1, 1]]
output
[empty, 0, 0, 0, 0, 0, 0, 1]
explain
Tic Tac Toe ticTacToe = new TicTacToe(3);
Let's say player 1 is ""X"" and player 2 is ""O"" on the board.

ticTacToe.move(0, 0, 1); // returns 0 (no one wins)
|X| | |
| | | | // Player 1 moves at (0, 0).

| | | |
ticTacToe.move(0, 2, 2); // returns 0 (no one wins)
|X| |Oh|
| | | | // Player 2 moves at (0, 2).

| | | |
ticTacToe.move(2, 2, 1); // returns 0 (no one wins)
|X| |Oh|
| | | | // Player 1 moves at (2, 2).

| | |X|
ticTacToe.move(1, 1, 2); // returns 0 (no one wins)
|X| |Oh|
| |Oh| | // Player 2 moves at (1, 1).

| | |X|
ticTacToe.move(2, 0, 1); // returns 0 (no one wins)
|X| |Oh|
| |Oh| | // Player 1 moves at (2, 0).

|X| |X|
ticTacToe.move(1, 0, 2); // returns 0 (no one wins)
|X| |Oh|
|oh|oh| | // Player 2 moves at (1, 0).

|X| |X|
ticTacToe.move(2, 1, 1); // returns 1 (player 1 wins)
|X| |Oh|
|oh|oh| | // Player 1 moves at (2, 1).

|X|X|X|

constraint:
`2 <= n <= 100`
Player is ""1"" or ""2"".

`1 <= rows, columns <= n`
`(row, col)` is unique for each different call to `move`.

At most `n2` calls to `move` will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `nums1` and `nums2`, return the array of their intersection. Each element in the result must be unique, and you can return the results in any order.


Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
output: [2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.


constraint:
`1 <= nums1.length, nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 1000`",0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `nums1` and `nums2`, return the array of their intersection. Each element in the result must occur as many times as it appears in both arrays, and you can return the results in any order.


Example 1:
Input: nums1 = [1,2,2,1], nums2 = [2,2]
output: [2,2]

Example 2:
Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [4,9]
Explanation: [9,4] is also accepted.


constraint:
`1 <= nums1.length, nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 1000`
follow up:
What if the given array is already sorted? How would you optimize your algorithm?
What if the size of `nums1` is smaller than `nums2`? Which algorithm is better?
What if the elements of `nums2` are stored on disk, memory is limited, and it is not possible to load all elements into memory at once?",0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Android devices have a special lock screen with a ""3 x 3"" grid of dots. Users can set ""unlock patterns"" by connecting dots in a specific order, forming a series of connected line segments, where the endpoints of each line segment are two consecutive points in the sequence. A series of ""k"" points is a valid unlocking pattern if both of the following conditions are met:
All points in the sequence are distinct.

If a line segment connecting two consecutive points in the sequence passes through any other point, the other point must have previously appeared in the sequence. Unselected points are not allowed to be skipped.

Here are some examples of valid and invalid unlock patterns:
The first pattern ""[4,1,3,6]"" is invalid because the line connecting points ""1"" and ""3"" passes through point ""2"", but point ""2"" did not appear in the sequence before.

The second pattern ""[4,1,9,2]"" is invalid because the line connecting points ""1"" and ""9"" passes through point ""5"", but point ""5"" does not appear in the sequence before.

The third pattern ""[2,4,1,3,6]"" is valid because it obeys the condition. The line connecting points ""1"" and ""3"" satisfies the condition because point ""2"" occurs before in the sequence.

The 4th pattern ""[6,5,4,1,9,2]"" is valid because it obeys the condition. The line connecting points ""1"" and ""9"" satisfies the condition because point ""5"" occurs before in the sequence.

Given two integers ""m"" and ""n"", returns the number of unique and valid unlock patterns for the Android grid lock screen consisting of at least ""m"" keys and at most ""n"" keys.

Two unlock patterns are considered unique if there is a dot in one sequence but not in the other, or if the dots are in a different order.


Example 1:
Input: m = 1, n = 1
Output: 9

Example 2:
Input: m = 1, n = 2
Output: 65

constraint:
`1 <= m, n <= 9`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a stream input of non-negative integers ""a1, a2, ..., an"", summarize the numbers seen so far into a list of disjoint intervals.

Implement the ""SummaryRanges"" class:
`SummaryRanges()` initializes the object with an empty stream.

`void addNum(int val)` adds the integer `val` to the stream.

`int[][] getIntervals()` returns a digest of integers in the current stream as a list of disjoint intervals `[starti, endi]`.


Example 1:
enter
[""SummaryRanges"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals"", ""addNum"", ""getIntervals""]
[[], [1], [], [3], [], [7], [], [2], [], [6], []]
output
[null, null, [[1, 1]], null, [[1, 1], [3, 3]], null, [[1, 1], [3, 3], [7, 7]] , empty, [[1, 3], [7, 7]], empty, [[1, 3], [6, 7]]]
explain
SummaryRanges summaryRanges = new SummaryRanges();
summaryRanges. addNum(1); // arr = [1]
summaryRanges.getIntervals(); // returns [[1, 1]]
summaryRanges. addNum(3); // arr = [1, 3]
summaryRanges.getIntervals(); // returns [[1, 1], [3, 3]]
summaryRanges. addNum(7); // arr = [1, 3, 7]
summaryRanges.getIntervals(); // returns [[1, 1], [3, 3], [7, 7]]
summaryRanges. addNum(2); // arr = [1, 2, 3, 7]
summaryRanges.getIntervals(); // returns [[1, 3], [7, 7]]
summaryRanges. addNum(6); // arr = [1, 2, 3, 6, 7]
summaryRanges.getIntervals(); // returns [[1, 3], [6, 7]]

constraint:
`0 <= value <= 104`
There will be at most 3 * 104 calls to addNum and getIntervals.

Follow up: what if there are many merges and the number of disjoint intervals is small compared to the size of the data stream?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a Snake game to play on devices with screen size ""height x width"". If you are new to the game, play it online.

The snake is initially located at ""(0, 0)"" in the upper left corner and has a length of ""1"" units.

Given an array ""food"" where ""food[i] = (ri, ci)"" is the row and column position of a piece of food that a snake can eat. When a snake eats a piece of food, its length and game score will increase by ""1"".

Each piece of food appeared on the screen one after the other, meaning that the second piece of food would not appear until after the snake had eaten the first.

When a piece of food appears on the screen, make sure it doesn't appear on the square the snake occupies.

The game is over if the snake goes out of bounds (hitting a wall) or if its head occupies the space its body occupied after it moved (i.e. a snake of length 4 cannot bump into itself).

Implement the `SnakeGame` class:
`SnakeGame(int width, int height, int[][] food)` initializes an object with a screen size of `height x width` and a position of `food`.

`int move(String direction)` returns the game score after the snake has moved by a `direction`. If the game is over, return `-1`.


Example 1:
enter
[""snake"", ""move"", ""move"", ""move"", ""move"", ""move"", ""move""]
[[3, 2, [[1, 2], [0, 1]]], [""R""], [""D""], [""R""], [""U""], [""L""] , [""you""]]
output
[empty, 0, 0, 1, 1, 2, -1]
explain
SnakeGame snakeGame = new SnakeGame(3, 2, [[1, 2], [0, 1]]);
snakeGame. move(""R""); // returns 0
snakeGame. move(""D""); // returns 0
snakeGame.move(""R""); // return 1, the snake ate the first piece of food. second piece of food appears
                     // at (0, 1).

snakeGame. move(""U""); // returns 1
snakeGame.move(""L""); // Returns 2, the snake ate the second food. No more food appeared.

snakeGame.move(""U""); // returns -1, game over because the snake hit the border

constraint:
`1 <= width, height <= 104`
`1 <= food.length <= 50`
`food[i].length == 2`
`0 <= ri < height`
`0 <= ci < width`
`direction.length == 1`
""Direction"" is ""U"", ""D"", ""L"", or ""R"".

At most `104` calls to `move` will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional integer array ""envelopes"", where ""envelopes[i] = [wi, hi]"" represents the width and height of the envelopes.

An envelope can fit into another envelope if and only if the width and height of one envelope are greater than the width and height of the other envelope.

Returns the maximum number of envelopes for matryoshka dolls (i.e., put one inside another).

NOTE: You cannot rotate envelopes.


Example 1:
Input: Envelope = [[5,4],[6,4],[6,7],[2,3]]
Output: 3
Explanation: The maximum number of envelopes for Russian dolls is `3` ([2,3] => [5,4] => [6,7]).


Example 2:
Input: Envelope = [[1,1],[1,1],[1,1]]
Output: 1

constraint:
`1 <= envelopes. length <= 5000`
`envelope[i].length == 2`
`1 <= wi, hi <= 104`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a simplified version of Twitter where a user can tweet, follow/unfollow another user, and be able to see the ""10"" most recent tweets in the user's news feed.

Implement the `Twitter` class:
`Twitter()` initializes your Twitter object.

`void postTweet(int userId, int tweetId)` writes a new tweet with ID `tweetId` by user `userId`. Each call to this function will be made with a unique ""tweetId"".

`List<Integer> getNewsFeed(int userId)` retrieves the `10` latest tweet ids in the user's news feed. Each item in the news feed must be posted by a user the user follows or the user themselves. Tweets must be listed in order from most recent to least recent.

`void follow(int followerId, int followeeId)` The user whose ID is `followerId` begins to follow the user whose ID is `followeeId`.

`void unfollow(int followerId, int followeeId)` The user whose ID is `followerId` starts to unfollow the user whose ID is `followeeId`.


Example 1:
enter
[""Twitter"", ""postTweet"", ""getNewsFeed"", ""follow"", ""postTweet"", ""getNewsFeed"", ""unfollow"", ""getNewsFeed""]
[[], [1, 5], [1], [1, 2], [2, 6], [1], [1, 2], [1]]
output
[empty, empty, [5], empty, empty, [6, 5], empty, [5]]
explain
twitter twitter = new twitter();
twitter.postTweet(1, 5); // User 1 posted a new tweet (id = 5).

twitter.getNewsFeed(1); // User 1's news feed should return a list with 1 tweet ID -> [5]. return [5]
twitter.follow(1, 2); // User 1 follows User 2.

twitter.postTweet(2, 6); // User 2 posted a new tweet (id = 6).

twitter.getNewsFeed(1); // User 1's news feed should return a list of 2 tweet IDs -> [6, 5]. Tweet ID 6 should be before Tweet ID 5 because it was posted after Tweet ID 5.

twitter.unfollow(1, 2); // User 1 unfollows User 2.

twitter.getNewsFeed(1); // User 1's news feed should return a list with 1 tweet ID -> [5], since User 1 no longer follows User 2.


constraint:
`1 <= userId, followerId, followeeId <= 500`
`0 <= tweetId <= 104`
All tweets have a unique ID.

There will be at most 3 * 104 calls to postTweet, getNewsFeed, follow and unfollow.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given n points on a two-dimensional plane, ask whether there is a line parallel to the y-axis that reflects the given point symmetrically, in other words, answer whether there is a line, after reflecting all the points on the given line, The set of original points is the same as the set of reflected points.

Note that there can be duplicate points.

follow up:
Can you do better than O(n2)?

Example 1:
Input: Points = [[1,1],[-1,1]]
output: true
Explanation: We can choose the line x = 0.


Example 2:
Input: Points = [[1,1],[-1,-1]]
output: error
Explanation: We cannot select a line.


constraint:
`n == points. length`
`1 <= n <= 10^4`
`-10^8 <= points[i][j] <= 10^8`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return the count of all numbers with a unique digit ""x"" where ""0 <= x < 10n"".


Example 1:
Input: n = 2
Output: 91
Explanation: The answer should be the total number in the range of 0≤x<100, excluding 11, 22, 33, 44, 55, 66, 77, 88, 99

Example 2:
Input: n = 0
Output: 1

constraint:
`0 <= n <= 8`",0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" and an integer ""k"", rearrange ""s"" so that identical characters are at least ""k"" away from each other. If the string cannot be rearranged, an empty string """" is returned.


Example 1:
Input: s = ""aabbcc"", k = 3
Output: ""abcabc""
Explanation: Identical letters have a distance of at least 3 from each other.


Example 2:
Input: s = ""aaabc"", k = 3
Output: """"
Explanation: It is not possible to rearrange strings.


Example 3:
Input: s = ""aaadbbcc"", k = 2
Output: ""abacabcd""
Explanation: Identical letters have a distance of at least 2 from each other.


constraint:
`1 <= s.length <= 3 * 105`
`s` contains only lowercase English letters.

`0 <= k <= s.length`",0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a logger system that receives a stream of messages and their timestamps. Each unique message can only be printed at most once every 10 seconds (i.e. a message printed at timestamp `t` will prevent other identical messages from being printed until timestamp `t+10`).

All messages will be in chronological order. Multiple messages may arrive at the same timestamp.

Implement the `Logger` class:
`Logger()` initializes a `logger` object.

`bool shouldPrintMessage(int timestamp, string message)` returns `true` if the `message` should be printed at the given `timestamp`, otherwise `false`.


Example 1:
enter
[""logger"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage"", ""shouldPrintMessage""]
[[], [1, ""foo""], [2, ""column""], [3, ""foo""], [8, ""column""], [10, ""foo""], [11, ""foo"" ]]
output
[null,true,true,false,false,false,true]
explain
Logger logger = new Logger();
logger.shouldPrintMessage(1, ""foo""); // returns true, the next allowed timestamp for ""foo"" is 1 + 10 = 11
logger.shouldPrintMessage(2, ""bar""); // returns true, the next allowed timestamp for ""bar"" is 2 + 10 = 12
logger.shouldPrintMessage(3, ""foo""); // 3 < 11, return false
logger.shouldPrintMessage(8, ""bar""); // 8 < 12, return false
logger.shouldPrintMessage(10, ""foo""); // 10 < 11, return false
logger.shouldPrintMessage(11, ""foo""); // 11 >= 11, returns true, the next allowed timestamp for ""foo"" is
                                      // 11 + 10 = 21

constraint:
`0 <= timestamp <= 109`
Each ""timestamp"" will be passed in non-decreasing order (chronological order).

`1 <= message.length <= 30`
Up to 104 calls to shouldPrintMessage will be made.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted integer array `nums` and three integers `a`, `b`, and `c`, apply a quadratic function of the form `f(x) = ax2 + bx + c` to each element `nums[i]` is in the array and returns the array in sorted order.


Example 1:
Input: nums = [-4,-2,2,4], a = 1, b = 3, c = 5
Output: [3,9,15,33]

Example 2:
Input: nums = [-4,-2,2,4], a = -1, b = 3, c = 5
Output: [-23,-5,1,7]

constraint:
`1 <= nums.length <= 200`
`-100 <= nums[i], a, b, c <= 100`
`nums` are sorted in ascending order.

Follow up: Can you solve it in `O(n)` time?",0,0,0,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" matrix ""grid"" where each cell is a wall ""W"", an enemy ""E"", or an empty ""0"", return the maximum number of enemies that can be killed with one bomb. You can only place bombs in empty cells.

The bomb kills all enemies in the same row and column from the point of planting until it hits a wall because it is too powerful to be destroyed.


Example 1:
Input: grid = [[""0"",""E"",""0"",""0""],[""E"",""0"",""W"",""E""],[""0"",""E"", ""0"", ""0""]]
Output: 3

Example 2:
Input: grid = [[""W"",""W"",""W""],[""0"",""0"",""0""],[""E"",""E"",""E""]]
Output: 1

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 500`
`grid[i][j]` is `'W'`, `'E'`, or `'0'`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a hit counter that counts the number of hits received in the past 5 minutes (i.e., the past 300 seconds).

Your system should accept a ""timestamp"" parameter (in seconds), and you can assume that calls are made to the system in chronological order (ie, ""timestamp"" increases monotonically). Several hits may arrive at roughly the same time.

Implement the ""HitCounter"" class:
`HitCounter()` initializes an object for the hit counter system.

`void hit(int timestamp)` records hits that occurred at `timestamp` (in seconds). Multiple hits may occur on the same ""timestamp"".

`int getHits(int timestamp)` returns the number of hits from the `timestamp` (i.e. the past `300` seconds) for the past 5 minutes.


Example 1:
enter
[""HitCounter"", ""Hits"", ""Hits"", ""Hits"", ""getHits"", ""Hits"", ""getHits"", ""getHits""]
[[], [1], [2], [3], [4], [300], [300], [301]]
output
[empty, empty, empty, empty, 3, empty, 4, 3]
explain
HitCounter hitCounter = new HitCounter();
hitCounter.hit(1); // Hit at timestamp 1.

hitCounter.hit(2); // Hit at timestamp 2.

hitCounter.hit(3); // Hit at timestamp 3.

hitCounter.getHits(4); // Get a hit at timestamp 4, return 3.

hitCounter.hit(300); // Hit at timestamp 300.

hitCounter.getHits(300); // Get a hit at timestamp 300, return 4.

hitCounter.getHits(301); // Get a hit at timestamp 301, return 3.


constraint:
`1 <= timestamp <= 2 * 109`
All calls are made to the system in chronological order (ie, ""timestamp"" is monotonically increasing).

There will be at most `300` calls to `hit` and `getHits`.

Follow up: What if the number of hits per second can be huge? Does your design scale?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" matrix ""matrix"" and an integer ""k"", return the largest sum of rectangles in the matrix such that the sum is no greater than ""k"".

A rectangle whose sum is guaranteed to be no greater than `k`.


Example 1:
Input: matrix = [[1,0,1],[0,-2,3]], k = 2
Output: 2
Explanation: Because the sum of the blue rectangle [[0, 1], [-2, 3]] is 2, and 2 is the largest number not greater than k (k = 2).


Example 2:
Input: matrix = [[2,2,-1]], k = 3
Output: 3

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 100`
`-100 <= matrix[i][j] <= 100`
`-105 <= k <= 105`
Follow-up: What if the number of rows is much greater than the number of columns?",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get a nested list of integers ""nestedList"". Each element is either an integer or a list whose elements can also be integers or other lists.

The depth of an integer is the number of lists it is in. For example, the nested list ""[1,[2,2],[[3],2],1]"" has the value of each integer set to its depth. Let ""maxDepth"" be any integer maximum depth.

The weight of the integer is ""maxDepth - (depth of the integer) + 1"".

Returns the sum of each integer in nestedList multiplied by its weight.


Example 1:
Input: nestedList = [[1,1],2,[1,1]]
Output: 8
Explanation: Four 1s with a weight of 1 and one 2 with a weight of 2.

1*1 + 1*1 + 2*2 + 1*1 + 1*1 = 8

Example 2:
Input: nestedList = [1,[4,[6]]]
Output: 17
Explanation: A 1 at depth 3, a 4 at depth 2, and a 6 at depth 1.

1*3 + 4*2 + 6*1 = 17

constraint:
`1 <= nestedList.length <= 50`
The values ​​of the integers in the nested list are in the range ""[-100, 100]"".

Any integer with a maximum depth less than or equal to ""50"".",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two jugs with capacities ""jug1Capacity"" and ""jug2Capacity"" liters respectively. There is unlimited water supply available. Determine if you can accurately measure ""targetCapacity"" in liters with these two jugs.

If `targetCapacity` liters is measurable, you must include `targetCapacity` liters in the last bucket or two.

Allowed operations:
Fill any jug with water.

Empty any water jugs.

Pour water from one jar to the other until the other jar is completely full, or the first jar itself is empty.


Example 1:
Input: jug1Capacity = 3, jug2Capacity = 5, targetCapacity = 4
output: true
Description: The famous Die Hard example

Example 2:
Input: jug1Capacity = 2, jug2Capacity = 6, targetCapacity = 5
output: error

Example 3:
Input: jug1Capacity = 1, jug2Capacity = 2, targetCapacity = 3
output: true

constraint:
`1 <= jug1Capacity, jug2Capacity, targetCapacity <= 106`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, collect the nodes of the tree, as if you were doing this:
Collect all leaf nodes.

Delete all leaf nodes.

Repeat until the tree is empty.


Example 1:
Input: root = [1,2,3,4,5]
Output: [[4,5,3],[2],[1]]
explain:
[[3,5,4],[2],[1]] and [[3,4,5],[2],[1]] are also considered correct answers because the order of each level does not matter Which elements to return.


Example 2:
input: root = [1]
output: [[1]]

constraint:
The number of nodes in the tree is in the range ""[1, 100]"".

`1 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer num, write a function that returns True if num is a perfect square, and False otherwise.

Follow up: Do not use any built-in library functions such as `sqrt`.


Example 1:
Input: num = 16
output: true

Example 2:
Input: num = 14
output: error

constraint:
`1 <= num <= 2^31 - 1`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of distinct positive integers ""nums"", return the largest subset ""answer"" such that each pair of ""(answer[i], answer[j])"" elements in the subset satisfies:
`answer[i] % answer[j] == 0`, or
`answer[j] % answer[i] == 0`
If there are multiple solutions, return any of them.


Example 1:
Input: nums = [1,2,3]
output: [1,2]
Explanation: [1,3] is also accepted.


Example 2:
Input: nums = [1,2,4,8]
Output: [1,2,4,8]

constraint:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 2 * 109`
All integers in `nums` are unique.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer represented as a linked list of numbers, add one to the integer.

When storing numbers, the most significant number is at the ""head"" of the list.


Example 1:
Input: head = [1,2,3]
Output: [1,2,4]

Example 2:
input: head = [0]
output: [1]

constraint:
The number of nodes in the linked list is in the range ""[1, 100]"".

`0 <= Node.val <= 9`
The numbers represented by the linked list contain no leading zeros other than the zero itself.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""length"" and an array ""updates"" where ""updates[i] = [startIdxi, endIdxi, inci]"".

You have an array ""arr"" of length ""length"" that is all zeros, and you have some operations to be applied to ""arr"". In the ith operation you should increment all elements arr[startIdxi], arr[startIdxi + 1], ..., arr[endIdxi] by inci.

Returns 'arr' after all 'updates' have been applied.


Example 1:
Input: length = 5, update = [[1,3,2],[2,4,3],[0,2,-2]]
Output: [-2,0,3,5,3]

Example 2:
Input: length = 10, update = [[2,4,6],[5,6,8],[1,9,-4]]
Output: [0,-4,2,2,2,4,4,-4,-4,-4]

constraint:
`1 <= length <= 105`
`0 <= updates.length <= 104`
`0 <= startIdxi <= endIdxi < length`
`-1000 <= inci <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""a"" and ""b"", return the sum of these two integers without using operators ""+"" and ""-"".


Example 1:
Input: a = 1, b = 2
Output: 3

Example 2:
Input: a = 2, b = 3
Output: 5

constraint:
`-1000 <= a, b <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays of integers ""nums1"" and ""nums2"" sorted in ascending order and an integer ""k"".

Defines a pair ""(u, v)"" consisting of an element from the first array and an element from the second array.

Return the k pairs `(u1, v1), (u2, v2), ..., (uk, vk)` with the smallest sum.


Example 1:
Input: nums1 = [1,7,11], nums2 = [2,4,6], k = 3
Output: [[1,2],[1,4],[1,6]]
Explanation: Return the first 3 pairs from the sequence: [1,2], [1,4], [1,6], [7,2], [7,4], [11,2], [7 ,6 ],[11,4],[11,6]

Example 2:
Input: nums1 = [1,1,2], nums2 = [1,2,3], k = 2
Output: [[1,1],[1,1]]
Explanation: The first two pairs are returned from the sequence: [1,1],[1,1],[1,2],[2,1],[1,2],[2,2],[1,3] ],[1,3],[2,3]

Example 3:
Input: nums1 = [1,2], nums2 = [3], k = 3
Output: [[1,3],[2,3]]
Explanation: Return all possible pairs from the sequence [1,3],[2,3]

constraint:
`1 <= nums1.length, nums2.length <= 104`
`-109 <= nums1[i], nums2[i] <= 109`
Both `nums1` and `nums2` are sorted in ascending order.

`1 <= k <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are playing a guessing game. The game is as follows:
I choose a number from ""1"" to ""n"". You'll have to guess which number I picked.

Every time you guess wrong, I will tell you whether the number I picked is higher or lower than your guess.

You call a predefined API `int guess(int num)` which returns 3 possible results:
`-1`: I picked a number lower than your guess (i.e. `pick < num`).

`1`: I picked a number larger than you guessed (i.e. `pick > num`).

`0`: The number I picked is equal to your guess (i.e. `pick == num`).

returns my selected number.


Example 1:
Input: n = 10, pick = 6
Output: 6

Example 2:
Input: n = 1, pick = 1
Output: 1

Example 3:
Input: n = 2, pick = 1
Output: 1

Example 4:
Input: n = 2, pick = 2
Output: 2

constraint:
`1 <= n <= 231 - 1`
`1 <= select <= n`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are playing a guessing game. The game will run as follows:
I choose a number between ""1"" and ""n"".

You guess a number.

If you guess the number correctly, you win the game.

If you guess wrong, then I will tell you whether the number I chose is large or small, and you continue to guess.

Every time you guess ""x"" wrong number, you will pay ""x"" dollars. If you run out of money, you lose the game.

Given a specific ""n"", no matter what number I choose, return the minimum amount needed to guarantee a win.


Example 1:
Input: n = 10
output: 16
Explanation: The winning strategy is as follows:
- The range is [1,10]. Guess 7.

    - If this is my number, your total amount is $0. Otherwise, you pay $7.

    - If my number is higher, the range is [8,10]. Guess 9.

        - If this is my number, your total is $7. Otherwise, you'll pay $9.

        - If my number is higher, it must be 10. Guess 10. Your total is $7 + $9 = $16.

        - If my number is small, it must be 8. Guess 8. Your total is $7 + $9 = $16.

    - If my number is smaller, the range is [1,6]. Guess 3.

        - If this is my number, your total is $7. Otherwise, you pay $3.

        - If my number is higher, the range is [4,6]. Guess 5.

            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $5.

            - If my number is higher, it must be 6. Guess 6. Your total is $7 + $3 + $5 = $15.

            - If my number is small, it must be 4. Guess 4. Your total is $7 + $3 + $5 = $15.

        - If my number is smaller, the range is [1,2]. Guess 1.

            - If this is my number, your total is $7 + $3 = $10. Otherwise, you pay $1.

            - If my number is higher, it must be 2. Guess 2. Your total is $7 + $3 + $1 = $11.

In all these cases, worst case you pay $16. So you only need $16 to guarantee a win.


Example 2:
Input: n = 1
output: 0
Explanation: There is only one possible number, so you can guess 1 without paying anything.


Example 3:
Input: n = 2
Output: 1
Explanation: There are two possible numbers, 1 and 2.

- Guess one.

    - If this is my number, your total amount is $0. Otherwise, you pay $1.

    - If my number is higher, it must be 2. Guess 2. Your total is $1.

Worst case you pay $1.


constraint:
`1 <= n <= 200`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A wiggle sequence is one in which the difference between consecutive numbers alternates strictly between positive and negative. The first difference (if any) may be positive or negative. Sequences with two or fewer elements are usually wiggle sequences.

For example, `[1, 7, 4, 9, 2, 5]` is a wiggle sequence because the difference `(6, -3, 5, -7, 3)` alternates between positive and negative.

In contrast, ""[1, 4, 7, 2, 5]"" and ""[1, 7, 4, 5, 5]"" are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.

A subsequence is obtained by removing some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array nums, return the length of the longest wiggle subsequence of nums.


Example 1:
Input: nums = [1,7,4,9,2,5]
Output: 6
Explanation: The whole sequence is a swing sequence with differences (6, -3, 5, -7, 3).


Example 2:
Input: nums = [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences up to this length.

One is [1, 17, 10, 13, 10, 16, 8] with difference (16, -7, 3, -3, 6, -8).


Example 3:
Input: nums = [1,2,3,4,5,6,7,8,9]
Output: 2

constraint:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 1000`
Follow up: Can you solve this problem in `O(n)` time?",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of distinct integers ""nums"" and a target integer ""target"", return the number of possible combinations that add up to ""target"".

The answer is guaranteed to fit in a 32-bit integer.


Example 1:
Input: nums = [1,2,3], target = 4
Output: 7
explain:
Possible combinations are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(twenty two)
(3, 1)
Note that different sequences are counted as different combinations.


Example 2:
Input: nums = [9], target = 3
output: 0

constraint:
`1 <= nums.length <= 200`
`1 <= nums[i] <= 1000`
All elements of `nums` are unique.

`1 <= target <= 1000`
Follow-up: What if negative numbers are allowed in the given array? How does it change the question? What restriction do we need to add to the question to allow negative numbers?",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""n x n"" ""matrix"" where each row and each column are sorted in ascending order, return the ""kth"" smallest element in the matrix.

Note that it is the ""kth"" smallest element in the sort order, not the ""kth"" distinct element.


Example 1:
Input: Matrix = [[1,5,9],[10,11,13],[12,13,15]], k = 8
Output: 13
Explanation: The elements in the matrix are [1,5,9,10,11,12,13,13,15], and the 8th smallest number is 13

Example 2:
Input: matrix = [[-5]], k = 1
Output: -5

constraint:
`n == matrix.length`
`n == matrix[i].length`
`1 <= n <= 300`
`-109 <= matrix[i][j] <= 109`
All rows and columns of `matrix` are guaranteed to be sorted in non-skim order.

`1 <= k <= n2`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a phonebook that initially has a ""maxNumbers"" empty slot that can store numbers. The directory should store numbers, check if a slot is empty, and empty the given slot.

Implement the `PhoneDirectory` class:
`PhoneDirectory(int maxNumbers)` initializes the phone directory with the number of available slots `maxNumbers`.

`int get()` provides a number that is not assigned to anyone. Returns ""-1"" if no number is available.

`bool check(int number)` returns `true` if slot `number` is available, otherwise returns `false`.

`void release(int number)` reclaims or releases slot `number`.


Example 1:
enter
[""PhoneDirectory"", ""get"", ""get"", ""check"", ""get"", ""check"", ""release"", ""check""]
[[3], [], [], [2], [], [2], [2], [2]]
output
[null, 0, 1, true, 2, false, null, true]
explain
PhoneDirectory phoneDirectory = new PhoneDirectory(3);
Phone Directory.get(); // It can return any available phone number. Here we assume it returns 0.

Phone Directory.get(); // Assume it returns 1.

phoneDirectory.check(2); // Number 2 is available, so returns true.

Phone Directory.get(); // It returns 2, which is the only number left.

phoneDirectory.check(2); // The number 2 is no longer available, so returns false.

phoneDirectory.release(2); // Release the number 2 back into the pool.

phoneDirectory.check(2); // Number 2 is available again, returns true.


constraint:
`1 <= maxNumbers <= 104`
`0 <= number < maxNumbers`
There will be at most 2 * 104 calls to get, check and release.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `RandomizedSet` class:
`RandomizedSet()` initializes a `RandomizedSet` object.

`bool insert(int val)` Inserts item `val` into the collection if not present. Returns ""true"" if the item does not exist, otherwise returns ""false"".

`bool remove(int val)` removes an item `val` from the collection, if present. Returns ""true"" if the item exists, otherwise returns ""false"".

`int getRandom()` returns a random element from the current set of elements (at least one element is guaranteed to exist when this method is called). Each element must have the same probability of being returned.


Example 1:
enter
[""RandomizedSet"", ""insert"", ""remove"", ""insert"", ""getRandom"", ""remove"", ""insert"", ""getRandom""]
[[], [1], [2], [2], [], [1], [2], []]
output
[null,true,false,true,2,true,false,2]
explain
RandomizedSet randomizedSet = new RandomizedSet();
randomizedSet.insert(1); // Insert 1 into the set. Returns true on successful insertion of 1.

randomizedSet.remove(2); // returns false because 2 does not exist in the set.

randomizedSet.insert(2); // Insert 2 into the set, return true. The set now contains [1,2].

randomizedSet.getRandom(); // getRandom() should return 1 or 2 at random.

randomizedSet.remove(1); // Remove 1 from the set, return true. The collection now contains [2].

randomizedSet.insert(2); // 2 is already in the set, so returns false.

randomizedSet.getRandom(); // Since 2 is the only number in the set, getRandom() will always return 2.


constraint:
`-231 <= value <= 231 - 1`
Up to 105 calls will be made to call insert, remove, and getRandom.

When getRandom is called, there will be at least one element in the data structure.

Follow up: Can you implement class functions for each function in average ""O(1)"" time?",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `RandomizedCollection` class:
`RandomizedCollection()` initializes a `RandomizedCollection` object.

`bool insert(int val)` inserts item `val` into the multiset if not present. Returns ""true"" if the item does not exist, otherwise returns ""false"".

`bool remove(int val)` removes an item `val` from the multiset, if present. Returns ""true"" if the item exists, otherwise returns ""false"". Note that if `val` occurs multiple times in the multiset, we only remove one of them.

`int getRandom()` returns a random element from the current element's multiset (at least one element is guaranteed to exist when calling this method). The probability of each element being returned is linearly related to the number of identical values ​​contained in the multiset.


Example 1:
enter
[""RandomizedCollection"", ""insert"", ""insert"", ""insert"", ""getRandom"", ""delete"", ""getRandom""]
[[], [1], [1], [2], [], [1], []]
output
[empty, true, false, true, 2, true, 1]
explain
RandomizedCollection randomizedCollection = new RandomizedCollection();
randomizedCollection.insert(1); // returns true. Insert 1 into the set. Returns true because the set does not contain 1.

randomizedCollection.insert(1); // returns false. Insert another 1 into the set. Returns false because the set contains 1. The set now contains [1,1].

randomizedCollection.insert(2); // returns true. Inserts 2 into the collection, returns true. The set now contains [1,1,2].

randomizedCollection.getRandom(); // getRandom should return 1 with 2/3 probability and 2 with 1/3 probability.

randomizedCollection. remove(1); // returns true. Removes 1 from the set, returns true. The set now contains [1,2].

randomizedCollection.getRandom(); // getRandom should return 1 and 2 equally likely.


constraint:
`-231 <= value <= 231 - 1`
Up to 105 calls will be made to call insert, remove, and getRandom.

When getRandom is called, there will be at least one element in the data structure.

Follow up: Can you implement class functions for each function in average ""O(1)"" time?",1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a singly linked list, return the value of a random node from the linked list. Each node must have the same probability of being selected.


Example 1:
enter
[""solution"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom"", ""getRandom""]
[[[1, 2, 3]], [], [], [], [], []]
output
[null, 1, 3, 2, 2, 3]
explain
Solution solution = new Solution([1, 2, 3]);
Solution.getRandom(); // returns 1
Solution.getRandom(); // returns 3
Solution.getRandom(); // returns 2
Solution.getRandom(); // returns 2
Solution.getRandom(); // returns 3
// getRandom() should return 1, 2 or 3 at random. Each element should have an equal probability of being returned.


constraint:
The number of nodes in the linked list will be in the range ""[1, 104]"".

`-104 <= Node.val <= 104`
There will be at most 104 calls to getRandom.

follow up:
What if the linked list is very large and you don't know its length?
Can you solve this efficiently without using extra space?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Given an arbitrary ransom note string and another string containing all the letters of the magazine, write a function that will return true if the ransom note can be constructed from the magazine; otherwise, it will return false.

Each letter in the magazine string can only be used once in your ransom note.


Example 1:
Input: ransomNote = ""a"", magazine = ""b""
output: error

Example 2:
Input: ransomNote = ""aa"", magazine = ""ab""
output: error

Example 3:
Input: ransomNote = ""aa"", magazine = ""aab""
output: true

constraint:
You can assume that both strings contain only lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s representing a serialization of nested lists, implement a parser to deserialize it and return the deserialized ""NestedInteger"".

Each element is either an integer or a list whose elements can also be integers or other lists.


Example 1:
Input: s = ""324""
Output: 324
Explanation: You should return a NestedInteger object containing the single integer 324.


Example 2:
Input: s = ""[123,[456,[789]]]""
Output: [123,[456,[789]]]
Description: Returns a NestedInteger object containing a nested list of 2 elements:
1. An integer containing the value 123.

2. A nested list with two elements:
    I. An integer containing the value 456.

    2. A nested list containing one element:
         a. an integer containing the value 789

constraint:
`1 <= s.length <= 5 * 104`
`s` consists of numbers, square brackets `[]""`, minus sign `'-'` and commas `','`.

`s` is a serialization of a valid `NestedInteger`.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s , return the first distinct character in it and return its index. Returns ""-1"" if not present.


Example 1:
Input: s = ""leetcode""
output: 0

Example 2:
Input: s = ""loveleetcode""
Output: 2

Example 3:
Input: s = ""aabb""
Output: -1

constraint:
`1 <= s.length <= 105`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`.

The string `t` is generated by randomly shuffling the string `s`, and then adding another letter at a random position.

Return the letters added to `t`.


Example 1:
Input: s = ""abcd"", t = ""abcde""
Output: ""e""
Explanation: 'e' is an added letter.


Example 2:
Input: s = """", t = ""y""
Output: ""y""

Example 3:
Input: s = ""a"", t = ""aa""
output: ""one""

Example 4:
Input: s = ""ae"", t = ""aea""
output: ""one""

constraint:
`0 <= s.length <= 1000`
`t.length == s.length + 1`
`s` and `t` consist of lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `rectangles`, where `rectangles[i] = [xi, yi, ai, bi]` represents an axis-aligned rectangle. The lower left corner point of the rectangle is `(xi, yi)`, and the upper right corner point is `(ai, bi)`.

Returns ""true"" if all rectangles together form an exact coverage of a rectangular area.


Example 1:
Input: rectangle = [[1,1,3,3],[3,1,4,2],[3,2,4,4],[1,3,2,4],[2,3, 3,4]]
output: true
Explanation: All 5 rectangles together form an exact coverage of a rectangular area.


Example 2:
Input: Rectangle = [[1,1,2,3],[1,3,2,4],[3,1,4,2],[3,2,4,4]]
output: error
Explanation: Because there is a gap between the two rectangular areas.


Example 3:
Input: Rectangle = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[3,2,4,4]]
output: error
Explanation: Because there is a notch in the top center.


Example 4:
Input: Rectangle = [[1,1,3,3],[3,1,4,2],[1,3,2,4],[2,2,4,4]]
output: error
Explanation: Because two of the rectangles overlap each other.


constraint:
`1 <= rectangles.length <= 2 * 104`
`rectangle[i].length == 4`
`-105 <= xi, yi, ai, bi <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"Given two strings s and t, check whether s is a subsequence of t.

A subsequence of a string is a new string formed from the original string by deleting some (or none) of the characters without disturbing the relative positions of the remaining characters. (ie, ""ace"" is a subsequence of ""abcde"", but ""aec"" is not).


Example 1:
Input: s = ""abc"", t = ""ahbgdc""
output: true

Example 2:
Input: s = ""axc"", t = ""ahbgdc""
output: error

constraint:
`0 <= s.length <= 100`
`0 <= t.length <= 104`
`s` and `t` consist of lowercase English letters only.

Follow-up: If there are many `s` passed in, such as `s1, s2, ..., sk` where `k >= 109`, you want to check one by one to see if `t` has its subsequence. In How would you change your code in this case?",0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""data"" representing data, return whether it is a valid UTF-8 encoding.

A character in UTF8 can be 1 to 4 bytes long, following these rules:
For a 1-byte character, the first bit is ""0"", followed by its Unicode code.

For an n-byte character, the first n bits are all 1s, n + 1 bits are 0, and the next n - 1 bytes are 10 for the most significant 2 bits.

This is how UTF-8 encoding works:
` character. number range | UTF-8 octet sequence
      (hex) | (binary)
   ------------------+------------------------------- ---------------
   0000 0000-0000 007F | 0xxxxxxx
   0000 0080-0000 07FF | 110xxxxx 10xxxxxx
   0000 0800-0000 FFFF | 1110xxxx 10xxxxxx 10xxxxxx
   0001 0000-0010 FFFF | 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx`
NOTE: Input is an array of integers. Only the least significant 8 bits of each integer are used to store data. This means that each integer represents only 1 byte of data.


Example 1:
Input: data = [197,130,1]
output: true
Explanation: The data represents the sequence of octets: 11000101 10000010 00000001.

It is a valid utf-8 encoding of 2-byte characters followed by 1-byte characters.


Example 2:
Input: data = [235,140,​​4]
output: error
Explanation: The data represents the sequence of octets: 11101011 10001100 00000100.

The first 3 bits are all 1, and the 4th bit is 0 to represent a 3-byte character.

The next byte is a consecutive byte starting with 10, which is correct.

But the second continuation byte does not start with 10, so it is invalid.


constraint:
`1 <= data length <= 2 * 104`
`0 <= data[i] <= 255`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an encoded string, return its decoded string.

The encoding rule is: `k[encoded_string]`, where `encoded_string` in square brackets is repeated `k` times. Note that ""k"" is guaranteed to be a positive integer.

You might assume that the input string is always valid; no extra spaces, square brackets are well-formed, etc.

Also, you can assume that the original data does not contain any numbers, and that numbers are only used for those repeating numbers ""k"". For example, there would be no input like `3a` or `2[4]`.


Example 1:
Input: s = ""3[a]2[bc]""
Output: ""aaabcbc""

Example 2:
Input: s = ""3[a2[c]]""
Output: ""accaccacc""

Example 3:
Input: s = ""2[abc]3[cd]ef""
Output: ""abcabccdcdcdef""

Example 4:
Input: s = ""abc3[cd]xyz""
Output: ""abccdcdcdxyz""

constraint:
`1 <= s.length <= 30`
`s` consists of lowercase English letters, numbers and square brackets `'[]'.

`s` is guaranteed to be a valid input.

All integers in s are in the range [1, 300].",0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and an integer k, return the length of the longest substring of s such that each character in the substring occurs more frequently than or equal to k.


Example 1:
Input: s = ""aaabb"", k = 3
Output: 3
Explanation: The longest substring is ""aaa"" because ""a"" is repeated 3 times.


Example 2:
Input: s = ""ababbc"", k = 2
Output: 5
Explanation: The longest substring is ""ababb"" because 'a' is repeated 2 times and 'b' is repeated 3 times.


constraint:
`1 <= s.length <= 104`
`s` contains only lowercase English letters.

`1 <= k <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" of length ""n"".

Suppose arrk is the array obtained by rotating nums clockwise by k positions. We define the rotation function `F` on `nums` as follows:
`F(k) = 0 * arrk[0] + 1 * arrk[1] + ... + (n - 1) * arrk[n - 1].
Returns the maximum value of `F(0), F(1), ..., F(n-1)`.


Example 1:
Input: nums = [4,3,2,6]
Output: 26
explain:
F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26
So the maximum value of F(0), F(1), F(2), and F(3) is F(3) = 26.


Example 2:
Input: nums = [1000000007]
output: 0

constraint:
`n == nums. length`
`1 <= n <= 105`
`-231 <= nums[i] <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer ""n"", you can apply one of the following operations:
If `n` is even, replace `n` with `n / 2`.

If `n` is odd, replace `n` with `n + 1` or `n - 1`.

Returns the minimum number of operations required to make `n` into `1`.


Example 1:
Input: n = 8
Output: 3
Explanation: 8 -> 4 -> 2 -> 1

Example 2:
Input: n = 7
Output: 4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1

Example 3:
Input: n = 4
Output: 2

constraint:
`1 <= n <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of possibly repeating integers, randomly output the indices of the given ""target"" numbers. You can assume that a given target number must exist in the array.

Implement the ""Solution"" class:
`Solution(int[] nums)` initializes the object with the array `nums`.

`int pick(int target)` picks a random index `i` from `nums`, where `nums[i] == target`. If there are multiple valid i, then each index should have an equal probability of being returned.


Example 1:
enter
[""Solution"", ""Selection"", ""Selection"", ""Selection""]
[[[1, 2, 3, 3, 3]], [3], [1], [3]]
output
[empty, 4, 0, 2]
explain
Solution solution = new Solution([1, 2, 3, 3, 3]);
Solution choice(3); // It should return index 2, 3 or 4 at random. Each index should have an equal probability of being returned.

Solution choice(1); // it should return 0. Because only nums[0] is equal to 1 in the array.

Solution choice(3); // It should return index 2, 3 or 4 at random. Each index should have an equal probability of being returned.


constraint:
`1 <= nums.length <= 2 * 104`
`-231 <= nums[i] <= 231 - 1`
`target` is an integer from `nums`.

At most `104` calls to `pick` will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0
"Given an array of variable pairs ""equations"" and an array of real numbers ""values"", where ""equations[i] = [Ai, Bi]"" and ""values[i]"" represent the equation ""Ai / Bi = values""[i]` . Each ""Ai"" or ""Bi"" is a string representing a single variable.

You also get some ""queries"" where ""queries[j] = [Cj, Dj]"" means the jth query where you have to find the answer to ""Cj / Dj = ?"".

Returns answers to all queries. If a single answer cannot be determined, ""-1.0"" is returned.

NOTE: Input is always valid. You might assume that evaluating the query does not result in division by zero and that there is no contradiction.


Example 1:
Input: Equation = [[""a"",""b""],[""b"",""c""]], Value = [2.0,3.0], Query = [[""a"",""c""],[""b "",""a""],[""a"",""e""],[""a"",""a""],[""x"",""x""]]
Output: [6.00000,0.50000,-1.00000,1.00000,-1.00000]
explain:
Given: a/b = 2.0, b/c = 3.0
The query is: a / c = ?, b / a = ?, a / e = ?, a / a = ?, x / x = ?
Returns: [6.0, 0.5, -1.0, 1.0, -1.0]

Example 2:
Input: equation = [[""a"",""b""],[""b"",""c""],[""bc"",""cd""]], value = [1.5,2.5,5.0], query = [[ ""a"",""c""],[""c"",""b""],[""bc"",""cd""],[""cd"",""bc""]]
Output: [3.75000,0.40000,5.00000,0.20000]

Example 3:
Input: equation = [[""a"",""b""]], value = [0.5], query = [[""a"",""b""],[""b"",""a""],[""a"", ""c""],[""x"",""y""]]
Output: [0.50000, 2.00000, -1.00000, -1.00000]

constraint:
`1 <= equations.length <= 20`
`equation[i].length == 2`
`1 <= Ai.length, Bi.length <= 5`
`values.length == equations.length`
`0.0 < value[i] <= 20.0`
`1 <= queries.length <= 20`
`query[i].length == 2`
`1 <= Cj.length, Dj.length <= 5`
`Ai, Bi, Cj, Dj` consists of lowercase English letters and numbers.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer n, return the nth digit of the infinite sequence of integers [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ...].


Example 1:
Input: n = 3
Output: 3

Example 2:
Input: n = 11
output: 0
Explanation: The 11th digit of the sequence 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, ... is a 0 which is part of the number 10.


constraint:
`1 <= n <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The binary watch has 4 LEDs on the top representing the hours (0-11) and 6 LEDs on the bottom representing the minutes (0-59).

Each LED represents a zero or one, with the least significant bit on the right.

For example, the binary watch above reads ""3:25"".

Given a non-negative integer n representing the number of LEDs currently lit, return all possible times that the watch can represent.


example:
Input: n = 1 Return: [""1:00"", ""2:00"", ""4:00"", ""8:00"", ""0:01"", ""0:02"", ""0:04"", ""0:08"", ""0:16"", ""0:32""]
notes:
The output order does not matter.

Hours cannot contain leading zeros, eg ""01:00"" is invalid, it should be ""1:00"".

Minutes must be two digits and can contain leading zeros, eg ""10:2"" is invalid, it should be ""10:02"".",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer num represented as a string, remove k digits from the number to make the new number as small as possible.

notes:
The length of num is less than 10002 and will be ≥ k.

The given number does not contain any leading zeros.


Example 1:
Input: num = ""1432219"", k = 3
Output: ""1219""
Explanation: Remove the three digits 4, 3, and 2 to form the smallest new number 1219.


Example 2:
Input: num = ""10200"", k = 1
Output: ""200""
Explanation: remove the leading 1, the number is 200. Note that the output cannot contain leading zeros.


Example 3:
Input: num = ""10"", k = 2
Output: ""0""
Explanation: Removes all digits from a number, it leaves nothing i.e. 0.",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A frog is crossing a river. The river is divided into cells, and within each cell, there may or may not be stones. Frogs can jump on rocks, but not into water.

Given an ascending list of ""stone"" positions (in units), determine whether a frog can cross the river by landing on the last stone. Initially, the frog is on the first stone, and it is assumed that the first jump must be ""1"" unit.

If the frog's last jump was ""k"" units, then its next jump must be ""k - 1"", ""k"", or ""k+1"" units. Frogs can only jump forward.


Example 1:
Input: Stone = [0,1,3,5,6,8,12,17]
output: true
Explanation: The frog can jump 1 unit to the 2nd stone, then 2 units to the 3rd stone, then 2 units to the 4th stone, then 3 units to the 6th stone, 4 units to the 6th stone 7 stones, jump to the last stone, and 5 units to the 8th stone.


Example 2:
Input: Stone = [0,1,2,3,4,8,9,11]
output: error
Explanation: Since the gap between the 5th and 6th pebbles is too large, it is impossible to jump to the last pebble.


constraint:
`2 <= stones.length <= 2000`
`0 <= stone[i] <= 231 - 1`
`stone[0] == 0`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Find the sum of all left leaves in a given binary tree.


example:
    3
   / \
  9 20
    / \
   15 7
There are two left leaves in the binary tree, 9 and 15. Returns 24.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer, write an algorithm to convert it to hex. For negative integers, use two's complement.

notes:
All hexadecimal letters (`a-f`) must be lowercase.

The hexadecimal string must not contain an extra leading ""0"". If the number is zero, it is represented by a single zero character ""0""; otherwise, the first character in the hex string will not be a zero character.

The given number is guaranteed to be within the range of a 32-bit signed integer.

You must not use any methods provided by the library to directly convert/format numbers to hex.


Example 1:
enter:
26
output:
""1a""

Example 2:
enter:
-1
output:
""ffffffff""",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array of people, `people`, which is an attribute of some people in the queue (not necessarily in order). Each `people[i] = [hi, ki]` represents the ith person with height hi, preceded by ki other people with height greater than or equal to hi.

Rebuilds and returns the queue represented by the input array ""people"". The returned queue should be formatted as an array `queue`, where `queue[j] = [hj, kj]` is the property of the jth person in the queue (`queue[0]` is the first row).


Example 1:
Input: people = [[7,0],[4,4],[7,1],[5,0],[6,1],[5,2]]
Output: [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]]
explain:
Person 0 has a height of 5 and no one else in front of him is taller or of the same height.

Person 1 has a height of 7 and no one else in front is taller or of the same height.

Person 2 has a height of 5, and there are two persons in front of him who are taller or of the same height, persons 0 and 1.

Person 3 has a height of 6, and there is a person in front of him who is taller or the same height as Person 1.

The height of person 4 is 4, and there are four people in front of him who are taller or the same height, namely people 0, 1, 2 and 3.

The height of person 5 is 7, and there is a person in front of him who is taller or the same height as person 1.

So [[5,0],[7,0],[5,2],[6,1],[4,4],[7,1]] is the reconstruction queue.


Example 2:
Input: Person = [[6,0],[5,0],[4,0],[3,2],[2,2],[1,4]]
Output: [[4,0],[5,0],[2,2],[3,2],[1,4],[6,0]]

constraint:
`1 <= people.length <= 2000`
`0 <= Hi <= 106`
`0 <= ki < people.length`
The queue is guaranteed to be rebuildable.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""m x n"" matrix of positive integers representing the height of each cell in a 2D elevation map, calculate the amount of water that can be collected after it rains.


example:
Given the following 3x6 heightmap:
[
  [1,4,3,1,3,2],
  [3,2,1,3,2,4],
  [2,3,3,2,3,1]
]
return 4.

The above figure represents the elevation map `[[1,4,3,1,3,2],[3,2,1,3,2,4],[2,3,3,2,3,1] ]` before the rain.

After the rain, water was trapped between the blocks. The total volume of trapped water is 4.


constraint:
`1 <= meters, n <= 110`
`0 <= heightMap[i][j] <= 20000`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty string ""s"" and an abbreviation ""abbr"", return whether the string matches the given abbreviation.

Strings such as ""word"" contain only the following valid abbreviations:
[""word"", ""1ord"", ""w1rd"", ""wo1d"", ""wor1"", ""2rd"", ""w2d"", ""wo2"", ""1o1d"", ""1or1"", ""w1r1"", ""1o2"", "" 2r1"", ""3d"", ""w3"", ""4""]
Note that only the above abbreviations are valid abbreviations for the string ""word"". Any other string is not a valid abbreviation for ""word"".

notes:
Assume s contains only lowercase letters and abbr contains only lowercase letters and numbers.


Example 1:
Given s = ""internationalization"", abbr = ""i12iz4n"":
True.


Example 2:
Given s = ""apple"", abbr = ""a2e"":
returns false.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s of lowercase or uppercase letters, return the length of the longest palindrome that can be constructed with those letters.

Letters are case sensitive, for example, ""Aa"" is not considered a palindrome here.


Example 1:
Input: s = ""abccccdd""
Output: 7
explain:
The longest palindrome that can be constructed is ""dccaccd"", which has length 7.


Example 2:
Input: s = ""a""
Output: 1

Example 3:
Input: s = ""bb""
Output: 2

constraint:
`1 <= s.length <= 2000`
`s` contains only lowercase and/or uppercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" consisting of non-negative integers and an integer ""m"", you can split the array into ""m"" non-empty contiguous subarrays.

Write an algorithm to minimize the largest sum among these m subarrays.


Example 1:
Input: nums = [7,2,5,10,8], m = 2
Output: 18
explain:
There are four ways to split nums into two subarrays.

The best way is to split it into [7,2,5] and [10,8],
The maximum sum of two of the subarrays is only 18.


Example 2:
Input: nums = [1,2,3,4,5], m = 2
Output: 9

Example 3:
Input: nums = [1,4,4], m = 3
Output: 4

constraint:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 106`
`1 <= m <= min(50, nums.length)`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Strings can be abbreviated by replacing any number of non-adjacent substrings with the length. For example, a string such as ""substitution"" can be abbreviated as (but not limited to):
`""s10n""` (`""s substitution n""`)
`""sub4u4""` (`""sub institution""`)
`""12""` (`""replacement""`)
`""su3i1u2on""` (`""subst i t u ti on""`)
`""replacement""` (no replacement substring)
Note that `""s55n""` (`""s ubsti tutio n""`) is not a valid abbreviation for `""substitution"" because the substrings being substituted are contiguous.

The length of the abbreviation is the number of letters not replaced plus the number of substrings replaced. For example, the abbreviation `""s10n""` has length `3` (`2` letters + `1` substring), and `""su3i1u2on""` has length `9` (`6` letters + `3` substring).

Given a target string ""target"" and an array of strings ""dictionary"", return an abbreviation of ""target"" that is as short as possible in length such that it is not an abbreviation of any string in ""dictionary"". If there are multiple shortest abbreviations, return any of them.


Example 1:
Input: target = ""apple"", dictionary = [""blade""]
Output: ""a4""
Explanation: The shortest abbreviation for ""apple"" is ""5"", but this is also an abbreviation for ""blade"".

The next shortest abbreviations are ""a4"" and ""4e"". ""4e"" is short for blade, while ""a4"" is not.

Therefore, ""a4"" is returned.


Example 2:
Input: target = ""apple"", dictionary = [""blade"", ""plain"", ""amber""]
Output: ""1p3""
Explanation: ""5"" is both an abbreviation for ""apple"" and an abbreviation for all words in the dictionary.

""a4"" is short for ""apple"" and also short for ""amber"".

""4e"" is short for ""apple"" and also short for ""blade"".

""1p3"", ""2p2"", and ""3l1"" are the next shortest abbreviations for ""apple"".

Since neither of them is an abbreviation for a word in the dictionary, returning any of them is correct.


constraint:
`target.length == m`
`dictionary. length == n`
`1 <= m <= 21`
`0 <= n <= 1000`
`1 <= dictionary[i] <= 100`
`log2(n) + m <= 21` if `n > 0`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An integer array is called an arithmetic integer array if it consists of at least three elements and the difference between any two consecutive elements is the same.

For example, ""[1,3,5,7,9]"", ""[7,7,7,7]"", and ""[3,-1,-5,-9]"" are arithmetic progressions.

Given an integer array `nums`, return the number of arithmetic subarrays of `nums`.

A subarray is a contiguous subsequence of an array.


Example 1:
Input: nums = [1,2,3,4]
Output: 3
Explanation: We have 3 arithmetic slices in nums: [1, 2, 3], [2, 3, 4] and [1,2,3,4] itself.


Example 2:
input: nums = [1]
output: 0

constraint:
`1 <= nums.length <= 5000`
`-1000 <= nums[i] <= 1000`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, returns the third largest number in the array. If the third largest value does not exist, return the largest number.


Example 1:
Input: nums = [3,2,1]
Output: 1
Explanation: The third maximum value is 1.


Example 2:
Input: nums = [1,2]
Output: 2
Explanation: The third maximum value does not exist, so the maximum value (2) is returned.


Example 3:
Input: nums = [2,2,3,1]
Output: 1
Explanation: Note that the third maximum here refers to the third largest distinct number.

Both numbers with a value of 2 are considered to be the second largest.


constraint:
`1 <= nums.length <= 104`
`-231 <= nums[i] <= 231 - 1`
Follow up: Can you find an O(n) solution?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-negative integers, `num1` and `num2` represented as strings, return the sum of `num1` and `num2` as a string.


Example 1:
Input: num1 = ""11"", num2 = ""123""
Output: ""134""

Example 2:
Input: num1 = ""456"", num2 = ""77""
Output: ""533""

Example 3:
Input: num1 = ""0"", num2 = ""0""
Output: ""0""

constraint:
`1 <= num1.length, num2.length <= 104`
`num1` and `num2` contain only numbers.

`num1` and `num2` do not have any leading zeros other than zero itself.

Follow up: Can you solve this without using any of the built-in BigInteger libraries or directly converting the input to an integer?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array ""nums"" containing only positive integers, find whether it is possible to divide the array into two subsets such that the sum of elements in both subsets is equal.


Example 1:
Input: nums = [1,5,11,5]
output: true
Explanation: The array can be divided into [1, 5, 5] and [11].


Example 2:
Input: nums = [1,2,3,5]
output: error
Explanation: The array cannot be partitioned into equal and equal subsets.


constraint:
`1 <= nums.length <= 200`
`1 <= nums[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `m x n` integer matrix `heights`, representing the height of each cell on a continent. The Pacific Ocean touches the left and upper edges of the continents, and the Atlantic Ocean touches the right and lower edges of the continents.

Water can only flow in four directions: up, down, left, and right. Water flows from one cell to an adjacent cell of the same or lower height.

Returns a list of grid coordinates where water can flow towards the Pacific Ocean and Atlantic Ocean.


Example 1:
Input: Height = [[1,2,2,3,5],[3,2,3,4,4],[2,4,5,3,1],[6,7,1,4, 5],[5,1,1,2,4]]
Output: [[0,4],[1,3],[1,4],[2,2],[3,0],[3,1],[4,0]]

Example 2:
Input: Height = [[2,1],[1,2]]
Output: [[0,0],[0,1],[1,0],[1,1]]

constraint:
`m == heights. length`
`n == heights[i].length`
`1 <= meters, n <= 200`
`1 <= height[i][j] <= 105`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""rows x columns"" screen and a sentence represented by a non-empty list of words, find out how many times a given sentence can be displayed on the screen.

notes:
A word cannot be split into two lines.

The order of the words in the sentence must remain the same.

Two consecutive words on a line must be separated by a space.

The total number of words in a sentence will not exceed 100.

The length of each word is greater than 0 and will not exceed 10.

1 ≤ rows, columns ≤ 20,000.


Example 1:
enter:
row = 2, column = 8, sentence = [""hello"", ""world""]
output:
1
explain:
Hello - -
world - -
The character ""-"" indicates a blank space on the screen.


Example 2:
enter:
rows = 3, columns = 6, sentences = [""a"", ""bcd"", ""e""]
output:
2
explain:
A B C D-
e-a---
bcd-e-
The character ""-"" indicates a blank space on the screen.


Example 3:
enter:
rows = 4, cols = 5, sentence = [""I"", ""had"", ""apple"", ""pie""]
output:
1
explain:
I have
apple
Pie-I
have - 
The character ""-"" indicates a blank space on the screen.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`, return the maximum result of `nums[i] XOR nums[j]`, where `0 ≤ i ≤ j < n`.

Follow up: Can you do this in `O(n)` runtime?

Example 1:
Input: nums = [3,10,5,25,2,8]
Output: 28
Explanation: The maximum result is 5 XOR 25 = 28.


Example 2:
input: nums = [0]
output: 0

Example 3:
Input: nums = [2,4]
Output: 6

Example 4:
Input: nums = [8,10,2]
Output: 10

Example 5:
Input: nums = [14,70,53,83,49,91,36,80,92,51,66,70]
Output: 127

constraint:
`1 <= nums.length <= 2 * 104`
`0 <= nums[i] <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" containing the scrambled English representation of the digits ""0-9"", return the digits in ascending order.


Example 1:
Input: s = ""owoztneoer""
Output: ""012""

Example 2:
Input: s = ""fviewuro""
Output: ""45""

constraint:
`1 <= s.length <= 105`
`s[i]` is one of the characters `[""e"",""g"",""f"",""i"",""h"",""o"",""n"",""s"",""r"",""u "",""t"",""w"",""v"",""x"",""z""]`.

`s` is guaranteed to work.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s consisting only of uppercase English letters, you can perform at most k operations on the string.

In one operation, you can select any character of the string and change it to any other uppercase English character.

Find the length of the longest substring containing all repeated letters that can be obtained after performing the above operations.

notes:
Neither the length of the string nor k will exceed 104.


Example 1:
enter:
s = ""ABAB"", k = 2
output:
4
explain:
Replace two ""A""s with two ""B""s and vice versa.


Example 2:
enter:
s = ""AABABBA"", k = 1
output:
4
explain:
Replace the 'A' in the middle with a 'B' and form ""AABBBBA"".

The substring ""BBBB"" has the longest repetition of 4 letters.",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of words (with no repetitions), find all word squares you can build from them.

A sequence of words forms a valid square of words if row k and column k read the exact same string, where 0 ≤ k < max(numRows, numColumns).

For example, the word sequence `[""ball"",""area"",""lead"",""lady""]` forms a word square because each word is pronounced the same both horizontally and vertically.

ball
area
lead
Miss
notes:
At least 1 and at most 1000 words.

All words are exactly the same length.

Word length must be at least 1 and at most 5.

Each word contains only lowercase English letters ""a-z"".


Example 1:
enter:
[""area"", ""lead"", ""wall"", ""ladies"", ""ball""]
output:
[
  [""wall"",
    ""area"",
    ""lead"",
    ""Miss""
  ],
  [ ""ball"",
    ""area"",
    ""lead"",
    ""Miss""
  ]
]
explain:
The output consists of two word squares. The order of the output doesn't matter (only the order of the words in each word square matters).


Example 2:
enter:
[""Abate"", ""Baba"", ""Atan"", ""Atar""]
output:
[
  [""dad"",
    ""a bat"",
    ""dad"",
    ""tanned""
  ],
  [""dad"",
    ""a bat"",
    ""dad"",
    ""Attar""
  ]
]
explain:
The output consists of two word squares. The order of the output doesn't matter (only the order of the words in each word square matters).",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Convert a binary search tree to a sorted circular doubly linked list.

You can think of left and right pointers as synonyms for predecessor and successor pointers in a doubly linked list. For a circular doubly linked list, the predecessor of the first element is the last element, and the successor of the last element is the first element.

We want to retrofit in-place. After transformation, the left pointer of the tree node points to its predecessor node, and the right pointer points to its successor node. You should return a pointer to the smallest element in the linked list.


Example 1:
Input: root = [4,2,5,1,3]
Output: [1,2,3,4,5]
Explanation: The figure below shows the transformed BST. A solid line indicates an inheritance relationship, and a dashed line indicates a predecessor relationship.


Example 2:
Input: root = [2,1,3]
Output: [1,2,3]

Example 3:
input: root = []
output: []
Explanation: The input is an empty tree. The output is also an empty linked list.

Example 4:
input: root = [1]
output: [1]

constraint:
The number of nodes in the tree is in the range '[0, 2000]'.

`-1000 <= Node.val <= 1000`
All values ​​of the tree are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Serialization is the process of converting a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted over a network connection link, for later reconstruction in the same or another computer environment.

Design an algorithm to serialize and deserialize N-ary trees. An N-ary tree is a rooted tree in which each node has no more than N children. There are no restrictions on how the serialization/deserialization algorithm works. You just need to ensure that an N-ary tree can be serialized into a string, and this string can be deserialized into the original tree structure.

For example, you can serialize the following `3-ary` tree
As `[1[3[5 6] 2 4]]`. Note that this is just an example and you don't have to follow this format.

Or you can traverse the serialization format in LeetCode's hierarchical order, with each group of children separated by a null value.

For example, the tree above might be serialized as `[1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null, 12, empty, 13, empty, empty, 14]`.

You don't necessarily need to follow the format suggested above, there are many more different formats you can use, so get creative and come up with different approaches yourself.


constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`0 <= Node.val <= 104`
The height of the n-ary tree is less than or equal to 1000
Don't use class members/global/static variables to store state. Your encoding and decoding algorithms should be stateless.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an n-ary tree, return a level-order traversal of its node values.

Nary-Tree input serialization representations are traversed in their level order, with each set of children separated by a null value (see example).


Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null ,empty,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]

constraint:
The height of the n-ary tree is less than or equal to 1000
The total number of nodes is between `[0, 104]`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a doubly linked list, and in addition to the next and previous pointers, it can have a child pointer, which may or may not point to a separate doubly linked list. These sublists may have one or more sublists of their own, and so on, to produce a multilevel data structure, as shown in the following example.

Flatten the list so that all nodes appear in a single-level doubly linked list. You will get the head of the first level of the list.


Example 1:
Input: head = [1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]
Output: [1,2,3,7,8,11,12,9,10,4,5,6]
explain:
The multilevel linked list in the input is as follows:
After flattening the multilevel linked list, it becomes:

Example 2:
Input: head = [1,2,null,3]
Output: [1,3,2]
explain:
Enter the multilevel linked list as follows:
  1---2---empty
  |
  3---empty

Example 3:
input: head = []
output: []
The representation of the multi-level linked list in the test case:

We use the multilevel linked list from Example 1 above:
 1---2---3---4---5---6--empty
         |
         7---8---9---10--empty
             |
             11--12--empty
Each level is serialized as follows:
[1,2,3,4,5,6,null]
[7,8,9,10,empty]
[11,12,empty]
To serialize all levels together, we will add null values ​​in each level to indicate that no nodes are connected to the previous level's upper nodes. Serialization becomes:
[1,2,3,4,5,6,null]
[empty,empty,7,8,9,10,empty]
[empty,11,12,empty]
Merge each level of serialization and remove the trailing nulls we get:
[1,2,3,4,5,6,null,null,null,7,8,9,10,null,null,11,12]

constraint:
The number of nodes will not exceed ""1000"".

`1 <= Node.val <= 105`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an algorithm to encode an N-ary tree into a binary tree, and decode the binary tree to get the original N-ary tree. An N-ary tree is a rooted tree in which each node has no more than N children. Similarly, a binary tree is a rooted tree where each node has no more than 2 children. There are no restrictions on how the encoding/decoding algorithm works. You just need to ensure that an N-ary tree can be encoded into a binary tree, and this binary tree can be decoded into the original N-ary tree structure.

Nary-Tree input serialization representations are traversed in their level order, with each set of children separated by a null value (see example below).

For example, you can encode the following `3-ary` tree as a binary tree this way:
Input: root = [1,null,3,2,4,null,5,6]
Note that the above is just an example and may or may not work. You don't necessarily need to follow this format, so get creative and come up with different approaches yourself.


constraint:
The height of the n-ary tree is less than or equal to 1000
The total number of nodes is between `[0, 10^4]`
Don't use class members/global/static variables to store state. Your encoding and decoding algorithms should be stateless.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a data structure that supports the following operations:
Inc(Key) - Inserts a new key with value 1. Or increment an existing key by 1. Keys are guaranteed to be non-empty strings.

Dec(Key) - If the value of Key is 1, remove it from the data structure. Otherwise decrement the existing key by 1. If the key does not exist, this function does nothing. Key is guaranteed to be a non-empty string.

GetMaxKey() - Returns one of the keys with the maximum value. Returns an empty string """" if no element exists.

GetMinKey() - Returns one of the keys with the smallest value. Returns an empty string """" if no element exists.

Challenge: Do all of this in O(1) time complexity.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of intervals, find the minimum number of intervals that need to be removed so that the remaining intervals do not overlap.


Example 1:
Input: [[1,2],[2,3],[3,4],[1,3]]
Output: 1
Explanation: [1,3] can be removed, and the remaining intervals do not overlap.


Example 2:
Input: [[1,2],[1,2],[1,2]]
Output: 2
Explanation: You need to remove both [1,2] so that the remaining intervals do not overlap.


Example 3:
Input: [[1,2],[2,3]]
output: 0
Explanation: You don't need to remove any intervals since they are already non-overlapping.

notes:
You can assume that the end of the interval is always greater than the start.

Intervals like [1,2] and [2,3] have boundaries that ""touch"", but they don't overlap each other.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree where each node contains an integer value.

Find the number of paths whose sum is a given value.

The path does not need to start or end at the root or leaf, but it must go down
(only from parent to child).

The tree has no more than 1,000 nodes and values ​​between -1,000,000 and 1,000,000.


example:
root = [10,5,-3,3,2,null,11,3,-2,null,1], sum = 8
      10
     / \
    5-3
   / \ \
  3 2 11
 / \ \
3 -2 1
return 3. The path that sums to 8 is:
1. 5 -> 3
2. 5 -> 2 -> 1
3. -3 -> 11",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and a non-empty string p, find the starting indices of all anagrams of p in s.

The string consists of lowercase English letters only, and the length of the strings s and p will not be greater than 20,100.

The output order does not matter.


Example 1:
enter:
s: ""cbaebabacd"" p: ""abc""
output:
[0, 6]
explain:
The substring with start index = 0 is ""cba"", which is an anagram of ""abc"".

The substring of start index = 6 is ""bac"", which is an anagram of ""abc"".


Example 2:
enter:
s: ""abab"" p: ""ab""
output:
[0, 1, 2]
explain:
The substring of start index = 0 is ""ab"", which is an anagram of ""ab"".

The substring of start index = 1 is ""ba"", which is an anagram of ""ab"".

The substring of start index = 2 is ""ab"", which is an anagram of ""ab"".",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string representing an arbitrarily nested ternary expression, evaluate the expression. You can always assume that the given expression is valid and contains only the numbers `0-9`, `?`, `:`, `T` and `F` (`T` and `F` stand for True and False).

notes:
The length of the given string is ≤ 10000.

Each number will contain only one digit.

Conditional expressions are grouped from right to left (as is the case in most languages).

Condition will always be ""T"" or ""F"". That is, the condition will never be a number.

The result of the expression will always evaluate to the numbers ""0-9"", ""T"" or ""F"".


Example 1:
Input: ""T?2:3""
Output: ""2""
Explanation: If true, the result is 2; otherwise, the result is 3.


Example 2:
Input: ""F?1:T?4:5""
Output: ""4""
Explanation: Conditional expressions are grouped from right to left. Using parentheses, it is read/evaluated as:
             ""(F? 1: (T? 4: 5))"" ""(F? 1: (T? 4: 5))""
          -> ""(F ? 1 : 4)"" or -> ""(T ? 4 : 5)""
          -> ""4"" -> ""4""

Example 3:
Input: ""T?T?F:5:3""
Output: ""F""
Explanation: Conditional expressions are grouped from right to left. Using parentheses, it is read/evaluated as:
             ""(T? (T? F: 5): 3)"" ""(T? (T? F: 5): 3)""
          -> ""(T ? F : 3)"" or -> ""(T ? F : 5)""
          -> ""F"" -> ""F""",0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a total of n coins and you want to group them into a staircase shape where every kth row must have exactly k coins.

Given n, find the total number of complete stair rows that can be formed.

n is a non-negative integer and is in the range of 32-bit signed integers.


Example 1:
n = 5
Coins can form the following lines:
¤
¤ ¤
¤ ¤
Because row 3 is incomplete, we return 2.


Example 2:
n = 8
Coins can form the following lines:
¤
¤ ¤
¤ ¤ ¤
¤ ¤
Because row 4 is incomplete, we return 3.",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers, 1 ≤ a[i] ≤ n (n = array size), some elements appear twice and others appear once.

Find all elements in this array that appear twice.

Can you do it without extra space and O(n) runtime?

example:
enter:
[4,3,2,7,8,2,3,1]
output:
[2,3]",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a character array ""chars"", compress it using the following algorithm:
Starts with the empty string s. For each set of consecutively repeated characters in chars:
Append characters to s if the group has length 1.

Otherwise, characters are appended followed by the length of the group.

The compressed string s should not be returned alone, but stored in the input character array chars. Note that groups of length 10 or longer will be split across characters in chars.

When finished modifying the input array, returns the new length of the array.

follow up:
Can you solve it with only `O(1)` extra space?

Example 1:
Input: chars = [""a"",""a"",""b"",""b"",""c"",""c"",""c""]
Output: return 6, the first 6 characters of the input array should be: [""a"",""2"",""b"",""2"",""c"",""3""]
Explanation: The groups are ""aa"", ""bb"" and ""ccc"". This will compress to ""a2b2c3"".


Example 2:
Input: character = [""a""]
Output: returns 1, the first character of the input array should be: [""a""]
Explanation: The only group is ""a"", which remains uncompressed because it is a single character.


Example 3:
Input: chars = [""a"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"",""b"","" b"",""b""]
Output: Return 4, the first 4 characters of the input array should be: [""a"", ""b"", ""1"", ""2""].
Explanation: The groups are ""a"" and ""bbbbbbbbbbbb"". This will compress to ""ab12"".


Example 4:
Input: chars = [""a"",""a"",""a"",""b"",""b"",""a"",""a""]
Output: return 6, the first 6 characters of the input array should be: [""a"",""3"",""b"",""2"",""a"",""2""].
Explanation: The groups are ""aaa"", ""bb"" and ""aa"". This will compress to ""a3b2a2"". Note that even if two groups have the same characters, each group is independent.


constraint:
`1 <= chars.length <= 2000`
`chars[i]` is a lowercase English letter, an uppercase English letter, a number or a symbol.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Checks whether the original sequence org can be uniquely reconstructed from the sequences in seqs. An `org` sequence is an array of integers from 1 to n, where 1 ≤ n ≤ 104. Refactoring means constructing the shortest common supersequence of the sequences in `seqs` (i.e. the shortest sequence such that all sequences in `seqs` are subsequences of it). Determine if only one sequence can be reconstructed from seqs and that is the org sequence.


Example 1:
Input: org = [1,2,3], seqs = [[1,2],[1,3]]
output: error
Explanation: [1,2,3] is not the only sequence that can be reconstructed, because [1,3,2] is also a valid sequence that can be reconstructed.


Example 2:
Input: org = [1,2,3], seqs = [[1,2]]
output: error
Explanation: The reconstruction sequence can only be [1,2].


Example 3:
Input: org = [1,2,3], seqs = [[1,2],[1,3],[2,3]]
output: true
Explanation: The sequence [1,2], [1,3], [2,3] can uniquely reconstruct the original sequence [1,2,3].


Example 4:
Input: org = [4,1,5,2,6,3], seqs = [[5,2,6,3],[4,1,5,2]]
output: true

constraint:
`1 <= n <= 10^4`
`org` is an arrangement of {1,2,...,n}.

`1 <= segment[i].length <= 10^5`
`seqs[i][j]` fits into a 32-bit signed integer.

Update (2017/1/8):
The seqs argument has been changed to a list of lists of strings (instead of a 2D array of strings). Please reload the code definition to get the latest changes.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Given two non-empty linked lists, representing two non-negative integers. The most significant numbers come first, and each of their nodes contains a number. Adds these two numbers and returns it as a linked list.

You can assume that these two numbers do not contain any leading zeros, except for the number 0 itself.

follow up:
What if you can't modify the input list? In other words, reversing the list is not allowed.


example:
Input: (7 -> 2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 8 -> 0 -> 7",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sequence of numbers is said to be an arithmetic sequence if it consists of at least three elements and the difference between any two consecutive elements is the same.

For example, these are arithmetic sequences:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequences are not arithmetic sequences.

1, 1, 2, 5, 7
Given a zero-indexed array A of N numbers. A subsequence slice of this array is any sequence of integers (P0, P1, ..., Pk) such that 0 ≤ P0 < P1 < ... < Pk < N.

If the sequence A[P0], A[P1], ..., A[Pk-1], A[Pk] is arithmetic, then a subsequence slice (P0, P1, ..., Pk) of the array A is called for arithmetic. In particular, this implies k ≥ 2.

The function should return the number of arithmetic subsequence slices in array A .

The input contains N integers. Every integer is in the range -231 and 231-1 and 0 ≤ N ≤ 1000. The output is guaranteed to be less than 231-1.


example:
Input: [2, 4, 6, 8, 10]
Output: 7
explain:
All arithmetic subsequence slices are:
[2,4,6]
[4,6,8]
[6,8,10]
[2,4,6,8]
[4,6,8,10]
[2,4,6,8,10]
[2,6,10]",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given n different points on the plane, where point[i] = [xi, yi]. A boomerang is a tuple of points `(i, j, k)` such that the distance between `i` and `j` is equal to the distance between `i` and `k` (the order of the tuples matters).

Returns the number of boomerangs.


Example 1:
Input: Points = [[0,0],[1,0],[2,0]]
Output: 2
Explanation: The two boomerangs are [[1,0],[0,0],[2,0]] and [[1,0],[2,0],[0,0]].


Example 2:
Input: points = [[1,1],[2,2],[3,3]]
Output: 2

Example 3:
Input: Points = [[1,1]]
output: 0

constraint:
`n == points. length`
`1 <= n <= 500`
`points[i].length == 2`
`-104 <= xi, yi <= 104`
All points are unique.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` consisting of `n` integers, where `nums[i]` is in the range `[1, n]`, return an array containing all integers in the range `[1, n]` Appears in `nums`.


Example 1:
Input: nums = [4,3,2,7,8,2,3,1]
Output: [5,6]

Example 2:
Input: nums = [1,1]
output: [2]

constraint:
`n == nums. length`
`1 <= n <= 105`
`1 <= nums[i] <= n`
Follow up: Can you do it in `O(n)` runtime without extra space? You can assume that the returned list doesn't count as extra space.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Serialization converts a data structure or object into a sequence of bits so that it can be stored in a file or memory buffer, or transmitted over a network connection link for later reconstruction in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary search tree. There are no restrictions on how the serialization/deserialization algorithm works. You need to ensure that a binary search tree can be serialized into a string, and this string can be deserialized into the original tree structure.

The encoded string should be as compact as possible.


Example 1:
Input: root = [2,1,3]
Output: [2,1,3]

Example 2:
input: root = []
output: []

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`0 <= Node.val <= 104`
The input tree is guaranteed to be a binary search tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a BST root node reference and a key, delete the node with the given key in the BST. Returns the root node reference (possibly updated) of the BST.

Basically, deletion can be divided into two phases:
Search for the node to delete.

If the node is found, delete the node.

Follow up: Can you solve it with time complexity `O(height of tree)`?

Example 1:
Input: root = [5,3,6,2,4,null,7], key = 3
Output: [5,4,6,2,null,null,7]
Explanation: The given key to delete is 3. So we find the node with value 3 and delete it.

A valid answer is [5,4,6,2,null,null,7], as shown in the BST above.

Note that another valid answer is [5,2,6,null,4,null,7] which is also accepted.


Example 2:
Input: root = [5,3,6,2,4,null,7], key = 0
Output: [5,3,6,2,4,null,7]
Explanation: The tree contains no nodes with value 0.


Example 3:
Input: root = [], key = 0
output: []

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`-105 <= Node.val <= 105`
Each node has a unique value.

`root` is a valid binary search tree.

`-105 <= key <= 105`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string, sort the characters in descending order of frequency.


Example 1:
enter:
""Tree""
output:
""effort""
explain:
'e' appears twice, and both 'r' and 't' appear once.

So 'e' must appear before 'r' and 't'. So ""eetr"" is also a valid answer.


Example 2:
enter:
""cccaaa""
output:
""cccaaa""
explain:
Both 'c' and 'a' occur three times, so ""aaaccc"" is also a valid answer.

Note that ""cacaca"" is incorrect because identical characters must be placed together.


Example 3:
enter:
""Abu""
output:
""bbAa""
explain:
""bbaA"" is also a valid answer, but ""Aabb"" is incorrect.

Note that 'A' and 'a' are treated as two different characters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are some spherical balloons scattered in the two-dimensional space. For each balloon, the inputs provided are the start and end coordinates of the horizontal diameter. Since it's horizontal, the y coordinate doesn't matter, so the x coordinates of the diameter's start and end points will suffice. The starting point is always smaller than the ending point.

Arrows can shoot perfectly perpendicular from different points on the x-axis. If `xstart` ≤ x ≤ xend`, the balloon with `xstart` and `xend` will be popped by an arrow pointing at `x`. There is no limit to the number of arrows that can be shot. Once an arrow is shot, it will go upwards infinitely.

Given an array points where points[i] = [xstart, xend], return the minimum number of arrows that must be shot to pop all balloons.


Example 1:
Input: points = [[10,16],[2,8],[1,6],[7,12]]
Output: 2
Explanation: For example, one way is to shoot an arrow at x = 6 (popping balloons [2,8] and [1,6]), then shoot another arrow at x = 11 (popping the other two balloons ).


Example 2:
Input: points = [[1,2],[3,4],[5,6],[7,8]]
Output: 4

Example 3:
Input: points = [[1,2],[2,3],[3,4],[4,5]]
Output: 2

constraint:
`0 <= points.length <= 104`
`points[i].length == 2`
`-231 <= xstart < xend <= 231 - 1`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" of size ""n"", return the minimum number of moves required to make all array elements equal.

In just one step, you can increment ""n - 1"" elements of the array by ""1"".


Example 1:
Input: nums = [1,2,3]
Output: 3
Explanation: Only three actions are needed (remember that each action adds two elements):
[1,2,3] => [2,3,3] => [3,4,3] => [4,4,4]

Example 2:
Input: nums = [1,1,1]
output: 0

constraint:
`n == nums. length`
`1 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given four lists of integer values ​​A, B, C, D, count how many tuples `(i, j, k, l)` satisfy `A[i] + B[j] + C[k] + D [ l]` is zero.

To simplify matters, all A, B, C, D have the same length N, where 0 ≤ N ≤ 500. All integers are in the range -228 to 228 - 1, and the result is guaranteed to be at most 231 - 1.


example:
enter:
A = [1, 2]
B = [-2,-1]
C = [-1, 2]
D = [0, 2]
output:
2
explain:
The two tuples are:
1. (0, 0, 0, 1) -> A[0] + B[0] + C[0] + D[1] = 1 + (-2) + (-1) + 2 = 0
2. (1, 1, 0, 0) -> A[1] + B[1] + C[0] + D[0] = 2 + (-1) + (-1) + 0 = 0",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let's say you're an amazing parent and want to give your kids some cookies. However, at most you should give each child one cookie.

Each child ""i"" has a greedy factor ""g[i]"", which is the smallest cookie size the child is satisfied with; each cookie `j` is of size `s[j]`. If `s[j] >= g[i]`, we can assign cookie `j` to child `i`, and child `i` will be the content. Your goal is to maximize the number of content children and output the maximum number.


Example 1:
Input: g = [1,2,3], s = [1,1]
Output: 1
Explanation: You have 3 children and 2 cookies. The greed factors of the 3 children are 1, 2, 3 respectively.
Even if you have 2 cookies, since they both have size 1, you can only satisfy children with a greedy factor of 1.

You need to output 1.


Example 2:
Input: g = [1,2], s = [1,2,3]
Output: 2
Explanation: You have 2 children and 3 cookies. The greed factors of the 2 children are 1 and 2 respectively.
You have 3 cookies that are big enough to keep all the kids happy,
You need to output 2.


constraint:
`1 <= g.length <= 3 * 104`
`0 <= s.length <= 3 * 104`
`1 <= g[i], s[j] <= 231 - 1`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array containing ""n"" integers ""nums"", a 132 pattern is a subsequence of three integers ""nums[i]"", ""nums[j]"" and ""nums[k]"" such that ""i < j < k"" and `nums[i] < nums[k] < nums[j]`.

Returns `true` if there are 132 patterns in `nums`, otherwise returns `false`.

Follow up: `O(n^2)` is easy, can you come up with a `O(n logn)` or `O(n)` solution?

Example 1:
Input: nums = [1,2,3,4]
output: error
Explanation: There is no 132 pattern in the sequence.


Example 2:
Input: nums = [3,1,4,2]
output: true
Explanation: There is a 132 pattern in the sequence: [1, 4, 2].


Example 3:
Input: nums = [-1,3,2,0]
output: true
Explanation: There are 3 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].


constraint:
`n == nums. length`
`1 <= n <= 104`
`-109 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a game involving a looping array of non-zero integer ""nums"". Each `nums[i]` represents the number of indexes you have to move forward/backward if you are at index `i`:
If `nums[i]` is positive, move `nums[i]` forward, and
If `nums[i]` is negative, move backward `nums[i]` steps.

Since arrays are circular, you might assume that moving forward from the last element is the first element and moving backward from the first element is the last element.

A loop over an array consists of a sequence of indices ""seq"" of length ""k"", where:
Following the shifting rules above results in repeating the index sequence `seq[0] -> seq[1] -> ... -> seq[k - 1] -> seq[0] -> ...`
Each `nums[seq[j]]` is either all positive or all negative.

`k > 1`
Returns true if there is a cycle in nums , false otherwise.


Example 1:
Input: nums = [2,-1,1,2,2]
output: true
explain:
There is a loop from index 0 -> 2 -> 3 -> 0 -> ...

The loop length is 3.


Example 2:
Input: nums = [-1,2]
output: error
explain:
The sequence starting from index 1 -> 1 -> 1 -> ... is not a cycle because the length of the sequence is 1.

By definition, a sequence must have length strictly greater than 1 to be a cycle.


Example 3:
Input: nums = [-2,1,-1,-2,-2]
output: error
explain:
The sequence starting from index 1 -> 2 -> 1 -> ... is not a cycle because nums[1] is positive and nums[2] is negative.

Each nums[seq[j]] must be all positive or all negative.


constraint:
`1 <= nums.length <= 5000`
`-1000 <= nums[i] <= 1000`
`nums[i] != 0`
Follow up: Can you solve it with `O(n)` time complexity and `O(1)` extra space complexity?",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s , check whether it can be constructed by taking a substring of it and appending together multiple copies of the substring.


Example 1:
Input: s = ""abab""
output: true
Explanation: It is the substring ""ab"" twice.


Example 2:
Input: s = ""aba""
output: error

Example 3:
Input: s = ""abcabcabcabc""
output: true
Explanation: It is the substring ""abc"" four times or the substring ""abcabc"" twice.


constraint:
`1 <= s.length <= 104`
`s` consists of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design and implement data structures for a least frequently used (LFU) cache.

Implement the ""LFUCache"" class:
`LFUCache(int capacity)` initializes the object with the `capacity` of the data structure.

`int get(int key)` If `key` exists in the cache, get the value of `key`. Otherwise, return ""-1"".

`void put(int key, int value)` updates the value of `key` if it exists, and inserts `key` if it does not exist. When the cache reaches its ""capacity"", it should invalidate the least used keys and remove them before inserting new items. For this problem, when there is a tie (i.e. two or more keys with the same frequency), the least recently used ""key"" will be invalidated.

To determine the least frequently used keys, a usage counter is maintained for each key in the cache. The key with the lowest usage counter is the least frequently used key.

When a key is inserted into the cache for the first time, its usage counter is set to ""1"" (due to the ""put"" operation). A usage counter is incremented for a key in the cache, or a ""get"" or ""put"" operation is called on it.


Example 1:
enter
[""LFUCache"", ""put"", ""put"", ""get"", ""put"", ""get"", ""get"", ""put"", ""get"", ""get"", ""get""]
[[2], [1, 1], [2, 2], [1], [3, 3], [2], [3], [4, 4], [1], [3], [ 4]]
output
[empty, empty, empty, 1, empty, -1, 3, empty, -1, 3, 4]
explain
// cnt(x) = usage counter for key x
// cache=[] will show tiebreakers in last used order (leftmost element is newest)
LFUCache lfu = new LFUCache(2);
lfu.put(1, 1); // cache=[1,_], cnt(1)=1
lfu.put(2, 2); // cache=[2,1], cnt(2)=1, cnt(1)=1
lfu.get(1); // returns 1
                 // Cache=[1,2], cnt(2)=1, cnt(1)=2
lfu.put(3, 3); // 2 is the LFU key, since cnt(2)=1 is the minimum, making 2 invalid.

                 // Cache=[3,1], cnt(3)=1, cnt(1)=2
lfu.get(2); // returns -1 (not found)
lfu.get(3); // returns 3
                 // Cache=[3,1], cnt(3)=2, cnt(1)=2
lfu.put(4, 4); // 1 and 3 have the same cnt, but 1 is LRU, making 1 invalid.

                 // Cache=[4,3], cnt(4)=1, cnt(3)=2
lfu.get(1); // returns -1 (not found)
lfu.get(3); // returns 3
                 // Cache=[3,4], cnt(4)=1, cnt(3)=3
lfu.get(4); // returns 4
                 // Cache=[3,4], cnt(4)=2, cnt(3)=3

constraint:
`0 <= capacity, key, value <= 104`
Up to 105 calls to get and put will be made.

Follow up: Can you do both operations in `O(1)` time complexity?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Hamming distance between two integers is the number of positions where the corresponding bits differ.

Given two integers ""x"" and ""y"", compute the Hamming distance.

notes:
0 ≤ `x`, `y` < 231.


example:
Input: x=1, y=4
Output: 2
explain:
1 (0 0 0 1)
4 (0 1 0 0)
       ↑ ↑
Arrows above point to locations where the corresponding bits differ.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array of integers, find the minimum number of moves required to make all array elements equal, where the moves are incrementing the selected element by 1 or decrementing the selected element by 1.

You can assume that the length of the array is at most 10,000.


example:
enter:
[1,2,3]
output:
2
explain:
Only two moves are required (remember that each move increases or decreases an element):
[1,2,3] => [2,2,3] => [2,2,2]",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.

Grid cells are connected horizontally/vertically (not diagonally). A ""grid"" is completely surrounded by water and has only one island (i.e. one or more connected land units).

There are no ""lakes"" on the island, which means that the water inside the island is not connected to the water around the island. A cell is a square with side length 1. The grid is rectangular with width and height not exceeding 100. Determine the perimeter of the island.


Example 1:
Input: grid = [[0,1,0,0],[1,1,1,0],[0,1,0,0],[1,1,0,0]]
output: 16
Explanation: The perimeter is the 16 yellow stripes in the picture above.


Example 2:
Input: Grid = [[1]]
Output: 4

Example 3:
Input: Grid = [[1,0]]
Output: 4

constraint:
`row == grid. length`
`col == grid[i].length`
`1 <= rows, columns <= 100`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the ""Game of 100,"" two players take turns adding any whole number between ""1"" and ""10"" to a sum. The first player to reach a total of 100 points or more wins.

What if we changed the game so that players couldn't reuse integers?
For example, two players might take turns drawing from a common pool of numbers from 1 to 15 without replacement until the total is >= 100.

Given two integers maxChoosableInteger and desiredTotal, return ""true"" if the first player to move can force a win, otherwise return ""false"". Assume that both players play best.


Example 1:
Input: maxChoosableInteger = 10, desiredTotal = 11
output: error
explain:
No matter which integer the first player chooses, the first player loses.

The first player can choose an integer from 1 to 10.

If the first player chooses 1, the second player can only choose an integer between 2 and 10.

The second player will win by picking 10 and get total = 11, which is >= desiredTotal.

Same with other integers chosen by the first player, the second player always wins.


Example 2:
Input: maxChoosableInteger = 10, desiredTotal = 0
output: true

Example 3:
Input: maxChoosableInteger = 10, desiredTotal = 1
output: true

constraint:
`1 <= maxChoosableInteger <= 20`
`0 <= desiredTotal <= 300`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Define `S = [s,n]` to be a string S consisting of n contiguous strings s. For example, `[""abc"", 3]` = ""abcabcabc"".
On the other hand, we define that a string s1 can be obtained from a string s2 if we can remove some characters from s2 such that it becomes s1. For example, ""abc"" can be derived from ""abdbec"" but not ""acbbe"" by our definition.

Given two non-empty strings s1 and s2 (each with at most 100 characters) and two integers 0 ≤ n1 ≤ 106 and 1 ≤ n2 ≤ 106. Now consider the strings S1 and S2, where `S1=[s1,n1 ]` and `S2=[s2,n2]`. Find the largest integer M such that `[S2,M]` can be obtained from `S1`.


example:
enter:
s1=""acb"", n1=4
s2=""ab"", n2=2
return:
2",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Treat the string s as an infinite wraparound string of ""abcdefghijklmnopqrstuvwxyz"", so s will look like this: ""...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd...."".

Now we have another string `p`. Your job is to find out how many unique non-empty substrings of `p` exist in `s`. In particular, your input is the string p, and you need to output the number of distinct non-empty substrings of p in the string s.

Note: `p` is only composed of lowercase English letters, and the size of p may exceed 10000.


Example 1:
Input: ""one""
Output: 1
Explanation: Only the substring ""a"" of the string ""a"" is in the string s.


Example 2:
Enter: ""cac""
Output: 2
Explanation: There are two substrings ""a"" and ""c"" of the string ""cac"" in the string s.


Example 3:
Enter: ""zab""
Output: 6
Explanation: There are six substrings ""z"", ""a"", ""b"", ""za"", ""ab"", ""zab"" of the string ""zab"" in the string s.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""IP"", returns ""IPv4"" if the IP is a valid IPv4 address, ""IPv6"" if the IP is a valid IPv6 address, and ""Neither "".

A valid IPv4 address is an IP of the form ""x1.x2.x3.x4"", where 0 <= xi <= 255 and xi cannot contain leading zeros. For example, `""192.168.1.1""` and `""192.168.1.0""` are valid IPv4 addresses, while `""192.168.01.1""` and `""192.168.1.00""` and `""192.168@1.1""` are invalid IPv4 address address.

A valid IPv6 address is an IP of the form ""x1:x2:x3:x4:x5:x6:x7:x8"", where:
`1 <= xi.length <= 4`
`xi` is a hexadecimal string that can contain numbers, lowercase English letters (`'a'` to `'f'`), and uppercase English letters (`'A'` to `'F'`).

Leading zeros are allowed in `xi`.

For example, ""`2001:0db8:85a3:0000:0000:8a2e:0370:7334""` and ""`2001:db8:85a3:0:0:8A2E:0370:7334""` are valid IPv6 addresses, while ""` 2001:0db8:85a3::8A2E:037j:7334""` and ""`02001:0db8:85a3:0000:0000:8a2e:0370:7334""` are invalid IPv6 addresses.


Example 1:
Input: IP = ""172.16.254.1""
Output: ""IPv4""
Explanation: This is a valid IPv4 address, returns ""IPv4"".


Example 2:
Input: IP = ""2001:0db8:85a3:0:0:8A2E:0370:7334""
Output: ""IPv6""
Explanation: This is a valid IPv6 address, returns ""IPv6"".


Example 3:
Input: IP = ""256.256.256.256""
Output: ""neither""
Explanation: This is neither an IPv4 address nor an IPv6 address.


Example 4:
Input: IP = ""2001:0db8:85a3:0:0:8A2E:0370:7334:""
Output: ""neither""

Example 5:
Input: IP = ""1e1.4.5.6""
Output: ""neither""

constraint:
`IP` consists only of English letters, numbers and characters `'.'` and `':'.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of points connected in order to form a polygon, finds whether this polygon is convex (convex polygon definition).

notes:
There are at least 3 and a maximum of 10,000 points.

Coordinates are in the range -10,000 to 10,000.

You can assume that the polygon formed by the given points is always a simple polygon (simple polygon definition). In other words, we ensure that exactly two edges intersect at each vertex, otherwise the edges do not intersect each other.


Example 1:
[[0,0],[0,1],[1,1],[1,0]]
Answer: yes
explain:

Example 2:
[[0,0],[0,10],[10,10],[10,0],[5,5]]
Answer: wrong
explain:",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an API `rand7()` that generates uniform random integers in the range `[1, 7]`, write a function `rand10()` that generates uniform random integers in the range `[1, 10]`. You can only call API `rand7()`, you should not call any other API. Please don't use random APIs built into the language.

Each test case has an internal parameter ""n"", which is the number of times the function ""rand10()"" implemented by you is called during the test. Note that this is not an argument passed to rand10() .

follow up:
What is the expected value of the number of calls to the rand7() function?
Can you minimize the number of calls to rand7() ?

Example 1:
Input: n = 1
output: [2]

Example 2:
Input: n = 2
Output: [2,8]

Example 3:
Input: n = 3
Output: [3,8,10]

constraint:
`1 <= n <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0
"Given a non-empty string, encode the string so that its encoded length is the shortest.

The encoding rule is: `k[encoded_string]`, where `encoded_string` in square brackets is repeated `k` times.

notes:
`k` will be a positive integer.

If the encoding process doesn't make the string shorter, then don't encode it. If there are multiple solutions, return any of them.


Example 1:
Input: s = ""aaa""
Output: ""aaa""
Explanation: It cannot be encoded to be shorter than the input string, so we do not encode it.


Example 2:
Input: s = ""aaaaa""
Output: ""5[a]""
Explanation: ""5[a]"" is 1 character shorter than ""aaaaa"".


Example 3:
Input: s = ""aaaaaaaaaa""
Output: ""10[a]""
Explanation: ""a9[a]"" or ""9[a]a"" are also valid solutions, both of length 5, the same as ""10[a]"".


Example 4:
Input: s = ""aabcaabcd""
Output: ""2[aabc]d""
Explanation: ""aabc"" appears twice, so one answer could be ""2[aabc]d"".


Example 5:
Input: s = ""abbbabbbcabbbabbbc""
Output: ""2[2[abbb]c]""
Explanation: ""abbbabbbc"" occurs twice, but ""abbbabbbc"" can also be encoded as ""2[abbb]c"", so an answer can be ""2[2[abbb]c]"".


constraint:
`1 <= s.length <= 150`
`s` contains only lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array ""words"" (with no duplicates), return all concatenated words in the given ""words"" list.

A connective is defined as a string consisting entirely of at least two shorter words from the given array.


Example 1:
Input: words = [""cat"",""cats"",""catsdogcats"",""dog"",""dogcatsdog"",""hippopotamuses"",""rat"",""ratcatdogcat""]
Output: [""catsdogcats"",""dogcatsdog"",""ratcatdogcat""]
Explanation: ""catsdogcats"" can be connected by ""cats"", ""dog"" and ""cats"";
""dogcatsdog"" can be concatenated by ""dog"", ""cats"" and ""dog"";
""ratcatdogcat"" can be concatenated by ""rat"", ""cat"", ""dog"" and ""cat"".


Example 2:
Input: words = [""cat"",""dog"",""catdog""]
Output: [""catdog""]

constraint:
`1 <= words.length <= 104`
`0 <= words[i].length <= 1000`
`words[i]` contains only lowercase English letters.

`0 <= sum(words[i].length) <= 6 * 105`",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Remember the story of the little match girl? Now that you know what matches the little match girl has, please find a way to use up all the matches and form a square. You shouldn't break any matches, but you can connect them, each match must be used exactly once.

 Your input will be the number of matches the girl has, represented by the length of the matches. Your output will be true or false to indicate whether you can make a square using all the matches the little match girl has.


Example 1:
Input: [1,1,2,2,2]
output: true
Explanation: You can form a square of length 2 with two sticks of length 1 on one side of the square.


Example 2:
Input: [3,3,3,3,4]
output: error
Explanation: You cannot find a way to form a square with all the matchsticks.

notes:
The sum of the lengths of a given match is in the range ""0"" to ""10^9"".

The length of the given matchstick array will not exceed ""15"".",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of binary strings ""strs"" and two integers ""m"" and ""n"".

Returns the size of the largest subset of `strs` such that there are at most `m` `0`s and `n` `1`s in the subset.

A set `x` is a subset of a set `y` if all elements of `x` are also elements of `y`.


Example 1:
Input: strs = [""10"",""0001"",""111001"",""1"",""0""], m = 5, n = 3
Output: 4
Explanation: The largest subset with at most 5 0s and 3 1s is {""10"", ""0001"", ""1"", ""0""}, so the answer is 4.

Other valid but smaller subsets include {""0001"", ""1""} and {""10"", ""1"", ""0""}.

{""111001""} is an invalid subset because it contains 4 1s, which is greater than the maximum value of 3.


Example 2:
Input: strs = [""10"",""0"",""1""], m = 1, n = 1
Output: 2
Explanation: The largest subset is {""0"", ""1""}, so the answer is 2.


constraint:
`1 <= strs.length <= 600`
`1 <= strs[i].length <= 100`
`strs[i]` consists only of the digits ""0"" and ""1"".

`1 <= meters, n <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"winter is here! During the game, your first job is to design a standard heater with a fixed heating radius to heat all the houses.

Every house can be heated, as long as the house is within the heating radius of the heater.
Given the positions of ""houses"" and ""heaters"" on the horizon, return the minimum radius criteria for heaters such that these heaters can cover all houses.

Note that all ""heaters"" follow your radius standard, and the warmer radius will be the same.


Example 1:
Input: House = [1,2,3], Heater = [2]
Output: 1
Explanation: The only heater is placed at position 2, if we use the radius 1 criterion, then all houses can be heated.


Example 2:
Input: House = [1,2,3,4], Heater = [1,4]
Output: 1
Instructions: Two heaters are placed in positions 1 and 4 respectively. We need to use radius 1 standard, then all houses can be heated.


Example 3:
Input: House = [1,5], Heater = [2]
Output: 3

constraint:
`1 <= houses.length, heaters.length <= 3 * 104`
`1 <= houses[i], heaters[i] <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer num , output its complement. The complement strategy is to flip the bits of its binary representation.


Example 1:
Input: num = 5
Output: 2
Explanation: The binary representation of 5 is 101 (without leading zero), and its complement is 010, so 2 needs to be output.


Example 2:
Input: num = 1
output: 0
Explanation: The binary representation of 1 is 1 (no leading zero), and its complement is 0, so 0 needs to be output.


constraint:
The given integer 'num' is guaranteed to be within the range of a 32-bit signed integer.

`num >= 1`
You can assume that there are no leading zero bits in the binary representation of an integer.

This question is the same as 1009: https://leetcode.com/problems/complement-of-base-10-integer/",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Hamming distance between two integers is the number of positions where the corresponding bits differ.

Now your job is to find the total Hamming distance between all pairs of given numbers.


example:
Input: 4, 14, 2
Output: 6
Explanation: In binary representation, 4 is 0100, 14 is 1110, 2 is 0010 (exactly
show the four bits that are relevant in this case). So the answer will be:
Hamming distance (4, 14) + Hamming distance (4, 2) + Hamming distance (14, 2) = 2 + 2 + 2 = 6.

notes:
The elements of the given array are in the range ""0"" to ""10^9""
The length of the array will not exceed `10^4`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the radius and location of the center of the circle, implement the function `randPoint` to generate a uniform random point inside the circle.

Implement the ""Solution"" class:
`Solution(double radius, double x_center, double y_center)` initializes the object with the radius `radius` of the circle and the center position `(x_center, y_center)`.

`randPoint()` returns a random point inside the circle. A point on the circumference of a circle is said to be inside the circle. The answer is returned as an array ""[x, y]"".


Example 1:
enter
[""solution"", ""randPoint"", ""randPoint"", ""randPoint""]
[[1.0, 0.0, 0.0], [], [], []]
output
[empty, [-0.02493, -0.38077], [0.82314, 0.38945], [0.36572, 0.17248]]
explain
Solution solution = new Solution(1.0, 0.0, 0.0);
Solution.randPoint(); // returns [-0.02493, -0.38077]
Solution.randPoint(); // returns [0.82314, 0.38945]
Solution.randPoint(); // returns [0.36572, 0.17248]

constraint:
`0 < radius <= 108`
`-107 <= x_center, y_center <= 107`
At most 3 * 104 calls to randPoint will be made.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0
"The median is the middle value in an ordered list of integers. If the size of the list is even, there are no intermediate values. So the median is the average of the two middle values.


example:
`[2,3,4]`, the median is `3`
`[2,3]`, the median is `(2 + 3) / 2 = 2.5`
Given an array nums, there is a sliding window of size k that moves from the leftmost to the rightmost of the array. You can only see k numbers in the window. Each time the sliding window moves one position to the right. Your job is to output an array of median values ​​for each window in the original array.

For example,
Given nums = `[1,3,-1,-3,5,3,6,7]` and k = 3.

Median window position
--------------------
[1 3 -1] -3 5 3 6 7 1
 1 [3 -1 -3] 5 3 6 7 -1
 1 3 [-1 -3 5] 3 6 7 -1
 1 3 -1 [-3 5 3] 6 7 3
 1 3 -1 -3 [5 3 6] 7 5
 1 3 -1 -3 5 [3 6 7] 6
So, return the median sliding window as ""[1,-1,-1,3,5,6]"".

notes:
You can assume that `k` is always valid, ie: for non-empty arrays, `k` is always smaller than the size of the input array.

Answers within 10^-5 of the actual value will be considered correct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For an integer n, we say that k>=2 is a good basis for n if all digits of n-base k are 1.

Now given a string representing n, you should return the smallest good cardinality of n in string format.


Example 1:
Input: ""13""
Output: ""3""
Explanation: 13 in base 3 is 111.


Example 2:
Enter: ""4681""
Output: ""8""
Explanation: 4681 is 11111 in base 8.


Example 3:
Input: ""1000000000000000000""
Output: ""999999999999999999""
Explanation: 1000000000000000000 base 9999999999999999999 is 11.

notes:
The range of n is [3, 10^18].

The string representing n is always valid and will not have leading zeros.",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"So far, you have obtained a secret signature consisting of the characters ""D"" and ""I"". 'D' represents a decreasing relationship between two numbers, and 'I' represents an increasing relationship between two numbers. And our secret signature is constructed from a special integer array that uniquely contains all distinct numbers from 1 to n (n is the length of the secret signature plus 1). For example, the secret signature ""DI"" can be constructed from the array [2,1,3] or [3,1,2], but not from the array [3,2,4] or [2,1],3,4 ], are all illegally constructed special strings, which cannot represent the ""DI"" secret signature.

On the other hand, now your job is to find the lexicographically smallest permutation of [1, 2, ... n] that can refer to the secret signature given in the input.


Example 1:
Enter: ""I""
output: [1,2]
Explanation: [1,2] is the only legal initial letter special string, which can construct the secret signature ""I"", where the numbers 1 and 2 form an incremental relationship.


Example 2:
Input: ""DI""
Output: [2,1,3]
Explanation: Both [2,1,3] and [3,1,2] can construct the secret signature ""DI"", but since we want to find the one with the smallest lexicographic order, we need to output [2,1, 3]
notes:
The input string will only contain the characters ""D"" and ""I"".

The length of the input string is a positive integer and will not exceed 10000",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array, find the maximum number of consecutive 1s in the array.


Example 1:
Input: [1,1,0,1,1,1]
Output: 3
Note: The first two or last three digits are consecutive 1s.

    The maximum number of consecutive 1's is 3.

notes:
The input array will only contain ""0"" and ""1"".

The length of the input array is a positive integer and will not exceed 10000",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of non-negative integer fractions. Player 1 chooses a number from either end of the array, then Player 2, then Player 1, and so on. Every time a player chooses a number, the next player will not be able to use that number. This continues until all scores have been selected. The player with the highest score wins.

Given a set of scores, predict whether player 1 will win. You can assume that each player is playing the game to maximize his score.


Example 1:
Input: [1, 5, 2]
output: error
Explanation: Initially, player 1 can choose between 1 and 2.
If he chooses 2 (or 1), player 2 can choose from 1 (or 2) and 5. If Player 2 chooses 5, Player 1 will be left with 1 (or 2).
Therefore, the final score for Player 1 is 1 + 2 = 3 and for Player 2 it is 5.
Therefore, Player 1 will never be the winner and you need to return False.


Example 2:
Input: [1, 5, 233, 7]
output: true
Explanation: Player 1 chooses 1 first. Player 2 must then choose between 5 and 7. Regardless of which number Player 2 chooses, Player 1 can choose 233.

Finally, Player 1 has more points (234) than Player 2 (12), so you need to return True to indicate that Player 1 can win.


constraint:
1 <= array length <= 20.

Any fraction in the given array is a non-negative integer and will never exceed 10,000,000.

If both players have equal scores, then Player 1 is still the winner.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array, find the maximum number of consecutive 1s in the array if at most one 0 can be flipped.


Example 1:
Input: [1,0,1,1,0]
Output: 4
Explanation: Flipping the first zero will give the maximum number of consecutive 1s.

    After flipping, the maximum number of consecutive 1s is 4.

notes:
The input array will only contain ""0"" and ""1"".

The length of the input array is a positive integer and will not exceed 10000
follow up:
What if the input numbers come one after the other in an infinite stream? In other words, you can't store all the numbers from the stream because it's too large to hold in memory. Can you solve it effectively?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Think of a Zuma game. There is a row of balls on a table, the colors are red (R), yellow (Y), blue (B), green (G) and white (W). You still have a few balls in your hand.

Each time, you can choose a ball in your hand to insert it into that row (including the leftmost and rightmost positions). Then, if there is a group of 3 or more balls of the same color touching each other, those balls are removed. Keep doing this until no more balls can be removed.

Find the smallest ball you have to insert to remove all balls from the table. If you cannot remove all balls, output -1.


Example 1:
Input: board=""WRRBBW"", hand=""RB""
Output: -1
Explanation: WRRBBW -> WRR[R]BBW -> WBBW -> WBB[B]W -> WW

Example 2:
Input: board=""WWRRBBWW"", hand=""WRBRW""
Output: 2
Explanation: WWRRBBWW -> WWRR[R]BBWW -> WWBBWW -> WWBB[B]WW -> WWWW -> Empty

Example 3:
Input: board = ""G"", hand = ""GGGGG""
Output: 2
Explanation: G -> G[G] -> GG[G] -> empty

Example 4:
Input: board=""RBYYBBRRB"", hand=""YRBGB""
Output: 3
Explanation: RBYYBBRRB -> RBYY[Y]BBRRB -> RBBBRRB -> RRRB -> B -> B[B] -> BB[B] -> empty

constraint:
You might assume that the first row of balls on the table won't have any 3 or more consecutive balls of the same color.

`1 <= board.length <= 16`
`1 <= hand.length <= 5`
Both input strings will be non-empty and contain only the characters ""R"", ""Y"", ""B"", ""G"", ""W"".",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a robot cleaner in a room modeled as a grid.

Each cell in the grid can be empty or blocked.

A robot vacuum with 4 given APIs can go forward, turn left or turn right. Every turn it makes is 90 degrees.

When it tries to enter a blocked cell, its bumper sensor detects the obstacle and stays on the current cell.

Design an algorithm to clean an entire room using only the 4 given APIs shown below.

interface robot {
  // Returns true if the next cell is open and the robot moved into the cell.

  // Return false if the next cell is an obstacle and the robot stays on the current cell.

  boolean move();
  // After calling turnLeft/turnRight, the robot will stay on the same cell.

  // 90 degrees per turn.

  void turnLeft();
  void turnRight();
  // Clear the current cell.

  void clean();
}

example:
enter:
room = [
  [1,1,1,1,1,0,1,1],
  [1,1,1,1,1,0,1,1],
  [1,0,1,1,1,1,1,1],
  [0,0,0,1,0,0,0,0],
  [1,1,1,1,1,1,1,1]
],
row=1,
column = 3
explain:
All grids in the room are marked with 0 or 1.

0 means the cell is blocked, and 1 means the cell is accessible.

The robot initially starts at row=1, col=3.

It's positioned one row below and three columns to the right, starting at the top left.

notes:
The input is only used internally to initialize the room and the position of the robot. You have to solve this ""blindfolded"". In other words, you have to use only the above 4 APIs to control the robot without knowing the room layout and initial robot position.

The robot's initial position will always be in an accessible cell.

The robot's initial orientation will be upwards.

All accessible cells are connected, meaning that all cells marked 1 are accessible to the robot.

Assume that all four sides of the grid are surrounded by walls.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a ball in a ""maze"", with empty spaces (denoted ""0"") and walls (denoted ""1""). The ball can roll through empty space by rolling up, down, left, or right, but it won't stop rolling until it hits a wall. When the ball stops, it can choose the next direction.

Given `m x n` `maze`, `start` position of the ball and `destination`, where `start = [startrow, startcol]` and destination = [destinationrow, destinationcol]`, return true if the ball can stop at the destination ground, otherwise return `false`.

You can assume that the boundaries of the maze are all walls (see example).


Example 1:
Input: Maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1, 1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
output: true
Explanation: One possible way is: left -> down -> left -> down -> right -> down -> right.


Example 2:
Input: Maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1, 1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
output: error
Explanation: The ball has no way to stop at the destination. Note that you can pass through the destination, but not stop there.


Example 3:
Input: Maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0, 1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
output: error

constraint:
`m == maze.length`
`n == maze[i].length`
`1 <= meters, n <= 100`
`maze[i][j]` is either `0` or `1`.

`start.length == 2`
`destination.length == 2`
`0 <= startrow, destinationrow <= m`
`0 <= startcol, destinationcol <= n`
Both the ball and the destination exist in empty space, they won't be in the same position initially.

The maze contains at least 2 empty spaces.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers, your task is to find all possible increasing subsequences of the given array, the length of the increasing subsequence should be at least 2.


example:
Input: [4, 6, 7, 7]
Output: [[4, 6], [4, 7], [4, 6, 7], [4, 6, 7, 7], [6, 7], [6, 7, 7], [7, 7], [4,7,7]]

constraint:
The length of the given array will not exceed 15.

The range of integers in the given array is [-100,100].

The given array may contain duplicates, and two equal integers should also be treated as special cases of increasing sequences.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums`, we call `(i, j)` a significant reverse pair if `i < j` and `nums[i] > 2*nums[j]`.

You need to return the number of significant reverse pairs in the given array.


Example 1:
Input: [1,3,2,3,1]
Output: 2

Example 2:
Input: [2,4,3,5,1]
Output: 3
notes:
The length of the given array will not exceed '50,000'.

All numbers in the input array are within the range of 32-bit integers.",0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of non-negative integers a1, a2, ..., an and a target S. Now you have 2 symbols ""+"" and ""-"". For each integer, you should choose one of ""+"" and ""-"" as its new symbol.

Find how many ways to assign symbols such that the sum of integers equals the target S.


Example 1:
Input: nums is [1, 1, 1, 1, 1] and S is 3.
Output: 5
explain:
-1+1+1+1+1 = 3
+1-1+1+1+1 = 3
+1+1-1+1+1 = 3
+1+1+1-1+1 = 3
+1+1+1+1-1 = 3
There are 5 ways to assign symbols such that the sum of nums is target 3.


constraint:
The length of the given array is positive and will not exceed 20.

The sum of the elements in the given array will not exceed 1000.

Your output answer is guaranteed to fit in a 32-bit integer.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a hero named Teemo in the LOL world, his attack can poison the enemy Ashe. Now, given the Teemo attack rise time series on Ashe and the poison duration for each Teemo attack, you need to output the total time Ashe was in the poisoned state.

You can assume that Teemo's initial attack at a certain point in time leaves Ashe poisoned immediately.


Example 1:
Input: [1,4], 2
Output: 4
Explanation: At time point 1, the Teemo starts attacking Ashe and poisons Ashe immediately.
This poisoned state will last for 2 seconds until the end of time point 2.
At time point 4, Teemo attacks Ashe again and poisons Ashe again for 2 seconds.
So you need to output 4 at the end.


Example 2:
Input: [1,2], 2
Output: 3
Explanation: At time 1, Teemo starts attacking and poisoning Ashe.
This poisoned state will last for 2 seconds until the end of time point 2.
However, at the beginning of time point 2, Teemo attacks the already poisoned Ashe again.
Since the poison status does not stack, the second poison attack, while still active at time point 2, will stop when time point 3 ends.
So you need to output 3 at the end.

notes:
You can assume that the length of a given time series array will not exceed 10000.

You can assume that the numbers in Teemo's attack time sequence and his poison duration per attack are non-negative integers that will never exceed 10,000,000.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `nums1` and `nums2`, both of which have unique elements, where `nums1` is a subset of `nums2`.

Finds all next higher numbers of the elements of `nums1` at the corresponding positions of `nums2`.

The next higher number of the number `x` in `nums1` is the first larger number to the right of it in `nums2`. If not present, returns ""-1"" for this number.


Example 1:
Input: nums1 = [4,1,2], nums2 = [1,3,4,2]
Output: [-1,3,-1]
explain:
For the number 4 in the first array, you cannot find the next higher number in the second array, so output -1.

For the number 1 in the first array, its next higher number in the second array is 3.

For the number 2 in the first array, there is no next higher number in the second array, so -1 is output.


Example 2:
Input: nums1 = [2,4], nums2 = [1,2,3,4]
Output: [3,-1]
explain:
For the number 2 in the first array, its next higher number in the second array is 3.

For the number 4 in the first array, there is no next higher number in the second array, so -1 is output.


constraint:
`1 <= nums1.length <= nums2.length <= 1000`
`0 <= nums1[i], nums2[i] <= 104`
All integers in `nums1` and `nums2` are unique.

All integers in `nums1` also appear in `nums2`.

Follow up: Can you find a `O(nums1.length + nums2.length)` solution?",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list ""rects"" of non-overlapping axis-aligned rectangles, write a function ""pick"" that randomly and uniformly picks an integer point in the space covered by the rectangles.

notes:
Integer points are points with integer coordinates.
A point on the perimeter of a rectangle is contained in the space covered by the rectangle.
The ith rectangle = rects[i] = [x1,y1,x2,y2], where [x1, y1] are the integer coordinates of the lower left corner and [x2, y2 ]` are the integer coordinates of the upper right corner.

The height and width of each rectangle does not exceed `2000`.

`1 <= rects.length <= 100`
`pick` returns a point as an array of integer coordinates `[p_x, p_y]`
`pick` is called at most `10000` times.


Example 1:
enter:
[""Solution"", ""Selection"", ""Selection"", ""Selection""]
[[[[1,1,5,5]]],[],[],[]]
output:
[empty,[4,1],[4,1],[3,3]]

Example 2:
enter:
[""Solution"", ""Selection"", ""Selection"", ""Selection"", ""Selection"", ""Selection""]
[[[[-2,-2,-1,-1],[1,0,3,0]]],[],[],[],[],[]]
output:
[empty,[-1,-2],[2,0],[-2,-1],[3,0],[-2,-2]]
Enter syntax instructions:
The input is two lists: the subroutine called and its arguments. The constructor of `Solution` takes one parameter, the array of rectangles `rects`. `pick` takes no arguments. Arguments are always contained in a list, even if there are none.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"There is a ball in a ""maze"", with empty spaces (denoted ""0"") and walls (denoted ""1""). The ball can roll through empty space by rolling up, down, left, or right, but it won't stop rolling until it hits a wall. When the ball stops, it can choose the next direction. This maze also has a hole. If the ball rolls onto the hole, it will fall into the hole.

Given `m x n` `maze`, ball position `ball` and hole position `hole`, where `ball = [ballrow, ballcol]` and `hole = [holerow, holecol]`, return a string `instructions `All instructions that the ball should follow to fall into the hole in the shortest possible distance. If there are multiple valid instructions, the instruction with the smallest lexicographical order is returned. Returns ""impossible"" if the ball cannot fall into the hole.

If the ball has a way to fall into the hole, the answer ""instructions"" should contain the characters ""u"" (ie up), ""d"" (ie down), ""l"" (ie left), and `'r'` (ie right).

Distance is the number of spaces the ball travels from its starting position (exclusive) to its destination (inclusive).

You can assume that the boundaries of the maze are all walls (see example).


Example 1:
Input: Maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0, 1],[0,1,0,0,0]], ball = [4,3], hole = [0,1]
Output: ""lul""
Explanation: There are two shortest paths for the ball to fall into the hole.

The first way is left->up->left, denoted by ""lul"".

The second way is top->left, denoted by 'ul'.

Both ways have a shortest distance of 6, but the first way is lexicographically smaller because 'l' < 'u'. So the output is ""lul"".


Example 2:
Input: Maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0, 1],[0,1,0,0,0]], ball = [4,3], hole = [3,0]
Output: ""impossible""
Explanation: The ball cannot reach the hole.


Example 3:
Input: Maze = [[0,0,0,0,0,0,0],[0,0,1,0,0,1,0],[0,0,0,0,1,0, 0],[0,0,0,0,0,0,1]], ball = [0,4], hole = [3,5]
Output: ""dldr""

constraint:
`m == maze.length`
`n == maze[i].length`
`1 <= meters, n <= 100`
`maze[i][j]` is either `0` or `1`.

`ball. length == 2`
`hole.length == 2`
`0 <= ballrow, holerow <= m`
`0 <= ballcol, holecol <= n`
Both the ball and the hole exist in an empty space, they will not be in the same position initially.

The maze contains at least 2 empty spaces.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array ""words"", return the words that can be typed using the letters of the alphabet on one line of a US keyboard, as shown in the image below.

On a US keyboard:
The first line consists of the characters ""qwertyuiop"",
The second line contains the characters ""asdfghjkl"", and
The third line consists of the characters ""zxcvbnm"".


Example 1:
Input: words = [""Hello"",""Alaska"",""Dad"",""Peace""]
Output: [""Alaska"", ""Dad""]

Example 2:
Input: words = [""omk""]
output: []

Example 3:
Input: words = [""adsdf"",""sfd""]
Output: [""adsdf"",""sfd""]

constraint:
`1 <= words.length <= 20`
`1 <= words[i].length <= 100`
`words[i]` consists of English letters (lowercase and uppercase).",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree (BST) with duplicates, return all patterns (i.e., most frequently occurring elements) in it.

If the tree has multiple schemas, they are returned in any order.

Suppose a BST is defined as follows:
A node's left subtree contains only nodes whose keys are less than or equal to the node's key.

A node's right subtree contains only nodes with keys greater than or equal to the node's key.

The left and right subtrees must also be binary search trees.


Example 1:
Input: root = [1,null,2,2]
output: [2]

Example 2:
input: root = [0]
output: [0]

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-105 <= Node.val <= 105`
Follow up: Can you do this without using any extra space? (assuming the implicit stack space due to recursion doesn't count).",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose LeetCode is about to start an IPO. In order to sell its stock at a good price to venture capital, LeetCode wants to do some projects to increase capital before the IPO. Due to limited resources, it can only complete at most k different projects before the IPO. Help LeetCode design the best way to maximize its total capital after completing at most k different projects.
You have several projects. For each project i, which has a net profit Pi, a minimum capital Ci is required to start the corresponding project. Initially, you have W capital. When you complete a project, you receive its pure profit and add the profit to your total capital.

In summary, select a list of at most k distinct items from a given item to maximize your final capital, and output your final maximized capital.


Example 1:
Input: k=2, W=0, profit=[1,2,3], capital=[0,1,1].
Output: 4
Explanation: Since your initial fund is 0, you can only start projects with index 0.

             When done you will have a profit of 1 and your bankroll becomes 1.

             With capital 1, you can start an item at index 1 or an item at index 2.

             Since you can choose up to 2 projects, you need to complete the project with index 2 to get the maximum funds.

             Therefore, the output ultimately maximizes capital, which is 0 + 1 + 3 = 4.

notes:
You can assume that all numbers in the input are non-negative integers.

The length of the Profits array and the Capital array will not exceed 50,000.

The answer is guaranteed to fit in a 32-bit signed integer.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a circular array of integers nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the next higher number for each element in nums.

The next higher number of the number `x` is the next first higher number in the array in its traversal order, which means you can loop through it to find its next higher number. If not present, returns ""-1"" for this number.


Example 1:
Input: nums = [1,2,1]
Output: [2,-1,2]
Explanation: The next larger number of the first 1 is 2;
The number 2 cannot find the next higher number.
The next larger number of the second 1 needs to be searched in a loop, which is also 2.


Example 2:
Input: nums = [1,2,3,4,3]
Output: [2,3,4,-1,4]

constraint:
`1 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a ball in a ""maze"", with empty spaces (denoted ""0"") and walls (denoted ""1""). The ball can roll through empty space by rolling up, down, left, or right, but it won't stop rolling until it hits a wall. When the ball stops, it can choose the next direction.

Given `m x n` `maze`, `start` position of the ball, and `destination`, where `start = [startrow, startcol]` and destination = [destinationrow, destinationcol]`, return the shortest distance the ball has to stop at the destination . Returns ""-1"" if the ball cannot stop at ""destination"".

Distance is the number of spaces the ball travels from its starting position (exclusive) to its destination (inclusive).

You can assume that the boundaries of the maze are all walls (see example).


Example 1:
Input: Maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1, 1],[0,0,0,0,0]], start = [0,4], destination = [4,4]
Output: 12
Explanation: One possible way is: left -> down -> left -> down -> right -> down -> right.

The length of the path is 1 + 1 + 3 + 1 + 2 + 2 + 2 = 12.


Example 2:
Input: Maze = [[0,0,1,0,0],[0,0,0,0,0],[0,0,0,1,0],[1,1,0,1, 1],[0,0,0,0,0]], start = [0,4], destination = [3,2]
Output: -1
Explanation: The ball has no way to stop at the destination. Note that you can pass through the destination, but not stop there.


Example 3:
Input: Maze = [[0,0,0,0,0],[1,1,0,0,1],[0,0,0,0,0],[0,1,0,0, 1],[0,1,0,0,0]], start = [4,3], destination = [0,1]
Output: -1

constraint:
`m == maze.length`
`n == maze[i].length`
`1 <= meters, n <= 100`
`maze[i][j]` is either `0` or `1`.

`start.length == 2`
`destination.length == 2`
`0 <= startrow, destinationrow <= m`
`0 <= startcol, destinationcol <= n`
Both the ball and the destination exist in empty space, they won't be in the same position initially.

The maze contains at least 2 empty spaces.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A perfect number is a positive integer equal to the sum of its positive divisors, excluding the number itself. A divisor of an integer x is an integer that divides x exactly.

Given an integer `n`, return `true` if `n` is a perfect number, otherwise return `false`.


Example 1:
Input: num = 28
output: true
Explanation: 28 = 1 + 2 + 4 + 7 + 14
1, 2, 4, 7, and 14 are all factors of 28.


Example 2:
Input: num = 6
output: true

Example 3:
Input: num = 496
output: true

Example 4:
Input: num = 8128
output: true

Example 5:
Input: num = 2
output: error

constraint:
`1 <= num <= 108`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the root of a tree, you are asked to find the most frequent sum of subtrees. A node's subtree sum is defined as the sum of all node values ​​formed by subtrees rooted at that node, including the node itself. So what is the most frequent subtree and value? If there is a tie, all values ​​with the highest frequency are returned in any order.


Example 1
enter:
  5
 / \
twenty three
return [2, -3, 4], since all values ​​appear only once, return all values ​​in any order.


Example 2
enter:
  5
 / \
2-5
Returns [2] because 2 occurs twice, but -5 occurs only once.

notes:
You can assume that the sum of the values ​​in any subtree is in the range of a 32-bit signed integer.",0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Fibonacci sequence, often denoted ""F(n)"", forms a sequence of numbers known as the Fibonacci sequence, where each number is the sum of the two preceding numbers, starting at ""0"" and ""1"" . That is,
F(0) = 0, F(1) = 1
F(n) = F(n - 1) + F(n - 2) for n > 1.

Given ""n"", compute ""F(n)"".


Example 1:
Input: n = 2
Output: 1
Explanation: F(2) = F(1) + F(0) = 1 + 0 = 1.


Example 2:
Input: n = 3
Output: 2
Explanation: F(3) = F(2) + F(1) = 1 + 1 = 2.


Example 3:
Input: n = 4
Output: 3
Explanation: F(4) = F(3) + F(2) = 2 + 1 = 3.


constraint:
`0 <= n <= 30`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""node"" in a binary search tree, return the ordered successor of that node in the BST. Returns ""null"" if the node has no sequential successors.

The successor of `node` is the node with the smallest key greater than `node.val`.

You will have direct access to the node, but not the root of the tree. Each node will refer to its parent node. Here is the definition of `Node`:
class node {
    public integer value;
    public node leaves;
    public node rights;
    public node parent node;
}

Example 1:
Input: tree = [2,1,3], node = 1
Output: 2
Explanation: The inorder successor node of 1 is 2. Note that both the node and the return value are of Node type.


Example 2:
Input: tree = [5,3,6,2,4,null,null,1], node = 6
output: empty
Explanation: The current node has no ordered successor nodes, so the answer is empty.


Example 3:
Input: tree = [15,6,18,3,7,17​​,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 15
Output: 17

Example 4:
Input: tree = [15,6,18,3,7,17​​,20,2,4,null,13,null,null,null,null,null,null,null,null,9], node = 13
Output: 15

Example 5:
Input: tree = [0], node = 0
output: empty

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-105 <= Node.val <= 105`
All nodes will have unique values.

Follow up: Can you solve this without looking up the values ​​of any nodes?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the leftmost value in the last row of the tree.


Example 1:
Input: root = [2,1,3]
Output: 1

Example 2:
Input: root = [1,2,3,4,null,5,6,null,null,7]
Output: 7

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the video game Fallout 4, the quest ""Road to Freedom"" requires players to reach a metal turntable called the ""Road to Freedom Ring"" and use the wheel to spell specific keywords to open the gate.

Given a string ring, which represents the code engraved on the outer ring, and another string key, which represents the keyword to be spelled. You need to find the minimum number of steps to spell out all the characters in the keyword.

Initially, the first character of the ring is aligned in the 12:00 direction. You need to align each character of the string key in the 12:00 direction by rotating the ring clockwise or counterclockwise, then press the center button to spell out all the characters in the string key one by one.

At the stage of spelling out the key character key[i] in the rotating ring:
You can rotate the ring one position clockwise or counterclockwise, which counts as 1 step. The ultimate purpose of the rotation is to align a character of the ring of strings in the 12:00 direction, where this character must be equal to the character key[i].

If the character key[i] has been aligned to the 12:00 direction, you need to press the middle button to spell, which is also counted as 1 step. Once pressed, you can start spelling the next character (next stage) for that key, otherwise, you've done all spelling.


example:
Input: ring = ""godding"", key = ""gd""
Output: 4
explain:
For the first key character 'g', since it is already in place, we only need to spell this character in one step.
For the second key character ""d"", we need to rotate the ring ""godding"" two steps counterclockwise to make it ""ddinggo"".

Also, we need 1 spelling step.

So the final output is 4.

notes:
Both rings and keys have lengths in the range 1 to 100.

There are only lowercase letters in the two strings, and there may be some repeated characters in the two strings.

The keys are always spelled out by rotating the loops.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return an array (indexed from 0) of the maximum values ​​in each row of the tree.


Example 1:
Input: root = [1,3,2,5,3,null,9]
Output: [1,3,9]

Example 2:
Input: root = [1,2,3]
Output: [1,3]

Example 3:
input: root = [1]
output: [1]

Example 4:
Input: root = [1,null,2]
output: [1,2]

Example 5:
input: root = []
output: []

constraint:
The number of nodes in the tree will be in the range ""[0, 104]"".

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, find the length of the longest palindromic subsequence in s.

A subsequence is a sequence that can be derived from another sequence by removing some or none of its elements without changing the order of the remaining elements.


Example 1:
Input: s = ""bbbab""
Output: 4
Explanation: One possible longest palindromic subsequence is ""bbbb"".


Example 2:
Input: s = ""cbbd""
Output: 2
Explanation: One possible longest palindromic subsequence is ""bb"".


constraint:
`1 <= s.length <= 1000`
`s` consists of lowercase English letters only.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have n super washing machines in a line. Initially, each washing machine has some clothes or is empty.
At each step, you can choose any m (1≤m≤n) washing machines, and at the same time pass a piece of clothing from each washing machine to its adjacent washing machine.
Given an array of integers representing the number of skirts in each washing machine on this line from left to right, you should find the minimum number of moves that make all washing machines have the same number of skirts. If this cannot be done, -1 is returned.


example one
Input: [1,0,5]
Output: 3
explain:
Step 1: 1 0 <-- 5 => 1 1 4
Step 2: 1 <-- 1 <-- 4 => 2 1 3
The third step: 2 1 <-- 3 => 2 2 2

Example 2
Input: [0,3,0]
Output: 2
explain:
First step: 0 <-- 3 0 => 1 2 0
Step 2: 1 2 --> 0 => 1 1 1

Example 3
Input: [0,2,0]
Output: -1
explain:
It is impossible to have the same number of clothes in all three washing machines.
notes:
The value range of n is [1, 10000].

The range of clothes numbers in a super washing machine is [0, 1e5].",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D binary matrix with number of rows ""n_rows"" and number of columns ""n_cols"" where all values ​​are initially 0. Write a function ""flip"" that randomly picks a 0 value uniformly, changes it to a 1, and then returns the value's position ""[row.id, col.id]"". Also, write a function `reset` to set all values ​​back to 0. Minimize the number of calls to the system Math.random() and optimize time and space complexity.

notes:
`1 <= n_rows, n_cols <= 10000`
`0 <= row.id < n_rows` and `0 <= col.id < n_cols`
`flip` will not be called when the matrix has no remaining 0 values.

The total number of calls to `flip` and `reset` will not exceed 1000.


Example 1:
enter:
[""solution"", ""flip"", ""flip"", ""flip"", ""flip""]
[[2,3],[],[],[],[]]
Output: [null,[0,1],[1,2],[1,0],[1,1]]

Example 2:
enter:
[""solution"", ""flip"", ""flip"", ""reset"", ""flip""]
[[1,2],[],[],[],[]]
Output: [null,[0,0],[0,1],null,[0,0]]
Enter syntax instructions:
The input is two lists: the subroutine called and its arguments. The `Solution` constructor has two parameters, `n_rows` and `n_cols`. `flip` and `reset` have no arguments. Arguments are always contained in a list, even if there are none.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"Given a word, you need to determine whether the usage of capital letters in it is correct.

We define the use of capital letters in a word to be correct when one of the following is true:
All letters in the word are capital letters, such as ""USA"".

All letters in this word are not capitalized, like ""leetcode"".

Only the first letter of the word is capitalized, such as ""Google"".

Otherwise, we define the word without capitalizing it in the correct way.


Example 1:
Input: ""United States""
output: true

Example 2:
Input: ""logo""
output: error
NOTE: The input will be a non-empty word consisting of uppercase and lowercase latin letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""a"" and ""b"", find the length of the longest uncommon subsequence between them.

A subsequence of the string s is the string obtained by removing any number of characters from s. For example, `""abc""` is a subsequence of `""aebdc""`, because you can remove the underlined characters in `""aebdc""` to get `""abc"". Other subsequences of `""aebdc""` include `""aebdc""`, `""aeb""`, and `""""` (the empty string).

An uncommon subsequence between two strings is a subsequence of one string that is not the other.

Returns the length of the longest uncommon subsequence between `a` and `b`. Returns ""-1"" if the longest uncommon subsequence does not exist.


Example 1:
Input: a = ""aba"", b = ""cdc""
Output: 3
Explanation: One of the longest uncommon subsequences is ""aba"", because ""aba"" is a subsequence of ""aba"" and not ""cdc"".

Note that ""cdc"" is also the longest uncommon subsequence.


Example 2:
Input: a = ""aaa"", b = ""bbb""
Output: 3
Explanation: The longest uncommon subsequences are ""aaa"" and ""bbb"".


Example 3:
Input: a = ""aaa"", b = ""aaa""
Output: -1
Explanation: Every subsequence of string a is also a subsequence of string b. Likewise, every subsequence of string b is also a subsequence of string a.


constraint:
`1 <= a.length, b.length <= 100`
`a` and `b` consist of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of strings, you need to find the longest uncommon subsequence in it. The longest uncommon subsequence is defined as the longest subsequence of one of these strings, and that subsequence should not be any subsequence of the other strings.

A subsequence is a sequence that can be derived from a sequence by removing some characters without changing the order of the remaining elements. Simply put, any string is a subsequence of itself, and an empty string is a subsequence of any string.

The input will be a list of strings and the output needs to be the length of the longest uncommon subsequence. Returns -1 if the longest uncommon subsequence does not exist.


Example 1:
Input: ""aba"", ""cdc"", ""eae""
Output: 3
notes:
The length of any given string will not exceed 10.

The length of the given list will be in the range [2, 50].",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`, return `true` if `nums` has a contiguous subarray of size at least 2 whose sum is a multiple of `k`, otherwise return `false` `.

An integer ""x"" is a multiple of ""k"" if there exists an integer ""n"" such that ""x = n * k"". `0` is always a multiple of `k`.


Example 1:
Input: nums = [23,2,4,6,7], k = 6
output: true
Explanation: [2, 4] is a contiguous subarray of size 2 whose elements sum to 6.


Example 2:
Input: nums = [23,2,6,4,7], k = 6
output: true
Explanation: [23, 2, 6, 4, 7] is a contiguous subarray of size 5 whose elements sum to 42.

42 is a multiple of 6 because 42 = 7 * 6 and 7 is an integer.


Example 3:
Input: nums = [23,2,6,4,7], k = 13
output: error

constraint:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`
`0 <= sum(nums[i]) <= 231 - 1`
`1 <= k <= 231 - 1`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and an array of strings dictionary, return the longest string in the dictionary that can be formed by removing some of the characters of the given string. If there are multiple possible results, return the longest word that is lexicographically smallest. Returns an empty string if there are no possible results.


Example 1:
Input: s = ""abpcplea"", dictionary = [""ale"",""apple"",""monkey"",""plea""]
Output: ""Apple""

Example 2:
Input: s = ""abpcplea"", dictionary = [""a"",""b"",""c""]
output: ""one""

constraint:
`1 <= s.length <= 1000`
`1 <= dictionary.length <= 1000`
`1 <= dictionary[i].length <= 1000`
`s` and `dictionary[i]` consist of lowercase English letters.",0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array, find the maximum length of a contiguous subarray with an equal number of 0s and 1s.

Example 1:
Input: [0,1]
Output: 2
Explanation: [0, 1] is the longest contiguous subarray with an equal number of 0s and 1s.


Example 2:
Input: [0,1,0]
Output: 2
Explanation: [0, 1] (or [1, 0]) is the longest contiguous subarray in which there are equal numbers of 0s and 1s.

notes:
The length of the given binary array will not exceed 50,000.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose you have `n` integers, labeled `1` to `n`. A permutation of these `n` integers `perm` (starting at 1) is considered a pretty permutation if for each `i` (`1 <= i <= n`) any of the following is true:
`perm[i]` is divisible by `i`.

`i` is divisible by `perm[i]`.

Given an integer ""n"", return the number of nice permutations you can build.


Example 1:
Input: n = 2
Output: 2
explain:
The first nice permutation is [1,2]:
    - perm[1] = 1 is divisible by i = 1
    - perm[2] = 2 is divisible by i = 2
The second nice permutation is [2,1]:
    - perm[1] = 2 is divisible by i = 1
    - i = 2 is divisible by perm[2] = 1

Example 2:
Input: n = 1
Output: 1

constraint:
`1 <= n <= 15`",0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of n distinct non-empty strings, you need to generate the fewest possible abbreviations for each word according to the following rules.

Start with the first character, then the number of characters of the abbreviation, then the last character.

If there are any conflicts, i.e. multiple words sharing the same abbreviation, a longer prefix is ​​used instead of just the first character until the mapping from word to abbreviation is made unique. In other words, the final abbreviation cannot map to more than one original word.

 If the abbreviation doesn't make the word shorter, leave it as it is.


example:
Input: [""like"", ""god"", ""internal"", ""me"", ""internet"", ""interval"", ""intent"", ""face"", ""intrusion""]
Output: [""l2e"",""god"",""internal"",""me"",""i6t"",""interval"",""inte4n"",""f2e"",""intr4n""]
notes:
 Neither n nor the length of each word will exceed 400.

 Each word has a length greater than 1.

 Words consist of lowercase English letters only.

 Answers should be returned in the same order as the original array.",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array w of positive integers, where w[i] describes the weight of the ith index (starting from 0).

We need to call the function `pickIndex()`, which randomly returns an integer in the range `[0, w.length - 1]`. `pickIndex()` should return an integer proportional to its weight in the `w` array. For example, for `w = [1, 3]`, the probability of choosing index `0` is `1 / (1 + 3) = 0.25` (ie 25%), while the probability of choosing index `1` is `3 / (1 + 3) = 0.75` (or 75%).

More formally, the probability of selecting index ""i"" is ""w[i] / sum(w)"".


Example 1:
enter
[""solution"", ""pickIndex""]
[[[1]],[]]
output
[empty, 0]
explain
Solution solution = new Solution([1]);
Solution.pickIndex(); // returns 0. Since there is only one element in the array, the only option is to return the first element.


Example 2:
enter
[""solution"", ""pickIndex"", ""pickIndex"", ""pickIndex"", ""pickIndex"", ""pickIndex""]
[[[1,3]],[],[],[],[],[]]
output
[null,1,1,1,1,0]
explain
Solution solution = new Solution([1, 3]);
Solution.pickIndex(); // returns 1. It returns the second element (index = 1) with probability 3/4.

Solution.pickIndex(); // returns 1
Solution.pickIndex(); // returns 1
Solution.pickIndex(); // returns 1
Solution.pickIndex(); // returns 0. It returns the first element (index = 0) with probability 1/4.

Since this is a randomized question, allowing for multiple answers, the following output can be considered correct:
[null,1,1,1,1,0]
[null,1,1,1,1,1]
[null,1,1,1,0,0]
[null,1,1,1,0,1]
[null,1,0,1,0,0]
...

etc.


constraint:
`1 <= w.length <= 10000`
`1 <= w[i] <= 10^5`
`pickIndex` is called up to 10000 times.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"Let's play minesweeper game (Wikipedia, online games)!
You'll be given a 2D matrix of characters representing the game board. 'M' represents an unrevealed mine, 'E' represents an unrevealed empty square, 'B' represents a revealed empty square with no neighbors (up, down, left, right, all 4 diagonals) For mines, the number ('1' to '8') represents how many mines are adjacent to the revealed square, and the last 'X' represents a revealed mine.

Now given the next click position (row and column index) among all uncovered squares (""M"" or ""E""), return the board after revealing that position according to the following rules:
If a mine ('M') is found, it's game over - change it to 'X'.

If an empty square ('E') with no adjacent mines is shown, it is changed to show blank ('B') and all its adjacent non-shown squares should recursively be shown.

If it shows an empty square ('E') with at least one adjacent mine, change it to a number representing the number of adjacent mines ('1' to '8').

When no more squares are displayed, return the board.


Example 1:
enter:
[['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'M', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E'],
 ['E', 'E', 'E', 'E', 'E']]
Click: [3,0]
output:
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
explain:

Example 2:
enter:
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'M', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
Click: [1,2]
output:
[['B', '1', 'E', '1', 'B'],
 ['B', '1', 'X', '1', 'B'],
 ['B', '1', '1', '1', 'B'],
 ['B', 'B', 'B', 'B', 'B']]
explain:
notes:
The height and width range of the input matrix is ​​[1,50].

The click position will only be an undisplayed block ('M' or 'E'), which also means that the input pad contains at least one clickable block.

The input board will not be the end of the game stage (some mines have been revealed).

For simplicity, rules not mentioned should be ignored in this question. For example, you don't need to reveal all unrevealed mines at the end of the game, consider any situation where you will win the game or mark any squares.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary search tree with non-negative values, find the smallest absolute difference between the values ​​of any two nodes.


example:
enter:
   1
    \
     3
    /
   2
output:
1
explain:
The smallest absolute difference is 1, which is the difference between 2 and 1 (or 2 and 3).

notes:
There are at least two nodes in this BST.

This question is the same as 783: https://leetcode.com/problems/minimum-distance-between-bst-nodes/",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" ""picture"" consisting of black ""B"" and white ""W"" pixels, return the number of black lonely pixels.

A black lonely pixel is the character ""B"" at a specific location on the same row and column without any other black pixels.


Example 1:
Input: Image = [[""W"",""W"",""B""],[""W"",""B"",""W""],[""B"",""W"",""W""]]
Output: 3
Explanation: The three 'B's are all black lonely pixels.


Example 2:
Input: Image = [[""B"",""B"",""B""],[""B"",""B"",""B""],[""B"",""B"",""B""]]
output: 0

constraint:
`m == picture. length`
`n == picture[i].length`
`1 <= meters, n <= 500`
`picture[i][j]` is either `'W'` or `'B'`.",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"", return the number of unique k-diff pairs in the array.

A k-diff pair is an integer pair `(nums[i], nums[j])` where the following conditions are met:
`0 <= i, j < nums.length`
`I! = j`
`|nums[i] - nums[j]| == k`
Note that `|val|` means the absolute value of `val`.


Example 1:
Input: nums = [3,1,4,1,5], k = 2
Output: 2
Explanation: There are two 2-diff pairs in the array, (1, 3) and (3, 5).

Although we have two 1's in the input, we should only return the number of unique pairs.


Example 2:
Input: nums = [1,2,3,4,5], k = 1
Output: 4
Explanation: There are four 1-diff pairs in the array, (1, 2), (2, 3), (3, 4) and (4, 5).


Example 3:
Input: nums = [1,3,1,5,4], k = 0
Output: 1
Explanation: There is a pair of 0-diff, (1, 1) in the array.


Example 4:
Input: nums = [1,2,4,4,3,3,0,9,2,3], k = 3
Output: 2

Example 5:
Input: nums = [-1,-2,-3], k = 1
Output: 2

constraint:
`1 <= nums.length <= 104`
`-107 <= nums[i] <= 107`
`0 <= k <= 107`",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an image consisting of black and white pixels and a positive integer N, find the number of black pixels at a particular R row and C column that satisfy all of the following rules:
 Both R rows and C columns contain exactly N black pixels.

 For all rows that have black pixels in column C, they should be exactly the same as row R
A picture is represented by a two-dimensional character array consisting of 'B' and 'W', representing black and white pixels, respectively.

example:
enter:
[['W', 'B', 'W', 'B', 'B', 'W'],
 ['W', 'B', 'W', 'B', 'B', 'W'],
 ['W', 'B', 'W', 'B', 'B', 'W'],
 ['W', 'W', 'B', 'W', 'B', 'W']]
N = 3
Output: 6
Explanation: All bold ""B""s are the black pixels we need (all ""B"" are in columns 1 and 3).

        0 1 2 3 4 5 column index
0 [['W', 'B', 'W', 'B', 'B', 'W'],
1 ['W', 'B', 'W', 'B', 'B', 'W'],
2 ['W', 'B', 'W', 'B', 'B', 'W'],
3 ['W', 'W', 'B', 'W', 'B', 'W']]
row index
Take for example 'B' with R = 0 rows and C = 1 column:
Rule 1, row R = 0 and column C = 1 have exactly N = 3 black pixels.
Rule 2, the rows with black pixels in column C=1 are row 0, row 1 and row 2. They are exactly the same as the R = 0 line.

notes:
The width and height range of the input two-dimensional array is [1,200].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Note: This is a companion question to the system design question: Designing TinyURL.

TinyURL is a URL shortening service where you enter a URL like `https://leetcode.com/problems/design-tinyurl` and it returns a short URL like `http://tinyurl.com/ 4e9iAk`.

Design `encode` and `decode` methods for TinyURL service. There are no restrictions on how the encoding/decoding algorithm works. You just need to make sure that a URL can be encoded as a micro URL, and that the micro URL can be decoded as the original URL.",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You need to construct a binary tree from strings consisting of parentheses and integers.

The entire input represents a binary tree. It consists of an integer followed by zero, one or two pairs of parentheses. The integer represents the value of the root, and a pair of parentheses encloses a subbinary tree with the same structure.

You always start constructing the parent's left child first, if it exists.


Example 1:
Input: s = ""4(2(3)(1))(6(5))""
Output: [4,2,6,3,1,5]

Example 2:
Input: s = ""4(2(3)(1))(6(5)(7))""
Output: [4,2,6,3,1,5,7]

Example 3:
Input: s = ""-4(2(3)(1))(6(5)(7))""
Output: [-4,2,6,3,1,5,7]

constraint:
`0 <= s.length <= 3 * 104`
`s` consists only of digits, `'('`, `')'` and `'-'.",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings representing two complex numbers.

You need to return a string representing their multiplication. Note that i2 = -1 by definition.


Example 1:
Input: ""1+1i"", ""1+1i""
Output: ""0+2i""
Explanation: (1 + i) * (1 + i) = 1 + i2 + 2 * i = 2i, which needs to be converted into the form of 0+2i.


Example 2:
Input: ""1+-1i"", ""1+-1i""
Output: ""0+-2i""
Explanation: (1 - i) * (1 - i) = 1 + i2 - 2 * i = -2i, which needs to be converted to the form of 0+-2i.

notes:
The input string will not have extra white space.

The input string will be given in the form of a+bi, where the integers a and b both belong to the range [-100, 100]. And the output should also be in this form.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree (BST), transform it into a larger tree such that each key of the original BST is changed to the sum of the original key plus all keys greater than the original key in the BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:
A node's left subtree contains only nodes whose keys are less than the node's key.

A node's right subtree contains only nodes whose keys are greater than the node's key.

The left and right subtrees must also be binary search trees.

Note: This question is the same as 1038: https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/

Example 1:
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]

Example 3:
Input: root = [1,0,2]
Output: [3,3,2]

Example 4:
Input: root = [3,2,4,1]
Output: [7,9,4,10]

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`-104 <= Node.val <= 104`
All values ​​in the tree are unique.

`root` is guaranteed to be a valid binary search tree.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Given a list of 24-hour time points in 'HH:MM' format, returns the smallest difference in minutes between any two time points in the list.


Example 1:
Input: timePoints = [""23:59"",""00:00""]
Output: 1

Example 2:
Input: timePoints = [""00:00"",""23:59"",""00:00""]
output: 0

constraint:
`2 <= point in time <= 2 * 104`
`timePoints[i]` is in the format ""HH:MM"".",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array consisting only of integers, where each element appears exactly twice except one element appears exactly once. Find this single element that occurs only once.

Follow up: Your solution should run in O(log n) time and O(1) space.


Example 1:
Input: nums = [1,1,2,3,3,4,4,8,8]
Output: 2

Example 2:
Input: nums = [3,3,7,7,10,11,11]
Output: 10

constraint:
`1 <= nums.length <= 10^5`
`0 <= nums[i] <= 10^5`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" and an integer ""k"", reverse the first ""k"" characters every ""2k"" characters from the beginning of the string.

If there are less than `k` characters left, reverse them all. If less than `2k` but greater than or equal to `k` characters, reverse the first k characters and leave the rest as they are.


Example 1:
Input: s = ""abcdefg"", k = 2
Output: ""bacdfeg""

Example 2:
Input: s = ""abcd"", k = 2
Output: ""back""

constraint:
`1 <= s.length <= 104`
`s` contains only lowercase English letters.

`1 <= k <= 104`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a matrix of 0s and 1s, find the distance of each cell to the nearest 0.

The distance between two adjacent cells is 1.


Example 1:
enter:
[[0,0,0],
 [0,1,0],
 [0,0,0]]
output:
[[0,0,0],
 [0,1,0],
 [0,0,0]]

Example 2:
enter:
[[0,0,0],
 [0,1,0],
 [1,1,1]]
output:
[[0,0,0],
 [0,1,0],
 [1,2,1]]
notes:
The given matrix will not have more than 10,000 elements.

There is at least one 0 in the given matrix.

The cells are only adjacent in four directions: up, down, left and right.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the diameter length of the tree.

The diameter of a binary tree is the length of the longest path between any two nodes in the tree. This path may or may not go through ""root"".

The path length between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [1,2,3,4,5]
Output: 3
Explanation: 3 is the length of the path [4,2,1,3] or [5,2,1,3].


Example 2:
Input: root = [1,2]
Output: 1

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-100 <= Node.val <= 100`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the NBA playoffs, we always arrange stronger teams to play against weaker teams. For example, let the No. 1 team play against the No. n team, which makes the game easier. Interesting good strategy. Now, given you n teams, you need to output their final game as a string.

The n teams are given as positive integers from 1 to n, representing their initial rankings. (No. 1 is the strongest team, nth is the weakest team.) We will use brackets ('(', ')') and commas (',') to denote match-team pairings - brackets ('( ' , ')') for pairing and comma (',') for partitioning. In each round of pairing process, always need to follow the strategy of the strong and weak pair.


Example 1:
Input: 2
Output: (1,2)
explain:
Initially, we have team 1 and team 2 with the following positions: 1,2.

Then we pair the team (1,2) with '(', ')' and ',' which is the final answer.


Example 2:
Input: 4
Output: ((1,4), (2,3))
explain:
In the first round, we paired teams 1 with 4 and 2 with 3 because we needed to have strong and weak teams together.

We get (1,4),(2,3).

In the second round, the winners of (1,4) and (2,3) need to replay the game to produce the final winner, so they need to be enclosed in parentheses.

We got the final answer ((1,4), (2,3)).


Example 3:
Input: 8
Output: (((1,8),(4,5)),((2,7),(3,6)))
explain:
First round: (1,8), (2,7), (3,6), (4,5)
Second round: ((1,8),(4,5)),((2,7),(3,6))
Third round: (((1,8),(4,5)),((2,7),(3,6)))
Since the final winner will be produced in the third round, the answer (((1,8),(4,5)),((2,7),(3,6))) needs to be output.

notes:
n is in the range [2, 212].

We ensure that the input n can be converted into 2k forms, where k is a positive integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The boundary of a binary tree is the concatenation of the root, the left boundary, the leaves arranged from left to right, and the right boundary in reverse order.

The left boundary is the set of nodes defined by:
The left child of the root node is on the left border. If the root has no left child, the left border is empty.

If a node is on the left border and has a left child, then the left child is on the left border.

If a node is on the left border, has no left child, but has a right child, then the right child is on the left border.

The leftmost leaf is not within the left bounds.

The right boundary is similar to the left boundary, except that it is to the right of the root's right subtree. Likewise, leaves are not part of the right bound, and if the root has no right children, the right bound is empty.

A leaf is a node without any children. For this question, roots are not leaves.

Given the ""root"" of a binary tree, return the values ​​of its bounds.


Example 1:
Input: root = [1,null,2,3,4]
Output: [1,3,4,2]
explain:
- The left border is empty because the root has no left child.

- The right border follows the path from root's right child 2 -> 4.

  4 is a leaf, so the right border is [2].

- The leaves from left to right are [3,4].

Concatenating everything results in [1] + [] + [3,4] + [2] = [1,3,4,2].


Example 2:
Input: root = [1,2,3,4,5,6,null,null,null,7,8,9,10]
Output: [1,2,4,7,8,9,10,6,3]
explain:
- The left border follows the path starting from the root's left child 2 -> 4.

  4 is a leaf, so the left border is [2].

- The right border follows the path starting from the root's right child 3 -> 6 -> 10.

  10 is a leaf, so the right boundary is [3,6], and the reverse order is [6,3].

- The leaves from left to right are [4,7,8,9,10].

Concatenating everything results in [1] + [2] + [4,7,8,9,10] + [6,3] = [1,2,4,7,8,9,10,6,3].


constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given several ""boxes"" of different colors, represented by different positive numbers.

You may go through several rounds of removing boxes until there are no boxes left. Each time you can select some consecutive boxes of the same color (that is, consist of `k` boxes, `k >= 1`), remove them and get `k * k` points.

Returns the maximum score you can get.


Example 1:
Input: boxes = [1,3,2,2,2,3,4,3,1]
Output: 23
explain:
[1, 3, 2, 2, 2, 3, 4, 3, 1]
----> [1, 3, 3, 4, 3, 1] (3*3=9 points)
----> [1, 3, 3, 3, 1] (1*1=1 point)
----> [1, 1] (3*3=9 points)
----> [] (2*2=4 points)

Example 2:
Input: boxes = [1,1,1]
Output: 9

Example 3:
input: boxes = [1]
Output: 1

constraint:
`1 <= boxes.length <= 100`
`1 <= boxes[i] <= 100`",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n cities. Some of them are connected while others are not. If city a is directly connected to city b, and city b is directly connected to city c, then city a is indirectly connected to city c.

A province is a group of directly or indirectly connected cities, and no other cities are located outside the group.

Given an n x n matrix isConnected, where isConnected[i][j] = 1 if the ith city is directly connected to the jth city, and isConnected[i][j] = 0 `Otherwise.

Returns the total number of provinces.


Example 1:
Input: isConnected = [[1,1,0],[1,1,0],[0,0,1]]
Output: 2

Example 2:
Input: isConnected = [[1,0,0],[0,1,0],[0,0,1]]
Output: 3

constraint:
`1 <= n <= 200`
`n == isConnected. length`
`n == isConnected[i].length`
`isConnected[i][j]` is `1` or `0`.

`isConnected[i][i] == 1`
`isConnected[i][j] == isConnected[j][i]`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of n integers, you need to find if there is a triplet (i, j, k) that satisfies the following conditions:
 0 < i, i + 1 < j, j + 1 < k < n - 1
 The sum of the subarrays (0, i - 1), (i + 1, j - 1), (j + 1, k - 1) and (k + 1, n - 1) should be equal.
where we define the subarray (L, R) to represent a portion of the original array, starting from the element with index L to the element with index R.


example:
Input: [1,2,1,2,1,2,1]
output: true
explain:
i = 1, j = 3, k = 5.
sum(0, i - 1) = sum(0, 0) = 1
sum(i + 1, j - 1) = sum(2, 2) = 1
Sum(j + 1, k - 1) = Sum(4, 4) = 1
Sum(k + 1, n - 1) = Sum(6, 6) = 1
notes:
 1 <= n <= 2000.
 Elements in the given array will be in the range [-1,000,000, 1,000,000] .",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the length of the longest continuous path in the tree.

This path can be increased or decreased.

For example, ""[1,2,3,4]"" and ""[4,3,2,1]"" are both considered valid, but the path ""[1,2,4,3]"" is not.

On the other hand, paths can be in child-parent-child order, but not necessarily parent-child order.


Example 1:
Input: root = [1,2,3]
Output: 2
Explanation: The longest continuous path is [1, 2] or [2, 1].


Example 2:
Input: root = [2,1,3]
Output: 3
Explanation: The longest continuous path is [1, 2, 3] or [3, 2, 1].


constraint:
The number of nodes in the tree is in the range ""[1, 3 * 104]"".

`-3 * 104 <= Node.val <= 3 * 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string ""s"" representing a student's attendance record, where each character represents whether the student was absent, late or present that day. The record contains only the following three characters:
""A"": does not exist.

`'L'`: Late.

``P'`: Now.

Students are eligible for an attendance award if they meet both of the following criteria:
The total time the student is absent (`'A'`) is strictly less than 2 days.

Student is never late (`'L'`) for 3 or more consecutive days.

Returns ""true"" if the student is eligible for an attendance award, otherwise returns ""false"".


Example 1:
Input: s = ""PPALLP""
output: true
Explanation: The student had fewer than 2 absences and was never late for 3 or more consecutive days.


Example 2:
Input: s = ""PPALLL""
output: error
Explanation: The student was late for 3 consecutive days within the last 3 days and is therefore not eligible for the award.


constraint:
`1 <= s.length <= 1000`
`s[i]` is `'A'`, `'L'`, or `'P'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A student's attendance record can be represented as a string, where each character indicates whether the student was absent, late, or present for the day. The record contains only the following three characters:
""A"": does not exist.

`'L'`: Late.

``P'`: Now.

Any student is eligible for an attendance award if both of the following conditions are met:
The total time the student is absent (`'A'`) is strictly less than 2 days.

Student is never late (`'L'`) for 3 or more consecutive days.

Given an integer ""n"", returns the number of possible attendance records of length ""n"" that would qualify a student for an attendance award. The answer can be very large, so return it modulo 109 + 7.


Example 1:
Input: n = 2
Output: 8
Explanation: There are 8 records of length 2 eligible for the reward:
""PP"", ""AP"", ""PA"", ""LP"", ""PL"", ""AL"", ""LA"", ""LL""
Only ""AA"" is not eligible because of 2 absences (requires less than 2).


Example 2:
Input: n = 1
Output: 3

Example 3:
Input: n = 10101
Output: 183236316

constraint:
`1 <= n <= 105`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of positive integers, adjacent integers will perform floating-point division. For example, [2,3,4] -> 2 / 3 / 4.

However, you can add any number of parentheses anywhere to change the priority of the operation. You should know how to add parentheses for maximum results and return the corresponding expression in string format. Your expression should not contain redundant parentheses.


example:
Input: [1000,100,10,2]
Output: ""1000/(100/10/2)""
explain:
1000/(100/10/2) = 1000/((100/10)/2) = 200
However, the curly brackets in ""1000/((100/10)/2)"" are redundant because they do not affect operation precedence. So you should return ""1000/(100/10/2)"".
Other cases:
1000/(100/10)/2 = 50
1000/(100/(10/2)) = 50
1000/100/10/2 = 0.5
1000/100/(10/2) = 2
notes:
The length of the input array is [1, 10].

Elements in the given array will be in the range [2, 1000].

There is only one optimal split for each test case.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a brick wall in front of you. The walls are rectangular with rows of bricks. The bricks are the same height but different widths. You want to draw a vertical line from top to bottom, passing through the fewest number of bricks.

A brick wall is represented by a list of lines. Each row is a list of integers representing the left-to-right width of each brick in that row.

If your line crosses the edge of a brick, then the brick is not considered to be crossed. You need to figure out how to draw the line to pass through the fewest bricks and return the number of passed bricks.

You can't just draw a line along one of the two vertical edges of the wall, in which case the line obviously won't go through any bricks.

example:
Input: [[1,2,2,1],
        [3,1,2],
        [1,3,2],
        [2,4],
        [3,1,2],
        [1,3,1,1]]
Output: 2
explain:
notes:
The sum of brick widths in different rows is the same and will not exceed INT_MAX.

The number of bricks per row is in the range [1,10,000]. The height of the wall is in the range [1,10,000]. The total number of wall tiles shall not exceed 20,000.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of strings, you can join these strings together to form a loop, and for each string, you can choose whether to reverse it. In all possible loops, you need to find the lexicographically largest string after cutting the loop, which will make the looped string a regular string.

Specifically, to find the string with the largest lexicographic order, it needs to go through two stages:
Concatenate all strings into a loop where you reverse or not reverse some strings and concatenate them in the same order given.

Cut and hit a breakpoint anywhere in the loop, this will make the looped string a regular string starting from the character at the cutpoint.
And your job is to find the lexicographically largest one among all possible regular strings.


example:
Input: ""abc"", ""xyz""
Output: ""zyxcba""
Explanation: You can get the cyclic strings ""-abcxyz-"", ""-abczyx-"", ""-cbaxyz-"", ""-cbazyx-"", where '-' indicates the cyclic state. The answer string comes from the fourth loop string where you cut from the middle character ""a"" and get ""zyxcba"".

notes:
The input string will only contain lowercase letters.

The total length of all strings will not exceed 1,000.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer 'n', find the smallest integer that is exactly the same as a number present in integer 'n' and has a value greater than 'n'. Returns ""-1"" if no such positive integer exists.

Note that the returned integer should fit in a 32-bit integer, and return ""-1"" if there is a valid answer but does not fit in a 32-bit integer.


Example 1:
Input: n = 12
Output: 21

Example 2:
Input: n = 21
Output: -1

constraint:
`1 <= n <= 231 - 1`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s , reverse the character order of each word in the sentence while still preserving whitespace and the original word order.


Example 1:
Input: s = ""Let's take LeetCode contest""
Output: ""s'teL ekat edoCteeL tsetnoc""

Example 2:
Input: s = ""Shending""
Output: ""doG gniD""

constraint:
`1 <= s.length <= 5 * 104`
`s` contains printable ASCII characters.

`s` does not contain any leading or trailing spaces.

There is at least one word in s.

All words in s are separated by a space.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an n-ary tree, find its maximum depth.

The maximum depth is the number of nodes on the longest path from the root node to the furthest leaf node.

Nary-Tree input serialization representations are traversed in their level order, with each set of children separated by a null value (see example).


Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: 3

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null ,empty,14]
Output: 5

constraint:
The depth of the n-ary tree is less than or equal to '1000'.

The total number of nodes is between ""[0, 104]"".",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"", return the total number of consecutive subarrays whose sum is equal to ""k"".


Example 1:
Input: nums = [1,1,1], k = 2
Output: 2

Example 2:
Input: nums = [1,2,3], k = 3
Output: 2

constraint:
`1 <= nums.length <= 2 * 104`
`-1000 <= nums[i] <= 1000`
`-107 <= k <= 107`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" containing ""2n"" integers, group these integers into ""n"" pairs ""(a1, b1), (a2, b2), ..., (an, bn)"" such that ""min(ai, bi) is maximized for all ""i"". Returns the maximized sum.


Example 1:
Input: nums = [1,4,3,2]
Output: 4
Explanation: All possible pairings (ignoring the order of the elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the largest possible sum is 4.


Example 2:
Input: nums = [6,2,6,5,1,2]
Output: 9
Explanation: The best pairings are (2, 1), (2, 5), (6, 6). Min(2, 1) + Min(2, 5) + Min(6, 6) = 1 + 2 + 6 = 9.


constraint:
`1 <= n <= 104`
`nums.length == 2 * n`
`-104 <= nums[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 01 matrix M, find the longest consecutive row in the matrix. This line can be horizontal, vertical, diagonal or anti-diagonal.


example:
enter:
[[0,1,1,0],
 [0,1,1,0],
 [0,0,0,1]]
Output: 3
hint:
The number of elements in a given matrix will not exceed 10,000.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the sum of the slopes of each tree node.

The slope of a tree node is the absolute difference between the values ​​of all left subtree nodes and the sum of all right subtree node values. If a node has no left child, the sum of the left subtree node values ​​is treated as ""0"". The rules are similar if the node has no right child.


Example 1:
Input: root = [1,2,3]
Output: 1
explain:
Slope of node 2: |0-0| = 0 (no children)
Slope of node 3: |0-0| = 0 (no children)
Slope of node 1: |2-3| = 1 (left subtree is only left child, so sum is 2; right subtree is only right child, so sum is 3)
Sum of each slope: 0 + 0 + 1 = 1

Example 2:
Input: root = [4,2,9,3,5,null,7]
Output: 15
explain:
Slope of node 3: |0-0| = 0 (no children)
Slope of node 5: |0-0| = 0 (no children)
Slope of node 7: |0-0| = 0 (no children)
Slope of node 2: |3-5| = 2 (left subtree is only left child, so sum is 3; right subtree is only right child, so sum is 5)
Slope of node 9: |0-7| = 7 (no left child, so sum is 0; right subtree happens to be right child, so sum is 7)
Slope of node 4: |(3+5+2)-(9+7)| = |10-16| = 6 (the left subtree values ​​are 3, 5 and 2, and the sum is 10; the right subtree values ​​are 9 and 7 for a total of 16)
Sum of each tilt: 0 + 0 + 0 + 2 + 7 + 6 = 15

Example 3:
Input: root = [21,7,14,1,1,2,2,3,3]
Output: 9

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`-1000 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer n, find the closest integer (excluding itself), which is a palindrome.
""Closest"" is defined as minimizing the absolute difference between two integers.


Example 1:
Input: ""123""
Output: ""121""
notes:
The input n is a positive integer, represented by a string, and the length will not exceed 18.

If there is a tie, return the smaller one as the answer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A zero-indexed array A of length N containing all integers from 0 to N-1. Finds and returns the longest length of a set S where S[i] = {A[i], A[A[i]], A[A[A[i]]], ... } subject to the following rules.

Assuming the first element in S starts with selecting element A[i] with index = i, the next element in S should be A[A[i]], then A[A[A[i]]]. . . and so on, we stop adding before a duplicate element appears in S.


Example 1:
Input: A = [5,4,0,3,1,6,2]
Output: 4
explain:
A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.

One of the longest S[K]:
S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
notes:
N is an integer in the range [1, 20,000].

The elements of A are all distinct.

Each element of A is an integer in the range [0, N-1].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In MATLAB, there is a very useful function called ""reshape"", which can reshape a matrix into a new matrix with a different size but retain its original data.

Given a matrix represented by a two-dimensional array, and two positive integers r and c denoting the row and column numbers of the matrix to be reshaped, respectively.

The reshaped matrix needs to be filled with all the elements of the original matrix in the same row traversal order as the original.

If the ""reshape"" operation with the given arguments is feasible and legal, output the new reshape matrix; otherwise, output the original matrix.


Example 1:
enter:
number =
[[1,2],
 [3,4]]
r = 1, c = 4
output:
[[1,2,3,4]]
Explanation: The row traversal of nums is [1,2,3,4]. The new reshape matrix is ​​a 1 * 4 matrix, fill it row by row with the previous list.


Example 2:
enter:
number =
[[1,2],
 [3,4]]
r = 2, c = 4
output:
[[1,2],
 [3,4]]
Explanation: It is not possible to reshape a 2 * 2 matrix into a 2 * 4 matrix. So output the original matrix.

notes:
The height and width of the given matrix are in the range [1, 100].

The given r and c are both positive.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings s1 and s2, write a function that returns true if s2 contains a permutation of s1. In other words, one of the permutations of the first string is a substring of the second string.


Example 1:
Input: s1 = ""ab"" s2 = ""eidbaooo""
output: true
Explanation: s2 contains a permutation of s1 (""ba"").


Example 2:
Input: s1 = ""ab"" s2 = ""eidboaoo""
output: error

constraint:
The input string contains only lowercase letters.

Both given strings have lengths in the range [1, 10,000].",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"LeetCode would like to offer one of its best employees the option to travel between N cities to collect algorithm problems. But all work and no play makes Jack a dull boy, and you can take vacations in certain cities and weeks. Your job is to arrange travel to maximize the number of days off you can take, but you need to follow certain rules and restrictions.

Rules and Restrictions:
You can only travel between N cities, represented by indices from 0 to N-1. Initially, you are in city index 0 on Monday.

These cities are connected by flights. Flights are represented as an N*N matrix (not necessarily symmetrical), called flights, representing the airline status from city i to city j. flights[i][j] = 0 if there are no flights from city i to city j; otherwise, flights[i][j] = 1. Also, flights[i][i] = 0 for all i.

You have a total of K weeks (7 days per week) to travel. You are limited to one flight per day and only on Monday morning flights. Since the flight time is short, we do not consider the effect of flight time.

For each city, you can only limit the number of vacation days in different weeks, given an N*K matrix called days to represent this relationship. For the value of days[i][j], it represents the maximum number of days you can vacation in city i in week j.

Given a matrix of flights and a matrix of days, you need to output the maximum number of days you can take vacation in K weeks.


Example 1:
Input: Flights = [[0,1,1],[1,0,1],[1,1,0]], Days = [[1,3,1],[6,0,3],[ 3,3,3]]
Output: 12
Explanation: Answer = 6 + 3 + 3 = 12.
One of the best strategies is to:
The first week: fly from city 0 to city 1 on Monday, play for 6 days and work for 1 day. (While you start at city 0, we could also fly to other cities and start at other cities because it's Monday.)
Second week: fly from city 1 to city 2 on Monday, play for 3 days and work for 4 days.

Week 3: Stay in City 2, play for 3 days, and work for 4 days.


Example 2:
Input: Flights = [[0,0,0],[0,0,0],[0,0,0]], Days = [[1,1,1],[7,7,7],[ 7,7,7]]
Output: 3
Explanation: Answer = 1 + 1 + 1 = 3.
Since there is no flight that will allow you to move to another city, you have to stay in city 0 for the full 3 weeks. Each week, you only have one day to play and six days to work. So the maximum number of days of holiday is 3.


Example 3:
Input: flights = [[0,1,1],[1,0,1],[1,1,0]], days = [[7,0,0],[0,7,0],[ 0,0,7]]
Output: 21
Explanation: Answer = 7 + 7 + 7 = 21
One of the best strategies is to:
The first week: City 0, play for 7 days.
Second week: Fly from city 0 to city 1 on Monday, and play for 7 days.

The third week: Fly from city 1 to city 2 on Monday, and play for 7 days.

notes:
N and K are positive integers with a value range of [1, 100].

In the matrix flights, all values ​​are integers in the range [0, 1].

In the matrix days , all values ​​are integers in the range [0, 7].

You can stay in the city beyond the number of vacation days, but you must continue to work for the excess days, which will not be counted as vacation days.

If you fly from city A to city B and take vacation on the same day, the deducted vacation days will be included in the vacation days in city B in that week.

We do not consider the impact of flight time on the calculation of leave days.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-empty binary trees s and t, check if tree t has exactly the same structure and node values ​​as a subtree of s. A subtree of s is a tree consisting of a node in s and all descendants of that node. A tree s can also be thought of as its own subtree.


Example 1:
Given a tree:
     3
    / \
   4 5
  / \
 1 2
Given a tree t:
   4
  / \
 1 2
Returns true because the subtrees of t and s have the same structure and node values.


Example 2:
Given a tree:
     3
    / \
   4 5
  / \
 1 2
    /
   0
Given a tree t:
   4
  / \
 1 2
returns false.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a tree, a squirrel and some nuts. Positions are represented by cells in a two-dimensional grid. Your goal is to find the minimum distance the squirrel collects all the nuts and place them one by one under the tree. The squirrel can only take at most one nut at a time, and can move to adjacent cells in four directions: up, down, left, and right. The distance is represented by the number of moves.


Example 1:
enter:
Height: 5
Width: 7
Tree position: [2,2]
Squirrel: [4,4]
Nuts: [[3,0], [2,5]]
Output: 12
explain:
​​​​​​
notes:
All given positions will not overlap.

Squirrels can eat up to one nut at a time.

There is no order for the given positions of the nuts.

Height and width are positive integers. 3 <= height * width <= 10,000.

A given location contains at least one nut, only one tree and one squirrel.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice has n candies, of which the type of the ith candy is candyType[i]. Alice noticed that she was starting to gain weight, so she went to the doctor.

The doctor advises Alice to eat only `n / 2` of candies she has (`n` is always even). Alice loves her sweets so much that she wants to eat as many different kinds of sweets as possible while following the doctor's advice.

Given an integer array candyType of length n, return the maximum number of different types of candy she can eat if she eats only n / 2 of them.


Example 1:
Input: candyType = [1,1,2,2,3,3]
Output: 3
Explanation: Alice can only eat 6 / 2 = 3 candies. Since there are only 3, she can eat one of each.


Example 2:
Input: candyType = [1,1,2,3]
Output: 2
Explanation: Alice can only eat 4 / 2 = 2 candies. Whether she eats types [1,2], [1,3] or [2,3], she still can only eat two different types.


Example 3:
Input: candyType = [6,6,6,6]
Output: 1
Explanation: Alice can only eat 4 / 2 = 2 candies. Although she can eat 2 candies, she only has one.


constraint:
`n == candyType. length`
`2 <= n <= 104`
`n` is an even number.

`-105 <= candyType[i] <= 105`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an m x n grid with spheres. Given the ball's starting coordinates (i,j), you can move the ball to an adjacent cell or across the grid boundary in four directions (up, down, left, right). However, you can move up to N times. Find the number of paths to move the ball outside the grid boundaries. The answer may be large, return after mod 109 + 7.


Example 1:
Input: m = 2, n = 2, N = 2, i = 0, j = 0
Output: 6
explain:

Example 2:
Input: m=1, n=3, N=3, i=0, j=1
Output: 12
explain:
notes:
Once you move the ball out of bounds, you cannot move it back.

The length and height of the grid are in the range [1,50].

N is in the range [0,50].",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums , you need to find a contiguous subarray, if you sort only this subarray in ascending order, then the whole array will be sorted in ascending order.

Return the shortest such subarray and output its length.


Example 1:
Input: nums = [2,6,4,8,10,9,15]
Output: 5
Explanation: [6, 4, 8, 10, 9] needs to be sorted in ascending order, so that the entire array is arranged in ascending order.


Example 2:
Input: nums = [1,2,3,4]
output: 0

Example 3:
input: nums = [1]
output: 0

constraint:
`1 <= nums.length <= 104`
`-105 <= nums[i] <= 105`
Follow up: Can you solve it in `O(n)` time complexity?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have n processes forming a rooted tree structure. Given two integer arrays pid and ppid, where pid[i] is the ID of the ith process and ppid[i] is the ID of the parent of the ith process.

Each process has exactly one parent process, but may have multiple child processes. Only one process has `ppid[i] = 0`, which means this process has no parent process (root of the tree).

When a process is killed, all its child processes are also killed.

Given an integer `kill` representing the IDs of the processes to be killed, return a list of IDs of the processes to be killed. You can return answers in any order.


Example 1:
Input: pid = [1,3,10,5], ppid = [3,0,5,3], kill = 5
Output: [5,10]
Explanation: Processes in red are processes that should be killed.


Example 2:
Input: pid = [1], ppid = [0], kill = 1
output: [1]

constraint:
`n == pid. length`
`n == ppid. length`
`1 <= n <= 5 * 104`
`1 <= pid[i] <= 5 * 104`
`0 <= ppid[i] <= 5 * 104`
There is only one process with no parent process.

All values ​​of `pid` are unique.

`kill` is guaranteed to be in `pid`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""word1"" and ""word2"", return the minimum number of steps required to make ""word1"" and ""word2"" the same.

In just one step, you can delete a character from any string.


Example 1:
Input: word1 = ""sea"", word2 = ""eat""
Output: 2
Explanation: You need to change ""sea"" to ""ea"" in one step, and change ""eat"" to ""ea"" in another step.


Example 2:
Input: word1 = ""leetcode"", word2 = ""etco""
Output: 4

constraint:
`1 <= word1.length, word2.length <= 500`
`word1` and `word2` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are trees, where each tree is represented by (x,y) coordinates in a 2D garden. Your job is to fence the entire garden with the shortest possible rope, because it's expensive. A garden is only well fenced if all trees are fenced off. Your task is to help find the coordinates of the trees that happen to be on the perimeter of the fence.


Example 1:
Input: [[1,1],[2,2],[2,0],[2,4],[3,3],[4,2]]
Output: [[1,1],[2,0],[4,2],[3,3],[2,4]]
explain:

Example 2:
Input: [[1,2],[2,2],[4,2]]
Output: [[1,2],[2,2],[4,2]]
explain:
Even if you only have a row of trees, you will need to rope them off.
notes:
All trees should be fenced. You can't cut the ropes to surround trees that would divide them into more than one group.

All input integers range from 0 to 100.

There is at least one tree in the garden.

All coordinates are different.

The input points are not in order. The output does not need to be in order.
Input types changed on April 15, 2019. Please reset to default code definition for new method signature.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an in-memory file system to simulate the following functions:
`ls`: Given a path in string format. If it is a file path, return a list containing only the filename. If it is a directory path, returns a list of filenames and directory names under that directory. Your output (filenames and directorynames together) should be in lexicographical order.

`mkdir`: Given a directory path that does not exist, you should create a new directory based on that path. You should also create intermediate directories in your path if they don't exist either. This function has a void return type.

`addContentToFile`: Given a file path and the file content in string format. If the file does not exist, you need to create a file with the given content. If the file already exists, the given content needs to be appended to the original. This function has a void return type.

`readContentFromFile`: Given a file path, returns its content in string format.


example:
enter:
[""filesystem"", ""ls"", ""mkdir"", ""addContentToFile"", ""ls"", ""readContentFromFile""]
[[],[""/""],[""/a/b/c""],[""/a/b/c/d"",""Hello""],[""/""],[""/a/ b/cd""]]
output:
[null,[],null,null,[""a""],""Hello""]
explain:
notes:
You can assume that all file or directory paths are absolute paths starting with ""/"" and not ending with ""/"", unless the path is just ""/"".

You can assume that all operations will be passed valid parameters, and that users will not attempt to retrieve file contents or list directories or files that do not exist.

You can assume that all directory names and file names contain only lowercase letters, and the same name will not exist in the same directory.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of an n-ary tree, return a postorder traversal of its node values.

Nary-Tree input serialization representations in their level order traversal. Each set of children is separated by a null value (see example)

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [5,6,3,2,4,1]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null ,empty,14]
Output: [2,6,14,11,7,3,12,8,4,13,9,10,5,1]

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`0 <= Node.val <= 104`
The height of the n-ary tree is less than or equal to '1000'.

Follow up: Solving recursively is trivial, can you iterate?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string representing a snippet of code, you need to implement a token validator that parses the code and returns whether it is valid. A code snippet is valid if all of the following rules are true:
Code must be contained within a valid closing tag. Otherwise, the code is invalid.

Enclosing tags (not necessarily valid) have the following format: `<TAG_NAME>TAG_CONTENT</TAG_NAME>`. Among them, `<TAG_NAME>` is the start tag, and `</TAG_NAME>` is the end tag. TAG_NAME should be the same in opening and closing tags. A closing tag is valid if and only if TAG_NAME and TAG_CONTENT are valid.

A valid `TAG_NAME` contains only uppercase letters and has a length in the range [1,9]. Otherwise, ""TAG_NAME"" is invalid.

A valid `TAG_CONTENT` may contain other valid closing tags, cdata, and any characters (see Note 1), except unmatched `<`, unmatched start and end tags, and unmatched or closed tags with an invalid TAG_NAME. Otherwise, ""TAG_CONTENT"" is invalid.

If no closing tag with the same TAG_NAME exists, the opening tag does not match, and vice versa. However, you also need to consider the problem of unbalanced label nesting.

A `<` is not a match if no subsequent `>` is found. When you find a `<` or `</`, all subsequent characters before the next `>` should be parsed as TAG_NAME (not necessarily valid).

cdata has the following format: `<![CDATA[CDATA_CONTENT]]>`. The range of `CDATA_CONTENT` is defined as the characters between `<![CDATA[` and the first subsequent `]]>`.
`CDATA_CONTENT` can contain any characters. The role of cdata is to prohibit the validator from parsing `CDATA_CONTENT`, so even if it has some characters that can be parsed as a tag (whether valid or invalid), you should treat it as a regular character.

Example of valid code:
Enter: ""<DIV>This is the first line <![CDATA[<div>]]></DIV>""
output: true
explain:
Code is contained within a closing tag: <DIV> and </DIV>.
TAG_NAME is valid, TAG_CONTENT consists of some characters and cdata.
Although CDATA_CONTENT has a mismatching opening tag and an invalid TAG_NAME, it should be treated as plain text and not parsed as a tag.

So TAG_CONTENT is valid, so is the code. thus returning true.

Enter: ""<DIV>>> ![cdata[]] <![CDATA[<div>]>]]>]]>>]</DIV>""
output: true
explain:
Let's first divide the code into: start_tag|tag_content|end_tag.

start_tag -> ""<DIV>""
end_tag ​​-> ""</DIV>""
tag_content can also be divided into: text1|cdata|text2.

text1 -> "">> ![cdata[]]""
cdata -> ""<![CDATA[<div>]>]]>"", where CDATA_CONTENT is ""<div>]>""
text2 -> ""]]>>]""
The reason start_tag is not ""<DIV>>>"" is because of rule 6.

The reason cdata is not ""<![CDATA[<div>]>]]>]]>"" is because of rule 7.


Example of invalid code:
Enter: ""<A> <B> </A> </B>""
output: error
Explanation: Unbalanced. If ""<A>"" is off, then ""<B>"" must not match, and vice versa.

Input: ""The <DIV> div tag is not closing <DIV>""
output: error
Input: ""<DIV>does not match</DIV>""
output: error
Input: ""<DIV> Closing tag <b>123</b> </DIV> with invalid tag name""
output: error
Input: ""<DIV>Mismatching tag with invalid tag name</1234567890> and <CDATA[[]]> ​​</DIV>""
output: error
Input: ""<DIV>Mismatched start tag <B> and mismatched end tag</C> </DIV>""
output: error
notes:
For simplicity, you can assume that the input code (including any of the above characters) contains only ""letters"", ""numbers"", ""<"", "">"", ""/"", ""!"" ,`'['`,`'] '` and `' '`.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string representing an expression for addition and subtraction of fractions, the result of the calculation needs to be returned as a string. The final result should be an irreducible fraction. If your final result is an integer, say 2, you need to change it to a fraction format with a denominator of 1. So in this case `2` should be converted to `2/1`.


Example 1:
Input: ""-1/2+1/2""
Output: ""0/1""

Example 2:
Input: ""-1/2+1/2+1/3""
Output: ""1/3""

Example 3:
Enter: ""1/3-1/2""
Output: ""-1/6""

Example 4:
Input: ""5/3+1/3""
Output: ""2/1""
notes:
The input string contains only ""0"" to ""9"", ""/"", ""+"" and ""-"". The same goes for output.

Each fraction (input and output) is in the format ""±numerator/denominator"". The ""+"" will be omitted if the first input score or output is positive.

The input contains only valid irreducible fractions, where the numerator and denominator of each fraction are always in the range [1,10]. A denominator of 1 means that the fraction is actually an integer in the fraction format defined above.

The number of given fractions will be in the range [1,10].

The numerator and denominator of the final result are guaranteed to be valid and within the range of a 32-bit int.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the coordinates of four points p1, p2, p3, and p4 in 2D space, returns true if the four points form a square.

The coordinates of a point pi are denoted as [xi, yi] . Inputs are not given in any order.

A valid square has four equal positive sides and four equal angles (90-degree angles).


Example 1:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
output: true

Example 2:
Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,12]
output: error

Example 3:
Input: p1 = [1,0], p2 = [-1,0], p3 = [0,1], p4 = [0,-1]
output: true

constraint:
`p1.length == p2.length == p3.length == p4.length == 2`
`-104 <= xi, yi <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We define a harmonious array as an array whose maximum and minimum values ​​differ by exactly ""1"".

Given an integer array nums, return the length of the longest harmonious subsequence among all its possible subsequences.

A subsequence of an array is a sequence that can be derived from an array by deleting some elements or not deleting elements without changing the order of the remaining elements.


Example 1:
Input: nums = [1,3,2,2,5,2,3,7]
Output: 5
Explanation: The longest harmonious subsequence is [3,2,2,2,3].


Example 2:
Input: nums = [1,2,3,4]
Output: 2

Example 3:
Input: nums = [1,1,1,1]
output: 0

constraint:
`1 <= nums.length <= 2 * 104`
`-109 <= nums[i] <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an m x n matrix M initialized with all 0s and an operand array ops, where ops[i] = [ai, bi] means that M[x][y] `should be for all `0 <= x < ai` and `0 <= y < bi` Increment by 1.

After all operations are performed, calculate and return the number of largest integers in the matrix.


Example 1:
Input: m = 3, n = 3, ops = [[2,2],[3,3]]
Output: 4
Explanation: The largest integer in M ​​is 2, and there are 4 in M, so return 4.


Example 2:
Input: m = 3, n = 3, ops = [[2,2],[3,3],[3,3],[3,3],[2,2],[3,3],[ 3,3],[3,3],[2,2],[3,3],[3,3],[3,3]]
Output: 4

Example 3:
Input: m = 3, n = 3, ops = []
Output: 9

constraint:
`1 <= m, n <= 4*104`
`1 <= ops.length <= 104`
`ops[i].length == 2`
`1 <= ai <= m`
`1 <= bi <= n`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Say Andy and Doris want to choose a restaurant for dinner, and they both have a list of favorite restaurants represented as strings.

You need to help them find out what they have in common with the least sum of list indexes. If there is a choice relationship between the answers, then output all the answers, there is no order requirement. You can assume there is always an answer.


Example 1:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""Piatti"",""The Grill at Torrey Pines"",""Hungry Hunter Steakhouse"",""Shogun""]
Output: [""Shogun""]
Explanation: Their only favorite restaurant is ""Shogun"".


Example 2:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Shogun"",""Burger King""]
Output: [""Shogun""]
Explanation: The restaurant that they all like and has the least index sum is ""Shogun"" with an index sum of 1 (0+1).


Example 3:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]
Output: [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]

Example 4:
Input: list1 = [""Shogun"",""Tapioca Express"",""Burger King"",""KFC""], list2 = [""KNN"",""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]
Output: [""KFC"",""Burger King"",""Tapioca Express"",""Shogun""]

Example 5:
Input: list1 = [""KFC""], list2 = [""KFC""]
Output: [""KFC""]

constraint:
`1 <= list1.length, list2.length <= 1000`
`1 <= list1[i].length, list2[i].length <= 30`
`list1[i]` and `list2[i]` consist of spaces `' '` and English letters.

All strings in `list1` are unique.

All strings in `list2` are unique.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer n, find the number of nonnegative integers less than or equal to n whose binary representation does not contain consecutive integers.


Example 1:
Input: 5
Output: 5
explain:
Here are the non-negative integers <= 5 and their corresponding binary representations:
0 : 0
1 : 1
2 : 10
3:11
4 : 100
5 : 101
Among them, only the integer 3 does not conform to the rule (two in a row), and the other 5 conform to the rule.
notes:
1 <= n <= 109",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design and implement a data structure for compressed string iterators. A given compressed string will take the form of each letter followed by a positive integer representing the number of that letter present in the original uncompressed string.

Implement the StringIterator class:
`next()` returns the next character if there are still uncompressed characters in the original string, otherwise returns a space.

`hasNext()` returns true if there are any letters in the original string to unpack, otherwise returns `false`.


Example 1:
enter
[""StringIterator"", ""next"", ""next"", ""next"", ""next"", ""next"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[""L1e2t1C1o1d1e1""], [], [], [], [], [], [], [], [], []]
output
[empty, ""L"", ""e"", ""e"", ""t"", ""c"", ""o"", true, ""d"", true]
explain
StringIterator stringIterator = new StringIterator(""L1e2t1C1o1d1e1"");
stringIterator.next(); //return ""L""
stringIterator.next(); // returns ""e""
stringIterator.next(); // returns ""e""
stringIterator.next(); // returns ""t""
stringIterator.next(); //return ""C""
stringIterator.next(); // returns ""o""
stringIterator.hasNext(); // return true
stringIterator.next(); // returns ""d""
stringIterator.hasNext(); // return true

constraint:
`1 <= compressedString.length <= 1000`
`compressedString` consists of lowercase and uppercase English letters and numbers.

The number of repetitions of a single character in `compressedString` is in the range `[1, 10^9]`
There will be at most `100` calls to `next` and `hasNext`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a long flowerbed with some plots planted with some plots and others not. However, flowers cannot be planted on adjacent plots.

Given an integer array flowerbed of 0 and 1, where 0 is empty and 1 is not empty, and an integer n, if there are n new flowers, return the In ""Flower Bed"".


Example 1:
Input: flower bed = [1,0,0,0,1], n = 1
output: true

Example 2:
Input: flowerbed = [1,0,0,0,1], n = 2
output: error

constraint:
`1 <= flowerbed.length <= 2 * 104`
`flowerbed[i]` is either `0` or `1`.

There are no two adjacent flowers in the ""flower bed"".

`0 <= n <= flowerbed.length`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You need to construct a string of parentheses and integers from a binary tree using preorder traversal.

Empty nodes need to be denoted by an empty parenthesis pair ""()"". And you need to omit all empty parenthesis pairs that do not affect the one-to-one mapping between the string and the original binary tree.


Example 1:
Input: Binary tree: [1,2,3,4]
       1
     / \
    twenty three
   /
  4
Output: ""1(2(4))(3)""
Explanation: It should be ""1(2(4)())(3()())"", but all unnecessary empty parenthesis pairs need to be removed. It will be ""1(2(4))(3)"".


Example 2:
Input: Binary tree: [1,2,3,null,4]
       1
     / \
    twenty three
     \
      4
Output: ""1(2()(4))(3)""
Explanation: Almost the same as the first example, except that we cannot omit the first pair of parentheses to break the one-to-one mapping between inputs and outputs.",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list paths of directory information, including the directory path, and all files containing content in that directory, return all duplicate files in the file system according to the path. You can return answers in any order.

A set of duplicate files consists of at least two files with the same content.

A single directory information string in the input list has the following format:
`""root/d1/d2/.../dm f1.txt(f1_content) f2.txt(f2_content)...fn.txt(fn_content)""`
This means in the directory ""`root/d1/d2/.../dm""`. Note that ""n >= 1"" and ""m >= 0"". If `m=0`, it means that the directory is only the root directory.

The output is a list of duplicate file path groups. For each group it contains all file paths to files with the same content. A file path is a string with the following format:
`""directory_path/file_name.txt""`

Example 1:
Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)"","" root4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt"",""root/4.txt""],[""root/a/1.txt"",""root/c /3.txt""]]

Example 2:
Input: paths = [""root/a 1.txt(abcd) 2.txt(efgh)"",""root/c 3.txt(abcd)"",""root/c/d 4.txt(efgh)""]
Output: [[""root/a/2.txt"",""root/c/d/4.txt""],[""root/a/1.txt"",""root/c/3.txt""]]

constraint:
`1 <= paths.length <= 2 * 104`
`1 <= path[i].length <= 3000`
`1 <= sum(path[i].length) <= 5 * 105`
`paths[i]` consists of English letters, numbers, `'/'`, `'.'`, `'('`, `')'` and `' '`.

You can assume that there are no files or directories sharing the same name in the same directory.

You can assume that each given directory information represents a unique directory. A space separates directory path and file information.

follow up:
Imagine giving you a real file system, how would you search for files? DFS or BFS?
How would you modify your solution if the file content is very large (on the order of gigabytes)?
How would you modify your solution if you could only read files 1kb at a time?
What is the time complexity of your modified solution? What is the most time and memory consuming part of it? How to optimize?
How to make sure that the duplicate files you find are not false positives?",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of non-negative integers, your task is to count the number of triples selected from the array that can form a triangle if we take them as the side lengths of the triangle.


Example 1:
Input: [2,2,3,4]
Output: 3
explain:
Valid combinations are:
2,3,4 (use first 2)
2,3,4 (use second 2)
2,2,3
notes:
The length of the given array will not exceed 1000.

The integers in the given array are in the range [0, 1000].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and a list of strings dict, you need to add a pair of closing bold tags `<b>` and `</b>` to wrap the substrings in s that exist in dict. If two such substrings overlap, you just need to wrap them together with a pair of enclosing bold tags. In addition, if two substrings surrounded by bold tags are consecutive, they need to be merged.


Example 1:
enter:
s = ""abcxyz123""
Dictionary = [""abc"",""123""]
output:
""<b>abc</b>xyz<b>123</b>""

Example 2:
enter:
s = ""aaabbcc""
Dictionary = [""aaa"",""aab"",""bc""]
output:
""<b>aaabbc</b>c""

constraint:
The given dictionary will not contain duplicates and its length will not exceed 100.

All strings in the input have lengths in the range [1, 1000].

Note: This question is the same as 758: https://leetcode.com/problems/bold-words-in-string/",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two binary trees ""root1"" and ""root2"".

Imagine when you overlay one of these trees on top of another so that some nodes of the two trees overlap and others don't. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, the node values ​​are added as the new value of the merged node. Otherwise, NOT null nodes will be used as nodes of the new tree.

Return the merged tree.

Note: The merging process must start from the root nodes of both trees.


Example 1:
Input: root1 = [1,3,2,5], root2 = [2,1,3,null,4,null,7]
Output: [3,4,5,5,4,null,7]

Example 2:
Input: root1 = [1], root2 = [1,2]
output: [2,2]

constraint:
The number of nodes in both trees is in the range ""[0, 2000]"".

`-104 <= Node.val <= 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A character array tasks is given, representing the tasks that the CPU needs to complete, where each letter represents a different task. Tasks can be done in any order. Each task is completed in one unit of time. For each unit of time, the CPU can either complete a task or just be idle.

However, there is a non-negative integer n denoting the cooldown time (same letter in the array) between two identical tasks, i.e. there must be at least n time units between any two identical tasks.

Returns the minimum number of time units required by the CPU to complete all given tasks.


Example 1:
Input: Task = [""A"",""A"",""A"",""B"",""B"",""B""], n = 2
Output: 8
explain:
A -> B -> Free -> A -> B -> Free -> A -> B
There is at least 2 time units between any two identical tasks.


Example 2:
Input: Task = [""A"",""A"",""A"",""B"",""B"",""B""], n = 0
Output: 6
Explanation: In this case, any permutation of size 6 will work, since n = 0.

[""A"", ""A"", ""A"", ""B"", ""B"", ""B""]
[""A"", ""B"", ""A"", ""B"", ""A"", ""B""]
[""B"", ""B"", ""B"", ""A"", ""A"", ""A""]
...

etc.


Example 3:
Input: Tasks = [""A"",""A"",""A"",""A"",""A"",""A"",""B"",""C"",""D"",""E"",""F"","" G""], n = 2
output: 16
explain:
One possible solution is
A -> B -> C -> A -> D -> E -> A -> F -> G -> A -> Free -> Free -> A -> Free -> Free -> A

constraint:
`1 <= task.length <= 104`
`tasks[i]` is an uppercase English letter.

The integer 'n' is in the range '[0, 100]'.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an implementation of a circular queue. A circular queue is a linear data structure that operates on the principle of FIFO (First In First Out). The last position is connected to the first position to form a cycle. It is also called ""ring buffer"".

One of the benefits of circular queues is that we can utilize the space at the front of the queue. In a normal queue, once the queue is full, we cannot insert the next element even if there is space in front of the queue. But with circular queue we can use space to store new values.

Implement the `MyCircularQueue` class:
`MyCircularQueue(k)` initializes an object of the queue size to `k`.

`int Front()` gets the front item from the queue. Returns ""-1"" if the queue is empty.

`int Rear()` gets the last item from the queue. Returns ""-1"" if the queue is empty.

`boolean enQueue(int value)` Insert an element into the circular queue. Returns true if the operation was successful.

`boolean deQueue()` removes an element from the circular queue. Returns true if the operation was successful.

`boolean isEmpty()` checks if the circular queue is empty.

`boolean isFull()` checks if the circular queue is full.


Example 1:
enter
[""MyCircularQueue"", ""enQueue"", ""enQueue"", ""enQueue"", ""enQueue"", ""Rear"", ""isFull"", ""deQueue"", ""enQueue"", ""Rear""]
[[3], [1], [2], [3], [4], [], [], [], [4], []]
output
[null, true, true, true, false, 3, true, true, true, 4]
explain
MyCircularQueue myCircularQueue = new MyCircularQueue(3);
myCircularQueue.enQueue(1); // returns true
myCircularQueue.enQueue(2); // returns true
myCircularQueue.enQueue(3); // returns true
myCircularQueue.enQueue(4); // returns false
myCircularQueue.Rear(); // returns 3
myCircularQueue.isFull(); // returns true
myCircularQueue.deQueue(); // returns true
myCircularQueue.enQueue(4); // returns true
myCircularQueue.Rear(); // returns 4

constraint:
`1 <= k <= 1000`
`0 <= value <= 1000`
Up to 3000 calls to enQueue, deQueue, Front, Rear, isEmpty and isFull will be made.

Follow-up: Can the problem be solved without using the built-in queue?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree and two integers ""val"" and ""depth"", add a row of nodes with value ""val"" at the given depth ""depth"".

Note that the ""root"" node is at depth ""1"".

The adding rules are:
Given an integer ""depth"", for each non-empty tree node ""cur"" at depth ""depth - 1"", create two tree nodes with value ""val"" as the left subtree root and right subtree of ""cur"" root.

The original left subtree of `cur` should be the left subtree of the root of the new left subtree.

The original right subtree of `cur` should be the right subtree of the root of the new right subtree.

If `depth == 1` means no depth `depth - 1` at all, create a tree node with value `val` as the new root of the whole original tree, which is the left subtree of the new root.


Example 1:
Input: root = [4,2,6,3,1,5], val = 1, depth = 2
Output: [4,1,1,2,null,null,6,3,1,5]

Example 2:
Input: root = [4,2,null,3,1], val = 1, depth = 3
Output: [4,2,null,1,1,3,null,null,1]

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

The depth of the tree is in the range ""[1, 104]"".

`-100 <= Node.val <= 100`
`-105 <= value <= 105`
`1 <= depth <= tree depth + 1`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `m` `arrays`, where each array is sorted in ascending order.

You can pick two integers from two different arrays (one from each array) and calculate the distance. We define the distance between two integers ""a"" and ""b"" as their absolute difference ""|a - b|"".

Returns the maximum distance.


Example 1:
Input: Array = [[1,2,3],[4,5],[1,2,3]]
Output: 4
Explanation: One way to achieve a maximum distance of 4 is to choose 1 in the first or third array, then 5 in the second array.


Example 2:
Input: array = [[1],[1]]
output: 0

Example 3:
Input: array = [[1],[2]]
Output: 1

Example 4:
Input: array = [[1,4],[0,5]]
Output: 4

constraint:
`m == arrays. length`
`2 <= m <= 105`
`1 <= arrays[i].length <= 500`
`-104 <= array[i][j] <= 104`
`arrays[i]` is sorted in ascending order.

There are at most 105 integers in all arrays.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer ""a"", find the smallest positive integer ""b"" whose product of each digit is equal to ""a"".
Returns 0 if there is no answer or if the answer does not fit in a 32-bit signed integer.


Example 1
enter:
48 years old
output:
68

Example 2
enter:
15
output:
35",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers nums, find the largest product of three numbers and return the largest product.


Example 1:
Input: nums = [1,2,3]
Output: 6

Example 2:
Input: nums = [1,2,3,4]
Output: 24

Example 3:
Input: nums = [-1,-2,-3]
Output: -6

constraint:
`3 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""n"" and ""k"", find how many different arrays are made of numbers from ""1"" to ""n"" such that there are exactly ""k"" inverse pairs.

We define an inverse pair: for `ith` and `jth` elements in an array, it is an inverse pair if `i` < `j` and `a[i]` > `a[j]`; otherwise, it no.

Since the answer can be very large, the answer should be modulo 109 + 7.


Example 1:
Input: n = 3, k = 0
Output: 1
explain:
Only the array [1,2,3] consisting of numbers from 1 to 3 has exactly 0 inverse pairs.


Example 2:
Input: n = 3, k = 1
Output: 2
explain:
The arrays [1,3,2] and [2,1,3] have exactly 1 inverse pair.

notes:
Integer n is in the range [1, 1000] and k is in the range [0, 1000].",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` different online courses, numbered from `1` to `n`. Each course has a certain duration (course length) `t` and closes on `dth` days. The course should be on ""t"" consecutive days and must be completed before or on ""d"" day. You will start on ""Day One"".

Given ""n"" online courses represented by ""(t,d)"" pairs, your task is to find the maximum number of courses that can be taken.


example:
Input: [[100, 200], [200, 1300], [1000, 1250], [2000, 3200]]
Output: 3
explain:
There are 4 courses in total, but you can take up to 3 courses:
First, take the first course, it takes 100 days, so you will finish it on day 100 and be ready to take the next course on day 101.

Second, take the third course, it takes 1000 days, so you will finish it on day 1100 and be ready to take the next course on day 1101.
Third, take the second course, which takes 200 days, so you'll finish it on day 1300.
Cannot take course 4 now because you will finish it on day 3300, which is past the deadline.

notes:
Integer 1 <= d, t, n <= 10,000.

You cannot take two courses at the same time.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your task is to design the basic functions of Excel and realize the function of the sum formula. Specifically, the following functions need to be implemented:
`Excel(int H, char W):` This is the constructor. The inputs represent the height and width of the Excel sheet. H is a positive integer ranging from 1 to 26, representing height. W is the character range from ""A"" to ""Z"". Indicates the number of characters of width 'A' to W. The content of the Excel table is represented by a height*width two-dimensional integer array 'C', which should be initialized to 0. You should assume that the first row of C starts at 1 and the first column of C starts at A.

`void Set(int row, char column, int val):` Change the value at `C(row, column)` to val.

`int Get(int row, char column):` returns the value at `C(row, column)`.

`int Sum(int row, char column, List of Strings : numbers):` This function calculates and sets the value of `C(row, column)`, where the value should be the sum of the cells represented by `numbers`. This function returns the sum result at `C(row, column)`. The sum formula should exist until the cell is overlapped by another value or another sum formula.

`numbers` is a list of strings, each string representing a cell or a range of cells. If the string represents a single cell, it has the following format: `ColRow`. For example, ""F7"" means the cell at (7, F).
If the string represents a range of cells, it has the following format: `ColRow1:ColRow2`. The range is always a rectangle, with ColRow1 representing the position of the upper left cell and ColRow2 representing the position of the lower right cell.

Example 1:
Excel(3,""C"");
// Construct a 3*3 two-dimensional array of all zeros.

// A B C
// 1 0 0 0
// 2 0 0 0
// 3 0 0 0
set(1, ""A"", 2);
// Set C(1,""A"") to 2.

// A B C
// 1 2 0 0
// 2 0 0 0
// 3 0 0 0
Sum(3, ""C"", [""A1"", ""A1:B2""]);
// Set C(3,""C"") to the sum of the value at C(1,""A"") and the value of the upper left cell at C(1,""A"") and the rectangle range at the bottom - right Cell is C(2,""B""). return 4.
// A B C
// 1 2 0 0
// 2 0 0 0
// 3 0 0 4
set(2, ""B"", 2);
// Set C(2,""B"") to 2. Note that C(3, ""C"") should also be changed.

// A B C
// 1 2 0 0
// 2 0 2 0
// 3 0 0 6
notes:
You can assume there won't be any circular sum references. For example, A1 = sum(B1) and B1 = sum(A1).

 Test cases use double quotes to denote a character.

Remember to reset class variables declared in class Excel as static/class variables persist across multiple test cases. See here for more details.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `k` lists of integers sorted in non-decreasing order. Find the smallest range containing at least one number from each ""k"" list.

We define the range `[a, b]` to be smaller than the range `[c, d]` if `b - a < d - c` or `a < c` if `b - a == d - c`.


Example 1:
Input: nums = [[4,10,15,24,26],[0,9,12,20],[5,18,22,30]]
Output: [20,24]
explain:
Listing 1: [4, 10, 15, 24,26], 24 is in the range [20,24].

Listing 2: [0, 9, 12, 20], 20 is in the range [20,24].

Listing 3: [5, 18, 22, 30], 22 is in the range [20,24].


Example 2:
Input: nums = [[1,2,3],[1,2,3],[1,2,3]]
output: [1,1]

Example 3:
Input: nums = [[10,10],[11,11]]
Output: [10,11]

Example 4:
Input: nums = [[10],[11]]
Output: [10,11]

Example 5:
Input: nums = [[1],[2],[3],[4],[5],[6],[7]]
Output: [1,7]

constraint:
`nums.length == k`
`1 <= k <= 3500`
`1 <= nums[i].length <= 50`
`-105 <= nums[i][j] <= 105`
`nums[i]` in non-descending order.",0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer ""c"", determine whether there are two integers ""a"" and ""b"" such that ""a2 + b2 = c"".


Example 1:
Input: c = 5
output: true
Explanation: 1 * 1 + 2 * 2 = 5

Example 2:
Input: c = 3
output: error

Example 3:
Input: c = 4
output: true

Example 4:
Input: c = 2
output: true

Example 5:
Input: c = 1
output: true

constraint:
`0 <= c <= 231 - 1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In combinatorics, disorder is the arrangement of the elements of a set such that no element appears in its original position.

It turns out that there is an array of `n` integers from 1 to n arranged in ascending order, and you need to find the number of permutations it can produce.

Also, since the answer can be very large, you should return the output of mod 109 + 7 .


Example 1:
Input: 3
Output: 2
Explanation: The original array is [1,2,3]. The two dislocations are [2,3,1] and [3,1,2].

notes:
`n` is in the range [1, 106].",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get multiple logs, each of which contains a unique ID and timestamp. The timestamp is a string in the following format: ""year:month:day:hour:minute:second"", for example ""2017:01:01:23:59:59"". All fields are zero-padded decimal numbers.

Implement the `LogSystem` class:
`LogSystem()` initializes a `LogSystem` object.

`void put(int id, string timestamp)` stores the given log `(id, timestamp)` in your storage system.

`int[] retrieve(string start, string end, string granularity)` returns log IDs with timestamps in the range `start` to `end`. Both `start` and `end` have the same format as `timestamp`, while `granularity` indicates how precise the range should be (i.e. accurate to `Day`, `Minute`, etc.). For example, `start = ""2017:01:01:23:59:59""`, `end = ""2017:01:02:23:59:59""` and `granularity = ""Day""` means we need to find 2017 Logs within the range from January 1 to January 2, 2017, the `Hour`, `Minute`, `Second` of each log entry can be ignored.


Example 1:
enter
[""log system"", ""put"", ""put"", ""put"", ""retrieve"", ""retrieve""]
[[], [1, ""2017:01:01:23:59:59""], [2, ""2017:01:01:22:59:59""], [3, ""2016:01:01: 00:00:00""], [""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Year""], [""2016:01:01: 01:01:01"", ""2017:01:01:23:00:00"", ""hour""]]
output
[empty, empty, empty, empty, [3, 2, 1], [2, 1]]
explain
LogSystem logSystem = new LogSystem();
logSystem.put(1, ""2017:01:01:23:59:59"");
logSystem.put(2, ""2017:01:01:22:59:59"");
logSystem.put(3, ""2016:01:01:00:00:00"");
// Return [3,2,1], because all logs from 2016 to 2017 need to be returned.

logSystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""Year"");
// return [2,1], because it needs to return all logs between 01:XX:XX on January 1, 2016 and 23:XX:XX on January 1, 2017.

// Log 3 is not returned because January 1, 2016 00:00:00 is before the start of the range.

logSystem.retrieve(""2016:01:01:01:01:01"", ""2017:01:01:23:00:00"", ""hour"");

constraint:
`1 <= id <= 500`
`2000 <= year <= 2017`
`1 <= month <= 12`
`1 <= day <= 31`
`0 <= hours <= 23`
`0 <= minutes, seconds <= 59`
`granularity` is one of the values ​​`[""Year"", ""Month"", ""Day"", ""Hour"", ""Minute"", ""Second""].

Up to 500 calls to put and retrieve will be made.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a single-threaded CPU, we execute a program consisting of ""n"" functions. Each function has a unique ID between ""0"" and ""n-1"".

Function calls are stored on the call stack: when a function call starts, its ID is pushed onto the stack, and when the function call ends, its ID is popped off the stack. The function whose ID is at the top of the stack is the function currently being executed. Every time a function starts or ends, we write a log with an ID, whether it started or ended, and a timestamp.

Given a list ""logs"" where ""logs[i]"" represents the ""ith"" log message of the form ""{function_id}:{""start"" | ""end""}:{timestamp}"". For example, ""0:start:3"" indicates that the function call with function ID ""0"" starts at timestamp ""3"", and ""1:end:2"" indicates that the function call with function ID ""0"" starts at timestamp 1` 2` ends at the end. Note that a function can be called multiple times, possibly recursively.

The exclusive time of a function is the sum of the execution times of all function calls in the program. For example, if a function is called twice, one call takes ""2"" time units and the other call takes ""1"" time units, the exclusive time is ""2 + 1 = 3"".

Returns the exclusive time for each function in the array, where the value at the ith index represents the exclusive time for the function with ID ""i"".


Example 1:
Input: n = 2, logs = [""0:start:0"",""1:start:2"",""1:end:5"",""0:end:6""]
Output: [3,4]
explain:
Function 0 starts at time 0, executes for 2 time units, and ends at time 1.

Function 1 starts at time 2, executes for 4 time units, and ends when time 5 ends.

Function 0 resumes execution from time 6 and executes for 1 unit of time.

So function 0 takes 2 + 1 = 3 units of total time to execute and function 1 takes 4 units of total time to execute.


Example 2:
Input: n = 1, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""0:start:6"",""0:end:6"","" 0:end:7""]
Output: [8]
explain:
Function 0 starts at time 0, executes for 2 units of time, and calls itself recursively.

Function 0 (the recursive call) starts at time 2 and executes for 4 time units.

Function 0 (the initial call) resumes execution, then immediately calls itself again.

Function 0 (the 2nd recursive call) starts at time 6 and executes for 1 time unit.

Function 0 (the initial call) resumes execution from time 7 and executes for 1 time unit.

So function 0 took 2 + 4 + 1 + 1 = 8 units of total execution time.


Example 3:
Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:6"",""1:end:6"","" 0:end:7""]
Output: [7,1]
explain:
Function 0 starts at time 0, executes for 2 units of time, and calls itself recursively.

Function 0 (the recursive call) starts at time 2 and executes for 4 time units.

Function 0 (the initial call) resumes execution, and then immediately calls function 1.

Function 1 starts at time 6, executes for 1 time unit, and ends when time 6 ends.

Function 0 resumes execution from time 6 and executes for 2 units of time.

So function 0 takes 2 + 4 + 1 = 7 units of total time to execute and function 1 takes 1 unit of total time to execute.


Example 4:
Input: n = 2, logs = [""0:start:0"",""0:start:2"",""0:end:5"",""1:start:7"",""1:end:7"","" 0:end:8""]
Output: [8,1]

Example 5:
Input: n = 1, logs = [""0:start:0"",""0:end:0""]
output: [1]

constraint:
`1 <= n <= 100`
`1 <= logs.length <= 500`
`0 <= function_id < n`
`0 <= timestamp <= 109`
No two start events occur at the same timestamp.

No two end events will occur at the same timestamp.

Each function has an ""end"" log for each ""start"" log.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the average value of nodes at each level as an array. Answers within 10-5 of the actual answer will be accepted.


Example 1:
Input: root = [3,9,20,null,15,7]
Output: [3.00000, 14.50000, 11.00000]
Explanation: Layer 0 nodes have an average of 3, layer 1 is 14.5, and layer 2 is 11.

So [3, 14.5, 11] is returned.


Example 2:
Input: root = [3,9,20,15,7]
Output: [3.00000, 14.50000, 11.00000]

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-231 <= Node.val <= 231 - 1`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In LeetCode Store, there are some items for sale. Every item has a price.

However, there are some specials, which consist of one or more different kinds of items and a sale price.

You will get the price of each item, a set of special offers and the quantity we need to buy for each item.

The job is to output the minimum price you have to pay for a given specific item, where you can take advantage of specials.

Each special is represented as an array, the last number represents the price you need to pay for this special, and the other numbers represent how many specific items you can get if you buy this special.

You can use any special offer as many times as you want.


Example 1:
Input: [2,5], [[3,0,5], [1,2,10]], [3,2]
Output: 14
explain:
There are two goods, A and B. They cost $2 and $5 respectively.
In Special 1, 3A and 0B you can pay $5
In special offer 2, you can pay $10 for 1A and 2B.
You need to buy 3A and 2B, so you can pay $10 for 1A and 2B (special offer #2) and $4 for 2A.


Example 2:
Input: [2,3,4], [[1,1,0,4], [2,2,1,9]], [1,2,1]
Output: 11
explain:
The price of A is $2, B is $3, and C is $4.
You can pay $4 for 1A and 1B, and $9 for 2A, 2B, and 1C.
You need to buy 1A, 2B, and 1C, so you can pay $4 for 1A and 1B (special offer #1), $3 for 1B, and $4 for 1C.
You can't add more items, but 2A, 2B, and 1C are only $9.

notes:
Up to 6 items, 100 specials.

You need to buy up to 6 of each item.

You may not buy more than you want, even if it lowers the overall price.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Messages containing letters ""A-Z"" can be encoded as numbers using the following mapping:
'A' -> ""1""
'B' -> ""2""
...

'Z' -> ""26""
To decode an encoded message, all digits must be grouped and then mapped back to letters using the inverse of the above mapping (multiple methods are possible). For example, `""11106""` could map to:
`""AAJF""` with grouping `(1 1 10 6)`
`""KJF""` with grouping `(11 10 6)`
Note that the grouping `(1 11 06)` is invalid because `""06""` cannot be mapped into `'F' because `""6""` is different from `""06""`.

In addition to the above mapping, encoded messages may contain ""*"" characters, which can represent any digit from ""1"" to ""9"" (excluding ""0""). For example, an encoded message ""1*"" may represent any encoded message ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"". Decoding `""1*""` is equivalent to decoding any encoded message it can represent.

Given a string ""s"" containing digits and ""*"" characters, return the number of ways to decode it.

Since the answer can be very large, return modulo 109 + 7 .


Example 1:
Input: s = ""*""
Output: 9
Explanation: An encoded message can represent any encoded message ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", or ""9"".

Each of these can be decoded as the strings ""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""G"", ""H"" and ""I"" respectively.

Therefore, there are 9 ways to decode ""*"".


Example 2:
Input: s = ""1*""
Output: 18
Explanation: An encoded message can represent any encoded message ""11"", ""12"", ""13"", ""14"", ""15"", ""16"", ""17"", ""18"", or ""19"".

Each of these encoded messages has two ways of decoding (e.g. ""11"" can be decoded as ""AA"" or ""K"").

So in total there are 9 * 2 = 18 ways to decode ""1*"".


Example 3:
Input: s = ""2*""
Output: 15
Explanation: An encoded message can represent any encoded message ""21"", ""22"", ""23"", ""24"", ""25"", ""26"", ""27"", ""28"", or ""29"".

""21"", ""22"", ""23"", ""24"", ""25"", and ""26"" have two decoding methods, while ""27"", ""28"", and ""29"" have only one decoding method.

So in total there are (6 * 2) + (3 * 1) = 12 + 3 = 15 ways to decode ""2*"".


constraint:
`1 <= s.length <= 105`
`s[i]` is a number or `'*'`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Solve the given equation and return the value of `x` as the string ""x=#value"". The equation contains only ""+"", ""-"" operations, the variable ""x"" and its coefficients.

Returns ""No Solution"" if the equation has no solution.

If the equation has infinite solutions, return ""Infinite solutions"".

If the equation has only one solution, we ensure that the value of x is an integer.


Example 1:
Input: ""x+5-3+x=6+x-2""
Output: ""x=2""

Example 2:
Input: ""x=x""
Output: ""infinite solutions""

Example 3:
Input: ""2x=x""
Output: ""x=0""

Example 4:
Input: ""2x+3x-6x=x+2""
Output: ""x=-1""

Example 5:
Input: ""x=x+2""
Output: ""No solution""",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design an implementation of a circular double-ended queue (deque).

Your implementation should support the following operations:
`MyCircularDeque(k)`: Constructor, set the size of the double-ended queue to k.

`insertFront()`: Adds an item to the front of the Deque. Returns true if the operation was successful.

`insertLast()`: Adds an item to the end of the Deque. Returns true if the operation was successful.

`deleteFront()`: Deletes an item from the front of the Deque. Returns true if the operation was successful.

`deleteLast()`: Delete an item from the back of the Deque. Returns true if the operation was successful.

`getFront()`: Get the front item from the deque. Returns -1 if the deque is empty.

`getRear()`: Get the last item from the deque. Returns -1 if the deque is empty.

`isEmpty()`: Check if the Deque is empty.
`isFull()`: Checks if the deque is full.


example:
MyCircularDeque circularDeque = new MycircularDeque(3); // set size to 3
circularDeque.insertLast(1); // return true
circularDeque.insertLast(2); // return true
circularDeque.insertFront(3); // return true
circularDeque.insertFront(4); // return false, the queue is full
circularDeque.getRear(); // returns 2
circularDeque.isFull(); // returns true
circularDeque.deleteLast(); // return true
circularDeque.insertFront(4); // return true
circularDeque.getFront(); // returns 4
notes:
All values ​​are in the range [0, 1000] .

Operands will be in the range [1, 1000].

Please do not use the built-in Deque library.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a search autocomplete system for a search engine. The user can enter a sentence (at least one word ending with the special character '#'). For every character they type, except '#', you need to return the top 3 historically popular sentences prefixed with the same part of the sentence already typed. The following are the specific rules:
The popularity of a sentence is defined as the number of times the user has entered the exact same sentence before.

The top 3 returned sentences should be ordered by popularity (the first being the most popular). If several sentences have the same popularity, you need to use the order of ASCII codes (smaller ones first).

If there are less than 3 hot sentences, return as many as possible.

When the input is a special character, it means the end of the sentence, and an empty list needs to be returned at this time.

Your job is to implement the following functionality:
Constructor:
`AutocompleteSystem(String[] sentences, int[] times):` This is the constructor. The input is historical data. `Sentences` is an array of strings consisting of previously entered sentences. `Times` is the corresponding time to input a sentence. Your system should record this historical data.

Now, the user wants to enter a new sentence. The following function will provide the next character typed by the user:
`List<String> input(char c):` Input `c` is the next character typed by the user. This character can only be lowercase letters (`'a'` through `'z'`), spaces (`' '`), or special characters (`'#'`). Also, previously typed sentences should be recorded in your system. The output will be the top 3 historically popular sentences with the same prefix as the part of the input sentence.


example:
Operation: AutocompleteSystem([""i love you"", ""island"",""ironman"", ""i love leetcode""], [5,3,2,2])
The following sentences and their corresponding times have been traced:
`""I love you""`: `5` times
`""island""` : `3` times
`""ironman""` : `2` times
`""I love leetcode""` : `2` times
Now, the user starts another search:
Action: input('i')
Output: [""i love you"", ""island"", ""i love leetcode""]
explain:
There are four sentences with the prefix ""i"". Among them, ""Iron Man"" and ""I Love Leetcode"" are equally popular. Since `' '` has ASCII code 32 and `'r'` has ASCII code 114, ""i love leetcode"" should come before ""ironman"". Also we only need to output the top 3 hot sentences, so ""ironman"" will be ignored.

Operation: enter (' ')
Output: [""I love you"", ""I love leetcode""]
explain:
Only two sentences have the prefix ""I"".

Action: enter('a')
output: []
explain:
There are no sentences prefixed with ""i a"".

Operation: Enter ('#')
output: []
explain:
After the user input is completed, the sentence ""i a"" should be saved in the system as a historical sentence. And the following input will be considered as a new search.

notes:
Sentences entered always start with a letter and end with '#', with only one space between two words.

The number of complete sentences to be queried shall not exceed 100 sentences, and the length of each sentence including historical data shall not exceed 100 sentences.

Even for character input, please use double quotes instead of single quotes when writing test cases.

Remember to reset class variables you declare in class AutocompleteSystem because static/class variables persist across multiple test cases. See here for more details.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of 'n' integers, find the contiguous subarray of given length 'k' that has the largest mean. You need to output the largest average.


Example 1:
Input: [1,12,-5,-6,50,3], k=4
Output: 12.75
Explanation: The maximum average is (12-5-6+50)/4 = 51/4 = 12.75
notes:
1 <= `k` <= `n` <= 30,000.

The elements of the given array will be in the range [-10,000, 10,000] .",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" consisting of ""n"" elements and an integer ""k"".

Finds and returns the contiguous subarray of length greater than or equal to 'k' that has the largest mean. Any answer with a calculated error of less than ""10-5"" will be accepted.


Example 1:
Input: nums = [1,12,-5,-6,50,3], k = 4
Output: 12.75000
explain:
- when the length is 4, the mean is [0.5, 12.75, 10.5] and the maximum mean is 12.75
- When the length is 5, the mean is [10.4, 10.8] and the maximum mean is 10.8
- When the length is 6, the average is [9.16667] and the maximum average is 9.16667
The maximum mean is when we choose the subarray of length 4 (i.e. the subarray [12, -5, -6, 50]), its maximum mean is 12.75, so we return 12.75
Note that we do not consider subarrays of length < 4.


Example 2:
Input: nums = [5], k = 1
Output: 5.00000

constraint:
`n == nums. length`
`1 <= k <= n <= 104`
`-104 <= nums[i] <= 104`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a set of integers s, initially containing all numbers from 1 to n. Unfortunately, due to some bug, one number in ""s"" was copied to another number in the set, which caused one number to be duplicated and the other to be lost.

You will get an array ""nums"" of integers representing the state of the collection's data after the error occurred.

Find the number that appears twice and the number that appears less, and return it in the form of an array.


Example 1:
Input: nums = [1,2,2,4]
output: [2,3]

Example 2:
Input: nums = [1,1]
output: [1,2]

constraint:
`2 <= nums.length <= 104`
`1 <= nums[i] <= 104`",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given n pairs of numbers. In each pair, the first number is always less than the second number.

Now, we define that a pair `(c, d)` can follow another pair `(a, b)` if and only if `b < c`. Pair chains can be formed in this way.
Given a set of pairs, find the longest chain that can be formed. You don't need to use up all given pairs. You can select pairs in any order.


Example 1:
Input: [[1,2], [2,3], [3,4]]
Output: 2
Explanation: The longest chain is [1,2] -> [3,4]
notes:
The number of given pairs will be in the range [1, 1000] .",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string, your task is to count how many palindromic substrings are in this string.

Substrings with different start or end indexes are counted as distinct substrings even if they consist of the same characters.


Example 1:
Input: ""abc""
Output: 3
Explanation: Three palindrome strings: ""a"", ""b"", ""c"".


Example 2:
Input: ""aaa""
Output: 6
Explanation: Six palindrome strings: ""a"", ""a"", ""a"", ""aa"", ""aa"", ""aaa"".

notes:
The input string length will not exceed 1000.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In English, we have a concept called a root, which can be followed by some other word to form another longer word - we call this word successor. For example, when the root word ""an"" is followed by the successor word ""other"", we can form a new word ""another"".

Given a ""dictionary"" of many roots and a ""sentence"" of words separated by spaces, replace all subsequent words in the sentence with the roots that make it up. If the successor can be replaced by more than one root, it is replaced by the root with the shortest length.

Return the replaced `sentence`.


Example 1:
Input: dictionary = [""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
Output: ""The cat is the mouse of the bat""

Example 2:
Input: dictionary = [""a"",""b"",""c""], sentence = ""aadsfasf absbs bbab cadsfafs""
Output: ""a a b c""

Example 3:
Input: dictionary = [""a"", ""aa"", ""aaa"", ""aaaa""], sentence = ""a aa a aaaa aaa aaa aaa aaaaaa bbb baba ababa""
Output: ""a a a a a a a bbb baba a""

Example 4:
Input: dictionary = [""catt"",""cat"",""bat"",""rat""], sentence = ""the cattle was rattled by the battery""
Output: ""The cat is the mouse of the bat""

Example 5:
Input: dictionary = [""ac"",""ab""], sentence = ""It is not normal for this solution to be accepted""
Output: ""The solution is either ac or ab""

constraint:
`1 <= dictionary.length <= 1000`
`1 <= dictionary[i].length <= 100`
`dictionary[i]` contains only lowercase letters.

`1 <= sentence.length <= 10^6`
`sentence` consists only of lowercase letters and spaces.

The number of words in `sentence` is in the range `[1, 1000]`
The length of each word in `sentence` is in the range `[1, 1000]`
Every two consecutive words in `sentence` will be separated by a space.

`sentence` has no leading or trailing spaces.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the world of Dota2, there are two political parties: ""Radiant"" and ""Dire"".

The Dota2 Senate is made up of Senators from both political parties. Now the Senate wants to make a decision on changes to the Dota2 game. Voting on this change is a turn-based procedure. In each round, each senator can exercise ""one"" of the following two rights:
`The right to bar a senator`:
A senator can cause another senator to lose all rights for the current round and all subsequent rounds.

`declare victory`:
If that senator finds out that the senators still voting are all from the same party, he can declare victory and dictate a game change.

Given a string representing the political party each senator belongs to. The characters ""R"" and ""D"" stand for the ""Radiant"" party and the ""Dire"" party, respectively. Then if there are n senators, the size of the given string will be n.

The turn-based procedure starts from the first senator to the last senator in a given order. This process will continue until the close of voting. All senators who lose power will be skipped in the process.

Assuming each senator is smart enough to play the best strategy for their party, you need to predict which side will end up declaring victory and making a difference in the Dota2 match. The output should be ""Radiant"" or ""Dire"".


Example 1:
Enter: ""RD""
Output: ""radiation""
Explanation: The first senator comes from Radiant, who can bar the rights of the next senator in round 1.
And the rights of the second senator have been barred and can no longer exercise any rights.
In round 2, the first senator can declare victory because he is the only person in the Senate who can vote.


Example 2:
Input: ""RDD""
Output: ""terrible""
explain:
The first senator comes from Radiant, who can bar the rights of the next senator in the first round.
And the rights of the second senator have been barred and can no longer exercise any rights.
And the third senator is from night-gaunts, who can ban the rights of the first senator in the first round.
In the second round, a third senator can declare victory because he is the only person in the Senate who can vote.

notes:
The length of the given string will be in the range [1, 10,000].",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Originally only one character ""A"" existed on Notepad. You can perform two actions on this notepad for each step:
`Copy all`: You can copy all characters on the notepad (partial copying is not allowed).

`Paste`: You can paste the characters copied last time.

Given a number ""n"". You have to get exactly ""n"" number of ""As"" on notepad by performing the minimum number of steps allowed. Output the minimum number of steps to get `n` 'A'.

Example 1:
Input: 3
Output: 3
explain:
Initially, we have a character ""A"".

In step 1, we used the Copy All operation.

In step 2, we used the paste operation to get ""AA"".

In step 3, we used the paste operation to get ""AAA"".

notes:
`n` will be in the range [1, 1000].",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Suppose you have a special keyboard with the following keys:
`Key 1: (A)`: Print an ""A"" on the screen.

`Key 2: (Ctrl-A)`: Select the entire screen.

`Key 3: (Ctrl-C)`: Copy selection to buffer.

`Key 4: (Ctrl-V)`: Print buffer on screen, appending it to what was already printed.
Now, you can only press the keyboard N times (with the top four keys), to find out the maximum number of 'A's you can print on the screen.


Example 1:
Input: N = 3
Output: 3
explain:
We can display up to 3 A's on the screen by pressing the following key sequence:
one, one, one

Example 2:
Input: N = 7
Output: 9
explain:
We can display up to 9 A's on the screen by pressing the following key sequence:
A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
notes:
1 <= N <= 50
The answer will be in the range of 32-bit signed integers.",0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return all duplicate subtrees.

For each repeated subtree, only the root node of any one of them needs to be returned.

Two trees are duplicates if they have the same structure and the same node values.


Example 1:
Input: root = [1,2,3,4,null,2,4,null,null,4]
Output: [[2,4],[4]]

Example 2:
Input: root = [2,1,1]
output: [[1]]

Example 3:
Input: root = [2,2,2,3,null,3,null]
Output: [[2,3],[3]]

constraint:
The number of nodes in the tree will be in the range ""[1, 10^4]""
`-200 <= Node.val <= 200`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree and the goal number ""k"", returns ""true"" if two elements exist in the BST and their sum is equal to the given goal.


Example 1:
Input: root = [5,3,6,2,4,null,7], k = 9
output: true

Example 2:
Input: root = [5,3,6,2,4,null,7], k = 28
output: error

Example 3:
Input: root = [2,1,3], k = 4
output: true

Example 4:
Input: root = [2,1,3], k = 1
output: error

Example 5:
Input: root = [2,1,3], k = 3
output: true

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-104 <= Node.val <= 104`
`root` is guaranteed to be a valid binary search tree.

`-105 <= k <= 105`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array ""nums"" with no duplicates. The largest binary tree can be constructed recursively from nums using the following algorithm:
Create a root node whose value is the largest value in `nums`.

Build the left subtree recursively on the subarray prefix to the left of the maximum value.

Recursively builds the right subtree on the subarray suffix to the right of the maximum value.

Return the largest binary tree constructed from `nums`.


Example 1:
Input: nums = [3,2,1,6,0,5]
Output: [6,3,5,null,2,0,null,null,1]
Explanation: The recursive call is as follows:
- The maximum value in [3,2,1,6,0,5] is 6. The left prefix is ​​[3,2,1] and the right suffix is ​​[0,5].

    - The maximum value in [3,2,1] is 3. The left prefix is ​​[] and the right suffix is ​​[2,1].

        - Empty array, so no children.

        - The maximum value in [2,1] is 2. The left prefix is ​​[] and the right suffix is ​​[1].

            - Empty array, so no children.

            - There is only one element, so child is a node with value 1.

    - The maximum value in [0,5] is 5. The left prefix is ​​[0] and the right suffix is ​​[].

        - There is only one element, so child is a node with value 0.

        - Empty array, so no children.


Example 2:
Input: nums = [3,2,1]
Output: [3,null,2,null,1]

constraint:
`1 <= nums.length <= 1000`
`0 <= nums[i] <= 1000`
All integers in `nums` are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Print a binary tree in an m*n two-dimensional string array according to the following rules:
The row number m should be equal to the height of the given binary tree.

Column number ""n"" should always be odd.

The value of the root node (in string format) should be placed in the middle of the first line. The column and row where the root node resides divides the remaining space into two parts (bottom left and bottom right). You should print the left subtree in the lower left part and the right subtree in the lower right part. The bottom left and bottom right sections should have the same size. Even if one subtree is none and the other isn't, you don't need to print anything for the none subtree, but you still need to leave an equally large space for the other subtree. However, if neither subtree has any, then you don't need to make room for both.
Each unused space should contain an empty string """".

Subtrees are printed following the same rules.


Example 1:
enter:
     1
    /
   2
output:
[["""", ""1"", """"],
 [""2"","""",""""]]

Example 2:
enter:
     1
    / \
   twenty three
    \
     4
output:
[["""", """", """", ""1"", """", """", """"],
 ["""", ""twenty three"", """"],
 ["""", """", ""4"", """", """", """", """"]]

Example 3:
enter:
      1
     / \
    2 5
   /
  3
 /
4
output:
[["""","""","""","""","""","""","""",""1"","""","""","""","""","""","""",""""]
 ["""", """", """", ""2"", """", """", """", """", """", """", """", ""5"", """", """", """"]
 ["""", ""3"", """", """", """", """", """", """", """", """", """", """", """", """", """"]
 [""4"", """", """", """", """", """", """", """", """", """", """", """", """", """", """", """"]]
notes:
The height of the binary tree is in the range [1, 10].",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" consisting of N integers (indexed starting at ""1""): A1, A2, ..., AN and an integer ""B"". The integer `B` means that from any position in the array `A` (assuming the index is `i`), you can jump to any position in the array `A` whose index is `i+1`, `i +2`, . .., `i+B` If this place can jump to. Also, if you step on index ""i"", you have to pay Ai coins. If Ai is -1, it means that it is impossible to jump to the position at index `i` in the array.

Now, you start at index ""1"" in array ""A"" and your goal is to reach index ""N"" using the fewest coins. You need to return the indexed path (from 1 to N) in the array, you should use the fewest coins to get to the location with index ""N"".

If there are multiple paths with the same cost, the lexicographically smallest such path is returned.

If the position at index N cannot be reached, you need to return an empty array.


Example 1:
Input: [1,2,4,-1,2], 2
Output: [1,3,5]

Example 2:
Input: [1,2,4,-1,2], 1
output: []
notes:
Paths Pa1, Pa2, ..., Pan are lexicographically smaller than Pb1, Pb2, ..., Pbm if and only if at the first ""i"" where Pai and Pbi are different, Pai < Pbi; when there is no Such `i`, then `n` < `m`.

A1 >= 0. A2, ..., AN (if present) will be in the range [-1, 100] .

The length of A is in the range [1, 1000].

B is in the range [1, 100].",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a robot starting from the origin position (0, 0) on the 2D plane. Given its sequence of actions, determine whether the robot ends up at (0, 0) after completing the actions.

The sequence of moves is represented by a string, and the character moves[i] represents its i-th step. Valid moves are R (right), L (left), U (up) and D (down). Returns true if the robot returned to the origin after completing all actions. Otherwise, return false.

NOTE: It doesn't matter which way the robot ""faces"". ""R"" will always make the robot move one time to the right, ""L"" will always make it move to the left, etc. Also, assume that the robot moves by the same amount each time it moves.


Example 1:
input:move=""UD""
output: true
Explanation: The robot moves up once, then down once. All moves have the same magnitude, so it ends up at the origin where it started. Therefore, we return true.


Example 2:
input:move=""ll""
output: error
Explanation: The robot moved to the left twice. It ends up ""moving"" twice to the left of the origin. We return false because it was not at the origin at the end of the move.


Example 3:
input:move=""RRDD""
output: error

Example 4:
Input: moves = ""LDRRRLRUULR""
output: error

constraint:
`1 <= moves.length <= 2 * 104`
`moves` contains only the characters `'U'`, `'D'`, `'L'`, and `'R'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted array of integers ""arr"", two integers ""k"" and ""x"", return the ""k"" closest integers to ""x"" in the array. The results should also be sorted in ascending order.

An integer ""a"" is closer to ""x"" than an integer ""b"" if:
`|a - x| < |b - x|`, or
`|a - x| == |b - x|` and `a < b`

Example 1:
Input: arr = [1,2,3,4,5], k = 4, x = 3
Output: [1,2,3,4]

Example 2:
Input: arr = [1,2,3,4,5], k = 4, x = -1
Output: [1,2,3,4]

constraint:
`1 <= k <= arr.length`
`1 <= arr.length <= 104`
`arr` sorts in ascending order.

`-104 <= arr[i], x <= 104`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of integers sorted in ascending order, return it if and only if you can split it into one or more subsequences, and each subsequence consists of consecutive integers of length at least ""3"" ""true"".


Example 1:
Input: nums = [1,2,3,3,4,5]
output: true
explain:
You can split them into two consecutive subsequences:
1, 2, 3
3, 4, 5

Example 2:
Input: nums = [1,2,3,3,4,4,5,5]
output: true
explain:
You can split them into two consecutive subsequences:
1, 2, 3, 4, 5
3, 4, 5

Example 3:
Input: nums = [1,2,3,4,4,5]
output: error

constraint:
`1 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`
`nums` are sorted in ascending order.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Starting with the integer 1, remove any integers containing 9, such as 9, 19, 29...

So now, you will have a new sequence of integers: 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, ...

Given a positive integer n, you need to return the nth integer after removal. Note that 1 will be the first integer.


Example 1:
Input: n = 9
Output: 10

constraint:
`1 <= n <= 8 x 10^8`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional integer matrix M representing the grayscale of an image, a smoother needs to be designed so that the grayscale of each cell is the average grayscale of all 8 surrounding cells and itself (rounded down). If there are less than 8 cells around a cell, use as many as possible.


Example 1:
enter:
[[1,1,1],
 [1,0,1],
 [1,1,1]]
output:
[[0, 0, 0],
 [0, 0, 0],
 [0, 0, 0]]
explain:
For points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For point (1,1): floor(8/9) = floor(0.88888889) = 0
notes:
The values ​​in the given matrix are in the range [0, 255].

The length and width of the given matrix are in the range [1, 150].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, write a function to get the maximum width of a given tree. The maximum width of the tree is the maximum width among all levels.

The width of a level is defined as the length between end nodes (the leftmost and rightmost non-empty nodes in that level, where ""empty"" nodes between end nodes are also counted in the length calculation.

The answer is guaranteed to be within the range of a 32-bit signed integer.


Example 1:
enter:
           1
         / \
        3 2
       / \ \
      5 3 9
Output: 4
Explanation: The maximum width that exists in the third layer, the length is 4 (5,3,null,9).


Example 2:
enter:
          1
         /
        3
       / \
      5 3
Output: 2
Explanation: The maximum width exists at level 3 with a length of 2 (5,3).


Example 3:
enter:
          1
         / \
        3 2
       /
      5
Output: 2
Explanation: The maximum width that exists in the second layer, the length is 2 (3,2).


Example 4:
enter:
          1
         / \
        3 2
       / \
      5 9
     / \
    6 7
Output: 8
Explanation: The fourth layer has a maximum width and a length of 8 (6,null,null,null,null,null,null,7).


constraint:
A given binary tree will have ""1"" to ""3000"" nodes.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree with ""n"" nodes, your task is to check whether it is possible to partition the tree into two trees with equal value sum after removing exactly one edge on the original tree.


Example 1:
enter:
    5
   / \
  10 10
    / \
   twenty three
output: true
explain:
    5
   /
  10
      
Total: 15
   10
  / \
 twenty three
Total: 15

Example 2:
enter:
    1
   / \
  2 10
    / \
   2 20
output: error
Explanation: After removing exactly one edge on the tree, you cannot split the tree into two trees with equal sums.

notes:
The value range of the tree node is in the range of [-100000, 100000].

1 <= n <= 10000",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I have a strange printer with the following two special requirements:
The printer can only print the same series of characters each time.

Each round, the printer can start and end printing new characters anywhere, and will overwrite existing characters.

Given a string containing only lowercase English letters, your task is to calculate the minimum number of turns required by the printer to print it.


Example 1:
Enter: ""aaabbb""
Output: 2
Explanation: Print ""aaa"" first, then ""bbb"".


Example 2:
Enter: ""aba""
Output: 2
Explanation: Print ""aaa"" first, and then print ""b"" from the second character of the string, which will overwrite the existing character ""a"".

Hint: The length of the given string will not exceed 100.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` containing `n` integers, your task is to check whether it can be made non-decreasing by modifying at most one element.

We define an array to be non-decreasing if `nums[i] <= nums[i + 1]` holds for each `i` (0-based) such that (`0 <= i <= n - 2`).


Example 1:
Input: nums = [4,2,3]
output: true
Explanation: You can modify the first ""4"" to ""1"" to get a non-decreasing array.


Example 2:
Input: nums = [4,2,1]
output: error
Explanation: You cannot get a non-decreasing array by modifying at most one element.


constraint:
`n == nums. length`
`1 <= n <= 104`
`-105 <= nums[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"If a tree's depth is less than ""5"", then the tree can be represented by a list of three-digit integers.

For each integer in this list:
Hundreds represent the depth `D` of this node, `1 <= D <= 4`
The tens digit indicates the position `P` of the node in its hierarchy, `1 <= P <= 8`. The position is the same as in the full binary tree.

The unit digit represents the value `V` of the node, `0 <= V <= 9`
Given a list of ""ascending"" three-digit integers representing a binary tree of depth less than 5, you need to return the sum of all paths from the root to the leaves.

Guarantees that the given list represents a valid linked binary tree.


Example 1:
Input: [113, 215, 221]
Output: 12
explain:
The tree represented by the list is:
    3
   / \
  5 1
The path sum is (3 + 5) + (3 + 1) = 12.


Example 2:
Input: [113, 221]
Output: 4
explain:
The tree represented by the list is:
    3
     \
      1
The path sum is (3 + 1) = 4.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers `n` and `k`, you need to construct a list containing `n` distinct positive integers ranging from `1` to `n` satisfying the following requirements:
Suppose this list is [a1, a2, a3, ... , an], then the list is [|a1 - a2|, |a2 - a3|, |a3 - a4|, ... , |an-1 - an |] There are exactly `k` distinct integers.

If there are multiple answers, print any of them.


Example 1:
Input: n = 3, k = 1
Output: [1, 2, 3]
Explanation: [1, 2, 3] has three distinct positive integers between 1 and 3, and [1, 1] has exactly 1 distinct integer: 1.


Example 2:
Input: n = 3, k = 2
Output: [1, 3, 2]
Explanation: [1, 3, 2] has three distinct positive integers between 1 and 3, and [2, 1] has exactly 2 distinct integers: 1 and 2.

notes:
`n` and `k` are in the range 1 <= k < n <= 104.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Almost everyone has used a multiplication table. But can you quickly find the kth smallest number from the multiplication table?
Given an m * n multiplication table of height m and length n, and a positive integer k, you need to return the kth smallest number in the table.


Example 1:
Input: m=3, n=3, k=5
output:
explain:
Multiplication table:
1 2 3
2 4 6
3 6 9
The 5th smallest number is 3 (1, 2, 2, 3, 3).


Example 2:
Input: m=2, n=3, k=6
output:
explain:
Multiplication table:
1 2 3
2 4 6
The 6th smallest number is 6 (1, 2, 2, 3, 4, 6).

notes:
`m` and `n` will be in the range [1, 30000].

`k` will be in the range [1, m * n]",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree and the lowest and highest bounds ""low"" and ""high"", prune the tree so that all elements are at ""[low, high]"". Pruning the tree should not change the relative structure of elements that will remain in the tree (ie, any node's descendants should remain descendants). It can be proved that the answer is unique.

Returns the root of the pruned binary search tree. Note that the root may change according to the given bounds.


Example 1:
Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]

Example 2:
Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]

Example 3:
Input: root = [1], low = 1, high = 2
output: [1]

Example 4:
Input: root = [1,null,2], low = 1, high = 3
Output: [1,null,2]

Example 5:
Input: root = [1,null,2], low = 2, high = 4
output: [2]

constraint:
The number of nodes in the tree in the range '[1, 104]'.

`0 <= Node.val <= 104`
The value of each node in the tree is unique.

`root` is guaranteed to be a valid binary search tree.

`0 <= low <= high <= 104`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer, you can swap two digits at most once to get the maximum value. Returns the maximum value you can get.


Example 1:
Input: 2736
Output: 7236
Explanation: Swap the number 2 and the number 7.


Example 2:
Input: 9973
Output: 9973
Explanation: No swap.

notes:
The given number is in the range [0, 108]",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a special non-empty binary tree consisting of nodes with non-negative values, where each node in the tree has exactly ""two"" or ""zero"" children. If the node has two children, the node's value is the smaller of its two children. More formally, the property root.val = min(root.left.val, root.right.val) always holds.

Given such a binary tree, you need to output the second smallest value in the set of values ​​of all nodes in the entire tree.

If there is no such second minimum, -1 is output.


Example 1:
Input: root = [2,2,5,null,null,5,7]
Output: 5
Explanation: The smallest value is 2, and the next smallest value is 5.


Example 2:
Input: root = [2,2,2]
Output: -1
Explanation: The smallest value is 2, but there is no second smallest value.


constraint:
The number of nodes in the tree is in the range '[1, 25]'.

`1 <= Node.val <= 231 - 1`
`root.val == min(root.left.val, root.right.val)` for each internal node of the tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a room with `n` lights that are initially turned on and 4 buttons on the wall. After performing m unknown operations on the button, it needs to return how many different states the n lights can have.

Assuming `n` lights are labeled as numbers [1, 2, 3 ..., n], the functions of these 4 buttons are as follows:
Flip all lights.

Flip the lights with an even number.

Flip the lights with an odd number.

Flip lights with (3k + 1) numbers, k = 0, 1, 2, ...


Example 1:
Input: n = 1, m = 1.
Output: 2
Description: The state can be: [on], [off]

Example 2:
Input: n = 2, m = 1.
Output: 3
Description: The state can be: [on, off], [off, on], [off, off]

Example 3:
Input: n = 3, m = 1.
Output: 4
Description: The state can be: [off,on,off], [on,off,on], [off,off,off],[off,on,on].

Note: `n` and `m` are both in the range [0, 1000].",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, return the number of longest increasing subsequences.

Note that sequences must be strictly increasing.


Example 1:
Input: nums = [1,3,5,4,7]
Output: 2
Explanation: The two longest increasing subsequences are [1, 3, 4, 7] and [1, 3, 5, 7].


Example 2:
Input: nums = [2,2,2,2,2]
Output: 5
Explanation: The longest continuous increasing subsequence has a length of 1, and there are 5 subsequences with a length of 1, so output 5.


constraint:
`1 <= nums.length <= 2000`
`-106 <= nums[i] <= 106`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an unsorted integer array ""nums"", return the length of the longest consecutive increasing subsequence (i.e. subarray). Subsequences must be strictly increasing.

A continuously increasing subsequence is defined by two indices `l` and `r` (`l < ​​r`), so it is `[nums[l], nums[l + 1], ..., nums[r - 1 ], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.


Example 1:
Input: nums = [1,3,5,4,7]
Output: 3
Explanation: The longest consecutive increasing subsequence is [1,3,5] of length 3.

Although [1,3,5,7] is an increasing subsequence, it is not contiguous because elements 5 and 7 are separated by elements
4.


Example 2:
Input: nums = [2,2,2,2,2]
Output: 1
Explanation: The longest continuous increasing subsequence is [2] with a length of 1, attention must be strict
Increase.


constraint:
`0 <= nums.length <= 104`
`-109 <= nums[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have been asked to cut down all the trees in the forest for a golf game. A forest is represented as an ""m x n"" matrix. In this matrix:
'0' means the cell cannot be traversed.

`1` indicates empty cells that can be traversed.

A number greater than ""1"" means that a tree in the cell can walk through, and this number is the height of the tree.

With just one step, you can walk in any of four directions: North, East, South, West. If you're standing in a cell with a tree in it, you can choose whether to chop it down or not.

You have to cut down the trees in order from shortest to tallest. When you chop down a tree, the value in its cell becomes ""1"" (empty cell).

Starting from point `(0, 0)`, return the minimum number of steps you need to take to chop down all trees. If you can't cut down all the trees, return ""-1"".

You guarantee that no two trees are the same height, and at least one needs to be cut down.


Example 1:
Input: Forest = [[1,2,3],[0,0,4],[7,6,5]]
Output: 6
Instructions: Following the path above, you can cut down trees in 6 steps from shortest to tallest.


Example 2:
Input: Forest = [[1,2,3],[0,0,0],[7,6,5]]
Output: -1
Explanation: The bottom row of the tree cannot be accessed because the middle row is blocked.


Example 3:
Input: Forest = [[2,3,4],[0,0,5],[8,7,6]]
Output: 6

Explanation: You can follow the same path as Example 1 to cut down all the trees.

Note that you can cut off the first tree at (0, 0) before doing any steps.


constraint:
`m == forest. length`
`n == forest[i].length`
`1 <= meters, n <= 50`
`0 <= forest[i][j] <= 109`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a data structure initialized with different lists of words. Given a string, you should determine if you can change exactly one character in this string to match any word in the data structure.

Implement the `MagicDictionary` class:
`MagicDictionary()` initializes the object.

`void buildDict(String[] dictionary)` sets up the data structure with a different set of `dictionary` strings.

`bool search(String searchWord)` returns `true` if you can change exactly one character in `searchWord` to match any string in the data structure, `false` otherwise.


Example 1:
enter
[""MagicDictionary"", ""buildDict"", ""search"", ""search"", ""search"", ""search""]
[[], [[""hello"", ""leetcoded""]], [""hello""], [""hhllo""], [""hell""], [""leetcoded""]]
output
[empty, empty, false, true, false, false]
explain
Magic Dictionary magicDictionary = new Magic Dictionary();
magicDictionary.buildDict([""Hello"", ""leetcode""]);
magicDictionary.search(""Hello""); // returns false
magicDictionary.search(""hhllo""); // we can change the second 'h' to 'e' to match ""hello"" so we return True
magicDictionary.search(""Hell""); // returns false
magicDictionary.search(""leetcoded""); // returns false

constraint:
`1 <= dictionary.length <= 100`
`1 <= dictionary[i].length <= 100`
`dictionary[i]` contains only lowercase English letters.

All strings in `dictionary` are distinct.

`1 <= searchWord.length <= 100`
`searchWord` contains only lowercase English letters.

`buildDict` will only be called once, before `search`.

At most 100 calls to search will be made.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `MapSum` class:
`MapSum()` initializes a `MapSum` object.

`void insert(String key, int val)` inserts a `key-val` pair into the map. If `key` already exists, the original `key-value` pair will be overwritten by the new one.

`int sum(string prefix)` returns the sum of all pair values ​​whose `key` starts with `prefix`.


Example 1:
enter
[""MapSum"", ""Insert"", ""Sum"", ""Insert"", ""Sum""]
[[], [""apple"", 3], [""ap""], [""app"", 2], [""ap""]]
output
[empty, empty, 3, empty, 5]
explain
MapSum mapSum = new MapSum();
mapSum.insert(""Apple"", 3);
mapSum.sum(""ap""); // returns 3 (apples = 3)
mapSum.insert(""Application"", 2);
mapSum.sum(""ap""); // returns 5 (apple + app = 3 + 2 = 5)

constraint:
`1 <= key.length, prefix.length <= 50`
`key` and `prefix` contain only lowercase English letters.

`1 <= value <= 1000`
Up to 50 calls to insert and sum will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s containing only three types of characters: `'('`, `')'` and `'*'`, return `true` if `s` is valid.

The following rules define a valid string:
Any opening bracket `'('` must have a corresponding closing bracket `')'`.

Any closing parenthesis `')'` must have a corresponding opening parenthesis `'('`.

An opening bracket `'('` must precede the corresponding closing bracket `')'.

`'*'` can be treated as a single closing parenthesis `')'` or a single opening parenthesis `'('` or an empty string `""""`.


Example 1:
Input: s = ""()""
output: true

Example 2:
Input: s = ""(*)""
output: true

Example 3:
Input: s = ""(*))""
output: true

constraint:
`1 <= s.length <= 100`
`s[i]` is `'('`, `')'` or `'*'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have 4 cards, each card is a number from 1 to 9, you need to judge whether they can be obtained by `*`, `/`, `+`, `-`, `(`, `)` twenty four.


Example 1:
Input: [4, 1, 8, 7]
output: true
Explanation: (8-4) * (7-1) = 24

Example 2:
Input: [1, 2, 1, 2]
output: error
notes:
The division operator ""/"" means real division, not integer division. For example, 4 / (1 - 2/3) = 12.

Every operation done is between two numbers. In particular, we cannot use ""-"" as a unary operator. For example, with ""[1, 1, 1, 1]"" as input, the expression ""-1 - 1 - 1 - 1"" is not allowed.

You cannot connect numbers together. For example, if the input is ""[1, 2, 1, 2]"", we cannot write it as 12 + 12.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty string s, you can delete at most one character. Judge whether it can be made into a palindrome.


Example 1:
Enter: ""aba""
output: true

Example 2:
Enter: ""abca""
output: true
Explanation: You can delete the character ""c"".

notes:
The string will contain only lowercase characters a-z.

The maximum length of the string is 50000.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 'time' in 'HH:MM' format, forms the next closest time by reusing the current number. There is no limit to the number of times a number can be reused.

You can assume that a given input string is always valid. For example, `""01:34""`, `""12:09""` are all valid. `""1:34""`, `""12:9""` are invalid.


Example 1:
input:time=""19:34""
Output: ""19:39""
Explanation: The next closest time chosen from the numbers 1, 9, 3, 4 is 19:39, which is 5 minutes later.

It's not 19:33 because that happened 23 hours and 59 minutes later.


Example 2:
input:time=""23:59""
Output: ""22:22""
Explanation: The next closest time chosen from the numbers 2, 3, 5, 9 is 22:22.

The returned time can be assumed to be the next day's time since it is numerically less than the input time.


constraint:
`time.length == 5`
`time` is a valid time in the form `""HH:MM""`.

`0 <= HH < 24`
`0 <= mm < 60`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You're scoring a baseball game with weird rules. The game consists of rounds, and scores from past rounds may affect scores from future rounds.

When the game starts, your record is empty. You will get a list of strings ops, where ops[i] is the ith operation you have to apply to the record and is one of:
integer x - the new x score to record.

`""+""` - Record a new score which is the sum of the previous two scores. Guaranteed to always have two previous scores.

`""D""` - Record a new score that is twice the previous score. Guaranteed to always have a previous score.

`""C""` - Invalidates the previous score, removing it from the record. Guaranteed to always have a previous score.

Returns the sum of all scores in the record.


Example 1:
Input: ops = [""5"",""2"",""C"",""D"",""+""]
Output: 30
explain:
""5"" - Adds 5 to the record, which is now [5].

""2"" - Adds 2 to the record, which is now [5, 2].

""C"" - Invalidate previous score and delete, record is now [5].

""D"" - Adds 2 * 5 = 10 to the record, which is now [5, 10].

""+"" - Adds 5 + 10 = 15 to the record, which is now [5, 10, 15].

The sum is 5 + 10 + 15 = 30.


Example 2:
Input: ops = [""5"",""-2"",""4"",""C"",""D"",""9"",""+"",""+""]
Output: 27
explain:
""5"" - Adds 5 to the record, which is now [5].

""-2"" - Add -2 to the record, the record is now [5, -2].

""4"" - Adds 4 to the record, which is now [5, -2, 4].

""C"" - Invalidate previous score and remove, record is now [5, -2].

""D"" - Adds 2 * -2 = -4 to the record, which is now [5, -2, -4].

""9"" - Adds 9 to the record, which is now [5, -2, -4, 9].

""+"" - Adds -4 + 9 = 5 to the record, which is now [5, -2, -4, 9, 5].

""+"" - Adds 9 + 5 = 14 to the record, which is now [5, -2, -4, 9, 5, 14].

The sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.


Example 3:
Input: ops = [""1""]
Output: 1

constraint:
`1 <= ops.length <= 1000`
`ops[i]` is `""C""`, `""D""`, `""+""`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.

For ""+"" operations, there are always at least two previous scores in the record.

For actions ""C"" and ""D"", there is always at least one previous score in the record.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` bulbs in a row, numbered from `1` to `n`. Initially, all bulbs are off. We turn on only one light bulb each day until all light bulbs are turned on after n days.

Given an array bulbs of length n, where bulbs[i] = x means that on day (i+1) we will turn on the bulb at position x, where i` is 0-indexed and `x` is 1 indexed.

Given an integer ""k"", return the minimum number of days such that there are two on bulbs with exactly ""k"" bulbs in between that are all off. If there is no such day, return ""-1"".


Example 1:
Input: bulb = [1,3,2], k = 1
Output: 2
explain:
First day: bulbs[0] = 1, first bulb turned on: [1,0,0]
Second day: bulbs[1] = 3, turn on the third bulb: [1,0,1]
Day 3: bulbs[2] = 2, turn on the second bulb: [1,1,1]
We return 2 because on the second day, there are two bulbs that are on and one that is off.


Example 2:
Input: bulb = [1,2,3], k = 1
Output: -1

constraint:
`n == bulbs. length`
`1 <= n <= 2 * 104`
`1 <= bulb[i] <= n`
`bulbs` is an array of numbers from `1` to `n`.

`0 <= k <= 2 * 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In this problem, a tree is an undirected graph that is connected and has no cycles.

The given input is a graph that starts as a tree with N nodes (with different values ​​1, 2, ..., N) to which an extra edge is added. The added edge has two distinct vertices chosen from 1 to N and is not an already existing edge.

The resulting graph is given as a 2D array of ""edges"". Each element of `edges` is a pair `[u, v]` and `u < v`, representing an undirected edge connecting nodes `u` and `v`.

Return edges that can be removed so that the resulting graph is a tree of N nodes. If there are multiple answers, returns the last occurrence of the answer in the given 2D array. The answer edge `[u, v]` should be in the same format, i.e. `u < v`.


Example 1:
Input: [[1,2], [1,3], [2,3]]
output: [2,3]
Explanation: A given undirected graph will be like this:
  1
 / \
twenty three

Example 2:
Input: [[1,2], [2,3], [3,4], [1,4], [1,5]]
output: [1,4]
Explanation: A given undirected graph will be like this:
5-1-2
    | |
    4 - 3
notes:
The size of the input 2D array will be between 3 and 1000.

Each integer represented in the two-dimensional array is between 1 and N, where N is the size of the input array.

Update (2017-09-26):
We have overhauled the problem description + test cases and explicitly specified that the graph is undirected. For the directed graph follow-up, please refer to Redundant Connection 2). We apologize for any inconvenience caused.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In this problem, a rooted tree is a directed graph with only one node (the root), all other nodes are descendants of that node, and each node has a parent, except the root node which has no parents.

The given input is a directed graph, which starts as a rooted tree with ""n"" nodes (with different values ​​from ""1"" to ""n""), to which an additional directed edge is added. The added edge has two distinct vertices chosen from ""1"" to ""n"" and is not an edge that already exists.

The resulting graph is given as a 2D array of ""edges"". Each element of edges is a pair [ui, vi] , representing a directed edge connecting nodes ui and vi , where ui is the parent node of the child node vi .

Return edges that can be removed so that the resulting graph is a rooted tree of 'n' nodes. If there are multiple answers, returns the last occurrence of the answer in the given 2D array.


Example 1:
Input: edges = [[1,2],[1,3],[2,3]]
output: [2,3]

Example 2:
Input: edges = [[1,2],[2,3],[3,4],[4,1],[1,5]]
Output: [4,1]

constraint:
`n == edges.length`
`3 <= n <= 1000`
`edge[i].length == 2`
`1 <= ui, vi <= n`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `a` and `b`, return the minimum number of times you should repeat string `a` so that string `b` is a substring of it. If repeated `b` cannot be a substring of `a`, return `-1`.

Note: The string `""abc""` repeats 0 times to `""""`, repeats 1 time to `""abc""`, and repeats 2 times to `""abcabc""`.


Example 1:
Input: a = ""abcd"", b = ""cdabcdab""
Output: 3
Explanation: We return 3 because by repeating a three times ""abcdabcdabcd"", b is its substring.


Example 2:
Input: a = ""a"", b = ""aa""
Output: 2

Example 3:
Input: a = ""a"", b = ""a""
Output: 1

Example 4:
Input: a = ""abc"", b = ""wxyz""
Output: -1

constraint:
`1 <= a.length <= 104`
`1 <= b.length <= 104`
`a` and `b` consist of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the length of the longest path where every node in the path has the same value. This path may or may not go through the root.

The path length between two nodes is represented by the number of edges between them.


Example 1:
Input: root = [5,4,5,1,1,5]
Output: 2

Example 2:
Input: root = [1,4,5,4,4,5]
Output: 2

constraint:
The number of nodes in the tree is in the range '[0, 104]'.

`-1000 <= Node.val <= 1000`
The depth of the tree will not exceed 1000.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an `N`x`N` board, a knight starts at row r and column c and tries to make exactly K moves. Rows and columns are indexed at 0, so the top left square is ""(0, 0)"" and the bottom right square is ""(N-1, N-1)"".

There are 8 possible moves for a chess knight, as shown in the diagram below. Each move is two squares in the cardinal direction, then one square in the orthogonal direction.

Every time a horse wants to move, it randomly chooses one of the eight possible moves evenly (even if the pawn would leave the board) and moves there.

The horse continues to move until it has moved exactly ""K"" steps or is off the board. Returns the probability that a knight stays on the board after he stops moving.


example:
Input: 3, 2, 0, 0
Output: 0.0625
Explanation: There are two moves (to (1,2), (2,1)) to keep the knight on the board.

From each of these positions, there are two more moves that can keep the knight on the board.

The overall probability that the knight stays on the board is 0.0625.

notes:
`N` will be between 1 and 25.

`K` will be between 0 and 100.

A knight always starts off the board initially.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the given array ""nums"" of positive integers, find three non-overlapping subarrays with the largest sum.

Each subarray is of size ""k"" and we want to maximize the sum of all ""3*k"" items.

Return the result as a list of indices representing the starting position (0-indexed) of each interval. If there are multiple answers, return the one with the smallest lexicographical order.


example:
Input: [1,2,1,2,6,7,5,1], 2
Output: [0, 3, 5]
Explanation: The subarrays [1, 2], [2, 6], [7, 5] correspond to the starting indices [0, 3, 5].

We could also take [2, 1], but the answer to [1, 3, 5] would be lexicographically greater.

notes:
`nums.length` will be between 1 and 20000.

`nums[i]` will be between 1 and 65535.

`k` will be between 1 and floor(nums.length / 3) .",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a data structure of employee information, which includes the employee's unique ID, importance value, and direct subordinate ID.

For example, employee 1 is the leader of employee 2, and employee 2 is the leader of employee 3. Their importance values ​​are 15, 10, and 5, respectively. Then the data structure for employee 1 is [1, 15, [2]], the data structure for employee 2 is [2, 10, [3]], and the data structure for employee 3 is [3, 5, []]. Note that although employee 3 is also a report of employee 1, the relationship is not direct.

Now given a company's employee information and an employee id, you need to return the total importance of this employee and all his subordinates.


Example 1:
Input: [[1, 5, [2, 3]], [2, 3, []], [3, 3, []]], 1
Output: 11
explain:
Employee 1 has an importance value of 5 and has two direct reports: Employee 2 and Employee 3. They both have an importance value of 3. Therefore, the total importance value for employee 1 is 5 + 3 + 3 = 11.

notes:
An employee can have at most one immediate leader, and can have several subordinates.

The maximum number of employees shall not exceed 2,000.",0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have N different types of stickers. Each sticker has a lowercase English word on it.

You want to spell out a given ""target"" string by cutting individual letters from a collection of stickers and rearranging them.

You can use each sticker as many times as you want, and there are unlimited quantities of each sticker.

What is the minimum number of stickers needed to spell out ""Goal""? Returns -1 if the task is impossible to complete.


Example 1:
Input: [""with"", ""example"", ""science""], ""thehat""
Output: 3
Instructions: We can use 2 ""with"" stickers and 1 ""example"" sticker.

After cutting out and rearranging the letters of these stickers, we can form the target ""hat"".

Also, this is the minimum number of stickers needed to form the target string.


Example 2:
Input: [""notice"", ""possible""], ""basicbasic""
Output: -1
Explanation: We cannot form the target ""basicbasic"" by cutting letters from the given stickers.

notes:
The length of `stickers` is in the range `[1, 50]`.

`stickers` consists of lowercase English words (without apostrophes).

The length of `target` is in the range of `[1, 15]` and consists of lowercase English letters.

In all test cases, all words were randomly selected from the 1000 most common American English words, and the target was chosen as the concatenation of two random words.

Time constraints can be more challenging than usual. The test case with 50 stickers is expected to be solved in 35ms on average.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty list of words, return the k most frequently occurring elements.

Your answers should be ordered from most to least frequent. If two words have the same frequency, the word with lower alphabetical order comes first.


Example 1:
Input: [""i"", ""love"", ""leetcode"", ""i"", ""love"", ""coding""], k = 2
Output: [""I"", ""Love""]
Explanation: ""I"" and ""love"" are the two most frequently occurring words.

    Note that ""i"" appears before ""love"" due to lower alphabetical order.


Example 2:
Input: [""the"", ""day"", ""is"", ""sunny"", ""the"", ""the"", ""the"", ""sunny"", ""is"", ""is""], k = 4
Output: [""the"", ""is"", ""sunny"", ""day""]
Explanation: ""the"", ""is"", ""sunny"" and ""day"" are the four most frequently occurring words,
    The number of occurrences are 4, 3, 2, 1, respectively.

notes:
You can assume that k is always valid, 1 ≤ k ≤ the number of unique elements.

The input word contains only lowercase letters.
follow up:
Try to solve it in O(n log k) time and O(n) extra space.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer, check whether it has alternating bits: that is, whether two adjacent bits always have different values.


Example 1:
Input: n = 5
output: true
Explanation: The binary representation of 5 is: 101

Example 2:
Input: n = 7
output: error
Explanation: The binary representation of 7 is: 111.


Example 3:
Input: n = 11
output: error
Explanation: The binary representation of 11 is: 1011.


Example 4:
Input: n = 10
output: true
Explanation: The binary representation of 10 is: 1010.


Example 5:
Input: n = 3
output: error

constraint:
`1 <= n <= 231 - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty 2D array ""grid"" of 0s and 1s, an island is a set of ""1s"" (representing land) connected in 4 directions (horizontally or vertically). You can assume that all four sides of the mesh are surrounded by water.

Count the number of distinct islands. An island is considered to be the same as another island if and only if one island can be translated (rather than rotated or reflected) to be equal to the other.


Example 1:
11000
11000
00011
00011
Given the grid map above, return ""1"".


Example 2:
11011
10000
00001
11011
Given the grid map above, return ""3"".

Please note:
11
1
and
 1
11
are considered different island shapes because we don't account for reflections/rotations.

notes:
The length of each dimension in a given ""grid"" does not exceed 50.",0,0,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty 2D array ""grid"" of 0s and 1s, an island is a set of ""1s"" (representing land) connected in 4 directions (horizontally or vertically). You can assume that all four sides of the mesh are surrounded by water.

Find the maximum area of ​​an island in the given 2D array. (If there are no islands, the maximum area is 0.)

Example 1:
[[0,0,1,0,0,0,0,1,0,0,0,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,1,1,0,1,0,0,0,0,0,0,0,0],
 [0,1,0,0,1,1,0,0,1,0,1,0,0],
 [0,1,0,0,1,1,0,0,1,1,1,0,0],
 [0,0,0,0,0,0,0,0,0,0,1,0,0],
 [0,0,0,0,0,0,0,1,1,1,0,0,0],
 [0,0,0,0,0,0,0,1,1,0,0,0,0]]
Given the above grid, return ""6"". Note that the answer is not 11 because the islands must be connected in 4 directions.


Example 2:
[[0,0,0,0,0,0,0,0]]
Given the above grid, returns ""0"".

Note: The length of each dimension in a given `grid` does not exceed 50.",1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s , count the number of non-empty (contiguous) substrings in which there are the same number of 0s and 1s, where all 0s and all 1s are grouped consecutively.
Multiple occurrences of substrings are counted by the number of times they occur.


Example 1:
Input: ""00110011""
Output: 6
Explanation: There are 6 consecutive substrings with the same number of 1s and 0s: ""0011"", ""01"", ""1100"", ""10"", ""0011"" and ""01"".

Note that some of these substrings are repeated, and are counted according to the number of times they occur.

Also, ""00110011"" is not a valid substring because all 0s (and 1s) are not combined.


Example 2:
Input: ""10101""
Output: 4
Explanation: There are 4 substrings: ""10"", ""01"", ""10"", ""01"", which have the same number of consecutive 1s and 0s.

notes:
`s.length` will be between 1 and 50,000.

`s` will only contain '0' or '1' characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array of non-negative integers `nums`, the degree of the array is defined as the maximum frequency of any of its elements.

Your task is to find the minimum length of a (contiguous) subarray of `nums` that has the same degree as `nums`.


Example 1:
Input: nums = [1,2,2,3,1]
Output: 2
explain:
The count of the input array is 2 because elements 1 and 2 both occur twice.

In subarrays with the same degree:
[1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2 , 2]
The shortest length is 2. So return 2.


Example 2:
Input: nums = [1,2,2,3,1,4,2]
Output: 6
explain:
The number of times is 3 because element 2 is repeated 3 times.

So [2,2,3,1,4,2] is the shortest subarray, so 6 is returned.


constraint:
`nums.length` will be between 1 and 50,000.

`nums[i]` will be an integer between 0 and 49,999.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of integers and a positive integer ""k"", find out whether the array can be partitioned into ""k"" non-empty subsets that all have equal sums.


Example 1:
Input: nums = [4, 3, 2, 3, 5, 2, 1], k = 4
output: true
Explanation: It can be divided into 4 subsets (5), (1, 4), (2,3), (2,3) whose sum is equal.

notes:
`1 <= k <= len(nums) <= 16`.

`0 < nums[i] < 10000`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an infinite number axis (x-axis), we place the given squares in the given order.

The i-th square discarded (positions[i] = (left, side_length)) is a square whose leftmost point is positions[i][0] and side length positions[i][1 ]`.

The block falls with its bottom edge parallel to the number line, and falls from a higher height than all currently landing blocks. We wait for each square to stick before dropping the next one.

The squares stick infinitely at their bottom edges, and will remain fixed to any positive-length surface they touch (a number line or another square). Blocks next to each other will not stick together prematurely.

Returns the height list ans. Each height ans[i] represents the current highest height of any square we've dropped, after dropping the square represented by positions[0], positions[1], ..., positions[i]`.


Example 1:
Input: [[1, 2], [2, 3], [6, 1]]
Output: [2, 5, 5]
explain:
`positions[0] = [1, 2]: _aa _aa ------ `positions[0] = [1, 2]: _aa _aa ------ `The maximum height of any square is 2.

`positions[1] = [2, 3]: __aaa __aaa __aaa _aa__ _aa__ -------------- `The maximum height of any square is 5, and the larger square is kept in the smaller The top of the square, despite where its center of gravity is, because the squares are infinitely sticky at their bottom edge.

`positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -------------- `positions[1] = [6, 1]: __aaa __aaa __aaa _aa _aa___a -- -------- `The maximum height is still 5. Therefore, we return the answer of `[2, 5, 5]`.


Example 2:
Input: [[100, 100], [200, 100]]
Output: [100, 100]
Explanation: Adjacent blocks don't get stuck prematurely - only their bottom edges can stick to surfaces.

notes:
`1 <= positions. length <= 1000`.

`1 <= positions[i][0] <= 10^8`.

`1 <= positions[i][1] <= 10^6`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get the ""root"" of the binary search tree (BST) and an integer ""val"".

Finds a node in the BST where this node's value is equal to ""val"" and returns the subtree rooted at that node. Returns ""null"" if no such node exists.


Example 1:
Input: root = [4,2,7,1,3], val = 2
Output: [2,1,3]

Example 2:
Input: root = [4,2,7,1,3], val = 5
output: []

constraint:
The number of nodes in the tree is in the range ""[1, 5000]"".

`1 <= Node.val <= 107`
`root` is a binary search tree.

`1 <= value <= 107`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get the ""root"" node of the binary search tree (BST) and the ""value"" to insert into the tree. Returns the root node of the BST after insertion. It is guaranteed that no new value exists in the original BST.

Note that multiple efficient insertions are possible, as long as the tree is still a BST after the insertion. You can return any of them.


Example 1:
Input: root = [4,2,7,1,3], val = 5
Output: [4,2,7,1,3,5]
Explanation: Another accepted tree is:

Example 2:
Input: root = [40,20,60,10,30,50,70], val = 25
Output: [40,20,60,10,30,50,70,null,null,25]

Example 3:
Input: root = [4,2,7,1,3,null,null,null,null,null,null], val = 5
Output: [4,2,7,1,3,5]

constraint:
The number of nodes in the tree will be in the range ""[0, 104]"".

`-108 <= Node.val <= 108`
All values ​​of `Node.val` are unique.

`-108 <= value <= 108`
It is guaranteed that `val` does not exist in the original BST.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers sorted in ascending order, write a function to search `nums` for `target`. Returns the index of ""target"" if it exists, otherwise returns ""-1"". However, you don't know the array size. You can only access arrays using the ""ArrayReader"" interface, where ""ArrayReader.get(k)"" returns the array element at index ""k"" (0-based).

You can assume that all integers in the array are less than ""10000"", and ""ArrayReader.get"" will return ""2147483647"" if you access the array out of bounds.


Example 1:
Input: `array` = [-1,0,3,5,9,12], `target` = 9
Output: 4
Explanation: 9 exists in `nums` with index 4

Example 2:
Input: `array` = [-1,0,3,5,9,12], `target` = 2
Output: -1
Explanation: 2 does not exist in `nums`, so return -1

constraint:
You can assume that all elements in the array are unique.

The value of each element in the array is in the range ""[-9999, 9999]"".

The length of the array will be in the range ""[1, 10^4]"".",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a class to find the ""kth"" largest element in a stream. Note that it is the ""kth"" largest element in the sort order, not the ""kth"" distinct element.

Implement the ""KthLargest"" class:
`KthLargest(int k, int[] nums)` initializes an object with an integer `k` and an integer stream `nums`.

`int add(int val)` returns the element representing the kth largest element in the stream.


Example 1:
enter
[""KthLargest"", ""Add"", ""Add"", ""Add"", ""Add"", ""Add""]
[[3, [4, 5, 8, 2]], [3], [5], [10], [9], [4]]
output
[empty, 4, 5, 5, 8, 8]
explain
KthLargest kthLargest = new KthLargest(3, [4, 5, 8, 2]);
kthLargest.add(3); // returns 4
kthLargest.add(5); // returns 5
kthLargest.add(10); // returns 5
kthLargest.add(9); // returns 8
kthLargest.add(4); // returns 8

constraint:
`1 <= k <= 104`
`0 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`-104 <= value <= 104`
There will be at most 104 calls to add.

It is guaranteed that when searching for the kth element, there are at least k elements in the array.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"" sorted in ascending order and an integer ""target"", write a function to search ""nums"" for ""target"". If 'target' exists, its index is returned. Otherwise, return ""-1"".


Example 1:
Input: nums = [-1,0,3,5,9,12], target = 9
Output: 4
Explanation: 9 exists in nums with index 4

Example 2:
Input: nums = [-1,0,3,5,9,12], target = 2
Output: -1
Explanation: 2 does not exist in nums, so return -1

constraint:
`1 <= nums.length <= 104`
`-9999 <= nums[i], target <= 9999`
All integers in `nums` are unique.

`nums` are sorted in ascending order.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design HashSet without using any built-in hash table library.

Implement the `MyHashSet` class:
`void add(key)` inserts the value `key` into the HashSet.

`bool contains(key)` returns whether `key` exists in the HashSet.

`void remove(key)` removes the value `key` from the HashSet. Does nothing if `key` does not exist in the HashSet.


Example 1:
enter
[""MyHashSet"", ""add"", ""add"", ""contain"", ""contain"", ""add"", ""contain"", ""remove"", ""contain""]
[[], [1], [2], [1], [3], [2], [2], [2], [2]]
output
[empty, empty, empty, true, false, empty, true, empty, false]
explain
MyHashSet myHashSet = new MyHashSet();
myHashSet.add(1); // set = [1]
myHashSet.add(2); // set = [1, 2]
myHashSet.contains(1); // returns true
myHashSet.contains(3); // returns False, (not found)
myHashSet.add(2); // set = [1, 2]
myHashSet.contains(2); // returns true
myHashSet.remove(2); // set = [1]
myHashSet.contains(2); // returns False, (removed)

constraint:
`0 <= key <= 106`
There will be at most 104 calls to add, remove, and contains.

Follow-up: Can the problem be solved without using the built-in HashSet library?",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a HashMap without using any built-in hashtable library.

Implement the `MyHashMap` class:
`MyHashMap()` initializes the object with an empty map.

`void put(int key, int value)` inserts a `(key, value)` pair into the HashMap. If the `key` already exists in the map, update the corresponding `value`.

`int get(int key)` returns the `value` to which the specified `key` is mapped, or `-1` if this map does not contain a mapping for `key`.

If the map contains a map for 'key', then 'void remove(key)' removes 'key' and its corresponding 'value'.


Example 1:
enter
[""MyHashMap"", ""put"", ""put"", ""get"", ""get"", ""put"", ""get"", ""remove"", ""get""]
[[], [1, 1], [2, 2], [1], [3], [2, 1], [2], [2], [2]]
output
[empty, empty, empty, 1, -1, empty, 1, empty, -1]
explain
MyHashMap myHashMap = new MyHashMap();
myHashMap.put(1, 1); // map is now [[1,1]]
myHashMap.put(2, 2); // map is now [[1,1], [2,2]]
myHashMap.get(1); // returns 1, the map is now [[1,1], [2,2]]
myHashMap.get(3); // returns -1 (i.e. not found), map is now [[1,1], [2,2]]
myHashMap.put(2, 1); // map is now [[1,1], [2,1]] (i.e. update existing values)
myHashMap.get(2); // returns 1, map is now [[1,1], [2,1]]
myHashMap.remove(2); // remove the map of 2, the map is now [[1,1]]
myHashMap.get(2); // returns -1 (i.e. not found), map is now [[1,1]]

constraint:
`0 <= key, value <= 106`
Up to 104 calls to put, get and remove will be made.

Follow up: Please don't use the built-in HashMap library.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design the implementation of linked list. You can choose to use a singly linked list or a doubly linked list.

A node in a singly linked list should have two attributes: ""val"" and ""next"". `val` is the value of the current node and `next` is a pointer/reference to the next node.

If you want to use a doubly linked list, you also need an attribute `prev` to represent the previous node in the linked list. Assume that all nodes in the linked list are indexed starting from 0.

Implement the ""MyLinkedList"" class:
`MyLinkedList()` initializes a `MyLinkedList` object.

`int get(int index)` Get the value of the index node in the linked list. Returns ""-1"" if the index is invalid.

`void addAtHead(int val)` adds a node with value `val` before the first element of the linked list. After insertion, the new node will be the first node of the linked list.

`void addAtTail(int val)` appends a node with value `val` as the last element of the linked list.

`void addAtIndex(int ​​index, int val)` adds a node with the value `val` before the `indexth` node in the linked list. If index is equal to the length of the linked list, the node will be appended to the end of the linked list. If index is greater than length, the node will not be inserted.

`void deleteAtIndex(int ​​index)` If the index is valid, delete the `indexth` node in the linked list.


Example 1:
enter
[""MyLinkedList"", ""addAtHead"", ""addAtTail"", ""addAtIndex"", ""get"", ""deleteAtIndex"", ""get""]
[[], [1], [3], [1, 2], [1], [1], [1]]
output
[empty, empty, empty, empty, 2, empty, 3]
explain
MyLinkedList myLinkedList = new MyLinkedList();
myLinkedList.addAtHead(1);
myLinkedList. addAtTail(3);
myLinkedList.addAtIndex(1, 2); // linked list becomes 1->2->3
My LinkedList.get(1); // returns 2
myLinkedList.deleteAtIndex(1); // now the linked list is 1->3
My LinkedList.get(1); // returns 3

constraint:
`0 <= index, value <= 1000`
Please do not use the built-in LinkedList library.

There will be at most 2000 calls to get, addAtHead, addAtTail, addAtIndex, and deleteAtIndex.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given ascending sorted nodes in a circular linked list, write a function to insert the value ""insertVal"" into the list so that it remains a sorted circular list. The given node can be a reference to any single node in the list, not necessarily the smallest value in the circular list.

If there are multiple places suitable for insertion, you can choose any one to insert the new value. The circular list should remain sorted after insertion.

If the list is empty (ie, the given node is ""null""), you should create a new single circular list and return a reference to that single node. Otherwise, you should return the original given node.


Example 1:
Input: head = [3,4,1], insertVal = 2
Output: [3,4,1,2]
Explanation: In the image above, there is a sorted circular list of three elements. You got a reference to a node with value 3 and we need to insert 2 into the list. The new node should be inserted between node 1 and node 3. After the insertion, the list should look like this, we should still return node 3.


Example 2:
Input: head = [], insertVal = 1
output: [1]
Explanation: The list is empty (given header is `null`). We create a new single circular list and return a reference to that single node.


Example 3:
Input: head = [1], insertVal = 0
Output: [1,0]

constraint:
`0 <= number of nodes <= 5 * 10^4`
`-10^6 <= Node.val <= 10^6`
`-10^6 <= insertVal <= 10^6`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implements the function ToLowerCase() that takes a string argument str and returns the same string in lowercase.


Example 1:
Type: ""hello""
Output: ""Hello""

Example 2:
Enter: ""here""
Output: ""here""

Example 3:
Type: ""cute""
Output: ""cute""",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a blacklist ""B"" containing unique integers from ""[0, N)"", write a function to return a uniform random integer from ""[0, N)"" that is not in ""B"".

Optimize it so that it minimizes calls to the system's ""Math.random()"".

notes:
`1 <= N <= 1000000000`
`0 <= B.length < min(100000, N)`
`[0, N)` does not include N. See interval notation.


Example 1:
enter:
[""Solution"", ""Selection"", ""Selection"", ""Selection""]
[[1,[]],[],[],[]]
Output: [null,0,0,0]

Example 2:
enter:
[""Solution"", ""Selection"", ""Selection"", ""Selection""]
[[2,[]],[],[],[]]
Output: [null,1,1,1]

Example 3:
enter:
[""Solution"", ""Selection"", ""Selection"", ""Selection""]
[[3,[1]],[],[],[]]
Output: [null,0,0,2]

Example 4:
enter:
[""Solution"", ""Selection"", ""Selection"", ""Selection""]
[[4,[2]],[],[],[]]
Output: [null,1,3,1]
Enter syntax instructions:
The input is two lists: the subroutine called and its arguments. The `Solution` constructor has two parameters, `N` and the blacklist `B`. `pick` takes no arguments. Arguments are always contained in a list, even if there are none.",0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0
"Given a non-empty 2D array ""grid"" of 0s and 1s, an island is a set of ""1s"" (representing land) connected in 4 directions (horizontally or vertically). You can assume that all four sides of the mesh are surrounded by water.

Count the number of distinct islands. An island is considered identical to another island if they have the same shape, or the same shape after rotation (only 90, 180 or 270 degrees) or reflection (left/right direction or up/down direction).


Example 1:
11000
10000
00001
00011
Given the grid map above, return ""1"".

Please note:
11
1
and
 1
11
Considered to be the same island shape. Because if we rotate the first island 180 degrees clockwise, then both islands will have the same shape.


Example 2:
11100
10001
01001
01110
Given the grid map above, return ""2"".

These are two different islands:
111
1
and
1
1
Please note:
111
1
and
1
111
Considered to be the same island shape. Because if we flip the first array up/down then they have the same shape.

notes:
The length of each dimension in a given ""grid"" does not exceed 50.",0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s1, s2`, find the minimum ASCII sum of deleted characters that makes the two strings equal.


Example 1:
Input: s1 = ""sea"", s2 = ""eat""
Output: 231
Explanation: Removing ""s"" from ""sea"" adds the ASCII value of ""s"" (115) to the sum.

Removing the ""t"" from ""eat"" increases the sum by 116.

In the end, the two strings are equal, and 115 + 116 = 231 is the smallest sum to achieve this.


Example 2:
Input: s1 = ""delete"", s2 = ""leet""
Output: 403
Explanation: remove ""dee"" from ""delete"", turn the string into ""let"",
Add 100[d]+101[e]+101[e] to the sum. Removing ""e"" from ""leet"" increases the sum by 101[e].

The last two strings are both equal to ""let"", the answer is 100+101+101+101 = 403.

Conversely, if we turned both strings into ""lee"" or ""eet"", we would get a higher answer of 433 or 417.

notes:
`0 < s1.length, s2.length <= 1000`.

All elements of each string will have an ASCII value in ""[97, 122]"".",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of positive integers.

Compute and print the number of (contiguous) subarrays for which the product of all elements in the subarray is less than 'k'.


Example 1:
Input: nums = [10, 5, 2, 6], k = 100
Output: 8
Explanation: The 8 sub-arrays whose product is less than 100 are: [10], [5], [2], [6], [10, 5], [5, 2], [2, 6], [5, 2, 6].

Note that [10, 5, 2] is not included because the product of 100 is not strictly smaller than k.

notes:
`0 < nums.length <= 50000`.

`0 < nums[i] < 1000`.

`0 <= k < 10^6`.",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `prices`, where `prices[i]` is the price of a given stock on day `ith`, and an integer `fee` representing the transaction fee.

Find the maximum profit you can make. You can complete as many transactions as you want, but you will be charged a transaction fee for each transaction.

Note: You cannot have multiple trades in place at the same time (i.e. you must sell the stock before you can buy it again).


Example 1:
Input: Price = [1,3,2,8,4,9], Fee = 2
Output: 8
Explanation: Maximum profit can be achieved by:
- buy with price[0] = 1
- sell at price[3] = 8
- buy with price[4] = 4
- sell at price[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.


Example 2:
Input: Price = [1,3,7,5,10,3], Fee = 3
Output: 6

constraint:
`1 <= prices.length <= 5 * 104`
`1 <= price[i] < 5 * 104`
`0 <= cost < 5 * 104`",1,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The range module is a module that keeps track of ranges of numbers. Your task is to design and implement the following interfaces in an efficient manner.

`addRange(int left, int right)` adds a half-open range `[left, right)`, keeping track of every real number in that range. Adding an interval that partially overlaps the currently tracked numbers should add any numbers in the interval ""[left, right)"" that are not already tracked.

`queryRange(int left, int right)` returns true if and only if every real number in the range `[left, right)`
 Currently being tracked.

`removeRange(int left, int right)` stops tracking every real number currently tracked in the range `[left, right)`.


Example 1:
add range(10, 20): empty
removeRange(14, 16): empty
queryRange(10, 14): true (every number in [10, 14] is tracked)
queryRange(13, 15): false (don't track 14, 14.03, 14.17, etc. numbers in [13, 15) ]
queryRange(16, 17): true (the number 16 in [16, 17) is still tracked, despite the remove operation)
notes:
The half-open interval ""[left, right)"" represents all real numbers ""left <= x < right"".

In all calls to addRange, queryRange, removeRange, 0 < left < right < 10^9.

A single test case can call addRange up to 1000 times in total.

A single test case can call queryRange up to 5000 times.

The total number of calls to removeRange in a single test case is at most 1000.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a maximum stack data structure, support stack operations, and support finding the largest element of the stack.

Implement the ""MaxStack"" class:
`MaxStack()` initializes the stack object.

`void push(int x)` pushes element `x` onto the stack.

`int pop()` removes the top element of the stack and returns it.

`int top()` gets the top element of the stack without removing it.

`int peekMax()` retrieves the largest element in the stack without removing it.

`int popMax()` retrieves the largest element in the stack and removes it. If there are multiple largest elements, only the top one is removed.


Example 1:
enter
[""MaxStack"", ""push"", ""push"", ""push"", ""top"", ""popMax"", ""top"", ""peekMax"", ""pop"", ""top""]
[[], [5], [1], [5], [], [], [], [], [], []]
output
[empty, empty, empty, empty, 5, 5, 1, 5, 1, 5]
explain
MaxStack stk = new MaxStack();
stk.push(5); // [5] The top of the stack, the maximum number is 5.

stk.push(1); // [5, 1] ​​The top of the stack is 1, but the maximum value is 5.

stk.push(5); // [5, 1, 5] The top of the stack is 5, which is also the maximum value, because it is the topmost.

stk.top(); // return 5, [5, 1, 5] The stack has not changed.

stk.popMax(); // return 5, [5, 1] ​​Now the stack has changed, top and max are different.

stk.top(); // return 1, [5, 1] ​​The stack has not changed.

stk.peekMax(); // return 5, [5, 1] ​​The stack has not changed.

stk.pop(); // return 1, [5] is the top of the stack, the largest element is now 5.

stk.top(); // return 5, [5] The stack has not changed.


constraint:
`-107 <= x <= 107`
At most `104` calls will be made to `push`, `pop`, `top`, `peekMax` and `popMax`.

When calling `pop`, `top`, `peekMax` or `popMax`, there will be at least one element on the stack.

Follow up: Can you come up with a solution that supports `O(1)` for each call to `top` and `O(logn)` for every other call?",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two special characters. The first character can be represented by a ""0"". The second character can be represented by two bits (`10` or `11`).
Now given a string represented by a few bits. Returns whether the last character must be a single character. The given string will always be zero-terminated.


Example 1:
enter:
bit = [1, 0, 0]
output: true
explain:
The only way to decode it is two characters and one character. So the last character is a one-bit character.


Example 2:
enter:
bit = [1, 1, 1, 0]
output: error
explain:
The only way to decode it is two characters and two characters. So the last character is not a one-bit character.

notes:
`1 <= len(bits) <= 1000`.

`bits[i]` is always `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays ""A"" and ""B"", return the maximum length of a subarray that occurs in both arrays.


Example 1:
enter:
Answer: [1,2,3,2,1]
B: [3,2,1,4,7]
Output: 3
explain:
The maximum length of a repeating subarray is [3, 2, 1].

notes:
1 <= length(A), length(B) <= 1000
0 <= A[i], B[i] < 100",1,1,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers, return the kth smallest distance among all pairs. The distance of a pair (A, B) is defined as the absolute difference between A and B.

Example 1:
enter:
number = [1,3,1]
k = 1
output: 0
explain:
Here are all pairs:
(1,3) -> 2
(1,1) -> 0
(3,1) -> 2
Then the first smallest distance pair is (1,1), which has a distance of 0.

notes:
`2 <= len(nums) <= 10000`.

`0 <= nums[i] < 1000000`.

`1 <= k <= len(nums) * (len(nums) - 1) / 2`.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array ""words"" representing an English dictionary, return the longest word in ""words"" that can be formed from other words in ""words"" one character at a time.

If there are multiple possible answers, return the longest word with the smallest lexicographical order. Returns an empty string if there is no answer.


Example 1:
Input: words = [""w"",""wo"",""wor"",""worl"",""world""]
Output: ""world""
Explanation: The word ""world"" can be formed from ""w"", ""wo"", ""wor"", and ""worl"" one character at a time.


Example 2:
Input: words = [""a"",""banana"",""app"",""appl"",""ap"",""apply"",""apple""]
Output: ""Apple""
Explanation: Both ""apply"" and ""apple"" can be formed from other words in the dictionary. However, ""apple"" is lexicographically smaller than ""apply"".


constraint:
`1 <= words.length <= 1000`
`1 <= word[i].length <= 30`
`words[i]` consists of lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of accounts where each element accounts[i] is a list of strings where the first element accounts[i][0] is a name and the remaining elements are email accounts represented by emails .

Now, we want to merge these accounts. If two accounts have some emails in common, the two accounts definitely belong to the same person. Note that even if two accounts have the same name, they may belong to different people because people may have the same name. A person can initially have any number of accounts, but all of their accounts must have the same name.

After merging the accounts, returns the accounts in the following format: the first element of each account is the name, and the remaining elements are the sorted emails. The accounts themselves can be returned in any order.


Example 1:
Input: accounts = [[""John"",""johnsmith@mail.com"",""john_newyork@mail.com""],[""John"",""johnsmith@mail.com"",""john00@mail.com""],[ ""Mary"", ""mary@mail.com""], [""John"", ""johnnybravo@mail.com""]]
Output: [[""John"",""john00@mail.com"",""john_newyork@mail.com"",""johnsmith@mail.com""],[""Mary"",""mary@mail.com""],[""John "",""johnnybravo@mail.com""]]
explain:
The first and third John are the same person because they have a common email ""johnsmith@mail.com"".

The second John and Mary are different people because neither of their email addresses is used by another account.

We can return these lists in any order, e.g. answers [['Mary', 'mary@mail.com'], ['John', 'johnnybravo@mail.com'],
['John', 'john00@mail.com', 'john_newyork@mail.com', 'johnsmith@mail.com']] would still be accepted.


Example 2:
Input: accounts = [[""Gabe"",""Gabe0@m.co"",""Gabe3@m.co"",""Gabe1@m.co""],[""Kevin"",""Kevin3@m.co"",""Kevin5 @m.co"",""Kevin0@m.co""],[""Ethan"",""Ethan5@m.co"",""Ethan4@m.co"",""Ethan0@m.co""],[""Hanzo"", ""Hanzo3@m.co"",""Hanzo1@m.co"",""Hanzo0@m.co""],[""Fern"",""Fern5@m.co"",""Fern1@m.co"",""Fern0@m .co""]]
Output: [[""Ethan"",""Ethan0@m.co"",""Ethan4@m.co"",""Ethan5@m.co""],[""Gabe"",""Gabe0@m.co"",""Gabe1@m .co"",""Gabe3@m.co""],[""Hanzo"",""Hanzo0@m.co"",""Hanzo1@m.co"",""Hanzo3@m.co""],[""Kevin"",""Kevin0 @m.co"",""Kevin3@m.co"",""Kevin5@m.co""],[""Fern"",""Fern0@m.co"",""Fern1@m.co"",""Fern5@m.co "" ""]]

constraint:
`1 <= accounts.length <= 1000`
`2 <= accounts[i].length <= 10`
`1 <= account[i][j] <= 30`
`accounts[i][0]` consists of English letters.

`accounts[i][j] (for j > 0)` is a valid email.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a C++ program, remove comments from it. The program source is an array where source[i] is the i-th line of the source code. This represents the result of splitting the original source code string by newline characters ""\n"".

In C++, there are two kinds of comments, line comments and block comments.

The string `//` represents a line comment indicating that this line and the rest of the characters to its right on the same line should be ignored.

The string `/*` represents a block comment, indicating that all characters up to the next (non-overlapping) occurrence of `*/` should be ignored. (Here, occurrences occur in reading order: line by line, from left to right.) To be clear, the string `/*/` does not yet end a block comment, because the end would overlap the beginning.

The first valid comment takes precedence over the others: if the string `//` appears in a block comment, it is ignored. Likewise, the string `/*` is ignored if it appears in a line or block comment.

If a line of code is empty after uncommenting it, that line must not be output: every string in the answer list will be non-empty.

There will be no control characters, single or double quote characters. For example, `source = ""string s = ""/* is not a comment. */"";""` will not be a test case. (Also, nothing else like definitions or macros will interfere with comments.)
Every open block comment is guaranteed to be eventually closed, so `/*` outside a line or block comment always starts a new comment.

Finally, implicit newlines can be removed via block comments. See the example below for details.

After removing the source code comments, return the source code in the same format.


Example 1:
enter:
source = [""/*test program*/"", ""int main()"", ""{ "", "" // variable declaration"", ""int a, b, c;"", ""/* this is a test"", "" Multiline"", ""comment for"", ""testing */"", ""a = b + c;"", ""}""]
The line-by-line code visualization is as follows:
/*test program*/
main function()
{
  // variable declaration
int a, b, c;
/* This is a test
   Multi-line
   Comment
   test */
a = b + c;
}
Output: [""int main()"",""{ "","" "",""int a, b, c;"",""a = b + c;"",""}""]
The line-by-line code visualization is as follows:
main function()
{
  
int a, b, c;
a = b + c;
}
explain:
The string `/*` represents a block comment, including lines 1 and 6-9. The string `//` indicates that line 4 is a comment.


Example 2:
enter:
source = [""a/*comment"", ""line"", ""more_comment*/b""]
Output: [""ab""]
Explanation: The original source string was ""a/*comment\nline\nmore_comment*/b"" and we bolded the line breaks. When removed, the implied newline is removed, leaving the string ""ab"", which becomes [""ab""] when separated by a newline.

notes:
The length of `source` is in the range `[1, 100]`.

The length of `source[i]` is in the range `[0, 80]`.

Every open block comment will eventually be closed.

There are no single quotes, double quotes, or control characters in the source code.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This question is about implementing a basic elimination algorithm for Candy Crush.

Given a two-dimensional integer array board representing a grid of candies, different positive integers board[i][j] represent different types of candies. A value of `board[i][j] = 0` means that the cell at position `(i, j)` is empty. A given board represents the game state after the player moves. Now, you need to smash the candy according to the following rules to bring the board back to a stable state:
If three or more candies of the same type are next to each other vertically or horizontally, ""smash"" them at the same time - the positions become empty.

After crushing all the candies at the same time, if there are candies on top of the empty space on the board, those candies will fall until they hit either the candy or the bottom at the same time. (No new candies will fall outside the top border.)
After the above steps, there may be more candies that can be crushed. If so, you will need to repeat the steps above.

If there are no more candies to crush (i.e. the board is stable), return the current board.

You need to execute the above rules until the board is stable, then return to the current board.


example:
enter:
Board of Directors =
[[110,5,112,113,114],[210,211,5,213,214],[310,311,3,313,314],[410,411,412,5,414],[5,1,512,3,3],[610,4,1,613,614],[710,1,14]713,7 ,[810,1,2,1,1],[1,1,2,2,2],[4,1,4,4,1014]]
output:
[[0,0,0,0,0],[0,0,0,0,0],[0,0,0,0,0],[110,0,0,0,114],[210, 0,0,0,214],[310,0,0,113,314],[410,0,0,213,414],[610,211,112,313,614],[710,311,412,613,714],[810,411,512,713,1014]]
explain:
notes:
The length of `board` will be in the range [3, 50].

The length of `board[i]` will be in the range [3, 50].

Each board[i][j] is initially an integer in the range [1, 2000].",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums, compute the pivot index of that array.

A pivot index is one in which the sum of all numbers strictly to the left of the index is equal to the sum of all numbers strictly to the right of the index.

If the index is on the left edge of the array, the left sum is ""0"" because there are no elements on the left. This also applies to the right edge of the array.

Returns the leftmost pivot index. Returns -1 if no such index exists.


Example 1:
Input: nums = [1,7,3,6,5,6]
Output: 3
explain:
The pivot index is 3.

Left sum = nums[0] + nums[1] + nums[2] = 1 + 7 + 3 = 11
Right sum = nums[4] + nums[5] = 5 + 6 = 11

Example 2:
Input: nums = [1,2,3]
Output: -1
explain:
No index satisfies the condition in the problem statement.


Example 3:
Input: nums = [2,1,-1]
output: 0
explain:
The pivot index is 0.

left sum = 0 (no element to the left of index 0)
Right sum = nums[1] + nums[2] = 1 + -1 = 0

constraint:
`1 <= nums.length <= 104`
`-1000 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a (singly) linked list with a head node ""root"", write a function to split the linked list into ""k"" consecutive linked list ""parts"".

Each part should be as equal in length as possible: the difference in size between two parts should not exceed 1. This may cause some sections to be empty.

The parts should be in the order they appear in the input list, with earlier parts always being larger or equal in size than later parts.

Returns a list of ListNode representing the part of the linked list that has been formed.


example
1->2->3->4, k = 5 // 5 equal parts
[ [1],
[2],
[3],
[4],
Invalid ]

Example 1:
enter:
root = [1, 2, 3], k = 5
Output: [[1], [2], [3], [], []]
explain:
Each element of the input and output is ListNodes, not an array.

For example, an input root has root.val = 1, root.next.val = 2, \root.next.next.val = 3, and root.next.next.next = null.

The first element output[0] has output[0].val = 1, output[0].next = null.

The last element output[4] is null, but its string representation as a ListNode is [].


Example 2:
enter:
root = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k = 3
Output: [[1, 2, 3, 4], [5, 6, 7], [8, 9, 10]]
explain:
The input is divided into consecutive parts that differ in size by at most 1, with earlier parts being larger than later parts.

notes:
The length of `root` will be in the range `[0, 1000]`.

Each value of a node in the input is an integer in the range ""[0, 999]"".

`k` will be an integer in the range `[1, 50]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a chemical ""formula"" (given as a string), return the count for each atom.

Atomic elements always start with an uppercase character, followed by zero or more lowercase letters, representing the name.

If the count is greater than 1, it can be followed by one or more digits representing the count of the element. If the count is 1, no digits will follow. For example, H2O and H2O2 are possible, but H1O2 is not.

Two formulas are concatenated to produce another formula. For example, H2O2He3Mg4 is also a formula.

Formulas and counts (optionally added) in parentheses are also formulas. For example, (H2O2) and (H2O2)3 are formulas.

Given a ""formula"", return the counts of all elements as strings in the form: the first name (in sorted order), then its count (if that count is greater than 1), then the second name (in the sort order), then its count (if that count is greater than 1), and so on.


Example 1:
Input: Formula = ""H2O""
Output: ""H2O""
Explanation: The number of elements is {'H': 2, 'O': 1}.


Example 2:
Input: Formula = ""Mg(OH)2""
Output: ""H2MgO2""
Explanation: The number of elements is {'H': 2, 'Mg': 1, 'O': 2}.


Example 3:
Input: Formula = ""K4(ON(SO3)2)2""
Output: ""K4N2O14S4""
Explanation: The number of elements is {'K': 4, 'N': 2, 'O': 14, 'S': 4}.


Example 4:
Input: Formula = ""Be32""
Output: ""Be32""

constraint:
`1 <= formula length <= 1000`
`formula` consists of English letters, numbers, `'('` and `')'.

The `formula` is always valid.",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the strings ""S"" and ""T"", find the smallest (consecutive) substring ""W"" of ""S"" such that ""T"" is a subsequence of ""W"".

Returns the empty string `""""` if there is no window in `S` that covers all characters in `T`. If there are multiple such minimum-length windows, the window with the leftmost start index is returned.


Example 1:
enter:
S = ""abcdebdde"", T = ""bde""
Output: ""bcde""
explain:
""bcde"" is the answer because it occurs before ""bdde"" which has the same length.

""deb"" is not a smaller window, because the elements of T in the window must appear in order.

notes:
All strings in the input will contain lowercase letters only.

The length of `S` will be in the range `[1, 20000]`.

The length of `T` will be in the range `[1, 100]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A divisor is a number that is divisible by every number it contains.

For example, 128 is a divisor because 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.

Also, divisors are not allowed to contain the digit zero.

Given a lower bound and an upper bound, output a list of every possible divisor, including bounds if possible.


Example 1:
enter:
Left = 1, Right = 22
Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
notes:
The bounds of each input parameter are ""1 <= left <= right <= 10000"".",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a ""MyCalendar"" class to store your events. New events can be added if adding events will not result in duplicate bookings.

Your class will have method, `book(int start, int end)`. Formally, this represents a subscription to the half-open interval `[start, end)`, the real range `x` such that `start <= x < end`.

Double booking occurs when two events have some non-null intersection (i.e. two events have some time in common).
For each invocation of the method ""MyCalendar.book"", returns ""true"" if the event can be successfully added to the calendar without causing duplicate bookings. Otherwise, returns ""false"" and the event is not added to the calendar.

Your class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`

Example 1:
my_calendar();
my calendar.book(10, 20); // returns true
mycalendar.book(15, 25); // returns false
MyCalendar.book(20, 30); // returns true
explain:
The first event can be booked. The second one can't because time 15 is already booked by another event.

The third game can be booked, because the first game has less than 20 people each time, excluding 20 people.

notes:
Each test case makes at most ""1000"" calls to ""MyCalendar.book"".

In the call to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string S, find the number of distinct non-empty palindromic subsequences in S, and return that number modulo 10^9 + 7.

Obtains a subsequence of string S by removing 0 or more characters from S.

A sequence is a palindrome if it is equal to the inverse of the sequence.

Two sequences `A_1, A_2, ...` and `B_1, B_2, ...` are different if there is some `i` for which `A_i != B_i`.


Example 1:
enter:
S = 'Bcc'
Output: 6
explain:
The 6 distinct non-empty palindromic subsequences are 'b', 'c', 'bb', 'cc', 'bcb', 'bccb'.

Note that 'bcb' is only evaluated once, even though it occurs twice.


Example 2:
enter:
S = 'abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba'
Output: 104860361
explain:
There are 3104860382 distinct non-empty palindromic subsequences, or 104860361 modulo 10^9 + 7.

notes:
The length of `S` will be in the range `[1, 1000]`.

Each character `S[i]` is in the set `{'a', 'b', 'c', 'd'}`.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the ""MyCalendarTwo"" class to store your events. New events can be added if adding events does not result in triple booking.

Your class will have one method, `book(int start, int end)`. Formally, this represents a subscription to the half-open interval `[start, end)`, the real range `x` such that `start <= x < end`.

Triple booking occurs when three events have some non-empty intersection (i.e., all 3 events have some time in common.)
For each invocation of the method ""MyCalendar.book"", returns ""true"" if the event can be successfully added to the calendar without causing triple booking. Otherwise, returns ""false"" and the event is not added to the calendar.

Your class will be called like this: `MyCalendar cal = new MyCalendar();` `MyCalendar.book(start, end)`

Example 1:
my_calendar();
my calendar.book(10, 20); // returns true
my calendar.book(50, 60); // return true
my calendar.book(10, 40); // return true
MyCalendar.book(5, 15); // returns false
mycalendar.book(5, 10); // return true
MyCalendar.book(25, 55); // returns true
explain:
The first two events can be booked. The third activity can be booked repeatedly.

The fourth event (5, 15) cannot be booked because it would result in three bookings.

The fifth event (5, 10) can be booked because it does not use time 10 which is already double booked.

The sixth game (25, 55) can be reserved, because the time of [25, 40] will be repeated with the third game;
Time [40, 50) will be booked separately and time [50, 55) will be booked together with the second event.

notes:
Each test case makes at most ""1000"" calls to ""MyCalendar.book"".

In the call to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`k`-subscription occurs when `k` events have some non-null intersection (i.e., all `k` events have some common time.)
Given some event `[start, end)`, after each given event, return an integer `k` denoting the maximum `k` subscriptions between all previous events.

Implement the ""MyCalendarThree"" class:
`MyCalendarThree()` initializes the object.

`int book(int start, int end)` returns an integer `k` representing the largest integer number of `k`-bookings that exist in the calendar.


Example 1:
enter
[""MyCalendarThree"", ""book"", ""book"", ""book"", ""book"", ""book"", ""book""]
[[], [10, 20], [50, 60], [10, 40], [5, 15], [5, 10], [25, 55]]
output
[empty, 1, 1, 2, 3, 3, 3]
explain
MyCalendarThree myCalendarThree = new MyCalendarThree();
myCalendarThree.book(10, 20); // return 1, the first event can be booked and is disjoint, so the largest k-booking is 1-booking.

myCalendarThree.book(50, 60); // return 1, the second event can be booked and is disjoint, so the largest k-booking is 1-booking.

myCalendarThree.book(10, 40); // return 2, the third event [10, 40) intersects with the first event, and the maximum k-booking is 2-booking.

myCalendarThree.book(5, 15); // returns 3, remaining events cause max K-booking to be only 3-booking.

myCalendarThree.book(5, 10); // returns 3
myCalendarThree.book(25, 55); // returns 3

constraint:
`0 <= start < end <= 109`
Up to 400 calls to book will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An ""image"" is represented by a two-dimensional array of integers, each integer representing a pixel value of the image (from 0 to 65535).

""Fills"" an image given the coordinates ""(sr, sc)"" and the pixel value ""newColor"" representing the starting pixel (row and column) for filling.

To perform a ""flood fill"", consider the starting pixel, plus any pixels that are 4-way connected to the starting pixel of the same color as the starting pixel, plus any pixels 4-way connected to those pixels (also connected to the starting pixel ),So on and so forth. Replace the color of all above pixels with newColor.

Finally returns the modified image.


Example 1:
enter:
Image = [[1,1,1],[1,1,0],[1,0,1]]
sr = 1, sc = 1, newcolor = 2
Output: [[2,2,2],[2,2,0],[2,0,1]]
explain:
Starting from the center of the image (position (sr, sc) = (1, 1)), all connected pixels
Color the path with the new color from the same color as the starting pixel.

Note that the bottom corner is not colored 2 as it is not a 4-way connection
to the starting pixel.

notes:
The lengths of `image` and `image[0]` will be in the range `[1, 50]`.

A given starting pixel will satisfy ""0 <= sr < image.length"" and ""0 <= sc < image[0].length"".

The values ​​for each color in `image[i][j]` and `newColor` will be integers in `[0, 65535]`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can represent a sentence as an array of words, for example, the sentence `""I am very satisfied with leetcode""` can be represented as `arr = [""I"",""am"",happy"",""with"",""leetcode ""]` .

Given two sentences ""sentence1"" and ""sentence2"", each sentence is represented as an array of strings, and given an array of string pairs ""similarPairs"", where ""similarPairs[i] = [xi, yi]"" represents The two words ""xi"" and ""yi""` are similar.

Returns `true` if `sentence1` and `sentence2` are similar, `false` if they are not.

Two sentences are similar if:
They have the same length (i.e. same number of words)
`sentence1[i]` and `sentence2[i]` are similar.

Note that a word is always similar to itself, also note that similarity relations are not transitive. For example, if the words ""a"" and ""b"" are similar, and the words ""b"" and ""c"" are similar, then ""a"" and ""c"" are not necessarily similar.


Example 1:
Input: sentence1 = [""great"",""acting"",""skills""], sentence2 = [""fine"",""drama"",""talent""], similarPairs = [[""great"",""fine""],[""drama "",""Acting""],[""Skill"",""Talent""]]
output: true
Explanation: Both sentences are the same length, and each word i in sentence 1 is also similar to the corresponding word in sentence 2.


Example 2:
Input: sentence1 = [""great""], sentence2 = [""great""], similarPairs = []
output: true
Explanation: A word is similar to itself.


Example 3:
Input: sentence1 = [""great""], sentence2 = [""doubleplus"",""good""], similarPairs = [[""great"",""doubleplus""]]
output: error
Explanation: Since they have different lengths, we return false.


constraint:
`1 <= sentence1.length, sentence2.length <= 1000`
`1 <= sentence1[i].length, sentence2[i].length <= 20`
`sentence1[i]` and `sentence2[i]` consist of lowercase and uppercase English letters.

`0 <= similarPairs. length <= 1000`
`similarPairs[i].length == 2`
`1 <= xi.length, yi.length <= 20`
`xi` and `yi` consist of lowercase and uppercase English letters.

All pairs `(xi, yi)` are distinct.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get an integer array ""asteroids"" representing the asteroids in a row.

For each asteroid, the absolute value represents its size and the sign represents its orientation (positive to the right, negative to the left). Every asteroid is moving at the same speed.

Find out the state of all post-collision asteroids. If two asteroids meet, the smaller one will explode. If both are the same size, both will explode. Two asteroids moving in the same direction will never meet.


Example 1:
Input: asteroid = [5,10,-5]
Output: [5,10]
Explanation: 10 and -5 collide to get 10. 5 and 10 never collide.


Example 2:
Input: Asteroid = [8,-8]
output: []
Explanation: 8 and -8 collide with each other and explode.


Example 3:
Input: asteroid = [10,2,-5]
Output: [10]
Explanation: 2 and -5 collide to produce -5. 10 and -5 collide to get 10.


Example 4:
Input: Asteroid = [-2,-1,1,2]
Output: [-2,-1,1,2]
Explanation: -2 and -1 move left, while 1 and 2 move right. Asteroids moving in the same direction never meet, so no asteroids ever meet.


constraint:
`2 <= asteroids.length <= 104`
`-1000 <= asteroid[i] <= 1000`
`Asteroid[i] != 0`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""expression"", representing a Lisp-like expression to return its integer value.

The syntax of these expressions is as follows.

Expressions can be integers, let expressions, add expressions, mult expressions, or assigned variables. Expressions always evaluate to a single integer.

(Integers can be positive or negative.)
A let expression takes the form ""(let v1 e1 v2 e2 ... vn en expr)"", where ""let"" is always the string ""let"", and then there are 1 or more pairs of alternating variables and expressions, which means The first variable ""v1"" is assigned the value of the expression ""e1"", the second variable ""v2"" is assigned the value of the expression ""e2"", and so on; then the value of this let expression is the expression The value of the expression expr.

An addition expression takes the form ""(add e1 e2)"", where ""add"" is always the string ""add"", there are always two expressions ""e1, e2"", and this expression evaluates to `e1` and ` Evaluation of e2`.

A multiple expression is of the form `(mult e1 e2)`, where `mult` is always the string `""mult""`, there are always two expressions `e1, e2`, and the expression evaluates to `e1 ` and `e2` evaluation.

For the purposes of this question, we'll use a smaller subset of variable names. Variables begin with a lowercase letter, followed by zero or more lowercase letters or numbers. Also, for your convenience, the names ""add"", ""let"", or ""mult"" are protected and should never be used as variable names.

Finally, there is the concept of scope. When an expression for a variable name is evaluated, in the context of that evaluation, the innermost scope (according to the parentheses) is first checked for a value for that variable, and the outer scopes are checked in turn. Every expression is guaranteed to be valid. See the examples for more details on ranges.


Evaluation example:
Input: (plus 1 2)
Output: 3
Enter: (multiply by 3 (add 2 3))
Output: 15
Input: (let x 2 (mult x 5))
Output: 10
Input: (let x 2 (mult x (let x 3 y 4 (add x y))))
Output: 14
Explanation: In the expression (add x y), when checking the value of the variable x,
We check from innermost to outermost in the context of the variable being evaluated.

Since x = 3 was found first, the value of x is 3.

Input: (let x 3 x 2 x)
Output: 2
Explanation: Assignments in let statements are processed sequentially.

Input: (let x 1 y 2 x (add xy) (add xy))
Output: 5
Explanation: The first (add x y) evaluates to 3 and is assigned to x.

The second (add x y) evaluates to 3+2 = 5.

Input: (let x 2 (add (let x 3 (let x 4 x)) x))
Output: 6
Explanation: Although (let x 4 x) has deeper scope, it is out of context
The last x in add-expression. The final x will be equal to 2.

Input: (let a1 3 b2 (add a1 1) b2)
output 4
Note: Variable names can contain numbers after the first character.

notes:
The given string ""expression"" is well-formed: no leading or trailing spaces, only a single space separating different parts of the string, and no spaces between adjacent parentheses. Expressions are guaranteed to be valid and evaluate to integers.

`expression` can have a length of at most 2000. (It's also non-null, since that's not a legal expression.)
The answer and all intermediate calculations for that answer are guaranteed to fit in a 32-bit integer.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sentences ""words1, words2"" (each represented as an array of strings) and a list of similar word pairs ""pairs"", determine whether the two sentences are similar.

For example `words1 = [""great"", ""acting"", ""skills""]` and `words2 = [""fine"", ""drama"", ""talent""]` are similar, if the similar word pair is `pairs = [ [""Awesome"", ""Good""], [""Good"", ""Good""], [""Acting"", ""Drama""], [""Skills"", ""Talent""]]`.

Note that similarity relations are transitive. For example, if ""great"" and ""good"" are similar, and ""fine"" and ""good"" are similar, then ""great"" and ""fine"" are similar.

The similarity is also symmetrical. For example, ""great"" and ""fine"" are similar to ""fine"" and ""great"" are similar.

Furthermore, a word is always similar to itself. For example, the sentences words1 = [""great""], words2 = [""great""], pairs = [] are similar even if no similar word pairs are specified.

In the end, sentences are only similar if they have the same number of words. So a sentence like `words1 = [""great""]` will never be similar to `words2 = [""doubleplus"",""good""]`.

notes:
The length of `words1` and `words2` will not exceed `1000`.

The length of `pairs` will not exceed `2000`.

Each ""pairs[i]"" will have length ""2"".

The length of each words[i] and pairs[i][j] will be in the range [1, 20].",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer ""N"", find the largest number of monotonically increasing numbers less than or equal to ""N"".

(Recall that an integer has monotonically increasing digits if and only if each pair of adjacent digits ""x"" and ""y"" satisfies ""x <= y"".)

Example 1:
Input: N = 10
Output: 9

Example 2:
Input: N = 1234
Output: 1234

Example 3:
Input: N = 332
Output: 299
notes:
`N` is an integer in the range `[0, 10^9]`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list ""T"" of daily temperatures, return a list that, for each day in the input, tells you how many days you have to wait before it gets warmer. If there are no possible future dates, use ""0"" instead.

For example, given a list of temperatures `T = [73, 74, 75, 71, 69, 72, 76, 73]`, your output should be `[1, 1, 4, 2, 1, 1, 0, 0 ]`.

notes:
The length of `temperatures` will be in the range `[1, 30000]`.

Each temperature is an integer in the range '[30, 100]'.",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"", you can perform operations on that array.

In each operation, you select any `nums[i]` and remove them to get `nums[i]` points. Afterwards, you have to remove every element equal to `nums[i] - 1` or `nums[i] + 1`.

You start at point ""0"". Returns the maximum number of points you can gain by applying this type of operation.


Example 1:
Input: nums = [3,4,2]
Output: 6
Explanation: Deleting 4 gets 4 points, so 3 is also deleted.

Then, remove 2 for 2 points.

A total of 6 points are awarded.


Example 2:
Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: Removing 3 gets 3 points, removing 2 and 4 at the same time.

Then, remove 3 again to get 3 points, and remove 3 again to get 3 points.

A total of 9 points are awarded.


constraint:
`1 <= nums.length <= 2 * 104`
`1 <= nums[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `n x n` `grid` representing a field of cherries, each cell is one of three possible integers.

`0` means the cell is empty, so you can pass,
`1` means the cell contains a cherry, which you can pick up and pass, or
`-1` means there is a thorn in the cell blocking your way.

Returns the maximum number of cherries you can collect according to the following rules:
Start at position ""(0, 0)"" and reach ""(n - 1, n - 1)"" by moving right or down through valid path cells (cells with value ""0"" or ""1"") .

After reaching ""(n - 1, n - 1)"", return to ""(0, 0)"" by moving left or up through valid path cells.

When passing through a path cell containing a cherry, pick it up and the cell becomes an empty cell ""0"".

If there is no valid path between ""(0, 0)"" and ""(n - 1, n - 1)"", no cherries can be collected.


Example 1:
Input: grid = [[0,1,-1],[1,0,-1],[1,1,1]]
Output: 5
Explanation: The player starts at (0, 0) and goes down, down, and right to (2, 2).

Pick up 4 cherries one way, and the matrix becomes [[0,1,-1],[0,0,-1],[0,0,0]].

The player then goes left, up, up, left to return home and picks another cherry.

The total number of cherries picked is 5, which is the maximum possible value.


Example 2:
Input: grid = [[1,1,-1],[1,-1,1],[-1,1,1]]
output: 0

constraint:
`n == grid. length`
`n == grid[i].length`
`1 <= n <= 50`
`grid[i][j]` is `-1`, `0` or `1`.

`grid[0][0] != -1`
`grid[n - 1][n - 1] != -1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree where each node has a unique value and a target key 'k', find the value of the leaf node closest to target 'k' in the tree.

Here, closest to a leaf means going through the least number of edges on a binary tree to reach any leaf of the tree. Also, if a node has no children, the node is called a leaf node.

In the following example, the input tree is represented in flattened form row by row.

The actual ""root"" tree given will be a TreeNode object.


Example 1:
enter:
root = [1, 3, 2], k = 1
Binary tree diagram:
          1
         / \
        3 2
Output: 2 (or 3)
Explanation: 2 or 3 is the closest leaf node to the target of 1.


Example 2:
enter:
root = [1], k = 1
Output: 1
Explanation: The nearest leaf node is the root node itself.


Example 3:
enter:
root = [1,2,3,4,null,null,null,5,null,6], k = 2
Binary tree diagram:
             1
            / \
           twenty three
          /
         4
        /
       5
      /
     6
Output: 3
Explanation: A leaf node with a value of 3 (not a leaf node with a value of 6) is closest to a node with a value of 2.

notes:
`root` represents a binary tree with at least 1 node and at most 1000 nodes.

Each node has a unique `node.val` in the range `[1, 1000]`.

In the given binary tree there exist some nodes `node.val == k`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a network consisting of ""n"" nodes, labeled ""1"" to ""n"". You also get ""times"", as a list of travel times for directed edges ""times[i] = (ui, vi, wi)"", where ""ui"" is the source node, ""vi"" is the destination node, and ""wi` is The time it takes for a signal to travel from source to destination.

We will send a signal from a given node ""k"". Returns the time it took for all ""n"" nodes to receive the signal. Returns `-1` if it is not possible for all `n` nodes to receive the signal.


Example 1:
Input: times = [[2,1,1],[2,3,1],[3,4,1]], n = 4, k = 2
Output: 2

Example 2:
Input: times = [[1,2,1]], n = 2, k = 1
Output: 1

Example 3:
Input: times = [[1,2,1]], n = 2, k = 2
Output: -1

constraint:
`1 <= k <= n <= 100`
`1 <= times.length <= 6000`
`times[i].length == 3`
`1 <= ui, vi <= n`
`ui != vi`
`0 <= wi <= 100`
All pairs `(ui, vi)` are unique. (i.e., no multiple edges.)",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted list of characters containing only lowercase letters, and given a target letter ""target"", find the smallest element in the list that is greater than the given target.

The letters also wrap around. For example, if the target is ""target = 'z'"" and ""letters = ['a', 'b']"", the answer is ""a"".


example:
enter:
Alphabet = [""c"", ""f"", ""j""]
target=""a""
Output: ""c""
enter:
Alphabet = [""c"", ""f"", ""j""]
target=""c""
Output: ""f""
enter:
Alphabet = [""c"", ""f"", ""j""]
target=""d""
Output: ""f""
enter:
Alphabet = [""c"", ""f"", ""j""]
target=""g""
Output: ""j""
enter:
Alphabet = [""c"", ""f"", ""j""]
target=""j""
Output: ""c""
enter:
Alphabet = [""c"", ""f"", ""j""]
target=""k""
Output: ""c""
notes:
The length of `letters` is in the range `[2, 10000]`.

`letters` consists of lowercase letters and contains at least 2 distinct letters.

`target` is lowercase.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a special dictionary with some words in it, and you can search for words in it by prefix and suffix.

Implement the `WordFilter` class:
`WordFilter(string[] words)` initializes the object with `words` from the dictionary.

`f(string prefix, string suffix)` returns the index of the word in the dictionary with prefix `prefix` and suffix `suffix`. If there are multiple valid indices, the largest of them is returned. Returns ""-1"" if the word is not in the dictionary.


Example 1:
enter
[""WordFilter"", ""f""]
[[[""apple""]], [""a"", ""e""]]
output
[empty, 0]
explain
WordFilter wordFilter = new WordFilter([""Apple""]);
wordFilter.f(""a"", ""e""); // returns 0 because the word at index 0 has prefix = ""a"" and suffix = 'e"".


constraint:
`1 <= words.length <= 15000`
`1 <= word[i].length <= 10`
`1 <= prefix.length, suffix.length <= 10`
`words[i]`, `prefix` and `suffix` contain only lowercase English letters.

At most ""15000"" calls will be made to function ""f"".",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `cost`, where `cost[i]` is the cost of the `ith` step on the stairs. After paying a fee, you can climb one or two steps.

You can start with the step with index ""0"" or with the step with index ""1"".

Returns the minimum cost to reach the top of the floor.


Example 1:
Input: cost = [10,15,20]
Output: 15
Explanation: The cheapest is: start at cost [1], pay that cost, and get to the top.


Example 2:
Input: Cost = [1,100,1,1,1,100,1,1,100,1]
Output: 6
Explanation: The cheapest is: start from cost[0], only step on 1s, skip cost[3].


constraint:
`2 <= cost. length <= 1000`
`0 <= cost[i] <= 999`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the given integer array nums there is always exactly one largest element.

Find if the largest element in an array is at least twice as large as all other elements in the array.

If yes, returns the index of the largest element, otherwise -1.


Example 1:
Input: nums = [3, 6, 1, 0]
Output: 1
Explanation: 6 is the largest integer, for every other number in the array x,
6 is more than double x. The value 6 has an index of 1, so we return 1.


Example 2:
Input: nums = [1, 2, 3, 4]
Output: -1
Explanation: 4 is not at least twice as big as 3, so we return -1.

notes:
The length of `nums` is in the range `[1, 50]`.

Each `nums[i]` is an integer in the range `[0, 99]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string licensePlate and an array of strings words, find the shortest full word in words.

A complete word is one that contains all the letters in the `licensePlate`. Numbers and spaces in licensePlate are ignored, and letters are treated as case-insensitive. If a letter appears more than once in the `licensePlate`, it must appear the same or more times in the word.

For example, if `licensePlate`` = ""aBc 12c""`, it contains the letters `'a'`, `'b' (ignoring case), and `'c'` twice. Possible complements are ""abccdef"", ""caaacab"", and ""cbca"".

Returns the shortest complete word in words. Guaranteed to have an answer. If there are multiple shortest complete words, return the first word that appears in ""words"".


Example 1:
Input: licensePlate = ""1s3 PSt"", words = [""step"",""steps"",""stripe"",""stepple""]
Output: ""step""
Explanation: licensePlate contains the letters ""s"", ""p"", ""s"" (ignoring case), and ""t"".

""step"" contains 't' and 'p', but only 1 's'.

""steps"" contains ""t"", ""p"", and two ""s"" characters.

""Stripe"" is missing an ""s"".

""stepple"" is missing an ""s"".

Since ""steps"" is the only word that contains all letters, this is the answer.


Example 2:
Input: licensePlate = ""1s3 456"", words = [""looks"",""pest"",""stew"",""show""]
Output: ""Pest""
Explanation: licensePlate contains only the letter 's'. All words contain an ""s"", but ""pest"", ""stew"" and ""show"" are the shortest. The answer is ""pest"" because it is the first of the three words.


Example 3:
Input: licensePlate = ""Ah71752"", words = [""suggest"",""letter"",""of"",""husband"",""easy"",""education"",""drug"",""prevent"",""writer"",""old"" ]
Output: ""husband""

Example 4:
Input: licensePlate = ""OgEu755"", words = [""enough"",""these"",""play"",""wide"",""wonder"",""box"",""arrive"",""money"",""tax"",""thus"" ]
Output: ""Enough""

Example 5:
Input: licensePlate = ""iMSlpe4"", words = [""claim"",""consumer"",""student"",""camera"",""public"",""never"",""wonder"",""simple"",""thought"",""use"" ]
Output: ""simple""

constraint:
`1 <= licensePlate.length <= 7`
`licensePlate` contains numbers, letters (uppercase or lowercase), or spaces `' '`.

`1 <= words.length <= 1000`
`1 <= words[i].length <= 15`
`words[i]` consists of lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The virus is spreading rapidly and your task is to isolate the infected area by installing walls.

The world is modeled as a two-dimensional array of cells, where ""0""s represent uninfected cells and ""1""s represent cells contaminated with the virus. One wall (and only one wall) can be installed between any two 4-way adjacent cells on a shared boundary.

Every night, the virus spreads to all adjacent cells in all four directions unless blocked by a wall.

Limited resources. Each day, you can only install walls around one area - the affected area (a contiguous block of infected cells) threatens the least infected cells the next night. There will never be a tie.

Can you save the day? If so, how many walls are needed? If not, and the world is fully infected, returns the number of walls used.


Example 1:
input:grid =
[[0,1,0,0,0,0,0,1],
 [0,1,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,1],
 [0,0,0,0,0,0,0,0]]
Output: 10
explain:
There are 2 contaminated areas.

On the first day, add 5 walls to isolate the virus area on the left. The board after the virus spread is:
[[0,1,0,0,0,0,1,1],
 [0,1,0,0,0,0,1,1],
 [0,0,0,0,0,0,1,1],
 [0,0,0,0,0,0,0,1]]
On the second day, add 5 walls to isolate the virus area on the right. The virus is fully contained.


Example 2:
input:grid =
[[1,1,1],
 [1,0,1],
 [1,1,1]]
Output: 4
Explanation: Even though only one cell was saved, 4 walls were built.

Note that walls are only built on shared borders of two different cells.


Example 3:
input:grid =
[[1,1,1,0,0,0,0,0,0],
 [1,0,1,0,1,1,1,1,1],
 [1,1,1,0,0,0,0,0,0]]
Output: 13
Explanation: The area on the left has only two new walls built.

notes:
The number of rows and columns of `grid` is in the range `[1, 50]`.

Each `grid[i][j]` will be either `0` or `1`.

Throughout the process described, there is always a continuous virus area that strictly infects more untainted squares in the next round.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a grid where each entry is only 0 or 1, find the number of corner rectangles.

Corner rectangles are 4 distinct 1's on the grid that form an axis-aligned rectangle. Note that only the corner value needs to be 1. Also, all four 1's used must be different.


Example 1:
input:grid =
[[1, 0, 0, 1, 0],
 [0, 0, 1, 0, 1],
 [0, 0, 0, 1, 0],
 [1, 0, 1, 0, 1]]
Output: 1
Explanation: There is only one corner rectangle, and the corners are grid[1][2], grid[1][4], grid[3][2], grid[3][4].


Example 2:
input:grid =
[[1, 1, 1],
 [1, 1, 1],
 [1, 1, 1]]
Output: 9
Explanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.


Example 3:
input:grid =
[[1, 1, 1, 1]]
output: 0
Explanation: The rectangle must have four distinct corners.

notes:
The number of rows and columns of `grid` is in the range `[1, 200]`.

Each `grid[i][j]` will be either `0` or `1`.

The number of ""1""s in the grid is at most ""6000"".",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a starting IP address `ip` and a number of ips we need to cover `n`, return a representation of the range as a list of CIDR blocks (as small a length as possible).

A CIDR block is a string consisting of the IP, followed by a slash, and then the prefix length. For example: ""123.45.67.89/20"". The prefix length ""20"" indicates the number of common prefix digits within the specified range.


Example 1:
Input: ip = ""255.0.0.7"", n = 10
Output: [""255.0.0.7/32"",""255.0.0.8/29"",""255.0.0.16/32""]
explain:
The original ip address when converted to binary looks like this (spaces added for clarity):
255.0.0.7 -> 11111111 00000000 00000000 00000111
The address ""255.0.0.7/32"" specifies all addresses with a 32-bit common prefix for the given address,
ie. Only this one address.

The address ""255.0.0.8/29"" specifies all addresses with a common prefix of 29 bits for a given address:
255.0.0.8 -> 11111111 00000000 00000000 00001000
Addresses with a 29-bit public prefix are:
11111111 00000000 00000000 00001000
11111111 00000000 00000000 00001001
11111111 00000000 00000000 00001010
11111111 00000000 00000000 00001011
11111111 00000000 00000000 00001100
11111111 00000000 00000000 00001101
11111111 00000000 00000000 00001110
11111111 00000000 00000000 00001111
The address ""255.0.0.16/32"" specifies all addresses with a 32-bit common prefix for the given address,
ie. Just 11111111 00000000 00000000 00010000.

Overall, the answer specifies a range of 10 ips starting at address 255.0.0.7.

There are other representations, such as:
[""255.0.0.7/32"",""255.0.0.8/30"", ""255.0.0.12/30"", ""255.0.0.16/32""],
But our answer is the shortest.

Also note that representations starting with ""255.0.0.7/30"" are incorrect,
because it contains addresses like 255.0.0.4 = 11111111 00000000 00000000 00000100
outside the specified range.

notes:
`ip` will be a valid IPv4 address.

Every implied address ""ip + x"" (for ""x < n"") will be a valid IPv4 address.

`n` will be an integer in the range `[1, 1000]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In front of you is a lock with 4 round wheels. Each wheel has 10 slots: ""0"", ""1"", ""2"", ""3"", ""4"", ""5"", ""6"", ""7"", ""8"", ""9"". The wheel can spin and circle freely: for example we can turn a ""9"" into a ""0"", or a ""0"" into a ""9"". Each action consists of turning one wheel one slot.

The lock initially starts with ""0000"", which is a string representing the state of the 4 wheels.

You'll get a list of ""deadends,"" meaning that if the lock displays any of these codes, the lock's wheels will stop turning and you won't be able to open it.

Given a ""target"" representing the wheel value that will open the lock, return the minimum total number of turns required to open the lock, or -1 if not possible.


Example 1:
Input: deadends = [""0201"",""0101"",""0102"",""1212"",""2002""], target = ""0202""
Output: 6
explain:
A valid sequence of moves would be ""0000"" -> ""1000"" -> ""1100"" -> ""1200"" -> ""1201"" -> ""1202"" -> ""0202"".

Note that sequences like ""0000"" -> ""0001"" -> ""0002"" -> ""0102"" -> ""0202"" are invalid,
Because after the display turned to a dead end ""0102"" the lock's wheel got stuck.


Example 2:
Input: deadends = [""8888""], target = ""0009""
Output: 1
explain:
We can turn the last wheel in reverse, moving from ""0000"" -> ""0009"".


Example 3:
Input: deadends = [""8887"",""8889"",""8878"",""8898"",""8788"",""8988"",""7888"",""9888""], target = ""8888""
Output: -1
explain:
You can't reach your goal without getting stuck.


Example 4:
Input: deadends = [""0000""], target = ""8888""
Output: -1

constraint:
`1 <= deadends. length <= 500`
`deadends[i].length == 4`
`target.length == 4`
target will not appear in the deadends list.

`target` and `deadends[i]` contain only numbers.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a password protected box. A password is a sequence of ""n"" numbers, where each number can be one of the previous ""k"" numbers ""0, 1, ..., k-1"".

When entering a password, the last ""n"" digits entered will automatically match the correct password.

For example, assuming the correct password is ""345"", if you type ""012345"", the box will open because the correct password matches the suffix of the entered password.

Returns any password of minimum length that is guaranteed to open the box when typed.


Example 1:
Input: n = 1, k = 2
Output: ""01""
Note: ""10"" will also be accepted.


Example 2:
Input: n = 2, k = 2
Output: ""00110""
Note: ""01100"", ""10011"", ""11001"" will also be accepted.

notes:
`n` will be in the range `[1, 4]`.

`k` will be in the range `[1, 10]`.

`k^n` can be at most `4096`.",0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are standing at position ""0"" on the infinite number line. There is a target at position ""target"".

In each move, you can move left or right. In step n (starting from 1), you have walked n steps.

Returns the minimum number of steps required to reach the destination.


Example 1:
Input: Target = 3
Output: 2
explain:
In the first step, we go from 0 to 1.

In the second step, we go from step 1 to step 3.


Example 2:
Input: Target = 2
Output: 3
explain:
In the first step, we go from 0 to 1.

In the second step, we step from 1 to -1.

In the third step, we step from -1 to 2.

notes:
`target` will be a non-zero integer in the range `[-10^9, 10^9]`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get an elevation map, and ""heights[i]"" represents the height of the terrain at that index. The width at each index is 1. After ""V"" units of water have fallen at index ""K"", how much water is there at each index?
Water falls first at index ""K"" and then rests on top of the highest terrain or water at that index. It then flows according to the following rules:
If the droplet will eventually fall by moving to the left, then move to the left.

Otherwise, if the droplet would eventually fall by moving right, move right.

Otherwise, ascend at the current position.

Here, ""eventually falling"" means that the droplet will end up at a lower level if it moves in that direction.

Also, ""level"" refers to the height of the terrain plus any water in that column.

We can assume infinitely high terrain on both sides outside the bounds of the array. Also, portions of water cannot be evenly distributed over more than 1 grid block - each unit of water must be in exactly one block.


Example 1:
Input: Height = [2,1,1,2,1,2,2], V = 4, K = 3
Output: [2,2,2,3,2,2,2]
explain:
##
##
######
#########
 0123456 <- index
The first drop of water falls at index K = 3:
##
#w#
######
#########
 0123456
Water can only move to the same level or lower when moving left or right.

(By height, we mean the total height of the terrain plus any water in that column.)
Since moving left will eventually make it fall, it moves left.

(""Letting the drop fall"" means falling to a lower height than before.)
##
##
##w####
#########
 0123456
Since moving left doesn't make it fall, it stays where it is. The next drop falls:
##
#w#
##w####
#########
 0123456
Since a new droplet moving to the left will eventually make it fall, it moves to the left.

Note that the droplets still tend to move to the left,
Even though it can move to the right (and moving to the right will make it fall faster.)
##
#w#
##w####
#########
 0123456
##
##
##ww####
#########
 0123456
After these steps, a third drop falls.

Since moving to the left doesn't eventually make it drop, it tries to move to the right.

Because moving to the right will eventually make it fall, so it moves to the right.

##
#w#
##ww####
#########
 0123456
##
##
##World Wide Web###
#########
 0123456
Finally, the fourth drop falls.

Since moving to the left doesn't eventually make it drop, it tries to move to the right.

Since moving to the right doesn't end up making it drop, it stays where it is:
##
#w#
##World Wide Web###
#########
 0123456
The final answer is [2,2,2,3,2,2,2]:
    #
 #######
 #######
 0123456

Example 2:
Input: Height = [1,2,3,4], V = 2, K = 2
Output: [2,3,3,4]
explain:
The last drop lands at index 1, since moving to the left doesn't cause it to end up at a lower height.


Example 3:
Input: Height = [3,1,3], V = 5, K = 1
Output: [4,4,4]
notes:
The length of `heights` is `[1, 100]`, and the integer is `[0, 99]`.

`V` will be in the range `[0, 2000]`.

`K` will be in the range `[0, heights.length - 1]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We are stacking blocks to form a pyramid. Each block has a color which is a string of letters.

We can place any color block ""C"" on top of two adjacent color blocks ""A"" and ""B"" if and only if ""ABC"" is an allowed triplet.

We start with the line `bottom` at the bottom, represented as a single string. We also start with the ""allowed"" list of allowed triples. Each allowed triplet is represented as a string of length ""3"".

Returns ""true"" if we can build the pyramid all the way to the top, otherwise returns ""false"".


Example 1:
Input: bottom = ""BCD"", allowed = [""BCG"",""CDE"",""GEA"",""FFF""]
output: true
explain:
We can stack pyramids like this:
    A
   / \
  GE
 / \ / \
B C D
We can put G above B and C because BCG is an allowed triple. Likewise, we can place E on top of C and D, and A on top of G and E.


Example 2:
Input: bottom = ""AABA"", allowed = [""AAA"",""AAB"",""ABA"",""ABB"",""BAC""]
output: error
explain:
We cannot stack the pyramids to the top.

Note that the triples (A, B, C) and (A, B, D) are allowed with C != D.


constraint:
`2 <= bottom.length <= 8`
`0 <= allowed.length <= 200`
`Allow[i].length == 3`
All letters in the input string come from the set `{'A', 'B', 'C', 'D', 'E', 'F', 'G'}`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The integer interval `[a, b]` (for integers `a < b`) is the set of all consecutive integers from `a` to `b`, inclusive of `a` and `b`.

Find the minimum size of the set S such that for each integer interval A in ""intervals"", the intersection of S and A has size at least 2.


Example 1:
Input: Interval = [[1,3],[1,4],[2,5],[3,5]]
Output: 3
Explanation: Consider the set S = {2, 3, 4}. For each interval, there are at least 2 elements from S in the interval.

Furthermore, there is no smaller size set that satisfies the above conditions.

Therefore, we output the size of this set, which is 3.


Example 2:
Input: Interval = [[1,2],[2,3],[2,4],[4,5]]
Output: 5
Explanation: An example of a minimum size set is {1, 2, 3, 4, 5}.


constraint:
`1 <= intervals. length <= 3000`
`interval[i].length == 2`
`0 <= ai < bi <= 108`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of keywords ""words"" and a string ""S"", make all occurrences of all keywords in ""S"" bold. Any letters between the `<b>` and `</b>` tags will be bolded.

The returned string should use as few tags as possible, and of course the tags should form valid combinations.

For example, given `words = [""ab"", ""bc""]` and `S = ""aabcd""`, we should return `""a<b>abc</b>d""`. Note that returning `""a<b>a<b>b</b>c</b>d""` uses more tags, so this is incorrect.


constraint:
The length of `words` is in the range `[0, 50]`.

The length of `words[i]` is in the range `[1, 10]`.

The length of `S` is in the range `[0, 500]`.

All characters in `words[i]` and `S` are lowercase.

Note: This question is the same as 616: https://leetcode.com/problems/add-bold-tag-in-string/",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a list of employees ""schedule"" which represents the working hours of each employee.

Each employee has a non-overlapping list of ""intervals"", which are in sorted order.

Returns a finite list of intervals representing common positive-length free times for all employees, also in sorted order.

(Even though we represent `Intervals` in the form `[x, y]`, the objects inside are `Intervals`, not lists or arrays. For example, `schedule[0][0].start = 1`, ` schedule[0][0].end = 2`, and `schedule[0][0][0]` is undefined). Also, we don't include intervals like [5, 5] in the answer because they have length zero.


Example 1:
Input: schedule = [[[1,2],[5,6]],[[1,3]],[[4,10]]]
Output: [[3,4]]
Explanation: There are three employees in total, all of whom are ordinary
The idle intervals are [-inf, 1], [3, 4], [10, inf].

We discard any intervals containing inf since they are not finite.


Example 2:
Input: schedule = [[[1,3],[6,7]],[[2,4]],[[2,5],[9,12]]]
Output: [[5,6],[7,9]]

constraint:
`1 <= schedule.length , schedule[i].length <= 50`
`0 <= schedule[i].start < schedule[i].end <= 10^8`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two lists ""A"" and ""B"", ""B"" is an anagram of ""A"". `B` is an anagram of `A`, meaning that `B` is made by randomizing the order of elements in `A`.

We want to find an index mapping ""P"" from ""A"" to ""B"". The mapping ""P[i] = j"" means that the ""i""th element in ""A"" occurs at index ""j"" in ""B"".

These lists ""A"" and ""B"" may contain duplicates. If there are multiple answers, output any one of them.

For example, given
A = [12, 28, 46, 32, 50]
B = [50, 12, 32, 46, 28]
we should return
[1, 4, 3, 2, 0]
because `P[0] = 1` because the 0th element of `A` occurs in `B[1]`,
and `P[1] = 4` because the `1`st element of `A` occurs in `B[4]`,
etc.

notes:
`A, B` have equal lengths in the range `[1, 100]`.

`A[i], B[i]` are integers in the range `[0, 10^5]`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A special binary string is a binary string with the following two properties:
The number of 0's is equal to the number of 1's.

Each prefix of the binary string has at least as many 1s as 0s.

Given a special string ""S"", a move consists of selecting two consecutive, non-empty, special substrings of ""S"", and swapping them. (Two strings are contiguous if the last character of the first string has an index just before the first character of the second string.)
What is the lexicographically largest resulting string possible at the end of any number of moves?

Example 1:
Input: S = ""11011000""
Output: ""11100100""
explain:
Swap the strings ""10"" [occurs in S[1]] and ""1100"" [occurs in S[3]].

This is the lexicographically largest string that can appear after a certain number of swaps.

notes:
The length of `S` is at most `50`.

`S` is guaranteed to be a special binary string as defined above.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""L"" and ""R"", find the counts of numbers in the range ""[L, R]"" (inclusive) that have a prime number bit set in their binary representation.

(Recall that the set bit of an integer is the number of ""1""s represented in binary. For example, ""21"" in binary is ""10101"", which has 3 set bits. Also, 1 is not a major .)

Example 1: Input: L = 6, R = 10
Output: 4
explain:
6 -> 110 (2 bits set, 2 primes)
7 -> 111 (3 bits set, 3 primes)
9 -> 1001 (2 set bits , 2 is prime)
10->1010 (2 set bits , 2 is prime)

Example 2: Input: L = 10, R = 15
Output: 5
explain:
10 -> 1010 (2 bits set, 2 primes)
11 -> 1011 (3 bits set, 3 primes)
12 -> 1100 (2 bits set, 2 primes)
13 -> 1101 (3 bits set, 3 primes)
14 -> 1110 (3 bits set, 3 primes)
15 -> 1111 (4 bits set, 4 is not a prime number)
notes:
`L, R` will be integers `[1, 10^6]` in the range `L <= R`.

`R - L` can be up to 10000.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"" consisting of lowercase English letters. We want to split this string into as many parts as possible so that each letter appears in at most one part, and return a list of integers representing the sizes of those parts.


Example 1:
Input: S = ""ababcbacadefegdehijhklij""
Output: [9,7,8]
explain:
The partitions are ""ababcbaca"", ""defegde"", ""hijhklij"".

This is a partition, so each letter appears in at most one section.

Partitions like ""ababcbacadefegde"", ""hijhklij"" are incorrect because it divides S into fewer parts.

notes:
The length of `S` is in the range `[1, 500]`.

`S` will contain only lowercase English letters (`'a'` through `'z'`).",0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a two-dimensional ""grid"" from (0, 0) to (N-1, N-1), each cell contains a ""1"", except those cells in the given list ""mines"" which are ""0"". What is the largest axis-aligned plus sign of 1 contained in the grid? Returns the order of plus signs. Returns 0 if none.

""Axis-aligned plus sign of order k 1"" has some center grid[x][y] = 1 and 4 arms of length k-1 up, down, left and right, consisting of 1s. The figure below demonstrates this. Note that there may be 0 or 1 outside the plus arm, only the relevant area of ​​the plus will check for 1.


Example of axis-aligned plus signs of order k: order 1:
000
010
000
Order 2:
00000
00100
01110
00100
00000
Order 3:
0000000
0001000
0001000
0111110
0001000
0001000
0000000

Example 1: Input: N = 5, mines = [[4, 2]]
Output: 2
explain:
11111
11111
11111
11111
11011
In the grid above, the largest plus sign can only be of order 2, one of which is marked in bold.


Example 2: Input: N = 2, mines = []
Output: 1
explain:
Level 2 has no plus sign, level 1 has a plus sign.


Example 3: Input: N = 1, mines = [[0, 0]]
output: 0
explain:
There is no plus sign, so 0 is returned.

notes:
`N` will be an integer in the range `[1, 500]`.

`mines` can be at most `5000` in length.

`mines[i]` has length 2 and consists of integers in the range `[0, N-1]`.

(Additionally, programs submitted in C, C++, or C# will be judged with a slightly shorter time limit.)",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"N couples are sitting in a row of 2N seats and want to hold hands. We want to know the minimum number of swaps that make each couple sit side by side. Swapping involves choosing any two people, who then stand up and swap seats.
People and seats are represented by integers from '0' to '2N-1', couples are numbered sequentially, the first pair is '(0, 1)', the second pair is '(2, 3)', and so on , the last pair is `(2N-2, 2N-1)`.

The couple's initial seat is given by ""row[i]"", which is the value of the person who initially sat in the ith seat.


Example 1: Input: row = [0, 2, 1, 3]
Output: 1
Explanation: We only need to swap the second person (row[1]) with the third person (row[2]).


Example 2: Input: row = [3, 2, 0, 1]
output: 0
Explanation: All couples are already seated side by side.

notes:
 `len(row)` is even and in the range `[4, 60]`.

 `row` is guaranteed to be a permutation of `0...len(row)-1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" ""matrix"", return ""true"" if the matrix is ​​Toeplitz. Otherwise, return ""false"".

A matrix is ​​Toeplitz if every diagonal from upper left to lower right has the same element.


Example 1:
Input: Matrix = [[1,2,3,4],[5,1,2,3],[9,5,1,2]]
output: true
explain:
In the grid above, the diagonals are:
""[9]"", ""[5, 5]"", ""[1, 1, 1]"", ""[2, 2, 2]"", ""[3, 3]"", ""[4]"".

On each diagonal, all elements are the same, so the answer is true.


Example 2:
Input: matrix = [[1,2],[2,2]]
output: error
explain:
Diagonal ""[1, 2]"" has distinct elements.


constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 20`
`0 <= matrix[i][j] <= 99`
follow up:
What if the `matrix` is stored on disk, and memory is limited, and at most one row of the matrix can be loaded into memory at a time?
What if the `matrix` is so large that you can only load parts of the rows into memory at a time?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"", check whether the letters can be rearranged such that no two adjacent characters are the same.

Output any possible results if possible. Returns an empty string if not possible.


Example 1:
Input: S = ""aab""
Output: ""aba""

Example 2:
Input: S = ""aaab""
Output: """"
notes:
`S` will consist of lowercase letters with a length in the range `[1, 500]`.",0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This problem is the same as ""Max Chunks to Make Sorted"", except that the integers of the given arrays are not necessarily different, and the length of the input array is at most ""2000"", and the maximum number of elements is ""10**8"".

Given an array ""arr"" of integers (not necessarily distinct), we split the array into a certain number of ""chunks"" (partitions), and sort each chunk individually. After concatenating them, the result is equal to the sorted array.

How many blocks can we make at most?

Example 1:
Input: arr = [5,4,3,2,1]
Output: 1
explain:
Splitting into two or more chunks will not return the desired result.

For example, splitting to [5, 4], [3, 2, 1] would result in [4, 5, 1, 2, 3] unsorted.


Example 2:
Input: arr = [2,1,3,4,4]
Output: 4
explain:
We can split into two chunks like [2, 1], [3, 4, 4].

However, splitting into [2, 1], [3], [4], [4] is the maximum number of chunks possible.

notes:
The length of `arr` is in the range `[1, 2000]`.

`arr[i]` will be an integer in the range `[0, 10**8]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array arr, which is a permutation of [0, 1, ..., arr.length - 1] , we split the array into a certain number of ""chunks"" (partitions), and sort each chunk individually. After concatenating them, the result is equal to the sorted array.

How many blocks can we make at most?

Example 1:
Input: arr = [4,3,2,1,0]
Output: 1
explain:
Splitting into two or more chunks will not return the desired result.

For example, splitting to [4, 3], [2, 1, 0] would result in unsorted [3, 4, 0, 1, 2].


Example 2:
Input: arr = [1,0,2,3,4]
Output: 4
explain:
We can split into two chunks like [1, 0], [2, 3, 4].

However, splitting into [1, 0], [2], [3], [4] is the maximum number of blocks possible.

notes:
The length of `arr` is in the range `[1, 10]`.

`arr[i]` will be a sequence of `[0, 1, ..., arr.length - 1]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an expression such as expression = ""e + 8 - a + 5"" and an evaluation graph such as {""e"": 1} (according to evalvars = [""e""] and `evalints = [1]`), Returns a list of tokens representing simplified expressions, such as `[""-1*a"",""14""]`
Expressions use blocks and symbols alternately, separating each block and symbol with a space.

Blocks are expressions, variables, or non-negative integers enclosed in parentheses.

A variable is a string of lowercase letters (excluding numbers). Note that variables can be multi-letter, and note that variables never have leading coefficients or unary operators such as ""2x"" or ""-x"".

Expressions are evaluated in the usual order: first parentheses, then multiplication, then addition and subtraction. For example, the answer to `expression = ""1 + 2 * 3""` is `[""7""]`.

The output format is as follows:
For each term of a free variable with a nonzero coefficient, we write the free variable lexicographically into a term. For example, we would never write a term like ""b*a*c"", only ""a*b*c"".

The degree of a term is equal to the number of free variables being multiplied, computing the multiplicity. (For example, `""a*a*b*c""` has degree 4.) We write the term with the highest degree in the answer first, breaking ties lexicographically, ignoring the leading coefficients of the terms.

The leading coefficient of the term is placed directly to the left, separated from the variable (if present) by an asterisk. A leading coefficient of 1 is still printed.

An example of a well-formed answer is `[""-2*a*a*a"", ""3*a*a*b"", ""3*b*b"", ""4*a"", ""5*c"" , ""-6""]`
Terms with coefficients of 0 (including constant terms) are not included. For example, the output of the expression ""0"" is [].


example:
Input: expression = ""e + 8 - a + 5"", evalvars = [""e""], evalints = [1]
Output: [""-1*a"", ""14""]
Input: expression = ""e - 8 + temperature - pressure"",
evalvars = [""e"", ""temperature""], evalints = [1, 12]
output: [""-1*pressure"", ""5""]
Input: expression = ""(e + 8) * (e - 8)"", evalvars = [], evalints = []
Output: [""1*e*e"", ""-64""]
Input: expression = ""7 - 7"", evalvars = [], evalints = []
output: []
Input: expression = ""a * b * c + b * a * c * 4"", evalvars = [], evalints = []
Output: [""5*a*b*c""]
Input: expression = ""((a - b) * (b - c) + (c - a)) * ((a - b) + (b - c) * (c - a))"",
evalvars = [], evalints = []
Output: [""-1*a*a*b*b"", ""2*a*a*b*c"", ""-1*a*a*c*c"", ""1*a*b*b* b"",""-1*a*b*b*c"",""-1*a*b*c*c"",""1*a*c*c*c"",""-1*b*b*b *c"", ""2*b*b*c*c"", ""-1*b*c*c*c"", ""2*a*a*b"", ""-2*a*a*c"", ""-2*a*b*b"",""2*a*c*c"",""1*b*b*b"",""-1*b*b*c"",""1*b*c*c"" "" "",""-1*c*c*c"",""-1*a*a"",""1*a*b"",""1*a*c"",""-1*b*c""]
notes:
The length of `expression` is in the range `[1, 250]`.

`evalvars, evalints` will have equal lengths in the range `[0, 100]`.",0,0,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The given string ""jewels"" represents the type of gems, and ""stones"" represents the gems you have. Each character in `stones` is a type of stone that you own. You want to know how many of the gemstones you own are also jewelry.

The letters are case sensitive, so ""a"" is considered a different type of stone than ""A"".


Example 1:
Input: jewels = ""aA"", stones = ""aAAbbbb""
Output: 3

Example 2:
Input: jewels = ""z"", stones = ""ZZ""
output: 0

constraint:
`1 <= jewels.length, stones.length <= 50`
`jewels` and `stones` contain English letters only.

All properties of 'Jewelry' are unique.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a basic calculator to evaluate a simple expression string.

The expression string contains only non-negative integers, '+', '-', '*', '/' operators, and opening brackets '(' and closing brackets ')'. Integer division should be truncated to zero.

You can assume that a given expression is always valid. All intermediate results are in the range ""[-231, 231 - 1]"".


Example 1:
Input: s = ""1+1""
Output: 2

Example 2:
Input: s = ""6-4/2""
Output: 4

Example 3:
Input: s = ""2*(5+5*2)/3+(6/2+8)""
Output: 21

Example 4:
Input: s = ""(2+6*3+5-(3*14/7+2)*5)+3""
Output: -12

Example 5:
Input: s = ""0""
output: 0

constraint:
`1 <= s <= 104`
`s` consists of numbers, `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.

`s` is a valid expression.

Follow-up: Can the problem be solved without using built-in library functions?",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2x3 ""chessboard"", there are 5 squares represented by integers from 1 to 5, and one empty square represented by 0.

The move consists of selecting a ""0"" and a 4-way adjacent number and swapping them.

The state of the board is resolved if and only if `board` is `[[1,2,3],[4,5,0]].`.
Given a puzzle, return the minimum number of steps required to solve the state of the puzzle. Returns -1 if the state of the board cannot be solved.


example:
Input: chessboard = [[1,2,3],[4,0,5]]
Output: 1
Explanation: Swap 0 and 5 at a time.

Input: chessboard = [[1,2,3],[5,4,0]]
Output: -1
Explanation: There are no many moves to solve the board.

Input: chessboard = [[4,1,2],[5,0,3]]
Output: 5
Explanation: 5 is the minimum number of moves to solve the board.

Example path:
After step 0: [[4,1,2],[5,0,3]]
After step 1: [[4,1,2],[0,5,3]]
After moving 2: [[0,1,2],[4,5,3]]
After step 3: [[1,0,2],[4,5,3]]
After step 4: [[1,2,0],[4,5,3]]
After step 5: [[1,2,3],[4,5,0]]
Input: chessboard = [[3,2,4],[1,5,0]]
Output: 14
notes:
`board` will be a 2 x 3 array, as above.

`board[i][j]` will be the array of `[0, 1, 2, 3, 4, 5]`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""stations"", which represents the location of gas stations on the x-axis. You also get an integer ""k"".

You should add `k` new gas stations. You can add stations anywhere along the x-axis, not necessarily at integer positions.

Let penalty() be the maximum distance between adjacent gas stations after adding k new gas stations.

Return the smallest possible value of `penalty()`. Answers with actual answers within 10-6 will be accepted.


Example 1:
Input: station = [1,2,3,4,5,6,7,8,9,10], k = 9
Output: 0.50000

Example 2:
Input: station = [23,24,36,39,46,56,57,65,84,98], k = 1
Output: 14.00000

constraint:
`10 <= stations.length <= 2000`
`0 <= station[i] <= 108`
`stations` are sorted in strictly increasing order.

`1 <= k <= 106`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have some permutation `A` of `[0, 1, ..., N - 1]`, where `N` is the length of `A`.

The (global) number of inversions is the number of `i < j`, where `0 <= i < j < N` and `A[i] > A[j]`.

The number of local inversions is the number of i with 0 <= i < N and A[i] > A[i+1].

Returns True if and only if the number of global inversions is equal to the number of local inversions.


Example 1:
Input: A = [1,0,2]
output: true
Explanation: There is 1 global inversion and 1 local inversion.


Example 2:
Input: A = [1,2,0]
output: error
Explanation: There are 2 global inversions and 1 local inversion.

notes:
`A` will be the array of `[0, 1, ..., A.length - 1]`.

The length of `A` is in the range `[1, 5000]`.

The time limit for this question has been reduced.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary search tree (BST) with a root node ""root"" and a target value ""V"", split the tree into two subtrees, one of which has nodes all less than or equal to the target value, and the other subtree has all Nodes greater than the target value. The tree does not necessarily contain nodes with value ""V"".

Also, most of the structure of the original tree should be preserved. Formally, for any child node C in the original tree that had a parent node P, node C should still have a parent node P if they are both in the same subtree after the split.

You should output the root TreeNodes of the two subtrees in any order after the split.


Example 1:
Input: root = [4,2,6,1,3,5,7], V = 2
Output: [[2,1],[4,3,6,null,null,5,7]]
explain:
Note that root, output[0] and output[1] are TreeNode objects, not arrays.

A given tree [4,2,6,1,3,5,7] is represented by the following diagram:
          4
        / \
      2 6
     / \ / \
    1 3 5 7
And the output graph is:
          4
        / \
      3 6 and 2
            / \ /
           5 7 1
notes:
The size of the BST will not exceed ""50"".

BST is always valid, and the value of each node is different.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a string of ""L"", ""R"", and ""X"" characters, such as ""RXXLRXRXL"", shifting consists of replacing a single occurrence of ""XL"" with ""LX"" ""`, or replacing a single occurrence of `""RX"" ` Replace with `""XR""`. Given a start string ""start"" and an end string ""end"", returns ""True if and only if there is a sequence of moves that transforms one string into the other "".


Example 1:
Input: start=""RXXLRXRXL"", end=""XRLXXRRLX""
output: true
Explanation: We can convert from start to finish as follows:
RXXLRXRXL ->
XRXLRXRXL ->
XRLXRXRXL ->
XRLXXRRXL ->
XRLXXRRLX

Example 2:
Input: start=""X"", end=""L""
output: error

Example 3:
Input: start=""LLR"", end=""RRL""
output: error

Example 4:
Input: start=""XL"", end=""LX""
output: true

Example 5:
Input: start = ""XLLR"", end = ""LXLX""
output: error

constraint:
`1 <= start.length <= 104`
`start.length == end.length`
Both `start` and `end` contain only characters from `'L'`, `'R'` and `'X'.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"On an N x N `grid`, each square `grid[i][j]` represents the height of that point `(i,j)`.

Now it starts to rain. At time ""t"", the water depth is ""t"" everywhere. You can swim from one square to another 4-direction adjacent square if and only if the heights of the two squares are each at most ""t"". You can swim infinite distances in zero time. Of course, you must be within the grid while swimming.

You start with the square `(0, 0)` in the upper left corner. What is the shortest time to reach the bottom right corner ""(N-1, N-1)""?

Example 1:
Input: [[0,2],[1,3]]
Output: 3
explain:
At time ""0"", you are at grid position ""(0, 0)"".

You can't go anywhere else because the 4-direction adjacent neighbors have elevations above t=0.

You cannot reach point `(1, 1)` until time `3`.

When the water depth is ""3"", we can swim anywhere within the grid.


Example 2:
Input: [[0,1,2,3,4],[24,23,22,21,5],[12,13,14,15,16],[11,17,18,19,20] ,[10,9,8,7,6]]
output: 16
explain:
 0 1 2 3 4
24 23 22 21 5
12 13 14 15 16
11 17 18 19 20
10 9 8 7 6
Final routes are marked in bold.

We need to wait until time 16 so that (0, 0) and (4, 4) are concatenated.

notes:
`2 <= N <= 50`.

grid[i][j] is the array of [0, ..., N*N - 1] .",0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On the first line, we wrote a ""0"". Now, on each subsequent row, we look at the previous row and replace every occurrence of ""0"" with ""01"" and every occurrence of ""1"" with ""10"".

Given a row ""N"" and an index ""K"", return the ""K""th index symbol in row ""N"". (""K"" values ​​are 1-indexed.) (1-indexed).


example:
Input: N=1, K=1
output: 0
Input: N=2, K=1
output: 0
Input: N=2, K=2
Output: 1
Input: N=4, K=5
Output: 1
explain:
Line 1: 0
Line 2: 01
Line 3: 0110
Line 4: 01101001
notes:
`N` will be an integer in the range `[1, 30]`.

`K` will be an integer in the range `[1, 2^(N-1)]`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Movement involves taking a point ""(x, y)"" and converting it to ""(x, x+y)"" or ""(x+y, y)"".

Given a starting point ""(sx, sy)"" and a target point ""(tx, ty)"", convert the point ""(sx, sy)"" to ""(tx, ty)` if and only if there exists. Otherwise, return ""false "".


example:
Input: sx = 1, sy = 1, tx = 3, ty = 5
output: true
explain:
The sequence of actions that turns a starting point into a goal is:
(1, 1) -> (1, 2)
(1, 2) -> (3, 2)
(3, 2) -> (3, 5)
Input: sx = 1, sy = 1, tx = 2, ty = 2
output: error
Input: sx = 1, sy = 1, tx = 1, ty = 1
output: true
notes:
`sx, sy, tx, ty` are all integers in the range `[1, 10^9]`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the forest, each rabbit has its own color. Some subset of rabbits (possibly all rabbits) will tell you how many other rabbits are the same color as them. These ""answers"" are placed in an array.

Returns the minimum number of rabbits possible in the forest.


example:
Input: Answer = [1, 1, 2]
Output: 5
explain:
The two rabbits that answered ""1"" might both be the same color, say red.

The bunny that answers ""2"" cannot be red, otherwise the answer will be inconsistent.

Suppose the rabbit that answered ""2"" is blue.

Then there should be 2 blue rabbits in the forest that have not entered the formation.

Thus, the minimum possible number of rabbits in the forest is 5: 3 answered and 2 did not.

Input: Answer = [10, 10, 10]
Output: 11
input: answer = []
output: 0
notes:
`answers` can be at most `1000` in length.

Each answers[i] is an integer in the range [0, 999].",0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"N x N `board` contains only `0`s and `1`s. In each move, you can swap any 2 rows with each other, or swap any 2 columns with each other.

What is the minimum number of moves to turn a chessboard into a ""chessboard""? Are there no 0 and 1 in the chessboard that are adjacent to each other in 4 directions? Returns -1 if the task is impossible to complete.


example:
Input: board = [[0,1,1,0],[0,1,1,0],[1,0,0,1],[1,0,0,1]]
Output: 2
explain:
One possible sequence of moves is as follows, from left to right:
0110 1010 1010
0110 --> 1010 --> 0101
1001 0101 1010
1001 0101 0101
The first step swaps the first and second columns.

The second step swaps the second and third rows.

Input: chessboard = [[0, 1], [1, 0]]
output: 0
explain:
Note also that the top left corner of the board with 0,
01
10
Also an effective chess board.

Input: chessboard = [[1, 0], [1, 0]]
Output: -1
explain:
No matter what order of moves you take, you cannot end up with a valid board.

notes:
`board` will have the same number of rows and columns in the range `[2, 30]`.

`board[i][j]` will only be `0`s or `1`s.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree (BST), returns the smallest difference between the values ​​of any two distinct nodes in the tree.

Note: This question is the same as 530: https://leetcode.com/problems/minimum-absolute-difference-in-bst/

Example 1:
Input: root = [4,2,6,1,3]
Output: 1

Example 2:
Input: root = [1,0,48,null,null,12,49]
Output: 1

constraint:
The number of nodes in the tree is in the range '[2, 100]'.

`0 <= Node.val <= 105`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string S, we can individually convert each letter to lowercase or uppercase to create another string.

Returns a list of all possible strings we can create. You can return the output in any order.


Example 1:
Input: S = ""a1b2""
Output: [""a1b2"",""a1B2"",""A1b2"",""A1B2""]

Example 2:
Input: S = ""3z4""
Output: [""3z4"",""3Z4""]

Example 3:
Input: S = ""12345""
Output: [""12345""]

Example 4:
Input: S = ""0""
Output: [""0""]

constraint:
`S` will be a string of length between `1` and `12`.

`S` will only contain letters or numbers.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an undirected graph with ""n"" nodes, where each node is numbered between ""0"" and ""n - 1"". Given a 2D array ""graph"", where ""graph[u]"" is the array of nodes adjacent to node ""u"". More formally, for each `v` in `graph[u]`, there is an undirected edge between node `u` and node `v`. The graph has the following properties:
No self-edges (`graph[u]` does not contain `u`).

No parallel edges (`graph[u]` contains no duplicate values).

If `v` is in `graph[u]`, then `u` is in `graph[v]` (the graph is undirected).

The graph may not be connected, meaning there may be two nodes ""u"" and ""v"" with no path between them.

A graph is bipartite if the nodes can be split into two separate sets ""A"" and ""B"" such that every edge in the graph connects a node in set ""A"" to a node in set ""B"" picture.

Returns true if and only if it is bipartite.


Example 1:
Input: graph = [[1,2,3],[0,2],[0,1,3],[0,2]]
output: error
Explanation: There is no way to separate nodes into two separate sets such that every edge connects one node to another.


Example 2:
Input: graph = [[1,3],[0,2],[1,3],[0,2]]
output: true
Explanation: We can divide the nodes into two groups: {0, 2} and {1, 3}.


constraint:
`graph. length == n`
`1 <= n <= 100`
`0 <= figure[u].length < n`
`0 <= graph[u][i] <= n - 1`
`graph[u]` does not contain `u`.

All values ​​of `graph[u]` are unique.

If `graph[u]` contains `v`, then `graph[v]` contains `u`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sorted integer array ""arr"" containing ""1"" and prime numbers, where all integers of ""arr"" are unique. You also get an integer ""k"".

For each `i` and `j`, where `0 <= i < j < arr.length`, we consider the fraction `arr[i] / arr[j]`.

Returns the ""kth"" smallest score considered. Return your answers as an integer array of size ""2"", where ""answer[0] == arr[i]"" and ""answer[1] == arr[j]"".


Example 1:
Input: arr = [1,2,3,5], k = 3
output: [2,5]
Explanation: The scores to be considered in sorted order are:
1/5, 1/3, 2/5, 1/2, 3/5, and 2/3.

The third score is 2/5.


Example 2:
Input: arr = [1,7], k = 1
Output: [1,7]

constraint:
`2 <= arr.length <= 1000`
`1 <= arr[i] <= 3 * 104`
`arr[0] == 1`
`arr[i]` is a prime number for which `i > 0`.

All numbers in `arr` are unique and in strict ascending order.

`1 <= k <= arr.length * (arr.length - 1) / 2`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities connected by `m` flights. Each flight starts at city ""u"" and arrives at ""v"" at price ""w"".

Now given all cities and flights, and departure city ""src"" and destination ""dst"", your task is to find the cheapest price with at most ""k"" stops from ""src"" to ""dst"". If there is no such route, output ""-1"".


Example 1:
enter:
n = 3, sides = [[0,1,100],[1,2,100],[0,2,500]]
source = 0, dst = 2, k = 1
Output: 200
explain:
The graph looks like this:
The cheapest price for at most one stop from city '0' to city '2' is 200, as marked in red in the figure.


Example 2:
enter:
n = 3, sides = [[0,1,100],[1,2,100],[0,2,500]]
source = 0, dst = 2, k = 0
Output: 500
explain:
The graph looks like this:
The cheapest price from city '0' to city '2' with at most 0 stops is 500, as marked in blue in the figure.


constraint:
The number of nodes `n` will be in the range `[1, 100]`, with nodes labeled `0` to `n`` - 1`.

The size of `flights` will be in the range `[0, n * (n - 1) / 2]`.

Each flight is in the format `(src, ``dst``, price)`.

The price for each flight will be in the range ""[1, 10000]"".

`k` is in the range `[0, n - 1]`.

There won't be any repeated flights or self-loops.",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"X is a good number if, after rotating each number individually 180 degrees, we get a different significant figure than X. Every number has to be rotated - we can't choose to leave that alone.

A number is valid if each number is still a number after rotation. 0, 1, 8 rotate on their own; 2 and 5 rotate each other (in this case, they rotate in different directions, in other words, 2 or 5 gets a mirror image); 6 and 9 rotate each other, and the remaining numbers do not rotate to other numbers invalid.

Now given a positive number `N`, how many X's are good from `1` to `N`?

example:
Input: 10
Output: 4
explain:
There are four good numbers in the range [1, 10]: 2, 5, 6, 9.

Note that 1 and 10 are not good numbers because they stay the same after rotation.

notes:
N will be in the range '[1, 10000]'.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a simplified game of PAC-MAN on an infinite 2D grid. You start at point ""[0, 0]"" and you are given a target point ""target = [xtarget, ytarget]"" which you are trying to reach. There are several ghosts on the map, and their starting positions are given by the array ghosts, where ghosts[i] = [xi, yi] represents the starting position of the ith ghost. All inputs are integral coordinates.

Each turn, you and all ghosts can independently choose to move 1 unit in any of the four cardinal directions: North, East, South, or West, or remain stationary. All actions happen simultaneously.

You can escape if and only if you can reach the target before any ghosts reach you. If you reach any square (including the target) at the same time as the ghost, it doesn't count as an escape.

Returns true if escaping is possible, false otherwise.


Example 1:
Input: ghosts = [[1,0],[0,3]], target = [0,1]
output: true
Explanation: You can reach the destination (0, 1) after 1 round, but the ghosts at (1, 0) and (0, 3) cannot catch up with you.


Example 2:
Input: ghosts = [[1,0]], target = [2,0]
output: error
Explanation: You need to reach the destination (2, 0), but the ghost at (1, 0) is between you and the destination.


Example 3:
Input: ghosts = [[2,0]], target = [1,0]
output: error
Explanation: The ghost can reach the target at the same time as you.


Example 4:
Input: ghosts = [[5,0],[-10,-2​​],[0,-5],[-2,-2],[-7,1]], target = [7,7 ]
output: error

Example 5:
Input: ghosts = [[-1,0],[0,1],[-1,0],[0,1],[-1,0]], target = [0,0]
output: true

constraint:
`1 <= ghosts.length <= 100`
`ghost[i].length == 2`
`-104 <= xi, yi <= 104`
There can be multiple ghosts in the same location.

`target.length == 2`
`-104 <= xtarget, ytarget <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two types of tiles: 2x1 domino shape and ""L"" domino shape. These shapes can be rotated.

XX <- dominoes
XX <- ""L"" triplet
x
Given N, how many ways are there to tile a 2 x N board? Return your answer modulo 10^9 + 7.

(In a tile, every square must be covered by a square. Two squares are different if and only if there are two 4-way adjacent cells on the board, such that both squares of exactly one square are covered by One square occupies.)

example:
Input: 3
Output: 5
explain:
Five different ways are listed below, with different letters representing different blocks:
XYZ XXZ XYY XXY XYY
XYZ YYZ XZZ XYY XXY
notes:
N will be in the range ""[1, 1000]"".",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"`S` and `T` are strings of lowercase letters. In `S`, no letter occurs more than once.

`S` before sorting in some custom order. We want to arrange the characters of `T` so that they match the sort order of `S`. More specifically, if ""x"" occurs before ""y"" in ""S"", then ""x"" should occur before ""y"" in the returned string.

Return any permutation of `T` (as a string) that satisfies this property.


example :
enter:
S = ""cba""
T = ""abcd""
Output: ""cbad""
explain:
""a"", ""b"", ""c"" occur in S, so the order of ""a"", ""b"", ""c"" should be ""c"", ""b"", ""a"".
Since ""d"" does not appear in S, it can appear anywhere in T. ""dcba"", ""cdba"", ""cbda"" are also valid outputs.

notes:
The length of `S` is at most `26`, and there are no repeated characters in `S`.

The length of `T` is at most `200`.

`S` and `T` consist of lowercase letters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and a string array words, return the number of subsequence words[i] of s.

A subsequence of a string is a new string generated by removing some characters (optionally none) from the original string without changing the relative order of the remaining characters.

For example, ""ace"" is a subsequence of ""abcde"".


Example 1:
Input: s = ""abcde"", words = [""a"",""bb"",""acd"",""ace""]
Output: 3
Explanation: There are three strings in the word that are subsequences of s: ""a"", ""acd"", ""ace"".


Example 2:
Input: s = ""dsahjpjauf"", words = [""ahjpjau"",""ja"",""ahbwzgqnuk"",""tnmlanowax""]
Output: 2

constraint:
`1 <= s.length <= 5 * 104`
`1 <= words.length <= 5000`
`1 <= words[i].length <= 50`
`s` and `words[i]` contain only lowercase English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let f(x) be the number of trailing zeros in x!. (Recall that `x != 1 * 2 * 3 * ... * x`, by convention, `0 != 1`.)
For example, `f(3) = 0` because 3! = 6 has no zeros at the end, and `f(11) = 2` because 11! = 39916800 has 2 zeros at the end. Given `K`, find how many non-negative integers `x` have the property `f(x) = K`.


Example 1:
Input: K = 0
Output: 5
Explanation: 0!, 1!, 2!, 3!, and 4! end with K = 0 zero.


Example 2:
Input: K = 5
output: 0
Explanation: No x makes x! terminate with K = 5 zeros.

notes:
`K` will be an integer in the range `[0, 10^9]`.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Tic-Tac-Toe board is given as a string array ""board"". Returns True if and only if it is possible to reach this board position during a valid tic-tac-toe session.

`board` is a 3 x 3 array consisting of the characters `"" ""`, `""X""` and `""O""`. The "" "" character represents an empty square.

Here are the rules of Tic Tac Toe:
Players take turns placing characters into empty squares ("" "").

The first player always places ""X"" characters, and the second player always places ""O"" characters.

""X"" and ""O"" characters are always placed in empty squares, never filled.

The game ends when 3 identical (non-empty) characters fill any row, column or diagonal.

The game is also over if all squares are non-empty.

If the game is over, no more chess can be played.


Example 1:
Input: board = [""O"", "" "", "" ""]
output: error
Explanation: The first player always bets ""X"".


Example 2:
Input: board = [""XOX"", ""X"", "" ""]
output: error
Description: Players take turns to move chess.


Example 3:
Input: board = [""XXX"", "" "", ""OOO""]
output: error

Example 4:
Input: board = [""XOX"", ""O O"", ""XOX""]
output: true
notes:
`board` is an array of strings of length 3, where each string `board[i]` is of length 3.

Each `board[i][j]` is a character in the set `{"" "", ""X"", ""O""}`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get an array ""A"" of positive integers, and two positive integers ""L"" and ""R"" (""L <= R"").

Returns the number of (contiguous, non-empty) subarrays such that the largest array element in the subarray has a value of at least 'L' and at most 'R'.


example :
enter:
A = [2, 1, 4, 3]
L = 2
R = 3
Output: 3
Explanation: There are 3 sub-arrays that meet the conditions: [2], [2, 1], [3].

notes:
L, R and `A[i]` will be integers in the range `[0, 10^9]`.

The length of `A` will be in the range `[1, 50000]`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a directed acyclic graph (DAG) consisting of ""n"" nodes labeled from 0 to n - 1, find all possible paths from node ""0"" to node ""n - 1"", in any order return them.

The graph looks like this: `graph[i]` is a list of all nodes you can reach from node `i` (i.e. there is a directed edge from node `i` to node `graph[i][j]` ).


Example 1:
Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.


Example 2:
Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]

Example 3:
Input: graph = [[1],[]]
Output: [[0,1]]

Example 4:
Input: graph = [[1,2,3],[2],[3],[]]
Output: [[0,1,2,3],[0,2,3],[0,3]]

Example 5:
Input: graph = [[1,3],[2],[3],[]]
Output: [[0,1,2,3],[0,3]]

constraint:
`n == graph. length`
`2 <= n <= 15`
`0 <= graph[i][j] < n`
`graph[i][j] != i` (i.e. there will be no self-loops).

The input graph is guaranteed to be a DAG.",0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We stack the glasses in a pyramid shape with 1 glass in the first row, 2 glasses in the second row, and so on up to the 100th row. Each glass holds a glass of champagne.

Then, pour some champagne into the first glass on top. When the top glass is full, any excess liquid poured falls equally into the glasses immediately to the left and right of it. As these glasses are filled, any excess champagne falls evenly to the left and right of these glasses, and so on. (Excess champagne from glasses in the last row drops to the floor.)
For example, after a glass of champagne is poured, the top glass is full. After pouring two glasses of champagne, both glasses in the second row were half filled. After three glasses of champagne were poured, those two glasses were full - now a total of 3 glasses full. After pouring four glasses of champagne, the middle glass in the third row is half full, and the outer two glasses are quarter full, as shown in the picture below.

Now, after pouring some non-negative integer glasses of champagne, return the fullness of the j-th glass in row ith (""i"" and ""j"" are both 0-indexed.)

Example 1:
Input: poured = 1, query_row = 1, query_glass = 1
Output: 0.00000
Explanation: We pour 1 glass of champagne into the glass at the top of the tower (index (0, 0)). There will be no excess liquid, so all glasses below the top glass will remain empty.


Example 2:
Input: poured = 2, query_row = 1, query_glass = 1
Output: 0.50000
Explanation: We pour 2 glasses of champagne into the glass at the top of the tower (index (0, 0)). There is one cup of excess liquid. The glass with index (1, 0) and the glass with index (1, 1) will divide the excess liquid equally and each will get half a glass of champagne.


Example 3:
Input: poured=100000009, query_row=33, query_glass=17
Output: 1.00000

constraint:
`0 <= dump <= 109`
`0 <= query_glass <= query_row < 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the following, each capital letter represents some hexadecimal digit from ""0"" to ""f"".

The red, green and blue color ""#AABBCC"" can be abbreviated as ""#ABC"". For example, ""#15c"" is shorthand for the color ""#1155cc"".

Now, suppose the similarity between two colors `""#ABCDEF""` and `""#UVWXYZ""` is `-(AB - UV)^2 - (CD - WX)^2 - (EF - YZ)^2 `.

Given a color `""#ABCDEF""`, return the color of the 7 characters most similar to `#ABCDEF`, and have shorthand (i.e. can be expressed as some `""#XYZ""`

Example 1:
Input: color = ""#09f166""
Output: ""#11ee66""
explain:
The similarity is -(0x09 - 0x11)^2 -(0xf1 - 0xee)^2 - (0x66 - 0x66)^2 = -64 -9 -0 = -73.

This is the highest of all shorthand colors.

notes:
`color` is a string of length `7`.

`color` is a valid RGB color: `color[i]` is a hexadecimal number from `0` to `f` for `i > 0`
Any answer with the same (highest) similarity to the best answer will be accepted.

All input and output should use lowercase letters, and output is 7 characters.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two integer sequences ""A"" and ""B"" of the same non-zero length.

We can swap elements ""A[i]"" and ""B[i]"". Note that both elements are at the same index position in their respective sequences.

At the end of a certain number of swaps, both ""A"" and ""B"" are strictly incremented. (A sequence is strictly increasing if and only if `A[0] < A[1] < A[2] < ... < A[A.length - 1].)
Given A and B, return the minimum number of swaps such that both sequences are strictly increasing. Guarantees that the given input always makes it possible.


example:
Input: A = [1,3,5,4], B = [1,2,3,7]
Output: 1
explain:
Swap A[3] and B[3]. Then the order is:
A = [1, 3, 5, 7] and B = [1, 2, 3, 4]
Both are strictly increasing.

notes:
`A, B` are arrays of the same length, in the range `[1, 1000]`.

`A[i], B[i]` are integer values ​​in the range `[0, 2000]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We start from a node in the directed graph, and with each turn, we walk along the directed edges of the graph. If we reach a terminal node (that is, it has no outgoing directed edges), we stop.

If we eventually have to go to a terminal node, it is safe for us to define a start node. More specifically, there is a natural number ""k"" such that we must stop at the end node in less than ""k"" steps in order to choose where to walk.

Returns an array containing all secure nodes of the graph. Answers should be in ascending order.

A directed graph has `n` nodes with labels from `0` to `n - 1`, where `n` is the length of `graph`. The graph is given in the form: `graph[i]` is a list of labels `j` such that `(i, j)` is a directed edge of the graph from node `i` to node `j`.


Example 1:
Input: graph = [[1,2],[2,3],[5],[0],[5],[],[]]
Output: [2,4,5,6]
Explanation: The given graph is shown above.


Example 2:
Input: graph = [[1,2,3,4],[1,2],[3,4],[0,4],[]]
output: [4]

constraint:
`n == graph. length`
`1 <= n <= 104`
`0 <= graph[i].legnth <= n`
`graph[i]` is sorted in strictly increasing order.

The graph may contain self-loops.

The number of edges in the graph will be in the range ""[1, 4 * 104]"".",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" binary ""grid"" where each ""1"" represents a brick and a ""0"" represents an empty space. A brick is stable if:
which connects directly to the top of the grid, or
At least one other brick in its four adjacent cells is stable.

You also get an array ""hits"", which is the sequence of erases we want to apply. Every time we want to erase bricks at hits[i] = (rowi, coli) position. The brick at that location (if present) will disappear. Some other bricks may no longer be stable due to erasure and will fall. Once a brick falls, it is immediately removed from the ""grid"" (i.e., it won't land on other stable bricks).

Returns an array `result`, where each `result[i]` is the number of bricks that will fall after applying `ith` erasure.

Note that erasure may refer to a location where there are no bricks, and if there are, no bricks will be dropped.


Example 1:
Input: grid = [[1,0,0,0],[1,1,1,0]], hits = [[1,0]]
output: [2]
Instructions: Start with a grid:
[[1,0,0,0],
 [1,1,1,0]]
We erase the underlined brick at (1,0) to get the grid:
[[1,0,0,0],
 [0,1,1,0]]
The two underlined bricks are no longer stable because they are no longer connected to the top nor adjacent to another stable brick, so they will fall. The resulting grid is:
[[1,0,0,0],
 [0,0,0,0]]
So the result is [2].


Example 2:
Input: grid = [[1,0,0,0],[1,1,0,0]], hits = [[1,1],[1,0]]
Output: [0,0]
Instructions: Start with a grid:
[[1,0,0,0],
 [1,1,0,0]]
We erase the underlined brick at (1,1) to get the grid:
[[1,0,0,0],
 [1,0,0,0]]
All remaining bricks remain stable, so no bricks fall. The grid remains the same:
[[1,0,0,0],
 [1,0,0,0]]
Next, we erase the underlined brick at (1,0) to get the grid:
[[1,0,0,0],
 [0,0,0,0]]
Again, all remaining bricks remain stable, so no bricks fall.

So the result is [0,0].


constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 200`
`grid[i][j]` is either `0` or `1`.

`1 <= hits.length <= 4 * 104`
`hits[i].length == 2`
`0 <= xi <= m - 1`
`0 <= yi <= n - 1`
All `(xi, yi)` are unique.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`.

You should move each element of `nums` to one of the two arrays `A` and `B` such that `A` and `B` are non-empty and `average(A) == average(B)`.

Returns ""true"" if it is possible to achieve the goal, otherwise returns ""false"".

Note that for the array ""arr"", ""average(arr)"" is the sum of all elements of ""arr"" over the length of ""arr"".


Example 1:
Input: nums = [1,2,3,4,5,6,7,8]
output: true
Explanation: We can split the array into [1,4,5,8] and [2,3,6,7] which both have an average of 4.5.


Example 2:
Input: nums = [3,1]
output: error

constraint:
`1 <= nums.length <= 30`
`0 <= nums[i] <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are two types of soup: Type A and Type B. Initially we have `N` milliliters of each soup. There are four operations:
Provide 100ml soup A and 0ml soup B
Provide 75ml of soup A and 25ml of soup B
Serving 50ml Soup A and 50ml Soup B
Provide 25ml of soup A and 75ml of soup B
When we were offered some soup, we gave it to someone and then we didn't have it. Each round, we will choose from four actions with equal probability of 0.25. If there is not enough soup left to complete the procedure, we will do our best. We stop once we no longer have a certain amount of both types of soup.

Note that we did not use all 100ml of soup B first.
Returns the probability that soup A becomes empty first, plus half the probability that A and B become empty at the same time.


example:
Input: N = 50
Output: 0.625
explain:
If we choose the first two operations, A will be empty first. In the third operation, A and B will become empty at the same time. In the fourth operation, B will become empty first. So the total probability that A becomes empty first plus half the probability that both A and B become empty at the same time is 0.25 * (1 + 1 + 0.5 + 0) = 0.625.

notes:
`0 <= N <= 10^9`.
Answers within 10^-6 of the true value are considered correct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Sometimes people repeat letters to indicate additional feelings, such as ""hello"" -> ""heeellooo"", ""hi"" -> ""hiiii"". In a string like ""heeellooo"" we have exactly the same set of adjacent letters: ""h"", ""eee"", ""ll"", ""ooo"".

For some given string ""S"", a query term is elastic if it can be made equal to ""S"" by any number of applications of the following expansion operations: choose a group consisting of the characters ""c"", and Adding some numbers adds the character `c` to the group so that the size of the group is 3 or more.

For example, starting from ""hello"", we can expand the group ""o"" to get ""hellooo"", but we cannot get ""hello"" because the size of group ""oo"" is less than 3. Also, we can do another extension like ""ll"" -> ""lllll"" to get ""helllllooo"". If `S = ""helllllooo""`, then the query term ""hello"" becomes elastic due to these two expansion operations: `query = ""hello"" -> ""hellooo"" -> ""helllllooo"" = S`.

Given a list of query terms, return the elastic term count.

example:
enter:
S = ""hee hee""
words = [""Hello"", ""Hi"", ""Hello""]
Output: 1
explain:
We can expand the ""e"" and ""o"" in the word ""hello"" to get ""heeellooo"".

We cannot extend ""helo"" to get ""heeellooo"" because the size of group ""ll"" is not 3 or greater.


constraint:
`0 <= len(S) <= 100`.

`0 <= len(words) <= 100`.

`0 <= len(words[i]) <= 100`.

All words in `S` and `words` consist of lowercase letters only",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get non-negative integers nums[i] written on the blackboard. Alice and Bob take turns erasing a number from the board, with Alice starting first. If erasing a number causes the bitwise XOR of all elements of the blackboard to become 0, that player loses. (Also, we would say that the bitwise XOR of an element is the element itself, and the bitwise XOR of no element is 0.)
Also, if any player starts his turn with a bitwise XOR of all elements of the blackboard equal to 0, that player wins.

Returns True if and only if Alice wins the game, assuming both players played best.


example:
Input: nums = [1, 1, 2]
output: error
explain:
Alice has two choices: Erase 1 or Erase 2.
If she erases 1, the nums array becomes [1, 2]. The bitwise XOR of all elements on the blackboard is 1 XOR 2 = 3. Now Bob can delete any element he wants, since Alice will be the one to delete the last element, she will be lost.
If Alice erases 2 first, nums now becomes [1, 1]. The bitwise XOR of all elements of the blackboard is 1 XOR 1 = 0. Alice lost.

notes:
`1 <= N <= 1000`.
`0 <= nums[i] <= 2^16`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A website domain like ""discuss.leetcode.com"" is made up of various subdomains. At the top level we have ""com"", at the next level we have ""leetcode.com"", and at the bottom level, ""discuss.leetcode.com"". When we visit a domain like ""discuss.leetcode.com"", we also implicitly visit the parent domains ""leetcode.com"" and ""com"".

Now, call a ""count-paired domain"" a count (indicating how many visits the domain has received), followed by a space, then the address. An example of a count paired domain might be ""9001 discuss.leetcode.com"".

We get a ""cpdomains"" list with count paired domains. We want a list of count paired domains (in the same format as input, in any order) that explicitly counts the number of visits for each subdomain.


Example 1:
enter:
[""9001 discuss.leetcode.com""]
output:
[""9001 discuss.leetcode.com"", ""9001 leetcode.com"", ""9001 com""]
explain:
We have only one website domain name: ""discuss.leetcode.com"". As mentioned above, the subdomains ""leetcode.com"" and ""com"" will also be accessed. So they will all be visited 9001 times.


Example 2:
enter:
[""900 google.mail.com"", ""50 yahoo.com"", ""1 intel.mail.com"", ""5 wiki.org""]
output:
[""901 mail.com"", ""50 yahoo.com"", ""900 google.mail.com"", ""5 wiki.org"", ""5 org"", ""1 intel.mail.com"", ""951 com""]
explain:
We will visit ""google.mail.com"" 900 times, ""yahoo.com"" 50 times, ""intel.mail.com"" once and ""wiki.org"" 5 times. For subdomains, we will visit ""mail.com"" 900 + 1 = 901 times, ""com"" 900 + 50 + 1 = 951 times, and ""org"" 5 times.

notes:
The length of `cpdomains` will not exceed `100`.
The length of each domain name will not exceed '100'.

Each address will have 1 or 2 ""."". figure.

No count will exceed ""10000"" for the input in the domain.

Answer outputs can be returned in any order.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a list of points on a plane. Returns the area of ​​the largest triangle that can be formed from any 3 points.


example:
Input: points = [[0,0],[0,1],[1,0],[0,2],[2,0]]
Output: 2
explain:
These five points are shown in the figure below. The red triangle is the largest.

notes:
`3 <= points. length <= 50`.

No points will be repeated.

 `-50 <= points[i][j] <= 50`.

Answers within 10^-6 of the true value are considered correct.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We divide a row of numbers ""A"" into at most ""K"" adjacent (non-empty) groups, then our score is the sum of the means of each group. What is the maximum score we can achieve?
Note that our partition must use every number in A, and the fractions don't have to be integers.


example:
enter:
A = [9,1,2,3,9]
K = 3
Output: 20
explain:
The best option is to partition A into [9], [1, 2, 3], [9]. The answer is 9 + (1 + 2 + 3) / 3 + 9 = 20.

For example, we can also divide A into [9, 1], [2], [3, 9].

This division would result in a score of 5 + 2 + 6 = 13, which is worse.

notes:
`1 <= A.length <= 100`.

`1 <= A[i] <= 10000`.

`1 <= K <= A.length`.

Answers within `10^-6` of correct answers will be considered correct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get the head node ""root"" of the binary tree, and the value of each node is either 0 or 1.

Return the same tree where every subtree (of the given tree) that does not contain a 1 has been removed.

(Recall that the subtree of node X is X plus every node that is a descendant of X.)

Example 1:
Input: [1,null,0,0,1]
Output: [1,null,0,null,1]
explain:
Only red nodes satisfy the property ""every subtree does not contain a 1"".

The picture on the right represents the answer.


Example 2:
Input: [1,0,1,0,0,0,1]
Output: [1,null,1,null,1]

Example 3:
Input: [1,1,0,1,1,0,1,0]
Output: [1,1,0,1,1,null,1]
notes:
A binary tree has at most ""200 nodes"".

The value of each node will only be ""0"" or ""1"".",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array routes representing bus routes, where routes[i] is the ith bus route that repeats forever.

For example, if routes[0] = [1, 5, 7], it means that the 0th bus travels in sequence 1 -> 5 -> 7 -> 1 -> 5 -> 7 -> 1 -> .. .` Forever.

You'll start at bus stop ""source"" (you're not on any bus initially), and then you want to go to bus stop ""target"". You can only travel between bus stops by bus.

Returns the minimum number of buses that must be taken to get from `source` to `target`. Returns ""-1"" if not possible.


Example 1:
Input: routes = [[1,2,7],[3,6,7]], source = 1, target = 6
Output: 2
Explanation: The best strategy is to take the first bus to bus stop 7, then take the second bus to bus stop 6.


Example 2:
Input: routes = [[7,12],[4,5,15],[6],[15,19],[9,12,13]], source = 15, target = 12
Output: -1

constraint:
`1 <= routes.length <= 500`.

`1 <= routes[i].length <= 105`
All values ​​of `routes[i]` are unique.

`sum(routes[i].length) <= 105`
`0 <= route[i][j] < 106`
`0 <= source, target < 106`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have some 2D coordinates like ""(1, 3)"" or ""(2, 0.5)"". We then removed all commas, decimal points, and spaces and ended with the string ""S"". Return a list of strings representing all the possibilities of what our original coordinates could be.

Our original representation never has extra zeros, so we never start with ""00"", ""0.0"", ""0.00"", ""1.0"", ""001"", ""00.01"" or any other number that can be represented with fewer digits .Also, a decimal point in a number will never appear if it is preceded by at least one digit, so we never start with a number like "".1"".

The final answer list can be returned in any order. Also note that there is only one space between all coordinates in the final answer (appears after the comma.)

Example 1:
Input: ""(123)""
Output: [""(1, 23)"", ""(12, 3)"", ""(1.2, 3)"", ""(1, 2.3)""]

Example 2:
Input: ""(00011)""
Output: [""(0.001, 1)"", ""(0, 0.011)""]
explain:
0.0, 00, 0001, or 00.01 are not allowed.


Example 3:
Input: ""(0123)""
Output: [""(0, 123)"", ""(0, 12.3)"", ""(0, 1.23)"", ""(0.1, 23)"", ""(0.1, 2.3)"", ""(0.12, 3)"" ]

Example 4:
Input: ""(100)""
Output: [(10, 0)]
explain:
1.0 is not allowed.

notes:
`4 <= S.length <= 12`.

`S[0]` = ""("", `S[S.length - 1]` = "")"", the other elements in `S` are numbers.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We got ""head"", which is the head node of the linked list containing unique integer values.

We also get the list ""G"", which is a subset of the values ​​in the linked list.

Returns the number of connected components in `G`, two values ​​are connected if they appear consecutively in the linked list.


Example 1:
enter:
Header: 0->1->2->3
G = [0, 1, 3]
Output: 2
explain:
0 and 1 are connected, so [0, 1] and [3] are two connected components.


Example 2:
enter:
Header: 0->1->2->3->4
G = [0, 3, 1, 4]
Output: 2
explain:
0 is connected to 1, and 3 is connected to 4, so [0, 1] and [3, 4] are two connected components.

notes:
If `N` is the length of the linked list given by `head`, then `1 <= N <= 10000`.

The value of each node in the linked list will be in the range [0, N - 1].

`1 <= G.length <= 10000`.

`G` is a subset of all values ​​in the linked list.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your car starts at position 0 on an infinite number line and has a speed of +1. (Your car may go into negative position.)
Your car drives automatically based on a sequence of A (accelerate) and R (reverse) commands.

When you receive command ""A"", your car will do the following: `position += speed, speed *= 2`.

When you receive command ""R"", your car will do the following: ""speed=-1"" if your speed is positive, otherwise ""speed=1"". (Your position remains the same.)
For example, after command ""AAR"", your car will go to position 0->1->3->3, and your speed will go to 1->2->4->-1.

Now for some goal location, say the length of the shortest sequence of instructions to get there.


Example 1:
enter:
target = 3
Output: 2
explain:
The shortest instruction sequence is ""AA"".

Your position goes from 0->1->3.


Example 2:
enter:
target = 6
Output: 5
explain:
The shortest instruction sequence is ""AAARA"".

Your position goes from 0->1->3->7->7->6.

notes:
`1 <= target <= 10000`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `paragraph` and an array of strings containing the banned word `banned`, return the most frequently occurring non-banned word. It is guaranteed that at least one word is not banned and the answer is unique.

Words in `paragraph` are case-insensitive, answers should be returned in lowercase.


Example 1:
Input: paragraph = ""Bob hit a ball, hit BALL flies far after being hit."", banned = [""hit""]
Output: ""ball""
explain:
""hit"" occurs 3 times, but it is a stop word.

""ball"" occurs twice (with no other word), so it is the most frequent non-stop word in the paragraph.
Note that words in paragraphs are not case sensitive,
punctuation is ignored (even if adjacent to a word, e.g. ""ball""),
That ""hit"" isn't the answer, though it comes up more because it's banned.


Example 2:
Input: paragraph = ""a."", banned = []
output: ""one""

constraint:
`1 <= paragraph.length <= 1000`
A paragraph consists of English letters, spaces `' '` or one of the symbols: `""!?',;.""`.

`0 <= banned.length <= 100`
`1 <= banned[i].length <= 10`
`banned[i]` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sentence ""S"", consisting of words separated by spaces. Each word consists only of lowercase and uppercase letters.

We want to convert the sentence to ""Goat Latin"" (a fictional language similar to Pig Latin.)
The rules of Goat Latin are as follows:
If the word begins with a vowel (a, e, i, o, or u), append ""ma"" to the end of the word.

For example, the word ""apple"" becomes ""applema"".


If the word starts with a consonant (i.e. not a vowel), remove the first letter and append it to the end, then add ""ma"".

For example, the word ""goat"" becomes ""oatgma"".


Add a letter ""a"" to the end of each word at each word index in the sentence, starting with 1.

For example, the first word will have ""a"" added to the end, the second word will have ""aa"" added to the end, and so on.

Returns the last sentence representing the transition from ""S"" to Goat Latin.

Example 1:
Input: ""I speak Goat Latin""
Output: ""Imaa peaksmaaa oatGmaaaa atinLmaaaaa""

Example 2:
Input: ""The quick brown fox jumped over the lazy dog""
Output: ""heTmaa uickqmaaa rownbmaaaa oxfmaaaaa pumpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaaaa ogdmaaaaaaaaaa""
notes:
`S` contains only uppercase, lowercase, and spaces. There is exactly one space between each word.

`1 <= S.length <= 150`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Some people make friend requests. Given a list of their ages, `ages[i]` is the age of the ith person.
A will not request a friend from B (B != A) if any of the following conditions are met:
`age[B] <= 0.5 * age[A] + 7`
`age[B] > age[A]`
`age[B] > 100 && age[A] < 100`
Otherwise, A will friend request B.

Note that if A requests B, B does not necessarily request A. Also, people don't ask themselves to be friends.

What is the total number of friend requests?

Example 1:
Input: [16,16]
Output: 2
Description: 2 friends request each other.


Example 2:
Input: [16,17,18]
Output: 2
Explanation: Friend requests are made at 17 -> 16, 18 -> 17.


Example 3:
Input: [20,30,100,110,120]
Output: 3
Explanation: Friend requests are 110 -> 100, 120 -> 110, 120 -> 100.

notes:
`1 <= ages.length <= 20000`.

`1 <= age[i] <= 120`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have jobs: `difficulty[i]` is the difficulty of the `i`th job, and `profit[i]` is the profit of the `i`th job.
Now we have some workers. `worker[i]` is the ability of the `i`th worker, that is to say, this worker can only complete the work with difficulty of `worker[i]` at most.
Each worker can be assigned at most one job, but a job can be done multiple times.

For example, if 3 people try the same job that pays $1, then the total profit will be $3. If a worker can't do any work, his profit is $0.

What is our maximum profit?

Example 1:
Input: difficulty = [2,4,6,8,10], profit = [10,20,30,40,50], worker = [4,5,6,7]
Output: 100
Explanation: Workers are assigned jobs with difficulty [4,4,6,6] and they get [20,20,30,30] profit respectively.

notes:
`1 <= difficulty.length = profit.length <= 10000`
`1 <= worker.length <= 10000`
`difficulty[i], profit[i], worker[i]` in range `[1, 10^5]`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""n x n"" binary matrix ""grid"". You can change at most one ""0"" to ""1"".

Returns the size of the largest island in `grid` after applying this operation.

The island is a 4-way connection of 1 set.


Example 1:
Input: Grid = [[1,0],[0,1]]
Output: 3
Explanation: Turn a 0 into a 1 and connect two 1s to get an island with an area of ​​3.


Example 2:
Input: Grid = [[1,1],[1,0]]
Output: 4
Explanation: Change 0 to 1 and make the island bigger, only one island with area 4.


Example 3:
Input: Grid = [[1,1],[1,1]]
Output: 4
Explanation: There is no way to change any 0s to 1s, there is only one island of area 4.


constraint:
`n == grid. length`
`n == grid[i].length`
`1 <= n <= 500`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let us define a function countUniqueChars(s) that returns the number of unique characters on s, e.g. `""L""`, `""T""`, `""C""`, `""O""`,` if s = ""LEETCODE"" ""D""` are unique characters because they occur only once in `s`, so `countUniqueChars(s) = 5`.

In this problem given a string s, we need to return the sum of countUniqueChars(t), where t is a substring of s. Note that some substrings can be repeated, so in this case you have to count the repeated substrings too.

Since the answer can be very large, return the answer modulo 10^9 + 7.


Example 1:
Input: s = ""ABC""
Output: 10
Explanation: All possible substrings are: ""A"", ""B"", ""C"", ""AB"", ""BC"" and ""ABC"".

Each substring consists of only unique letters.

The sum of the lengths of all substrings is 1 + 1 + 1 + 2 + 2 + 3 = 10

Example 2:
Input: s = ""ABA""
Output: 8
Explanation: Same as example 1, except `countUniqueChars`(""ABA"") = 1.


Example 3:
Input: s = ""LEETCODE""
Output: 92

constraint:
`0 <= s.length <= 10^4`
`s` contains only uppercase English letters.",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer ""N"", how many consecutive positive integers can we write it as?

Example 1:
Input: 5
Output: 2
Explanation: 5 = 5 = 2 + 3

Example 2:
Input: 9
Output: 3
Explanation: 9 = 9 = 4 + 5 = 2 + 3 + 4

Example 3:
Input: 15
Output: 4
Explanation: 15 = 15 = 8 + 7 = 4 + 5 + 6 = 1 + 2 + 3 + 4 + 5
Note: `1 <= N <= 10^9`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a string s of lowercase letters, the letters form consecutive groups of identical characters.

For example, a string like s = ""abbxxxxzyy"" has the groups `""a""`, `""bb""`, `""xxxx""`, `""z""`, and `""yy""`.

Groups are identified by the interval ""[start, end]"", where ""start"" and ""end"" represent the start and end indices of the group (inclusive). In the example above, `""xxxx""` has the interval `[3,6]`.

A group is considered a large group if it has 3 or more characters.

Returns the interval of each large group sorted by start index in ascending order.


Example 1:
Input: s = ""abbxxxxzzy""
Output: [[3,6]]
Explanation: `""xxxx"" is the only `large group that starts at index 3 and ends at index 6.


Example 2:
Input: s = ""abc""
output: []
Explanation: We have groups ""a"", ""b"" and ""c"", none of which are large groups.


Example 3:
Input: s = ""abcdddeeeeaabbbcd""
Output: [[3,5],[6,9],[12,14]]
Explanation: The big groups are ""ddd"", ""eeee"" and ""bbb"".


Example 4:
Input: s = ""aba""
output: []

constraint:
`1 <= s.length <= 1000`
`s` contains only lowercase English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a personal information string ""S"", which might stand for an email address or a phone number.

We would like to block this personal information according to the following rules:
1. Email address:
We define a name as a string of ""length ≥ 2"", consisting only of lowercase letters ""a-z"" or uppercase letters ""A-Z"".

An email address begins with a name, followed by the sign ""@"", then the name, then a dot ""."", and then the name.
All email addresses are guaranteed to be valid and in the format ""name1@name2.name3"".
To block emails, all names must be converted to lowercase and all letters between the first and last letter of the name must be replaced with 5 asterisks ""*"".

2. Phone number:
A phone number is a string consisting only of the digits ""0-9"" or characters from the set ""{'+', '-', '(', ')', ' '}. You can assume a phone number contains 10 to 13 digits.

The last 10 digits form the local number, while the first 10 digits form the country code. Note that the country code is optional. We only want to expose the last 4 digits and block all others.

Local numbers should be formatted and masked as ""***-***-1111"", where ""1"" represents a public number.

To block a phone number with a country code, such as ""+111 111 111 1111"", we write it in the form of ""+***-***-***-1111"". sign and the first ""-"" sign before the local number should only be present if there is a country code. For example, a 12-digit phone number mask should start with `""+**-""`.

Note that extraneous characters that do not belong to the above format schemes, such as `""("", "")"", "" ""`, as well as redundant dashes or plus signs should be removed.

Returns the correct ""mask"" of the information provided.


Example 1:
Enter: ""LeetCode@LeetCode.com""
Output: ""l*****e@leetcode.com""
Explanation: All names are converted to lowercase, the middle letter
             The first and last letters of the name are replaced by 5 asterisks.

             Hence, ""leetcode"" -> ""l******e"".


Example 2:
Enter: ""AB@qq.com""
Output: ""a*****b@qq.com""
Instructions: There must be 5 asterisks between the first and last letter
             The name ""ab"". Thus, ""ab"" -> ""a*****b"".


Example 3:
Enter: ""1(234)567-890""
Output: ""***-***-7890""
Explanation: 10 digits in the phone number, indicating that all digits form a local number.


Example 4:
Enter: ""86-(10)12345678""
Output: ""+**-***-***-5678""
Description: 12 digits, 2 digits for country code, 10 digits for local number.
notes:
`S.length <= 40`.

Email must be at least 8 in length.

Phone number must be at least 10 in length.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an n x n binary matrix image, flip the image horizontally, then invert it, and return the resulting image.

Flipping an image horizontally means flipping each row of the image.

For example, flipping ""[1,1,0]"" horizontally results in ""[0,1,1]"".

Inverting the image means that every '0' is replaced by a '1' and every '1' is replaced by a '0'.

For example, reversing ""[0,1,1]"" results in ""[1,0,0]"".


Example 1:
Input: image = [[1,1,0],[1,0,1],[0,0,0]]
Output: [[1,0,0],[0,1,0],[1,1,1]]
Explanation: First reverse each row: [[0,1,1],[1,0,1],[0,0,0]].

Then, reverse the image: [[1,0,0],[0,1,0],[1,1,1]]

Example 2:
Input: Image = [[1,1,0,0],[1,0,0,1],[0,1,1,1],[1,0,1,0]]
Output: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]
Explanation: First reverse each row: [[0,0,1,1],[1,0,0,1],[1,1,1,0],[0,1,0,1]].

Then invert the image: [[1,1,0,0],[0,1,1,0],[0,0,0,1],[1,0,1,0]]

constraint:
`n == image.length`
`n == image[i].length`
`1 <= n <= 20`
`images[i][j]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For some string ""S"", we will perform some replacement operations, replacing groups of letters (not necessarily the same size) with new groups of letters.

Each replacement operation has ""3"" parameters: starting index ""i"", source word ""x"" and target word ""y"". The rule is that if `x` starts at position `i` in the original string `S`, then we will replace occurrences of `x` with `y`. If not, we do nothing.

For example, if we have `S = ""abcd""` and we have some replacement operation `i = 2, x = ""cd"", y = ""ffff""`, then since `""cd""` starts at position `2` in In the original string `S`, we replace it with `""ffff""`.

Using another example about `S = ""abcd""`, if we have a substitution operation `i = 0, x = ""ab"", y = ""eee""`, and another substitution operation `i = 2, x = "" ec"", y = ""ffff""`, the second operation does nothing, because in the original string `S[2] = 'c'`, it does not match `x[0] = 'e'`.

All these operations happen simultaneously. Replacements are guaranteed not to have any overlap: for example, `S = ""abc"", indexes = [0, 1], sources = [""ab"",""bc""]` is not a valid test case.


Example 1:
Input: S = ""abcd"", indexes = [0, 2], sources = [""a"", ""cd""], targets = [""eee"", ""ffff""]
Output: ""eeebffff""
explain:
""a"" starts at index 0 in S, so it is replaced by ""eee"".

""cd"" starts at index 2 in S, so it is replaced with ""ffff"".


Example 2:
Input: S = ""abcd"", indexes = [0, 2], sources = [""ab"",""ec""], targets = [""eee"",""ffff""]
Output: ""eeecd""
explain:
""ab"" starts at index 0 in S, so it is replaced with ""eee"".

""ec"" doesn't start at index 2 in the original S, so we do nothing.


constraint:
`0 <= S.length <= 1000`
`S` consists of lowercase English letters only.

`0 <= indexes.length <= 100`
`0 <= indexes[i] < S.length`
`sources.length == indexes.length`
`targets.length == indexes.length`
`1 <= sources[i].length, targets[i].length <= 50`
`sources[i]` and `targets[i]` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected, connected tree with ""N"" nodes labeled ""0...N-1"" and ""N-1"" ""edges"".

Edge ""i"" connects nodes ""edges[i][0]"" and ""edges[i][1]"".

Returns a list ans where ans[i] is the sum of the distances between node i and all other nodes.


Example 1:
Input: N = 6, edges = [[0,1],[0,2],[2,3],[2,4],[2,5]]
Output: [8,12,6,10,10,10]
explain:
Here's a graph of the given tree:
  0
 / \
1 2
   /|\
  3 4 5
We can see dist(0,1) + dist(0,2) + dist(0,3) + dist(0,4) + dist(0,5)
This equals 1 + 1 + 2 + 2 + 2 = 8. Therefore, answer[0] = 8, and so on.

Note: `1 <= N <= 10000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two images ""img1"" and ""img2"" of size ""n x n"", represented as binary square matrices of the same size. (A binary matrix has only 0 and 1 as values.)
We translate one image according to our choice (slide it left, right, up or down any number of units) and place it on top of another image. Afterwards, the overlap of this translation is the number of positions that have a 1 in both images.

(Note also that translations do not include rotations of any kind.)
What is the maximum possible overlap?

Example 1:
Input: img1 = [[1,1,0],[0,1,0],[0,1,0]], img2 = [[0,0,0],[0,1,1],[ 0,0,1]]
Output: 3
Explanation: We slide img1 1 unit to the right and 1 unit down.

The number of positions that are 1 in both images is 3. (shown in red)

Example 2:
Input: img1 = [[1]], img2 = [[1]]
Output: 1

Example 3:
Input: img1 = [[0]], img2 = [[0]]
output: 0

constraint:
`n == img1. length`
`n == img1[i].length`
`n == img2. length`
`n == img2[i].length`
`1 <= n <= 30`
`img1[i][j]` is either `0` or `1`.

`img2[i][j]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An axis-aligned rectangle is represented as a list ""[x1, y1, x2, y2]"", where ""(x1, y1)"" are the coordinates of its lower left corner and ""(x2, y2)"" are the coordinates of its upper right corner. Its top and bottom edges are parallel to the X axis, and its left and right edges are parallel to the Y axis.

Two rectangles overlap if their intersection area is positive. To be clear, two rectangles that only touch at corners or edges do not overlap.

Given two axis-aligned rectangles ""rec1"" and ""rec2"", return ""true"" if they overlap, and ""false"" otherwise.


Example 1:
Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
output: true

Example 2:
Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
output: error

Example 3:
Input: rec1 = [0,0,1,1], rec2 = [2,2,3,3]
output: error

constraint:
`rect1.length == 4`
`rect2.length == 4`
`-109 <= rec1[i], rec2[i] <= 109`
`rec1[0] <= rec1[2]` and `rec1[1] <= rec1[3]`
`rec2[0] <= rec2[2]` and `rec2[1] <= rec2[3]`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice plays the following game, loosely based on the card game ""21"".

Alice starts from ""0"" points, and when her points are less than ""K"" points, numbers are drawn. During each draw, she receives a random integer number of points from the range ""[1, W]"", where ""W"" is an integer. Each draw is independent and has an equal probability of outcome.

Alice stops drawing numbers when she gets a ""K"" or more. What is the probability that she gets an ""N"" score or less?

Example 1:
Input: N=10, K=1, W=10
Output: 1.00000
Explanation: Alice gets a card and stops.


Example 2:
Input: N=6, K=1, W=10
Output: 0.60000
Explanation: Alice gets a card and stops.

She scores at or below N = 6 out of 6 out of W = 10 possibilities.


Example 3:
Input: N=21, K=17, W=10
Output: 0.73278
notes:
`0 <= K <= N <= 10000`
`1 <= W <= 10000`
Answers are considered correct if they are within `10^-5` of the correct answer.

This question shortens the review time limit.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are N dominoes in a row, and we place each domino vertically.

In the beginning, we simultaneously push some dominoes to the left or right.

After every second, each domino falling to the left pushes the adjacent domino to the left.

Similarly, a domino falling to the right will push an adjacent domino standing on the right.

When a vertical domino falls from its sides, it stays still due to the balance of forces.

For the purposes of this question, we will consider that a falling domino does not exert additional force on a falling or already fallen domino.

Given a string ""S"" representing the initial state. `S[i] = 'L'`, if the i-th domino has been pushed to the left; `S[i] = 'R'`, if the i-th domino has been pushed to the right; `S[i] = '.'`, if the ith domino has not been pushed.

Returns a string representing the final state.

Example 1:
Enter: "".L.R...LR..L..""
Output: ""LL.RR.LLRRLL..""

Example 2:
Enter: ""RR.L""
Output: ""RR.L""
Explanation: The first domino exerts no additional force on the second domino.

notes:
`0 <= N <= 10^5`
The string ""dominoes"" contains only ""L"", ""R"" and "".""",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Two strings `X` and `Y` are similar if we can swap the two letters of `X` (in different positions) to make them equal to `Y`. Two strings ""X"" and ""Y"" are also similar if they are equal.

For example, ""tars"" is similar to ""rats"" (swapped at positions ""0"" and ""2""), ""rats"" is similar to ""arts"", but ""star"" is not similar to ""tars"", ""rats"" or ""arts"" .

Together, they form two connected groups by similarity: `{""tars"", ""rats"", ""arts""}` and `{""star""}`. Note that ""tars"" and ""arts"" belong to the same group, although they are not similar. Formally, each group is such that a word belongs to the group if and only if it is similar to at least one other word in the group.

We get a list of strings ""strs"" where each string in ""strs"" is an anagram of every other string in ""strs"". How many groups are there?

Example 1:
Input: strs = [""tars"",""rats"",""arts"",""star""]
Output: 2

Example 2:
Input: strs = [""omv"",""ovm""]
Output: 1

constraint:
`1 <= strs.length <= 300`
`1 <= strs[i].length <= 300`
`strs[i]` contains only lowercase letters.

All words in `strs` have the same length and are anagrams of each other.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A ""3 x 3"" magic square is a ""3 x 3"" grid filled with different numbers from ""1"" to ""9"" such that the sum of each row, each column, and both diagonals is the same.

Given a ""row x column"" ""grid"" of integers, how many ""3 x 3"" ""magic cube"" subgrids are there? (each subgrid is contiguous).


Example 1:
Input: grid = [[4,3,8,4],[9,5,1,9],[2,7,6,2]]
Output: 1
explain:
The subgrid below is a 3 x 3 magic square:
And this one is not:
In general, there is only one magic square within a given grid.


Example 2:
Input: Grid = [[8]]
output: 0

Example 3:
Input: Grid = [[4,4],[3,3]]
output: 0

Example 4:
Input: Grid = [[4,7,8],[9,5,1],[2,3,6]]
output: 0

constraint:
`row == grid. length`
`col == grid[i].length`
`1 <= rows, columns <= 10`
`0 <= grid[i][j] <= 15`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are ""N"" rooms and you start with room ""0"". Each room has a different number, 0, 1, 2, ..., N-1 , and each room may have some keys to access the next room.
Formally, each room `i` has a list of keys `rooms[i]`, and each key `rooms[i][j]` is `[0, 1, ..., N-1]` An integer in where `N = rooms.length`. The key `rooms[i][j] = v` opens room number `v`.

Initially, all rooms start locked (except room ""0"").
You can freely move back and forth between rooms.

Returns true if and only if you can enter each room.


Example 1:
Input: [[1],[2],[3],[]]
output: true
explain:
We start in room 0 and take key 1.

We then go to room 1 and get key 2.

Then we go to room 2 and get key 3.

Then we go to room 3. Since we can go to every room, we return true.


Example 2:
Input: [[1,3],[3,0,1],[2],[0]]
output: error
Explanation: We cannot enter room 2.

notes:
`1 <= rooms.length <= 1000`
`0 <= room[i].length <= 1000`
The total number of keys for all rooms can be up to '3000'.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string S of numbers, such as S = ""123456579"", we can split it into a Fibonacci-like sequence [123, 456, 579].
Formally, a Fibonacci-like sequence is a list ""F"" of non-negative integers such that:
`0 <= F[i] <= 2^31 - 1`, (that is, each integer conforms to a 32-bit signed integer type);
`F.length >= 3`;
and `F[i] + F[i+1] = F[i+2]` for all `0 <= i < F.length - 2`.

Also note that when splitting a string into parts, each part must not have extra leading zeros, unless the part itself is the number 0.

Returns any Fibonacci-like sequence split from `S`, or `[]` if this cannot be done.


Example 1:
Enter: ""123456579""
Output: [123,456,579]

Example 2:
Input: ""11235813""
Output: [1,1,2,3,5,8,13]

Example 3:
Input: ""112358130""
output: []
Explanation: This mission is impossible.


Example 4:
Enter: ""0123""
output: []
Explanation: Leading zeros are not allowed, so ""01"", ""2"", ""3"" are invalid.


Example 5:
Input: ""1101111""
Output: [110, 1, 111]
Explanation: The output [11, 0, 11, 11] will also be accepted.

notes:
`1 <= S.length <= 200`
`S` contains only numbers.",0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is an interaction problem.

Given a set of unique strings `wordlist`, where `wordlist[i]` is `6` letters long, and a word in that list is chosen as a `secret`.

You can call `Master.guess(word)` to guess a word. The guessed word should have type ""string"" and must come from the original list with ""6"" lowercase letters.

This function returns an ""integer"" type representing the number of times (value and position) your guess exactly matches the ""secret"" word. Also, it will return ""-1"" if your guess is not in the given word list.

For each test case, you have exactly 10 guesses to guess the word. At the end of any number of calls, if you have made 10 or fewer calls to Master.guess and at least one of those guesses is a secret, then you pass the test case.


Example 1:
Input: secret = ""acckzz"", wordlist = [""acckzz"",""ccbazz"",""eiowzz"",""abcczz""], numguesses = 10
Output: You guessed the password.
explain:
master.guess(""aaaaaa"") returns -1 because ""aaaaaa"" is not in the word list.

master.guess(""acckzz"") returns 6 because ""acckzz"" is secret and has all 6 matches.

master.guess(""ccbazz"") returns 3 because ""ccbazz"" has 3 matches.

master.guess(""eiowzz"") returns 2 because ""eiowzz"" has 2 matches.

master.guess(""abcczz"") returns 4 because ""abcczz"" has 4 matches.

We make 5 calls to master.guess, one of which is secret, so we pass the test case.


Example 2:
Input: secret = ""hamada"", wordlist = [""hamada"",""khaled""], numguesses = 10
Output: You guessed the password.

constraint:
`1 <= wordlist.length <= 100`
`wordlist[i].length == 6`
`wordlist[i]` consists of lowercase English letters.

All strings in `wordlist` are unique.

`secret` exists in `wordlist`.

`numguesses == 10`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, return `true` if they are equal when entered in an empty text editor. `'#'` represents the backspace character.

Note that the text will continue to be empty after you backspace the empty text.


Example 1:
Input: s = ""ab#c"", t = ""ad#c""
output: true
Explanation: Both s and t become ""ac"".


Example 2:
Input: s = ""ab##"", t = ""c#d#""
output: true
Explanation: Both s and t become """".


Example 3:
Input: s = ""a##c"", t = ""#a#c""
output: true
Explanation: Both s and t become ""c"".


Example 4:
Input: s = ""a#c"", t = ""b""
output: error
Explanation: s becomes ""c"" and t becomes ""b"".


constraint:
`1 <= s.length, t.length <= 200`
`s` and `t` contain only lowercase letters and `'#'` characters.

Follow up: Can you solve it in `O(n)` time and `O(1)` space?",0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You may recall that the array arr is a mountain array if and only if:
`arr.length >= 3`
There exists some index ""i"" (starting at 0) where ""0 < i < arr.length - 1"" such that:

`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`
`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`
Given an integer array arr , return the length of the longest subarray, i.e. a mountain. Returns ""0"" if there is no mountain subarray.


Example 1:
Input: arr = [2,1,4,7,3,2,5]
Output: 5
Explanation: The largest mountain is [1,4,7,3,2] with length 5.


Example 2:
Input: arr = [2,2,2]
output: 0
Explanation: There are no mountains.


constraint:
`1 <= arr.length <= 104`
`0 <= arr[i] <= 104`
follow up:
Can you solve it with only one pass?
Can you solve it in `O(1)` space?",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice has a hand of cards, given as an array of integers.

Now she wants to rearrange the cards into groups such that each group is of size ""W"" and consists of ""W"" consecutive cards.

Returns true if and only if she can.

Note: This question is the same as 1296: https://leetcode.com/problems/divide-array-in-sets-of-k-consecutive-numbers/

Example 1:
Input: hands = [1,2,3,6,2,3,4,7,8], W = 3
output: true
Explanation: Alice's hands can be rearranged as [1,2,3],[2,3,4],[6,7,8]

Example 2:
Input: hands = [1,2,3,4,5], W = 4
output: error
Explanation: Alice's hands cannot be rearranged into groups of 4.


constraint:
`1 <= hand.length <= 10000`
`0 <= hands[i] <= 10^9`
`1 <= W <= hand.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An undirected connected graph of N nodes (labeled ""0, 1, 2, ..., N-1"") is given as a ""graph"".

`graph.length = N` and `j != i` appear exactly once in the list `graph[i]` if and only if nodes `i` and `j` are connected.

Returns the length of the shortest path that visits each node. You can start and stop at any node, you can revisit nodes multiple times, and you can reuse edges.


Example 1:
Input: [[1,2,3],[0],[0],[0]]
Output: 4
Explanation: One possible path is [1,0,2,0,3]

Example 2:
Input: [[1],[0,2,4],[1,3,4],[2],[1,2]]
Output: 4
Explanation: One possible path is [0,1,4,2,3]
notes:
`1 <= graph.length <= 12`
`0 <= graph[i].length < graph.length`",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array, representing a row of ""seats"", where ""seats[i] = 1"" means the person sitting in the ""ith"" seat, ""seats[i] = 0"" means that the ""ith"" seat is Empty (0 indexed).

There must be at least one empty seat and at least one person sitting.

Alex wants to sit in a seat that maximizes the distance between him and the person closest to him.
Return the max distance to the closest person.


Example 1:
Input: Seats = [1,0,0,0,1,0,1]
Output: 2
explain:
If Alex is sitting in the second open seat (i.e. seats[2]), then the nearest person has a distance of 2.

If Alex is sitting in any other vacant seat, the nearest person has a distance of 1.

Therefore, the maximum distance to the nearest person is 2.


Example 2:
Input: seat = [1,0,0,0]
Output: 3
explain:
If Alex is sitting in the last seat (i.e. seats[3]), the closest person is 3 seats away.

This is the largest distance possible, so the answer is 3.


Example 3:
Input: seat = [0,1]
Output: 1

constraint:
`2 <= seats.length <= 2 * 104`
`seats[i]` is either `0` or `1`.

At least one seat is vacant.

At least one seat is occupied.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a (axis-aligned) list of ""rectangles"". Each `rectangle[i] = [xi1, yi1, xi2, yi2]`, where `(xi1, yi1)` is the coordinates of the bottom left corner and `(xi2, yi2)` is the coordinates of the top-th rectangle right corner.

Find the total area covered by all ""rectangles"" in the plane. Since the answer might be too large, return it modulo 109 + 7.


Example 1:
Input: Rectangle = [[0,0,2,2],[1,0,2,3],[1,0,3,1]]
Output: 6
Description: As shown in the picture.


Example 2:
Input: Rectangle = [[0,0,1000000000,1000000000]]
Output: 49
Explanation: The answer is 1018 modulo (109 + 7), which is (109)2 = (-7)2 = 49.


constraint:
`1 <= rectangles.length <= 200`
`rectangle[i].length = 4`
`0 <= rectangle[i][j] <= 109`
The total area covered by all rectangles will never exceed ""263 - 1"", so it fits in a 64-bit signed integer.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"In a set of N people (labeled ""0, 1, 2, ..., N-1""), each has a different amount of money and a different level of quietness.

For convenience, we will simply refer to the person labeled ""x"" as ""person 'x'"".

We would say `richer[i] = [x, y]` if person `x` must have more money than person `y`. Note that ""richer"" may only be a subset of valid observations.

Also, if x is quieter than q, we say quiet[x] = q.

Now, return `answer` where `answer[x] = y` if `y` is the least quiet person of all (ie the person `y` with the smallest `quiet[y]` value) who definitely has equal or More money than people `x`.


Example 1:
Input: richer = [[1,0],[2,1],[3,1],[3,7],[4,3],[5,3],[6,3]], quiet = [3,2,5,4,6,1,7,0]
Output: [5,5,2,5,4,5,6,7]
explain:
answer[0] = 5.

Person 5 is richer than person 3, person 3 is richer than person 1, person 3 is richer than person 0.

The only person who is quieter (lower quiet[x]) is person 7, but
It is unclear whether they have more money than person 0.

Answer[7] = 7.

Of all people with absolute wealth equal to or more than 7
(could be 3rd, 4th, 5th, 6th or 7th person), quietest person (lower quietness [x])
It is the seventh person.

Other answers could be filled in with similar reasoning.

notes:
`1 <= quiet.length = N <= 500`
`0 <= quiet[i] < N`, all `quiet[i]` are different.

`0 <= richer.length <= N * (N-1) / 2`
`0 <= richer[i][j] < N`
`richer[i][0] != richer[i][1]`
`richer[i]` are all different.

The observations in `richer` are all logically consistent.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We call an array an ""arr"" mountain if the following properties are met:
`arr.length >= 3`
There exists some i such that 0 < i < arr.length - 1 such that:

`arr[0] < arr[1] < ... arr[i-1] < arr[i]`
`arr[i] > arr[i+1] > ... > arr[arr.length - 1]`
Given an integer array arr that is guaranteed to be a mountain, return any i such that arr[0] < arr[1] < ... arr[i - 1] < arr[i] > arr[ i + 1] > ... > arr[arr. length - 1]`.


Example 1:
Input: arr = [0,1,0]
Output: 1

Example 2:
Input: arr = [0,2,1,0]
Output: 1

Example 3:
Input: arr = [0,10,5,2]
Output: 1

Example 4:
Input: arr = [3,4,5,1]
Output: 2

Example 5:
Input: arr = [24,69,100,99,79,78,67,36,26,19]
Output: 2

constraint:
`3 <= arr.length <= 104`
`0 <= arr[i] <= 106`
`arr` is guaranteed to be a mountain array.

Follow up: finding `O(n)` is easy, can you find a `O(log(n))` solution?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"""N"" cars go to the same destination along a single-lane road. Destination is more than ""Target"" miles away.

Each car ""i"" has a constant speed ""speed[i]"" (in miles per hour) and an initial position ""position[i]"" along the road towards a target mile.

A car can never overtake another car in front of it, but it can catch up to it and hit the crash at the same speed.

Ignore the distance between these two cars - assume they have the same position.

A fleet is a non-empty collection of cars traveling at the same location and at the same speed. Note that a car is also a fleet.

If a car happens to catch a convoy at its destination, it will still be counted as a convoy.

How many convoys will reach their destination?

Example 1:
Input: target=12, position=[10,8,0,5,3], velocity=[2,4,1,1,3]
Output: 3
explain:
Cars starting at 10 o'clock and 8 o'clock form a convoy and meet at 12 o'clock.

A car starting at 0 won't catch up to any other cars, so it's a convoy unto itself.

Cars starting at 5 and 3 form a convoy to meet at 6.

Note that no other cars meet these convoys before the destination, so the answer is 3.

notes:
`0 <= N <= 10^4`
`0 < target <= 10^6`
`0 < velocity[i] <= 10^6`
`0 <= position[i] < target`
All initial positions are different.",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Strings s1 and s2 are k similar (for some non-negative integer k) if we can swap the positions of two letters in s1 exactly k times such that the resulting string is equal to s2`.

Given two anagrams ""s1"" and ""s2"", return the smallest ""k"" for which ""s1"" and ""s2"" are similar to ""k"".


Example 1:
Input: s1 = ""ab"", s2 = ""ba""
Output: 1

Example 2:
Input: s1 = ""abc"", s2 = ""bca""
Output: 2

Example 3:
Input: s1 = ""abac"", s2 = ""baca""
Output: 2

Example 4:
Input: s1 = ""aabc"", s2 = ""abca""
Output: 2

constraint:
`1 <= s1.length <= 20`
`s2.length == s1.length`
`s1` and `s2` contain only lowercase letters from the set `{'a', 'b', 'c', 'd', 'e', ​​'f'}`.

`s2` is an anagram of `s1`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In the examination room, there are ""N"" seats in a row, numbered ""0,1,2,...,N-1"".

When students enter a room, they must sit in a seat that maintains the maximum distance from the nearest person. If there is more than one such seat, they sit in the lowest numbered seat. (Also, if the room is empty, the student sits in seat 0.)
Returns a class ExamRoom(int N) that exposes two functions: ExamRoom.seat() returns an int representing which seat the student is sitting in, and ExamRoom.leave(int p) representing which seat the student is sitting in. Seat number ""p"" now leaves the room. Any call to ExamRoom.leave(p) is guaranteed to have a student sitting in seat p.


Example 1:
Input: [""ExamRoom"",""seat"",""seat"",""seat"",""seat"",""leave"",""seat""], [[10],[],[],[],[],[ 4],[]]
Output: [null,0,9,4,2,null,5]
explain:
Exam Room (10) -> Empty
seat() -> 0, there is no one in the room, then the student sits in seat 0.

seat() -> 9, the student sits at the last seat number 9.

seat() -> 4, the student sits at the last seat number 4.

seat() -> 2, the student sits at the last seat number 2.

leave(4) -> empty
seat() -> 5, the student sits in the last seat number 5.

​​​​​​​​
notes:
`1 <= N <= 10^9`
`ExamRoom.seat()` and `ExamRoom.leave()` are called at most `10^4` times across all test cases.

Calling `ExamRoom.leave(p)` ensures that there is a student currently sitting at seat number `p`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"" of balanced parentheses, compute the string's score according to the following rules:
`()` scores 1
The score of `AB` is `A + B`, where A and B are balanced parenthesis strings.

The score of `(A)` is `2 * A`, where A is the string of balanced parentheses.


Example 1:
Input: ""()""
Output: 1

Example 2:
Input: ""(())""
Output: 2

Example 3:
Input: ""()()""
Output: 2

Example 4:
Input: ""(()()))""
Output: 6
notes:
`S` is a balanced parenthesis string containing only `(` and `)`.

`2 <= S.length <= 50`",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are N workers. The i-th worker has quality[i] and minimum wage expectation wage[i].

Now we want to hire exactly ""K"" workers to form a paid team. When employing a set of K workers, we must pay them wages according to the following rules:
Each worker in a paid group should be paid in proportion to its quality compared to other workers in the paid group.

Every worker in a pay group must be paid at least their minimum wage expectations.

Returns the minimum amount required to form a paid group that satisfies the above criteria.


Example 1:
Input: quality=[10,20,5], salary=[70,50,30], K=2
Output: 105.00000
Explanation: We pay 70 to worker 0 and 35 to worker 2.


Example 2:
Input: quality=[3,1,10,10,1], salary=[4,8,2,2,7], K=3
Output: 30.66667
Explanation: We pay 4 to worker 0 and 13.33333 to workers 2 and 3 respectively.
notes:
`1 <= K <= N <= 10000`, where `N = quality.length = wage.length`
`1 <= mass[i] <= 10000`
`1 <= salary[i] <= 10000`
Answers within 10^-5 of the correct answer will be considered correct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a special square room with a mirror on each of the four walls. There are receivers on each corner except the southwest corner, numbered ""0"", ""1"" and ""2"".

In a square room with walls of length ""p"", the laser beam from the southwest corner first meets the east wall at a distance of ""q"" from the ""0th"" receiver.

Returns the receptor number that the ray first encountered. (Guaranteed that the ray will eventually meet the receptor.)

Example 1:
Input: p = 2, q = 1
Output: 2
Explanation: The ray encounters receiver 2 the first time it is reflected back to the left wall.

notes:
`1 <= p <= 1000`
`0 <= q <= p`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `a` and `b`, return `true` if it is possible to swap the two letters in `a` such that the result is equal to `b`, otherwise return `false`.

Swapping letters is defined as taking two indices ""i"" and ""j"" (starting from 0) such that ""i != j"" and swapping the characters at ""a[i]"" and ""b[j]"". For example, swapping at indices ""0"" and ""2"" in ""abcd"" results in ""cbad"".


Example 1:
Input: a = ""ab"", b = ""ba""
output: true
Explanation: You can swap a[0] = 'a' and a[1] = 'b' to get ""ba"", which is equal to b.


Example 2:
Input: a = ""ab"", b = ""ab""
output: error
Explanation: The only letters that can be swapped are a[0] = 'a' and a[1] = 'b', resulting in ""ba"" != b.


Example 3:
Input: a = ""aa"", b = ""aa""
output: true
Explanation: You can swap a[0] = 'a' and a[1] = 'a' to get ""aa"", which is equal to b.


Example 4:
Input: a = ""aaaaaaabc"", b = ""aaaaaaacb""
output: true

constraint:
`1 <= a.length, b.length <= 2 * 104`
`a` and `b` consist of lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"At the lemonade stand, a glass of lemonade sells for $5.
Customers line up to buy from you, and order one at a time (in the order specified by `bills`).

Each customer will only buy one lemonade and pay with a ""$5"", ""$10"" or ""$20"" bill. You must provide each customer with the correct change so that the net transaction is that the customer pays $5.

Note that you don't have any change on hand at first.

Return true if and only if you can give each customer the correct change.


Example 1:
Input: [5,5,5,10,20]
output: true
explain:
From the first 3 customers, we collect three $5 bills in sequence.

From the fourth customer, we take the $10 bill and give back $5.

From the fifth customer, we were given a $10 bill and a $5 bill.

Since all customers got the correct change, we output true.


Example 2:
Input: [5,5,10]
output: true

Example 3:
Input: [10,10]
output: error

Example 4:
Input: [5,5,10,10,20]
output: error
explain:
From the first two customers, we collect two $5 bills.

For the next two customers, we take the $10 bill and refund the $5 bill.

For the last customer, we can't get the $15 back because we only have two $10 bills.

Since not every customer receives the correct change, the answer is wrong.

notes:
`0 <= bills.length <= 10000`
`bills[i]` will be `5`, `10` or `20`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have a 2D matrix ""A"" where each value is either ""0"" or ""1"".

Shifting involves selecting any row or column and switching every value in that row or column: changing all ""0""s to ""1"" and all ""1"" to ""0"".

After any number of shifts, each row of this matrix is ​​interpreted as a binary number, and the score of the matrix is ​​the sum of those numbers.

Return the highest score.


Example 1:
Input: [[0,0,1,1],[1,0,1,0],[1,1,0,0]]
Output: 39
explain:
Switch to [[1,1,1,1],[1,0,0,1],[1,1,1,1]].

0b1111 + 0b1001 + 0b1111 = 15 + 9 + 15 = 39
notes:
`1 <= A.length <= 20`
`1 <= A[0].length <= 20`
`A[i][j]` is either `0` or `1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Returns the length of the shortest, nonempty, contiguous subarray of ""A"" that sums to at least ""K"".

Returns ""-1"" if there is no non-empty subarray whose sum is at least ""K"".


Example 1:
Input: A = [1], K = 1
Output: 1

Example 2:
Input: A = [1,2], K = 4
Output: -1

Example 3:
Input: A = [2,-1,2], K = 3
Output: 3
notes:
`1 <= A.length <= 50000`
`-10^5 <= A[i] <= 10^5`
`1 <= K <= 10^9`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a binary tree (root node is ""root""), a ""target"" node, and an integer value ""K"".

Returns a list of values ​​for all nodes at a distance of ""K"" from the ""target"" node. Answers can be returned in any order.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], target = 5, K = 2
Output: [7,4,1]
explain:
Nodes with a distance of 2 from the target node (value 5)
Has values ​​7, 4, and 1.

Note that the inputs ""root"" and ""target"" are actually TreeNodes.

The above description of the input is just a serialization of these objects.

notes:
The given tree is non-empty.

Each node in the tree has a unique value ""0 <= node.val <= 500"".

The `target` node is a node in the tree.

`0 <= K <= 1000`.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a two-dimensional ""grid"". `"".""` is an empty cell, `""#""` is a wall, `""@""` is the starting point, (`""a""`, `""b""`, ...) are the keys, and (`""A""`, `""B""`, ...) are locks.

We start at the starting point, and a move consists of walking a space in one of the 4 cardinal directions. We can't step off the grid, and we can't walk inside a wall. If we walk past a key, we pick it up. We cannot get past the lock unless we have the corresponding key.

For some 1 <= K <= 6, the first ""K"" letter of the English alphabet in the grid has exactly one lowercase and one uppercase letter. This means that a lock has exactly one key, and a key corresponds to a lock; and that the letters used to represent keys and locks are chosen in the same order as the English alphabet.

Returns the minimum number of moves to fetch all keys. If not possible, return ""-1"".


Example 1:
Input: [""@.a.#"",""###.#"",""b.A.B""]
Output: 8

Example 2:
Input: [""@..aA"",""..B#."",""....b""]
Output: 6
notes:
`1 <= grid.length <= 30`
`1 <= grid[0].length <= 30`
`grid[i][j]` contains only `'.'`, `'#'`, `'@'`, `'a'-``'f``'` and `'A'-'F '`
The number of keys is in `[1, 6]`. Each key has a different letter and can only open one lock.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, the depth of each node is the shortest distance to the root.

Return the smallest subtree such that it contains all the deepest nodes in the original tree.

A node is called the deepest node if it has the greatest possible depth of any node in the entire tree.

A node's subtree is the tree consisting of that node plus all descendants of that node.

Note: This question is the same as 1123: https://leetcode.com/problems/lowest-common-ancestor-of-deepest-leaves/

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored yellow in the graph.

Nodes in blue are the deepest nodes in the tree.

Note that nodes 5, 3, and 2 contain the deepest nodes in the tree, but node 2 is the smallest subtree in it, so we return that.


Example 2:
input: root = [1]
output: [1]
Explanation: The root is the deepest node in the tree.


Example 3:
Input: root = [0,1,3,null,2]
output: [2]
Explanation: The deepest node in the tree is 2, and the valid subtrees are the subtrees of nodes 2, 1, and 0, but the subtree of node 2 is the smallest.


constraint:
The number of nodes in the tree will be in the range ""[1, 500]"".

`0 <= Node.val <= 500`
The value of a node in the tree is unique.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Find the smallest prime palindrome greater than or equal to 'N'.

Recall that a number is prime if it has only divisors of 1 and itself, and it is greater than 1.
For example, 2, 3, 5, 7, 11, and 13 are prime numbers.

Recall that a number is a palindrome if it reads the same way from left to right as it does from right to left.
For example, 12321 is a palindrome.


Example 1:
Input: 6
Output: 7

Example 2:
Input: 8
Output: 11

Example 3:
Input: 13
Output: 101
notes:
`1 <= N <= 10^8`
The answer is guaranteed to exist and is less than `2 * 10^8`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D integer array ""matrix"", return the transpose of ""matrix"".

The transpose of a matrix is ​​when the matrix flips its main diagonal, swapping the row and column indices of the matrix.


Example 1:
Input: Matrix = [[1,2,3],[4,5,6],[7,8,9]]
Output: [[1,4,7],[2,5,8],[3,6,9]]

Example 2:
Input: Matrix = [[1,2,3],[4,5,6]]
Output: [[1,4],[2,5],[3,6]]

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 1000`
`1 <= m * n <= 105`
`-109 <= matrix[i][j] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer n, find and return the longest distance between any two adjacent 1s in the binary representation of n. Returns ""0"" if there are no two adjacent ""1"".

Two ""1""s are adjacent if only a ""0"" separates them (there may be no ""0""). The distance between two ""1""s is the absolute difference between their bit positions. For example, the distance between two ""1""s in ""1001"" is 3.


Example 1:
Input: n = 22
Output: 2
Explanation: 22 is ""10110"" in binary.

The first pair of adjacent 1s is ""10110"", with a distance of 2.

The second pair of adjacent 1s is ""10110"", with a distance of 1.

The answer is the largest of these two distances, which is 2.

Note that ""10110"" is not a valid pair because there is a 1 separating the two underlined 1s.


Example 2:
Input: n = 5
Output: 2
Explanation: 5 is ""101"" in binary.


Example 3:
Input: n = 6
Output: 1
Explanation: 6 is ""110"" in binary.


Example 4:
Input: n = 8
output: 0
Explanation: 8 is ""1000"" in binary.

There aren't any adjacent pairs of 1s in the binary representation of 8, so we return 0.


Example 5:
Input: n = 1
output: 0

constraint:
`1 <= n <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays ""A"" and ""B"" of equal size, the advantage of ""A"" over ""B"" is the number of indices ""i"" that satisfy ""A[i] > B[i]"".

Return any permutation of ""A"" that maximizes its advantage over ""B"".


Example 1:
Input: A = [2,7,11,15], B = [1,10,4,11]
Output: [2,11,7,15]

Example 2:
Input: A = [12,24,8,32], B = [13,25,32,11]
Output: [24,32,8,12]
notes:
`1 <= A.length = B.length <= 10000`
`0 <= A[i] <= 10^9`
`0 <= B[i] <= 10^9`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The car travels from the start location to a destination that is ""target"" miles east of the start location.

There are gas stations along the way. Each `station[i]` represents a gas station located `station[i][0]` miles east of the starting location and has `station[i][1]` liters of gas.

The car starts out with an infinite gas tank initially containing 'startFuel' liters of fuel. It uses 1 liter of gasoline for every mile it travels.

When the car arrives at a gas station, it may stop to refuel, diverting all the gasoline from the station into the car.

What is the minimum number of gas stops the car must make in order to reach its destination? Returns ""-1"" if the destination cannot be reached.

Note that if the car arrives at a gas station with 0 gas, the car can still fill up there. If the remaining fuel is 0 when the car arrives at the destination, it is still considered to have arrived.


Example 1:
Input: target = 1, startFuel = 1, stations = []
output: 0
Explanation: We can reach our goal without refueling.


Example 2:
Input: target = 100, startFuel = 1, stations = [[10,100]]
Output: -1
Explanation: We can't reach the target (even the first gas station).


Example 3:
Input: target = 100, startFuel = 10, stations = [[10,60],[20,30],[30,30],[60,40]]
Output: 2
explain:
We start with 10 liters of fuel.

We drive to position 10 and consume 10 liters of fuel. We refuel from 0 liters to 60 liters of petrol.

Then, we drive from No. 10 to No. 60 (fuel consumption is 50 liters),
And refuel from 10 liters to 50 liters of petrol. Then we drive to the destination.

We refueled 2 times along the way, so we returned 2 times.

notes:
`1 <= target, startFuel, stations[i][1] <= 10^9`
`0 <= stations.length <= 500`
`0 < stations[0][0] < stations[1][0] < ... < stations[stations.length-1][0] < target`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Consider all the leaves of a binary tree, in order from left to right, and the values ​​of these leaves form a sequence of leaf values.

For example, in the tree given above, the sequence of leaf values ​​is `(6, 7, 4, 9, 8)`.

Two binary trees are considered to be leaf similar if their sequence of leaf values ​​is the same.

Returns ""true"" if and only if the two given trees with head nodes ""root1"" and ""root2"" are leaf-similar trees.


Example 1:
Input: root1 = [3,5,1,6,2,9,8,null,null,7,4], root2 = [3,5,1,6,7,4,2,null,null,null ,null,null,null,9,8]
output: true

Example 2:
Input: root1 = [1], root2 = [1]
output: true

Example 3:
Input: root1 = [1], root2 = [2]
output: error

Example 4:
Input: root1 = [1,2], root2 = [2,2]
output: true

Example 5:
Input: root1 = [1,2,3], root2 = [1,3,2]
output: error

constraint:
The number of nodes in each tree will be in the range ""[1, 200]"".

Both given trees have values ​​in the range ""[0, 200]"".",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The sequence ""X1, X2, ..., Xn"" is similar to the Fibonacci sequence if:
`n >= 3`
`Xi + Xi+1 = Xi+2` for all `i + 2 <= n`
Given a strictly increasing array ""arr"" consisting of sequences of positive integers, return the length of the longest Fibonacci-like subsequence of ""arr"". Returns ""0"" if not present.

Derives a subsequence from another sequence arr by removing any number of elements (including none) from arr without changing the order of the remaining elements. For example, `[3, 5, 8]` is a subsequence of `[3, 4, 5, 6, 7, 8]`.


Example 1:
Input: arr = [1,2,3,4,5,6,7,8]
Output: 5
Explanation: The longest Fibonacci-like subsequence: [1,2,3,5,8].


Example 2:
Input: arr = [1,3,7,11,12,14,18]
Output: 3
Explanation: The longest Fibonacci-like subsequence: [1,11,12], [3,11,14], or [7,11,18].


constraint:
`3 <= arr.length <= 1000`
`1 <= arr[i] < arr[i + 1] <= 109`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A robot on an infinite XY plane starts at the point ""(0, 0)"" and faces north. A robot can receive one of three possible types of ""commands"":
`-2`: turn left by `90` degrees,
`-1`: turn right by `90` degrees, or
`1 <= k <= 9`: move forward `k` units.

Some squares are ""obstacles"". The ith obstacle is located at the grid point obstacles[i] = (xi, yi) .

If the robot tries to move onto them, the robot will stay on the previous grid square (but will continue to follow the rest of the route.)
Returns the maximum Euclidean distance of the robot from the origin squared (i.e. if the distance is ""5"", it returns ""25"").

notes:
North indicates the +Y direction.

East means +X direction.

South represents the -Y direction.

West means -X direction.


Example 1:
Input: command = [4,-1,3], obstacle = []
Output: 25
Explanation: The robot starts at (0, 0):
1. Move 4 units north to (0, 4).

2. Turn right.

3. Move 3 units east to (3, 4).

The farthest point from the origin is (3, 4), which is 32 + 42 = 25 units.


Example 2:
Input: command = [4,-1,4,-2,4], obstacle = [[2,4]]
Output: 65
Explanation: The robot starts at (0, 0):
1. Move 4 units north to (0, 4).

2. Turn right.

3. Move 1 unit east, blocked by an obstacle at (2, 4), the robot is at (1, 4).

4. Turn left.

5. Move 4 units north to (1, 8).

The farthest point from the origin is (1, 8), which is 12 + 82 = 65 units.


constraint:
`1 <= commands.length <= 104`
`commands[i]` is one of the values ​​in the list `[-2,-1,1,2,3,4,5,6,7,8,9]`.

`0 <= obstacles. length <= 104`
`-3 * 104 <= xi, yi <= 3 * 104`
The answer is guaranteed to be less than ""231"".",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Coco likes to eat bananas. There are `n` piles of bananas, and the `ith`th pile has `piles[i]` bananas. The guard has left and will be back in ""h"" hours.

Koko can decide that she eats bananas at a rate of ""k"" per hour. Every hour, she chooses a bunch of bananas, and eats `k` bananas from that pile. If the pile has fewer than `k` bananas, she will eat all of them and will not eat any more bananas for an hour.

Koko likes to eat slowly, but still wants to eat all the bananas before the guards come back.

Return the smallest integer `k` such that she can eat all bananas in `h` hours.


Example 1:
Input: piles = [3,6,7,11], h = 8
Output: 4

Example 2:
Input: piles = [30,11,23,4,20], h = 5
Output: 30

Example 3:
Input: Stakes = [30,11,23,4,20], h = 6
Output: 23

constraint:
`1 <= piles. length <= 104`
`piles.length <= h <= 109`
`1 <= heap[i] <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty singly linked list with head node ""head"", return the middle node of the linked list.

If there are two intermediate nodes, return the second intermediate node.


Example 1:
Input: [1,2,3,4,5]
Output: Node 3 in this list (serialization: [3,4,5])
The node value returned is 3. (Judge's serialization for this node is [3,4,5]).

Note that we return a ListNode object ans such that:
ans.val = 3, ans.next.val = 4, ans.next.next.val = 5, ans.next.next.next = NULL.


Example 2:
Input: [1,2,3,4,5,6]
Output: Node 4 in this list (serialization: [4,5,6])
Since the list has two middle nodes with values ​​3 and 4, we return the second one.

notes:
The number of nodes in the given list will be between '1' and '100'.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alex and Lee play a game with a pile of rocks. A row of even piles, each pile has a positive integer number of stones piles[i].

The goal of the game is to end with the most stones. The total number of stones is odd, so there is no tie.

Alex and Lee take turns, with Alex starting first. Each round, a player takes the entire pile of stones from the beginning or end of the row. This continues until there are no more piles, at which point the person with the most stones wins.

Assuming Alex and Lee play best, return true if and only if Alex wins the game.


Example 1:
Input: Stakes = [5,3,4,5]
output: true
explain:
Alex starts first and can only take the first 5 or the last 5.

Let's say he takes the first 5, so the row becomes [3, 4, 5].

If Lee takes 3, the board is [4, 5] and Alex takes 5 to win by 10 points.

If Lee takes the last 5, the board is [3, 4] and Alex wins with 4 for 9 points.

This shows that taking the top 5 is a winning move for Alex, so we return true.


constraint:
`2 <= piles. length <= 500`
`piles.length` is an even number.

`1 <= heap[i] <= 500`
`sum(piles)` is odd.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a set of n members, and a list of various crimes they may have committed. The `ith` crime yields `profit[i]` and requires the participation of `group[i]` members. If a member is involved in one crime, that member cannot be involved in another.

Let us call any subset of these crimes that yields at least ""minProfit"" profit a profitable scheme, and the total number of members participating in this subset of crimes is at most ""n"".

Returns the number of options that can be selected. Since the answer can be very large, return modulo 109 + 7 .


Example 1:
Input: n = 5, minProfit = 3, group = [2,2], profit = [2,3]
Output: 2
Explanation: For a profit of at least 3, the group could commit crimes 0 and 1, or only commit crime 1.

There are 2 options in total.


Example 2:
Input: n=10, minProfit=5, group=[2,3,5], profit=[6,7,8]
Output: 7
Explanation: For a profit of at least 5, the group can commit any crime as long as they commit one.

There are 7 possible scenarios: (0), (1), (2), (0,1), (0,2), (1,2) and (0,1,2).


constraint:
`1 <= n <= 100`
`0 <= minimum profit <= 100`
`1 <= group.length <= 100`
`1 <= group[i] <= 100`
`profit.length == group.length`
`0 <= profit[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An encoded string ""S"" is given. To find the decoded string and write it to tape, the encoded string is read one character at a time, and the following steps are performed:
If the character read is a letter, write that letter to the tape.

If the character read is a number (such as `d`), then the entire current tape is rewritten a total of `d-1` times.

Now for some encoded string ""S"" and index ""K"", find and return the ""K""th letter (with index 1) in the decoded string.


Example 1:
Input: S = ""leet2code3"", K = 10
Output: ""o""
explain:
The decoded string is ""leetleetcodeleetleetcodeleetleetcode"".

The 10th letter in the string is ""o"".


Example 2:
Input: S = ""ha22"", K = 5
Output: ""h""
explain:
The decoded string is ""hahahaha"". The 5th letter is ""h"".


Example 3:
Input: S = ""a23456789999999999999999"", K = 1
output: ""one""
explain:
The decoded string is ""a"" repeated 8301530446056247680 times. The first letter is ""a"".


constraint:
`2 <= S.length <= 100`
`S` will only contain lowercase letters and numbers `2` through `9`.

`S` starts with a letter.

`1 <= K <= 10^9`
It is guaranteed that `K` is less than or equal to the length of the decoded string.

The decoded string is guaranteed to be less than 2^63 letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array people, where people[i] is the weight of the ith person, and an infinite number of boats, where each boat has a maximum weight of limit. Each boat can carry up to two people at the same time, provided that the sum of the weights of these people is at most the ""limit"".

Returns the minimum number of ships carrying each given person.


Example 1:
Input: people = [1,2], limit = 3
Output: 1
Description: 1 ship (1, 2)

Example 2:
Input: people = [3,2,2,1], limit = 3
Output: 3
Explanation: 3 ships (1, 2), (2) and (3)

Example 3:
Input: people = [3,5,3,4], limit = 5
Output: 4
Description: 4 ships (3), (3), (4), (5)

constraint:
`1 <= people.length <= 5 * 104`
`1 <= people[i] <= limit <= 3 * 104`",0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get an undirected graph (the ""original graph"") with ""n"" nodes labeled ""0"" to ""n - 1"". You decide to subdivide each edge in the graph into chains of nodes, with varying numbers of new nodes between each edge.

The graph is given as a two-dimensional array of ""edges"", where ""edges[i] = [ui, vi, cti]"" means that there is an edge between the nodes ""ui"" and ""vi"" in the original graph, and ""cnti `` is the total number of new nodes to subdivide the edge into. Note that `cnti == 0` means you will not subdivide edges.

To subdivide edge ""[ui, vi]"", replace it with ""(cnti + 1)"" new edge and ""cnti"" new node. The new nodes are `x1`, `x2`, ..., `xcnti`, the new edges are `[ui, x1]`, `[x1, x2]`, `[x2, x3]`, . .., `[xcnti+1, xcnti]`, `[xcnti, vi]`.

In this new graph, you want to know how many nodes are reachable from node ""0"", and a node is reachable if the distance is ""maxMoves"" or less.

Given the original graph and 'maxMoves', return the number of nodes reachable from node '0' in the new graph.


Example 1:
Input: edges = [[0,1,10],[0,2,1],[1,2,2]], maxMoves = 6, n = 3
Output: 13
Explanation: The edge subdivision is shown in the picture above.

Accessible nodes are highlighted in yellow.


Example 2:
Input: edges = [[0,1,4],[1,2,6],[0,2,8],[1,3,1]], maxMoves = 10, n = 4
Output: 23

Example 3:
Input: edges = [[1,2,4],[1,4,5],[1,3,1],[2,3,4],[3,4,5]], maxMoves = 17, n = 5
Output: 1
Explanation: Node 0 is disconnected from the rest of the graph, so only node 0 is accessible.


constraint:
`0 <= edges.length <= min(n * (n - 1) / 2, 104)`
`edge[i].length == 3`
`0 <= ui < vi < n`
There are no multiple edges in the graph.

`0 <= cnti <= 104`
`0 <= maxMoves <= 109`
`1 <= n <= 3000`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two sentences ""A"" and ""B"". (A sentence is a string of space-separated words. Each word contains only lowercase letters.)
A word is uncommon if it appears only once in one sentence but not in another.

Returns a list of all uncommon words.
You can return the list in any order.


Example 1:
Input: A = ""This apple is sweet"", B = ""This apple is sour""
Output: [""sweet"", ""sour""]

Example 2:
Input: A = ""Apple Apple"", B = ""Banana""
Output: [""banana""]
notes:
`0 <= A.length <= 200`
`0 <= B.length <= 200`
Both `A` and `B` contain only spaces and lowercase letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2D grid with ""R"" rows and ""C"" columns, we start with ""(r0, c0)"" facing east.

Here, the northwest corner of the grid is on the first row and column, and the southeast corner of the grid is on the last row and column.

We now visit every location in this grid in a clockwise spiral.
Whenever we move outside the grid boundary, we will continue to walk outside the grid (but may return to the grid boundary later.)
Eventually, we reach all the ""R*C"" spaces of the grid.

Returns a list of coordinates representing grid locations, in order of access.


Example 1:
Input: R=1, C=4, r0=0, c0=0
Output: [[0,0],[0,1],[0,2],[0,3]]

Example 2:
Input: R=5, C=6, r0=1, c0=4
Output: [[1,4],[1,5],[2,5],[2,4],[2,3],[1,3],[0,3],[0,4] ,[0,5],[3,5],[3,4],[3,3],[3,2],[2,2],[1,2],[0,2],[ 4,5],[4,4],[4,3],[4,2],[4,1],[3,1],[2,1],[1,1],[0, 1],[4,0],[3,0],[2,0],[1,0],[0,0]]
notes:
`1 <= R <= 100`
`1 <= C <= 100`
`0 <= r0 < R`
`0 <= c0 < C`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of ""N"" individuals (numbered ""1, 2, ..., N""), we want to divide each individual into two groups of arbitrary size.

Everyone probably doesn't like some other people and they shouldn't be in the same group.
Formally, if `dislikes[i] = [a, b]`, it means that it is not allowed to put people numbered `a` and `b` in the same group.

Returns true if and only if everyone can be split into two groups in this way.


Example 1:
Input: N = 4, dislike = [[1,2],[1,3],[2,4]]
output: true
Explanation: group1 [1,4], group2 [2,3]

Example 2:
Input: N = 3, Dislike = [[1,2],[1,3],[2,3]]
output: error

Example 3:
Input: N = 5, dislikes = [[1,2],[2,3],[3,4],[4,5],[1,5]]
output: error

constraint:
`1 <= N <= 2000`
`0 <= dislikes. length <= 10000`
`dislike[i].length == 2`
`1 <= dislike[i][j] <= N`
`dislike[i][0] < dislike[i][1]`
There is no `i != j` `dislikes[i] == dislikes[j]`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given ""k"" identical eggs, you can enter a building with ""n"" floors, labeled ""1"" to ""n"".

You know that there exists a floor `f` where `0 <= f <= n` such that any egg that falls on a floor above `f` breaks, and any egg that falls on or below a floor `f` does not will break.

At each step, you can take an unbroken egg and drop it from any floor `x` (where `1 <= x <= n`). If the egg breaks, you can no longer use it. However, if the egg doesn't crack, you can reuse it in a later move.

Returns the minimum number of moves you need to determine with certainty what the value of ""f"" will be.


Example 1:
Input: k=1, n=2
Output: 2
explain:
Drop the eggs from the 1st floor. If the egg breaks, we know f = 0.

Otherwise, drop the egg from the 2nd floor. If it breaks, we know f = 1.

If it doesn't break, then we know f = 2.

Therefore, we need at least 2 steps to determine what the value of f is.


Example 2:
Input: k = 2, n = 6
Output: 3

Example 3:
Input: k = 3, n = 14
Output: 4

constraint:
`1 <= k <= 100`
`1 <= n <= 104`",0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob have candies of different sizes: `A[i]` is the size of Alice's i-th candy, and `B[j]` is the size of the j-th candy Bob owns.

Because they are friends, they want to exchange one candy each, so that after the exchange, their total candy is the same. (The total amount of candy a person has is the sum of the sizes of the candy pieces they have.)
Returns an integer array ans where ans[0] is the size of the candy piece Alice must exchange and ans[1] is the size of the candy piece Bob must exchange.

If there are multiple answers, you can return any of them. Guaranteed to have an answer.


Example 1:
Input: A = [1,1], B = [2,2]
output: [1,2]

Example 2:
Input: A = [1,2], B = [2,3]
output: [1,2]

Example 3:
Input: A = [2], B = [1,3]
output: [2,3]

Example 4:
Input: A = [1,2,5], B = [2,4]
Output: [5,4]
notes:
`1 <= A.length <= 10000`
`1 <= B.length <= 10000`
`1 <= A[i] <= 100000`
`1 <= B[i] <= 100000`
It is guaranteed that Alice and Bob have different total candies.

Guaranteed to have an answer.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Returns any binary tree that matches the given preorder and postorder traversals.

Iterate over the values ​​in ""pre"" and ""post"" that are different positive integers.


Example 1:
Input: pre = [1,2,4,5,3,6,7], post = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
notes:
`1 <= pre.length == post.length <= 30`
Both `pre[]` and `post[]` are permutations of `1, 2, ..., pre.length`.

Guaranteed to have an answer. If multiple answers exist, you can return any of them.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a list `words` and a `pattern`, and you want to know which words in `words` match the pattern.

A word is matched against the pattern if there is a permutation of the letter `p` such that after replacing each letter `x` in the pattern with `p(x)` we get the desired word.

(Recall that the arrangement of letters is a letter-to-letter bijection: each letter maps to another letter, and no two letters map to the same letter.)
Return a list of words in `words` that match the given pattern.
You can return answers in any order.


Example 1:
Input: words = [""abc"",""deq"",""mee"",""aqq"",""dkd"",""ccc""], pattern = ""abb""
Output: [""mee"",""aqq""]
Explanation: ""mee"" matches the pattern because there is a permutation {a -> m, b -> e, ...}.
""ccc"" does not match the pattern because {a -> c, b -> c, ...} is not a permutation,
Because a and b map to the same letter.

notes:
`1 <= words.length <= 50`
`1 <= pattern.length = words[i].length <= 20`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""A"", consider all non-empty subsequences of ""A"".

For any sequence S, let the width of S be the difference between the largest and smallest elements of S.

Returns the sum of the widths of all subsequences of A.
Since the answer can be very large, return the answer modulo 10^9 + 7.


Example 1:
Input: [2,1,3]
Output: 6
explain:
The subsequence is [1], [2], [3], [2,1], [2,3], [1,3], [2,1,3].

The corresponding widths are 0, 0, 0, 1, 1, 2, 2.

The sum of these widths is 6.

notes:
`1 <= A.length <= 20000`
`1 <= A[i] <= 20000`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings ""A"".

Moving to ""S"" involves swapping any two even-indexed characters of ""S"", or swapping any two odd-indexed characters of ""S"".

Two strings ""S"" and ""T"" are specially equivalent if ""S == T"" after moving over ""S"" any number of times.

For example, `S = ""zzxy""` and `T = ""xyzz""` are special equivalent, because we can perform the shift `""zzxy"" -> ""xzzy"" -> ""xyzz""` to swap `S[0] ` and `S[2]`, then `S[1]` and `S[3]`.

Now, the set of special equivalent strings from `A` is a non-empty subset of A such that:
Each pair of strings in the group is specially equivalent, and;
The group is maximally possible (i.e., no string S is not in the group, so S is special, equal to every string in the group)
Returns the number of special equivalent string groups from ""A"".


Example 1:
Input: [""abcd"", ""cdab"", ""cbad"", ""xyzz"", ""zzxy"", ""zzyx""]
Output: 3
explain:
One set is [""abcd"", ""cdab"", ""cbad""] because they are all pairwise special equivalent and none of the other strings are pairwise special equivalent.

The other two groups are [""xyzz"", ""zzxy""] and [""zzyx""]. Note in particular that ""zzxy"" is not the same as ""zzyx"".


Example 2:
Input: [""abc"",""acb"",""bac"",""bca"",""cab"",""cba""]
Output: 3
notes:
`1 <= A.length <= 1000`
`1 <= A[i].length <= 20`
All `A[i]` have the same length.

All `A[i]` contain only lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return a list of all possible complete binary trees containing ""n"" nodes. Every node of every tree in the answer must have `Node.val == 0`.

Each element of the answer is the root node of a possible tree. You can return the final list of trees in any order.

A full binary tree is a binary tree in which each node has exactly ""0"" or ""2"" children.


Example 1:
Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0, 0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null, empty,0,0]]

Example 2:
Input: n = 3
Output: [[0,0,0]]

constraint:
`1 <= n <= 20`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a stack-like data structure, push elements into the stack, and pop the element with the most occurrences from the stack.

Implement the ""FreqStack"" class:
`FreqStack()` constructs an empty frequency stack.

`void push(int val)` pushes the integer `val` onto the stack.

`int pop()` removes and returns the most frequently occurring element from the stack.


If the most frequent element is tied, remove and return the element closest to the top of the stack.


Example 1:
enter
[""FreqStack"", ""push"", ""push"", ""push"", ""push"", ""push"", ""push"", ""pop"", ""pop"", ""pop"", ""pop""]
[[], [5], [7], [5], [7], [4], [5], [], [], [], []]
output
[empty, empty, empty, empty, empty, empty, empty, 5, 7, 5, 4]
explain
FreqStack freqStack = new FreqStack();
freqStack.push(5); // stack is [5]
freqStack.push(7); // stack is [5,7]
freqStack.push(5); // stack is [5,7,5]
freqStack.push(7); // stack is [5,7,5,7]
freqStack.push(4); // stack is [5,7,5,7,4]
freqStack.push(5); // stack is [5,7,5,7,4,5]
freqStack.pop(); // Return 5, because 5 occurs most frequently. The stack becomes [5,7,5,7,4].

freqStack.pop(); // returns 7, because 5 and 7 appear most frequently, but 7 is closest to the top. The stack becomes [5,7,5,4].

freqStack.pop(); // Return 5, because 5 occurs most frequently. The stack becomes [5,7,4].

freqStack.pop(); // Returns 4 because 4, 5, and 7 appear most frequently, but 4 is closest to the top. The stack becomes [5,7].


constraint:
`0 <= value <= 109`
At most there will be `2 * 104` calls to `push` and `pop`.

Make sure there is at least one element in the stack before calling `pop`.",0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An array is monotonic if it is monotonically increasing or monotonically decreasing.

An array ""A"" is monotonically increasing if ""A[i] <= A[j]"" for all ""i <= j"". An array ""A"" is monotonically decreasing if ""A[i] >= A[j]"" for all ""i <= j"".

Returns True if and only if the given array ""A"" is monotonic.


Example 1:
Input: [1,2,2,3]
output: true

Example 2:
Input: [6,5,4,4]
output: true

Example 3:
Input: [1,3,2]
output: error

Example 4:
Input: [1,2,4,5]
output: true

Example 5:
Input: [1,1,1]
output: true
notes:
`1 <= A.length <= 50000`
`-100000 <= A[i] <= 100000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree, rearrange the tree in order such that the leftmost node in the tree is now the root of the tree, and each node has no left children and only one right child.


Example 1:
Input: root = [5,3,6,2,4,null,8,1,null,null,null,7,9]
Output: [1,null,2,null,3,null,4,null,5,null,6,null,7,null,8,null,9]

Example 2:
Input: root = [5,1,7]
Output: [1,null,5,null,7]

constraint:
The number of nodes in a given tree will be in the range ""[1, 100]"".

`0 <= Node.val <= 1000`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an array ""arr"" of non-negative integers.

For each (contiguous) subarray `sub = [arr[i], arr[i + 1], ..., arr[j]]` (where `i <= j`), we take all subarrays The bitwise OR of the elements in `sub`, yielding a result `arr[i] | reach[i + 1] | ... | reach[j]`.

Returns the number of possible results. Multiple occurrences are counted only once in the final answer

Example 1:
input: arr = [0]
Output: 1
Explanation: There is only one possible outcome: 0.


Example 2:
Input: arr = [1,1,2]
Output: 3
Explanation: The possible subarrays are [1], [1], [2], [1, 1], [1, 2], [1, 1, 2].

These produce results 1, 1, 2, 1, 3, 3.

There are 3 unique values, so the answer is 3.


Example 3:
Input: arr = [1,2,4]
Output: 6
Explanation: The possible outcomes are 1, 2, 3, 4, 6, and 7.


constraint:
`1 <= nums.length <= 5 * 104`
`0 <= nums[i] <= 109`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A lowercase string ""S"" is given. Then, we can make any number of moves.

At each step, we select one of the first `K` letters (from the left), remove it, and put it at the end of the string.

Returns the lexicographically smallest string we could have after any number of moves.


Example 1:
Input: S = ""cba"", K = 1
Output: ""acb""
explain:
In the first step, we move the first character (""c"") to the end, resulting in the string ""bac"".

In the second step, we move the first character (""b"") to the end to get the final result ""acb"".


Example 2:
Input: S = ""baaca"", K = 3
Output: ""aaabc""
explain:
In the first step, we move the first character (""b"") to the end, resulting in the string ""aacab"".

In the second step, we move the 3rd character (""c"") to the end to get the final result ""aaabc"".

notes:
`1 <= K <= S.length <= 1000`
`S` contains only lowercase letters.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an iterator over a run-length encoded sequence.

Iterators are initialized by `RLEIterator(int[] A)`, where `A` is the run-length encoding of some sequence. More specifically, for all even `i`, `A[i]` tells us how many times the non-negative integer value `A[i+1]` repeats in the sequence.

Iterators support one function: `next(int n)`, which exhausts the next `n` elements (`n >= 1`) and returns the last element exhausted in this way. `next` returns `-1` if there are no elements left to exhaust.

For example, we start with ""A = [3,8,0,9,2,5]"", which is the run-length encoding of the sequence ""[8,8,8,5,5]"". This is because the sequence can be read as ""three eights, zero nines, two fives"".


Example 1:
Input: [""RLEIterator"",""next"",""next"",""next"",""next""], [[3,8,0,9,2,5]],[2],[1],[1 ],[2]]
Output: [null,8,8,5,-1]
explain:
RLEIterator is initialized with RLEIterator([3,8,0,9,2,5]) .

This maps to the sequence [8,8,8,5,5].

Then call RLEIterator.next 4 times:
.next(2) exhausts 2 items of the sequence, returns 8. The remaining sequence is now [8, 5, 5].

.next(1) exhausts 1 items of the sequence, returns 8. The remaining sequence is now [5, 5].

.next(1) exhausts 1 items of the sequence, returning 5. The remaining sequence is now [5].

.next(2) exhausts 2 items, returns -1. This is because the first term exhausted is 5,
But the second term does not exist. Since the last item exhaustion does not exist, we return -1.

notes:
`0 <= A.length <= 1000`
`A.length` is an even number.

`0 <= A[i] <= 10^9`
Call RLEIterator.next(int n) up to 1000 times per test case.

Every call to `RLEIterator.next(int n)` will have `1 <= n <= 10^9`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write a ""StockSpanner"" class that collects daily quotes for some stock and returns the span of that stock's price for that day.

The span of today's stock price is defined as the maximum number of consecutive days in which the stock price is less than or equal to today's price (calculated backwards from today).

For example, if the stock price for the next 7 days is ""[100, 80, 60, 70, 60, 75, 85]"", the stock span would be ""[1, 1, 1, 2, 1 , 4, 6]` .


Example 1:
Input: [""StockSpanner"",""next"",""next"",""next"",""next"",""next"",""next"",""next""], [[],[100],[80],[60 ],[70],[60],[75],[85]]
Output: [null,1,1,1,2,1,4,6]
explain:
First, initialize S = StockSpanner(). Then:
S.next(100) is called and returns 1,
S.next(80) is called and returns 1,
S.next(60) is called and returns 1,
S.next(70) is called and returns 2,
S.next(60) is called and returns 1,
S.next(75) is called and returns 4,
S.next(85) is called and returns 6.

Note that (for example) S.next(75) returns 4 because the last 4 prices
(including today's price of 75) are lower than or equal to today's price.

notes:
A call to ""StockSpanner.next(int price)"" will have ""1 <= price <= 10^5"".

Each test case calls StockSpanner.next up to 10000 times.

There are at most 150000 calls to `StockSpanner.next` across all test cases.

The total time limit for this problem was reduced by 75% for C++ and 50% for all other languages.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of ""numbers"" sorted in non-decreasing order. You can use each ""digits[i]"" as many times as you want to write the digits. For example, if digits = ['1','3','5']`, we can write numbers such as '13', '551' and '1351315'.

Returns the number of positive integers less than or equal to the given integer 'n' that can be generated.


Example 1:
Input: number = [""1"",""3"",""5"",""7""], n = 100
Output: 20
explain:
The 20 numbers that can be written are:
1, 3, 5, 7, 11, 13, 15, 17, 31, 33, 35, 37, 51, 53, 55, 57, 71, 73, 75, 77.


Example 2:
Input: number = [""1"",""4"",""9""], n = 1000000000
Output: 29523
explain:
We can write 3 one-digit numbers, 9 two-digit numbers, 27 three-digit numbers,
81 four-digit numbers, 243 five-digit numbers, 729 six-digit numbers,
2187 seven-digit numbers, 6561 eight-digit numbers, and 19683 nine-digit numbers.

In total, 29523 integers can be written using the numeric array.


Example 3:
Input: digits = [""7""], n = 8
Output: 1

constraint:
`1 <= digits.length <= 9`
`Number[i].length == 1`
`digits[i]` are the digits from `'1'` to `'9'`.

All values ​​in `digits` are unique.

`digits` in non-descending order.

`1 <= n <= 109`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a row of trees, the ith tree produces fruit of type tree[i].

You can start with any tree of your choice and repeat the following steps:
Pick a piece of fruit from this tree and put it in your basket. If you can't, please stop.

Move to the next tree to the right of the current tree. If there are no trees to the right, stop.

Note that you don't have any options after the initial selection to start the tree: you have to do step 1, then step 2, then back to step 1, then step 2, and so on, until you stop.

You have two baskets, each of which can contain any number of fruits, but you want each to contain only one type of fruit.

What is the total amount of fruit you can collect with this program?

Example 1:
Input: [1,2,1]
Output: 3
Explanation: We can collect [1,2,1].


Example 2:
Input: [0,1,2,2]
Output: 3
Explanation: We can collect [1,2,2].

If we start from the first tree, we will only collect [0, 1].


Example 3:
Input: [1,2,3,2,2]
Output: 4
Explanation: We can collect [2,3,2,2].

If we start from the first tree, we will only collect [1, 2].


Example 4:
Input: [3,3,3,1,2,1,1,2,3,3,4]
Output: 5
Explanation: We can collect [1,2,1,1,2].

If we start from the first tree or the eighth tree, we will only collect 4 fruits.

notes:
`1 <= tree.length <= 40000`
`0 <= tree[i] < tree.length`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of non-negative integers, return an array consisting of all even elements of ""A"" and all odd elements of ""A"".

You can return any array of answers that satisfy this condition.


Example 1:
Input: [3,1,2,4]
Output: [2,4,3,1]
Outputs [4,2,3,1], [2,4,1,3] and [4,2,1,3] would also be accepted.

notes:
`1 <= A.length <= 5000`
`0 <= A[i] <= 5000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Assuming a positive integer is a palindrome, then it is a hyperpalindrome, which is also the square of a palindrome.

Given two positive integers ""left"" and ""right"" represented as strings, return the number of super palindromic integers in the inclusive range ""[left, right]"".


Example 1:
Input: Left=""4"", Right=""1000""
Output: 4
Explanation: 4, 9, 121, and 484 are super palindromes.

Note that 676 is not a super palindrome: 26 * 26 = 676, but 26 is not a palindrome.


Example 2:
Input: Left=""1"", Right=""2""
Output: 1

constraint:
`1 <= left.length, right.length <= 18`
`left` and `right` contain only numbers.

`left` and `right` cannot have leading zeros.

`left` and `right` represent integers in the range `[1, 1018]`.

`left` is less than or equal to `right`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr, find the sum of `min(b)` where `b` ranges over each (contiguous) subarray of `arr`. Since the answer may be large, return the answer modulo ""109 + 7"".


Example 1:
Input: arr = [3,1,2,4]
Output: 17
explain:
The subarrays are [3], [1], [2], [4], [3,1], [1,2], [2,4], [3,1,2], [1,2, 4], [3,1,2,4].
Minimum values ​​are 3, 1, 2, 4, 1, 1, 2, 1, 1, 1.

The sum is 17.


Example 2:
Input: arr = [11,81,94,43,3]
Output: 444

constraint:
`1 <= arr.length <= 3 * 104`
`1 <= arr[i] <= 3 * 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""A"", for each integer ""A[i]"", we can choose any ""x"" that satisfies ""-K <= x <= K"", and add ""x"" to ""A[ i]"".

After this process, we have some array ""B"".

Returns the smallest possible difference between the maximum value of `B` and the minimum value of `B`.


Example 1:
Input: A = [1], K = 0
output: 0
Explanation: B = [1]

Example 2:
Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:
Input: A = [1,3,6], K = 3
output: 0
Explanation: B = [3,3,3] or B = [4,4,4]
notes:
`1 <= A.length <= 10000`
`0 <= A[i] <= 10000`
`0 <= K <= 10000`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an N x N ""chessboard"", numbers from ""1"" to ""N*N"" start at the bottom left corner of the board and are written in alternating directions on each row. For example, for a 6 x 6 board, the numbers would be written as follows:
You start with the ""1"" square of the board (it's always the last row and first column). Starting with square `x`, each step consists of the following:
You choose a target square `S` whose number is `x+1`, `x+2`, `x+3`, `x+4`, `x+5` or `x+6`, provided that Yes the number is `<= N*N`.


(This choice simulates the outcome of a standard 6-sided craps roll: that is, there will always be at most 6 destinations, regardless of board size.)
If S has a snake or ladder, move to the destination of that snake or ladder. Otherwise, you move to `S`.

If board[r][c] != -1, then a chessboard square on r rows and c columns has ""snakes or ladders"". The destination of the snake or ladder is board[r][c].

Note that you can only take a snake or ladder at most once per move: if the destination of one snake or ladder is the starting point of another snake or ladder, you don't move further. (For example, if the board is ""[[4,-1],[-1,3]]"" and your target square is ""2"" in the first step, then you complete your first step, since you won't move on to ""4"".)
Returns the minimum number of moves required to reach square N*N. Returns ""-1"" if not possible.


Example 1:
Enter: [
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,-1,-1,-1,-1,-1],
[-1,35,-1,-1,13,-1],
[-1,-1,-1,-1,-1,-1],
[-1,15,-1,-1,-1,-1]]
Output: 4
explain:
Initially, you start at square 1 [row 5, column 0].

You decide to move to square 2 and must take the ladder to square 15.

You then decide to move to square 17 (row 3, column 5) and must take the snake to square 13.

You then decide to move to square 14 and must take the ladder to square 35.

You then decide to move to square 36, ending the game.

It can be proved that at least 4 steps are required to reach the N*N grid, so the answer is 4.

notes:
`2 <= board.length = board[0].length <= 20`
`board[i][j]` is between `1` and `N*N` or equal to `-1`.

The square with the number ""1"" has no snakes or ladders.

The square numbered ""N*N"" has no snakes or ladders.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""A"", for each integer ""A[i]"", we need to choose ""x = -K"" or ""x = K"", and add ""x"" to ""A[i]"" ( only once)`.

After this process, we have some array ""B"".

Returns the smallest possible difference between the maximum value of `B` and the minimum value of `B`.


Example 1:
Input: A = [1], K = 0
output: 0
Explanation: B = [1]

Example 2:
Input: A = [0,10], K = 2
Output: 6
Explanation: B = [2,8]

Example 3:
Input: A = [1,3,6], K = 3
Output: 3
Explanation: B = [4,6,3]
notes:
`1 <= A.length <= 10000`
`0 <= A[i] <= 10000`
`0 <= K <= 10000`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an election, the i-th vote is cast for persons[i] at times[i].

Now, we are going to implement the following query function: `TopVotedCandidate.q(int t)` will return the number of people leading the election at time `t`.
Votes made at time ""t"" will be counted in our query. In the case of a tie, the closest vote (candidate of the tie) wins.


Example 1:
Input: [""TopVotedCandidate"",""q"",""q"",""q"",""q"",""q"",""q""], [[0,1,1,0,0,1,0], [ 0,5,10,15,20,25,30]],[3],[12],[25],[15],[24],[8]]
Output: [null,0,1,1,0,0,1]
explain:
At time 3, votes are [0], 0 leading.

At time 12, the number of votes is [0,1,1], with 1 leading.

At time 25, votes are [0,1,1,0,0,1], and 1 leads (because the tie goes to the nearest vote.)
This will continue for 3 more queries at times 15, 24 and 8.

notes:
`1 <= persons.length = times.length <= 5000`
`0 <= persons[i] <= persons.length`
`times` is a strictly increasing array with all elements in `[0, 10^9]`.

`TopVotedCandidate.q` is called up to 10000 times per test case.

`TopVotedCandidate.q(int t)` is always called with `t >= times[0]`.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The game on an undirected graph is played by two players, Mouse and Cat, taking turns.

The graph looks like this: `graph[a]` is a list of all nodes `b` such that `ab` is an edge of the graph.

The mouse moves first from node ""1"", the cat moves second from node ""2"", and there is a hole at node ""0"".

On each player's turn, they must travel along an edge of the figure that intersects their position. For example, if the mouse is on node 1, it must move to any node in `graph[1]`.

Also, Cat is not allowed to travel to the Hole (node ​​0).
The game can then end in three ways:
If Cat occupies the same node as Mouse, Cat wins.

If the mouse reaches the hole, the mouse wins.

If the position is repeated (i.e. the player is in the same position as the previous turn and it was the same player's turn to move), the game is a draw.

Given a ""graph"", and assuming both players play best, return
`1` If the mouse wins the game,
`2` if the cat wins the game, or
`0` if the game is a draw.


Example 1:
Input: graph = [[2,5],[3],[0,4,5],[1,4,5],[2,3],[0,2,3]]
output: 0

Example 2:
Input: graph = [[1,3],[0],[3],[0,2]]
Output: 1

constraint:
`3 <= graph.length <= 50`
`1 <= graph[i].length < graph.length`
`0 <= graph[i][j] < graph.length`
`graph[i][j] != i`
`graph[i]` is unique.

Mice and cats are always movable.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a deck of cards, each card has a whole number written on it.

Returns true if and only if you can choose `X >= 2`, which splits the deck into one or more sets of cards where:
Each set has ""X"" cards.

All cards in each set have the same integer.


Example 1:
Input: deck = [1,2,3,4,4,3,2,1]
output: true
Explanation: Possible partitions [1,1], [2,2], [3,3], [4,4].


Example 2:
Input: deck = [1,1,1,2,2,2,3,3]
output: error
Explanation: There are no possible partitions.


Example 3:
input: deck = [1]
output: error
Explanation: There are no possible partitions.


Example 4:
Input: deck = [1,1]
output: true
Explanation: Possible partition [1,1].


Example 5:
Input: deck = [1,1,2,2,2,2]
output: true
Explanation: Possible partitions [1,1], [2,2], [2,2].


constraint:
`1 <= deck.length <= 104`
`0 <= deck[i] < 104`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"", split it into two (contiguous) subarrays ""left"" and ""right"" such that:
Every element in `left` is less than or equal to every element in `right`.

`left` and `right` are non-null.

`left` has the smallest possible size.

Return the length of `left` after such a partition. Such a partition is guaranteed to exist.


Example 1:
Input: [5,0,3,8,6]
Output: 3
Explanation: left = [5,0,3], right = [8,6]

Example 2:
Input: [1,1,1,0,6,12]
Output: 4
Explanation: left = [1,1,1,0], right = [6,12]
notes:
`2 <= A.length <= 30000`
`0 <= A[i] <= 10^6`
There is guaranteed to be at least one way to partition ""A"" as described.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have two word arrays ""A"" and ""B"". Each word is a string of lowercase letters.

Now, a word `b` is said to be a subset of word `a` if every letter in `b` appears in `a`, including multiplicity. For example, ""wrr"" is a subset of ""warrior"", but not ""world"".

Now say a word `a` from `A` is universal if for every `b` in `B`, `b` is a subset of `a`.
Return a list of all common words in `A`. You can return words in any order.


Example 1:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""e"",""o""]
Output: [""facebook"",""google"",""leetcode""]

Example 2:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""l"",""e""]
Output: [""apple"",""google"",""leetcode""]

Example 3:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""e"",""oo""]
Output: [""facebook"",""google""]

Example 4:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""lo"",""eo""]
Output: [""google"",""leetcode""]

Example 5:
Input: A = [""amazon"",""apple"",""facebook"",""google"",""leetcode""], B = [""ec"",""oc"",""ceo""]
Output: [""facebook"",""leetcode""]
notes:
`1 <= A.length, B.length <= 10000`
`1 <= A[i].length, B[i].length <= 10`
`A[i]` and `B[i]` consist of lowercase letters only.

All words in `A[i]` are unique: there is no `i != j` and `A[i] == A[j]`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"", return the ""reversed"" string, where all characters that are not letters are in the same position, and all letters have their positions reversed.


Example 1:
Type: ""ab-cd""
Output: ""DC-BA""

Example 2:
Input: ""a-bC-dEf-ghIj""
Output: ""j-Ih-gfE-dCba""

Example 3:
Enter: ""Test1ng-Leet=code-Q!""
Output: ""Qedo1ct-eeLg=ntse-T!""
notes:
`S.length <= 100`
`33 <= S[i].ASCIIcode <= 122`
`S` does not contain `\` or `""`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a circular array C of integers represented by ""A"", find the largest possible sum of non-empty subarrays of C.

Here, circular array means that the end of the array is concatenated to the beginning of the array. (Formally, C[i] = A[i] when 0 <= i < A.length, and C[i+A.length] = C[i] when i >= 0.)
In addition, the subarray may contain each element of fixed buffer ""A"" at most once. (Formally, for subarrays ""C[i], C[i+1], ..., C[j]"", there is no ""i <= k1, k2 <= j"" with ""k1 % A"" .length = k2 % A.length`.)

Example 1:
Input: [1,-2,3,-2]
Output: 3
Explanation: The maximum sum of the subarray [3] is 3

Example 2:
Input: [5,-3,5]
Output: 10
Explanation: The maximum sum of the subarray [5,5] is 5 + 5 = 10

Example 3:
Input: [3,-1,2,-1]
Output: 4
Explanation: The maximum sum of the subarray [2,-1,3] is 2 + (-1) + 3 = 4

Example 4:
Input: [3,-2,2,-3]
Output: 3
Explanation: The maximum sum of the subarrays [3] and [3,-2,2] is 3

Example 5:
Input: [-2,-3,-1]
Output: -1
Explanation: The maximum sum of the subarray [-1] is -1
notes:
`-30000 <= A[i] <= 30000`
`1 <= A.length <= 30000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A complete binary tree is a binary tree in which every level except possibly the last level is completely filled and all nodes are as far to the left as possible.

Write a data structure CBTInserter initialized with a complete binary tree that supports the following operations:
`CBTInserter(TreeNode root)` initializes the data structure on the given tree with the head node `root`;
`CBTInserter.insert(int v)` will insert a `TreeNode` into the tree with value `node.val = v` so that the tree remains intact, and return the value of the parent node of the inserted `TreeNode`;
`CBTInserter.get_root()` will return the head node of the tree.


Example 1:
Inputs: inputs = [""CBTInserter"",""insert"",""get_root""], inputs = [[[1]],[2],[]]
Output: [null,1,[1,2]]

Example 2:
Inputs: inputs = [""CBTInserter"",""insert"",""insert"",""get_root""], inputs = [[[1,2,3,4,5,6]],[7],[8],[ ]]
Output: [null,3,4,[1,2,3,4,5,6,7,8]]
notes:
The initially given tree is complete and contains ""1"" to ""1000"" nodes.

`CBTInserter.insert` is called up to 10000 times per test case.

Each value for a given or inserted node is between ""0"" and ""5000"".",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your music player contains `N` different songs, and she wants to listen to `L` (not necessarily different) songs on your trip. You create a playlist to:
Play each song at least once
Play a song again only if `K` other songs have been played
Returns the number of possible playlists. Since the answer can be very large, it is returned modulo 10^9 + 7.


Example 1:
Input: N=3, L=3, K=1
Output: 6
Explanation: There are 6 possible playlists. [1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1].


Example 2:
Input: N=2, L=3, K=0
Output: 6
Explanation: There are 6 possible playlists. [1, 1, 2], [1, 2, 1], [2, 1, 1], [2, 2, 1], [2, 1, 2], [1, 2, 2]

Example 3:
Input: N=2, L=3, K=1
Output: 2
Explanation: There are 2 possible playlists. [1, 2, 1], [2, 1, 2]
notes:
`0 <= K < N <= L <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `S` consisting of `'('` and `')'` parentheses, we add the minimum number of parentheses (`'('` or `')'`, and anywhere), such that we get The parenthesized strings are valid.

Formally, a parenthesized string is valid if and only if:
it is the empty string, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or
It can be written as `(A)`, where `A` is a valid string.

Given a string of parentheses, return the minimum number of parentheses we must add to make the resulting string valid.


Example 1:
Input: ""())""
Output: 1

Example 2:
Enter: ""(((""
Output: 3

Example 3:
Input: ""()""
output: 0

Example 4:
Input: ""()))(""
Output: 4
notes:
`S.length <= 1000`
`S` consists only of `'('` and `')'` characters.",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", half of the integers in ""nums"" are odd and the other half are even.

Sort the array so that whenever `nums[i]` is odd, `i` is odd, and whenever `nums[i]` is even, `i` is even.

Returns an array of any answers that satisfy this condition.


Example 1:
Input: nums = [4,2,5,7]
Output: [4,5,2,7]
Explanation: [4,7,2,5], [2,5,4,7], [2,7,4,5] are also accepted.


Example 2:
Input: nums = [2,3]
output: [2,3]

constraint:
`2 <= nums.length <= 2 * 104`
`nums.length` is an even number.

Half of the integers in `nums` are even.

`0 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" and an integer ""target"", return the tuple ""i, j, k"" that satisfies ""i < j < k"" and ""arr[i] + arr[j] + arr["" Quantity k] == target`.

Since the answer can be very large, it is returned modulo 109 + 7.


Example 1:
Input: arr = [1,1,2,2,3,3,4,4,5,5], target = 8
Output: 20
explain:
Enumeration by value (arr[i], arr[j], arr[k]):
(1, 2, 5) occurs 8 times;
(1, 3, 4) occurs 8 times;
(2, 2, 4) occurs 2 times;
(2, 3, 3) occurs 2 times.


Example 2:
Input: arr = [1,1,2,2,2,2], target = 5
Output: 12
explain:
arr[i] = 1, arr[j] = arr[k] = 2 occurs 12 times:
We choose a 1 from [1,1] in two ways,
and two 2's in 6 ways from [2,2,2,2].


constraint:
`3 <= arr.length <= 3000`
`0 <= arr[i] <= 100`
`0 <= target <= 300`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a network consisting of ""n"" nodes, represented as an ""n x n"" adjacency matrix ""graph"", if ""graph[i][j] == 1"", where the ""i-th"" node is directly connected to the ""th j"" nodes.

Some nodes are ""initially"" initially infected with malware. Whenever two nodes are directly connected, and at least one of these two nodes is infected with malware, both nodes are infected with malware. The spread of this malware will continue until no more nodes can be infected in this way.

Assume that ""M(initial)"" is the number of nodes that are finally infected with malware in the entire network after the malware spread stops. We will delete a node from ""initial"".

Returns the node which, if removed, would minimize ""M(initial)"". If multiple nodes can be removed to minimize 'M(initial)', return the node with the smallest index.

Note that if a node has been removed from the ""initial"" list of infected nodes, it may still be infected later due to the propagation of the malware.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

constraint:
`n == graph. length`
`n == graph[i].length`
`2 <= n <= 300`
`graph[i][j]` is either `0` or `1`.

`graph[i][j] == graph[j][i]`
`graph[i][i] == 1`
`1 <= initial.length <= n`
`0 <= initial[i] <= n - 1`
All integers in `initial` are unique.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your friend is typing his ""name"" on the keyboard. Sometimes, when typing the character `c`, the key may be long pressed and the character will be typed 1 or more times.

You check the keyboard for ""typed"" characters. Returns `True` if long-pressing some characters (maybe none) could be your friend's name.


Example 1:
Input: name = ""alex"", typed = ""aaleex""
output: true
Explanation: ""a"" and ""e"" in ""alex"" are long pressed.


Example 2:
Input: name = ""saeed"", typed = ""ssaaedd""
output: error
Explanation: 'e' must have been pressed twice, but it was not in the typed output.


Example 3:
Input: name = ""leelee"", typed = ""lleelee""
output: true

Example 4:
Input: name = ""laiden"", typed = ""laiden""
output: true
Explanation: There is no need to long press any character.


constraint:
`1 <= name.length <= 1000`
`1 <= typed.length <= 1000`
`name` and `typed` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string of ""0""s and ""1""s is monotonically increasing if it consists of a certain number of ""0""s (possibly 0's) followed by a certain number of ""1""s (possibly also 0's), then it is monotonically increasing possibly 0's. )
We get a string ""S"" consisting of ""0"" and ""1"", we can flip any ""0"" to ""1"" or flip ""1"" to ""'0'`.

Returns the minimum number of flips that make `S` monotonically increasing.


Example 1:
Enter: ""00110""
Output: 1
Explanation: We flip the last digit to get 00111.


Example 2:
Enter: ""010110""
Output: 2
Explanation: We flip to get 011111, or 000111.


Example 3:
Input: ""00011000""
Output: 2
Explanation: We flip to get 00000000.

notes:
`1 <= S.length <= 20000`
`S` contains only `'0'` and `'1'` characters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" consisting only of 0s and 1s, partition the array into three non-empty parts such that all of these parts represent the same binary value.

If possible, return any `[i, j]` with `i + 1 < j` such that:
`arr[0], arr[1], ..., arr[i]` is the first part,
`arr[i + 1], arr[i + 2], ..., arr[j - 1]` is the second part, and
`arr[j], arr[j + 1], ..., arr[arr.length - 1]` is the third part.

All three parts have equal binary values.

If not possible, return `[-1, -1]`.

Note that the entire section is used when considering what binary value it represents. For example, ""[1,1,0]"" represents ""6"" in decimal, not ""3"". Also, leading zeros are allowed, so ""[0,1,1]"" and ""[1,1]"" represent the same value.


Example 1:
Input: arr = [1,0,1,0,1]
output: [0,3]

Example 2:
Input: arr = [1,1,0,1,1]
Output: [-1,-1]

Example 3:
Input: arr = [1,1,0,0,1]
output: [0,2]

constraint:
`3 <= arr.length <= 3 * 104`
`arr[i]` is either `0` or `1`",0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a network consisting of ""n"" nodes, represented as an ""n x n"" adjacency matrix ""graph"", if ""graph[i][j] == 1"", where the ""i-th"" node is directly connected to the ""th j"" nodes.

Some nodes are ""initially"" initially infected with malware. Whenever two nodes are directly connected, and at least one of these two nodes is infected with malware, both nodes are infected with malware. The spread of this malware will continue until no more nodes can be infected in this way.

Assume that ""M(initial)"" is the number of nodes that are finally infected with malware in the entire network after the malware spread stops.

We will remove exactly one node from ""initial"", completely removing it and all connections from that node to any other node.

Returns the node which, if removed, would minimize ""M(initial)"". If multiple nodes can be removed to minimize 'M(initial)', return the node with the smallest index.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
output: 0

Example 2:
Input: graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
Output: 1

Example 3:
Input: graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0 ,1]
Output: 1

constraint:
`n == graph. length`
`n == graph[i].length`
`2 <= n <= 300`
`graph[i][j]` is either `0` or `1`.

`graph[i][j] == graph[j][i]`
`graph[i][i] == 1`
`1 <= initial.length < n`
`0 <= initial[i] <= n - 1`
All integers in `initial` are unique.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Each valid email contains a local name and a domain name, separated by the ""@"" sign. Emails may contain one or more ""."" or ""+"" in addition to lowercase letters.

For example, in ""alice@leetcode.com"", ""alice"" is the local name, and ""leetcode.com"" is the domain name.

If you add a period ""."" between certain characters in the local name portion of an email address, mail sent there will be forwarded to the same address without the dot in the local name. Note that this rule does not apply to domain names.

For example, ""alice.z@leetcode.com"" and ""alicez@leetcode.com"" forward to the same email address.

If you add a plus sign ""+"" to the local name, everything after the first plus sign will be ignored. This allows filtering of certain emails. Note that this rule does not apply to domain names.

For example, `""m.y+name@email.com""` will be forwarded to `""my@email.com""`.

Both rules can be used at the same time.

Given a string array ""emails"", we send an email to each ""email[i]"", returning the number of distinct addresses that actually received the email.


Example 1:
Input: emails = [""test.email+alex@leetcode.com"",""test.e.mail+bob.cathy@leetcode.com"",""testemail+david@lee.tcode.com""]
Output: 2
Explanation: ""testemail@leetcode.com"" and ""testemail@lee.tcode.com"" actually received the mail.


Example 2:
Input: emails = [""a@leetcode.com"",""b@leetcode.com"",""c@leetcode.com""]
Output: 3

constraint:
`1 <= emails.length <= 100`
`1 <= email[i].length <= 100`
`email[i]` consists of lowercase English letters, `'+'`, `'.'` and `'@'`.

Each `emails[i]` contains exactly one `'@'` character.

All local names and domain names are non-empty.

Local names do not start with a ""+"" character.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an array A of 0s and 1s, how many non-empty subarrays have sum S?

Example 1:
Input: A = [1,0,1,0,1], S = 2
Output: 4
explain:
The 4 subarrays are shown in bold below:
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
[1,0,1,0,1]
notes:
`A.length <= 30000`
`0 <= S <= A.length`
`A[i]` is either `0` or `1`.",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an n x n integer array matrix, return the minimum sum of any descending paths through matrix.

The descending path starts with any element in the first row, then selects the element directly below or diagonally left/right in the next row. Specifically, the next element starting at position ""(row, col)"" will be ""(row + 1, col - 1)"", ""(row + 1, col)"", or ""(row + 1, col + 1)"" .


Example 1:
Input: Matrix = [[2,1,3],[6,5,4],[7,8,9]]
Output: 13
Explanation: There are two descent paths whose minimum sum is underlined:
[[2,1,3], [[2,1,3],
 [6,5,4], [6,5,4],
 [7,8,9]] [7,8,9]]

Example 2:
Input: Matrix = [[-19,57],[-40,-5]]
Output: -59
Explanation: The underlined part is the descending path with the smallest sum:
[[-19,57],
 [-40,-5]]

Example 3:
Input: matrix = [[-48]]
Output: -48

constraint:
`n == matrix.length`
`n == matrix[i].length`
`1 <= n <= 100`
`-100 <= matrix[i][j] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For some fixed ""N"", it is nice if the array ""A"" is a permutation of the integers ""1, 2, ..., N"", such that:
For every `i < j`, there is no `k` such that `i < k < j` such that `A[k] * 2 = A[i] + A[j]`.

Given ""N"", return any nice array ""A"". (One is guaranteed to exist.)

Example 1:
Input: 4
Output: [2,1,4,3]

Example 2:
Input: 5
Output: [3,1,2,5,4]
notes:
`1 <= N <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a `RecentCounter` class that counts the number of recent requests within a certain time range.

Implement the ""RecentCounter"" class:
`RecentCounter()` initializes a counter with the last zero requests.

`int ping(int t)` adds a new request at time `t`, where `t` represents a certain time in milliseconds, and returns the number of requests (including new requests) that occurred in the past `3000` milliseconds. Specific For example, returns the number of requests that occurred within the inclusive range ""[t - 3000, t]"".

Each call to `ping` is guaranteed to use a `t` value strictly greater than the previous call.


Example 1:
enter
[""RecentCounter"", ""ping"", ""ping"", ""ping"", ""ping""]
[[], [1], [100], [3001], [3002]]
output
[empty, 1, 2, 3, 3]
explain
RecentCounter recentCounter = new RecentCounter();
recentCounter.ping(1); // requests = [1], the range is [-2999,1], return 1
recentCounter.ping(100); // requests = [1, 100], the range is [-2900,100], return 2
recentCounter.ping(3001); // requests = [1, 100, 3001], the range is [1, 3001], return 3
recentCounter.ping(3002); // requests = [1, 100, 3001, 3002], the range is [2, 3002], return 3

constraint:
`1 <= t <= 109`
Each test case will call `ping` with strictly increasing `t` values.

Up to 104 calls to ping will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a given two-dimensional binary array ""A"", there are two islands. (An island is a 4-way connected set of 1's that are not connected to any other 1's.)
We can now change the ""0"" to a ""1"", thus connecting the two islands together to form 1 island.

Returns the minimum number of '0's that must be flipped. (The answer is guaranteed to be at least 1.)

Example 1:
Input: A = [[0,1],[1,0]]
Output: 1

Example 2:
Input: A = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2

Example 3:
Input: A = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0, 1],[1,1,1,1,1]]
Output: 1

constraint:
`2 <= A.length == A[0].length <= 100`
`A[i][j] == 0` or `A[i][j] == 1`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The chess horse has a unique movement, which can move two squares horizontally and one square horizontally, or two squares horizontally and one vertical square (all form an L shape). The possible moves of a chess knight are shown in the diagram below:
A chess knight can move as shown in the following diagram:
We have a chess knight and a phone pad, as shown below, the knight can only stand on one number cell (i.e. the blue cell).

Given an integer ""n"", return how many different phone numbers of length ""n"" we can call.

You can initially place the horse on any number cell, then you should perform an ""n - 1"" jump to dial a number of length ""n"". All jumps should be valid knight jumps.

Since the answer can be very large, return the answer modulo 109 + 7.


Example 1:
Input: n = 1
Output: 10
Explanation: We need to dial a number of length 1, so it is enough to place the knight on any number cell among the 10 cells.


Example 2:
Input: n = 2
Output: 20
Explanation: All valid numbers we can dial are [04, 06, 16, 18, 27, 29, 34, 38, 40, 43, 49, 60, 61, 67, 72, 76, 81, 83, 92, 94 ]

Example 3:
Input: n = 3
Output: 46

Example 4:
Input: n = 4
Output: 104

Example 5:
Input: n = 3131
Output: 136006598
Instructions: Please take care of the mod.


constraint:
`1 <= n <= 5000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You want to form a lowercase ""target"" string.

In the beginning, your sequence is `target.length` `'?'` token. You also have a ""stamp"" in lowercase.

In each round, you can place a stamp on the sequence and replace each letter in the sequence with the corresponding letter in the stamp. You can complete up to 10 * target.length rounds.

For example, if the initial sequence is ""??????"" and your stamp is ""abc"", then you might make ""abc??"", ""?abc?"", ""??abc ""Turn. (Note that a marker must be completely contained within the sequence's boundaries to be labeled.)
If the sequence can be tokenized, return an array containing the indices of the leftmost letters that were tokenized each round. Returns an empty array if the sequence could not be labeled.

For example, if the sequence is ""ababc"" and the token is ""abc"", then we can return the answer ""[0, 2]"", corresponding to the move ""??????"" -> ""abc??"" -> "" ababc"".

Also, if the sequence can be marked, it is guaranteed to be marked within 10 * target.length moves. Any answer specifying more than this number of steps will not be accepted.


Example 1:
Input: stamp = ""abc"", target = ""ababc""
output: [0,2]
([1,0,2] will also be accepted as an answer, along with some others.)

Example 2:
Input: stamp = ""abca"", target = ""aabcaca""
Output: [3,0,1]
notes:
`1 <= stamp.length <= target.length <= 1000`
`stamp` and `target` contain only lowercase letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get a set of ""logs"". Each log is a space-separated string, where the first word is the identifier.

There are two types of logs:
Letter-logs: All words (except identifiers) consist of lowercase English letters.

Digit Log: All words (except identifiers) consist of numbers.

Reorder these logs so that:
Alphabetical journals appear before all numerical journals.

Alphabetical logs are sorted lexicographically by their contents. If their contents are the same, they are sorted lexicographically by identifier.

Number logs maintain their relative order.

Return the final order of the logs.


Example 1:
Input: logs = [""dig1 8 1 5 1"",""let1 art can"",""dig2 3 6"",""let2 own kit dig"",""let3 art zero""]
Output: [""let1 art can"",""let3 art zero"",""let2 own kit dig"",""dig1 8 1 5 1"",""dig2 3 6""]
explain:
The letter journal contents vary, so their order is ""art jar"", ""art zero"", ""own toolbox"".

The relative order of the digit logs is ""dig1 8 1 5 1"", ""dig2 3 6"".


Example 2:
Input: logs = [""a1 9 2 3 1"",""g1 act car"",""zo4 4 7"",""ab1 off key dog"",""a8 act zoo""]
Output: [""g1 act car"",""a8 act zoo"",""ab1 off key dog"",""a1 9 2 3 1"",""zo4 4 7""]

constraint:
`1 <= logs.length <= 100`
`3 <= logs[i].length <= 100`
All tokens of `logs[i]` are separated by a space.

`logs[i]` is guaranteed to have an identifier and at least one word after the identifier.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" node of a binary search tree, returns the sum of the values ​​of all nodes whose values ​​are in the range ""[low, high]"".


Example 1:
Input: root = [10,5,15,3,7,null,18], low = 7, high = 15
Output: 32

Example 2:
Input: root = [10,5,15,3,7,13,18,1,null,6], low = 6, high = 10
Output: 23

constraint:
The number of nodes in the tree is in the range ""[1, 2 * 104]"".

`1 <= Node.val <= 105`
`1 <= low <= high <= 105`
All `Node.val` are unique.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of points on the xy plane, determine the minimum area of ​​a rectangle formed by those points with sides parallel to the x and y axes.

Returns 0 if there is no rectangle.


Example 1:
Input: [[1,1],[1,3],[3,1],[3,3],[2,2]]
Output: 4

Example 2:
Input: [[1,1],[1,3],[3,1],[3,3],[4,1],[4,3]]
Output: 2
notes:
`1 <= points.length <= 500`
`0 <= points[i][0] <= 40000`
`0 <= points[i][1] <= 40000`
All points are different.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A permutation `perm` of `n + 1` integers of all integers in the range `[0, n]` can be represented as a string `s` of length `n`, where:
`s[i] == 'I'` if `perm[i] < perm[i + 1]`, and
`s[i] == 'D'` if `perm[i] > perm[i + 1]`.

Given a string s, reconstruct the permutation perm and return it. If there are multiple valid permutation perms, any one of them is returned.


Example 1:
Input: s = ""IDID""
Output: [0,4,1,3,2]

Example 2:
Input: s = ""III""
Output: [0,1,2,3]

Example 3:
Input: s = ""DDI""
Output: [3,2,0,1]

constraint:
`1 <= s.length <= 105`
`s[i]` is either `'I'` or `'D'`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings ""words"", return the smallest string containing each string in ""words"" as a substring. If there are multiple valid strings of minimum length, any one of them is returned.

You might assume that no string in words is a substring of another string in words .


Example 1:
Input: words = [""alex"",""loves"",""leetcode""]
Output: ""alexlovesleetcode""
Explanation: All permutations of ""alex"", ""loves"", ""leetcode"" will also be accepted.


Example 2:
Input: words = [""catg"",""ctaagt"",""gcta"",""ttca"",""atgcatc""]
Output: ""gctaagttcatgcatc""

constraint:
`1 <= words.length <= 12`
`1 <= words[i].length <= 20`
`words[i]` consists of lowercase English letters.

All strings in `words` are unique.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `n` strings `strs`, all of the same length.

The strings can be arranged one in each row, forming a grid. For example `strs = [""abc"", ""bce"", ""cae""]` can be arranged like this:
abc
B.C.
Kay
You want to drop columns that are not sorted lexicographically. In the example above (0 indexed), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e' `) is sorted and column 1 (`'b'`, `'c'`, `'a'`) is not sorted, so you are dropping column 1.

Returns the number of columns you will delete.


Example 1:
Input: strs = [""cba"",""daf"",""ghi""]
Output: 1
Explanation: The grid looks like this:
  CBA
  Duff
  Zhi
Columns 0 and 2 are sorted, but column 1 is not, so just remove column 1.


Example 2:
Input: strs = [""a"",""b""]
output: 0
Explanation: The grid looks like this:
  A
  b
Column 0 is the only column and is sorted, so you don't drop any columns.


Example 3:
Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: The grid looks like this:
  zyx
  Wuhan University
  Bursar
All 3 columns are not sorted, so you will drop all 3 columns.


constraint:
`n == strs. length`
`1 <= n <= 100`
`1 <= strs[i].length <= 1000`
`strs[i]` consists of lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array A of integers, a move consists of selecting any ""A[i]"", and incrementing it by ""1"".

Returns the minimum number of moves that make each value in ""A"" unique.


Example 1:
Input: [1,2,2]
Output: 1
Explanation: After 1 step, the array may be [1, 2, 3].


Example 2:
Input: [3,2,1,2,1,7]
Output: 6
Explanation: After 6 moves, the array might be [3, 4, 1, 2, 5, 7].

It can be proven in 5 moves or less that it is impossible for an array to have all unique values.

notes:
`0 <= A.length <= 40000`
`0 <= A[i] < 40000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sequences ""pushed"" and ""popped"" with distinct values, return ""true"" if and only if this could be the result of a series of pushes and pops on an initially empty stack.


Example 1:
Input: pushed = [1,2,3,4,5], popped = [4,5,3,2,1]
output: true
Explanation: We might execute the following sequence:
push(1), push(2), push(3), push(4), pop() -> 4,
push(5), pop() -> 5, pop() -> 3, pop() -> 2, pop() -> 1

Example 2:
Input: pushed = [1,2,3,4,5], popped = [4,3,5,1,2]
output: error
Explanation: 1 cannot be popped before 2.


constraint:
`0 <= pushed.length == popped.length <= 1000`
`0 <= pushed[i], popped[i] < 1000`
`pushed` is a permutation of `popped`.

`pushed` and `popped` have different values.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2D plane, we place ""n"" stones at some integer coordinate points. Each coordinate point can have at most one stone.

A stone can be removed if it shares the same row or column with another stone that has not been removed.

Given an array `stones` of length `n`, where `stones[i] = [xi, yi]` represents the position of the ith stone, return the maximum possible number of stones that can be removed.


Example 1:
Input: Stone = [[0,0],[0,1],[1,0],[1,2],[2,1],[2,2]]
Output: 5
Instructions: One way to remove 5 gems is as follows:
1. Remove stone [2,2] since it is on the same row as [2,1].

2. Remove stone [2,1] since it shares the same column as [0,1].

3. Remove stone [1,2] since it shares the same row as [1,0].

4. Delete stone [1,0] because it shares the same column as [0,0].

5. Remove stone [0,1] since it shares the same row as [0,0].

Stone [0,0] cannot be removed because it does not share a row/column with another stone still on the plane.


Example 2:
Input: Stone = [[0,0],[0,2],[1,1],[2,0],[2,2]]
Output: 3
Explanation: One way to do 3 moves is as follows:
1. Remove stone [2,2] since it shares the same row as [2,0].

2. Delete stone [2,0] because it shares the same column as [0,0].

3. Delete stone [0,2] since it shares the same row as [0,0].

Stones [0,0] and [1,1] cannot be removed because they do not share a row/column with another stone still on the plane.


Example 3:
Input: Stone = [[0,0]]
output: 0
Explanation: [0,0] is the only stone on the plane, so you can't remove it.


constraint:
`1 <= stones.length <= 1000`
`0 <= xi, yi <= 104`
No two stones are at the same coordinate point.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an initial power of ""P"", an initial score of ""0"", and a bag of ""tokens"", where ""tokens[i]"" is the value of the ""i-th"" token (indexed from 0).

Your goal is to maximize your total score by possibly playing each token in one of two ways:
If your current power is at least `tokens[i]`, you can play the `ith` token face up, losing `tokens[i]` power and gaining `1` points.

If your current score is at least ""1"", you can land the ""ith"" token face down, gaining the power of ""token[i]"" and losing ""1"" points.

Each token can be played at most once in any order. You don't have to play all tokens.

Returns the maximum possible score you can get after playing any number of tokens.


Example 1:
Input: tokens = [100], P = 50
output: 0
Explanation: Playing the only token in the bag is impossible because you either have too little power or too few points.


Example 2:
Input: Tokens = [100,200], P = 150
Output: 1
Instructions: Play the 0th token (100) face up, your power becomes 50 and your score becomes 1.

There is no need to play the first token, as you cannot land it face-up to increase your score.


Example 3:
Input: Tokens = [100,200,300,400], P = 200
Output: 2
Instructions: Play tokens in this order for 2 points:
1. Play the 0th token (100) face up, your power becomes 100 and your score becomes 1.

2. Play the 3rd token face down (400), your power becomes 500 and your score becomes 0.

3. Play the first token face up (200), your power becomes 300 and your score becomes 1.

4. Play the second token face up (300), your power becomes 0 and your score becomes 2.


constraint:
`0 <= tokens.length <= 1000`
`0 <= tokens[i], P < 104`",0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of 4-digit numbers, find the latest 24-hour time that can be formed using each number exactly once.

The 24-hour format is ""HH:MM"", where HH is between 00 and 23 and MM is between 00 and 59. The earliest 24-hour time is `00:00` and the latest is `23:59`.

Returns the latest 24-hour time in `""HH:MM""` format. Returns an empty string if a valid time cannot be determined.


Example 1:
Input: A = [1,2,3,4]
Output: ""23:41""
Note: Valid 24-hour times are ""12:34"", ""12:43"", ""13:24"", ""13:42"", ""14:23"", ""14:32"", ""21:34"", ""21:43"", ""23:14"", and ""23:41"". Among them, ""23:41"" is the latest.


Example 2:
Input: A = [5,5,5,5]
Output: """"
Explanation: There is no valid 24-hour time because ""55:55"" is invalid.


Example 3:
Input: A = [0,0,0,0]
Output: ""00:00""

Example 4:
Input: A = [0,0,1,0]
Output: ""10:00""

constraint:
`arr.length == 4`
`0 <= arr[i] <= 9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a deck of cards, each card has a unique integer. You can order decks in any order you want.

Initially, all cards are placed face down (unrevealed) in a deck.

Now, you repeat the following steps until all cards are turned over:
Take the top card of the deck, reveal it, and remove it from the deck.

If there are still cards in the pile, the next card from the top of the pile is placed on the bottom of the pile.

If there are still unopened cards, go back to step 1, otherwise stop.

Returns the deck order in which cards will be displayed in increasing order.

The first entry in the answer is considered the top of the deck.


Example 1:
Input: [17,13,11,2,3,5,7]
Output: [2,13,3,11,5,17,7]
explain:
We get the deck in the order [17,13,11,2,3,5,7] (the order doesn't matter), and reorder it.

After reordering, the deck starts out as [2,13,3,11,5,17,7] where 2 is the top of the deck.

We reveal 2, and move 13 to the bottom. The deck is now [3,11,5,17,7,13].

We reveal 3, and move 11 to the bottom. The deck is now [5,17,7,13,11].

We reveal 5 and move 17 to the bottom. The deck is now [7,13,11,17].

We reveal 7 and move 13 to the bottom. The deck is now [11,17,13].

We reveal 11 and move 17 to the bottom. The deck is now [13,17].

We reveal 13 and move 17 to the bottom. The deck is now [17].

We reveal 17.

Since all turned over cards are in increasing order, the answer is correct.

notes:
`1 <= A.length <= 1000`
`1 <= A[i] <= 10^6`
`A[i] != A[j]` for all `i != j`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For a binary tree T, we can define a flip operation as follows: select any node, and exchange the left and right subtrees.

A flipped binary tree X is equivalent to a binary tree Y if and only if we can make X equal to Y after some flip operations.

Given the roots of two binary trees ""root1"" and ""root2"", return ""true"" if the two trees are flipped equivalent, otherwise return ""false"".


Example 1:
Input: root1 = [1,2,3,4,5,6,null,null,null,7,8], root2 = [1,3,2,null,6,4,5,null,null,null ,empty,8,7]
output: true
Explanation: We flipped the nodes with values ​​1, 3 and 5.


Example 2:
Input: root1 = [], root2 = []
output: true

Example 3:
Input: root1 = [], root2 = [1]
output: error

Example 4:
Input: root1 = [0,null,1], root2 = []
output: error

Example 5:
Input: root1 = [0,null,1], root2 = [0,1]
output: true

constraint:
The number of nodes in each tree is in the range ""[0, 100]"".

Each tree will have unique node values ​​in the range ""[0, 99]"".",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-empty array of unique positive integers ""A"", consider the following graph:
There are `A.length` nodes, labeled `A[0]` through `A[A.length - 1];`
An edge exists between A[i] and A[j] if and only if A[i] and A[j] share a common factor greater than 1.

Returns the size of the largest connected component in the graph.


Example 1:
Input: [4,6,15,35]
Output: 4

Example 2:
Input: [20,50,9,63]
Output: 2

Example 3:
Input: [2,3,6,7,4,12,21,39]
Output: 8
notes:
`1 <= A.length <= 20000`
`1 <= A[i] <= 100000`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In alien languages, surprisingly they also use English lowercase letters, but probably in a different ""order"". The ""order"" of the alphabet is some arrangement of lowercase letters.

Given a sequence of ""words"" written in an alien language and an ""order"" of the alphabet, return ""true"" if and only if the given ""words"" are sorted lexicographically in this alien language.


Example 1:
Input: words = [""hello"",""leetcode""], order = ""hlabcdefgijkmnopqrstuvwxyz""
output: true
Explanation: Because 'h' occurs before 'l' in this language, the sequence is sorted.


Example 2:
Input: words = [""word"",""world"",""row""], order = ""worldabcefghijkmnpqstuvxyz""
output: error
Explanation: Since 'd' comes after 'l' in this language, words[0] > words[1], so the sequence is unsorted.


Example 3:
Input: words = [""apple"",""app""], order = ""abcdefghijklmnopqrstuvwxyz""
output: error
Explanation: The first three characters ""app"" match, the second string is shorter (size). According to the lexicographical rule ""apple"" > ""app"", because 'l' > '∅', where '∅' is defined as a whitespace character smaller than any other character (more info).


constraint:
`1 <= words.length <= 100`
`1 <= words[i].length <= 20`
`order.length == 26`
All characters in `words[i]` and `order` are English lowercase letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" of even length, return ""true"" if and only if it can be reordered such that each ""arr[2*i+1] = 2*arr[2*i]"" 0 < = i < len(arr) / 2`.


Example 1:
Input: arr = [3,1,3,6]
output: error

Example 2:
Input: arr = [2,1,2,6]
output: error

Example 3:
Input: arr = [4,-2,2,-4]
output: true
Explanation: We can take two groups, [-2,-4] and [2,4] to form [-2,-4,2,4] or [2,4,-2,-4].


Example 4:
Input: arr = [1,2,4,16,8,4]
output: error

constraint:
`0 <= arr.length <= 3 * 104`
`arr.length` is an even number.

`-105 <= arr[i] <= 105`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `n` strings `strs`, all of the same length.

We can choose any deletion index and for each string delete all characters in those indices.

For example, if we have `strs = [""abcdef"",""uvwxyz""]` and remove indices `{0, 2, 3}`, then the final array after removal is `[""bef"", ""vyz""]` .

Suppose we choose a set of deletion indices ""answer"" such that after deletion, the elements of the final array are in lexicographical order (i.e., ""strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]`). Returns the smallest possible value of `answer.length`.


Example 1:
Input: strs = [""ca"",""bb"",""ac""]
Output: 1
explain:
After removing the first column, strs = [""a"", ""b"", ""c""].

Now strs are sorted lexicographically (ie strs[0] <= strs[1] <= strs[2]).

We need at least 1 delete, since initially strs is not in lexicographical order, so the answer is 1.


Example 2:
Input: strs = [""xc"",""yb"",""za""]
output: 0
explain:
strs is already in lexicographical order, so we don't need to remove anything.

Note that the lines of strs are not necessarily in lexicographical order:
That is, (strs[0][0] <= strs[0][1] <= ...) is not necessarily true

Example 3:
Input: strs = [""zyx"",""wvu"",""tsr""]
Output: 3
Explanation: We have to delete every column.


constraint:
`n == strs. length`
`1 <= n <= 100`
`1 <= strs[i].length <= 100`
`strs[i]` consists of lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are ""8"" cells in a row, and each cell is either occupied or empty.

Every day, whether a cell is occupied or free changes according to the following rules:
A cell is occupied if two adjacent neighbors are either occupied or both are empty.

Otherwise, it becomes vacant.

Note that since the prison is a row, the first and last cell in the row cannot have two adjacent neighbors.

Given an integer array ""cells"", cells[i] == 1 if the ith cell is occupied, cells[i] == 0 if the ith cell is empty, then give an integer ""n"".

Return to jail state after `n` days (i.e., `n` changes to the above).


Example 1:
Input: cells = [0,1,0,1,1,0,0,1], n = 7
Output: [0,0,1,1,0,0,0,0]
Explanation: The following table summarizes the status of the prison on a daily basis:
Day 0: [0, 1, 0, 1, 1, 0, 0, 1]
Day 1: [0, 1, 1, 0, 0, 0, 0, 0]
Day 2: [0, 0, 0, 0, 1, 1, 1, 0]
Day 3: [0, 1, 1, 0, 0, 1, 0, 0]
Day 4: [0, 0, 0, 0, 0, 1, 0, 0]
Day 5: [0, 1, 1, 1, 0, 1, 0, 0]
Day 6: [0, 0, 1, 0, 1, 1, 0, 0]
Day 7: [0, 0, 1, 1, 0, 0, 0, 0]

Example 2:
Input: cells = [1,0,0,1,0,0,1,0], n = 1000000000
Output: [0,0,1,1,1,1,1,0]

constraint:
`cells.length == 8`
`cells[i]` is `0` or `1`.

`1 <= n <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, determine whether it is a complete binary tree.

In a complete binary tree, every level is completely filled except the last level, and all nodes in the last level are as far to the left as possible. It can contain nodes between `1` and `2h` in the last level `h`.


Example 1:
Input: root = [1,2,3,4,5,6]
output: true
Explanation: Every layer up to the last layer is full (ie layers with node values ​​{1} and {2, 3}), and all nodes in the last layer ({4, 5, 6}) are full Keep to the left as much as possible.


Example 2:
Input: root = [1,2,3,4,5,null,7]
output: error
Explanation: The node with value 7 is not as far left as possible.


constraint:
The number of nodes in the tree is in the range ""[1, 100]"".

`1 <= Node.val <= 1000`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an N x N `grid` of 1 x 1 squares, each 1 x 1 square consists of a `/`, `\`, or space. These characters divide the square into contiguous regions.

(Note that backslash characters are escaped, so `\` is represented as `""\\""`.)
Returns the number of regions.


Example 1:
enter:
[
  ""/"",
  ""/""
]
Output: 2
Explanation: The 2x2 grid is as follows:

Example 2:
enter:
[
  ""/"",
  """"
]
Output: 1
Explanation: The 2x2 grid is as follows:

Example 3:
enter:
[
  ""\\/"",
  ""/\\""
]
Output: 4
Explanation: (Recall that ""\\/"" refers to \/ and ""/\\"" refers to /\ because the \ character is escaped.)
The 2x2 grid is as follows:

Example 4:
enter:
[
  ""/\\"",
  ""\\/""
]
Output: 5
Explanation: (Recall that ""/\\"" refers to /\ and ""\\/"" refers to \/ because the \ character is escaped.)
The 2x2 grid is as follows:

Example 5:
enter:
[
  ""//"",
  ""/""
]
Output: 3
Explanation: The 2x2 grid is as follows:
notes:
`1 <= grid.length == grid[0].length <= 30`
`grid[i][j]` is `'/'`, `'\'`, or `' '`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of `n` strings `strs`, all of the same length.

We can choose any deletion index and for each string delete all characters in those indices.

For example, if we have `strs = [""abcdef"",""uvwxyz""]` and remove indices `{0, 2, 3}`, then the final array after removal is `[""bef"", ""vyz""]` .

Suppose we choose a set of deletion indices ""answer"" such that after deletion each string (row) in the final array is in lexicographical order. (ie, `(strs[0][0] <= strs[0][1] <= ... <= strs[0][strs[0].length - 1])` and `(strs[ 1 ][0] <= strs[1][1] <= ... <= strs[1][strs[1].length - 1])`, etc.). Return the smallest possible value of `answer.length`.


Example 1:
Input: strs = [""babca"",""bbazb""]
Output: 3
Explanation: After deleting columns 0, 1, and 4, the final array is strs = [""bc"", ""az""].

These two lines are in lexicographical order (i.e. strs[0][0] <= strs[0][1] and strs[1][0] <= strs[1][1], respectively.

Note that strs[0] > strs[1] - the array strs is not necessarily in lexicographical order.


Example 2:
Input: strs = [""edcba""]
Output: 4
Explanation: If we drop less than 4 columns, only one row will not be sorted lexicographically.


Example 3:
Input: strs = [""ghi"",""def"",""abc""]
output: 0
Explanation: All rows are sorted lexicographically.


constraint:
`n == strs. length`
`1 <= n <= 100`
`1 <= strs[i].length <= 100`
`strs[i]` consists of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an array ""A"" of size ""2N"", there are ""N+1"" unique elements, one of which is repeated ""N"" times.

Returns the element repeated ""N"" times.


Example 1:
Input: [1,2,3,3]
Output: 3

Example 2:
Input: [2,1,2,5,3,2]
Output: 2

Example 3:
Input: [5,1,5,2,5,3,5,4]
Output: 5
notes:
`4 <= A.length <= 10000`
`0 <= A[i] < 10000`
`A.length` is even",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of integers, the slope is a tuple ""(i, j)"" where ""i < j"" and ""A[i] <= A[j]"". The width of this slope is ""j - i"".

Find the maximum width of the ramp in ""A"". Returns 0 if not present.


Example 1:
Input: [6,0,8,2,1,5]
Output: 4
explain:
The maximum width ramp is achieved at (i, j) = (1, 5): A[1] = 0 and A[5] = 5.


Example 2:
Input: [9,8,1,0,1,9,4,0,4,1]
Output: 7
explain:
The maximum width ramp is achieved at (i, j) = (2, 9): A[2] = 1 and A[9] = 1.

notes:
`2 <= A.length <= 50000`
`0 <= A[i] <= 50000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a set of points in the xy plane, determine the minimum area of ​​any rectangle formed by those points, with sides not necessarily parallel to the x and y axes.

Returns 0 if there is no rectangle.


Example 1:
Input: [[1,2],[2,1],[1,0],[0,1]]
Output: 2.00000
Explanation: The minimum area rectangle appears at [1,2],[2,1],[1,0],[0,1], and the area is 2.


Example 2:
Input: [[0,1],[2,1],[1,1],[1,0],[2,0]]
Output: 1.00000
Explanation: The minimum area rectangle appears at [1,0],[1,1],[2,1],[2,0], and the area is 1.


Example 3:
Input: [[0,3],[1,2],[3,1],[1,3],[2,1]]
output: 0
Explanation: It is impossible to form a rectangle from these points.


Example 4:
Input: [[3,1],[1,1],[0,1],[2,1],[3,3],[3,2],[0,2],[2,3] ]
Output: 2.00000
Explanation: The minimum area rectangle appears at [2,1],[2,3],[3,3],[3,1], and the area is 2.

notes:
`1 <= points.length <= 50`
`0 <= points[i][0] <= 40000`
`0 <= points[i][1] <= 40000`
All points are different.

Answers within 10^-5 of the actual value will be considered correct.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer ""x"", we will write an expression of the form ""x (op1) x (op2) x (op3) x ..."", where each operator ""op1"", ""op2"", etc. is addition, subtraction, multiplication, or division (""+"", ""-"", ""*"", or ""/""). For example, for `x = 3`, we can write `3 * 3 / 3 + 3 - 3`, which has the value 3.

When writing such expressions, we follow the following conventions:
The division operator (`/`) returns a rational number.

There are no parentheses anywhere.

We use the usual order of operations: multiplication and division happen before addition and subtraction.

The unary negation operator (`-`) is not allowed. For example, ""`x - x`"" is a valid expression because it only uses subtraction, but ""`-x + x`"" is not because it uses negation.

We want to write an expression with the minimum number of operators such that the expression is equal to a given ""target"". Returns the minimum number of operators used.


Example 1:
Input: x = 3, target = 19
Output: 5
Explanation: 3*3 + 3*3 + 3/3.

The expression contains 5 operations.


Example 2:
Input: x = 5, target = 501
Output: 8
Explanation: 5 * 5 * 5 * 5 - 5 * 5 * 5 + 5 / 5.

The expression contains 8 operations.


Example 3:
Input: x = 100, target = 100000000
Output: 3
Explanation: 100*100*100*100.

This expression contains 3 operations.


constraint:
`2 <= x <= 100`
`1 <= target <= 2 * 108`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary tree is unique if every node in the tree has the same value.

Returns true if and only if the given tree is a single-valued tree.


Example 1:
Input: [1,1,1,1,1,null,1]
output: true

Example 2:
Input: [2,2,2,5,2]
output: error
notes:
The number of nodes in a given tree will be in the range ""[1, 100]"".

The value of each node is an integer in the range ""[0, 99]"".",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""wordlist"", we want to implement a spell checker that converts query words into correct words.

For a given ""query"" word, the spell checker handles two types of misspellings:
Case: If the query matches a word in the vocabulary (case insensitive), the query term is returned with the same case as in the vocabulary.



Example: `wordlist = [""yellow""]`, `query = ""YellOw""`: `correct = ""yellow""`

Example: `wordlist = [""Yellow""]`, `query = ""yellow""`: `correct = ""Yellow""`

Example: `wordlist = [""yellow""]`, `query = ""yellow""`: `correct = ""yellow""`
Wrong vowels: If after replacing the query word's vowels `('a', 'e', ​​'i', 'o', 'u')` individually with any vowel, it matches a word in the word list ( case-insensitive), then returns the query term with the same case as the match in the vocabulary.



Example: `wordlist = [""YellOw""]`, `query = ""yollow""`: `correct = ""YellOw""`

Example: `wordlist = [""YellOw""]`, `query = ""yeellow""`: `correct = """"` (no match)

Example: `wordlist = [""YellOw""]`, `query = ""yllw""`: `correct = """"` (no match)
Additionally, the spell checker operates according to the following precedence rules:
When the query matches a word in the wordlist exactly (case sensitive), you should return the same word.

When the query matches an uppercase word, you should return the first such match in the word list.

When the query matches a word with a wrong vowel, you should return the first such match in the word list.

If the query has no matches in the word list, it should return an empty string.

Given some ""queries"", return a list of words ""answer"", where ""answer[i]"" is the correct word for ""query = queries[i]"".


Example 1:
Input: wordlist = [""Kite"",""kite"",""hare"",""Hare""], queries = [""kite"",""Kite"",""KiTe"",""Hare"",""HARE"",""Hear"","" hear"", ""keti"", ""keet"", ""keto""]
Output: [""Kite"",""KiTe"",""KiTe"",""Hare"",""hare"","""","""",""KiTe"","""",""KiTe""]

Example 2:
Input: wordlist = [""yellow""], queries = [""YellOw""]
output: [""yellow""]

constraint:
`1 <= wordlist.length, queries.length <= 5000`
`1 <= wordlist[i].length, queries[i].length <= 7`
`wordlist[i]` and `queries[i]` only contain English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Returns all non-negative integers of length ""n"" such that the absolute difference between every two consecutive numbers is ""k"".

Note that each number in the answer must not have leading zeros. For example, '01' has a leading zero and is invalid.

You can return answers in any order.


Example 1:
Input: n = 3, k = 7
Output: [181,292,707,818,929]
Explanation: Note that 070 is not a valid number because it has leading zeros.


Example 2:
Input: n = 2, k = 1
Output: [10,12,21,23,32,34,43,45,54,56,65,67,76,78,87,89,98]

Example 3:
Input: n = 2, k = 0
Output: [11,22,33,44,55,66,77,88,99]

Example 4:
Input: n = 2, k = 2
Output: [13,20,24,31,35,42,46,53,57,64,68,75,79,86,97]

constraint:
`2 <= n <= 9`
`0 <= k <= 9`",0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, we install cameras on the nodes of the tree.
Each camera on a node can monitor its parent node, itself and its immediate children.

Calculate the minimum number of cameras required to monitor all nodes of the tree.


Example 1:
Input: [0,0,null,0,0]
Output: 1
Note: As shown in the figure, one camera is enough to monitor all nodes.


Example 2:
Input: [0,0,null,0,null,0,null,null,0]
Output: 2
Explanation: At least two cameras are required to monitor all nodes of the tree. The image above shows one of the valid configurations for camera placement.

notes:
The number of nodes in a given tree will be in the range ""[1, 1000]"".

Each node has a value of 0.",0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr , sort the array by performing a series of pancake flips.

In a pancake flip, we perform the following steps:
Choose an integer ""k"" where ""1 <= k <= arr.length"".

Reverse the subarray ""arr[0...k-1]"" (starting at 0).

For example, if arr = [3,2,1,4] and we performed a pancake flip select k = 3, we invert the subarray [3,2,1], so arr = [1,2,3,4] ` After pancake flips with `k = 3`.

Returns an array of k values ​​corresponding to the sequence of pancake flips sorted arr . Any valid answer that sorts the array within ""10 * arr.length"" flips will be judged correct.


Example 1:
Input: arr = [3,2,4,1]
Output: [4,2,4,3]
explain:
We perform 4 pancake flips with k values ​​of 4, 2, 4 and 3.

Initial state: arr = [3, 2, 4, 1]
After the first flip (k = 4): arr = [1, 4, 2, 3]
After the second flip (k = 2): arr = [4, 1, 2, 3]
After the third flip (k = 4): arr = [3, 2, 1, 4]
After the 4th flip (k = 3): arr = [1, 2, 3, 4], sorted.


Example 2:
Input: arr = [1,2,3]
output: []
Explanation: The input is already sorted, so there is no need to flip anything.

Note that other answers such as [3, 3] will also be accepted.


constraint:
`1 <= arr.length <= 100`
`1 <= arr[i] <= arr.length`
All integers in `arr` are unique (i.e. `arr` is a permutation of integers from `1` to `arr.length`).",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get the ""root"" of a binary tree with ""n"" nodes, where each node is uniquely assigned a value from ""1"" to ""n"". You also get a sequence of ""n"" values ​​""voyage"", which is the required preorder traversal of the binary tree.

Any node in a binary tree can be flipped by swapping its left and right subtrees. For example, flipping node 1 would have the following effect:
Flip the minimum number of nodes such that a preorder traversal of the tree matches `voyage`.

Returns a list of values ​​for all flipped nodes. You can return answers in any order. If a node in the tree cannot be flipped such that a preorder traversal matches `voyage`, a list `[-1]` is returned.


Example 1:
Input: root = [1,2], voyage = [2,1]
output: [-1]
Explanation: It is not possible to flip nodes so that the preorder traversal matches the voyage.


Example 2:
Input: root = [1,2,3], voyage = [1,3,2]
output: [1]
Explanation: Flipping node 1 swaps nodes 2 and 3, so the preorder traversal matches voyage.


Example 3:
Input: root = [1,2,3], voyage = [1,2,3]
output: []
Explanation: The preorder traversal of the tree already matches the voyage, so there is no need to flip nodes.


constraint:
The number of nodes in the tree is ""n"".

`n == voyage. length`
`1 <= n <= 100`
`1 <= Node.val, voyage[i] <= n`
All values ​​in the tree are unique.

All values ​​in `voyage` are unique.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s"" and ""t"", each representing a nonnegative rational number, return ""true"" if and only if they represent the same number. Strings can use parentheses to denote repetitions of rational numbers.

Rational numbers can be represented using up to three parts: `<IntegerPart>`, `<NonRepeatingPart>`, and `<RepeatingPart>`. The number will be represented in one of three ways:
`<integer part>`

For example, ""12"", ""0"", and ""123"".

`<IntegerPart><.><NonRepeatingPart>`

For example, ""0.5"", ""1."", ""2.12"", and ""123.0001"".

`<IntegerPart><.><NonRepeatingPart><(><RepeatingPart><)>`

For example, ""0.1(6)"", ""1.(9)"", ""123.00(1212)"".

Repeated parts of decimal expansions are usually denoted by a pair of parentheses. For example:
`1/6 = 0.16666666... ​​= 0.1(6) = 0.1666(6) = 0.166(66)`.


Example 1:
Input: s = ""0.(52)"", t = ""0.5(25)""
output: true
Explanation: Since ""0.(52)"" means 0.52525252... and ""0.5(25)"" means 0.52525252525..., the two strings represent the same number.


Example 2:
Input: s = ""0.1666(6)"", t = ""0.166(66)""
output: true

Example 3:
Input: s = ""0.9(9)"", t = ""1.""
output: true
Explanation: ""0.9(9)"" means 0.999999999... repeats forever and is equal to 1. [See this link for an explanation. ]
""1."" represents the number 1, which is well-formed: (IntegerPart) = ""1"" and (NonRepeatingPart) = """".


constraint:
Each section consists of numbers only.

`<IntegerPart>` has no leading zeros (other than zero itself).

`1 <= <IntegerPart>.length <= 4`
`0 <= <NonRepeatingPart>.length <= 4`
`1 <= <RepeatingPart>.length <= 4`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of points where points[i] = [xi, yi] represents a point on the X-Y plane and an integer k, return the k closest points (0, 0)` to the origin.

The distance between two points on the X-Y plane is the Euclidean distance (i.e. `√(x1 - x2)2 + (y1 - y2)2`).

You can return answers in any order. The answer is guaranteed to be unique (except for the order it is in).


Example 1:
Input: points = [[1,3],[-2,2]], k = 1
Output: [[-2,2]]
explain:
The distance between (1, 3) and the origin is sqrt(10).

The distance between (-2, 2) and the origin is sqrt(8).

Since sqrt(8) < sqrt(10), (-2, 2) is closer to the origin.

We only want the k = 1 points closest to the origin, so the answer is [[-2,2]].


Example 2:
Input: points = [[3,3],[5,-1],[-2,4]], k = 2
Output: [[3,3],[-2,4]]
Explanation: The answer [[-2,4],[3,3]] would also be accepted.


constraint:
`1 <= k <= points.length <= 104`
`-104 < xi, yi < 104`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""A"", return the number of (contiguous, non-empty) subarrays whose sum is divisible by ""K"".


Example 1:
Input: A = [4,5,0,-2,-3,1], K = 5
Output: 7
Explanation: There are 7 subarrays whose sum is divisible by K = 5:
[4, 5, 0, -2, -3, 1], [5], [5, 0], [5, 0, -2, -3], [0], [0, -2, -3] ], [-twenty three]
notes:
`1 <= A.length <= 30000`
`-10000 <= A[i] <= 10000`
`2 <= K <= 10000`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array arr . From some starting index, you can do a series of jumps. The (1st, 3rd, 5th, ...) jumps in the series are called odd jumps, and the (2nd, 4th, 6th, ...) jumps in the series are called even jumps. Note that jumps are numbered, not indexed.

You can jump forward from index ""i"" to index ""j"" (using ""i < j"") in the following way:
During an odd number of jumps (i.e. jumps 1, 3, 5, ...), you jump to index j such that arr[i] <= arr[j] and arr[j] is the smallest possible value. If there are more than one such index j , only jump to the smallest such index j .

During an even number of jumps (i.e. jumps 2, 4, 6...), you jump to index j such that arr[i] >= arr[j] and arr[j] is the largest possible value. If there are more than one such index j , only jump to the smallest such index j .

For some index ""i"", it may be the case that there are no legal jumps.

A starting index is good if from that index you can reach the end of the array (index arr.length - 1) by jumping a certain number of times (probably 0 or more).

Returns the number of good starting indices.


Example 1:
Input: arr = [10,13,12,14,15]
Output: 2
explain:
From start index i = 0, we can first jump to i = 2 (since arr[2] is the smallest of arr[1], arr[2], arr[3], arr[4] greater or equal to arr[0]), then we can no longer jump.

From starting indices i = 1 and i = 2, we can jump to i = 3 for the first time, and then we can't jump anymore.

From start index i = 3, we can do the first jump to i = 4, so we have reached the end.

Starting from the start index i = 4, we have reached the end.

In total there are 2 different starting indices i = 3 and i = 4, we can reach the end with some amount
jump.


Example 2:
Input: arr = [2,3,1,1,4]
Output: 3
explain:
From start index i = 0, we jump to i = 1, i = 2, i = 3:
In our first jump (odd), we first jump to i = 1 because arr[1] is the smallest of [arr[1], arr[2], arr[3], arr[4]] value, that is, greater than or equal to arr[0].

During our second jump (even number), we jump from i = 1 to i = 2, because arr[2] is the largest value in [arr[2], arr[3], arr[4]] that is less than or equal to arr[1]. arr[3] is also the max value, but 2 is a smaller index, so we can only jump to i = 2 and not i = 3
During our 3rd jump (odd), we jump from i = 2 to i = 3, because arr[3] is the smallest value 2 in [arr[3], arr[4]] greater than or equal to arr[ ].

We can't jump from i = 3 to i = 4, so starting index i = 0 is not good.

Similarly, we can derive:
From start index i = 1, we jump to i = 4, so we reach the end.

From starting index i = 2, we jump to i = 3, and then we can't jump anymore.

From start index i = 3, we jump to i = 4, so we reach the end.

Starting from the starting index i = 4, we have reached the end.

There are a total of 3 different starting indices i = 1, i = 3 and i = 4, we can use some
Number of jumps.


Example 3:
Input: arr = [5,1,3,4,2]
Output: 3
Explanation: We can start from index 1, 2 and 4 to reach the end.


constraint:
`1 <= arr.length <= 2 * 104`
`0 <= arr[i] < 105`",0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", return the maximum perimeter of a triangle with nonzero area consisting of three lengths. Returns '0' if it is not possible to form any triangle with non-zero area.


Example 1:
Input: nums = [2,1,2]
Output: 5

Example 2:
Input: nums = [1,2,1]
output: 0

Example 3:
Input: nums = [3,2,3,4]
Output: 10

Example 4:
Input: nums = [3,6,2,3]
Output: 8

constraint:
`3 <= nums.length <= 104`
`1 <= nums[i] <= 106`",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"" sorted in non-decreasing order, return an array of the squares of each number sorted in non-decreasing order.


Example 1:
Input: nums = [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Explanation: After squaring, the array becomes [16,1,0,9,100].

After sorting it becomes [0,1,9,16,100].


Example 2:
Input: nums = [-7,-3,2,3,11]
Output: [4,9,9,49,121]

constraint:
`1 <= nums.length <= 104`
`-104 <= nums[i] <= 104`
`nums` in non-descending order.

Follow up: Squaring each element and sorting the new array is simple enough, can you find a `O(n)` solution using a different approach?",1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr, returns the length of the largest sized turbulent subarray of arr.

A subarray is turbulent if the comparison sign is flipped between every pair of adjacent elements in the subarray.

More formally, if and only if:
For `i <= k < j`:

`arr[k] > arr[k + 1]` when `k` is odd, and
`arr[k] < arr[k + 1]` when `k` is even.

Or, for ""i <= k < j"":

`arr[k] > arr[k + 1]` when `k` is even, and
When `k` is odd, `arr[k] < arr[k + 1]`.


Example 1:
Input: arr = [9,4,2,10,7,8,8,1,9]
Output: 5
Explanation: arr[1] > arr[2] < arr[3] > arr[4] < arr[5]

Example 2:
Input: arr = [4,8,12,16]
Output: 2

Example 3:
Input: arr = [100]
Output: 1

constraint:
`1 <= arr.length <= 4 * 104`
`0 <= arr[i] <= 109`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `root` of a binary tree with `n` nodes, where each `node` in the tree has `node.val` coins, for a total of `n` coins.

In one step, we can select two adjacent nodes and move a coin from one node to the other. (Movement may be from parent to child, or from child to parent.)
Returns the number of moves required to make each node have exactly one coin.


Example 1:
Input: root = [3,0,0]
Output: 2
Explanation: Starting at the root of the tree, we move a coin to its left child and a coin to its right child.


Example 2:
Input: root = [0,3,0]
Output: 3
Explanation: Starting from the left child of the root node, we move two coins to the root node [take two moves]. We then move a coin from the root of the tree to the right child.


Example 3:
Input: root = [1,0,2]
Output: 2

Example 4:
Input: root = [1,0,0,null,3]
Output: 4

constraint:
The number of nodes in the tree is ""n"".

`1 <= n <= 100`
`0 <= Node.val <= n`
The sum of `Node.val` is `n`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a 2D ""grid"", there are 4 types of squares:
`1` represents the starting square. There is exactly one starting square.

'2' represents the end square. Exactly one end block.

'0' represents an empty square we can walk through.

`-1` represents a barrier that we cannot cross.

Returns the number of 4-way walks from the start block to the end block, i.e. walking through each unobstructed block exactly once.


Example 1:
Input: [[1,0,0,0],[0,0,0,0],[0,0,2,-1]]
Output: 2
Explanation: We have the following two paths:
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0), (2,0),(2,1),(2,2)
2. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3), (1,3),(1,2),(2,2)

Example 2:
Input: [[1,0,0,0],[0,0,0,0],[0,0,0,2]]
Output: 4
Explanation: We have the following four paths:
1. (0,0),(0,1),(0,2),(0,3),(1,3),(1,2),(1,1),(1,0), (2,0),(2,1),(2,2),(2,3)
2. (0,0),(0,1),(1,1),(1,0),(2,0),(2,1),(2,2),(1,2), (0,2),(0,3),(1,3),(2,3)
3. (0,0),(1,0),(2,0),(2,1),(2,2),(1,2),(1,1),(0,1), (0,2),(0,3),(1,3),(2,3)
4. (0,0),(1,0),(2,0),(2,1),(1,1),(0,1),(0,2),(0,3), (1,3),(1,2),(2,2),(2,3)

Example 3:
Input: [[0,1],[2,0]]
output: 0
explain:
No path can be traveled on every empty square exactly once.

Note that the start and end squares can be anywhere on the grid.

notes:
`1 <= grid.length * grid[0].length <= 20`",0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Create a time-based key-value store class ""TimeMap"" that supports two operations.

1. `set(string key, string value, integer timestamp)`
Stores a ""key"" and ""value"", and a given ""timestamp"".

2. `get(string key, integer timestamp)`
Returns a value such that set(key, value, timestamp_prev) was called before, where timestamp_prev <= timestamp.

If there are multiple such values, it returns the one with the largest `timestamp_prev`.

Returns an empty string (`""""`) if there is no value.


Example 1:
Inputs: inputs = [""TimeMap"",""set"",""get"",""get"",""set"",""get"",""get""], inputs = [[],[""foo"",""bar"",1 ],[""foo"",1],[""foo"",3],[""foo"", ""bar2"",4],[""foo"",4],[""foo"",5]]
Output: [null,null,""bar"",""bar"",null,""bar2"",""bar2""]
explain:
time graph kv;
kv.set(""foo"", ""bar"", 1); // store key ""foo"" and value ""bar"" and timestamp = 1
kv.get(""foo"", 1); // output ""bar""
kv.get(""foo"", 3); // Output ""bar"" Because neither timestamp 3 nor timestamp 2 has a value corresponding to foo, so only the value of timestamp 1 is ""bar""
kv.set(""foo"", ""bar2"", 4);
kv.get(""foo"", 4); // output ""bar2""
kv.get(""foo"", 5); // output ""bar2""

Example 2:
Input: inputs = [""TimeMap"",""set"",""set"",""get"",""get"",""get"",""get"",""get""], inputs = [[],[""love"","" high"",10],[""love"",""low"",20],[""love"",5],[""love"",10],[""love"",15],[""love"",20], [""Love"", 25]]
Output: [null,null,null,"""",""high"",""high"",""low"",""low""]
notes:
All key/value strings are lowercase.

All key/value strings are in the range ""[1, 100]"" in length
All TimeMap.set operations have strictly increasing timestamps.

`1 <= timestamp <= 10^7`
Each test case will call the ""TimeMap.set"" and ""TimeMap.get"" functions a total of ""120000"" times (merged).",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""A"", find the number of triples at index (i, j, k) such that:
`0 <= i < A.length`
`0 <= j < A.length`
`0 <= k < A.length`
`A[i] & A[j] & A[k] == 0`, where `&` represents the bitwise AND operator.


Example 1:
Input: [2,1,3]
Output: 12
Explanation: We can choose the following i, j, k triplets:
(i=0, j=0, k=1) : 2 & 2 & 1
(i=0, j=1, k=0) : 2 & 1 & 2
(i=0, j=1, k=1) : 2 & 1 & 1
(i=0, j=1, k=2) : 2 & 1 & 3
(i=0, j=2, k=1) : 2 & 3 & 1
(i=1, j=0, k=0) : 1 & 2 & 2
(i=1, j=0, k=1) : 1 & 2 & 1
(i=1, j=0, k=2) : 1 & 2 & 3
(i=1, j=1, k=0) : 1 & 1 & 2
(i=1, j=2, k=0) : 1 & 3 & 2
(i=2, j=0, k=1) : 3 & 2 & 1
(i=2, j=1, k=0) : 3 & 1 & 2
notes:
`1 <= A.length <= 1000`
`0 <= A[i] < 2^16`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a country where train travel is popular, you plan some train trips a year in advance. The days of the year you will be traveling are given in the array ""days"". Each day is an integer from ""1"" to ""365"".

Train tickets are sold in 3 different ways:
1-day passes are sold at `cost[0]` USD;
7-day passes are sold at `cost[1]` USD;
A 30-day pass is priced at `cost[2]`.

The pass allows for that many consecutive days of travel. For example, if we get a 7-day pass on day 2, we can travel for 7 days: days 2, 3, 4, 5, 6, 7 and 8.

Given a list of 'days', return the minimum number of dollars you need to travel each day.


Example 1:
Input: Days = [1,4,6,7,8,20], Cost = [2,7,15]
Output: 11
explain:
For example, here's a way to buy a pass that lets you travel on a travel plan:
On day 1, you buy a 1-day pass at costs[0] = $2, which covers day 1.

On day 3, you buy a 7-day pass at costs[1] = $7, covering days 3, 4, ..., 9.

On day 20, you buy a 1-day pass at costs[0] = $2, covering day 20.

You spent a total of $11 covering all days of your trip.


Example 2:
Input: Days = [1,2,3,4,5,6,7,8,9,10,30,31], Cost = [2,7,15]
Output: 17
explain:
For example, here's a way to buy a pass that lets you travel on a travel plan:
On day 1, you buy a 30-day pass at costs[2] = $15, which covers days 1, 2, ..., 30.

On day 31, you purchase a 1-day pass that covers day 31 at costs[0] = $2.

You spent a total of $17 covering all days of your trip.

notes:
`1 <= days. length <= 365`
`1 <= days[i] <= 365`
`days` is strictly increasing.

`costs. length == 3`
`1 <= cost[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""a"" and ""b"", return any string ""s"" that satisfies the following conditions:
`s` has length `a + b` and contains exactly `a` `'a'` letters and `b` `'b'` letters,
the substring ""aaa"" does not occur in ""s"", and
The substring ""bbb"" does not occur in ""s"".


Example 1:
Input: a = 1, b = 2
Output: ""abb""
Explanation: ""abb"", ""bab"", and ""bba"" are all correct answers.


Example 2:
Input: a = 4, b = 1
Output: ""aabaa""

constraint:
`0 <= a, b <= 100`
Guarantees that such an `s` exists for a given `a` and `b`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an array of integers ""A"" and an array of queries ""queries"".

For the ith query val = queries[i][0], index = queries[i][1], we add val to A[index]. Then, the answer to the ith query is the sum of the even values ​​of A.

(Here, given `index = queries[i][1]` is a 0-based index, each query permanently modifies the array `A`.)
Returns answers to all queries. Your answer array should have answer[i] as the answer to the ith query.


Example 1:
Input: A = [1,2,3,4], query = [[1,0],[-3,1],[-4,0],[2,3]]
Output: [8,6,2,4]
explain:
In the beginning, the array is [1,2,3,4].

After adding 1 to A[0], the array is [2,2,3,4], and the sum of even numbers is 2 + 2 + 4 = 8.

After adding -3 to A[1], the array is [2,-1,3,4], and the sum of even numbers is 2 + 4 = 6.

After adding -4 to A[0], the array is [-2,-1,3,4], and the sum of even numbers is -2 + 4 = 2.

After adding 2 to A[3], the array is [-2,-1,3,6], and the sum of even numbers is -2 + 6 = 4.

notes:
`1 <= A.length <= 10000`
`-10000 <= A[i] <= 10000`
`1 <= queries.length <= 10000`
`-10000 <= query[i][0] <= 10000`
`0 <= queries[i][1] < A.length`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two closed interval lists, `firstList` and `secondList`, where `firstList[i] = [starti, endi]` and `secondList[j] = [startj, endj]`. Each interval list is pairwise disjoint and in sorted order.

Returns the intersection of these two interval lists.

The closed interval ""[a, b]"" (where ""a < b"") represents the set of real numbers ""x"" where ""a <= x <= b"".

The intersection of two closed intervals is a set of real numbers that is either empty or represented as a closed interval. For example, the intersection of ""[1, 3]"" and ""[2, 4]"" is ""[2, 3]"".


Example 1:
Input: firstList = [[0,2],[5,10],[13,23],[24,25]], secondList = [[1,5],[8,12],[15,24] ,[25,26]]
Output: [[1,2],[5,5],[8,10],[15,23],[24,24],[25,25]]

Example 2:
Input: firstList = [[1,3],[5,9]], secondList = []
output: []

Example 3:
Input: firstList = [], secondList = [[4,8],[10,12]]
output: []

Example 4:
Input: firstList = [[1,7]], secondList = [[3,10]]
Output: [[3,7]]

constraint:
`0 <= firstList.length, secondList.length <= 1000`
`firstList.length + secondList.length >= 1`
`0 <= start < end <= 109`
`endi < starti+1`
`0 <= startj < endj <= 109`
`endj < startj+1`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, compute a vertical order traversal of the binary tree.

For each node at position ""(row, col)"", its left and right child nodes will be at positions ""(row + 1, col - 1)"" and ""(row + 1, col + 1)"" respectively. The root of the tree is at ""(0, 0)"".

A vertical order traversal of a binary tree is a top-to-bottom sorted list of each column index starting with the leftmost column and ending with the rightmost column. There may be multiple nodes in the same row and column. In this case, the nodes are sorted by their values.

Returns a vertical order traversal of a binary tree.


Example 1:
Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
explain:
Column-1: Only node 9 is in this column.

Column 0: Nodes 3 and 15 are in this column from top to bottom.

Column 1: Only node 20 is in this column.

Column 2: Only node 7 is in this column.


Example 2:
Input: root = [1,2,3,4,5,6,7]
Output: [[4],[2],[1,5,6],[3],[7]]
explain:
Column-2: Only node 4 is in this column.

Column-1: Only node 2 is in this column.

Column 0: Nodes 1, 5, and 6 are in this column.

          1 is at the top, so it comes first.

          5 and 6 are in the same position (2, 0), so we sort them by their value, 5 before 6.

Column 1: Only node 3 is in this column.

Column 2: Only node 7 is in this column.


Example 3:
Input: root = [1,2,3,4,6,5,7]
Output: [[4],[2],[1,5,6],[3],[7]]
explain:
The situation is exactly the same as example 2, but with nodes 5 and 6 swapped.

Note that the solution remains the same, since 5 and 6 are in the same position and should be sorted by their values.


constraint:
The number of nodes in the tree is in the range ""[1, 1000]"".

`0 <= Node.val <= 1000`",0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, each node has a value from ""0"" to ""25"", representing the letters ""a"" to ""z"": value ""0"" for ""a"" and value 1 for 'b' ,So on and so forth.

Find the lexicographically smallest string from the leaves of this tree to the root.

(As a reminder, any shorter prefix of a string is lexicographically smaller: for example, ""ab"" is lexicographically smaller than ""aba"". A node's leaf is a node with no children.)

Example 1:
Input: [0,1,2,3,4,3,4]
Output: ""dba""

Example 2:
Input: [25,1,3,1,3,0,2]
Output: ""adz""

Example 3:
Input: [2,2,1,null,1,0,null,0]
Output: ""abc""
notes:
The number of nodes in a given tree will be between '1' and '8500'.

Each node in the tree has a value between ""0"" and ""25"".",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The array form of the integer ""num"" is an array representing its digits in left-to-right order.

For example, for num = 1321, its array form is [1,3,2,1].

Given `num`, an array form of integers, and an integer `k`, return the array form of integers `num + k`.


Example 1:
Input: num = [1,2,0,0], k = 34
Output: [1,2,3,4]
Explanation: 1200 + 34 = 1234

Example 2:
Input: num = [2,7,4], k = 181
Output: [4,5,5]
Explanation: 274 + 181 = 455

Example 3:
Input: num = [2,1,5], k = 806
Output: [1,0,2,1]
Explanation: 215 + 806 = 1021

Example 4:
Input: num = [9,9,9,9,9,9,9,9,9,9], k = 1
Output: [1,0,0,0,0,0,0,0,0,0,0]
Explanation: 9999999999 + 1 = 10000000000

constraint:
`1 <= num.length <= 104`
`0 <= num[i] <= 9`
`num` does not contain any leading zeros other than zero itself.

`1 <= k <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of string equations representing relationships between variables, each string ""equations[i]"" has length ""4"" and takes one of two different forms: ""a==b"" or ""a !=b”. Here, `a` and `b` are lowercase letters (not necessarily different) representing single-letter variable names.

Returns true if and only if integers can be assigned to variable names to satisfy all given equations.


Example 1:
Input: [""a==b"", ""b!=a""]
output: error
Explanation: If we specify a = 1 and b = 1, the first equation is satisfied but not the second. Unable to assign variables to satisfy two equations.


Example 2:
Input: [""b==a"", ""a==b""]
output: true
Explanation: We can specify a = 1 and b = 1 to satisfy both equations.


Example 3:
Input: [""a==b"", ""b==c"", ""a==c""]
output: true

Example 4:
Input: [""a==b"",""b!=c"",""c==a""]
output: error

Example 5:
Input: [""c==c"", ""b==d"", ""x!=z""]
output: true
notes:
`1 <= equations.length <= 500`
`equation[i].length == 4`
`equations[i][0]` and `equations[i][3]` are lowercase
`equations[i][1]` is `'='` or `'!'`
`equations[i][2]` is `'='`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a damaged calculator with numbers on the display, we can perform two operations:
Double: multiply the number on the display by 2, or;
Decrement: Subtract 1 from the number on the display.

Initially, the calculator displays the number ""X"".

Returns the minimum number of operations required to display the number ""Y"".


Example 1:
Input: X=2, Y=3
Output: 2
Explanation: First use double operation and then subtract operation {2 -> 4 -> 3}.


Example 2:
Input: X=5, Y=8
Output: 2
Explanation: Use decrement followed by doubling {5 -> 4 -> 8}.


Example 3:
Input: X=3, Y=10
Output: 3
Explanation: Use double, decrement and double {3 -> 6 -> 5 -> 10}.


Example 4:
Input: X = 1024, Y = 1
Output: 1023
Explanation: Use the self-decrement operation 1023 times.

notes:
`1 <= X <= 10^9`
`1 <= Y <= 10^9`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of positive integers, a (consecutive, not necessarily distinct) subarray of ""A"" is said to be ""good"" if the number of distinct integers in the subarray is exactly ""K"".

(For example, `[1,2,3,1,2]` has `3` distinct integers: `1`, `2`, and `3`.)
Return the number of good subarrays of `A`.


Example 1:
Input: A = [1,2,1,2,3], K = 2
Output: 7
Explanation: A subarray consisting of 2 different integers: [1,2], [2,1], [1,2], [2,3], [1,2,1], [2,1, 2], [1,2,1,2].


Example 2:
Input: A = [1,2,1,3,4], K = 3
Output: 3
Explanation: The subarray consists of exactly 3 different integers: [1,2,1,3], [2,1,3], [1,3,4].

notes:
`1 <= A.length <= 20000`
`1 <= A[i] <= A.length`
`1 <= K <= A.length`",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a binary tree, the root node has depth ""0"" and each child node of depth ""k"" has depth ""k+1"".

Two nodes of a binary tree are cousins ​​if they have the same depth but different parents.

We get the ""root"" of a binary tree with unique values, and the values ​​""x"" and ""y"" for two different nodes in the tree.

Returns ""true"" if and only if the nodes corresponding to values ​​""x"" and ""y"" are cousins.


Example 1:
Input: root = [1,2,3,4], x = 4, y = 3
output: error

Example 2:
Input: root = [1,2,3,null,4,null,5], x = 5, y = 4
output: true

Example 3:
Input: root = [1,2,3,null,4], x = 2, y = 3
output: error

constraint:
The number of nodes in the tree will be between '2' and '100'.

Each node has a unique integer value from ""1"" to ""100"".",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` `grid` where each cell can have one of the following three values:
'0' represents an empty cell,
`1` for a fresh orange, or
`2` stands for rotten orange.

Every minute, any fresh orange that is adjacent to a rotten orange in 4 directions will become rotten.

Returns the minimum number of minutes that must elapse before all cells are empty of fresh orange. If this is not possible, return ""-1"".


Example 1:
Input: Grid = [[2,1,1],[1,1,0],[0,1,1]]
Output: 4

Example 2:
Input: grid = [[2,1,1],[0,1,1],[1,0,1]]
Output: -1
Explanation: The orange in the bottom left corner (row 2, column 0) will never rot because rot only happens in 4 directions.


Example 3:
Input: Grid = [[0,2]]
output: 0
Explanation: Since there are no fresh oranges at minute 0, the answer is 0.


constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 10`
`grid[i][j]` is `0`, `1` or `2`.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an array ""A"" consisting only of 0s and 1s, a ""K"" bit flip consists of selecting a (consecutive) subarray of length ""K"" while changing each 0 in the subarray to a 1 and the Each 1 is changed to a 0.

Returns the minimum number of ""K"" bit flips required so that there are no 0's in the array. Returns ""-1"" if not possible.


Example 1:
Input: A = [0,1,0], K = 1
Output: 2
Explanation: Flip A[0], then flip A[2].


Example 2:
Input: A = [1,1,0], K = 2
Output: -1
Explanation: No matter how we flip a subarray of size 2, we cannot make the array [1,1,1].


Example 3:
Input: A = [0,0,0,1,0,1,1,0], K = 3
Output: 3
explain:
Flip A[0],A[1],A[2]: A becomes [1,1,1,1,0,1,1,0]
Flip A[4],A[5],A[6]: A becomes [1,1,1,1,1,0,0,0]
Flip A[5],A[6],A[7]: A becomes [1,1,1,1,1,1,1,1]
notes:
`1 <= A.length <= 30000`
`1 <= K <= A.length`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of non-negative integers, the array is square if for each pair of adjacent elements their sum is a perfect square.

Returns the number of square permutations of A. Two permutations ""A1"" and ""A2"" differ if and only if there exists some index ""i"" such that ""A1[i] != A2[i]"".


Example 1:
Input: [1,17,8]
Output: 2
explain:
[1,8,17] and [17,8,1] are valid permutations.


Example 2:
Input: [2,2,2]
Output: 1
notes:
`1 <= A.length <= 12`
`0 <= A[i] <= 1e9`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a town, there are ""N"" individuals from ""1"" to ""N"". Rumor has it that one of these men is secretly the town judge.

If a town judge exists, then:
The town judge doesn't trust anyone.

Everyone (except the town judge) trusts the town judge.

There is exactly one person that satisfies properties 1 and 2.

Given ""trust"", this is a pair ""trust[i] = [a, b]"", indicating that the person labeled ""a"" trusts the person labeled ""b"".

If the town judge exists and is identifiable, returns the town judge's label. Otherwise, return ""-1"".


Example 1:
Input: N = 2, Trust = [[1,2]]
Output: 2

Example 2:
Input: N = 3, trust = [[1,3],[2,3]]
Output: 3

Example 3:
Input: N = 3, trust = [[1,3],[2,3],[3,1]]
Output: -1

Example 4:
Input: N = 3, trust = [[1,2],[2,3]]
Output: -1

Example 5:
Input: N = 4, trust = [[1,3],[1,4],[2,3],[2,4],[4,3]]
Output: 3

constraint:
`1 <= N <= 1000`
`0 <= trust.length <= 10^4`
`trust[i].length == 2`
`trust[i]` are all different
`trust[i][0] != trust[i][1]`
`1 <= trust[i][0], trust[i][1] <= N`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get the ""root"" node of the largest tree: every node of this tree has a value greater than any other value in its subtree.

As in the previous question, the given tree is constructed recursively from the list ""A"" (""root = Construct(A)""), using the following ""Construct(A)"" routine:
Returns ""null"" if ""A"" is empty.

Otherwise, let A[i] be the largest element of A . Create a `root` node with value `A[i]`.

The left child of `root` will be `Construct([A[0], A[1], ..., A[i-1]])`
The right child of `root` will be `Construct([A[i+1], A[i+2], ..., A[A.length - 1]])`
Returns ""root"".

Note that we don't get A directly, only the root node `root = Construct(A)`.

Suppose ""B"" is a copy of ""A"" with value ""val"" appended. ""B"" is guaranteed to have unique values.

Returns ""construct(B)"".


Example 1:
Input: root = [4,1,3,null,null,2], val = 5
Output: [5,4,null,1,3,null,null,2]
Explanation: A = [1,4,2,3], B = [1,4,2,3,5]

Example 2:
Input: root = [5,2,4,null,1], val = 3
Output: [5,2,4,null,1,null,3]
Explanation: A = [2,1,5,4], B = [2,1,5,4,3]

Example 3:
Input: root = [5,2,3,null,1], val = 4
Output: [5,2,4,null,1,3]
Explanation: A = [2,1,5,3], B = [2,1,5,3,4]

constraint:
`1 <= B.length <= 100`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an ""8 x 8"" board, there are exactly one white rook ""R"" and some white bishops ""B"", black pawns ""p"" and empty squares ""."".

When a rook moves, it chooses one of four cardinal directions (north, east, south or west) and moves in that direction until it chooses to stop, reach the edge of the board, capture a black pawn, or be bishopred by a white pawn. If the rook captures a pawn on its turn, the rook is considered to be attacking the pawn. The available capture count for a white rook is the number of pawns the rook is attacking.

Returns the number of available catches for the white car.


Example 1:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."","". "",""p"",""."",""."",""."","".""],[""."",""."",""."",""R"",""."",""."",""."" "",""p""],[""."",""."",""."",""."",""."",""""."","".""],[""."",""."", ""."" ,""."",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."", ""."" ,"".""],[""."", ""."", ""."", ""."", ""."", ""."", ""."", "".""],[""."", ""."","","" ."",""."",""."",""."",""."","".""]]
Output: 3
Explanation: In this example, the rook is attacking all pawns.


Example 2:
Input: board = [[""."",""."",""."",""."",""."","".""."","".""],[""."",""p"",""p "", ""p"",""p"",""p"",""."","".""],[""."",""p"",""p"",""B"",""p"",""p"","". "","".""],[""."",""p"",""B"",""R"",""B"",""p"",""."","".""],[""."",""p"", ""p"",""B"",""p"",""p"",""."","".""],[""."",""p"",""p"",""p"",""p"",""p"", ""."","".""],[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."" "",""."",""."",""."",""."",""."","".""]]
output: 0
Explanation: The bishop prevents the rook from attacking any pawn.


Example 3:
Input: board = [[""."",""."",""."",""."",""."",""."",""."","".""],[""."",""."","". "",""p"",""."",""."",""."","".""],[""."",""."",""."",""p"",""."",""."",""."" "","".""],[""p"",""p"",""."",""R"",""."",""p"",""B"","".""],[""."",""."", ""."", ""."", ""."", ""."", ""."", "".""], [""."", ""."", ""."", ""B"", ""."", ""."", ""."","".""],[""."",""."",""."",""p"",""."",""."",""."","".""],["".,""."" ,""."",""."",""."",""."",""."","".""]]
Output: 3
Interpretation: The rook is attacking the pawns at positions b5, d6, and f5.


constraint:
`board.length == 8`
`board[i].length == 8`
`board[i][j]` is `'R'`, `'.'`, `'B'` or `'p'`
Only one cell with `board[i][j] == 'R'`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `N` piles of stones arranged in a row. Heap `i` contains `stones[i]` stones.

A move consisting of merging exactly ""K"" consecutive piles into one pile has a cost equal to the total number of stones in the ""K"" pile.

Find the minimum cost of merging all piles of stones into one pile. Returns ""-1"" if not possible.


Example 1:
Input: Stone = [3,2,4,1], K = 2
Output: 20
explain:
We start with [3, 2, 4, 1] .

We merge [3, 2] with a cost of 5, leaving [5, 4, 1].

We merge [4, 1] with a cost of 5, leaving [5, 5].

We merge [5, 5] at a cost of 10, leaving [10].

The total cost is 20, which is the lowest possible cost.


Example 2:
Input: Stone = [3,2,4,1], K = 3
Output: -1
Explanation: After any merge operation, there are 2 heaps left and we cannot merge any more. So this task is impossible.


Example 3:
Input: Stone = [3,5,1,2,6], K = 3
Output: 25
explain:
We start with [3, 5, 1, 2, 6] .

We merge [5, 1, 2] with a cost of 8, leaving [3, 8, 6].

We merge [3, 8, 6] at a cost of 17, leaving [17].

The total cost is 25, which is the lowest possible value.

notes:
`1 <= stones.length <= 30`
`2 <= K <= 30`
`1 <= stones[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""grid"" of size ""N x N"", each cell of the grid has a light that is initially turned off.

You also get an array of lamp positions ""lamps"", where ""lamps[i] = [rowi, coli]"" means that the lamp at ""grid[rowi][coli]"" is on. When a light is turned on, it illuminates the cell it's in and all other cells in the same row, column, or diagonal.

In the end, you will have an array of queries ""queries"" where ""queries[i] = [rowi, coli]"". For the ith query, determine whether grid[rowi][coli] is illuminated. After answering the ith query, turn off the light at grid[rowi][coli] and its 8 neighbors (if any). A light is adjacent if its cells share an edge or a corner with grid[rowi][coli] .

Return an integer array ans where ans[i] should be 1 if the light in the ith query is illuminated, or 0 if the light is not illuminated.


Example 1:
Input: N = 5, Lights = [[0,0],[4,4]], Query = [[1,1],[1,0]]
Output: [1,0]
Explanation: We have an initial mesh with all lights off. In the image above, we see the grid after turning on the light at grid[0][0] and then at grid[4][4].

The 0th query asks if the light at grid[1][1] is on (the blue square). It is illuminated, so set ans[0] = 1. Then, we turn off all the lights in the red square.

The first query asks if the light at grid[1][0] is on (the blue square). It is not illuminated, so set ans[1] = 0. Then, we turn off all the lights in the red rectangle.


Example 2:
Input: N = 5, Lights = [[0,0],[4,4]], Query = [[1,1],[1,1]]
output: [1,1]

Example 3:
Input: N = 5, Lights = [[0,0],[0,4]], Query = [[0,4],[0,1],[1,4]]
Output: [1,1,0]

constraint:
`1 <= N <= 109`
`0 <= lamps.length <= 20000`
`lights[i].length == 2`
`0 <= lights[i][j] < N`
`0 <= queries.length <= 20000`
`query[i].length == 2`
`0 <= query[i][j] < N`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings ""A"" consisting only of lowercase letters, return a list of all characters that occur in all strings in the list (including duplicates). For example, if a character occurs 3 times in all strings but not 4 times, you need to include that character 3 times in the final answer.

You can return answers in any order.


Example 1:
Input: [""bella"", ""label"", ""roller""]
output: [""e"", ""l"", ""l""]

Example 2:
Input: [""cool"",""lock"",""cook""]
Output: [""c"",""o""]
notes:
`1 <= A.length <= 100`
`1 <= A[i].length <= 100`
`A[i][j]` is a lowercase letter",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, determine whether it is valid.

The string s is valid if, starting with the empty string `t = """"`, you can convert `t` to `s` any number of times by doing the following:
Insert the string `""abc""` anywhere in `t`. More formally, `t` becomes `tleft + ""abc"" + tright`, where `t == tleft + tright`. Note that `tleft` and `tright` may be empty.

Returns true if s is a valid string, false otherwise.


Example 1:
Input: s = ""aabcbc""
output: true
explain:
"""" -> ""abc"" -> ""aabcbc""
Therefore, ""aabcbc"" is valid.


Example 2:
Input: s = ""abcabcababcc""
output: true
explain:
"""" -> ""abc"" -> ""abcabc"" -> ""abcabcabc"" -> ""abcabcababcc""
Therefore, ""abcabcababcc"" is valid.


Example 3:
Input: s = ""abccba""
output: error
Explanation: It is not possible to get ""abccba"" using this operation.


Example 4:
Input: s = ""cababc""
output: error
Explanation: It is not possible to get ""cababc"" using this operation.


constraint:
`1 <= s.length <= 2 * 104`
`s` consists of the letters `'a'`, `'b'` and `'c'",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of 0s and 1s, we can change at most ""K"" values ​​from 0 to 1.

Returns the length of the longest (contiguous) subarray containing only 1s.

Example 1:
Input: A = [1,1,1,0,0,0,1,1,1,1,0], K = 2
Output: 6
explain:
[1,1,1,0,0,1,1,1,1,1,1]
Bold numbers flip from 0 to 1. The longest subarray is underlined.


Example 2:
Input: A = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], K = 3
Output: 10
explain:
[0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bold numbers flip from 0 to 1. The longest subarray is underlined.

notes:
`1 <= A.length <= 20000`
`0 <= K <= A.length`
`A[i]` is `0` or `1`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of integers, we must modify the array as follows: we select an ""i"" and replace ""A[i]"" with ""-A[i]"", and repeat this process ""K"" total times . (We may select the same index `i` multiple times.)
Returns the largest possible sum of arrays modified in this way.


Example 1:
Input: A = [4,2,3], K = 1
Output: 5
Explanation: Selecting index (1,), A becomes [4,-2,3].


Example 2:
Input: A = [3,-1,0,2], K = 3
Output: 6
Explanation: Selecting indices (1, 2, 2), A becomes [3,1,0,2].


Example 3:
Input: A = [2,-3,-1,5,-4], K = 2
Output: 13
Explanation: Selecting index (1, 4), A becomes [2,3,-1,5,4].

notes:
`1 <= A.length <= 10000`
`1 <= K <= 10000`
`-100 <= A[i] <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In general, the factorial of a positive integer n is the product of all positive integers less than or equal to n. For example, ""factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1"".

Instead, we make a clumsy factorial: using the integers in descending order, we replace the multiplication operation with one with a fixed rotation: multiply (*), divide (/), add (+), and subtract (-) in that order.

For example, `clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1`. However, these operations are still applied using the usual order of arithmetic operations: we perform all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed from left to right.

Also, the division we're using is floor division, making 10 * 9 / 8 equal to 11. This guarantees that the result is an integer.

`Implements the clumsy` function defined above: given an integer `N`, it returns the clumsy factorial of `N`.


Example 1:
Input: 4
Output: 7
Explanation: 7 = 4 * 3 / 2 + 1

Example 2:
Input: 10
Output: 12
Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
notes:
`1 <= N <= 10000`
`-2^31 <= answer <= 2^31 - 1` (The answer is guaranteed to fit in a 32-bit integer.)",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a row of dominoes, `A[i]` and `B[i]` represent the top and bottom halves of the ith domino. (A domino is a tile with two numbers, from 1 to 6 - one for each half of the tile.)
We can rotate the ""it"" domino so that ""A[i]"" and ""B[i]"" exchange values.

Returns the minimum number of rotations such that all values ​​in ""A"" are the same, or all values ​​in ""B"" are the same.

Returns ""-1"" if it cannot be completed.


Example 1:
Input: A = [2,1,2,4,2,2], B = [5,2,6,2,3,2]
Output: 2
explain:
The first diagram represents the dominoes given by A and B: before we do any rotations.

If we rotate the second and fourth dominoes, we can make each value in the top row equal to 2, as shown in the second diagram.


Example 2:
Input: A = [3,5,1,2,3], B = [3,6,3,3,4]
Output: -1
explain:
In this case, it is impossible to rotate the dominoes so that a row of values ​​is equal.


constraint:
`2 <= A.length == B.length <= 2 * 104`
`1 <= A[i], B[i] <= 6`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a preordered array of integers representing a preordered traversal of a BST (i.e. Binary Search Tree), build the tree and return its root.

Guaranteed to always find a binary search tree that satisfies the given requirements for a given test case.

A binary search tree is a binary tree in which, for each node, any descendant of ""Node.left"" has a value strictly less than ""Node.val"" and any descendant of ""Node.right"" has a value strictly greater than ""Node. "".val`.

The pre-order traversal of the binary tree first displays the value of the node, then traverses `Node.left`, and then traverses `Node.right`.


Example 1:
Input: preorder = [8,5,1,7,10,12]
Output: [8,5,10,1,7,null,12]

Example 2:
Input: preorder = [1,3]
Output: [1,null,3]

constraint:
`1 <= preorder.length <= 100`
`1 <= preorder[i] <= 108`
All values ​​of `preorder` are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Every non-negative integer ""N"" has a binary representation. For example, ""5"" can be represented in binary as ""101"", ""11"" can be represented in binary as ""1011"", and so on. Note that there are no leading zeros in any binary representation other than ""N=0"".

The complement of the binary representation is the binary number you get when you change each ""1"" to a ""0"" and vice versa. For example, the complement of ""101"" in binary is ""010"" in binary.

For a given number ""N"" in base 10, returns the one's complement of its binary representation as a base 10 integer.


Example 1:
Input: 5
Output: 2
Explanation: The binary of 5 is ""101"", and the two's complement is ""010"", which is 2 in decimal.


Example 2:
Input: 7
output: 0
Explanation: The binary number of 7 is ""111"", and the complement binary number is ""000"", that is, the decimal number is 0.


Example 3:
Input: 10
Output: 5
Explanation: The binary of 10 is ""1010"", and the complement binary is ""0101"", that is, the decimal is 5.

notes:
`0 <= N < 10^9`
This question is the same as 476: https://leetcode.com/problems/number-complement/",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a list of songs where the ith song has a duration of time[i] seconds.

Returns the logarithm of the song whose total duration in seconds is divisible by ""60"". Formally, we need the number of indices `i`, `j` such that `i < j` and `(time[i] + time[j]) % 60 == 0`.


Example 1:
Input: time = [30,20,150,100,40]
Output: 3
Explanation: The total duration of the three pairs is divisible by 60:
(time[0] = 30, time[2] = 150): total duration 180
(time[1] = 20, time[3] = 100): total duration 120
(time[1] = 20, time[4] = 40): total duration 60

Example 2:
Input: time = [60,60,60]
Output: 3
Explanation: The total duration of all three pairs is 120, divisible by 60.


constraint:
`1 <= time.length <= 6 * 104`
`1 <= time[i] <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Packages on the conveyor belt must be shipped from one port to another within ""D"" days.

The ith package on the conveyor has weights[i]. Every day, we load the conveyor belt with packages (in the order given by ""weight""). We must not load more than the ship's maximum capacity.

Return the minimum weight capacity of the ship that will result in all packages on the conveyor belt being delivered within ""D"" days.


Example 1:
Input: Weights = [1,2,3,4,5,6,7,8,9,10], D = 5
Output: 15
Explanation: A ship capacity of 15 is the minimum capacity to ship all packages within 5 days, as follows:
Day 1: 1, 2, 3, 4, 5
Day 2: 6, 7
Day 3: 8
Day 4: 9
Day 5: 10
Note that the goods must be shipped in the order given, so use a ship with a capacity of 14 and divide the package into parts, such as (2, 3, 4, 5), (1, 6, 7), (8), ( 9) ), (10) are not allowed.


Example 2:
Input: weights = [3,2,2,4,1,4], D = 3
Output: 6
Explanation: A shipping capacity of 6 is the minimum capacity to ship all packages within 3 days, as follows:
Day 1: 3, 2
Day 2: 2, 4
Day 3: 1, 4

Example 3:
Input: weights = [1,2,3,1,1], D = 4
Output: 3
explain:
Day 1: 1
Day two: 2
Day 3: 3
Day 4: 1, 1

constraint:
`1 <= D <= weights.length <= 5 * 104`
`1 <= weights[i] <= 500`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer ""N"", return the number of positive integers less than or equal to ""N"" that have at least 1 repeated digit.


Example 1:
Input: 20
Output: 1
Explanation: The only positive number (<= 20) with at least 1 repeated digit is 11.


Example 2:
Input: 100
Output: 10
Explanation: Positive numbers (<=100) with at least 1 repeated digit are 11, 22, 33, 44, 55, 66, 77, 88, 99, and 100.


Example 3:
Input: 1000
Output: 262
notes:
`1 <= N <= 10^9`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr , returns true if we can divide the array into three non-empty parts with equal sums.

Formally, if we can find the indices `i + 1 < j` and `(arr[0] + arr[1] + ... + arr[i] == arr[i + 1] + arr[i + 2 ] + ... + arr[j - 1] == arr[j] + arr[j + 1] + ... + arr[arr.length - 1])`

Example 1:
Input: arr = [0,2,1,-6,6,-7,9,1,2,0,1]
output: true
Explanation: 0 + 2 + 1 = -6 + 6 - 7 + 9 + 1 = 2 + 0 + 1

Example 2:
Input: arr = [0,2,1,-6,6,7,9,-1,2,0,1]
output: error

Example 3:
Input: arr = [3,3,6,5,-2,2,5,1,-9,4]
output: true
Explanation: 3 + 3 = 6 = 5 - 2 + 2 + 5 + 1 - 9 + 4

constraint:
`3 <= arr.length <= 5 * 104`
`-104 <= arr[i] <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array values, where values[i] represents the value of the ith sightseeing point. The distance between two sightseeing spots ""i"" and ""j"" is ""j - i"".

The score for a pair (`i < j`) of attractions is `values[i] + values[j] + i - j`: the sum of the values ​​of the attractions minus the distance between them.

Returns the highest score for a pair of sightseeing spots.


Example 1:
Input: value = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11

Example 2:
Input: value = [1,2]
Output: 2

constraint:
`2 <= value. length <= 5 * 104`
`1 <= value[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `K`, you need to find the length of the smallest positive integer `N` such that `N` is divisible by `K` and `N` contains only the number `1`.

Returns the length of ""N"". If there is no such `N`, return -1.

Note: `N` may not fit in a 64-bit signed integer.


Example 1:
Input: K = 1
Output: 1
Explanation: The smallest answer is N = 1, which has length 1.


Example 2:
Input: K = 2
Output: -1
Explanation: There is no positive integer N divisible by 2.


Example 3:
Input: K = 3
Output: 3
Explanation: The smallest answer is N = 111, which has length 3.


constraint:
`1 <= K <= 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string ""S"" (a string consisting only of ""0"" and ""1"") and a positive integer ""N"" if and only if for each integer X from 1 to N, X's The binary representation is a substring of S


Example 1:
Input: S = ""0110"", N = 3
output: true

Example 2:
Input: S = ""0110"", N = 4
output: error
notes:
`1 <= S.length <= 1000`
`1 <= N <= 10^9`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a number ""N"", return a string consisting of ""0"" and ""1"" representing the value in base ""-2"" (minus two).

The returned string must have no leading zeros, unless the string is ""0"".


Example 1:
Input: 2
Output: ""110""
Explanation: (-2) ^ 2 + (-2) ^ 1 = 2

Example 2:
Input: 3
Output: ""111""
Explanation: (-2) ^ 2 + (-2) ^ 1 + (-2) ^ 0 = 3

Example 3:
Input: 4
Output: ""100""
Explanation: (-2) ^ 2 = 4
notes:
`0 <= N <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a linked list with head as the first node. Let's number the nodes in the list: `node_1, node_2, node_3, ...` and so on.

Each node may have the next larger value: for `node_i`, `next_larger(node_i)` is `node_j.val` such that `j > i`, `node_j.val > node_i.val`, and `j` is the smallest possible choice. If there is no such ""j"", the next larger value is ""0"".

Returns an integer array ""answer"", where ""answer[i] = next_larger(node_{i+1})"".

Note that in the example input (not output) below, an array such as ""[2,1,5]"" represents a serialization of a linked list with a head node value of 2 and a second node value of 1, The third node value is 5.


Example 1:
Input: [2,1,5]
Output: [5,5,0]

Example 2:
Input: [2,7,4,3,5]
Output: [7,0,5,5,0]

Example 3:
Input: [1,7,5,1,9,2,5,1]
Output: [7,9,9,9,0,5,0,0]
notes:
For each node in the linked list, `1 <= node.val <= 10^9`.

The length of the given list is in the range '[0, 10000]'.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" binary matrix ""grid"", where ""0"" represents ocean cells and ""1"" represents land cells.

A move consists of walking from one land cell to another adjacent (4-way) land cell or going out of the ""grid"" boundary.

Returns the number of land cells in `grid` for which we cannot go outside the grid boundaries in any number of moves.


Example 1:
Input: grid = [[0,0,0,0],[1,0,1,0],[0,1,1,0],[0,0,0,0]]
Output: 3
Explanation: There are 3 1's surrounded by 0's and there is one 1's that are not because it is on the border.


Example 2:
Input: grid = [[0,1,1,0],[0,0,1,0],[0,0,1,0],[0,0,0,0]]
output: 0
Explanation: All 1s are either on the boundary or reach the boundary.


constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 500`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Valid bracket strings are empty `("""")`, `""("" + A + "")""`, or `A + B`, where `A` and `B` are valid bracket strings and ` +` means string concatenation. For example, `""""`, `""()""`, `""(())()""`, and `""(()(()))""` are all valid bracket strings.

A valid parenthesized string `S` is primitive if it is non-empty, and there is no way to split it into `S = A+B`, where `A` and `B` are non-empty A valid parenthesis string.

Given a valid bracket string ""S"", consider its original decomposition: ""S = P_1 + P_2 + ... + P_k"", where ""P_i"" is the original valid bracket string.

Return `S` after removing the outermost parentheses of each raw string in the raw decomposition of `S`.


Example 1:
Input: ""(())())""
Output: ""()()()""
explain:
The input string is ""(()())(())"", and the original decomposition is ""(()())"" + ""(())"".

After removing the outer brackets of each part, this is ""()()"" + ""()"" = ""()()()"".


Example 2:
Enter: ""()()()()())""
Output: ""()()()()()""
explain:
The input string is ""(()())(())(()(()))"", the original decomposition is ""(()())"" + ""(())"" + ""(()(( )))"".

After removing the outer brackets of each part, this is ""()()"" + ""()"" + ""()(())"" = ""()()()(())"".


Example 3:
Input: ""()()""
Output: """"
explain:
The input string is ""()()"", and the original decomposition is ""()""+""()"".

After removing the outer brackets of each part, it is """"+""""="""".

notes:
`S.length <= 10000`
`S[i]` is `""(""` or `"")""`
`S` is a valid bracket string",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get the ""root"" of the binary tree, where each node has the value ""0"" or ""1"". Each path from root to leaf represents a binary number starting with the most significant bit. For example, if the path is ""0 -> 1 -> 1 -> 0 -> 1"", then this can represent ""01101"" in binary, which is ""13"".

For all leaves in the tree, consider the number represented by the path from the root to the leaf.

Returns the sum of these numbers. The answer is guaranteed to fit in a 32-bit integer.


Example 1:
Input: root = [1,0,1,0,1,0,1]
Output: 22
Explanation: (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

Example 2:
input: root = [0]
output: 0

Example 3:
input: root = [1]
Output: 1

Example 4:
Input: root = [1,1]
Output: 3

constraint:
The number of nodes in the tree is in the range ""[1, 1000]"".

`Node.val` is either `0` or `1`.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A query word matches a given ""pattern"" if we can insert lowercase letters in the pattern word to make it equal to ""query"". (We could insert every character anywhere, or 0 characters.)
Given a list of ""queries"" and a ""pattern"", return a list of ""answer"" booleans where ""answer[i]"" is true if and only if ""queries[i]"" matches ""pattern"".


Example 1:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FB""
Output: [true, false, true, true, false]
explain:
""FooBar"" can be generated like this ""F"" + ""oo"" + ""B"" + ""ar"".

""FootBall"" can generate ""F"" + ""oot"" + ""B"" + ""all"" like this.

""FrameBuffer"" can generate ""F""+""rame""+""B""+""uffer"" like this.


Example 2:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBa""
Output: [true, false, true, false, false]
explain:
""FooBar"" can generate ""Fo""+""o""+""Ba""+""r"" like this.

""FootBall"" can generate ""Fo""+""ot""+""Ba""+""ll"" like this.


Example 3:
Input: queries = [""FooBar"",""FooBarTest"",""FootBall"",""FrameBuffer"",""ForceFeedBack""], pattern = ""FoBaT""
Output: [false, true, false, false, false]
explain:
""FooBarTest"" can generate ""Fo"" + ""o"" + ""Ba"" + ""r"" + ""T"" + ""est"" like this.

notes:
`1 <= queries.length <= 100`
`1 <= query[i].length <= 100`
`1 <= pattern.length <= 100`
All strings consist of lowercase and uppercase English letters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You get a series of video clips of a sporting event lasting ""T"" seconds. These video clips can overlap each other and be of different lengths.

Each video clip ""clips[i]"" is an interval: it starts at time ""clips[i][0]"" and ends at time ""clips[i][1]"". We are free to cut these pieces into pieces: for example, a piece `[0, 7]` can be cut into pieces `[0, 1] + [1, 3] + [3, 7]`.

Returns the minimum number of segments needed so that we can cut the segments into segments (`[0, T]`) that cover the entire sports event. Returns ""-1"" if the task is impossible to complete.


Example 1:
Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], T = 10
Output: 3
explain:
We take segments [0,2], [8,10], [1,9]; 3 clips in total.

We can then refactor sports events as follows:
We cut [1,9] into pieces [1,2] + [2,8] + [8,9].

Now we have segments [0,2] + [2,8] + [8,10] which cover sports events [0, 10].


Example 2:
Input: clip = [[0,1],[1,2]], T = 5
Output: -1
explain:
We can't just cover [0,5] with [0,1] and [1,2].


Example 3:
Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1, 3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9] ], T = 9
Output: 3
explain:
We can clip [0,4], [4,7] and [6,9].


Example 4:
Input: clip = [[0,4],[2,8]], T = 5
Output: 2
explain:
Note that you can get extra videos after the event.


constraint:
`1 <= clips.length <= 100`
`0 <= clip[i][0] <= clip[i][1] <= 100`
`0 <= T <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing the game, with Alice starting first.

Originally, there was a number ""n"" on the blackboard. During each player's turn, that player's actions include:
Choose any x with 0 < x < n and n % x == 0.

Replace the number ""n"" on the board with ""n - x"".

Also, if a player fails to take an action, they will lose the game.

Returns true if and only if Alice wins the game, assuming both players played best.


Example 1:
Input: n = 2
output: true
Explanation: Alice chooses 1, Bob has no further actions.


Example 2:
Input: n = 3
output: error
Explanation: Alice chooses 1, Bob chooses 1, and Alice has no further actions.


constraint:
`1 <= n <= 1000`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, find the maximum value ""V"" for which there exist distinct nodes ""A"" and ""B"", where ""V = |A.val - B.val|"", ""A"" is a `B` ancestor.

A node ""A"" is an ancestor of ""B"" if either: any child of ""A"" is equal to ""B"", or any child of ""A"" is an ancestor of ""B"".


Example 1:
Input: root = [8,3,10,1,6,null,14,null,null,4,7,13]
Output: 7
Explanation: We have various ancestor node diffs, some of which are listed below:
|8 - 3| = 5
|3 - 7| = 4
|8 - 1| = 7
|10 - 13| = 3
In all possible differences, the maximum value of 7 is obtained by |8 - 1| = 7.


Example 2:
Input: root = [1,null,2,null,0,3]
Output: 3

constraint:
The number of nodes in the tree is in the range ""[2, 5000]"".

`0 <= Node.val <= 105`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""A"", return the length of the longest arithmetic subsequence in ""A"".

Recall that a subsequence of `A` is a list `A[i_1], A[i_2], ..., A[i_k]` where `0 <= i_1 < i_2 < ... < i_k <= A .length - 1`, and the sequence `B` is an arithmetic sequence if `B[i+1] - B[i]` are all the same value (for `0 <= i < B.length - 1`) .


Example 1:
Input: A = [3,6,9,12]
Output: 4
explain:
The entire array is an arithmetic progression with a step size of 3.


Example 2:
Input: A = [9,4,7,2,10]
Output: 3
explain:
The longest arithmetic subsequence is [4,7,10].


Example 3:
Input: A = [20,1,15,3,10,5,8]
Output: 4
explain:
The longest arithmetic subsequence is [20,15,10,5].


constraint:
`2 <= A.length <= 1000`
`0 <= A[i] <= 500`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We run a preordered depth-first search (DFS) on the ""root"" of the binary tree.

For each node in this traversal, we output ""D"" dashes (where ""D"" is the depth of that node), and then we output the value of that node. If a node has depth ""D"", then its immediate children have depth ""D+1"". The ""root"" node has a depth of ""0"".

If a node has only one child, that child must be the left child.

Given the output ""S"" of this traversal, restore the tree and return its ""root"".


Example 1:
Input: S = ""1-2--3--4-5--6--7""
Output: [1,2,5,3,4,6,7]

Example 2:
Input: S = ""1-2--3---4-5--6---7""
Output: [1,2,5,3,null,6,null,4,null,7]

Example 3:
Input: S = ""1-401--349---90--88""
Output: [1,401,null,349,88,90]

constraint:
The number of nodes in the original tree is in the range ""[1, 1000]"".

`1 <= Node.val <= 109`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A company is planning to interview `2n` individuals. Given the array `costs`, where `costs[i] = [aCosti, bCosti]`, the cost of flying the ith person to the city `a` is `aCosti`, the cost of flying the `ith` person to the city `aCosti` is the city ""b"" is ""bCosti"".

Returns the minimum cost for each person to fly to a city such that exactly `n` people arrive in each city.


Example 1:
Input: Cost = [[10,20],[30,200],[400,50],[30,20]]
Output: 110
explain:
The first person to go to city A costs 10.

The second person spends 30 to go to city A.

The third person goes to city B and spends 50.

The fourth person goes to city B at a cost of 20.

The total minimum cost is 10 + 30 + 50 + 20 = 110, with half the people interviewed in each city.


Example 2:
Input: Cost = [[259,770],[448,54],[926,667],[184,139],[840,118],[577,469]]
Output: 1859

Example 3:
Input: Cost = [[515,563],[451,713],[537,709],[343,819],[855,779],[457,60],[650,359],[631,42]]
Output: 3086

constraint:
`2 * n == costs. length`
`2 <= cost. length <= 100`
`costs.length` is an even number.

`1 <= aCosti, bCosti <= 1000`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a matrix with row ""R"" and column ""C"" and cells with integer coordinates at coordinates ""(r, c)"" where ""0 <= r < R"" and ""0 <= c < C"".

Also, we get a cell in this matrix with coordinates ""(r0, c0)"".

Return the coordinates of all cells in the matrix, sorted by their distance from `(r0, c0)`, from smallest to largest distance. Here, the distance between two cells ""(r1, c1)"" and ""(r2, c2)"" is the Manhattan distance, ""|r1 - r2|"". + |c1 - c2|`. (You can return answers in any order that meets this condition.)

Example 1:
Input: R=1, C=2, r0=0, c0=0
Output: [[0,0],[0,1]]
Explanation: The distance from (r0, c0) to other cells is: [0,1]

Example 2:
Input: R=2, C=2, r0=0, c0=1
Output: [[0,1],[0,0],[1,1],[1,0]]
Explanation: The distance from (r0, c0) to other cells is: [0,1,1,2]
The answer [[0,1],[1,1],[0,0],[1,0]] will also be considered correct.


Example 3:
Input: R=2, C=3, r0=1, c0=2
Output: [[1,2],[0,2],[1,1],[0,1],[1,0],[0,0]]
Explanation: The distance from (r0, c0) to other cells is: [0,1,1,2,2,3]
There are other answers that would also be considered correct, such as [[1,2],[1,1],[0,2],[1,0],[0,1],[0,0]] .

notes:
`1 <= R <= 100`
`1 <= C <= 100`
`0 <= r0 < R`
`0 <= c0 < C`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of nonnegative integers, return the maximum sum of elements in two non-overlapping (contiguous) subarrays of length ""L"" and ""M"". (For clarification, an ""L"" length subarray can appear before or after an ""M"" length subarray.)
Formally, returns the largest `V` where `V = (A[i] + A[i+1] + ... + A[i+L-1]) + (A[j] + A[j+ 1] + ... + A[j+M-1])` and:
`0 <= i < i + L - 1 < j < j + M - 1 < A.length`, or
`0 <= j < j + M - 1 < i < i + L - 1 < A.length`.


Example 1:
Input: A = [0,6,5,2,2,5,1,9,4], L = 1, M = 2
Output: 20
Explanation: One choice for subarrays is [9] with length 1 and [6,5] with length 2.


Example 2:
Input: A = [3,8,1,3,2,1,8,9,0], L = 3, M = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] of length 3 and [8,9] of length 2.


Example 3:
Input: A=[2,1,5,6,0,9,5,0,3,8], L=4, M=3
Output: 31
Explanation: One choice for subarrays is [5,6,0,9] with length 4 and [3,8] with length 3.

notes:
`L >= 1`
`M >= 1`
`L + M <= A.length <= 1000`
`0 <= A[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the ""StreamChecker"" class as follows:
`StreamChecker(words)`: Constructor that initializes the data structure with the given words.

`query(letter)`: if and only if for some `k >= 1`, the last `k` characters of the query (in order from oldest to newest, including the letter just queried) spell one of them Returns true only when the given list of words.


example:
StreamChecker streamChecker = new StreamChecker([""cd"",""f"",""kl""]); // Initialize the dictionary.

streamChecker.query('a'); // returns false
streamChecker.query('b'); // returns false
streamChecker.query('c'); // returns false
streamChecker.query('d'); // returns true because 'cd' is in the word list
streamChecker.query('e'); // returns false
streamChecker.query('f'); // returns true because 'f' is in the word list
streamChecker.query('g'); // returns false
streamChecker.query('h'); // returns false
streamChecker.query('i'); // returns false
streamChecker.query('j'); // returns false
streamChecker.query('k'); // returns false
streamChecker.query('l'); // returns true because 'kl' is in the word list
notes:
`1 <= words.length <= 2000`
`1 <= word[i].length <= 2000`
Words will only contain lowercase English letters.

The query will only contain lowercase English letters.

The maximum number of queries is 40000.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Three stones are located at positions ""a"", ""b"" and ""c"" on the number line.

Each round, you pick up a stone at an endpoint (i.e. the stone in the lowest or highest position) and move it to an unoccupied position between those endpoints. Formally, assume that the stones are currently at positions `x, y, z` with `x < y < z`. You pick up a stone at position `x` or position `z`, and then move that stone to an integer position `k`, where `x < k < z` and `k != y`.

The game ends when you can move no more, ie. Stones are in consecutive positions.

What is the minimum and maximum number of steps you can take at the end of the game? Return the answer as an array of length 2: `answer = [minimum_moves, maximum_moves]`

Example 1:
Input: a = 1, b = 2, c = 5
output: [1,2]
Explanation: Move the stone from 5 to 3, or move the stone from 5 to 4 to 3.


Example 2:
Input: a = 4, b = 3, c = 2
Output: [0,0]
Explanation: We cannot take any action.


Example 3:
Input: a = 3, b = 5, c = 1
output: [1,2]
Explanation: Move a stone from 1 to 4; or move a stone from 1 to 2 to 4.

notes:
`1 <= a <= 100`
`1 <= b <= 100`
`1 <= c <= 100`
`a != b, b != c, c != a`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional ""grid"" of integers, each value in the grid represents the color of the grid square at that location.

Two squares belong to the same connected component if and only if they have the same color and are adjacent to each other in any of the 4 directions.

The boundaries of a connected component are all squares in the connected component that are either adjacent in the 4-direction to squares that are not in the component, or are on the boundary of the grid (first or last row or column).

Given a square at '(r0, c0)' in the grid and a 'color', color the boundaries of the connected components of this square using the given 'color' and return the final 'mesh'.


Example 1:
Input: grid = [[1,1],[1,2]], r0 = 0, c0 = 0, color = 3
Output: [[3, 3], [3, 2]]

Example 2:
Input: grid = [[1,2,2],[2,3,2]], r0 = 0, c0 = 1, color = 3
Output: [[1, 3, 3], [2, 3, 3]]

Example 3:
Input: grid = [[1,1,1],[1,1,1],[1,1,1]], r0 = 1, c0 = 1, color = 2
Output: [[2, 2, 2], [2, 1, 2], [2, 2, 2]]
notes:
`1 <= grid.length <= 50`
`1 <= grid[0].length <= 50`
`1 <= grid[i][j] <= 1000`
`0 <= r0 < grid.length`
`0 <= c0 < grid[0].length`
`1 <= color <= 1000`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We write the integers of ""A"" and ""B"" (in the order given) on two separate horizontal lines.

Now, we can draw a connecting line: a straight line connecting two numbers ""A[i]"" and ""B[j]"" such that:
`A[i] == B[j]`;
The line we draw does not intersect any other connecting (non-horizontal) lines.

Note that connecting lines cannot intersect even at endpoints: each number can only belong to one connecting line.

Returns the maximum number of connected lines we can draw in this way.


Example 1:
Input: A = [1,4,2], B = [1,2,4]
Output: 2
Explanation: We can draw 2 uncrossed lines as shown.

We cannot draw 3 unintersecting lines because the line from A[1]=4 to B[2]=4 will intersect the line from A[2]=2 to B[1]=2.


Example 2:
Input: A = [2,5,1,2,5], B = [10,5,2,1,5,2]
Output: 3

Example 3:
Input: A = [1,3,7,1,7,5], B = [1,9,2,5,1]
Output: 2
notes:
`1 <= A.length <= 500`
`1 <= B.length <= 500`
`1 <= A[i], B[i] <= 2000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a 1 million by 1 million grid on the XY plane, and the coordinates of each grid square are `(x, y)`.

We start from source = [sx, sy] square and want to reach target = [tx, ty] square. There is also an array of ""blocked"" blocks, where each ""blocked[i] = [xi, yi]"" represents a block with coordinates ""(xi, yi)"".

Each time we move, we can go one square north, east, south, or west if the square is not in the array of ""blocking"" squares. We are also not allowed to step off the grid.

Returns true if and only if it is possible to reach the ""target"" square from the ""source"" square in a valid sequence of moves.


Example 1:
Input: blocked = [[0,1],[1,0]], source = [0,0], target = [0,2]
output: error
Explanation: The destination block cannot start from the source block because we cannot move.

We can't move north or east because those blocks are blocked.

We can't move south or west because we can't go off the grid.


Example 2:
Input: blocked = [], source = [0,0], target = [999999,999999]
output: true
Explanation: Since there are no blocked squares, it is possible to reach the target square.


constraint:
`0 <= blocked.length <= 200`
`block[i].length == 2`
`0 <= xi, yi < 106`
`source.length == target.length == 2`
`0 <= sx, sy, tx, ty < 106`
`Source! =target`
Ensure that `source` and `target` are not blocked.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""points"" where ""points[i] = [xi, yi]"" represents a point on the X-Y plane, return ""true"" if those points are boomerangs.

A boomerang is a set of three distinct points that are not in a straight line.


Example 1:
Input: points = [[1,1],[2,3],[3,2]]
output: true

Example 2:
Input: points = [[1,1],[2,2],[3,3]]
output: error

constraint:
`points. length == 3`
`points[i].length == 2`
`0 <= xi, yi <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary search tree (BST), transform it into a larger tree such that each key of the original BST is changed to the sum of the original key plus all keys greater than the original key in the BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:
A node's left subtree contains only nodes whose keys are less than the node's key.

A node's right subtree contains only nodes whose keys are greater than the node's key.

The left and right subtrees must also be binary search trees.

Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/

Example 1:
Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]

Example 2:
Input: root = [0,null,1]
Output: [1,null,1]

Example 3:
Input: root = [1,0,2]
Output: [3,3,2]

Example 4:
Input: root = [3,2,4,1]
Output: [7,9,4,10]

constraint:
The number of nodes in the tree is in the range ""[1, 100]"".

`0 <= Node.val <= 100`
All values ​​in the tree are unique.

`root` is guaranteed to be a valid binary search tree.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"You have a convex 'n' sided polygon where each vertex has an integer value. Given an integer array values ​​where values[i] is the value of the ith vertex (i.e. in clockwise order).

You will triangulate the polygon into ""n - 2"" triangles. For each triangle, the value of that triangle is the product of its vertex values, and the total score of the triangulation is the sum of these values ​​for all ""n - 2"" triangles in the triangulation.

Returns the smallest possible total score that can be obtained by some kind of triangulation of the polygon.


Example 1:
Input: value = [1,2,3]
Output: 6
Explanation: The polygon has been triangulated and the only triangle has a score of 6.


Example 2:
Input: value = [3,7,4,5]
Output: 144
Explanation: With two triangulations, the possible fractions are: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.

The minimum score is 144.


Example 3:
Input: value = [1,3,1,4,1,5]
Output: 13
Explanation: The fraction of the minimum fractional triangulation is 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.


constraint:
`n == values.length`
`3 <= n <= 50`
`1 <= value[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an infinite number line, the position of the ith stone is given by `stones[i]`. If a stone has the smallest or largest position, it is called an endpoint stone.

Each turn, you pick up an end stone and move it to an unoccupied location so that it is no longer an end stone.

In particular, if the stone is at `stones = [1,2,5]`, you cannot move the end stone to position 5, because moving it to any position (such as 0 or 3) will still keep that position stone as the end stone .

The game ends when you can move no more, ie. Stones are in consecutive positions.

What is the minimum and maximum number of steps you can take at the end of the game? Return the answer as an array of length 2: `answer = [minimum_moves, maximum_moves]`

Example 1:
Input: [7,4,9]
output: [1,2]
explain:
We can complete the game by moving 4 -> 8 in one step.

Alternatively, we can move 9 -> 5, 4 -> 6 to complete the game.


Example 2:
Input: [6,5,4,3,10]
output: [2,3]
We can move 3 -> 8 and then 10 -> 7 to end the game.

Alternatively, we can move 3 -> 7, 4 -> 8, 5 -> 9 to end the game.

Note that we cannot move 10 -> 2 to end the game, since that is an illegal move.


Example 3:
Input: [100,101,104,102,103]
Output: [0,0]
notes:
`3 <= stones.length <= 10^4`
`1 <= stone[i] <= 10^9`
`stones[i]` has different values.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On the infinite plane, the robot initially stands at ""(0, 0)"" and faces north. A robot can receive one of three commands:
`""G""`: go straight 1 unit;
`""L""`: turn left 90 degrees;
`""R""`: Turn right 90 degrees.

The robot executes the ""instructions"" given in sequence and repeats them forever.

Returns ""true"" if and only if there is a circle in the plane and the robot will never leave the circle.


Example 1:
input:command=""GGLLGG""
output: true
Explanation: The robot moves from (0,0) to (0,2), turns 180 degrees, and returns to (0,0).

While repeating these instructions, the robot remains within a circle of radius 2 centered on the origin.


Example 2:
input:command=""gg""
output: error
Explanation: The robot moves north infinitely.


Example 3:
input:command=""gl""
output: true
Explanation: The robot moves from (0, 0) -> (0, 1) -> (-1, 1) -> (-1, 0) -> (0, 0) -> ...


constraint:
`1 <= instructions. length <= 100`
`instructions[i]` is `'G'`, `'L'`, or `'R'`.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have n gardens, labeled from 1 to n, and a paths array, where paths[i] = [xi, yi] describes bidirectional paths between garden xi to garden yi. In each garden, you want Plant one of 4 types of flowers.

All gardens have at most 3 paths in and out.

Your task is to choose a flower type for each garden, such that for any two gardens connected by a path, they have different types of flowers.

Return any such selection as an array ""answer"", where ""answer[i]"" is the type of flower grown in the (i+1)th garden. The type of flower is indicated as ""1"", ""2"", ""3"" or ""4"". Guaranteed to have an answer.


Example 1:
Input: n = 3, path = [[1,2],[2,3],[3,1]]
Output: [1,2,3]
explain:
Gardens 1 and 2 have different types.

Gardens 2 and 3 have different types.

Garden 3 and 1 have different types.

Therefore, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].


Example 2:
Input: n = 4, path = [[1,2],[3,4]]
Output: [1,2,1,2]

Example 3:
Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
Output: [1,2,3,4]

constraint:
`1 <= n <= 104`
`0 <= paths.length <= 2 * 104`
`path[i].length == 2`
`1 <= xi, yi <= n`
`xi != yi`
There are at most 3 paths in and out of each garden.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of integers, you should divide the array into (consecutive) subarrays of length at most ""k"". After partitioning, the value of each subarray is changed to the maximum value of that subarray.

Returns the maximum sum of the given array after partitioning.


Example 1:
Input: arr = [1,15,7,9,2,5,10], k = 3
Output: 84
Explanation: arr becomes [15,15,15,9,10,10,10]

Example 2:
Input: arr = [1,4,1,5,7,3,6,1,9,9,3], k = 4
Output: 83

Example 3:
Input: arr = [1], k = 1
Output: 1

constraint:
`1 <= arr.length <= 500`
`0 <= arr[i] <= 109`
`1 <= k <= arr.length`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, consider all repeated substrings: substrings of s that occur 2 or more times (consecutively). These events may overlap.

Return any repeated substring with the longest possible length. If `s` has no repeated substrings, the answer is `""""`.


Example 1:
Input: s = ""banana""
Output: ""Anna""

Example 2:
Input: s = ""abcd""
Output: """"

constraint:
`2 <= s.length <= 3 * 104`
`s` consists of lowercase English letters.",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"We have a set of stones, each of which has a positive integer weight.

Each round, we choose the two heaviest stones and smash them together. Suppose the weight of the stone is ""x"" and ""y"", where ""x <= y"". The result of this smash is:
If `x == y`, both stones are completely destroyed;
If `x != y`, then the stone with weight `x` is completely destroyed, and the stone with weight `y` has a new weight `y-x`.

In the end, there are at most 1 stone left. Returns the weight of this stone (or 0 if there are no stones left.)

Example 1:
Input: [2,7,4,1,8,1]
Output: 1
explain:
We combine 7 and 8 to get 1 so the array is converted to [2,4,1,1,1] then,
We combine 2 and 4 to get 2 so the array is converted to [2,1,1,1] and then,
We combine 2 and 1 to get 1 so the array is converted to [1,1,1] and then,
We combine 1 and 1 to get 0, so the array converts to [1], which is the value of the last stone.

notes:
`1 <= stones.length <= 30`
`1 <= stones[i] <= 1000`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"" consisting of lowercase letters, duplicate removal consists of selecting two adjacent and equal letters, and then removing them.

We repeatedly deduplicate S until we can no longer.

Returns the final string after all such deduplication is done. The answer is guaranteed to be unique.


Example 1:
Type: ""abaka""
Output: ""ca""
explain:
For example, in ""abbaca"" we can delete ""bb"" because the letters are adjacent and equal, which is the only possible move. The result of this walk is the string ""aaca"", where only ""aa"" is possible, so the final string is ""ca"".

notes:
`1 <= S.length <= 20000`
`S` consists of English lowercase letters only.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of words, each word consists of English lowercase letters.

Suppose `word1` is the predecessor of `word2` if and only if we can add exactly one letter anywhere in `word1` to make it equal to `word2`. For example, ""abc"" is the predecessor of ""abac"".

A word chain is a word sequence `[word_1, word_2, ..., word_k]` and `k >= 1`, where `word_1` is the leader of `word_2`, `word_2` is the leader of `word_3`, etc.

Returns the longest possible length of a word chain selecting words from the given 'words' list.


Example 1:
Input: words = [""a"",""b"",""ba"",""bca"",""bda"",""bdca""]
Output: 4
Explanation: One of the longest word chains is ""a"", ""ba"", ""bda"", ""bdca"".


Example 2:
Input: words = [""xbc"",""pcxbcf"",""xb"",""cxbc"",""pcxbc""]
Output: 5

constraint:
`1 <= words.length <= 1000`
`1 <= words[i].length <= 16`
`words[i]` only contains English lowercase letters.",0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `stones`, where `stones[i]` is the weight of the `ith` stone.

We are playing stone game. In each round, we choose any two stones and smash them together. Suppose the weight of the stone is ""x"" and ""y"", where ""x <= y"". The result of this smash is:
If `x == y`, both stones are destroyed, and
If `x != y`, the stone with weight `x` is destroyed, and the stone with weight `y` has a new weight `y - x`.

At the end of the game, there is at most one pawn left.

Returns the minimum weight of the left stone. Returns ""0"" if there are no stones left.


Example 1:
Input: Stone = [2,7,4,1,8,1]
Output: 1
explain:
We can combine 2 and 4 to get 2, so the array is converted to [2,7,1,8,1] Then,
We can combine 7 and 8 to get 1, so the array is converted to [2,1,1,1] and then,
We can combine 2 and 1 to get 1, so the array is converted to [1,1,1] and then,
We can combine 1's and 1's into 0's, so the array turns into [1], which is the optimal value.


Example 2:
Input: Stone = [31,26,33,21,40]
Output: 5

Example 3:
Input: stone = [1,2]
Output: 1

constraint:
`1 <= stones.length <= 30`
`1 <= stones[i] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A school is trying to get an annual photo shoot for all its students. Ask students to stand in a file line in non-decreasing order of height. Let this ordering be represented by the integer array expected, where expected[i] is the expected height of the ith-th student.

Given an array of integers ""heights"" representing the current order of the students. Each ""heights[i]"" is the height of the ith student in the row (starting from 0).

Returns the index number where heights[i] != expected[i] .


Example 1:
Input: Height = [1,1,4,2,1,3]
Output: 3
explain:
Height: [1,1,4,2,1,3]
Expected: [1,1,1,2,3,4]
Indexes 2, 4 and 5 do not match.


Example 2:
Input: Height = [5,1,2,3,4]
Output: 5
explain:
Height: [5,1,2,3,4]
Expected: [1,2,3,4,5]
None of the indexes matched.


Example 3:
Input: Height = [1,2,3,4,5]
output: 0
explain:
Height: [1,2,3,4,5]
Expected: [1,2,3,4,5]
All indexes match.


constraint:
`1 <= heights. length <= 100`
`1 <= height[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Today, the bookstore owner's store is open for `customers.length` minutes. Every minute, a certain number of customers (`customers[i]`) enter the store, and all of these customers leave after that minute is over.

For a few minutes, the bookstore owner was grumpy. `grumpy[i] = 1` if the bookstore owner is grumpy at the ith minute, otherwise `grumpy[i] = 0`. When the bookstore owner is grumpy, the customers at that moment are not satisfied, otherwise they would be satisfied.

The bookstore owner knows a secret trick to keep himself from losing his temper for ""X"" minutes in a row, but he can only use it once.

Returns the maximum number of customers that can be satisfied throughout the day.


Example 1:
Input: Customers = [1,0,1,2,1,1,7,5], Grumpy = [0,1,0,1,0,1,0,1], X = 3
output: 16
Explanation: The bookstore owner kept himself from losing his temper in the last 3 minutes.
The maximum number of customers that can be satisfied = 1+1+1+1+7+5=16.

notes:
`1 <= X <= customers.length == grumpy.length <= 20000`
`0 <= customers[i] <= 1000`
`0 <= grumpy[i] <= 1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `arr` of positive integers (not necessarily distinct), return the lexicographically largest permutation smaller than `arr`, which can be done by one swap (exchange the positions of two numbers `arr[i])` and `arr [j]`). If it can't be done, the same array is returned.


Example 1:
Input: arr = [3,2,1]
Output: [3,1,2]
Explanation: Swap 2 and 1.


Example 2:
Input: arr = [1,1,5]
Output: [1,1,5]
Explanation: This is already the smallest permutation.


Example 3:
Input: arr = [1,9,4,6,7]
Output: [1,7,4,6​​,9]
Explanation: Swap 9 and 7.


Example 4:
Input: arr = [3,1,1,3]
Output: [1,3,1,3]
Explanation: Swap 1 and 3.


constraint:
`1 <= arr.length <= 104`
`1 <= arr[i] <= 104`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a warehouse, there is a row of barcodes, the ith barcode is barcodes[i].

Rearranges barcodes so that two adjacent barcodes are not equal. You can return any answer, and an answer is guaranteed to exist.


Example 1:
Input: Barcode = [1,1,1,2,2,2]
Output: [2,1,2,1,2,1]

Example 2:
Input: Barcode = [1,1,1,1,2,2,3,3]
Output: [1,3,1,3,1,2,1,2]

constraint:
`1 <= barcodes.length <= 10000`
`1 <= barcode[i] <= 10000`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"From any string, we can form a subsequence of that string by removing a certain number of characters (possibly not).

Given two strings `source` and `target`, return the smallest number of subsequences of `source` such that their concatenation is equal to `target`. Returns ""-1"" if the task is impossible to complete.


Example 1:
Input: source = ""abc"", target = ""abcbc""
Output: 2
Explanation: The target ""abcbc"" can be constructed from ""abc"" and ""bc"", which are subsequences of the source ""abc"".


Example 2:
Input: source = ""abc"", target = ""acdbc""
Output: -1
Explanation: The target string cannot be constructed from a subsequence of the source string because of the character 'd' in the target string.


Example 3:
Input: source=""xyz"", target=""xzyxz""
Output: 3
Explanation: The target string can be constructed as ""xz""+""y""+""xz"".


constraint:
Both `source` and `target` strings contain only lowercase English letters from ""a"" to ""z"".

The length of the `source` and `target` strings is between `1` and `1000`.",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a number ""N"", return ""true"" if and only if it is a confusing number and the following conditions are met:
We can rotate numbers 180 degrees to form new numbers. When 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6, respectively. When 2, 3, 4, 5, 7 are rotated 180 degrees, they fail. Confusing numbers are numbers that turn 180 degrees into different numbers and each number is valid.


Example 1:
Input: 6
output: true
explain:
Rotate 6 to get 9, 9 is a valid number, 9!=6.


Example 2:
Input: 89
output: true
explain:
Rotate 89 to get 68, 86 is a valid number, 86!=89.


Example 3:
Input: 11
output: error
explain:
Rotating 11 gives 11, 11 is a valid number, but the value stays the same, so 11 is not a confusing number.


Example 4:
Input: 25
output: error
explain:
After rotating 25 we get an invalid number.

notes:
`0 <= N <= 10^9`
After rotation we can ignore leading zeros, for example, if after rotation we have ""0008"", then the number is considered to be ""8"".",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a campus represented by a 2D grid, there are ""N"" workers and ""M"" bicycles, where ""N <= M"". Each worker and bike is a 2D coordinate on this grid.

Our goal is to assign each worker a bicycle. Among the available bikes and workers, we choose the (worker, bike) pair with the shortest Manhattan distance between each other and assign the bike to that worker. (If there are multiple (worker, bicycle) pairs with the same shortest Manhattan distance, we choose the pair with the smallest worker index; if there are multiple ways, we choose the pair with the smallest bicycle index). We repeat this process until no workers are available.

The Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.

Returns a vector ans of length N, where ans[i] is the index (starting at 0) of the bike to which the i-th worker is assigned.


Example 1:
Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
Output: [1,0]
explain:
Worker 1 grabs bike 0 because they are closest (no relationship), and worker 0 is assigned to bike 1. So the output is [1, 0].


Example 2:
Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
Output: [0,2,1]
explain:
Worker 0 grabs Bike 0 first. Worker 1 and Worker 2 are the same distance from Bike 2, so Worker 1 is assigned to Bike 2 and Worker 2 will ride Bike 1. So the output is [0,2,1].

notes:
`0 <= workers[i][j], bikes[i][j] < 1000`
The positions of all workers and bikes are different.

`1 <= workers.length <= bikes.length <= 1000`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of ""prices"" ""[p1,p2...,pn]"" and a ""target"", round each price ""pi"" to ""Roundi(pi)"", such that the rounded array ""[Round1(p1 )"", Round2(p2)...,Roundn(pn)]` sums to the given `target`. Each operation `Roundi(pi)` can be `Floor(pi)` or `Ceil(pi)`.

Returns the string ""-1"" if the rounded array cannot be summed to ""target"". Otherwise, returns the minimum rounding error, which is defined as Σ |Roundi(pi) - (pi)|` for `i` from `1` to `n`, as a string to three decimal places.


Example 1:
Input: Price = [""0.700"",""2.800"",""4.900""], Target = 8
Output: ""1.000""
explain:
Using Floor, Ceil, and Ceil operations gives (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .


Example 2:
Input: Price = [""1.500"",""2.500"",""3.500""], Target = 10
Output: ""-1""
Explanation: Impossible to reach the target.


Example 3:
Input: Price = [""1.500"",""2.500"",""3.500""], Target = 9
Output: ""1.500""

constraint:
`1 <= prices.length <= 500`
Each string `prices[i]` represents a real number in the range `[0.0, 1000.0]` with exactly 3 decimal places.

`0 <= target <= 106`",0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""edge"" of a directed graph, where ""edges[i] = [ai, bi]"" indicates that an edge exists between nodes ""ai"" and ""bi"", and the two nodes ""source"" and "" destination” to determine whether all paths starting from source end at destination, that is:
At least one path exists from the ""source"" node to the ""destination"" node
A node is equal to a ""destination"" if there is a path from a ""source"" node to a node with no outgoing edges.

The number of possible paths from a ""source"" to a ""destination"" is finite.

Returns True if and only if all roads from 'source' to 'destination' return true.


Example 1:
Input: n = 3, edges = [[0,1],[0,2]], source = 0, target = 2
output: error
Explanation: It is possible to reach and get stuck on node 1 and node 2.


Example 2:
Input: n = 4, edges = [[0,1], [0,3], [1,2], [2,1]], source = 0, target = 3
output: error
Explanation: We have two possibilities: end at node 3, or infinitely loop nodes 1 and 2.


Example 3:
Input: n = 4, edges = [[0,1], [0,2], [1,3], [2,3]], source = 0, target = 3
output: true

Example 4:
Input: n = 3, edges = [[0,1], [1,1], [1,2]], source = 0, target = 2
output: error
Explanation: All paths starting from the source node end at the destination node, but there are infinitely many paths, such as 0-1-2, 0-1-1-2, 0-1-1-1-2, 0 -1 -1-1-1-2, and so on.


Example 5:
Input: n = 2, edges = [[0,1],[1,1]], source = 0, target = 1
output: error
Explanation: There is an infinite self-loop at the destination node.


constraint:
`1 <= n <= 104`
`0 <= edges.length <= 104`
`edges. length == 2`
`0 <= ai, bi <= n - 1`
`0 <= source <= n - 1`
`0 <= destination <= n - 1`
A given graph may have self-loops and parallel edges.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of integers sorted in ascending order and all elements of which are unique, and an integer ""k"", returns the kth missing number starting from the leftmost number in the array.


Example 1:
Input: nums = [4,7,9,10], k = 1
Output: 5
Explanation: The first missing number is 5.


Example 2:
Input: nums = [4,7,9,10], k = 3
Output: 8
Explanation: The missing numbers are [5,6,8,...], so the third missing number is 8.


Example 3:
Input: nums = [1,2,4], k = 3
Output: 6
Explanation: The missing numbers are [3,5,6,7,...], so the third missing number is 6.


constraint:
`1 <= nums.length <= 5 * 104`
`1 <= nums[i] <= 107`
`nums` is sorted in ascending order and all elements are unique.

`1 <= k <= 108`
Follow up: Can you find a solution in logarithmic time complexity (i.e. `O(log(n))`)?",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"", find the length of the longest repeating substring. Returns ""0"" if there are no duplicate substrings.


Example 1:
Input: S = ""abcd""
output: 0
Explanation: There are no repeated substrings.


Example 2:
Input: S = ""abbaba""
Output: 2
Explanation: The longest repeating substrings are ""ab"" and ""ba"", which occur twice each.


Example 3:
Input: S = ""aabcaabdaab""
Output: 3
Explanation: The longest repeated substring is ""aab"", which occurs `3` times.


Example 4:
Input: S = ""aaaaa""
Output: 4
Explanation: The longest repeating substring is ""aaaa"", which appears twice.


constraint:
The string ""S"" contains only lowercase English letters from ""a"" to ""z"".

`1 <= S.length <= 1500`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""A"", return the number of non-empty contiguous subarrays that satisfy the following conditions:
The leftmost element of the subarray is no greater than the other elements in the subarray.


Example 1:
Input: [1,4,2,5,3]
Output: 11
Explanation: There are 11 valid subarrays: [1], [4], [2], [5], [3], [1,4], [2,5], [1,4,2], [ 2,5,3],[1,4,2,5],[1,4,2,5,3].


Example 2:
Input: [3,2,1]
Output: 3
Explanation: The 3 valid subarrays are: [3], [2], [1].


Example 3:
Input: [2,2,2]
Output: 6
Explanation: There are 6 valid subarrays: [2], [2], [2], [2,2], [2,2], [2,2,2].

notes:
`1 <= A.length <= 50000`
`0 <= A[i] <= 100000`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of distinct integers, where ""arr"" is sorted in ascending order, return the smallest index ""i"" such that ""arr[i] == i"". Returns ""-1"" if there is no such index.


Example 1:
Input: arr = [-10,-5,0,3,7]
Output: 3
Explanation: For the given array, `arr[0] = -10, arr[1] = -5, arr[2] = 0, arr[3] = 3`, so the output is 3.


Example 2:
Input: arr = [0,2,5,8,17]
output: 0
Explanation: `arr[0] = 0`, so the output is 0.


Example 3:
Input: arr = [-10,-5,3,4,7,9]
Output: -1
Explanation: There is no `i` such that `arr[i] == i`, so the output is -1.


constraint:
`1 <= arr.length < 104`
`-109 <= arr[i] <= 109`
Follow up: The `O(n)` solution is very simple. Can we do better?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a `text` string and `words` (a list of strings), return all index pairs `[i, j]` such that the substring `text[i]...text[j]` is in the list` words `.


Example 1:
Input: text = ""thestoryofleetcodeandme"", words = [""story"",""fleet"",""leetcode""]
Output: [[3,7],[9,13],[10,17]]

Example 2:
Input: text = ""ababa"", words = [""aba"",""ab""]
Output: [[0,1],[0,2],[2,3],[2,4]]
explain:
Note that matches can overlap, see ""aba"" in [0,2] and [2,4].

notes:
All strings contain only lowercase English letters.

All strings in `words` are guaranteed to be distinct.

`1 <= text.length <= 100`
`1 <= words.length <= 20`
`1 <= words[i].length <= 50`
Return pairs ""[i,j]"" in sorted order (i.e., if a tie occurs, sort them by the first coordinate, and sort them by the second coordinate).",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a campus represented by a 2D grid, there are ""N"" workers and ""M"" bicycles, where ""N <= M"". Each worker and bike is a 2D coordinate on this grid.

We assign each worker a unique bike such that the sum of the Manhattan distances between each worker and their assigned bike is minimized.

The Manhattan distance between two points p1 and p2 is Manhattan(p1, p2) = |p1.x - p2.x| + |p1.y - p2.y|`.

Returns the smallest possible sum of Manhattan distances between each worker and their assigned bike.


Example 1:
Input: workers = [[0,0],[2,1]], bikes = [[1,2],[3,3]]
Output: 6
explain:
We assign bike 0 to worker 0 and bike 1 to worker 1. Both assignments have a Manhattan distance of 3, so the output is 6.


Example 2:
Input: workers = [[0,0],[1,1],[2,0]], bikes = [[1,0],[2,2],[2,1]]
Output: 4
explain:
We first assign bike 0 to worker 0, then bike 1 to worker 1 or worker 2, and bike 2 to worker 2 or worker 1. These two assignments result in a sum of Manhattan distances of 4.


Example 3:
Input: workers = [[0,0],[1,0],[2,0],[3,0],[4,0]], bikes = [[0,999],[1,999],[2,999] ,[3,999],[4,999]]
Output: 4995

constraint:
`N == workers. length`
`M == bikes. length`
`1 <= N <= M <= 10`
`workers[i].length == 2`
`bike[i].length == 2`
`0 <= workers[i][0], workers[i][1], bikes[i][0], bikes[i][1] < 1000`
The positions of all workers and bikes are unique.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""d"" between ""0"" and ""9"", and two positive integers ""low"" and ""high"" as the lower bound and upper bound respectively. Returns the number of times `d` occurs as a digit in all integers between `low` and `high`, inclusive of the bounds `low` and `high`.


Example 1:
Input: d = 1, low = 1, high = 13
Output: 6
explain:
The number ""d=1"" appears ""6"" times in ""1,10,11,12,13"". Note that the number ""d=1"" appears twice in the number ""11"".


Example 2:
Input: d = 3, low = 100, high = 250
Output: 35
explain:
The number ""d=3"" appears ""35"" times in ""103,113,123,130,131,...,238,239,243"".

notes:
`0 <= d <= 9`
`1 <= low <= high <= 2×10^8`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For two strings `s` and `t`, we say that ""`t` divides `s`”
Given two strings str1 and str2, return the largest string `x` such that `x` divides both `str1` and `str2`.


Example 1:
Input: str1 = ""ABCABC"", str2 = ""ABC""
Output: ""ABC""

Example 2:
Input: str1 = ""ABABAB"", str2 = ""ABAB""
Output: ""AB""

Example 3:
Input: str1 = ""LEET"", str2 = ""CODE""
Output: """"

Example 4:
Input: str1 = ""ABCDEF"", str2 = ""ABC""
Output: """"

constraint:
`1 <= str1.length <= 1000`
`1 <= str2.length <= 1000`
`str1` and `str2` consist of English capital letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two numbers ""arr1"" and ""arr2"" in base -2, return the result of their addition.

Each number is given in array format: as an array of 0s and 1s, most significant to least significant. For example, `arr = [1,1,0,1]` means the number `(-2)^3 + (-2)^2 + (-2)^0 = -3`. The number ""arr"" in the array, format also guaranteed to have no leading zeros: ""arr == [0]"" or ""arr[0] == 1"".

Returns the result of adding `arr1` and `arr2` in the same format: as an array of 0s and 1s, without leading zeros.


Example 1:
Input: arr1 = [1,1,1,1,1], arr2 = [1,0,1]
Output: [1,0,0,0,0]
Explanation: arr1 represents 11, arr2 represents 5, and output represents 16.


Example 2:
Input: arr1 = [0], arr2 = [0]
output: [0]

Example 3:
Input: arr1 = [0], arr2 = [1]
output: [1]

constraint:
`1 <= arr1.length, arr2.length <= 1000`
`arr1[i]` and `arr2[i]` are either `0` or `1`
`arr1` and `arr2` have no leading zeros",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 'matrix' and a 'target', return the number of non-empty submatrices whose sum is the target.

The submatrix `x1, y1, x2, y2` is the set of all cells `matrix[x][y]` where `x1 <= x <= x2` and `y1 <= y <= y2`.

Two submatrices `(x1, y1, x2, y2)` and `(x1', y1', x2', y2')` are different if they have some different coordinates: for example, if `x1 != x1' `.


Example 1:
Input: matrix = [[0,1,0],[1,1,1],[0,1,0]], target = 0
Output: 4
Explanation: Four 1x1 submatrices containing only 0s.


Example 2:
Input: matrix = [[1,-1],[-1,1]], target = 0
Output: 5
Explanation: Two 1x2 submatrices, plus two 2x1 submatrices, plus 2x2 submatrices.


Example 3:
Input: matrix = [[904]], target = 0
output: 0

constraint:
`1 <= matrix.length <= 100`
`1 <= matrix[0].length <= 100`
`-1000 <= matrix[i] <= 1000`
`-10^8 <= target <= 10^8`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the words ""first"" and ""second"", consider occurrences in some ""text"" of the form ""first second third"", where ""second"" immediately follows ""first"" and ""third"" immediately follows "" second"" after.

For each such event, add ""`third`"" to the answer, and return the answer.


Example 1:
Input: text = ""alice is a good girl she is a good student"", first = ""a"", second = ""good""
Output: [""girl"", ""student""]

Example 2:
Input: text = ""we will we will rock you"", first = ""we"", second = ""will""
Output: [""we"", ""rock""]
notes:
`1 <= text length <= 1000`
`text` consists of space-separated words, where each word consists of lowercase English letters.

`1 <= first.length, second.length <= 10`
`first` and `second` are composed of lowercase English letters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` number of `tiles`, and each tile has a letter `tiles[i]` printed on it.

Returns the number of possible non-empty sequences of letters that can be formed using the letters printed on these ""tiles"".


Example 1:
Input: tiles = ""AAB""
Output: 8
Explanation: The possible sequences are ""A"", ""B"", ""AA"", ""AB"", ""BA"", ""AAB"", ""ABA"", ""BAA"".


Example 2:
Input: tiles = ""AAABBC""
Output: 188

Example 3:
Input: tiles = ""V""
Output: 1

constraint:
`1 <= tiles.length <= 7`
`tiles` consists of uppercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, consider all root-to-leaf paths: paths from the root to any leaf. (A leaf is a node with no children.)
A ""node"" is deficient if the sum of each such root-to-leaf path that intersects this ""node"" is strictly less than ""limit"".

Also remove all insufficient nodes and return the root of the resulting binary tree.


Example 1:
Input: root = [1,2,3,4,-99,-99,7,8,9,-99,-99,12,13,-99,14], limit = 1
Output: [1,2,3,4,null,null,7,8,9,null,14]

Example 2:
Input: root = [5,4,8,11,null,17,4,7,1,null,null,5,3], limit = 22
Output: [5,4,8,11,null,17,4,7,null,null,null,5]

Example 3:
Input: root = [1,2,-3,-5,null,4,null], limit = -1
Output: [1,null,-3,4]
notes:
A given tree will have from 1 to 5000 nodes.

`-10^5 <= node.val <= 10^5`
`-10^9 <= limit <= 10^9`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Returns the lexicographically smallest subsequence of s that contains all distinct characters of s exactly once.

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/

Example 1:
Input: s = ""bcabc""
Output: ""abc""

Example 2:
Input: s = ""cbacdcbc""
Output: ""acdb""

constraint:
`1 <= s.length <= 1000`
`s` consists of lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""A"" of positive integers, let ""S"" be the sum of the digits of the smallest element of ""A"".

Returns 0 if S is odd, 1 otherwise.


Example 1:
Input: [34,23,1,24,75,33,54,8]
output: 0
explain:
The smallest element is 1, and the sum of these numbers is S = 1, which is odd, so the answer is 0.


Example 2:
Input: [99,77,33,66,55]
Output: 1
explain:
The smallest element is 33 and the sum of these numbers is S = 3 + 3 = 6 which is even, so the answer is 1.


constraint:
`1 <= A.length <= 100`
`1 <= A[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list items of scores of different students, where items[i] = [IDi, scorei] represents one score of a student with ""IDi"", compute the top five average scores for each student.

Returns the answer as an array of ""result"" pairs, where ""result[j] = [IDj, topFiveAveragej]"" represents the students with ""IDj"" and their top five averages. Sort `result` by `IDj` ascending order.

The student's top five average is calculated by taking the sum of the top five scores and dividing it by ""5"" using integer division.


Example 1:
Input: items = [[1,91],[1,92],[2,93],[2,97],[1,60],[2,77],[1,65],[1, 87],[1,100],[2,100],[2,76]]
Output: [[1,87],[2,88]]
explain:
The student with ID = 1 scored 91, 92, 60, 65, 87 and 100 points. Their top five average score is (100 + 92 + 91 + 87 + 65) / 5 = 87.

Students with ID = 2 scored 93, 97, 77, 100 and 76. Their top five average score is (100 + 97 + 93 + 77 + 76) / 5 = 88.6, but after integer division, their average score becomes 88.


Example 2:
Input: Items = [[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100],[1,100],[7,100]]
Output: [[1,100],[7,100]]

constraint:
`1 <= items.length <= 1000`
`items[i].length == 2`
`1 <= IDi <= 1000`
`0 <= scorei <= 100`
For each ""IDi"", there will be at least five scores.",1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string s representing a list of words. Each letter in a word has one or more options.

If there is only one option, the letter is represented as-is.

If there are multiple options, separate the options with curly braces. For example, `""{a,b,c}""` means the options `[""a"", ""b"", ""c""]`.

For example, if s = ""a{b,c}"", the first character is always `'a'`, but the second character can be either `'b'` or `'c'`. The original list is `[""ab"", ""ac""]`.

Return all words that can be formed in this way, sorted lexicographically.


Example 1:
Input: s = ""{a,b}c{d,e}f""
output: [""acdf"", ""acef"", ""bcdf"", ""bcef""]

Example 2:
Input: s = ""abcd""
output: [""abcd""]

constraint:
`1 <= s.length <= 50`
`s` consists of braces `'{}'`, commas `','` and lowercase English letters.

`s` is guaranteed to be a valid input.

There are no nested braces.

All characters within a pair of consecutive opening and closing braces are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We can rotate numbers 180 degrees to form new numbers. When 0, 1, 6, 8, and 9 are rotated 180 degrees, they become 0, 1, 9, 8, and 6, respectively. When 2, 3, 4, 5, 7 are rotated 180 degrees, they fail.

Obfuscated numbers are numbers that, when rotated 180 degrees, become different numbers and each number is valid. (Note that the rotated number may be larger than the original.)
Given a positive integer ""N"", return the number of confusing digits between ""1"" and ""N"".


Example 1:
Input: 20
Output: 6
explain:
The confusing numbers are [6,9,10,16,18,19].

6 converts to 9.

9 converts to 6.

10 converts to 01, which is 1.

16 converts to 91.

18 converts to 81.

19 converts to 61.


Example 2:
Input: 100
Output: 19
explain:
The confusing numbers are [6,9,10,16,18,19,60,61,66,68,80,81,86,89,90,91,98,99,100].

notes:
`1 <= N <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a fixed-length integer array ""arr"", copy each occurrence of zero, shifting the remaining elements to the right.

Note that elements beyond the length of the original array are not written.

Do the above modifications to the input array and don't return anything from your function.


Example 1:
Input: [1,0,2,3,0,4,5,0]
output: empty
Explanation: After calling your function, the input array is modified to: [1,0,0,2,3,0,0,4]

Example 2:
Input: [1,2,3]
output: empty
Explanation: After calling your function, the input array is modified to: [1,2,3]
notes:
`1 <= arr.length <= 10000`
`0 <= arr[i] <= 9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an array of items: the ith item has value values[i] and label labels[i] .

We then select a subset S of these items such that:
`|S| <= num_wanted`
For each label ""L"", the number of items in ""S"" with label ""L"" is ""<=use_limit"".

Return the largest possible sum for the subset S.


Example 1:
Input: values ​​= [5,4,3,2,1], labels = [1,1,2,2,3], `num_wanted`= 3, use_limit = 1
Output: 9
Explanation: The selected subsets are the first, third, and fifth items.


Example 2:
Input: values ​​= [5,4,3,2,1], labels = [1,3,3,3,2], `num_wanted`= 3, use_limit = 2
Output: 12
Explanation: The selected subsets are the first, second, and third items.


Example 3:
Input: values ​​= [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted`= 3, use_limit = 1
output: 16
Explanation: The selected subsets are the first and fourth items.


Example 4:
Input: values ​​= [9,8,8,7,6], labels = [0,0,0,1,1], `num_wanted`= 3, use_limit = 2
Output: 24
Explanation: The selected subsets are the first, second, and fourth items.

notes:
`1 <= values.length == labels.length <= 20000`
`0 <= values[i], labels[i] <= 20000`
`1 <= num_wanted, use_limit <= values.length`",0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""n x n"" binary matrix ""grid"", return the length of the shortest unobstructed path in the matrix. Returns ""-1"" if no path is specified.

A clear path in a binary matrix is ​​the path from the upper left cell (i.e. ""(0, 0)"") to the lower right cell (i.e. ""(n - 1, n - 1)"") such that:
All visited cells of the path are ""0"".

All adjacent cells of a path are 8-way connected (that is, they are distinct and share an edge or a corner).

The length of a clear path is the number of cells visited by the path.


Example 1:
Input: Grid = [[0,1],[1,0]]
Output: 2

Example 2:
Input: Grid = [[0,0,0],[1,1,0],[1,1,0]]
Output: 4

Example 3:
Input: Grid = [[1,0,0],[1,1,0],[1,1,0]]
Output: -1

constraint:
`n == grid. length`
`n == grid[i].length`
`1 <= n <= 100`
`grid[i][j] is either 0 or 1`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""str1"" and ""str2"", return the shortest string containing ""str1"" and ""str2"" as subsequences. If multiple answers exist, you can return any of them.

(A string S is a subsequence of a string T that results in a string S if some characters (possibly 0, and characters are chosen from anywhere in T) are removed from T.)

Example 1:
Input: str1 = ""abac"", str2 = ""cab""
Output: ""cabac""
explain:
str1 = ""abac"" is a subsequence of ""cabac"" because we can delete the first ""c"".

str2 = ""cab"" is a subsequence of ""cabac"" because we can drop the last ""ac"".

The provided answer is the shortest string that satisfies these properties.

notes:
`1 <= str1.length, str2.length <= 1000`
`str1` and `str2` consist of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a large sample of integers in the range '[0, 255]'. Since the sample is too large, it is represented by an array count where count[k] is the number of times k occurs in the sample.

Calculate the following statistics:
`minimum`: The smallest element in the sample.

`maximum`: The largest element in the sample.

`mean`: The mean of the sample, calculated as the sum of all elements divided by the total number of elements.

`median`:

If the sample has an odd number of elements, the ""median"" is the middle element once the samples are sorted.

If the sample has an even number of elements, the ""median"" is the average of the two middle elements of the sample after sorting.

`mode`: The most frequently occurring number in the sample. It is guaranteed to be unique.

Return the statistics for the sample as an array of floats ""[min, max, mean, median, mode]"". Answers within 10-5 of the actual answer will be accepted.


Example 1:
Input: count = [0,1,3,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0]
Output: [1.00000, 3.00000, 2.37500, 2.50000, 3.00000]
Explanation: The samples represented by count are [1,2,2,2,3,3,3,3].

The minimum and maximum values ​​are 1 and 3, respectively.

The average is (1+2+2+2+3+3+3+3) / 8 = 19 / 8 = 2.375.

Since the sample size is even, the median is the average of the middle two elements 2 and 3, which is 2.5.

The mode is 3 because it occurs most often in the sample.


Example 2:
Input: count = [0,4,3,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,0,0,0,0,0,0,0]
Output: [1.00000, 4.00000, 2.18182, 2.00000, 1.00000]
Explanation: The samples represented by count are [1,1,1,1,2,2,2,3,3,4,4].

The minimum and maximum values ​​are 1 and 4, respectively.

The average is (1+1+1+1+2+2+2+3+3+4+4) / 11 = 24 / 11 = 2.18181818... (for display purposes, the output shows the rounded number 2.18182) .

Since the sample size is odd, the median is the middle element 2.

The mode is 1 because it occurs most often in the sample.


constraint:
`count. length == 256`
`0 <= count[i] <= 109`
`1 <= sum(count) <= 109`
The mode of the samples represented by `count` is unique.",0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The vehicle you drive initially has a ""capacity"" of empty seats for passengers. Vehicles can only travel east (i.e. cannot turn around and head west.)
Given a list of ""trips"", ""trip[i] = [num_passengers, start_location, end_location]"" contains information about the ""i""th trip: the number of passengers that must be picked up and where to pick them up and drop them off. The position is given in kilometers due east of the vehicle's initial position.

Returns ""true"" if and only if all passengers can be picked up for all given trips.

Example 1:
Input: stroke = [[2,1,5],[3,3,7]], capacity = 4
output: error

Example 2:
Input: stroke = [[2,1,5],[3,3,7]], capacity = 5
output: true

Example 3:
Input: stroke = [[2,1,5],[3,5,7]], capacity = 3
output: true

Example 4:
Input: Stroke = [[3,2,7],[3,7,9],[8,3,9]], Capacity = 11
output: true

constraint:
`trips.length <= 1000`
`Stroke[i].length == 3`
`1 <= run[i][0] <= 100`
`0 <= run[i][1] < run[i][2] <= 1000`
`1 <= capacity <= 100000`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"(This question is an interactive question.)
You may recall that array ""A"" is a mountain array if and only if:
`A.length >= 3`
There exist some i such that 0 < i < A.length - 1 such that:

`A[0] < A[1] < ... A[i-1] < A[i]`
`A[i] > A[i+1] > ... > A[A.length - 1]`
Given an array of mountains `mountainArr`, return the smallest `index` that satisfies `mountainArr.get(index) == target`. Returns ""-1"" if such an ""index"" does not exist.

You cannot directly enter the mountain array. You can only access arrays using the ""MountainArray"" interface:
`MountainArray.get(k)` returns the array element at index `k` (0-based).

`MountainArray.length()` returns the length of the array.

Submissions with more than `100` calls to `MountainArray.get` will be judged as wrong answers. Additionally, any settlement attempting to circumvent the judge will result in disqualification.


Example 1:
Input: array = [1,2,3,4,5,3,1], target = 3
Output: 2
Explanation: 3 exists in the array at index=2 and index=5. Returns the smallest index, which is 2.


Example 2:
Input: array = [0,1,2,4,2,1], target = 3
Output: -1
Explanation: 3 does not exist in ""array"", so we return -1.


constraint:
`3 <= mountain_arr.length() <= 10000`
`0 <= target <= 10^9`
`0 <= mountain_arr.get(index) <= 10^9`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string can represent a set of lowercase words according to the syntax given below. Let's use `R(expr)` to denote the set of words represented by the expression.

The syntax is best understood with a simple example:
A single letter represents the singleton set containing that word.


`R(""a"") = {""a""}`
`R(""w"") = {""w""}`
When we take a comma-separated list of 2 or more expressions, we take the union of possibilities.


`R(""{a,b,c}"") = {""a"",""b"",""c""}`
`R(""{{a,b},{b,c}}"") = {""a"",""b"",""c""}` (note that the final set contains each word at most once)
When we join two expressions, we take the set of possible joins between two words, where the first word comes from the first expression and the second word comes from the second expression.


`R(""{a,b}{c,d}"") = {""ac"",""ad"",""bc"",""bd""}`
`R(""a{b,c}{d,e}f{g,h}"") = {""abdfg"", ""abdfh"", ""abefg"", ""abefh"", ""acdfg"", ""acdfh"", "" acefg"", ""acefh""}`
Formally, the 3 rules of our grammar:
For each lowercase letter ""x"" we have ""R(x) = {x}""
For the expressions `e_1, e_2, ... , e_k` and `k >= 2`, we have `R({e_1,e_2,...}) = R(e_1) ∪ R(e_2) ∪ .. .`
For the expressions ""e_1"" and ""e_2"", we have ""R(e_1 + e_2) = {a + b for (a, b) in R(e_1) × R(e_2)}"", where + means concatenation, × Represents the Cartesian product.

Given an ""expression"" representing a set of words under the given grammar, return a sorted list of the words represented by that expression.


Example 1:
Input: ""{a,b}{c,{d,e}}""
Output: [""ac"",""ad"",""ae"",""bc"",""bd"",""be""]

Example 2:
Input: ""{{a,z},a{b,c},{ab,z}}""
Output: [""a"",""ab"",""ac"",""z""]
Explanation: Write each different word only once in the final answer.


constraint:
`1 <= expression.length <= 60`
`expression[i]` consists of `'{'`, `'}'`, `','` or lowercase English letters.

A given ""expression"" represents a set of words based on the grammar given in the description.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"" and integers ""k"", return the largest ""sum"" such that there exists ""i < j"" and ""nums[i] + nums[j] = sum"" and ""sum < k"". Returns -1 if no i, j satisfy this equation.


Example 1:
Input: nums = [34,23,1,24,75,33,54,8], k = 60
Output: 58
Explanation: We can use 34 and 24 to sum 58 which is less than 60.


Example 2:
Input: nums = [10,20,30], k = 15
Output: -1
Explanation: In this case, it is impossible to get a pair sum smaller than 15.


constraint:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 1000`
`1 <= k <= 2000`",1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"", return the number of substrings of length ""K"" that have no repeated characters.


Example 1:
Input: S = ""havefunonleetcode"", K = 5
Output: 6
explain:
They have 6 substrings: 'havef', 'avefu', 'vefun', 'efuno', 'etcod', 'tcode'.


Example 2:
Input: S = ""home"", K = 5
output: 0
explain:
Note that K can be greater than the length of S. It is impossible to find any substring in this case.

notes:
`1 <= S.length <= 10^4`
All characters of S are lowercase English letters.

`1 <= K <= 10^4`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a social group, there are ""N"" individuals with unique integer IDs from ""0"" to ""N-1"".

We have a list of logs, where each logs[i] = [timestamp, id_A, id_B] contains a non-negative integer timestamp, and the IDs of two different people.

Each log represents a time when two different people became friends. Friendship is symmetric: if A is a friend of B, then B is also a friend of A.

A knows B if A is a friend of B, or A is a friend of someone who knows B.

Returns the earliest time each person knew each other. Returns -1 if there is no such earliest time.


Example 1:
Input: logs = [[20190101,0,1],[20190104,3,4],[20190107,2,3],[20190211,1,5],[20190224,2,4],[20190301,0, 3],[20190312,1,2],[20190322,4,5]], N = 6
Output: 20190301
explain:
The first event occurs at timestamp = 20190101, after 0 and 1 become friends, we have the following friendship groups [0,1], [2], [3], [4], [5].

The second event occurs at timestamp = 20190104, after 3 and 4 become friends, we have the following friendship groups [0,1], [2], [3,4], [5].

The third event occurs at timestamp = 20190107, after 2 and 3 become friends, we have the following friendship groups [0,1], [2,3,4], [5].

The fourth event occurs at timestamp = 20190211, after 1 and 5 become friends, we have the following friendship groups [0,1,5], [2,3,4].

The fifth event happens at timestamp = 20190224, since 2 and 4 are already friends, anything goes.

The sixth event happens at timestamp = 20190301 and we are all friends after 0 and 3 are friends.

notes:
`2 <= N <= 100`
`1 <= logs.length <= 10^4`
`0 <= logs[i][0] <= 10^9`
`0 <= logs[i][1], logs[i][2] <= N - 1`
All timestamps in logs[i][0] are guaranteed to be distinct.

`Logs` are not necessarily sorted by some criteria.

`logs[i][1] != logs[i][2]`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer matrix ""A"" with R rows and C columns, find the maximum fraction of paths starting at ""[0,0]"" and ending at ""[R-1,C-1]"".

A path's score is the minimum value in that path. For example, the path 8→4→5→9 has a value of 4.

A path moves from a visited cell to any adjacent unvisited cell multiple times in one of the 4 cardinal directions (north, east, west, south).


Example 1:
Input: [[5,4,5],[1,2,6],[7,4,6​​]]
Output: 4
explain:
The path with the highest score is highlighted in yellow.

Example 2:
Input: [[2,2,1,2,2,2],[1,2,2,2,1,2]]
Output: 2

Example 3:
Input: [[3,4,6,3,4],[0,2,1,1,7],[8,8,3,2,7],[3,2,4,9,8] ,[4,1,2,0,0],[4,6,5,4,3]]
Output: 3
notes:
`1 <= R, C <= 100`
`0 <= A[i][j] <= 10^9`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an infinite binary tree where each node has two children, nodes are labeled in row order.

In odd rows (i.e. 1st, 3rd, 5th...) the labels go from left to right, while in even rows (2nd, 4th, 6th...) the labels go from right to right Left.

Given the ""label"" of a node in this tree, returns the label in the path from the root of the tree to the node with that ""label"".


Example 1:
Input: label = 14
Output: [1,3,4,14]

Example 2:
Input: label = 26
Output: [1,2,6,10,26]

constraint:
`1 <= label <= 10^6`",0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have a sequence of books: the i-th book has thickness books[i][0] and height books[i][1].

We want to place the books sequentially on a shelf with a total width of `shelf_width`.

We choose some books to put on this shelf (such that the sum of their thicknesses is `<= shelf_width`), and then build another layer of bookshelf shelves, increasing the total height of the bookshelf by the maximum height of the books we just put down. We repeat this process until there are no more books to place.

Note again that at each step of the above process, we place the books in the same order as the given book order. For example, if we have an ordered list of 5 books, we can place book 1 and book 2 on the first shelf, book 3 on the second shelf, and book 4 The book and the fifth book are placed on the last shelf.

Returns the smallest possible height the total bookshelf can reach if placed in this way.


Example 1:
Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelf_width = 4
Output: 6
explain:
The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.

Note that book 2 doesn't have to be on the first shelf.


constraint:
`1 <= books.length <= 1000`
`1 <= books[i][0] <= shelf_width <= 1000`
`1 <= books[i][1] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Returns the result of evaluating the given boolean expression, expressed as a string.

Expressions can be:
`""t""`, evaluates to `True`;
`""f""`, evaluates to `False`;
`""!(expr)""`, computes the logical negation of the inner expression `expr`;
`""&(expr1,expr2,...)""`, computes the logical AND of 2 or more inner expressions `expr1, expr2, ...`;
`""|(expr1,expr2,...)""`, evaluates to the logical OR of 2 or more inner expressions `expr1, expr2, ...`

Example 1:
Input: expression = ""!(f)""
output: true

Example 2:
Input: expression = ""|(f,t)""
output: true

Example 3:
Input: expression = ""&(t,f)""
output: error

Example 4:
Input: expression = ""|(&(t,f,t),!(t))""
output: error

constraint:
`1 <= expression.length <= 20000`
`expression[i]` consists of characters in `{'(', ')', '&', '|', '!', 't', 'f', ','}`.

`expression` is a valid expression representing a Boolean value, as given in the description.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a valid (IPv4) IP `address`, return the defanged version of that IP address.

A defanged IP address with each period ""."" replaced with ""[.]"".


Example 1:
input: address=""1.1.1.1""
Output: ""1[.]1[.]1[.]1""

Example 2:
Input: address=""255.100.50.0""
Output: ""255[.]100[.]50[.]0""

constraint:
The given ""address"" is a valid IPv4 address.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` flights, labeled from `1` to `n`.

Given a set of flight bookings ""bookings"", where ""bookings[i] = [firsti, lasti, seatsi]"" represents the flight bookings from ""firsti"" to ""lasti"" (inclusive), and reserves for each flight "" ""seatsi"" seats.

Returns an array `answer` of length `n`, where `answer[i]` is the total number of seats reserved for flight `i`.


Example 1:
Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
explain:
Flight tags: 1 2 3 4 5
Book 1 reservation: 10 out of 10
Book 2 Reservations: 20 20
Book 3 reservations: 25 25 25 25
Total seats: 10 55 45 25 25
Therefore, the answer = [10,55,45,25,25]

Example 2:
Input: bookings = [[1,2,10],[2,2,15]], n = 2
Output: [10,25]
explain:
Flight tags: 1 2
Book 1 reservation: 10 out of 10
Book 2 reservations: 15
Total number of seats: 10 25
Therefore, the answer = [10,25]

constraint:
`1 <= n <= 2 * 104`
`1 <= bookings.length <= 2 * 104`
`bookings[i].length == 3`
`1 <= first <= last <= n`
`1 <= seats <= 104`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, each node in the tree has a distinct value.

After deleting all nodes with `to_delete` value, we are left with a forest (disjoint union of trees).

Returns the roots of the trees in the remaining forest. You can return results in any order.


Example 1:
Input: root = [1,2,3,4,5,6,7], to_delete = [3,5]
Output: [[1,2,null,4],[6],[7]]

Example 2:
Input: root = [1,2,4,null,3], to_delete = [3]
Output: [[1,2,4]]

constraint:
The number of nodes in a given tree is at most ""1000"".

Each node has a distinct value between ""1"" and ""1000"".

`to_delete.length <= 1000`
`to_delete` contains different values ​​between `1` and `1000`.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is a valid bracketed string (denoted VPS) if and only if it consists only of ""("" and """")"" characters, and:
it is the empty string, or
It can be written as `AB` (`A` connected to `B`), where `A` and `B` are VPSs, or
It can be written `(A)`, where `A` is a VPS.

We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:
`depth("""") = 0`
`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS
`depth(""("" + A + "")"") = 1 + depth(A)`, where `A` is the VPS.

For example, `""""`, `""()()""`, and `""()(()())""` are VPSs (with nesting depths of 0, 1, and 2), while `"")("" ` and `""(()""` is not a VPS.

Given a VPS seq, split it into two disjoint subsequences ""A"" and ""B"", such that ""A"" and ""B"" are VPSs (and ""A.length + B.length = seq.length"") .

Now choose any such `A` and `B` such that `max(depth(A), depth(B))` is the minimum possible value.

Returns an `answer` array (of length `seq.length`) that encodes `A` and `B` choices like this: If `seq[i]` is part of `A`, then `answer[i ] = 0` , otherwise `answer[i] = 1`. Note that even though there may be multiple answers, you can return any one of them.


Example 1:
Input: seq = ""(()())""
Output: [0,1,1,1,1,0]

Example 2:
Input: seq = ""()(())()""
Output: [0,0,0,1,1,0,1,1]

constraint:
`1 <= seq.size <= 10000`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"", remove the vowels ""a"", ""e"", ""i"", ""o"", and ""u"" from it and return the new string.


Example 1:
Input: s = ""leetcodeisacommunityforcoders""
Output: ""ltcdscmmntyfrcdrs""

Example 2:
Input: s = ""aeiou""
Output: """"

constraint:
`1 <= s.length <= 1000`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, find the maximum average of any subtree of that tree.

(A subtree of a tree is any node of that tree plus all its descendants. The mean of a tree is the sum of its values ​​divided by the number of nodes.)

Example 1:
Input: [5,6,1]
Output: 6.00000
explain:
For a node with value = 5, our average is (5 + 6 + 1) / 3 = 4.

For a node with value = 6, our average is 6 / 1 = 6.

For nodes with value = 1, our average is 1 / 1 = 1.

So the answer is 6, which is the maximum.

notes:
The number of nodes in the tree is between ""1"" and ""5000"".

Each node has a value between ""0"" and ""100000"".

Answers are considered correct if they are within `10^-5` of the correct answer.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-decreasing array of positive integers ""nums"" and an integer ""K"", see if this array can be partitioned into one or more disjoint increasing subsequences of length at least ""K"".


Example 1:
Input: nums = [1,2,2,3,3,4,4], K = 3
output: true
explain:
The array can be divided into two subsequences [1,2,3,4] and [2,3,4], each of length at least 3.


Example 2:
Input: nums = [5,6,6,7,8], K = 3
output: error
explain:
There is no way to divide the array with the required condition.

notes:
`1 <= nums.length <= 10^5`
`1 <= K <= nums.length`
`1 <= nums[i] <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays ""arr1"" and ""arr2"", the elements of ""arr2"" are distinct and all elements in ""arr2"" are also in ""arr1"".

Sorts the elements of arr1 so that the relative order of the items in arr1 is the same as in arr2. Elements not present in arr2 should be placed at the end of arr1 in ascending order.


Example 1:
Input: arr1 = [2,3,1,3,2,4,6,7,9,2,19], arr2 = [2,1,4,3,9,6]
Output: [2,2,2,1,4,3,3,9,6,7,19]

constraint:
`1 <= arr1.length, arr2.length <= 1000`
`0 <= arr1[i], arr2[i] <= 1000`
All elements of `arr2` are distinct.

Each arr2[i] is in arr1.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the lowest common ancestor of its deepest leaf.

Recall that:
A node of a binary tree is a leaf if and only if it has no children
The depth of the tree root is ""0"". If a node has depth ""d"", then each of its children has depth ""d+1"".

The lowest common ancestor of a set of nodes ""S"" is node ""A"" with the greatest depth such that every node in ""S"" is in a subtree rooted at ""A"".

Note: This question is the same as 865: https://leetcode.com/problems/smallest-subtree-with-all-the-deepest-nodes/

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4]
Output: [2,7,4]
Explanation: We return the node with value 2, colored yellow in the graph.

Nodes in blue are the deepest leaf nodes in the tree.

Note that nodes 6, 0, and 8 are also leaf nodes, but their depth is 2, while nodes 7, 4 have a depth of 3.


Example 2:
input: root = [1]
output: [1]
Explanation: The root is the deepest node in the tree and is its own lca.


Example 3:
Input: root = [0,1,3,null,2]
output: [2]
Explanation: The deepest leaf node in the tree is 2, and the lca of a node is itself.


constraint:
The number of nodes in the tree will be in the range ""[1, 1000]"".

`0 <= Node.val <= 1000`
The value of a node in the tree is unique.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get ""hours"", which is a list of hours a given employee works per day.

A day is considered tiring if and only if the number of hours worked is (strictly) greater than ""8"".

A well-behaved interval is one in which the number of working days is strictly greater than the number of non-tiring days.

Returns the length of the longest well-behaved interval.


Example 1:
Input: hours = [9,9,6,0,6,6,9]
Output: 3
Explanation: The longest well-behaved interval is [9,9,6].


constraint:
`1 <= hours.length <= 10000`
`0 <= hours[i] <= 16`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a project, you have a list of required skills ""req_skills"", and a list of people. The ith person people[i] contains the list of skills this person possesses.

Consider an adequate team: a group of people such that for each required skill in ""req_skills"", at least one person in the team has that skill. We can represent these teams by each person's index.

For example, `team = [0, 1, 3]` represents people with skills `people[0]`, `people[1]`, and `people[3]`.

Return any sufficiently small as possible team, represented by each individual's index. You can return answers in any order.

Guaranteed to have an answer.


Example 1:
Input: req_skills = [""java"",""nodejs"",""reactjs""], people = [[""java""],[""nodejs""],[""nodejs"",""reactjs""]]
output: [0,2]

Example 2:
Input: req_skills = [""algorithms"",""math"",""java"",""reactjs"",""csharp"",""aws""], people = [[""algorithms"",""math"",""java""], [""algorithms"",""math"",""reactjs""],[""java"",""csharp"",""aws""],[""reactjs"",""csharp""],[""csharp"",""math""] ,[""aws"", ""Java""]]
output: [1,2]

constraint:
`1 <= req_skills.length <= 16`
`1 <= req_skills[i].length <= 16`
`req_skills[i]` consists of lowercase English letters.

All strings in `req_skills` are unique.

`1 <= people.length <= 60`
`0 <= people[i].length <= 16`
`1 <= people[i][j].length <= 16`
`people[i][j]` consists of lowercase English letters.

All strings of `people[i]` are unique.

Each skill in `people[i]` is a skill in `req_skills`.

Make sure there are enough teams present.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of dominoes if and only if (a==c and b==d`), or (`a==d` and `b==c`) -- that is, a domino can Spin to be equal to another domino.

Returns the logarithm `(i, j)` where 0 <= i < j < dominoes.length and dominoes[i] is equivalent to dominoes[j].


Example 1:
Input: dominoes = [[1,2],[2,1],[3,4],[5,6]]
Output: 1

constraint:
`1 <= domino length <= 40000`
`1 <= dominoes[i][j] <= 9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Consider a directed graph with nodes labeled ""0, 1, ..., n-1"". In this graph, each edge is either red or blue, and can have self-edges or parallel edges.

Each `[i, j]` in `red_edges` represents a red directed edge from node `i` to node `j`. Similarly, each [i, j] in blue_edges represents a blue directed edge from node i to node j.

Returns an array ""answer"" of length ""n"", where each ""answer[X]"" is the length of the shortest path from node ""0"" to node ""X"", such that edge colors alternate along the path (or ""- 1` if such a path does not exist).


Example 1:
Input: n = 3, red_edges = [[0,1],[1,2]], blue_edges = []
Output: [0,1,-1]

Example 2:
Input: n = 3, red_edges = [[0,1]], blue_edges = [[2,1]]
Output: [0,1,-1]

Example 3:
Input: n = 3, red_edges = [[1,0]], blue_edges = [[2,1]]
Output: [0,-1,-1]

Example 4:
Input: n = 3, red_edges = [[0,1]], blue_edges = [[1,2]]
Output: [0,1,2]

Example 5:
Input: n = 3, red_edges = [[0,1],[0,2]], blue_edges = [[1,0]]
Output: [0,1,1]

constraint:
`1 <= n <= 100`
`red_edges.length <= 400`
`blue_edges.length <= 400`
`red_edges[i].length == blue_edges[i].length == 2`
`0 <= red_edges[i][j], blue_edges[i][j] < n`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of positive integers, consider all binary trees:
Each node has 0 or 2 children;
The value of `arr` corresponds to the value of each leaf in an in-order traversal of the tree. (Recall that a node is a leaf node if and only if it has 0 children.)
The value of each non-leaf node is equal to the product of the largest leaf value in its left and right subtrees, respectively.

Among all possible binary trees considered, return the smallest possible sum of the values ​​of each non-leaf node. This sum is guaranteed to fit in a 32-bit integer.


Example 1:
Input: arr = [6,2,4]
Output: 32
explain:
There are two possible trees. The first has non-leaf nodes and 36, and the second has non-leaf nodes and 32.

    24 24
   / \ / \
  12 4 6 8
 / \ / \
6 2 2 4

constraint:
`2 <= arr.length <= 40`
`1 <= arr[i] <= 15`
The answer is guaranteed to fit in a 32-bit signed integer (i.e. smaller than 2^31).",0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays of equal length, return the largest value:
`|arr1[i] - arr1[j]| + |arr2[i] - arr2[j]| + |i - j|`
where the maximum value takes over for all ""0 <= i, j < arr1.length"".


Example 1:
Input: arr1 = [1,2,3,4], arr2 = [-1,4,5,6]
Output: 13

Example 2:
Input: arr1 = [1,-2,-5,0,10], arr2 = [0,-2,-1,-7,-4]
Output: 20

constraint:
`2 <= arr1.length == arr2.length <= 40000`
`-10^6 <= arr1[i], arr2[i] <= 10^6`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""A"", return the largest integer that occurs exactly once.

Returns -1 if no integer occurs once.


Example 1:
Input: [5,7,3,9,4,9,8,3,1]
Output: 8
explain:
The largest integer in the array is 9, but it repeats. The number 8 occurs only once, so it is the answer.


Example 2:
Input: [9,9,8,8]
Output: -1
explain:
No number appears only once.

notes:
`1 <= A.length <= 2000`
`0 <= A[i] <= 1000`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return ""true"" if and only if it is an Armstrong number.

A k-digit number n is an Armstrong number if and only if the sum of the kth powers of each number is n.


Example 1:
Input: n = 153
output: true
Explanation: 153 is a three-digit number, 153=13+53+33.


Example 2:
Input: n = 123
output: error
Explanation: 123 is a three-digit number, 123 != 13 + 23 + 33 = 36.


constraint:
`1 <= n <= 108`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `N` cities, numbered from 1 to `N`.

Given `connections`, where each `connections[i] = [city1, city2, cost]` represents the cost of connecting `city1` and `city2` together. (The connection is bidirectional: connecting ""city1"" to ""city2"" is the same as connecting ""city2"" to ""city1"".)
Returns the minimum cost such that for each pair of cities there exists a connecting path (possibly of length 1) that connects the two cities. The cost is the sum of the connection costs used. Returns -1 if the task is impossible to complete.


Example 1:
Input: N = 3, number of connections = [[1,2,5],[1,3,6],[2,3,1]]
Output: 6
explain:
Picking any 2 edges will connect all cities, so we pick the smallest 2.


Example 2:
Input: N = 4, number of connections = [[1,2,3],[3,4,4]]
Output: -1
explain:
Even with all edges, it is not possible to connect all cities.

notes:
`1 <= N <= 10000`
`1 <= connections.length <= 10000`
`1 <= connections[i][0], connections[i][1] <= N`
`0 <= concatenation[i][2] <= 10^5`
`connection[i][0] != connection[i][1]`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer ""n"", indicating that we have ""n"" courses, labeled ""1"" to ""n"". You also get an array `relations`, where `relations[i] = [a, b]`, represents the prerequisite relationship between course `a` and course `b`: course `a` must be in course `b` Learn before`.

In a semester, you may take any number of courses as long as you have taken all prerequisites for the courses you take.

Returns the minimum number of semesters required to study all courses. Return `-1` if there is no way to learn all classes.


Example 1:
Input: n = 3, relation = [[1,3],[2,3]]
Output: 2
Explanation: During the first semester, Course 1 and Course 2 were studied. Study course 3 in the second semester.


Example 2:
Input: n = 3, relation = [[1,2],[2,3],[3,1]]
Output: -1
Explanation: No lessons can be learned because they depend on each other.


constraint:
`1 <= n <= 5000`
`1 <= relations.length <= 5000`
`1 <= a, b <= n`
`a != b`
All pairs `[a, b]` are unique.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Tribonacci sequence Tn is defined as follows:
For n >= 0, T0 = 0, T1 = 1, T2 = 1, Tn+3 = Tn + Tn+1 + Tn+2.

Given ""n"", returns the value of Tn.


Example 1:
Input: n = 4
Output: 4
explain:
T_3 = 0 + 1 + 1 = 2
T_4 = 1 + 1 + 2 = 4

Example 2:
Input: n = 25
Output: 1389537

constraint:
`0 <= n <= 37`
The answer is guaranteed to fit in a 32-bit integer, ie. `Answer <= 2^31 - 1`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On the alphabet board, we start at position `(0, 0)`, which corresponds to the characters `board[0][0]`.

Here, `board = [""abcde"", ""fghij"", ""klmno"", ""pqrst"", ""uvwxy"", ""z""]`, as shown in the figure below.

We may take the following actions:
`'U'` moves our position up one row, if the position exists on the board;
`'D'` moves our position down one row, if the position exists on the board;
`'L'` moves our position one column to the left, if the position exists on the board;
`'R'` moves our position one column to the right, if the position exists on the board;
`'!'` adds the character `board[r][c]` at our current position `(r, c)` to the answer.

(Here, the only positions on the board that exist are those with letters on them.)
Returns a sequence of moves such that our answer is equal to ""target"" in the smallest number of moves. You can return any path that does this.


Example 1:
Input: target = ""leet""
Output: ""DDR! UURRR!! DDD!""

Example 2:
input:target=""code""
Output: ""RR! DDRR! UUL! R!""

constraint:
`1 <= target.length <= 100`
`target` consists of English lowercase letters only.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional ""grid"" of '0's and '1's, return the number of elements in the largest square subgrid whose boundaries are all '1', or if no such subgrid exists ""0"" is in ""grid"".


Example 1:
Input: grid = [[1,1,1],[1,0,1],[1,1,1]]
Output: 9

Example 2:
Input: Grid = [[1,1,0,0]]
Output: 1

constraint:
`1 <= grid.length <= 100`
`1 <= grid[0].length <= 100`
`grid[i][j]` is `0` or `1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob continue their game with a pile of stones. There are several piles arranged in a row, and each pile has a positive integer number of stones piles[i] . The goal of the game is to end with the most stones.
Alice and Bob take turns, with Alice starting first. Initially, ""M = 1"".

On each player's turn, that player can take all stones in the first `X` remaining piles, where `1 <= X <= 2M`. Then, we set M = max(M, X).

The game continues until all pieces have been taken.

Assuming Alice and Bob play an optimal game, return the maximum number of stones that Alice can get.


Example 1:
Input: Stakes = [2,7,9,4,4]
Output: 10
Explanation: If initially Alice took one pile, Bob took two piles, and then Alice took another two piles. Alice can get 2 + 4 + 4 = 10 piles in total. If Alice takes two piles at first, then Bob can take all three remaining piles. In this case Alice gets a total of 2 + 7 = 9 piles. So we return 10 because it's bigger.

Example 2:
Input: Stakes = [1,2,3,4,5,100]
Output: 104

constraint:
`1 <= piles. length <= 100`
`1 <= heap[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""text1"" and ""text2"", return the length of their longest common subsequence. Returns ""0"" if there are no common subsequences.

A subsequence of a string is a new string generated by removing some characters (optionally none) from the original string without changing the relative order of the remaining characters.

For example, ""ace"" is a subsequence of ""abcde"".

A common subsequence of two strings is a subsequence common to both strings.


Example 1:
Input: text1 = ""abcde"", text2 = ""ace""
Output: 3
Explanation: The longest common subsequence is ""ace"", which has length 3.


Example 2:
Input: text1 = ""abc"", text2 = ""abc""
Output: 3
Explanation: The longest common subsequence is ""abc"", which has length 3.


Example 3:
Input: text1 = ""abc"", text2 = ""def""
output: 0
Explanation: There is no such common subsequence, so the result is 0.


constraint:
`1 <= text1.length, text2.length <= 1000`
`text1` and `text2` contain only lowercase English characters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", moving consists of selecting any element and decrementing it by 1.

Array ""A"" is a zigzag array if any of the following conditions are true:
Each even-indexed element is greater than the adjacent element, ie. `A[0] > A[1] < A[2] > A[3] < A[4] > ...`
Alternatively, each odd-indexed element is greater than the adjacent element, ie. `A[0] < A[1] > A[2] < A[3] > A[4] < ...`
Returns the minimum number of moves to convert the given array ""nums"" into a zigzag array.


Example 1:
Input: nums = [1,2,3]
Output: 2
Explanation: We can subtract 2 to 0 or 3 to 1.


Example 2:
Input: nums = [9,6,1,6,2]
Output: 4

constraint:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Two players play a turn-based game on a binary tree. We get the ""root"" of this binary tree, and the number ""n"" of nodes in the tree. `n` is an odd number, each node has a different value from `1` to `n`.

Initially, the first player names a value ""x"" with ""1 <= x <= n"" and the second player names a value ""y"" with ""1 <= y <= n"" and ""y != x"" . The first player colors nodes with value ""x"" red, and the second player colors nodes with value ""y"" blue.

Players then take turns starting with the first player. In each round, that player chooses a node of a color (red if player 1, blue if player 2) and uncolored neighbors of the chosen node (left child, right child or parent of the chosen node) coloring.
If (and only if) a player cannot choose such a node in this way, they must pass their turn. If both players pass their turn, the game ends and the winner is the player who colored more nodes.

You are the second player. Returns true if it is possible to choose such a y that ensures you win the game. If not possible, return `false`.


Example 1:
Input: root = [1,2,3,4,5,6,7,8,9,10,11], n = 11, x = 3
output: true
Explanation: The second player can choose the node with value 2.


constraint:
`root` is the root of a binary tree with `n` nodes and distinct node values ​​from `1` to `n`.

`n` is an odd number.

`1 <= x <= n <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a SnapshotArray that supports the following interfaces:
`SnapshotArray(int length)` initializes an array-like data structure with the given length. Initially, each element is equal to 0.

`void set(index, val)` sets the element at the given `index` equal to `val`.

`int snap()` takes a snapshot of the array and returns the `snap_id`: the total number of times we called `snap()` minus `1`.

`int get(index, snap_id)` returns the value at the given `index` when we took the snapshot with the given `snap_id`

Example 1:
Input: [""SnapshotArray"",""set"",""snap"",""set"",""get""]
[[3],[0,5],[],[0,6],[0,0]]
Output: [null,null,0,null,5]
explain:
SnapshotArray snapshotArr = new SnapshotArray(3); //Set the length to 3
snapshotArr.set(0,5); // set array[0] = 5
snapshotArr.snap(); // Take a snapshot and return snap_id = 0
snapshotArr.set(0,6);
snapshotArr.get(0,0); // Get the value of array[0] with snap_id = 0, return 5

constraint:
`1 <= length <= 50000`
Up to 50000 calls to set, snap and get will be made.

`0 <= index < length`
`0 <= snap_id < ` (total number of times we called `snap()`)
`0 <= value <= 10^9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string ""text"". You should split it into k substrings `(subtext1, subtext2, ..., subtextk)` like this:
`subtexti` is a non-empty string.

The concatenation of all substrings equals ""text"" (ie, ""subtext1 + subtext2 + ... + subtextk == text"").

`subtexti == subtextk - i + 1` for all valid values ​​of `i` (i.e. `1 <= i <= k`).

Return the largest possible value of `k`.


Example 1:
Input: text = ""ghiabcdefhelloadamhelloabcdefghi""
Output: 7
Explanation: We can split the string on ""(ghi)(abcdef)(hello)(adam)(hello)(abcdef)(ghi)"".


Example 2:
Input: text = ""merchant""
Output: 1
Explanation: We can split the string on ""(merchant)"".


Example 3:
Input: text = ""antaprezatepzapreanta""
Output: 11
Explanation: We can split the string on ""(a)(nt)(a)(pre)(za)(tpe)(za)(pre)(a)(nt)(a)"".


Example 4:
Input: text = ""aaa""
Output: 3
Explanation: We can split the string on ""(a)(a)(a)"".


constraint:
`1 <= text length <= 1000`
`text` contains only lowercase English characters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Given an array ""nums"" sorted in non-decreasing order and a number ""target"", return ""True"" if and only if ""target"" is the majority element.

A majority element is an element that occurs more than ""N/2"" times in an array of length ""N"".


Example 1:
Input: nums = [2,4,5,5,5,5,5,6,6], target = 5
output: true
explain:
The value 5 occurs 5 times and the array length is 9.

Therefore, 5 is the majority element because 5 > 9/2 is true.


Example 2:
Input: nums = [10,100,101,101], target = 101
output: error
explain:
The value 101 occurs 2 times and the length of the array is 4.

Therefore, 101 is not a majority element because 2 > 4/2 is false.


constraint:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 10^9`
`1 <= target <= 10^9`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array ""data"", return the minimum number of swaps required to group all ""1""s present in the array anywhere in the array.


Example 1:
Input: data = [1,0,1,0,1]
Output: 1
explain:
There are 3 ways to combine all 1's together:
[1,1,1,0,0] uses 1 swap.

[0,1,1,1,0] uses 2 swaps.

[0,0,1,1,1] uses 1 swap.

The minimum value is 1.


Example 2:
Input: data = [0,0,0,1,0]
output: 0
explain:
Since there is only one 1 in the array, no swap is needed.


Example 3:
Input: data = [1,0,1,0,1,0,0,1,1,0,1]
Output: 3
explain:
One possible solution using 3 swaps is [0,0,0,0,0,1,1,1,1,1,1].


Example 4:
Input: data = [1,0,1,0,1,0,1,1,1,0,1,0,0,1,1,1,0,0,1,1,1,0,1 ,0,1,1,0,0,0,1,1,1,1,0,0,1]
Output: 8

constraint:
`1 <= data length <= 105`
`data[i]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We got some website visits: User named ""username[i]"" visited website ""website[i]"" at time ""timestamp[i]"".

A sequence of 3 is a list of sites of length 3, ordered by access time in ascending order. (The sites in the 3 sequence are not necessarily different.)
Find the 3 sequences most visited by users. If there are multiple solutions, return the lexicographically smallest such 3-sequence.


Example 1:
Input: username = [""joe"",""joe"",""joe"",""james"",""james"",""james"",""james"",""mary"",""mary"",""mary""],timestamp= [1,2,3,4,5,6,7,8,9,10], website = [""home"", ""about"", ""career"", ""home"", ""cart"", ""map"", ""home"", ""home"", ""about"", ""occupation""]
Output: [""home"", ""about"", ""occupation""]
explain:
The tuple in this example is:
[""joe"", 1, ""home""]
[""Joe"", 2, ""About""]
[""Joe"", 3, ""occupation""]
[""james"", 4, ""home""]
[""James"", 5, ""Shopping Cart""]
[""James"", 6, ""Map""]
[""James"", 7, ""Home""]
[""Mary"", 8, ""home""]
[""Mary"", 9, ""About""]
[""Mary"", 10, ""Occupation""]
3 sequences (""Home"", ""About"", ""Career"") have been visited at least once by 2 users.

1 user visited 3 sequences (""Home"", ""Shopping Cart"", ""Map"") at least once.

1 user visited 3 sequences (""Home"", ""Shopping Cart"", ""Home"") at least once.

1 user visited 3 sequences (""home"", ""map"", ""home"") at least once.

1 user visited 3 sequences (""Shopping Cart"", ""Maps"", ""Home"") at least once.

notes:
`3 <= N = username.length = timestamp.length = website.length <= 50`
`1 <= username[i].length <= 10`
`0 <= timestamp[i] <= 10^9`
`1 <= site[i].length <= 10`
Both `username[i]` and `website[i]` contain only lowercase characters.

It is guaranteed that at least one user has visited at least 3 websites.

No user visits two websites at the same time.",1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""str1"" and ""str2"" of the same length, determine whether ""str1"" can be converted to ""str2"" by zero or more conversions.

You can convert all occurrences of a character in `str1` to any other lowercase English character in one conversion.

Returns true if and only if you can convert str1 to str2.


Example 1:
Input: str1 = ""aabcc"", str2 = ""ccdee""
output: true
Explanation: Convert 'c' to 'e', ​​then convert 'b' to 'd', then convert 'a' to 'c'. Note that the order of transformations matters.


Example 2:
Input: str1 = ""leetcode"", str2 = ""codeleet""
output: error
Explanation: Cannot convert str1 to str2.


constraint:
`1 <= str1.length == str2.length <= 104`
`str1` and `str2` contain only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""date"" representing a Gregorian date formatted as ""YYYY-MM-DD"", return the day of the year.


Example 1:
Input: date=""2019-01-09""
Output: 9
Explanation: The given date is the 9th day of the year 2019.


Example 2:
Input: date=""2019-02-10""
Output: 41

Example 3:
Input: Date = ""2003-03-01""
Output: 60

Example 4:
Input: Date = ""2004-03-01""
Output: 61

constraint:
`date.length == 10`
`date[4] == date[7] == '-'`, all other `date[i]` are numbers
`date` represents a calendar date between January 1, 1900 and December 31, 2019.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have ""d"" dice, each with ""f"" faces, numbered ""1, 2, ..., f"".

Returns the number of possible ways (in `fd` total ways) modulo `10^9 + 7` to roll the dice such that the sum of the heads equals `target`.


Example 1:
Input: d = 1, f = 6, target = 3
Output: 1
explain:
You roll a 6-sided die. There is only one way to get the sum of 3.


Example 2:
Input: d = 2, f = 6, target = 7
Output: 6
explain:
You roll two dice, each with 6 sides. There are 6 ways to get the sum of 7:
1+6, 2+5, 3+4, 4+3, 5+2, 6+1.


Example 3:
Input: d = 2, f = 5, target = 10
Output: 1
explain:
You roll two dice, each with 5 sides. There is only one way to find the sum of 10: 5+5.


Example 4:
Input: d = 1, f = 2, target = 3
output: 0
explain:
You roll a dice with 2 faces. There is no way to get the sum of 3.


Example 5:
Input: d = 30, f = 30, target = 500
Output: 222616187
explain:
The answer must be returned modulo 10^9 + 7.


constraint:
`1 <= d, f <= 30`
`1 <= target <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""text"", we can swap two characters in the string. Find the length of the longest substring containing repeated characters.


Example 1:
Input: text = ""ababa""
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeating character substring is ""aaa"", which has length 3.


Example 2:
Input: text = ""aaabaaa""
Output: 6
Explanation: Swapping 'b' with the last 'a' (or the first 'a'), we get the longest repeated character substring ""aaaaaa"", whose length is 6.


Example 3:
Input: text = ""aaabbaaa""
Output: 4

Example 4:
Input: text = ""aaaaa""
Output: 5
Explanation: There is no need to exchange, the longest repeated character substring is ""aaaaa"", and the length is 5.


Example 5:
Input: text = ""abcdef""
Output: 1

constraint:
`1 <= text.length <= 20000`
`text` contains only lowercase English characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implements the class ""MajorityChecker"", which has the following API:
`MajorityChecker(int[] arr)` Constructs an instance of MajorityChecker from the given array `arr`;
The parameters of `int query(int left, int right, int threshold)` are as follows:

`0 <= left <= right < arr.length` represents a subarray of `arr`;
`2 * threshold > right - left + 1`, ie. The threshold is always a strict majority of the length of the subarray
Each `query(...)` returns elements from `arr[left], arr[left+1], ..., arr[right]` that occur at least `threshold` times, or `-1` if not Such elements exist.


example:
MajorityChecker majorityChecker = new MajorityChecker([1,1,2,2,1,1]);
majorityChecker.query(0,5,4); // returns 1
majorityChecker.query(0,3,3); // returns -1
majorityChecker.query(2,3,2); // returns 2

constraint:
`1 <= arr.length <= 20000`
`1 <= arr[i] <= 20000`
For each query, `0 <= left <= right < len(arr)`
For each query, `2 * threshold > right - left + 1`
The maximum number of queries is `10000`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings ""words"" and a string ""chars"".

A string is good if it can be composed of the characters in `chars` (each character can only be used once).

Return the sum of the lengths of all good strings in `words`.


Example 1:
Input: words = [""cat"",""bt"",""hat"",""tree""], chars = ""atach""
Output: 6
explain:
The strings that can be made are ""cat"" and ""hat"" so the answer is 3+3=6.


Example 2:
Input: words = [""hello"",""world"",""leetcode""], chars = ""welldonehoneyr""
Output: 10
explain:
The possible strings are ""hello"" and ""world"" so the answer is 5 + 5 = 10.

notes:
`1 <= words.length <= 1000`
`1 <= words[i].length, chars.length <= 100`
All strings contain only lowercase English letters.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""root"" of a binary tree, its root has level ""1"", its children are ""2"", and so on.

Returns the smallest level x such that the sum of all node values ​​at level x is maximized.


Example 1:
Input: root = [1,7,0,7,-8,null,null]
Output: 2
explain:
Level 1 sum = 1.

Sum of 2 levels = 7 + 0 = 7.

Sum of 3 levels = 7 + -8 = -1.

So we return the level with the largest sum, which is level 2.


Example 2:
Input: root = [989,null,10250,98693,-89388,null,null,null,-32127]
Output: 2

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-105 <= Node.val <= 105`",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""n x n"" ""grid"" containing only the values ​​""0"" and ""1"", where ""0"" represents water and ""1"" represents land, find a water cell such that its distance from the nearest land cell is the largest , and returns the distance. Returns ""-1"" if there are no land or water areas in the grid.

The distance used in this problem is the Manhattan distance: the distance between two cells ""(x0, y0)"" and ""(x1, y1)"" is ""|x0 - x1|"". + |y0 - y1|`.


Example 1:
Input: grid = [[1,0,1],[0,0,0],[1,0,1]]
Output: 2
Explanation: Cell (1, 1) is as far away as possible from all land at a distance of 2.


Example 2:
Input: Grid = [[1,0,0],[0,0,0],[0,0,0]]
Output: 4
Explanation: Cell (2, 2) is as far away as possible from all land at a distance of 4.


constraint:
`n == grid. length`
`n == grid[i].length`
`1 <= n <= 100`
`grid[i][j]` is `0` or `1`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return the last substring of s in lexicographical order.


Example 1:
Input: s = ""abab""
Output: ""bab""
Explanation: The substring is [""a"", ""ab"", ""aba"", ""abab"", ""b"", ""ba"", ""bab""]. The lexicographically largest substring is ""bab"".


Example 2:
Input: s = ""leetcode""
output: ""code""

constraint:
`1 <= s.length <= 4 * 105`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"There is a special keyboard where all the keys are in one row.

Given a string ""keyboard"" of length ""26"", indicating the layout of the keyboard (indices from ""0"" to ""25""). Initially, your finger is at index ""0"". To type a character, you have to move your finger to the index of the desired character. The time it takes to move a finger from index ""i"" to index ""j"" is ""|i - j|"".

You want to input a string ""word"". Write a function to calculate how much time it takes to type with one finger.


Example 1:
Input: keyboard = ""abcdefghijklmnopqrstuvwxyz"", word = ""cba""
Output: 4
Explanation: The index moves from 0 to 2 to write ""c"", then to 1 to write ""b"", then to 0 again to write ""a"".

Total time = 2 + 1 + 1 = 4.

Example 2:
Input: keyboard = ""pqrstuvwxyzabcdefghijklmno"", word = ""leetcode""
Output: 73

constraint:
`keyboard. length == 26`
`keyboard` contains each English lowercase letter exactly once, in some order.

`1 <= word.length <= 104`
`word[i]` is an English lowercase letter.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are asked to design a file system that allows you to create new paths and associate them with different values.

The format of a path is one or more concatenated strings of the following form: `/` followed by one or more lowercase English letters. For example, ""`/leetcode""` and ""`/leetcode/problems""` are valid paths, but empty strings `""""` and `""/""` are not.

Implement the `FileSystem` class:
`bool createPath(string path, int value)` creates a new `path` and associates `value` to it if possible and returns `true`. Returns ""false"" if the path already exists or its parent path does not exist.

`int get(string path)` returns the value associated with `path`, or `-1` if the path does not exist.


Example 1:
enter:
[""filesystem"", ""create_path"", ""get""]
[[],[""/a"",1],[""/a""]]
output:
[empty, true, 1]
explain:
filesystem fileSystem = new FileSystem();
fileSystem.createPath(""/a"", 1); // return true
filesystem.get(""/a""); // returns 1

Example 2:
enter:
[""filesystem"", ""createPath"", ""createPath"", ""get"", ""createPath"", ""get""]
[[],[""/leet"",1],[""/leet/code"",2],[""/leet/code""],[""/c/d"",1],[""/c""] ]
output:
[empty, true, true, 2, false, -1]
explain:
filesystem fileSystem = new FileSystem();
fileSystem.createPath(""/leet"", 1); // return true
fileSystem.createPath(""/leet/code"", 2); // return true
fileSystem.get(""/leet/code""); // returns 2
fileSystem.createPath(""/c/d"", 1); // returns false because the parent path ""/c"" does not exist.

filesystem.get(""/c""); // returns -1 because the path does not exist.


constraint:
The combined number of calls to the two functions is less than or equal to `104`.

`2 <= path length <= 100`
`1 <= value <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have some sticks of length positive integers. These lengths are given in the array ""sticks"", where ""sticks[i]"" is the length of the ith stick.

You can join any two sticks of length `x` and `y` into a single stick by paying `x + y` cost. You have to connect all the sticks until only one stick remains.

In this way return the minimum cost of joining all given sticks into one stick.


Example 1:
Input: sticks = [2,4,3]
Output: 14
Explanation: You start with sticks = [2,4,3] .

1. Combining sticks 2 and 3 costs 2 + 3 = 5. Now your stick = [5,4].

2. Combining the 5th and 4th sticks costs 5 + 4 = 9. Now you have stick = [9].

There's only one stick left, so you're done. The total cost is 5 + 9 = 14.


Example 2:
Input: sticks = [1,8,3,5]
Output: 30
Explanation: You start with sticks = [1,8,3,5] .

1. Combine sticks 1 and 3 at a cost of 1 + 3 = 4. Now sticks = [4,8,5].

2. Combining the 4th and 5th sticks costs 4 + 5 = 9. Now stick = [9,8].

3. Combining the 9th and 8th sticks costs 9 + 8 = 17. Now you have stick = [17].

There's only one stick left, so you're done. The total cost is 4 + 9 + 17 = 30.


Example 3:
Input: stick = [5]
output: 0
Instructions: There's only one stick, so you don't have to do anything. The total cost is 0.


constraint:
`1 <= sticks.length <= 104`
`1 <= sticks[i] <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n houses in a village. We want to provide water to all the houses by drilling wells and laying pipes.

For each house ""i"", we can either directly build a well in it, at a cost of ""wells[i - 1]"" (note the ""-1"" due to the index being 0), or pipe water from another well to it. The cost of running pipes between houses is given by the array ""pipes"", where each ""pipes[j] = [house1j, house2j, costj]"" represents the cost of using a pipe to connect ""house1j"" and ""house2j"" together. Connections are bidirectional.

Returns the lowest total cost of supplying water to all houses.


Example 1:
Input: n = 3, wells = [1,2,2], pipes = [[1,2,1],[2,3,1]]
Output: 3
explain:
This graph shows the cost of connecting houses with pipes.

The best strategy is to build a well in the first house at a cost of 1, then connect the other houses to it at a cost of 2, so the total cost is 3.


constraint:
`1 <= n <= 104`
`wells. length == n`
`0 <= well[i] <= 105`
`1 <= pipes.length <= 104`
`pipe[j].length == 3`
`1 <= house1j, house2j <= n`
`0 <= cost <= 105`
`house1j != house2j`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A transaction may be invalid if:
The amount exceeds `$1000`, or;
If it happens within ""60"" minutes of (including) another transaction of the same name in a different city.

You'll get a string array ""transaction"" where ""transactions[i]"" consists of comma-separated values ​​representing the name, time (in minutes), amount, and city of the transaction.

Returns a list of ""transactions"" that may not be valid. You can return answers in any order.


Example 1:
Input: transactions = [""alice,20,800,mtv"",""alice,50,100,beijing""]
Output: [""alice,20,800,mtv"",""alice,50,100,beijing""]
Explanation: The first transaction is invalid because the second transaction occurred within 60 minutes of each other, has the same name and is in a different city. Likewise, the second one is also invalid.


Example 2:
Input: transactions = [""alice,20,800,mtv"",""alice,50,1200,mtv""]
Output: [""alice,50,1200,mtv""]

Example 3:
Input: transactions = [""alice,20,800,mtv"",""bob,50,1200,mtv""]
Output: [""bob,50,1200,mtv""]

constraint:
`transaction.length <= 1000`
Each `transactions[i]` takes the form `""{name},{time},{amount},{city}""`
Each ""{name}"" and ""{city}"" consists of lowercase English letters, and the length is between ""1"" and ""10"".

Each `{time}` consists of numbers, representing an integer between 0 and 1000.

Each `{amount}` consists of numbers, representing an integer between `0` and `2000`.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Let the function f(s) be the frequency of the lexicographically smallest character in the nonempty string s. For example, if `s = ""dcce""` then `f(s) = 2` since the lexicographically smallest character is `'c'`, which has a frequency of 2.

You will get an array of strings ""words"" and another array of query strings ""queries"". For each query ""queries[i]"", count the number of words in ""words"" such that ""f(queries[i])"" < ""f(W)"" for each ""W"" in ""words"".

Returns an integer array `answer` where each `answer[i]` is an answer to the `ith` query.


Example 1:
Input: queries = [""cbd""], words = [""zaaaz""]
output: [1]
Explanation: In the first query we have f(""cbd"") = 1, f(""zaaaz"") = 3 so f(""cbd"") < f(""zaaaz"").


Example 2:
Input: queries = [""bbb"",""cc""], words = [""a"",""aa"",""aaa"",""aaaa""]
output: [1,2]
Explanation: In the first query only f(""bbb"") < f(""aaaa""). In the second query, both f(""aaa"") and f(""aaaa"") > f(""cc"").


constraint:
`1 <= queries.length <= 2000`
`1 <= words.length <= 2000`
`1 <= queries[i].length, words[i].length <= 10`
`queries[i][j]` and `words[i][j]` are composed of lowercase English letters.",1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of the linked list, we repeatedly delete consecutive sequences of nodes that sum to ""0"" until there are no such sequences.

After doing so, return the head of the final linked list. You can return any such answer.

(Note that in the examples below, all sequences are serializations of `ListNode` objects.)

Example 1:
Input: head = [1,2,-3,3,1]
Output: [3,1]
Note: Answers [1,2,1] will also be accepted.


Example 2:
Input: head = [1,2,3,-3,4]
Output: [1,2,4]

Example 3:
Input: head = [1,2,3,-3,-2]
output: [1]

constraint:
A given linked list will contain ""1"" to ""1000"" nodes.

Each node in the linked list has ""-1000 <= node.val <= 1000"".",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an infinite number of stacks arranged in a row and numbered starting from 0 (left to right), each with the same maximum ""capacity"".

Implement the ""DinnerPlates"" class:
`DinnerPlates(int capacity)` initializes the object with the maximum `capacity` of the stack.

`void push(int val)` pushes the given positive integer `val` onto the leftmost stack whose size is less than `capacity`.

`int pop()` returns the value at the top of the rightmost non-empty stack and removes it from that stack, or `-1` if all stacks are empty.

`int popAtStack(int index)` returns the value at the top of the stack with the given `index`, removes it from the stack, or returns -1 if the stack with the given `index` is empty.


example:
enter:
[""DinnerPlates"",""push"",""push"",""push"",""push"",""push"",""popAtStack"",""push"",""push"",""popAtStack"",""popAtStack"",""pop"","" popular', 'popular', 'popular', 'popular']
[[2],[1],[2],[3],[4],[5],[0],[20],[21],[0],[2],[],[] ,[],[],[]]
output:
[null,null,null,null,null,null,2,null,null,20,21,5,4,3,1,-1]
explain:
DinnerPlates D = DinnerPlates(2); // initial capacity = 2
D. Push(1);
D. Push(2);
D. Push(3);
D. Push(4);
D. Push(5); // The current stack is: 2 4
                                           1 3 5
                                           ] ] ]
D. popAtStack(0); // return 2. The stack is now: 4
                                                       1 3 5
                                                       ] ] ]
D. Push(20); // The current stack is: 20 4
                                           1 3 5
                                           ] ] ]
D. Push(21); // The current stack is: 20 4 21
                                           1 3 5
                                           ] ] ]
D.popAtStack(0); // return 20. The stack is now: 4 21
                                                        1 3 5
                                                        ] ] ]
D. popAtStack(2); // Return 21. The stack is now: 4
                                                        1 3 5
                                                        ] ] ]
D. pop() // Return 5. The stack is now: 4
                                                        1 3
                                                        ] ]
D. pop() // returns 4. The stack is now: 1 3
                                                        ] ]
D. pop() // returns 3. The stack is now: 1
                                                        ]
D. pop() // Return 1. There is no stack.

D. pop() // Return -1. Still no stack.


constraint:
`1 <= capacity <= 20000`
`1 <= value <= 20000`
`0 <= index <= 100000`
There will be at most `200000` calls to `push`, `pop` and `popAtStack`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Returns the number of permutations 1 to `n` such that primes are at prime-indexed (1-indexed.)
(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as the product of two positive integers both smaller than it.)
Since the answer may be large, return the answer modulo ""10^9 + 7"".


Example 1:
Input: n = 5
Output: 12
Explanation: For example [1,2,5,4,3] is a valid permutation, but [5,2,3,4,1] is not, because the prime number 5 is at index 1.


Example 2:
Input: n = 100
Output: 682289015

constraint:
`1 <= n <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The dieter consumed 'calories[i]' calories on day 'i'.
Given an integer `k`, for each sequence of `k` days (`calories[i], calories[i+1], ..., calories[i+k-1]` for all `0 < = i <= n-k`), they look at T, the total calories consumed in this series of `k` days (`calories[i] + calories[i+1] + ... + calories[i+k- 1]` ):
If `T < lower`, they performed poorly on diet, minus 1 point;
If `T > upper`, they performed well in diet and get 1 point;
Otherwise, they behave normally and the points do not change.

Initially, the dieters had a score of zero. Returns the dieter's total points after dieting for ""calories.length"" days.

Note that the total score can be negative.


Example 1:
Input: calories = [1,2,3,4,5], k = 1, lower = 3, upper = 3
output: 0
Explanation: Since k = 1, we consider each element of the array separately and compare it with lower and upper.

calories[0] and calories[1] are less than 2 points and thus lost.

calories[3] and calories[4] are greater than the upper limit, so get 2 points.


Example 2:
Input: calories = [3,2], k = 2, lower = 0, upper = 1
Output: 1
Explanation: Since k = 2, we consider subarrays of length 2.

calories[0] + calories[1] > upper so 1 point is awarded.


Example 3:
Input: calories = [6,5,0,0], k = 2, lower = 1, upper = 5
output: 0
explain:
calories[0] + calories[1] > upper so 1 point is awarded.

lower <= calories[1] + calories[2] <= upper so there is no change in the score.

calories[2] + calories[3] < lower so subtract 1 point.


constraint:
`1 <= k <= calories.length <= 10^5`
`0 <= calories[i] <= 20000`
`0 <= down <= up`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, we perform a query on substrings of s.

For each query ""queries[i] = [left, right, k]"", we can rearrange the substrings ""s[left], ..., s[right]"", and select at most ""k"" to Replace with any lowercase English letter.
If the substring may be a palindrome after the above operations, the query result is ""true"". Otherwise, the result is ""false"".

Returns an array answers[], where answer[i] is the result of the ith query queries[i].

Please note: each letter is evaluated separately for replacement, so if e.g. `s[left..right] = ""aaa""` and `k = 2`, we can only replace two of them. (Note also that the initial string ""s"" will not be modified by any queries.)

example :
Input: s = ""abcda"", queries = [[3,3,0],[1,2,0],[0,3,1],[0,3,2],[0,4,1] ]
Output: [true, false, false, true, true]
explain:
queries[0] : substring = ""d"", is a palindrome.

queries[1] : substring = ""bc"", not a palindrome.

queries[2] : substring = ""abcd"", not a palindrome after only replacing 1 character.

queries[3] : substring = ""abcd"", can be changed to ""abba"" which is a palindrome. It can also be changed to ""baab"" by first rearranging it to ""bacd"" and then replacing ""cd"" with ""ab"".

queries[4] : substring = ""abcda"", can be changed to ""abcba"" which is a palindrome.


constraint:
`1 <= s.length, queries.length <= 10^5`
`0 <= query[i][0] <= query[i][1] < s.length`
`0 <= queries[i][2] <= s.length`
`s` contains only lowercase English letters.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For a given ""puzzle"" string, a ""word"" is valid if both of the following conditions are met:
`word` contains the first letter of `puzzle`.

For each letter in word, that letter is in puzzle.

For example, if the puzzle piece is ""abcdefg"", then valid words are ""faced"", ""cabbage"" and ""baggage""; while invalid words are ""beefed"" (excluding ""a"") and ""based"" (including not in the puzzle ""s"" of the

Returns an array ""answer"" where ""answer[i]"" is the number of words valid for the puzzle ""puzzles[i]"" in the given wordlist ""words"".


example :
enter:
words = [""aaaa"",""asas"",""able"",""ability"",""actt"",""actor"",""access""],
puzzle = [""aboveyz"",""abrodyz"",""abslute"",""absoryz"",""actresz"",""gaswxyz""]
Output: [1,1,3,2,4,0]
explain:
1 valid word for ""aboveyz"": ""aaaa""
1 valid word for ""abrodyz"": ""aaaa""
3 valid words for ""absolute"": ""aaaa"", ""asas"", ""able""
2 valid words for ""absoryz"": ""aaaa"", ""asas""
4 valid words for ""actresz"": ""aaaa"", ""asas"", ""actt"", ""access""
There are no valid words for ""gaswxyz"" because none of the words in the list contain the letter ""g"".


constraint:
`1 <= words.length <= 10^5`
`4 <= words[i].length <= 50`
`1 <= puzzles.length <= 10^4`
`puzzle[i].length == 7`
`words[i][j]`, `puzzles[i][j]` are English lowercase letters.

Each `puzzles[i]` contains no repeated characters.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""S"", return the number of substrings that differ by only one letter.


Example 1:
Input: S = ""aaaba""
Output: 8
Explanation: The substrings with one different letter are ""aaa"", ""aa"", ""a"", ""b"".

""aaa"" occurs 1 time.

""aa"" occurs 2 times.

""a"" occurs 4 times.

""b"" occurs 1 time.

So the answer is 1 + 2 + 4 + 1 = 8.


Example 2:
Input: S = ""aaaaaaaaaa""
Output: 55

constraint:
`1 <= S.length <= 1000`
`S[i]` contains only lowercase English letters.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of ""phrases"", generate a list of before and after puzzles.

A phrase is a string consisting only of lowercase English letters and spaces. There are no spaces at the beginning or end of the phrase. There are no consecutive spaces in the phrase.

Before and After puzzles are phrases formed by merging two phrases where the last word of the first phrase is the same as the first word of the second phrase.

Returns Before and After puzzles consisting of every two phrases `phrases[i]` and `phrases[j]`, where `i != j`. Note that the order in which the two phrases are matched is important and we take these two into account.

You should return a lexicographically sorted list of distinct strings.


Example 1:
Input: phrases = [""writing code"",""code rocks""]
Output: [""Writing code is awesome""]

Example 2:
Input: Phrase = [""Mission Statement"",
                  ""Take a quick bite"",
                  ""come out of a mold"",
                  ""Chocolate Bar"",
                  ""Mission impossible"",
                  ""A man with a mission"",
                  ""Block Party"",
                  ""eat my words"",
                  ""A bar of soap""]
Output: [""Old Block Party Chips"",
         ""A man who accomplished the impossible"",
         ""A man with a sense of mission"",
         ""Bite and eat my words"",
         ""Chocolate Soap""]

Example 3:
Input: Phrase = [""a"",""b"",""a""]
output: [""one""]

constraint:
`1 <= phrases.length <= 100`
`1 <= phrase[i].length <= 100`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""colors"" with three colors: ""1"", ""2"" and ""3"".

You also get some queries. Each query consists of two integers i and c and returns the shortest distance between a given index i and the target color c. Returns ""-1"" if there is no solution.


Example 1:
Input: Color = [1,1,2,1,3,2,2,3,3], Query = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
explain:
The closest 3 to index 1 is at index 4 (3 steps away).

The closest 2 to index 2 is at index 2 itself (0 steps away).

The closest 1 to index 6 is at index 3 (3 steps away).


Example 2:
Input: Color = [1,2], Query = [[0,3]]
output: [-1]
Explanation: There is no 3 in the array.


constraint:
`1 <= colors.length <= 5*10^4`
`1 <= color[i] <= 3`
`1 <= queries.length <= 5*10^4`
`query[i].length == 2`
`0 <= queries[i][0] < colors.length`
`1 <= query[i][1] <= 3`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Consider a matrix ""M"" of dimension ""width * height"" such that each cell has the value ""0"" or ""1"", and any square submatrix of ""M"" of size ""sideLength * sideLength"" has at most ""maxOnes"" `.

Returns the maximum possible number that matrix ""M"" can have.


Example 1:
Inputs: width = 3, height = 3, side length = 2, maxOnes = 1
Output: 4
explain:
In a 3*3 matrix, no 2*2 submatrix can have more than 1 one.

The best solution with 4 is:
[1,0,1]
[0,0,0]
[1,0,1]

Example 2:
Inputs: width=3, height=3, sides=2, maxOnes=2
Output: 6
explain:
[1,0,1]
[1,0,1]
[1,0,1]

constraint:
`1 <= width, height <= 100`
`1 <= sideLength <= width, height`
`0 <= maxOnes <= sideLength * sideLength`",0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A bus has `n` stops, numbered from `0` to `n - 1`, forming a circle. We know the distance between all pairs of adjacent stops, where ""distance[i]"" is the distance between stop number ""i"" and ""(i + 1) % n"".

The bus travels in two directions, clockwise and counterclockwise.

Returns the shortest distance between the given 'from' and 'destination' stops.


Example 1:
Input: distance = [1,2,3,4], start = 0, end = 1
Output: 1
Explanation: The distance between 0 and 1 is 1 or 9, the smallest being 1.


Example 2:
Input: distance = [1,2,3,4], start = 0, end = 2
Output: 3
Explanation: The distance between 0 and 2 is 3 or 7, the minimum is 3.


Example 3:
Input: distance = [1,2,3,4], start = 0, end = 3
Output: 4
Explanation: The distance between 0 and 3 is 6 or 4, the minimum being 4.


constraint:
`1 <= n <= 10^4`
`distance. length == n`
`0 <= start, end < n`
`0 <= distance[i] <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a date, returns the day of the week for that date.

The input is three integers representing ""day"", ""month"" and ""year"".

Returns the answer as one of the following values ​​`{""Sunday"", ""Monday"", ""Tuesday"", ""Wednesday"", ""Thursday"", ""Friday"", ""Saturday""}`.


Example 1:
Input: Day = 31, Month = 8, Year = 2019
Output: ""Saturday""

Example 2:
Input: Day = 18, Month = 7, Year = 1999
Output: ""Sunday""

Example 3:
Input: Day = 15, Month = 8, Year = 1993
Output: ""Sunday""

constraint:
The given date is a valid date between '1971' and '2100'.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers, return the maximum sum of non-empty subarrays (contiguous elements) with at most one element removed. In other words, you want to select a subarray and selectively remove elements from it such that at least one element remains and the sum of the remaining elements is the largest possible.

Note that the subarray needs to be non-empty after removing an element.


Example 1:
Input: arr = [1,-2,0,3]
Output: 4
Explanation: Since we can choose [1, -2, 0, 3] and drop -2, the subarray [1, 0, 3] becomes the maximum value.


Example 2:
Input: arr = [1,-2,-2,3]
Output: 3
Explanation: We just choose [3] and it is the max sum.


Example 3:
Input: arr = [-1,-1,-1,-1]
Output: -1
Explanation: The last subarray must be non-empty. You can't select [-1] and remove -1 from it, and get an empty subarray that sums to 0.


constraint:
`1 <= arr.length <= 105`
`-104 <= arr[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `text`, you want to use the characters of `text` to form as many instances of the word ""balloon"" as possible.

You can use each character at most once in `text`. Returns the maximum number of instances that can be formed.


Example 1:
Input: text = ""nlaebolko""
Output: 1

Example 2:
Input: text = ""loonbalxballpoon""
Output: 2

Example 3:
Input: text = ""leetcode""
output: 0

constraint:
`1 <= text.length <= 10^4`
`text` contains only lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string ""s"" consisting of lowercase English letters and parentheses.
Beginning with the innermost parenthesis, reverse the string within each pair of matching parentheses.

Your result should not contain any brackets.


Example 1:
Input: s = ""(abcd)""
Output: ""dcba""

Example 2:
Input: s = ""(u(love)i)""
Output: ""iloveu""
Explanation: First reverse the substring ""love"", then reverse the entire string.


Example 3:
Input: s = ""(ed(et(oc))el)""
Output: ""leetcode""
Explanation: First, we reverse the substring ""oc"", then ""etco"", and finally the entire string.


Example 4:
Input: s = ""a(bcdefghijkl(mno)p)q""
Output: ""apmnolkjihgfedcbq""

constraint:
`0 <= s.length <= 2000`
`s` contains only lowercase English characters and parentheses.

All parentheses are guaranteed to be balanced.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""arr"" and an integer ""k"", modify the array by repeating the array ""k"" times.

For example, if ""arr = [1, 2]"" and ""k = 3"", the modified array will be ""[1, 2, 1, 2, 1, 2]"".

Returns the largest subarray sum in the modified array. Note that the length of the subarray can be ""0"", in which case its sum is ""0"".

Since the answer can be very large, the answer modulo ""109 + 7"" is returned.


Example 1:
Input: arr = [1,2], k = 3
Output: 9

Example 2:
Input: arr = [1,-2,1], k = 5
Output: 2

Example 3:
Input: arr = [-1,-2], k = 7
output: 0

constraint:
`1 <= arr.length <= 105`
`1 <= k <= 105`
`-104 <= arr[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` servers numbered from `0` to `n-1` to form a network through undirected server-to-server `connections` connections, where `connections[i] = [a, b]` represents the connections between servers Connect `a` and `b`. Any server can reach any other server directly or indirectly through the network.

A critical connection is a connection that, if removed, would make some servers inaccessible to other servers.

Returns all critical connections in the network in any order.


Example 1:
Input: n = 4, number of connections = [[0,1],[1,2],[2,0],[1,3]]
Output: [[1,3]]
Explanation: [[3,1]] is also accepted.


constraint:
`1 <= n <= 10^5`
`n-1 <= connections.length <= 10^5`
`connection[i][0] != connection[i][1]`
There are no duplicate connections.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have some apples, where arr[i] is the weight of the ith apple. You also have a basket that can hold up to ""5000"" units of weight.

Returns the maximum number of apples you can put in the basket.


Example 1:
Input: arr = [100,200,150,1000]
Output: 4
Explanation: All 4 apples can fit in the basket because their total weight is 1450.


Example 2:
Input: arr = [900,950,800,1000,700,800]
Output: 5
Explanation: The sum of the weights of 6 apples exceeds 5000, so we choose any 5 of them.


constraint:
`1 <= arr.length <= 10^3`
`1 <= arr[i] <= 10^3`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an infinite board with coordinates from ""-infinity"" to ""+infinity"", you have a knight at square ""[0, 0]"".

There are 8 possible moves for the knight, as shown in the diagram below. Each move is two squares in the cardinal direction, then one square in the orthogonal direction.

Returns the minimum number of steps required to move the horse to the square ""[x, y]"". The answer is guaranteed to exist.


Example 1:
Input: x = 2, y = 1
Output: 1
Explanation: [0, 0] → [2, 1]

Example 2:
Input: x = 5, y = 5
Output: 4
Explanation: [0, 0] → [2, 1] → [4, 2] → [3, 4] → [5, 5]

constraint:
`|x| + |y| <= 300`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" matrix ""mat"" where each row is sorted in strictly increasing order, return the smallest common element among all rows.

Returns ""-1"" if there are no common elements.


Example 1:
Input: mat = [[1,2,3,4,5],[2,4,5,8,10],[3,5,7,9,11],[1,3,5,7, 9]]
Output: 5

Example 2:
Input: mat = [[1,2,3],[2,3,4],[2,3,5]]
Output: 2

constraint:
`m == mat.length`
`n == mat[i].length`
`1 <= meters, n <= 500`
`1 <= pad[i][j] <= 104`
`mat[i]` sorts in strictly increasing order.",0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a list of blocks, where `blocks[i] = t` means that the ith block takes `t` time units to build. A block can only be built by one worker.

A worker can split into two workers (the number of workers increases by one) or build a block and go home. Both decisions took some time.

The time cost of splitting one worker into two is given as the integer ""split"". Note that if two workers split at the same time, they will split in parallel, so the cost will be ""split"".

Output the minimum time required to build all blocks.
Initially, there was only one worker.


Example 1:
Input: blocks = [1], split = 1
Output: 1
Explanation: We use 1 worker to build 1 block in 1 time unit.


Example 2:
Input: chunks = [1,2], splits = 5
Output: 7
Explanation: We split the workers into 2 workers for 5 time units, and assign each of them to a block, so the cost is 5 + max(1, 2) = 7.


Example 3:
Input: chunks = [1,2,3], splits = 1
Output: 4
Explanation: Split 1 worker into 2, then assign the first worker to the last block, and split the second worker into 2.

Then, use two unassigned workers to build the first two blocks.

The cost is 1 + max(3, 1 + max(1, 2)) = 4.


constraint:
`1 <= blocks.length <= 1000`
`1 <= blocks[i] <= 10^5`
`1 <= split <= 100`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of distinct integers, find all pairs of elements whose absolute difference is the smallest.
Returns a list of pairs (relative to pairs) in ascending order, each pair `[a, b]` as follows
`a, b` from `arr`
`a < b`
`b - a` is equal to the smallest absolute difference between any two elements in `arr`

Example 1:
Input: arr = [4,2,1,3]
Output: [[1,2],[2,3],[3,4]]
Explanation: The minimum absolute difference is 1. List in ascending order all pairs whose difference is equal to 1.


Example 2:
Input: arr = [1,3,6,10,15]
Output: [[1,3]]

Example 3:
Input: arr = [3,8,-10,23,19,-4,-14,27]
Output: [[-14,-10],[19,23],[23,27]]

constraint:
`2 <= arr.length <= 10^5`
`-10^6 <= arr[i] <= 10^6`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given four integers ""n"", ""a"", ""b"", and ""c"", return the ""nth"" ugly number.

An ugly number is a positive integer divisible by ""a"", ""b"", or ""c"".


Example 1:
Input: n=3, a=2, b=3, c=5
Output: 4
Explanation: The ugly numbers are 2, 3, 4, 5, 6, 8, 9, 10...the third is 4.


Example 2:
Input: n=4, a=2, b=3, c=4
Output: 6
Explanation: The ugly numbers are 2, 3, 4, 6, 8, 9, 10, 12... The 4th is 6.


Example 3:
Input: n=5, a=2, b=11, c=13
Output: 10
Explanation: Ugly numbers are 2, 4, 6, 8, 10, 11, 12, 13... 5th is 10.


Example 4:
Input: n = 1000000000, a = 2, b = 217983653, c = 336916467
Output: 1999999984

constraint:
`1 <= n, a, b, c <= 109`
`1 <= a * b * c <= 1018`
The result is guaranteed to be in the range ""[1, 2 * 109]"".",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and an array of pairs of indices into the string pairs, where pairs[i] = [a, b] denote the 2 indices (0-indexed) of the string.

You can swap the characters at any pair index in a given ""pair"" any number of times.

Return the lexicographically smallest string that s can change to after using swap.


Example 1:
Input: s = ""dcab"", pairs = [[0,3],[1,2]]
Output: ""back""
illustrate:
Swap s[0] and s[3], s = ""bcad""
Swap s[1] and s[2], s = ""bacd""

Example 2:
Input: s = ""dcab"", pairs = [[0,3],[1,2],[0,2]]
Output: ""abcd""
illustrate:
Swap s[0] and s[3], s = ""bcad""
Swap s[0] and s[2], s = ""acbd""
swap s[1] and s[2], s = ""abcd""

Example 3:
Input: s = ""cba"", pairs = [[0,1],[1,2]]
Output: ""abc""
illustrate:
Swap s[0] and s[1], s = ""bca""
Swap s[1] and s[2], s = ""bac""
Swap s[0] and s[1], s = ""abc""

constraint:
`1 <= s.length <= 10^5`
`0 <= pairs.length <= 10^5`
`0 <= pairs[i][0], pairs[i][1] < s.length`
`s` contains only lowercase English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` items, and each item belongs to one of 0 or `m` groups, where `group[i]` is the group to which the `i`th item belongs, if `i` is equal to `-1` -th item does not belong to any group. Items and groups are zero-indexed. A group cannot have no projects that belong to it.

Returns a sorted list of items such that:
Items belonging to the same group are next to each other in the sorted list.

There is some relationship between these items, where `beforeItems[i]` is a list containing all items that should come before (to the left of) the i-th item in the sorted array.

If there are multiple solutions, any solution is returned, or an empty list if there are no solutions.


Example 1:
Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6] ,[3,6],[],[],[]]
Output: [6,3,4,1,5,2,0,7]

Example 2:
Input: n = 8, m = 2, group = [-1,-1,1,0,0,1,0,-1], beforeItems = [[],[6],[5],[6] ,[3],[],[4],[]]
output: []
Explanation: This is the same as example 1, except that 4 needs to come before 6 in the sorted list.


constraint:
`1 <= m <= n <= 3 * 104`
`group.length == beforeItems.length == n`
`-1 <= group[i] <= m - 1`
`0 <= beforeItems[i].length <= n - 1`
`0 <= beforeItems[i][j] <= n - 1`
`i != beforeItems[i][j]`
`beforeItems[i]` contains no duplicate elements.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
"Design Skiplist without using any built-in libraries.

Skiplist is a data structure that takes O(log(n)) time to ""add"", ""remove"" and ""search"". Compared with treap and red-black tree with the same function and performance, the code length of Skiplist is relatively short, and the idea behind Skiplists is just a simple linked list.

Example: We have a Skiplist containing `[30,40,50,60,70,90]` and we want to add `80` and `45` to it. Skiplist works this way:
Artyom Kalinin [CC BY-SA 3.0], via Wikimedia Commons
You can see that there are many layers in Skiplist. Each level is a sorted linked list. With the help of toplevels, `add`, `erase` and `search` can be faster than O(n). It can be shown that each operation has an average time complexity of O(log(n)) and a space complexity of O(n).

Specifically, your design should include the following features:
`bool search(int target)` : Return whether `target` exists in Skiplist.

`void add(int num)`: Insert a value into SkipList.
`bool erase(int num)`: Delete a value in Skiplist. If `num` is not present in Skiplist, do nothing and return false. If there are multiple num values, removing any of them will do.

See more about Skiplist: https://en.wikipedia.org/wiki/Skip_list
Note that there may be duplicates in the Skiplist and your code needs to handle this case.


example:
Skip list skiplist = new Skiplist();
skiplist.add(1);
skiplist. add(2);
skiplist. add(3);
skiplist.search(0); // returns false.

skiplist. add(4);
skiplist.search(1); // returns true.

skiplist.erase(0); // returns false, 0 is not in the skip list.

skiplist.erase(1); // returns true.

skiplist.search(1); // returns false, 1 has been erased.


constraint:
`0 <= num, target <= 20000`
There will be at most `50000` calls to `search`, `add` and `erase`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of integers, write a function that returns ""true"" if and only if the number of occurrences of each value in the array is unique.


Example 1:
Input: arr = [1,2,2,1,1,3]
output: true
Explanation: The value 1 occurs 3 times, 2 occurs 2 times, and 3 occurs 1 time. No two values ​​have the same number of occurrences.


Example 2:
Input: arr = [1,2]
output: error

Example 3:
Input: arr = [-3,0,1,-3,1,1,1,-3,10,0]
output: true

constraint:
`1 <= arr.length <= 1000`
`-1000 <= arr[i] <= 1000`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s"" and ""t"" of the same length. You want to change `s` to `t`. Changing the ith character of s to the ith character of t costs s[i] - t[i]|, the absolute difference between the ASCII values ​​of the characters.

You also get an integer ""maxCost"".

Returns the maximum length of a substring of s that can be changed to be identical to the corresponding substring of t at a cost less than or equal to maxCost.

Returns 0 if no substring in s can be changed to the corresponding substring in t.


Example 1:
Input: s = ""abcd"", t = ""bcdf"", maxCost = 3
Output: 3
Explanation: ""abc"" of s can be changed to ""bcd"". This costs 3, so the maximum length is 3.


Example 2:
Input: s = ""abcd"", t = ""cdef"", maxCost = 3
Output: 1
Explanation: Each character in s costs 2 to convert to a character in `t, so the maximum length is 1.

Example 3:
Input: s = ""abcd"", t = ""acde"", maxCost = 0
Output: 1
Explanation: You cannot make any changes, so the maximum length is 1.


constraint:
`1 <= s.length, t.length <= 10^5`
`0 <= max cost <= 10^6`
`s` and `t` contain only lowercase English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"", k duplicate removal consists of selecting ""k"" adjacent and equal letters from ""s"" and removing them such that the left and right sides of the removed substrings are concatenated in Together.

We iteratively do k times of de-duplication on s until we can no longer.

Returns the final string after all such deduplication is done.

The answer is guaranteed to be unique.


Example 1:
Input: s = ""abcd"", k = 2
Output: ""abcd""
Explanation: There is nothing to delete.


Example 2:
Input: s = ""deeedbcccbdaa"", k = 3
Output: ""aa""
explain:
First delete ""eee"" and ""ccc"" to get ""ddbbbdaa""
Then delete ""bbb"" to get ""dddaa""
Finally delete ""ddd"" to get ""aa""

Example 3:
Input: s = ""pbbcggttciiippooaais"", k = 2
Output: ""ps""

constraint:
`1 <= s.length <= 10^5`
`2 <= k <= 10^4`
`s` contains only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In an `n*n` grid, there is a snake spanning 2 cells and starting at `(0, 0)` and `(0, 1)` in the upper left corner. The grid has empty cells represented by 0 and block cells represented by 1. The snake wants to reach `(n-1, n-2)` and `(n-1, n-1)` in the lower right corner.

Snake can do it in one fell swoop:
If there are no blocked cells there, move one cell to the right. This move keeps the horizontal/vertical position of the snake constant.

If there are no blocked cells there, move down one cell. This move keeps the horizontal/vertical position of the snake constant.

If it's in a horizontal position and both cells below it are empty, rotate clockwise. In this case, the snake moves from ""(r, c)"" and ""(r, c+1)"" to ""(r, c)"" and ""(r+1, c)"".

If it's in a vertical position and both cells to its right are empty, rotate counterclockwise. In this case, the snake moves from ""(r, c)"" and ""(r+1, c)"" to ""(r, c)"" and ""(r, c+1)"".

Returns the minimum number of moves to reach the goal.

Returns ""-1"" if the target cannot be reached.


Example 1:
Input: Grid = [[0,0,0,0,0,1],
               [1,1,0,0,1,0],
               [0,0,0,0,1,1],
               [0,0,1,0,1,0],
               [0,1,1,0,0,0],
               [0,1,1,0,0,0]]
Output: 11
explain:
One possible solution is [right, right, clockwise, right, down, down, down, down, counterclockwise, right, down].


Example 2:
Input: Grid = [[0,0,1,1,1,1],
               [0,0,0,0,1,1],
               [1,1,0,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,1],
               [1,1,1,0,0,0]]
Output: 9

constraint:
`2 <= n <= 100`
`0 <= grid[i][j] <= 1`
The snake is guaranteed to start from an empty cell.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given three integer arrays ""arr1"", ""arr2"", and ""arr3"" sorted in strictly increasing order, return a sorted array containing only integers that occur in all three arrays.


Example 1:
Input: arr1 = [1,2,3,4,5], arr2 = [1,2,5,7,9], arr3 = [1,3,4,5,8]
output: [1,5]
Explanation: Only 1 and 5 appear in the three arrays.


Example 2:
Input: arr1 = [197,418,523,876,1356], arr2 = [501,880,1593,1710,1870], arr3 = [521,682,1337,1395,1764]
output: []

constraint:
`1 <= arr1.length, arr2.length, arr3.length <= 1000`
`1 <= arr1[i], arr2[i], arr3[i] <= 2000`",0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the roots of two binary search trees, `root1` and `root2`, if and only if there is a node in the first tree and a node in the second tree whose sum is equal to the given integer target, only returns true `.


Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3], target = 5
output: true
Explanation: The sum of 2 and 3 is 5.


Example 2:
Input: root1 = [0,-10,10], root2 = [5,1,7,0,2], target = 18
output: error

constraint:
The number of nodes in each tree is in the range ""[1, 5000]"".

`-109 <= Node.val, target <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"The step number is an integer whose absolute difference between all adjacent numbers is exactly ""1"". For example, ""321"" is a step number, but ""421"" is not.

Given two integers ""low"" and ""high"", find and return a sorted list containing all stepped numbers in the range ""[low, high]"".


Example 1:
Input: Low = 0, High = 21
Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]

constraint:
`0 <= low <= high <= 2 * 10^9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" and an integer ""k"", return ""true"" if ""s"" is a ""k"" palindrome.

A string is `k`-palindrome if it can be converted into a palindrome by removing at most `k` characters from it.


Example 1:
Input: s = ""abcdeca"", k = 2
output: true
Explanation: Remove 'b' and 'e' characters.


Example 2:
Input: s = ""abbababa"", k = 1
output: true

constraint:
`1 <= s.length <= 1000`
`s` contains only lowercase English letters.

`1 <= k <= s.length`",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have n chips, and the position of the ith chip is position[i].

We need to move all chips to the same position. In one step, we can change the position of the ith chip from position[i] to:
`position[i] + 2` or `position[i] - 2` with `cost = 0`.

`position[i] + 1` or `position[i] - 1` with `cost = 1`.

Returns the minimum cost required to move all chips to the same position.


Example 1:
Input: position = [1,2,3]
Output: 1
Explanation: Step 1: Move chip from position 3 to position 1, cost = 0.

Step 2: Move the chips in position 2 to position 1, cost = 1.

The total cost is 1.


Example 2:
Input: Position = [2,2,2,3,3]
Output: 2
Explanation: We can move two chips from position 3 to position 2. Cost per move = 1. Total cost = 2.


Example 3:
input: location = [1,1000000000]
Output: 1

constraint:
`1 <= position.length <= 100`
`1 <= position[i] <= 10^9`",1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""arr"" and an integer ""difference"", return the length of the longest subsequence in ""arr"", which is an arithmetic sequence such that the difference between adjacent elements in the subsequence is equal to ""difference"".

A subsequence is a sequence that can be derived from arr by removing some or none of its elements without changing the order of the remaining elements.


Example 1:
Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].


Example 2:
Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.


Example 3:
Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].


constraint:
`1 <= arr.length <= 105`
`-104 <= arr[i], difference <= 104`",0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a gold mine ""grid"" of size ""m x n"", each cell in that mine has an integer representing the amount of gold in that cell, or ""0"" if it is empty.

Returns the maximum amount of gold you can collect under the following conditions:
Every time you are in a cell, you collect all the gold in that cell.

From your position, you can take one step left, right, up or down.

You cannot access the same cell more than once.

Never visit a cell with ""0"" gold.

You can start and stop collecting gold from any location in the grid where there is gold.


Example 1:
Input: Grid = [[0,6,0],[5,8,7],[0,9,0]]
Output: 24
explain:
[[0,6,0],
 [5,8,7],
 [0,9,0]]
The path to get the most coins, 9 -> 8 -> 7.


Example 2:
Input: grid = [[1,0,7],[2,0,6],[3,4,5],[0,3,0],[9,0,20]]
Output: 28
explain:
[[1,0,7],
 [2,0,6],
 [3,4,5],
 [0,3,0],
 [9,0,20]]
The path to get the most coins, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.


constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 15`
`0 <= grid[i][j] <= 100`
Up to 25 cells contain gold.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer `n`, your task is to count how many strings of length `n` can be formed according to the following rules:
Each character is a lowercase vowel (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`)
Each vowel ""a"" can only be followed by one ""e"".

Each vowel ""e"" can only be followed by one ""a"" or ""i"".

Each vowel ""i"" cannot be followed by another ""i"".

Each vowel ""o"" can only be followed by one ""i"" or ""u"".

Each vowel ""u"" ​​can only be followed by one ""a"".
Since the answer may be too large, it is returned modulo 10^9 + 7.

Example 1:
Input: n = 1
Output: 5
Explanation: All possible strings are: ""a"", ""e"", ""i"", ""o"" and ""u"".


Example 2:
Input: n = 2
Output: 10
Explanation: All possible strings are: ""ae"", ""ea"", ""ei"", ""ia"", ""ie"", ""io"", ""iu"", ""oi"", ""ou"" and ""ua"".


Example 3:
Input: n = 5
Output: 68

constraint:
`1 <= n <= 2 * 10^4`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Balanced strings are those that have an equal number of ""L"" and ""R"" characters.

Given a balanced string s, split it into the maximum number of balanced strings.

Returns the maximum number of split balanced strings.


Example 1:
Input: s = ""RLRRLLRLRL""
Output: 4
Explanation: s can be split into ""RL"", ""RRLL"", ""RL"", ""RL"", each substring contains the same number of 'L' and 'R'.


Example 2:
Input: s = ""RLLLLRLRRRLR""
Output: 3
Explanation: s can be split into ""RL"", ""LLLRRR"", ""LR"", each substring contains the same number of 'L' and 'R'.


Example 3:
Input: s = ""LLLLRRRR""
Output: 1
Explanation: s can be split into ""LLLLRRRR"".


Example 4:
Input: s = ""RLRRRLLRLL""
Output: 2
Explanation: s can be split into ""RL"", ""RRRLLRLL"", because each substring contains an equal number of ""L"" and ""R""

constraint:
`1 <= s.length <= 1000`
`s[i]` is either `'L'` or `'R'`.

`s` is the balanced string.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On an 8x8 board, there can be multiple black queens and one white king.

Given a set of integer coordinates ""queens"" representing the position of the black queen and a pair of coordinates ""king"" representing the position of the white king, return the coordinates (in any order) of all queens that can attack the king.


Example 1:
Input: queens = [[0,1],[1,0],[4,0],[0,4],[3,3],[2,4]], king = [0,0]
Output: [[0,1],[1,0],[3,3]]
explain:
The queen at [0,1] can attack the king since they are in the same row.
The queen at [1,0] can attack the king since they are in the same column.
The queen at [3,3] can attack the king since they are on the same diagonal.
The queen at [0,4] cannot attack the king because it is blocked by the queen at [0,1].
The queen at [4,0] cannot attack the king because it is blocked by the queen at [1,0].
The queen at [2,4] cannot attack the king because it is not on the same row/column/diagonal as the king.


Example 2:
Input: queens = [[0,0],[1,1],[2,2],[3,4],[3,5],[4,4],[4,5]], king = [3,3]
Output: [[2,2],[3,4],[4,4]]

Example 3:
Input: queens = [[5,6],[7,7],[2,1],[0,7],[1,6],[5,1],[3,7],[0, 3],[4,0],[1,2],[6,3],[5,0],[0,4],[2,2],[1,1],[6,4] ,[5,4],[0,0],[2,6],[4,5],[5,2],[1,4],[7,5],[2,3],[ 0,5],[4,2],[1,0],[2,7],[0,1],[4,6],[6,1],[0,6],[4, 3],[1,7]], king = [3,4]
Output: [[2,3],[1,4],[1,6],[3,7],[4,3],[5,4],[4,5]]

constraint:
`1 <= queens.length <= 63`
`queens[i].length == 2`
`0 <= Queens[i][j] < 8`
`king. length == 2`
`0 <= king[0], king[1] < 8`
A maximum of one block is allowed in a cell.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The dice simulator generates a random number from 1 to 6 for each dice roll. You introduced a constraint to the generator such that it cannot roll the number `i` more than `rollMax[i]` (1 index) times in a row.
Given an array of integers `rollMax` and an integer `n`, return the number of distinct sequences that can be obtained with exact `n` rolls.

Two sequences are considered to be different if at least one element differs from each other. Since the answer may be too large, return modulo 10^9 + 7 .


Example 1:
Input: n = 2, rollMax = [1,1,2,2,2,3]
Output: 34
Explanation: There will be 2 rolls of dice, and if there are no restrictions on the dice, there are 6 * 6 = 36 possible combinations. In this case, looking at the rollMax array, the numbers 1 and 2 appear at most once in a row, so the sequences (1,1) and (2,2) are impossible, so the final answer is 36-2=34.


Example 2:
Input: n = 2, rollMax = [1,1,1,1,1,1]
Output: 30

Example 3:
Input: n = 3, rollMax = [1,1,1,2,2,3]
Output: 181

constraint:
`1 <= n <= 5000`
`rollMax.length == 6`
`1 <= rollMax[i] <= 15`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array nums of positive integers, returns the longest possible length of the prefix of the array of nums such that exactly one element can be removed from this prefix such that each number appearing in it will have the same number of occurrences of the length.

If no elements remain after removing an element, each occurrence of a number is still considered to have the same number of occurrences (0).


Example 1:
Input: nums = [2,2,1,1,5,3,3,5]
Output: 7
Explanation: For a subarray [2,2,1,1,5,3,3] with a length of 7, if you remove nums[4]=5, you get [2,2,1,1,3,3], This way each number will appear exactly twice.


Example 2:
Input: nums = [1,1,1,2,2,2,3,3,3,4,4,4,5]
Output: 13

Example 3:
Input: nums = [1,1,1,2,2,2]
Output: 5

Example 4:
Input: nums = [10,2,8,9,3,8,1,5,2,3,7,6]
Output: 8

constraint:
`2 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^5`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"n` passengers board a plane with exactly n` seats. The first passenger lost his ticket and chose a seat at random. But after that, the remaining passengers will:
If there are spaces available, please take your own seat,
Randomly choose another seat when they find their seat is taken
What is the probability that the nth person gets his seat?

Example 1:
Input: n = 1
Output: 1.00000
Note: First-come, first-served people can only get the first seat.


Example 2:
Input: n = 2
Output: 0.50000
Explanation: The second person has a probability of 0.5 of getting the second seat (when the first person gets the first seat).


constraint:
`1 <= n <= 10^5`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"In some array arr, the values ​​are in arithmetic progression: for each 0 <= i < arr.length - 1, the values ​​of arr[i+1] - arr[i] are equal.

Then, a value that is not the first or last value in the array is removed from arr.

Returns the removed value.


Example 1:
Input: arr = [5,7,11,13]
Output: 9
Explanation: The previous array was [5,7,9,11,13].


Example 2:
Input: arr = [15,13,​​12]
Output: 14
Explanation: The previous array was [15,14,13,12].


constraint:
`3 <= arr.length <= 1000`
`0 <= arr[i] <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of available time slots ""slots1"" and ""slots2"" for two people and a meeting duration of ""duration"", return the earliest time slot of duration ""duration"" that is valid for both of them.

Returns an empty array if there are no common slots that satisfy the requirement.

The format of the time slot is an array with two elements ""[start, end]"", representing the inclusive time range from ""start"" to ""end"".

It is guaranteed that two available slots for the same person do not cross each other. That is, for any two time periods ""[start1, end1]"" and ""[start2, end2]"" of the same person, either ""start1 > end2"" or ""start2 > end1"".


Example 1:
Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 8
Output: [60,68]

Example 2:
Input: slots1 = [[10,50],[60,120],[140,210]], slots2 = [[0,15],[60,70]], duration = 12
output: []

constraint:
`1 <= slots1.length, slots2.length <= 104`
`slots1[i].length, slots2[i].length == 2`
`slots1[i][0] < slots1[i][1]`
`slots2[i][0] < slots2[i][1]`
`0 <= slots1[i][j], slots2[i][j] <= 109`
`1 <= duration <= 106`",0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"You have some coins. The probability that the i-th coin comes up heads is prob[i].

Returns the probability that the number of heads-up coins is equal to ""target"", if you toss each coin exactly once.


Example 1:
Input: probability = [0.4], target = 1
Output: 0.40000

Example 2:
Input: probability = [0.5,0.5,0.5,0.5,0.5], target = 0
Output: 0.03125

constraint:
`1 <= prob.length <= 1000`
`0 <= probability[i] <= 1`
`0 <= target ``<= prob.length`
Answers are considered correct if they are within `10^-5` of the correct answer.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a chocolate bar that consists of some chunks. Each chunk has its own sweetness, given by the array sweetness.

You want to share chocolate with your `K` friends, so you start using `K` cuts to cut the chocolate bar into `K+1` pieces, each consisting of some consecutive pieces.

Be generous and you'll eat the slice with the least total sweetness and share the rest with your friends.

Find the maximum total sweetness that can be obtained by optimally cutting the chocolate bar.


Example 1:
Input: Sweetness = [1,2,3,4,5,6,7,8,9], K = 5
Output: 6
Explanation: You can divide chocolate into [1,2,3], [4,5], [6], [7], [8], [9]

Example 2:
Input: Sweetness = [5,6,7,8,9,1,2,3,4], K = 8
Output: 1
Explanation: There is only one way to cut the bar into 9 pieces.


Example 3:
Input: Sweetness = [1,2,2,1,2,2,1,2,2], K = 2
Output: 5
Explanation: You can divide chocolate into [1,2,2], [1,2,2], [1,2,2]

constraint:
`0 <= K < sweetness.length <= 10^4`
`1 <= sweetness[i] <= 10^5`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinates of a point. Check that the points form a straight line in the XY plane.


Example 1:
Input: Coordinates = [[1,2],[2,3],[3,4],[4,5],[5,6],[6,7]]
output: true

Example 2:
Input: Coordinates = [[1,1],[2,2],[3,4],[4,5],[5,6],[7,7]]
output: error

constraint:
`2 <= coordinate.length <= 1000`
`coordinates[i].length == 2`
`-10^4 <= coordinate[i][0], coordinate[i][1] <= 10^4`
`coordinates` do not contain duplicate points.",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of folders, delete all subfolders within those folders, returning the folders in arbitrary order after deletion.

If a `folder[i]` is inside another `folder[j]`, it is said to be a subfolder of it.

The format of a path is one or more concatenated strings of the following form: `/` followed by one or more lowercase English letters. For example, `/leetcode` and `/leetcode/problems` are valid paths, but an empty string and `/` are not.


Example 1:
Input: folder = [""/a"",""/a/b"",""/c/d"",""/c/d/e"",""/c/f""]
Output: [""/a"", ""/c/d"", ""/c/f""]
Explanation: The folder ""/a/b/"" is a subfolder of ""/a"", and ""/c/d/e"" is inside the folder ""/c/d"" in our file system.


Example 2:
Input: Folder = [""/a"",""/a/b/c"",""/a/b/d""]
Output: [""/a""]
Explanation: The folders ""/a/b/c"" and ""/a/b/d/"" will be deleted because they are subfolders of ""/a"".


Example 3:
Input: Folder = [""/a/b/c"",""/a/b/ca"",""/a/b/d""]
Output: [""/a/b/c"",""/a/b/ca"",""/a/b/d""]

constraint:
`1 <= folder.length <= 4 * 10^4`
`2 <= folder[i].length <= 100`
`folder[i]` contains only lowercase letters and '/'
`folder[i]` always starts with the character '/'
Each folder name is unique.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string containing only 4 characters ""Q"", ""W"", ""E"" and ""R"".

A string is said to be balanced if each character in the string occurs ""n/4"" times, where ""n"" is the length of the string.

Returns the minimum length of a substring that can be replaced with any other string of the same length to balance the original string s.

Returns 0 if the string is already balanced.


Example 1:
Input: s = ""QWER""
output: 0
Explanation: s is already balanced.


Example 2:
Input: s = ""QQWE""
Output: 1
Explanation: We need to replace a 'Q' with an 'R' so that ""RQWE"" (or ""QRWE"") is balanced.


Example 3:
Input: s = ""QQQW""
Output: 2
Explanation: We can replace the first ""QQ"" with ""ER"".

Example 4:
Input: s = ""QQQQ""
Output: 3
Explanation: We can replace the last 3 'Q's so that s = ""QWER"".


constraint:
`1 <= s.length <= 10^5`
`s.length` is a multiple of `4`
`s` contains only `'Q'`, `'W'`, `'E'` and `'R'`.",0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` jobs, each of which is scheduled to be completed between `startTime[i]` and `endTime[i]` for profit `profit[i]`.

Given the `startTime`, `endTime` and `profit` arrays, return the maximum profit you can make such that no two jobs in the subset have overlapping time ranges.

If you select a job that ends at time ""X"", you will be able to start another job that starts at time ""X"".


Example 1:
Input: start time = [1,2,3,3], end time = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The selected subsets are the first and fourth jobs.
Timeframe [1-3]+[3-6] , we get profit 120 = 50 + 70.


Example 2:
Input: start time = [1,2,3,4,6], end time = [3,5,10,6,9], profit = [20,20,100,70,60]
Output: 150
Explanation: The selected subsets are the first, fourth and fifth jobs.
Gained profit 150 = 20 + 70 + 60.


Example 3:
Input: start time = [1,1,1], end time = [2,3,4], profit = [5,6,4]
Output: 6

constraint:
`1 <= startTime.length == endTime.length == profit.length <= 5 * 104`
`1 <= start_time[i] < end_time[i] <= 109`
`1 <= profit[i] <= 104`",0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a url `startUrl` and an interface `HtmlParser`, implement a web crawler to crawl all links under the same hostname as `startUrl`.
Returns all urls fetched by your crawler in any order.

Your crawler should:
Start page: `startUrl`
Call `HtmlParser.getUrls(url)` to get all urls from the web page at the given url.

Don't crawl the same link twice.

Only explore links with the same hostname as ""startUrl"".

As shown in the example url above, the hostname is ""example.org"". For simplicity, you can assume all urls use http protocol without specifying any port. For example, url `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while url `http://example.org/test` and `http: //example.com/abc` is not under the same hostname.

The `HtmlParser` interface is defined as follows:
interface HtmlParser {
  // Return a list of all urls from the web page at the given url.

  public List<String> getUrls(String url);
}
Below are two examples explaining the functionality of the question, for custom testing purposes you will have three variables urls`, edges` and startUrl`. Note that you can only access startUrl in code, not urls and edges directly in code.


Example 1:
enter:
url = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com"",
  ""http://news.yahoo.com/us""
]
Edges = [[2,0],[2,1],[3,2],[3,1],[0,4]]
startUrl = ""http://news.yahoo.com/news/topics/""
Output: [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.yahoo.com/us""
]

Example 2:
enter:
url = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com""
]
Edges = [[0,2],[2,1],[3,2],[3,1],[3,0]]
startUrl = ""http://news.google.com""
Output: [""http://news.google.com""]
Explanation: startUrl links to all other pages that do not share the same hostname.


constraint:
`1 <= urls.length <= 1000`
`1 <= urls[i].length <= 300`
`startUrl` is one of `urls`.

The hostname label must be 1 to 63 characters long, including dots, and can only contain ASCII letters from 'a' to 'z', numbers from '0' to '9', and the hyphen minus sign ('-' ).

The hostname cannot start or end with a minus sign hyphen ('-').
See: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
You might assume that there are no duplicates in the url library.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a callable function f(x, y) with a hidden formula and value z, reverse engineer the formula and return all pairs of positive integers x and y for which f(x,y) == z`. You can return pairs in any order.

While hiding the exact formula, the function is monotonically increasing, ie:
`f(x, y) < f(x + 1, y)`
`f(x, y) < f(x, y + 1)`
The function interface is defined as follows:
interface custom function {
people:
  // Returns the positive integer f(x, y) of two positive integers x and y according to the formula.

  int f(int x, int y);
};
We will judge your solution by:
Judge has a list of 9 hidden CustomFunction implementations, and a method to generate all valid pairs of answer keys for a particular z.

Judge will receive two inputs: a ""function_id"" (which determines which implementation to test your code with) and a target ""z"".

The referee will call your ""findSolution"" and compare your result with the answer key.

If your results match the answers, your solution will be ""accepted"".


Example 1:
Input: function_id = 1, z = 5
Output: [[1,4],[2,3],[3,2],[4,1]]
Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.

The following positive integer values ​​of x and y make f(x, y) equal to 5:
x=1, y=4 -> f(1, 4) = 1 + 4 = 5.

x=2, y=3 -> f(2, 3) = 2 + 3 = 5.

x=3, y=2 -> f(3, 2) = 3 + 2 = 5.

x=4, y=1 -> f(4, 1) = 4 + 1 = 5.


Example 2:
Input: function_id = 2, z = 5
Output: [[1,5],[5,1]]
Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.

The following positive integer values ​​of x and y make f(x, y) equal to 5:
x=1, y=5 -> f(1, 5) = 1 * 5 = 5.

x=5, y=1 -> f(5, 1) = 5 * 1 = 5.


constraint:
`1 <= function_id <= 9`
`1 <= z <= 100`
Guaranteed that the solution of `f(x, y) == z` is in the range `1 <= x, y <= 1000`.

f(x, y) is also guaranteed to fit in a 32-bit signed integer if 1 <= x, y <= 1000.",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given 2 integers ""n"" and ""start"". Your task is to return any permutation `p` of `(0,1,2...,2^n -1)` such that:
`p[0] = start`
The binary representations of `p[i]` and `p[i+1]` differ by only one bit.

`p[0]` and `p[2^n -1]` must also differ by only one bit in their binary representations.


Example 1:
Input: n = 2, start = 3
Output: [3,2,0,1]
Explanation: The binary representation of the permutation is (11,10,00,01).
All adjacent elements differ by one bit. Another valid permutation is [3,1,0,2]

Example 2:
Input: n = 3, start = 2
Output: [2,6,7,5,4,0,1,3]
Explanation: The binary representation of the permutation is (010,110,111,101,100,000,001,011).


constraint:
`1 <= n <= 16`
`0 <= start < 2^n`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array arr . The string s is the concatenation of subsequences of arr with unique characters.

Return the largest possible length of s.


Example 1:
Input: arr = [""un"",""iq"",""ue""]
Output: 4
Explanation: All possible concatenations are """", ""un"", ""iq"", ""ue"", ""uniq"" and ""ique"".

The maximum length is 4.


Example 2:
Input: arr = [""cha"",""r"",""act"",""ers""]
Output: 6
Explanation: Possible solutions are ""chaers"" and ""acters"".


Example 3:
Input: arr = [""abcdefghijklmnopqrstuvwxyz""]
Output: 26

constraint:
`1 <= arr.length <= 16`
`1 <= arr[i].length <= 26`
`arr[i]` contains only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a rectangle of size `n` x `m`, find the smallest integer side-length square that tiles the rectangle.


Example 1:
Input: n=2, m=3
Output: 3
Explanation: `3` squares are needed to cover the rectangle.

`2` (a `1x1` square)
`1` (the square of `2x2`)

Example 2:
Input: n = 5, m = 8
Output: 5

Example 3:
Input: n = 11, m = 13
Output: 6

constraint:
`1 <= n <= 13`
`1 <= m <= 13`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a url `startUrl` and an interface `HtmlParser`, implement a multithreaded web crawler to crawl all links under the same hostname as `startUrl`.
Returns all urls fetched by your crawler in any order.

Your crawler should:
Start page: `startUrl`
Call `HtmlParser.getUrls(url)` to get all urls from the web page at the given url.

Don't crawl the same link twice.

Only explore links with the same hostname as ""startUrl"".

As shown in the example url above, the hostname is ""example.org"". For simplicity, you can assume all urls use http protocol without specifying any port. For example, url `http://leetcode.com/problems` and `http://leetcode.com/contest` are under the same hostname, while url `http://example.org/test` and `http: //example.com/abc` is not under the same hostname.

The `HtmlParser` interface is defined as follows:
interface HtmlParser {
  // Return a list of all urls from the web page at the given url.

  // This is a blocking call, meaning it will execute the HTTP request and return when that request is complete.

  public List<String> getUrls(String url);
}
Note that `getUrls(String url)` simulates performing HTTP requests. You can think of it as a blocking function call waiting for an HTTP request to complete. Guaranteed getUrls(String url) will return urls within 15 milliseconds. A single-threaded solution would exceed the time limit, so can your multi-threaded web crawler do better?
Below are two examples explaining the functionality of the question, for custom testing purposes you will have three variables urls`, edges` and startUrl`. Note that you can only access startUrl in code, not urls and edges directly in code.

follow up:
Suppose we have 10,000 nodes and 1 billion URLs to crawl. We will deploy the same software on each node. The software knows about all nodes. We must minimize the communication between machines and ensure that each node does an equal amount of work. How will your web crawler design change?
What if one node fails or is not working?
How do you know when the crawler is done?

Example 1:
enter:
url = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com"",
  ""http://news.yahoo.com/us""
]
Edges = [[2,0],[2,1],[3,2],[3,1],[0,4]]
startUrl = ""http://news.yahoo.com/news/topics/""
Output: [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.yahoo.com/us""
]

Example 2:
enter:
url = [
  ""http://news.yahoo.com"",
  ""http://news.yahoo.com/news"",
  ""http://news.yahoo.com/news/topics/"",
  ""http://news.google.com""
]
Edges = [[0,2],[2,1],[3,2],[3,1],[3,0]]
startUrl = ""http://news.google.com""
Output: [""http://news.google.com""]
Explanation: startUrl links to all other pages that do not share the same hostname.


constraint:
`1 <= urls.length <= 1000`
`1 <= urls[i].length <= 300`
`startUrl` is one of `urls`.

The hostname label must be 1 to 63 characters long, including dots, and can only contain ASCII letters from 'a' to 'z', numbers from '0' to '9', and the hyphen minus sign ('-' ).

The hostname cannot start or end with a minus sign hyphen ('-').
See: https://en.wikipedia.org/wiki/Hostname#Restrictions_on_valid_hostnames
You might assume that there are no duplicates in the url library.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an initial array arr , each day you generate a new array using the previous day's array.

On day i, you do the following on the array for day i-1 to produce the array for day i:
An element is incremented if it is smaller than its left and right neighbors.

If an element is greater than both its left and right neighbors, the element is decremented.

The first and last elements never change.

After a few days, the array has not changed. Return the final array.


Example 1:
Input: arr = [6,2,3,4]
Output: [6,3,3,4]
explain:
On the first day, the array changes from [6,2,3,4] to [6,3,3,4].

No further operations can be performed on the array.


Example 2:
Input: arr = [1,6,3,4,3,5]
Output: [1,4,4,4,4,5]
explain:
On the first day, the array changes from [1,6,3,4,3,5] to [1,5,4,3,4,5].

The next day, the array changes from [1,5,4,3,4,5] to [1,4,4,4,4,5].

No further operations can be performed on the array.


constraint:
`3 <= arr.length <= 100`
`1 <= arr[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a Leaderboard class that has 3 functions:
`addScore(playerId, score)`: Update the leaderboard by adding score to the given player's score. If there is no player with that id in the leaderboard, he will be added to the leaderboard with the given ""score"".

`top(K)`: Returns the sum of the scores of the top K players.

`reset(playerId)`: Reset the score of the player with the given id to 0 (in other words, remove it from the leaderboard). Make sure to add the player to the leaderboard before calling this function.

Initially, the leaderboard is empty.


Example 1:
enter:
[""leaderboard"", ""addScore"", ""addScore"", ""addScore"", ""addScore"", ""addScore"", ""top"", ""reset"", ""reset"", ""addScore"", ""top""]
[[],[1,73],[2,56],[3,39],[4,51],[5,4],[1],[1],[2],[2,51 ],[3]]
output:
[null,null,null,null,null,null,73,null,null,null,141]
explain:
Leaderboard leaderboard = new Leaderboard();
leaderboard.addScore(1,73); // Leaderboard = [[1,73]];
leaderboard.addScore(2,56); // Leaderboard = [[1,73],[2,56]];
leaderboard.addScore(3,39); // Leaderboard = [[1,73],[2,56],[3,39]];
leaderboard.addScore(4,51); // Leaderboard = [[1,73],[2,56],[3,39],[4,51]];
leaderboard.addScore(5,4); // leaderboard = [[1,73],[2,56],[3,39],[4,51],[5,4]];
leaderboard.top(1); // return 73;
leaderboard.reset(1); // leaderboard = [[2,56],[3,39],[4,51],[5,4]];
leaderboard.reset(2); // leaderboard = [[3,39],[4,51],[5,4]];
leaderboard.addScore(2,51); // Leaderboard = [[2,51],[3,39],[4,51],[5,4]];
leaderboard.top(3); // return 141 = 51 + 51 + 39;

constraint:
`1 <= playerId, K <= 10000`
It is guaranteed that `K` is less than or equal to the current number of players.

`1 <= score <= 100`
There will be at most 1000 function calls.",0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected tree, return its diameter: the number of edges of the longest path in the tree.

The tree is given as an ""edges"" array, where ""edges[i] = [u, v]"" are bidirectional edges between nodes ""u"" and ""v"". Each node has a label in the set ""{0, 1, ..., edges.length}"".


Example 1:
Input: edges = [[0,1],[0,2]]
Output: 2
explain:
The longest path of the tree is the path 1 - 0 - 2.


Example 2:
Input: edges = [[0,1],[1,2],[2,3],[1,4],[4,5]]
Output: 4
explain:
The longest path of the tree is the path 3 - 2 - 1 - 4 - 5.


constraint:
`0 <= edges.length < 10^4`
`Side[i][0] != Side[i][1]`
`0 <= edges[i][j] <= edges.length`
The given edges form an undirected tree.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"", you can select a palindromic subarray ""arr[i], arr[i+1], ..., arr[j]"" one at a time, where ""i <= j"", and delete It comes from a subarray of the given array. Note that when a subarray is deleted, the elements to the left and right of that subarray are shifted to fill the gap left by the deletion.

Returns the minimum number of moves required to remove all numbers from the array.


Example 1:
Input: arr = [1,2]
Output: 2

Example 2:
Input: arr = [1,3,4,1,5]
Output: 3
Explanation: delete [4] then delete [1,3,1] then delete [5].


constraint:
`1 <= arr.length <= 100`
`1 <= arr[i] <= 20`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s1` and `s2` of equal length, consisting only of the letters `""x""` and `""y"". Your task is to make these two strings equal to each other. You can swap any two characters belonging to different strings, which means: swap `s1[i]` and `s2[j]`.

Returns the minimum number of swaps required to make s1 and s2 equal, or -1 if not possible.


Example 1:
Input: s1 = ""xx"", s2 = ""yy""
Output: 1
explain:
Swap s1[0] and s2[1], s1 = ""yx"", s2 = ""yx"".


Example 2:
Input: s1 = ""xy"", s2 = ""yx""
Output: 2
explain:
Swap s1[0] and s2[0], s1 = ""yy"", s2 = ""xx"".

Swap s1[0] and s2[1], s1 = ""xy"", s2 = ""xy"".

Note that you cannot swap s1[0] and s1[1] to make s1 equal to ""yx"" because we can only swap characters in different strings.


Example 3:
Input: s1 = ""xx"", s2 = ""xy""
Output: -1

Example 4:
Input: s1 = ""xxyyxyxyxx"", s2 = ""xyyxyxxxyx""
Output: 4

constraint:
`1 <= s1.length, s2.length <= 1000`
`s1, s2` only contain `'x'` or `'y'`.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"". A contiguous subarray is said to be nice if there are ""k"" odd numbers on it.

Returns the number of nice subarrays.


Example 1:
Input: nums = [1,1,2,1,1], k = 3
Output: 2
Explanation: The only subarrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].


Example 2:
Input: nums = [2,4,6], k = 1
output: 0
Explanation: There are no odd numbers in the array.


Example 3:
Input: nums = [2,2,2,1,2,2,1,2,2,2], k = 2
output: 16

constraint:
`1 <= nums.length <= 50000`
`1 <= nums[i] <= 10^5`
`1 <= k <= nums.length`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s consisting of `'('` , `')' and lowercase English characters.
Your task is to remove the minimum number of parentheses (`'('` or `')'`, anywhere) such that the resulting parenthesized string is valid and return any valid string.

Formally, a parenthesized string is valid if and only if:
it is the empty string, containing only lowercase characters, or
It can be written as `AB` (`A` concatenated with `B`), where `A` and `B` are valid strings, or
It can be written as `(A)`, where `A` is a valid string.


Example 1:
Input: s = ""lee(t(c)o)de)""
Output: ""lee(t(c)o)de""
Explanation: ""lee(t(co)de)"" , ""lee(t(c)ode)"" will also be accepted.


Example 2:
Input: s = ""a)b(c)d""
Output: ""ab(c)d""

Example 3:
Input: s = ""))((""
Output: """"
Note: Empty strings are also valid.


Example 4:
Input: s = ""(a(b(c)d)""
Output: ""a(b(c)d)""

constraint:
`1 <= s.length <= 10^5`
`s[i]` is one of `'('` , `')' and lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of positive integers. Your task is to select some subset of `nums`, multiply each element by an integer and add all these numbers. An array is said to be good if you can get the sum of ""1""s from it over any possible subset and multiplicand.

Returns True if the array is good, otherwise returns False.


Example 1:
Input: nums = [12,5,7,23]
output: true
Explanation: Choose the numbers 5 and 7.

5*3 + 7*(-2) = 1

Example 2:
Input: nums = [29,6,10]
output: true
Explanation: Choose the numbers 29, 6 and 10.

29*1 + 6*(-3) + 10*(-1) = 1

Example 3:
Input: nums = [3,6]
output: error

constraint:
`1 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the following details of a matrix with 'n' columns and '2' rows:
The matrix is ​​a binary matrix, which means that each element in the matrix can be ""0"" or ""1"".

The sum of the elements of row 0 (upper) is given as ""upper"".

The sum of the elements of the first (lower) row is designated as ""lower"".

The sum of the elements in column i (indexed from 0) is colsum[i], where colsum is an integer array of length n.

Your task is to reconstruct the matrix with `upper`, `lower` and `colsum`.

Return it as a two-dimensional array of integers.

If there are multiple valid solutions, any of them will be accepted.

Returns an empty two-dimensional array if no valid solution exists.


Example 1:
Input: up = 2, down = 1, colsum = [1,1,1]
Output: [[1,1,0],[0,0,1]]
Explanation: [[1,0,1],[0,1,0]] and [[0,1,1],[1,0,0]] are also correct answers.


Example 2:
Input: up = 2, down = 3, colsum = [2,2,1,1]
output: []

Example 3:
Input: up = 5, down = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]

constraint:
`1 <= colsum.length <= 10^5`
`0 <= top, bottom <= colsum.length`
`0 <= colsum[i] <= 2`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 2D ""grid"" consisting of ""0s"" (land) and ""1s"" (water). An island is a maximal 4-way connected group of ""0s"", a closed island is an island completely (left, top, right, bottom) surrounded by ""1s"".
Returns the number of closed islands.


Example 1:
Input: Grid = [[1,1,1,1,1,1,1,0],[1,0,0,0,0,1,1,0],[1,0,1,0] , 1,1,1,0],[1,0,0,0,0,1,0,1],[1,1,1,1,1,1,1,0]]
Output: 2
explain:
Gray islands are closed because they are completely surrounded by water (set of 1).


Example 2:
Input: grid = [[0,0,1,0,0],[0,1,0,1,0],[0,1,1,1,0]]
Output: 1

Example 3:
Input: Grid = [[1,1,1,1,1,1,1],
               [1,0,0,0,0,0,1],
               [1,0,1,1,1,0,1],
               [1,0,1,0,1,0,1],
               [1,0,1,1,1,0,1],
               [1,0,0,0,0,0,1],
               [1,1,1,1,1,1,1]]
Output: 2

constraint:
`1 <= grid.length, grid[0].length <= 100`
`0 <= grid[i][j] <= 1`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of ""words"", a list of individual ""letters"" (possibly repeated), and a ""score"" for each character.

Returns the maximum score for any set of valid words formed using the given letters (`words[i]` cannot be used two or more times).

It is not necessary to use all characters in `letters`, each letter can only be used once. The scores for letters ""a"", ""b"", ""c"", ..., ""z"" are given by ""score[0]"", ""score[1]"", ..., `score[25]` respectively .


Example 1:
Input: words = [""dog"",""cat"",""dad"",""good""], letters = [""a"",""a"",""c"",""d"",""d"",""d"","" g"",""o"",""o""], score = [1,0,9,5,0,0,3,0,0,0,0,0,0,0,2,0,0,0 ,0,0,0,0,0,0,0,0]
Output: 23
explain:
Fractions a=1, c=9, d=5, g=3, o=2
Given the letters, we can form the words ""Dad"" (5+1+5) and ""Good"" (3+2+2+5) for a score of 23.

The words ""dad"" and ""dog"" only get 21 points.


Example 2:
Input: words = [""xxxz"",""ax"",""bx"",""cx""], letters = [""z"",""a"",""b"",""c"",""x"",""x"","" x""], fraction = [4,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 ,0,5,0,10]
Output: 27
explain:
Score a=4, b=4, c=4, x=5, z=10
Given the letters, we can form the words ""ax"" (4+5), ""bx"" (4+5), and ""cx"" (4+5) with a score of 27.

The word ""xxxz"" only gets 25 points.


Example 3:
Input: words = [""leetcode""], letters = [""l"",""e"",""t"",""c"",""o"",""d""], score = [0,0,1,1,1 ,0,0,0,0,0,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0]
output: 0
explain:
The letter ""e"" can only be used once.


constraint:
`1 <= words.length <= 14`
`1 <= words[i].length <= 15`
`1 <= letters.length <= 100`
`letter[i].length == 1`
`score.length == 26`
`0 <= score[i] <= 10`
`words[i]`, `letters[i]` contain only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer `num`, return its encoded string.

Encoding is done by converting integers to strings using a secret function, which you should deduce from the table below:

Example 1:
Input: num = 23
Output: ""1000""

Example 2:
Input: num = 107
Output: ""101100""

constraint:
`0 <= num <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a number of ""regions"" lists, where the first region of each list contains all the other regions in that list.

Naturally, if an area ""X"" contains another area ""Y"", then ""X"" is greater than ""Y"". Also by definition, a region X contains itself.

Given two regions ""region1"", ""region2"", find the smallest region that contains these two regions.

If given the regions `r1`, `r2`, and `r3` such that `r1` contains `r3`, then it is guaranteed that there cannot be `r2` such that `r2` contains `r3`.

It guarantees that the smallest region exists.


Example 1:
enter:
regions = [[""Earth"",""North America"",""South America""],
[""North America"",""United States"",""Canada""],
[""United States"",""New York"",""Boston""],
[""Canada"", ""Ontario"", ""Quebec""],
[""South America"",""Brazil""]],
region1 = ""Quebec"",
region2 = ""New York""
Output: ""North America""

constraint:
`2 <= regions.length <= 10^4`
`region1 != region2`
All strings are composed of English letters and spaces, up to 20 letters.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a pair of equivalent words ""synonyms"" and a list of sentences ""text"", return all possible synonyms sorted in lexicographical order.


Example 1:
enter:
Synonyms = [[""Happy"",""Happy""],[""Sad"",""Sad""],[""Happy"",""Happy""]],
text = ""I am happy today, but sad yesterday""
output:
[""I was happy today, but sad yesterday"",
""I am happy today and sad yesterday"",
""Today is very happy, yesterday was very sad"",
""Today is very happy, yesterday was very sad"",
""Today is very happy, yesterday was very sad"",
""I am happy today, but sad yesterday""]

Example 2:
Input: synonyms = [[""happy"",""joy""],[""cheerful"",""glad""]], text = ""I am happy today but was sad yesterday""
Output: [""I'm happy today, but sad yesterday"", ""I'm happy today, but sad yesterday""]

Example 3:
Input: Synonyms = [[""a"",""b""],[""c"",""d""],[""e"",""f""]], text = ""a c e""
Output: [""a c e"",""a c f"",""a d e"",""a d f"",""b c e"",""b c f"",""b d e"",""b d f""]

Example 4:
Input: synonyms = [[""a"",""QrbCl""]], text = ""d QrbCl ya ya NjZQ""
Output: [""d QrbCl ya ya NjZQ"",""d a ya ya NjZQ""]

constraint:
`0 <= synonyms. length <= 10`
`synonyms[i].length == 2`
`Synonyms[i][0] != Synonyms[i][1]`
All words can only contain up to 10 English letters.

`text` is a single space-separated sentence of up to 10 words.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an even number of people num_people forming a circle, everyone shakes hands with everyone else, so there are num_people / 2 handshakes in total.

Returns the number of ways these handshakes can occur so that handshakes do not cross.

Since this number can be very large, return the answer modulo `10^9 + 7`

Example 1:
Input: num_people = 2
Output: 1

Example 2:
Input: num_people = 4
Output: 2
Explanation: There are two methods, the first one is [(1,2),(3,4)], and the second one is [(2,3),(4,1)].


Example 3:
Input: num_people = 6
Output: 5

Example 4:
Input: num_people = 8
Output: 14

constraint:
`2 <= num_people <= 1000`
`num_people % 2 == 0`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional ""grid"" of size ""m x n"" and an integer ""k"". You need to move `grid` `k` times.

In one shift operation:
The element at `grid[i][j]` is moved to `grid[i][j + 1]`.

The element at `grid[i][n - 1]` is moved to `grid[i + 1][0]`.

Elements at `grid[m - 1][n - 1]` are moved to `grid[0][0]`.

Returns a 2D grid after applying the shift operation k times.


Example 1:
Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[9,1,2],[3,4,5],[6,7,8]]

Example 2:
Input: `grid` = [[3,8,1,9],[19,7,2,5],[4,6,11,10],[12,0,21,13]], k = 4
Output: [[12,0,21,13],[3,8,1,9],[19,7,2,5],[4,6,11,10]]

Example 3:
Input: `grid` = [[1,2,3],[4,5,6],[7,8,9]], k = 9
Output: [[1,2,3],[4,5,6],[7,8,9]]

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters <= 50`
`1 <= n <= 50`
`-1000 <= grid[i][j] <= 1000`
`0 <= k <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree with the following rules:
`root.val == 0`
If `treeNode.val == x` and `treeNode.left != null`, then `treeNode.left.val == 2 * x + 1`
If `treeNode.val == x` and `treeNode.right != null`, then `treeNode.right.val == 2 * x + 2`
Now the binary tree is tainted, which means that all `treeNode.val`s are changed to `-1`.

You need to restore the binary tree first, then implement the FindElements class:
`FindElements(TreeNode* root)` initializes the object with a tainted binary tree, you need to restore it first.

`bool find(int target)` returns if the `target` value exists in the restored binary tree.


Example 1:
enter
[""Find Element"", ""Find"", ""Find""]
[[[-1,null,-1]],[1],[2]]
output
[empty, false, true]
explain
FindElements findElements = new FindElements([-1,null,-1]);
findElements.find(1); // returns false
findElements.find(2); // return true

Example 2:
enter
[""Find Element"", ""Find"", ""Find"", ""Find""]
[[[-1,-1,-1,-1,-1]],[1],[3],[5]]
output
[empty, true, true, false]
explain
FindElements findElements = new FindElements([-1,-1,-1,-1,-1]);
findElements.find(1); // return true
findElements.find(3); // return true
findElements.find(5); // returns false

Example 3:
enter
[""Find Element"", ""Find"", ""Find"", ""Find"", ""Find""]
[[[-1,null,-1,-1,null,-1]],[2],[3],[4],[5]]
output
[null,true,false,false,true]
explain
FindElements findElements = new FindElements([-1,null,-1,-1,null,-1]);
findElements.find(2); // return true
findElements.find(3); // returns false
findElements.find(4); // returns false
findElements.find(5); // return true

constraint:
`TreeNode.val == -1`
The height of the binary tree is less than or equal to `20`
The total number of nodes is between `[1, 10^4]`
The total number of calls to `find()` is between `[1, 10^4]`
`0 <= target <= 10^6`",0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", we need to find the largest possible sum of array elements such that it is divisible by three.


Example 1:
Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Choose the numbers 3, 6, 1, and 8 that add to 18 (the largest sum divisible by 3).


Example 2:
input: nums = [4]
output: 0
Explanation: Since 4 is not divisible by 3, don't choose any numbers.


Example 3:
Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Choose the numbers 1, 3, 4, and 4 whose sum is 12 (the largest sum divisible by 3).


constraint:
`1 <= nums.length <= 4 * 10^4`
`1 <= nums[i] <= 10^4`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a two-dimensional plane, there are n points with integer coordinates points[i] = [xi, yi] . Returns the shortest time in seconds to visit all points in the order given by 'points'.

You can move according to the following rules:
In `1` second, you can:

Move one unit vertically,
move one unit horizontally, or
Move sqrt(2) units diagonally (in other words, move one unit vertically and then one unit horizontally in 1 second).

You must visit the points in the same order they appear in the array.

You can pass points that appear later in the sequence, but they don't count as visits.


Example 1:
Input: Points = [[1,1],[3,4],[-1,0]]
Output: 7
Explanation: An optimal path is [1,1] -> [2,2] -> [3,3] -> [3,4] -> [2,3] -> [1,2] -> [ 0 ,1] -> [-1,0]
Time from [1,1] to [3,4] = 3 seconds
Time from [3,4] to [-1,0] = 4 seconds
Total time = 7 seconds

Example 2:
Input: Points = [[3,2],[-2,2]]
Output: 5

constraint:
`points. length == n`
`1 <= n <= 100`
`points[i].length == 2`
`-1000 <= points[i][0], points[i][1] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a map of the centers of servers, represented as a ""m * n"" matrix ""grid"" of integers, where 1 means there is a server in that cell and 0 means there is no server. Two servers are said to be communicating if they are in the same row or column.

Returns the number of servers communicating with any other server.


Example 1:
Input: Grid = [[1,0],[0,1]]
output: 0
Explanation: No server can communicate with other servers.


Example 2:
Input: Grid = [[1,0],[1,1]]
Output: 3
Explanation: All three servers can communicate with at least one other server.


Example 3:
Input: grid = [[1,1,0,0],[0,0,1,0],[0,0,1,0],[0,0,0,1]]
Output: 4
Explanation: The two servers in the first row can communicate with each other. The two servers in the third column can communicate with each other. The server in the lower right cannot communicate with any other server.


constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters <= 250`
`1 <= n <= 250`
`grid[i][j] == 0 or 1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of strings ""products"" and a string ""searchWord"". We want to design a system that, after typing each character of `searchWord`, suggests at most three product names from `products`. Suggested products should have the same prefix as the search term. If there are more than three products with a common prefix, return the three lexicographically smallest products.

After typing each character of `searchWord`, return a list of suggested `products` listings.

Example 1:
Input: products = [""mobile"",""mouse"",""moneypot"",""monitor"",""mousepad""], searchWord = ""mouse""
Output: [
[""Mobile"", ""Cashcow"", ""Monitoring""],
[""Mobile"", ""Cashcow"", ""Monitoring""],
[""mouse"", ""mousepad""],
[""mouse"", ""mousepad""],
[""mouse"", ""mousepad""]
]
Explanation: Products sorted lexicographically = [""mobile"",""moneypot"",""monitor"",""mouse"",""mousepad""]
After entering m and mo all products match and we show the user [""mobile"",""moneypot"",""monitor""]
After typing mou, mous, and mouse, the system suggests [""mouse"",""mousepad""]

Example 2:
Input: products = [""havana""], searchWord = ""havana""
Output: [[""havana""],[""havana""],[""havana""],[""havana""],[""havana""],[""havana""]]

Example 3:
Input: products = [""bags"",""baggage"",""banner"",""box"",""cloths""], searchWord = ""bags""
Output: [[""baggage"",""bags"",""banner""],[""baggage"",""bags"",""banner""],[""baggage"",""bags""],[""bags""]]

Example 4:
Input: products = [""havana""], searchWord = ""tatiana""
Output: [[], [], [], [], [], [], []]

constraint:
`1 <= products.length <= 1000`
There are no duplicate elements in `products`.

`1 <= Σ products[i].length <= 2 * 10^4`
All characters in `products[i]` are lowercase English letters.

`1 <= searchWord.length <= 1000`
All characters of `searchWord` are lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a pointer at index ""0"" in an array of size ""arrLen"". At each step, you can move 1 position to the left in the array, 1 position to the right or stay the same (the pointer should never be outside the array at any time).

Given two integers ""steps"" and ""arrLen"", return the number of ways that your pointer will still be at index ""0"" after exactly ""steps"" steps.

Since the answer may be too large, return modulo 10^9 + 7 .


Example 1:
Input: steps = 3, arrLen = 2
Output: 4
Explanation: There are 4 different ways to stay at index 0 after 3 steps.

right, left, stay
stay right left
right, stay, left
stay stay stay

Example 2:
Input: steps = 2, arrLen = 4
Output: 2
Explanation: There are 2 different ways to stay at index 0 after 2 steps
right left
stay, stay

Example 3:
Input: steps = 4, arrLen = 2
Output: 8

constraint:
`1 <= steps <= 500`
`1 <= arrLen <= 10^6`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A decimal number can be converted to its Hexspeak representation by first converting it to an uppercase hexadecimal string, then replacing all occurrences of the number ""0"" with the letter ""O"" and the number ""1"" with The letter ""I"". Such a representation is valid if and only if it consists only of letters from the set `{""A"", ""B"", ""C"", ""D"", ""E"", ""F"", ""I"", ""O ""}`.

Given a string num representing a decimal integer N, return the Hexspeak representation of N if valid, or ""ERROR"" otherwise.


Example 1:
Input: num = ""257""
Output: ""IOI""
Explanation: 257 is 101 in hexadecimal.


Example 2:
Input: num = ""3""
output: ""error""

constraint:
`1 <= N <= 10^12`
There are no leading zeros in the given string.

All answers must be in capital letters.",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A set of real numbers can be represented as the union of several disjoint intervals, where each interval has the form ""[a, b)"". A real number `x` is in the set if one of its intervals `[a, b)` contains `x` (i.e. `a <= x < b`).

You will get a sorted list of disjoint intervals ""intervals"" representing the set of real numbers as above, where ""intervals[i] = [ai, bi]"" represents the interval ""[ai, bi)"". You also get another interval ""toBeRemoved"".

Returns the set of reals with the interval ""toBeRemoved"" removed from ""intervals"". In other words, return a set of real numbers such that every ""x"" in the set is in ""intervals"", but not in ""toBeRemoved"". Your answer should be a sorted list of disjoint intervals as above.


Example 1:
Input: intervals = [[0,2],[3,4],[5,7]], toBeRemoved = [1,6]
Output: [[0,1],[6,7]]

Example 2:
Input: intervals = [[0,5]], toBeRemoved = [2,3]
Output: [[0,2],[3,5]]

Example 3:
Input: intervals = [[-5,-4],[-3,-2],[1,2],[3,5],[8,9]], toBeRemoved = [-1,4]
Output: [[-5,-4],[-3,-2],[4,5],[8,9]]

constraint:
`1 <= intervals. length <= 104`
`-109 <= ai < bi <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"A tree rooted at node 0 looks like this:
The number of nodes is `nodes`;
The value of the ith node is value[i];
The parent of the ith node is parent[i].

Delete all subtrees whose sum of node values ​​is zero.

After doing so, return the number of nodes remaining in the tree.


Example 1:
Input: Node = 7, Parent = [-1,0,0,1,2,2,2], Value = [1,-2,4,0,-2,-1,-1]
Output: 2

Example 2:
Input: Node = 7, Parent = [-1,0,0,1,2,2,2], Value = [1,-2,4,0,-2,-1,-2]
Output: 6

Example 3:
Input: Node = 5, Parent = [-1,0,1,0,0], Value = [-672,441,18,728,378]
Output: 5

Example 4:
Input: Node = 5, Parent = [-1,0,0,1,1], Value = [-686,-842,616,-739,-746]
Output: 5

constraint:
`1 <= nodes <= 10^4`
`parent.length == nodes`
`0 <= parent[i] <= nodes - 1`
`parent[0] == -1` means that `0` is the root.

`value.length == nodes`
`-10^5 <= value[i] <= 10^5`
The given input is guaranteed to represent a valid tree.",0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"(This question is an interactive question.)
Each ship is located at an integer point on the sea represented by the Cartesian plane, and each integer point can contain at most 1 ship.

You have a function ""Sea.hasShips(topRight, bottomLeft)"" that takes two points as arguments and returns ""true"" if there is at least one ship in the rectangle represented by those two points, included on the border.

Given two points: the upper-right and lower-left corners of a rectangle, return the number of ships present in that rectangle. There are guaranteed to be at most 10 ships inside the rectangle.

Commits with more than 400 calls to `hasShips` will be judged as wrong answers. Additionally, any settlement attempting to circumvent the judge will result in disqualification.


example :
enter:
ships = [[1,1],[2,2],[3,3],[5,5]], topRight = [4,4], bottomLeft = [0,0]
Output: 3
Explanation: From the range [0,0] to [4,4] we can count up to 3 ships.


constraint:
Typing `ships` is only used to initialize the map internally. You have to solve this ""blindfolded"". In other words, you have to find the answer using the given ""hasShips"" API without knowing where ""ships"" are.

`0 <= Bottom Left[0] <= Top Right[0] <= 1000`
`0 <= bottom left[1] <= top right[1] <= 1000`
`topRight != bottomLeft`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Tic Tac Toe is played by two players A and B on a 3 x 3 grid.

Here are the rules of Tic Tac Toe:
Players take turns placing characters into empty squares ("" "").

The first player A always places ""X"" characters and the second player B always places ""O"" characters.

The ""X"" and ""O"" characters are always placed in empty squares, never in filled squares.

The game ends when 3 identical (non-empty) characters fill any row, column or diagonal.

The game is also over if all squares are non-empty.

If the game is over, no more chess can be played.

Given an array ""moves"", where each element is another array of size 2, corresponding to the rows and columns of the grid, they label their respective roles in the order in which A and B are played.

Returns the winner of the game (A or B) if there is one, ""Tie"" if the game ended in a draw, or ""Pending"" if there are still moves to play.

You can assume that `moves` is valid (it follows the rules of tic-tac-toe), the grid is initially empty, and the ace will go first.


Example 1:
Input: Move = [[0,0],[2,0],[1,1],[2,1],[2,2]]
Output: ""A""
Explanation: ""A"" wins, he always goes first.

""X"" ""X"" ""X"" ""X"" ""X""
"" "" -> "" "" -> "" X "" -> "" X "" -> "" X ""
"""" ""O"" ""O"" ""OO"" ""OOX""

Example 2:
Input: Move = [[0,0],[1,1],[0,1],[0,2],[1,0],[2,0]]
Output: ""B""
Explanation: ""B"" wins.

""X"" ""X"" ""XX"" ""XXO"" ""XXO"" ""XXO""
"""" -> ""O"" -> ""O"" -> ""O"" -> ""XO"" -> ""XO""
""""""""""""""""""""""""O""

Example 3:
Input: Move = [[0,0],[1,1],[2,0],[1,0],[1,2],[2,1],[0,1],[0, 2],[2,2]]
Output: ""draw""
Explanation: The game ends in a draw because there are no further moves to take.

""XXO""
""oh""
""XOX""

Example 4:
Input: Move = [[0,0],[1,1]]
Output: ""pending""
Explanation: The game is not over yet.

""X""
""oh""
""""

constraint:
`1 <= moves.length <= 9`
`move[i].length == 2`
`0 <= move[i][j] <= 2`
There are no duplicate elements on `moves`.

`moves` follow the rules of tic-tac-toe.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""tomatoSlices"" and ""cheeseSlices"". The toppings for the different burgers are as follows:
Jumbo Burger: 4 tomato slices and 1 cheese slice.

Small Burger: 2 tomato slices and 1 cheese slice.

Return `[total_jumbo, total_small]`, so that the number of remaining `tomatoSlices` is equal to 0, and the number of remaining `cheeseSlices` is equal to 0. Returns `[]` if unable to make remaining `tomatoSlices` and `cheeseSlices` equal to 0.


Example 1:
Input: tomatoSlices = 16, cheeseSlices = 7
Output: [1,6]
Explanation: To make a large burger and 6 small burgers, we need 4*1 + 2*6 = 16 tomatoes and 1 + 6 = 7 cheeses. There will be no leftover ingredients.


Example 2:
Input: tomatoSlices = 17, cheeseSlices = 4
output: []
Explanation: There is no way to use all the ingredients to make a small burger and a large burger.


Example 3:
Input: tomatoSlices = 4, cheeseSlices = 17
output: []
Explanation: Making 1 large burger will leave 16 cheese blocks, making 2 small burgers will leave 15 cheese blocks.


Example 4:
Input: tomatoSlices = 0, cheeseSlices = 0
Output: [0,0]

Example 5:
Input: tomatoSlices = 2, cheeseSlices = 1
output: [0,1]

constraint:
`0 <= tomatoSlices <= 10^7`
`0 <= cheese slices <= 10^7`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m * n"" matrix of 1s and 0s, return how many square submatrices are all 1s.


Example 1:
Input: matrix =
[
  [0,1,1,1],
  [1,1,1,1],
  [0,1,1,1]
]
Output: 15
explain:
Side 1 has 10 squares.

Side 2 has 4 squares.

Side 3 has 1 square.

Total number of squares = 10 + 4 + 1 = 15.


Example 2:
Input: matrix =
[
  [1,0,1],
  [1,1,0],
  [1,1,0]
]
Output: 7
explain:
Side 1 has 6 squares.
Side 2 has 1 square.
Total number of squares = 6 + 1 = 7.


constraint:
`1 <= arr.length <= 300`
`1 <= arr[0].length <= 300`
`0 <= arr[i][j] <= 1`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" containing lowercase letters and an integer ""k"". you need to :
First, change some characters of s to other lowercase English letters.

Then split s into k non-empty disjoint substrings such that each substring is a palindrome.

Returns the minimum number of characters to change to split a string.


Example 1:
Input: s = ""abc"", k = 2
Output: 1
Explanation: The string can be split into ""ab"" and ""c"", and one character in ""ab"" can be changed into a palindrome.


Example 2:
Input: s = ""aabbc"", k = 3
output: 0
Explanation: The string can be split into ""aa"", ""bb"" and ""c"", which are all palindromes.


Example 3:
Input: s = ""leetcode"", k = 8
output: 0

constraint:
`1 <= k <= s.length <= 100`.

`s` contains only lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return the difference between the product of its digits and the sum of its digits.


Example 1:
Input: n = 234
Output: 15
explain:
Digit product = 2 * 3 * 4 = 24
Sum of digits = 2 + 3 + 4 = 9
Result = 24 - 9 = 15

Example 2:
Input: n = 4421
Output: 21
explain:
Digit product = 4 * 4 * 2 * 1 = 32
Sum of numbers = 4 + 4 + 2 + 1 = 11
Result = 32 - 11 = 21

constraint:
`1 <= n <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` individuals divided into some unknown number of groups. Each person is labeled with a unique ID from ""0"" to ""n - 1"".

Given an integer array `groupSizes`, where `groupSizes[i]` is the size of the group that person `i` is in. For example, if `groupSizes[1] = 3`, person `1` must belong to a group of size ""3"".

Returns a list of groups such that each person ""i"" is in a group of size ""groupSizes[i]"".

Everyone should appear in a group, and everyone must be in a group. If there are multiple answers, return any of them. Guaranteed to have at least one valid solution for a given input.


Example 1:
Input: groupSizes = [3,3,3,3,3,1,3]
Output: [[5],[0,1,2],[3,4,6]]
explain:
The first group is [5]. Size is 1, groupSizes[5] = 1.

The second group is [0,1,2]. With a size of 3, groupSizes[0] = groupSizes[1] = groupSizes[2] = 3.

The third group is [3,4,6]. With a size of 3, groupSizes[3] = groupSizes[4] = groupSizes[6] = 3.

Other possible solutions are [[2,1,6],[5],[0,4,3]] and [[5],[0,6,2],[4,3,1]].


Example 2:
Input: groupSizes = [2,1,3,3,3,2]
Output: [[1],[0,5],[2,3,4]]

constraint:
`groupSizes. length == n`
`1 <= n <= 500`
`1 <= groupSizes[i] <= n`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"" and an integer ""threshold"", we will choose a positive integer ""divisor"", divide all arrays by it, and sum the results of the division. Find the smallest ""divisor"" such that the above result is less than or equal to the ""threshold"".

Each result of division is rounded to the nearest integer greater than or equal to that element. (Example: ""7/3 = 3"" and ""10/2 = 5"").

Guaranteed to have an answer.


Example 1:
Input: nums = [1,2,5,9], threshold = 6
Output: 5
Explanation: If the divisor is 1, we get the sum of 17 (1+2+5+9).
If the divisor is 4, the sum will be 7 (1+1+2+3), and if the divisor is 5, the sum will be 5 (1+1+1+2).

Example 2:
Input: nums = [44,22,33,11,1], threshold = 5
Output: 44

Example 3:
Input: nums = [21212,10101,12121], threshold = 1000000
Output: 1

Example 4:
Input: nums = [2,3,5,7,11], threshold = 11
Output: 3

constraint:
`1 <= nums.length <= 5 * 104`
`1 <= nums[i] <= 106`
`nums.length <= threshold <= 106`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" binary matrix ""mat"". In one step, you can select a cell and flip it and all four of its neighbors if they exist (flip changes 1 to 0 and 0 to 1). If a pair of cells share an edge, they are called neighbors.

Return the minimum number of steps required to convert mat to a matrix of zeros, or -1 if not possible.

A binary matrix is ​​one in which all cells are equal to either 0 or 1 only.

A zero matrix is ​​a matrix in which all cells are equal to 0.


Example 1:
Input: mat = [[0,0],[0,1]]
Output: 3
Explanation: One possible solution is to flip (1, 0), then flip (0, 1), and finally flip (1, 1) as shown.


Example 2:
Input: mat = [[0]]
output: 0
Explanation: The given matrix is ​​a zero matrix. We don't need to change it.


Example 3:
Input: mat = [[1,1,1],[1,0,1],[0,0,0]]
Output: 6

Example 4:
Input: mat = [[1,0,0],[1,0,0]]
Output: -1
Explanation: The given matrix cannot be a zero matrix

constraint:
`m == mat.length`
`n == mat[0].length`
`1 <= m <= 3`
`1 <= n <= 3`
`mat[i][j]` is either 0 or 1.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design the ""CombinationIterator"" class:
`CombinationIterator(string characters, int combinationLength)` initializes an object with a string `characters` consisting of sorted different lowercase English letters and a number `combinationLength` as parameters.

`next()` returns the next combination of length `combinationLength` in lexicographical order.

`hasNext()` returns true if and only if there is a next combination.


Example 1:
enter
[""CombinationIterator"", ""next"", ""hasNext"", ""next"", ""hasNext"", ""next"", ""hasNext""]
[[""abc"", 2], [], [], [], [], [], []]
output
[empty, ""ab"", true, ""ac"", true, ""bc"", false]
explain
CombinationIterator itr = new CombinationIterator(""abc"", 2);
itr.next(); // return ""ab""
itr.hasNext(); // return true
itr.next(); // returns ""ac""
itr.hasNext(); // return true
itr.next(); // return ""BC""
itr.hasNext(); // returns false

constraint:
`1 <= combinationLength <= characters.length <= 15`
All characters in `characters` are unique.

At most, `104` calls to `next` and `hasNext` will be made.

All calls to the function ""next"" are guaranteed to be valid.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers sorted in non-descending order, there is more than a 25% chance that exactly one integer appears in the array.

Return that integer.


Example 1:
Input: arr = [1,2,2,6,6,6,6,7,10]
Output: 6

constraint:
`1 <= arr.length <= 10^4`
`0 <= arr[i] <= 10^5`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of 'intervals', remove all intervals covered by another interval in the list.

The interval `[a,b)` is covered by the interval `[c,d)` if and only if `c <= a` and `b <= d`.

After doing so, return the number of remaining intervals.


Example 1:
Input: Interval = [[1,4],[3,6],[2,8]]
Output: 2
Explanation: The interval [3,6] is covered by [2,8], so it is removed.


Example 2:
Input: Interval = [[1,4],[2,3]]
Output: 1

Example 3:
Input: Interval = [[0,10],[5,12]]
Output: 2

Example 4:
Input: Interval = [[3,10],[4,10],[5,11]]
Output: 2

Example 5:
Input: Interval = [[1,2],[1,4],[3,4]]
Output: 1

constraint:
`1 <= intervals. length <= 1000`
`interval[i].length == 2`
`0 <= interval[i][0] < interval[i][1] <= 10^5`
All intervals are unique.",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0
"Given a square grid of integers ""arr"", the descending path with a non-zero displacement is to select exactly one element from each row of ""arr"" such that no two elements selected in adjacent rows are in the same column middle.

Returns the minimum sum of descending paths with nonzero displacement.


Example 1:
Input: arr = [[1,2,3],[4,5,6],[7,8,9]]
Output: 13
explain:
Possible descent paths are:
[1,5,9], [1,5,7], [1,6,7], [1,6,8],
[2,4,8], [2,4,9], [2,6,7], [2,6,8],
[3,4,8], [3,4,9], [3,5,7], [3,5,9]
and the smallest descending path is [1,5,7], so the answer is 13.


constraint:
`1 <= arr.length == arr[i].length <= 200`
`-99 <= arr[i][j] <= 99`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `head`, which is the reference node of a singly linked list. The value of each node in the linked list is either 0 or 1. A linked list holds a binary representation of a number.

Returns the decimal value of the number in the linked list.


Example 1:
Input: head = [1,0,1]
Output: 5
Explanation: (101) base 2 = (5) base 10

Example 2:
input: head = [0]
output: 0

Example 3:
Input: head = [1]
Output: 1

Example 4:
Input: head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]
Output: 18880

Example 5:
Input: head = [0,0]
output: 0

constraint:
The linked list is not empty.

The number of nodes will not exceed ""30"".

The value of each node is either ""0"" or ""1"".",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Integers have sequential digits if and only if each digit in the number is one more than the previous digit.

Returns a sorted list of all integers in the range ""[low, high]"" (inclusive) with consecutive digits.


Example 1:
Input: Low = 100, High = 300
Output: [123,234]

Example 2:
Input: Low = 1000, High = 13000
Output: [1234, 2345, 3456, 4567, 5678, 6789, 12345]

constraint:
`10 <= low <= high <= 10^9`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" matrix ""mat"" and an integer ""threshold"". Returns the maximum side length of a square whose sum is less than or equal to ""threshold"", or 0 if no such square exists.


Example 1:
Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3, 2]], threshold = 4
Output: 2
Explanation: A square whose sum is less than 4 has a maximum side length of 2, as shown.


Example 2:
Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2, 2],[2,2,2,2,2]], threshold = 1
output: 0

Example 3:
Input: mat = [[1,1,1,1],[1,0,0,0],[1,0,0,0],[1,0,0,0]], threshold = 6
Output: 3

Example 4:
Input: mat = [[18,70],[61,1],[25,85],[14,40],[11,96],[97,96],[63,45]], threshold = 40184
Output: 2

constraint:
`1 <= meters, n <= 300`
`m == mat.length`
`n == mat[i].length`
`0 <= pad[i][j] <= 10000`
`0 <= threshold <= 10^5`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m*n"" grid where each cell is either ""0"" (empty) or ""1"" (obstacle). With just one step, you can move up, down, left, and right between empty cells.

Returns the minimum number of steps from the upper left corner `(0, 0)` to the lower right corner `(m-1, n-1)`, since you can remove at most `k` obstacles. Returns -1 if no such walk is found.


Example 1:
enter:
grid =
[[0,0,0],
 [1,1,0],
 [0,0,0],
 [0,1,1],
 [0,0,0]],
k = 1
Output: 6
explain:
The shortest path that removes no obstacles is 10.
The shortest path to remove an obstacle at position (3,2) is 6. Such a path is `(0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4, 2)`.


Example 2:
enter:
grid =
[[0,1,1],
 [1,1,1],
 [1,0,0]],
k = 1
Output: -1
explain:
We need to remove at least two obstacles to find such a path.


constraint:
`grid.length == m`
`grid[0].length == n`
`1 <= meters, n <= 40`
`1 <= k <= m*n`
`grid[i][j] == 0 or 1`
`grid[0][0] == grid[m-1][n-1] == 0`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"", return how many of them contain an even number of digits.


Example 1:
Input: nums = [12,345,2,6,7896]
Output: 2
explain:
12 contains 2 digits (an even number of digits).
345 contains 3 digits (odd digits).
2 contains 1 digit (odd number of digits).
6 contains 1 digit (an odd number of digits).
7896 contains 4 digits (an even number of digits).
So only 12 and 7896 contain an even number of digits.


Example 2:
Input: nums = [555,901,482,1771]
Output: 1
explain:
Only 1771 contains an even number of digits.


constraint:
`1 <= nums.length <= 500`
`1 <= nums[i] <= 10^5`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of integers and a positive integer `k`, find out if it is possible to partition this array into a set of `k` consecutive numbers
Return `True` if possible. Otherwise, return ""false"".


Example 1:
Input: nums = [1,2,3,3,4,4,5,6], k = 4
output: true
Explanation: The array can be divided into [1,2,3,4] and [3,4,5,6].


Example 2:
Input: nums = [3,2,1,2,3,4,3,4,5,9,10,11], k = 3
output: true
Explanation: The array can be divided into [1,2,3] , [2,3,4] , [3,4,5] and [9,10,11] .


Example 3:
Input: nums = [3,3,2,2,1,1], k = 3
output: true

Example 4:
Input: nums = [1,2,3,4], k = 3
output: error
Explanation: Each array should be divided into subarrays of size 3.


constraint:
`1 <= k <= nums.length <= 105`
`1 <= nums[i] <= 109`
Note: This question is the same as 846: https://leetcode.com/problems/hand-of-straights/",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return the maximum number of occurrences of any substring according to the following rules:
The number of unique characters in the substring must be less than or equal to ""maxLetters"".

The substring size must be between `minSize` and `maxSize`, inclusive.


Example 1:
Input: s = ""aababcaab"", maxLetters = 2, minSize = 3, maxSize = 4
Output: 2
Explanation: The substring ""aab"" occurs 2 times in the original string.

It satisfies the condition, 2 unique letters and size 3 (between minSize and maxSize).


Example 2:
Input: s = ""aaaa"", maxLetters = 1, minSize = 3, maxSize = 3
Output: 2
Explanation: The substring ""aaa"" occurs 2 times in the string. It can overlap.


Example 3:
Input: s = ""aabcabcab"", maxLetters = 2, minSize = 2, maxSize = 3
Output: 3

Example 4:
Input: s = ""abcde"", maxLetters = 2, minSize = 3, maxSize = 3
output: 0

constraint:
`1 <= s.length <= 10^5`
`1 <= maxLetters <= 26`
`1 <= minSize <= maxSize <= min(26, s.length)`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given ""n"" boxes, each of the format ""[status, candies, keys, containedBoxes]"", where:
`status[i]`: an integer, 1 if `box[i]` is on, 0 if `box[i]` is off.

`candies[i]`: An integer representing the number of candies in `box[i]`.

`keys[i]`: An array containing the indices of the boxes you can open with the keys in `box[i]`.

`containedBoxes[i]`: An array containing the indices of the boxes found in `box[i]`.

You will start with some boxes given in the ""initialBoxes"" array. You can take all the candies in any opened box, you can use the key inside to open new boxes, and you can use boxes you find inside.

Returns the maximum number of candies that can be obtained following the above rules.


Example 1:
Input: status = [1,0,1,0], candies = [7,5,4,100], keys = [[],[],[1],[]], containedBoxes = [[1,2], [3],[],[]], initialBoxes = [0]
output: 16
Explanation: Initially will give you box 0. You'll find 7 candies inside, box 1 and box 2. Box 1 is closed and you don't have its key, so you open box 2. You'll find 4 candies and the key to box 1 of box 2.

In box 1, you'll find 5 candies and box 3, but you can't find the key to box 3, so box 3 will remain closed.

Total candies collected = 7 + 4 + 5 = 16 candies.


Example 2:
Input: status = [1,0,0,0,0,0], candies = [1,1,1,1,1,1], keys = [[1,2,3,4,5],[ ],[],[],[],[]], containedBoxes = [[1,2,3,4,5],[],[],[],[],[]], initialBoxes = [0 ]
Output: 6
Explanation: You initially have box 0. Opening it you can find boxes 1, 2, 3, 4 and 5 and their keys. The total number of candies is 6.


Example 3:
Input: status = [1,1,1], candies = [100,1,100], keys = [[], [0,2], []], containedBoxes = [[], [], []], initialBoxes = [1]
Output: 1

Example 4:
Input: status = [1], candies = [100], keys = [[]], containedBoxes = [[]], initialBoxes = []
output: 0

Example 5:
Input: status = [1,1,1], candies = [2,3,2], keys = [[],[],[]], containedBoxes = [[],[],[]], initialBoxes = [2,1,0]
Output: 7

constraint:
`1 <= status.length <= 1000`
`status.length == candies.length == keys.length == containedBoxes.length == n`
`status[i]` is either `0` or `1`.

`1 <= candies[i] <= 1000`
`0 <= keys[i].length <= status.length`
`0 <= keys[i][j] < status.length`
All values ​​in `keys[i]` are unique.

`0 <= containedBoxes[i].length <= status.length`
`0 <= containedBoxes[i][j] < status.length`
All values ​​in `containedBoxes[i]` are unique.

Each crate is packed in at most one crate.

`0 <= initialBoxes.length <= status.length`
`0 <= initialBoxes[i] < status.length`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array arr , replaces each element in the array with the largest element on its right and replaces the last element with -1 .

After doing so, return the array.


Example 1:
Input: arr = [17,18,5,4,6,1]
Output: [18,6,6,6,1,-1]
explain:
- index 0 --> the largest element to the right of index 0 is index 1 (18).

- index 1 --> the largest element to the right of index 1 is index 4 (6).

- index 2 --> the largest element to the right of index 2 is index 4 (6).

- index 3 --> the largest element to the right of index 3 is index 4 (6).

- index 4 --> the largest element to the right of index 4 is index 5 (1).

- index 5 --> there is no element to the right of index 5, so we put -1.


Example 2:
Input: arr = [400]
output: [-1]
Explanation: There is no element to the right of index 0.


constraint:
`1 <= arr.length <= 104`
`1 <= arr[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""arr"" and a target value ""target"", return the integer ""value"" such that when we change all integers greater than ""value"" in the given array to be equal to ""value"", the array is as close as possible to ( absolute difference) ""target"".

In case of a tie, the smallest such integer is returned.

Note that the answer doesn't have to be a number in arr.


Example 1:
Input: arr = [4,9,3], target = 10
Output: 3
Explanation: When converted to [3, 3, 3] using 3 arr, the sum is 9, which is the best answer.


Example 2:
Input: arr = [2,3,5], target = 10
Output: 5

Example 3:
Input: arr = [60864,25176,27249,21296,20204], target = 56803
Output: 11361

constraint:
`1 <= arr.length <= 10^4`
`1 <= arr[i], target <= 10^5`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a square character ""board"". You can move around the board starting from the square marked with the letter ""S"" in the lower right corner.

You need to get to the square marked with the character ""E"" in the upper left corner. The remaining squares are marked with numeric characters ""1, 2, ..., 9"" or with an obstacle ""X"". You can move up, left or left (diagonally) in one step only if there are no obstacles.

Returns a list containing two integers: the first integer is the maximum sum of numeric characters you can collect, the second integer is the number of such paths you can take to obtain the maximum sum, modulo ""10^9 + 7"".

If there is no path, return `[0, 0]`.


Example 1:
Input: Board = [""E23"",""2X2"",""12S""]
Output: [7,1]

Example 2:
Input: Board = [""E12"",""1X1"",""21S""]
Output: [4,2]

Example 3:
Input: Board = [""E11"", ""XXX"", ""11S""]
Output: [0,0]

constraint:
`2 <= board.length == board[i].length <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, return the sum of the values ​​of its deepest leaves.


Example 1:
Input: root = [1,2,3,4,5,null,6,7,null,null,null,null,8]
Output: 15

Example 2:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 19

constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`1 <= Node.val <= 100`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return any array containing ""n"" unique integers such that they add up to ""0"".


Example 1:
Input: n = 5
Output: [-7,-1,1,3,4]
Explanation: These arrays are also accepted [-5,-1,1,2,3] , [-3,-1,2,-2,4].


Example 2:
Input: n = 3
Output: [-1,0,1]

Example 3:
Input: n = 1
output: [0]

constraint:
`1 <= n <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two binary search trees ""root1"" and ""root2"".

Return a list containing all integers in both trees sorted in ascending order.


Example 1:
Input: root1 = [2,1,4], root2 = [1,0,3]
Output: [0,1,1,2,3,4]

Example 2:
Input: root1 = [0,-10,10], root2 = [5,1,7,0,2]
Output: [-10,0,0,1,2,5,7,10]

Example 3:
Input: root1 = [], root2 = [5,1,7,0,2]
Output: [0,1,2,5,7]

Example 4:
Input: root1 = [0,-10,10], root2 = []
Output: [-10,0,10]

Example 5:
Input: root1 = [1,null,8], root2 = [8,1]
Output: [1,1,8,8]

constraint:
Each tree has a maximum of 5000 nodes.

The value of each node is between ""[-10^5, 10^5]"".",0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of non-negative integers, you are initially at the ""start"" index of the array. When you are at index `i`, you can jump to `i + arr[i]` or `i - arr[i]`, check if you can reach any index with value 0.

Note that you cannot jump out of the array at any time.


Example 1:
Input: arr = [4,2,3,0,3,1,2], start = 5
output: true
explain:
All possible ways to get to index 3 with value 0 are:
Index 5 -> Index 4 -> Index 1 -> Index 3
Index 5 -> Index 6 -> Index 4 -> Index 1 -> Index 3

Example 2:
Input: arr = [4,2,3,0,3,1,2], start = 0
output: true
explain:
One possible way to get to index 3 with a value of 0 is:
Index 0 -> Index 4 -> Index 1 -> Index 3

Example 3:
Input: arr = [3,0,2,1,2], start = 2
output: error
Explanation: Index 1 with value 0 cannot be reached.


constraint:
`1 <= arr.length <= 5 * 104`
`0 <= arr[i] < arr.length`
`0 <= start < arr.length`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an equation, represented by ""words"" on the left and ""results"" on the right.

You need to check if the equation is solvable according to the following rules:
Each character is decoded as a number (0 - 9).

They have to map each different pair of characters to a different number.

Each words[i] and result is decoded as a number without leading zeros.

The sum of the numbers on the left (`words`) will be equal to the number on the right (`result`).
Returns True if the equation is solvable, False otherwise.


Example 1:
Input: words = [""SEND"",""MORE""], result = ""MONEY""
output: true
Explanation: mapping 'S'->9, 'E'->5, 'N'->6, 'D'->7, 'M'->1, 'O'->0, 'R'->8 , 'Y'->'2'
This way: ""SEND"" + ""MORE"" = ""MONEY"" , 9567 + 1085 = 10652

Example 2:
Input: words = [""SIX"",""SEVEN"",""SEVEN""], result = ""TWENTY""
output: true
Explanation: Mapping 'S'->6, 'I'->5, 'X'->0, 'E'->8, 'V'->7, 'N'->2, 'T'->1 , 'W'->'3', 'Y'->4
This way: ""six"" + ""seven"" + ""seven"" = ""twenty"", 650 + 68782 + 68782 = 138214

Example 3:
Input: words = [""THIS"",""IS"",""TOO""], result = ""FUNNY""
output: true

Example 4:
Input: words = [""LEET"",""CODE""], result = ""POINT""
output: error

constraint:
`2 <= words.length <= 5`
`1 <= words[i].length, result.length <= 7`
`words[i], result` contains only uppercase English letters.

The maximum number of distinct characters used in an expression is 10.",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" consisting of numbers (""0""-""9"") and ""#"". We want to map s to English lowercase characters like this:
Characters (`'a'` to `'i') are represented by (''1'` to ''9'`), respectively.

Characters (`'j'` to `'z') are represented by (''10#'` to `'26#'`), respectively.
Returns the string formed after mapping.

Guaranteed that a unique mapping will always exist.


Example 1:
Input: s = ""10#11#12""
Output: ""jkab""
Explanation: ""j"" -> ""10#"", ""k"" -> ""11#"", ""a"" -> ""1"", ""b"" -> ""2"".


Example 2:
Input: s = ""1326#""
Output: ""acz""

Example 3:
Input: s = ""25#""
Output: ""y""

Example 4:
Input: s = ""12345678910#11#12#13#14#15#16#17#18#19#20#21#22#23#24#25#26#""
Output: ""abcdefghijklmnopqrstuvwxyz""

constraint:
`1 <= s.length <= 1000`
`s[i]` contains only alphanumeric (`'0'`-`'9'`) and `'#'` letters.

`s` will be a valid string so that mapping is always possible.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of positive integers and an array ""queries"" where ""queries[i] = [Li, Ri]"", for each query ""i"" compute the XOR of the elements from ""Li"" to ""Ri"" ( That is, `arr[Li] xor arr[Li+1] xor ... xor arr[Ri]`). Returns an array containing the results of the given ""query"".


Example 1:
Input: arr = [1,3,4,8], query = [[0,1],[1,2],[0,3],[3,3]]
Output: [2,7,14,8]
explain:
The binary representation of an element in an array is:
1 = 0001
3 = 0011
4 = 0100
8 = 1000
The XOR values ​​for the query are:
[0,1] = 1 xor 3 = 2
[1,2] = 3 xor 4 = 7
[0,3] = 1 xor 3 xor 4 xor 8 = 14
[3,3] = 8

Example 2:
Input: arr = [4,8,2,10], query = [[2,3],[1,3],[0,0],[0,3]]
Output: [8,0,4,4]

constraint:
`1 <= arr.length <= 3 * 10^4`
`1 <= arr[i] <= 10^9`
`1 <= queries.length <= 3 * 10^4`
`query[i].length == 2`
`0 <= queries[i][0] <= queries[i][1] < arr.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` individuals, each with a unique id between `0` and `n-1`. Given the arrays ""watchedVideos"" and ""friends"", where ""watchedVideos[i]"" and ""friends[i]"" contain respectively the list of watched videos and the list of friends of the person with ""id = i"".

Level 1 videos are videos watched by your friends, Level 2 videos are videos watched by friends of your friends, etc. Generally speaking, the kth-level videos are videos watched by people whose shortest path is exactly equal to k. Given your ""id"" and a video's ""level"", return a list of videos sorted by frequency (increasing). For videos with the same frequency, sort them alphabetically from smallest to largest.

Example 1:
Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0, 3], [0,3], [1,2]], id=0, level=1
Output: [""B"",""C""]
explain:
You have id = 0 (green in the picture), your friends are (yellow in the picture):
person with id = 1 -> watchedVideos = [""C""]
person with id = 2 -> watchedVideos = [""B"",""C""]
How often your friends watch videos:
B -> 1
C -> 2

Example 2:
Input: watchedVideos = [[""A"",""B""],[""C""],[""B"",""C""],[""D""]], friends = [[1,2],[0, 3], [0,3], [1,2]], id=0, level=2
Output: [""D""]
explain:
You have id = 0 (green in the picture) and the only friend of your friend is someone with id = 3 (yellow in the picture).


constraint:
`n == watchedVideos.length == friends.length`
`2 <= n <= 100`
`1 <= watchedVideos[i].length <= 100`
`1 <= watchedVideos[i][j].length <= 8`
`0 <= friends[i].length < n`
`0 <= friends[i][j] < n`
`0 <= id < n`
`1 <= level < n`
If `friends[i]` contains `j`, then `friends[j]` contains `i`",0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s. In just one step, you can insert any character at any index of the string.

Returns the minimum number of steps to generate a palindrome of s.

A palindrome is a string that reads the same backwards and forwards.


Example 1:
Input: s = ""zzazz""
output: 0
Explanation: The string ""zzazz"" is already a palindrome and we don't need any interpolation.


Example 2:
Input: s = ""mbadm""
Output: 2
Explanation: The string can be ""mbdadbm"" or ""mdbabdm"".


Example 3:
Input: s = ""leetcode""
Output: 5
Explanation: The string becomes ""leetcodocteel"" after inserting 5 characters.


Example 4:
Input: s = ""g""
output: 0

Example 5:
Input: s = ""no""
Output: 1

constraint:
`1 <= s.length <= 500`
All characters of `s` are lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We get a list ""nums"" of integers representing the list compressed with run-length encoding.

Consider each pair of adjacent elements ""[freq, val] = [nums[2*i], nums[2*i+1]]"" (where ""i >= 0""). For each such pair, there is a ""freq"" element with concatenated value ""val"" in the sublist. Concatenate all sublists from left to right to produce the unpacked list.

Returns the decompressed list.


Example 1:
Input: nums = [1,2,3,4]
Output: [2,4,4,4]
Explanation: The first pair [1,2] means we have freq = 1 and val = 2 so we generate array [2].

The second pair [3,4] means we have freq = 3 and val = 4 so we generate [4,4,4].

Finally, the concatenation [2] + [4,4,4] is [2,4,4,4].


Example 2:
Input: nums = [1,1,2,3]
Output: [1,3,3]

constraint:
`2 <= nums.length <= 100`
`nums.length % 2 == 0`
`1 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" matrix ""mat"" and an integer ""k"", return a matrix ""answer"" where each ""answer[i][j]"" is the sum of all elements ""mat[r][c]"" :
`i - k <= r <= i + k,`
`j - k <= c <= j + k`, and
`(r, c)` is a valid position in the matrix.


Example 1:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]

Example 2:
Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]

constraint:
`m == mat.length`
`n == mat[i].length`
`1 <= m, n, k <= 100`
`1 <= pad[i][j] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree, return the sum of node values ​​that have even-valued grandparents. (A node's grandparent is the parent of its parent, if one exists.)
Returns ""0"" if there are no nodes with an even number of grandparents.


Example 1:
Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: A red node is a node with an even number of grandparents, while a blue node is an even number of grandparents.


constraint:
The number of nodes in the tree is between ""1"" and ""10^4"".

Nodes have values ​​between ""1"" and ""100"".",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Returns the number of distinct non-empty substrings of `text` that can be written as the concatenation of some string with itself (i.e. it can be written as `a + a`, where `a` is some string).


Example 1:
Input: text = ""abcabcabc""
Output: 3
Explanation: The 3 substrings are ""abcabc"", ""bcabca"" and ""cabcab"".


Example 2:
Input: text = ""leetcodeleetcode""
Output: 2
Explanation: The 2 substrings are ""ee"" and ""leetcodeleetcode"".


constraint:
`1 <= text.length <= 2000`
`text` has only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"Given an integer ""n"". A nonzero integer is a positive integer whose decimal representation does not contain any zeros.

Returns a list `[A, B]` of two integers where:
`A` and `B` are non-zero integers.

`A + B = n`
Guaranteed to have at least one valid solution. If there are many valid solutions, you can return any of them.


Example 1:
Input: n = 2
output: [1,1]
Explanation: A = 1, B = 1. A + B = n and neither A nor B contain any zeros in their decimal representation.


Example 2:
Input: n = 11
Output: [2,9]

Example 3:
Input: n = 10000
Output: [1,9999]

Example 4:
Input: n = 69
Output: [1,68]

Example 5:
Input: n = 1010
Output: [11,999]

constraint:
`2 <= n <= 10^4`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given 3 positive numbers ""a"", ""b"" and ""c"". Return the minimum flips required for some bits of `a` and `b` ( `a` OR `b` == `c` ). (Bitwise OR operation).

A flip operation involves changing any single bit from 1 to 0 or bit 0 to 1 in its binary representation.


Example 1:
Input: a = 2, b = 6, c = 5
Output: 3
Explanation: After flipping a = 1 , b = 4 , c = 5 such that (`a` OR `b` == `c`)

Example 2:
Input: a = 4, b = 2, c = 7
Output: 1

Example 3:
Input: a = 1, b = 2, c = 3
output: 0

constraint:
`1 <= a <= 10^9`
`1 <= b <= 10^9`
`1 <= c <= 10^9`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` computers numbered from `0` to `n-1` connected by Ethernet cables `connections` to form a network, where `connections[i] = [a, b]` means computers `a` and `b `. Any computer can directly or indirectly access any other computer over a network.

Given an initial computer network ""connection"". You can take some cables between two directly connected computers and place them between any pair of disconnected computers so that they are directly connected. Returns the minimum number of times you need to do this to get all machines connected. Returns -1 if not possible.

Example 1:
Input: n = 4, number of connections = [[0,1],[0,2],[1,2]]
Output: 1
Explanation: Remove the cable between computers 1 and 2 and place it between computers 1 and 3.


Example 2:
Input: n = 6, number of connections = [[0,1],[0,2],[0,3],[1,2],[1,3]]
Output: 2

Example 3:
Input: n = 6, number of connections = [[0,1],[0,2],[0,3],[1,2]]
Output: -1
Explanation: Not enough cables.


Example 4:
Input: n = 5, number of connections = [[0,1],[0,2],[3,4],[2,3]]
output: 0

constraint:
`1 <= n <= 10^5`
`1 <= connections.length <= min(n*(n-1)/2, 10^5)`
`connection[i].length == 2`
`0 <= connections[i][0], connections[i][1] < n`
`connection[i][0] != connection[i][1]`
There are no duplicate connections.

No two computers are connected by more than one cable.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a keyboard layout on the XY plane as shown above, where each uppercase English letter is located at a certain coordinate, for example, the letter A is located at coordinates (0,0), the letter B is located at coordinates (0,1), and the letter P is located at At coordinates (2,3), the letter Z is at coordinates (4,1).

Given the string ""word"", return the minimum total distance to type that string with just two fingers. The distance between coordinates (x1,y1) and (x2,y2) is |x1 - x2| + |y1 - y2|.
Note that the initial position of your two fingers is considered free, so it doesn't count towards your total distance, and your two fingers don't have to start from the first letter or the first two letters.


Example 1:
Input: word = ""cake""
Output: 3
explain:
Using two fingers, one of the best ways to type ""CAKE"" is:
Finger 1 on letter ""C"" -> cost = 0
Finger 1 on letter ""A"" -> cost = distance from letter ""C"" to letter ""A"" = 2
Finger 2 on letter ""K"" -> cost = 0
Finger 2 on letter ""E"" -> cost = distance from letter ""K"" to letter ""E"" = 1
total distance = 3

Example 2:
Input: word = ""HAPPY""
Output: 6
explain:
Using two fingers, one of the best ways to type ""HAPPY"" is:
Finger 1 on letter ""H"" -> cost = 0
Finger 1 on letter ""A"" -> cost = distance from letter ""H"" to letter ""A"" = 2
Finger 2 on letter ""P"" -> cost = 0
Finger 2 on letter ""P"" -> cost = distance from letter ""P"" to letter ""P"" = 0
Finger 1 on letter ""Y"" -> cost = distance from letter ""A"" to letter ""Y"" = 4
Total distance = 6

Example 3:
Input: word = ""NEW""
Output: 3

Example 4:
Input: word = ""YEAR""
Output: 7

constraint:
`2 <= word.length <= 300`
Each word[i]` is an English capital letter.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer num consisting only of digits 6 and 9.

Returns the largest number that can be obtained by changing at most one digit (6 becomes 9, 9 becomes 6).


Example 1:
Input: num = 9669
Output: 9969
explain:
Changing the first number gives 6669.

Change the second digit to 9969.

Changing the third digit results in 9699.

Changing the fourth digit results in 9666.
The maximum number is 9969.


Example 2:
Input: num = 9996
Output: 9999
Explanation: Changing the last digit 6 to 9 results in the largest number.


Example 3:
Input: num = 9999
Output: 9999
Note: It is best not to apply any changes.


constraint:
`1 <= num <= 10^4`
The number of `num` is 6 or 9.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s. Return all words vertically in the same order they appear in s.

Words are returned as a list of strings, terminated with whitespace if necessary. (No trailing spaces allowed).

Each word will only be placed in one column, and there will only be one word in a column.


Example 1:
Input: s = ""how are you""
Output: [""HAY"",""ORO"",""WEU""]
Explanation: Each word is printed vertically.
 ""hay""
 ""Oro""
 ""Western Europe""

Example 2:
Input: s = ""to be or not to be""
Output: [""TBONTB"", ""OEROOE"", ""T""]
Note: Trailing spaces are not allowed.
""TBONTB""
""Orue""
""T""

Example 3:
Input: s = ""The game is about to start""
Output: [""CIC"",""OSO"",""N M"",""T I"",""E N"",""S G"",""T""]

constraint:
`1 <= s.length <= 200`
`s` contains only uppercase English letters.

Make sure there is only 1 space between 2 words.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree ""root"" and an integer ""target"", delete all leaf nodes with value ""target"".

Note that once a leaf node with value ""target"" is deleted, if its parent node becomes a leaf node and has value ""target"", it should also be deleted (you need to keep doing this until it cannot be deleted).


Example 1:
Input: root = [1,2,3,2,null,2,4], target = 2
Output: [1,null,3,null,4]
Explanation: The green leaf node with value (target = 2) has been deleted (left image).
After removal, the new node becomes a leaf node with value (target = 2) (middle image).


Example 2:
Input: root = [1,3,3,3,2], target = 3
Output: [1,3,null,null,2]

Example 3:
Input: root = [1,2,null,2,null,2], target = 2
output: [1]
Explanation: Green leaf nodes with value (target = 2) are removed at each step.


Example 4:
Input: root = [1,1,1], target = 1
output: []

Example 5:
Input: root = [1,2,3], target = 1
Output: [1,2,3]

constraint:
`1 <= target <= 1000`
A given binary tree will have ""1"" to ""3000"" nodes.

The value of each node is between ""[1, 1000]"".",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a 1D garden on the x-axis. The garden starts at point ""0"" and ends at point ""n"". (i.e. the length of the garden is `n`).

There are `n + 1` taps at points `[0, 1, ..., n]` in the garden.

Given an integer `n` and an integer array `ranges` of length `n + 1`, where `ranges[i]` (starting from 0) indicates that the i-th tap can water the area `[i - ranges[ i], i + ranges[i]]` if it is open.

Returns the minimum number of taps that should be turned on to water the entire garden, or -1 if the garden cannot be watered.


Example 1:
Input: n = 5, range = [3,4,1,1,0,0]
Output: 1
Explanation: Taps at point 0 can cover the interval [-3,3]
A tap at point 1 can cover the interval [-3,5]
Taps at point 2 can cover the interval [1,3]
Taps at point 3 cover the interval [2,4]
A tap at point 4 covers the interval [4,4]
A tap at point 5 covers the interval [5,5]
Turn on only the second tap to water the entire garden [0,5]

Example 2:
Input: n = 3, range = [0,0,0,0]
Output: -1
Explanation: Even if you turn on all four taps, you won't be able to water your entire garden.


Example 3:
Input: n = 7, range = [1,2,1,0,2,1,0,1]
Output: 3

Example 4:
Input: n = 8, range = [4,0,0,0,0,0,0,0,4]
Output: 2

Example 5:
Input: n = 8, range = [4,0,0,0,4,0,0,0,4]
Output: 1

constraint:
`1 <= n <= 10^4`
`ranges.length == n+1`
`0 <= range[i] <= 100`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a palindrome string composed of lowercase English letters `palindrome`, replace a character with any lowercase English letter, so that the resulting string is not a palindrome string, and it is the smallest possible character in lexicographical order string.

Return the result string. Returns an empty string if there is no way to replace a character so that it is not a palindrome.

A string a is lexicographically smaller than a string b (of the same length) if at the first position where a and b differ, a character of a is strictly smaller than the corresponding character in b`. For example, `""abcc""` is lexicographically smaller than `""abcd""` because the first position where they differ is the fourth character, and `'c'` is smaller than `'d'`.


Example 1:
Input: palindrome = ""abccba""
Output: ""aaccba""
Explanation: There are many ways to make ""abccba"" not a palindrome, such as ""zbccba"", ""aaccba"", and ""abacba"".

Of all the methods, ""aaccba"" is the least lexicographically ordered.


Example 2:
Input: palindrome = ""a""
Output: """"
Explanation: There is no way to replace a single character so that ""a"" is not a palindrome, so an empty string is returned.


Example 3:
Input: palindrome = ""aa""
Output: ""ab""

Example 4:
Input: palindrome = ""aba""
Output: ""abb""

constraint:
`1 <= palindrome length <= 1000`
`palindrome` consists of lowercase English letters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The matrix diagonal is the diagonal of cells, starting from a cell in the topmost row or leftmost column, and proceeding in the direction of the lower right corner until reaching the end of the matrix. For example, the matrix diagonal starting at 'mat[2][0]', where 'mat' is a '6 x 3' matrix consisting of cells 'mat[2][0]', 'mat[3] [1” ]` and `mat[4][2]`.

Given an ""m x n"" matrix ""mat"" of integers, sort each matrix diagonal in ascending order and return the resulting matrix.


Example 1:
Input: mat = [[3,3,1,1],[2,2,1,2],[1,1,1,2]]
Output: [[1,1,1,1],[1,2,2,2],[1,2,3,3]]

Example 2:
Input: mat = [[11,25,66,1,69,7],[23,55,17,45,15,52],[75,31,36,44,58,8],[22, 27,33,25,68,4],[84,28,14,11,5,50]]
Output: [[5,17,4,1,52,7],[11,11,25,45,8,69],[14,23,25,44,58,15],[22,27, 31,36,50,66],[84,28,75,33,55,68]]

constraint:
`m == mat.length`
`n == mat[i].length`
`1 <= meters, n <= 100`
`1 <= pad[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. The value of this array is defined as the sum of all |nums[i]-nums[i+1]| where 0 <= i < nums.length-1.

You can select any subarray of a given array and invert it. You can only do this once.

Find the largest possible value of the final array.


Example 1:
Input: nums = [2,3,1,5,4]
Output: 10
Explanation: By inverting the subarray [3,1,5], the array becomes [2,5,1,3,4] with value 10.


Example 2:
Input: nums = [2,4,9,24,2,1,10]
Output: 68

constraint:
`1 <= nums.length <= 3*10^4`
`-10^5 <= nums[i] <= 10^5`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr , replace each element with its rank.

The rank indicates the size of the element. Levels have the following rules:
Rank is an integer starting from 1.

The larger the element, the larger the rank. If two elements are equal, they must have the same rank.

rank should be as small as possible.


Example 1:
Input: arr = [40,10,20,30]
Output: [4,1,2,3]
Explanation: 40 is the largest element. 10 is the minimum. 20 is the next smallest. 30 is the third smallest.


Example 2:
Input: arr = [100,100,100]
Output: [1,1,1]
Explanation: The same elements share the same rank.


Example 3:
Input: arr = [37,12,28,9,100,56,80,5,12]
Output: [5,3,4,2,8,6,7,1,3]

constraint:
`0 <= arr.length <= 105`
`-109 <= arr[i] <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" consisting only of the letters ""a"" and ""b"". In just one step, you can remove a palindromic subsequence from s .

Returns the minimum number of steps to make the given string empty.

A string is a subsequence of the given string if it was generated by removing certain characters of the given string without changing their order. Note that the subsequences don't necessarily need to be contiguous.

A string is called a palindrome if it reads the same backwards and forwards.


Example 1:
Input: s = ""ababa""
Output: 1
Explanation: s is already a palindrome, so its whole can be deleted in one step.


Example 2:
Input: s = ""abb""
Output: 2
Explanation: ""abb"" -> ""bb"" -> """".
Delete the palindromic subsequence ""a"" then ""bb"".


Example 3:
Input: s = ""baabb""
Output: 2
Explanation: ""baabb"" -> ""b"" -> """".
Delete the palindromic subsequence ""baab"" then ""b"".


constraint:
`1 <= s.length <= 1000`
`s[i]` is either `'a'` or `'b'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""restaurants"" where ""restaurants[i] = [idi, ratingi, veganFriendlyi, pricei, distancei]"". You have to use three filters to filter restaurants.

The `veganFriendly` filter will be true (meaning you should only include restaurants that have `veganFriendlyi` set to true) or false (meaning you can include any restaurant). Also, you have filters ""maxPrice"" and ""maxDistance"", which are the maximum value of restaurant price and distance you should consider respectively.

Returns a filtered array of restaurant IDs sorted by rating from highest to lowest. For restaurants with the same rating, sort by id from high to low. For simplicity, `veganFriendlyi` and `veganFriendly` take the value 1 when true and 0 when false.


Example 1:
Input: Restaurant = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10, 3],[5,1,1,15,1]], veganFriendly = 1, maxPrice = 50, maxDistance = 10
Output: [3,1,5]
explain:
The restaurants are:
Restaurant 1 [id=1, rating=4, veganFriendly=1, price=40, distance=10]
Restaurant 2 [id=2, rating=8, veganFriendly=0, price=50, distance=5]
Restaurant 3 [id=3, rating=8, veganFriendly=1, price=30, distance=4]
Restaurant 4 [id=4, rating=10, veganFriendly=0, price=10, distance=3]
Restaurant 5 [id=5, rating=1, veganFriendly=1, price=15, distance=1]
After filtering restaurants with veganFriendly = 1, maxPrice = 50, and maxDistance = 10, we have restaurant 3, restaurant 1, and restaurant 5 (sorted by rating from highest to lowest).

Example 2:
Input: Restaurant = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10, 3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 50, maxDistance = 10
Output: [4,3,2,1,5]
Explanation: The restaurants are the same as in example 1, but in this case the filter veganFriendly = 0, so all restaurants are considered.


Example 3:
Input: Restaurant = [[1,4,1,40,10],[2,8,0,50,5],[3,8,1,30,4],[4,10,0,10, 3],[5,1,1,15,1]], veganFriendly = 0, maxPrice = 30, maxDistance = 3
Output: [4,5]

constraint:
`1 <= restaurants. length <= 10^4`
`restaurant[i].length == 5`
`1 <= idi, ratingi, pricei, distancei <= 10^5`
`1 <= max price, max distance <= 10^5`
`veganFriendlyi` and `veganFriendly` are 0 or 1.

All idi's are different.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities numbered from `0` to `n-1`. An array ""edges"" is given, where ""edges[i] = [fromi, toi, weighti]"" represents two-way weighted edges between cities ""fromi"" and ""toi"", and an integer ""distanceThreshold"" is given.

Returns the city with the least number of cities reachable by a certain path and the distance does not exceed `distanceThreshold`, if there are more than one such cities, returns the city with the largest number.

Note that the distance of a path connecting cities i and j is equal to the sum of edge weights along that path.


Example 1:
Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph.
The neighboring cities with distanceThreshold = 4 for each city are:
city ​​0 -> [city 1, city 2]
city ​​1 -> [city 0, city 2, city 3]
city ​​2 -> [city 0, city 1, city 3]
city ​​3 -> [city 1, city 2]
City 0 and 3 have 2 neighboring cities at distanceThreshold = 4, but we have to return city 3 because it has the most number.


Example 2:
Input: n = 5, sides = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[ 3,4,1]], distance threshold = 2
output: 0
Explanation: The figure above describes the graph.
The neighboring cities with distanceThreshold = 2 for each city are:
city ​​0 -> [city 1]
city ​​1 -> [city 0, city 4]
city ​​2 -> [city 3, city 4]
city ​​3 -> [city 2, city 4]
City 4 -> [city 1, city 2, city 3]
City 0 has 1 neighbor city at distanceThreshold = 2.


constraint:
`2 <= n <= 100`
`1 <= edges.length <= n * (n - 1) / 2`
`edge[i].length == 3`
`0 <= fromi < toi < n`
`1 <= weighti, distanceThreshold <= 10^4`
All pairs `(fromi, toi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You want to schedule a job listing in 'd' days. Jobs are interdependent (i.e. to process the ""i-th"" job, you must complete all ""j"" jobs, where ""0 <= j < i"").

You must complete at least one task per day. The difficulty of the job schedule is the sum of the difficulties of each of the ""d"" days. A day's difficulty is the maximum difficulty of the work done that day.

Given an integer array ""jobDifficulty"" and an integer ""d"". The difficulty of the i-th job is jobDifficulty[i].

Returns the minimum difficulty for work plans. Returns -1 if no schedule for the job can be found.


Example 1:
Input: jobDifficulty = [6,5,4,3,2,1], d = 2
Output: 7
Explanation: You can complete the first 5 jobs on the first day, total difficulty = 6.

You can complete the last job the next day with total difficulty = 1.

Schedule difficulty=6+1=7

Example 2:
Input: jobDifficulty = [9,9,9], d = 4
Output: -1
Explanation: If you complete a job every day, you still have one day to spare. You cannot find a schedule for a given job.


Example 3:
Input: jobDifficulty = [1,1,1], d = 3
Output: 3
Explanation: Planning is a job every day. The total difficulty is 3.


Example 4:
Input: jobDifficulty = [7,1,7,1,7,1], d = 3
Output: 15

Example 5:
Input: jobDifficulty = [11, 111, 22, 222, 33, 333, 44, 444], d = 6
Output: 843

constraint:
`1 <= jobDifficulty.length <= 300`
`0 <= Job Difficulty[i] <= 1000`
`1 <= d <= 10`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" binary matrix ""mat"" consisting of ""1""s (representing soldiers) and ""0"" (representing civilians). Soldiers stand before civilians. That is, all ""1""s will appear to the left of all ""0""s in each row.

Row `i` is weaker than row `j` if one of the following is true:
The number of soldiers in row i is less than the number of soldiers in row j.

Both rows have the same number of soldiers and ""i < j"".

Returns the indices of the 'k' weakest rows in the matrix sorted from weakest to strongest.


Example 1:
input: pad =
[[1,1,0,0,0],
 [1,1,1,1,0],
 [1,0,0,0,0],
 [1,1,0,0,0],
 [1,1,1,1,1]],
k = 3
Output: [2,0,3]
explain:
The number of soldiers in each row is:
- Line 0: 2
- Line 1: 4
- Line 2: 1
- Line 3: 2
- Line 4: 5
The rows ranked from weakest to strongest are [2,0,3,1,4].


Example 2:
input: pad =
[[1,0,0,0],
 [1,1,1,1],
 [1,0,0,0],
 [1,0,0,0]],
k = 2
output: [0,2]
explain:
The number of soldiers in each row is:
- Line 0: 1
- Line 1: 4
- Line 2: 1
- Line 3: 1
The row from weakest to strongest is [0,2,3,1].


constraint:
`m == mat.length`
`n == mat[i].length`
`2 <= n, m <= 100`
`1 <= k <= m`
`matrix[i][j]` is 0 or 1.",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array arr . You can select a set of integers and remove all occurrences of those integers in the array.

Returns the minimum size of a collection such that at least half of the integers in the array are removed.


Example 1:
Input: arr = [3,3,3,3,5,5,5,2,2,7]
Output: 2
Explanation: Selecting {3,7} will make the new array [5,5,5,2,2] of size 5 (i.e. equal to half the size of the old array).

Possible sets of size 2 are {3,5}, {3,2}, {5,2}.

Selecting the set {2,7} is impossible because it would make the size of the new array [3,3,3,3,5,5,5] larger than half the size of the old array.


Example 2:
Input: arr = [7,7,7,7,7,7]
Output: 1
Explanation: The only possible set you can choose from is {7}. This will make the new array empty.


Example 3:
Input: arr = [1,9]
Output: 1

Example 4:
Input: arr = [1000,1000,3,7]
Output: 1

Example 5:
Input: arr = [1,2,3,4,5,6,7,8,9,10]
Output: 5

constraint:
`1 <= arr.length <= 10^5`
`arr.length` is an even number.

`1 <= arr[i] <= 10^5`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree ""root"". Split the binary tree into two subtrees by removing 1 edge such that the product of the sum of the subtrees is maximized.

Since the answer might be too large, return it modulo 10^9 + 7.


Example 1:
Input: root = [1,2,3,4,5,6]
Output: 110
Explanation: Remove the red edge and get 2 binary trees whose sums are 11 and 10, and their product is 110 (11*10)

Example 2:
Input: root = [1,null,2,3,4,null,null,5,6]
Output: 90
Explanation: Remove the red edge and get 2 binary trees whose sum is 15 and 6, and their product is 90 (15*6)

Example 3:
Input: root = [2,3,9,10,7,8,6,5,4,11,1]
Output: 1025

Example 4:
Input: root = [1,1]
Output: 1

constraint:
Each tree has a maximum of 50000 nodes with at least 2 nodes.

The value of each node is between ""[1, 10000]"".",0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" and an integer ""d"". You can jump from index ""i"" to index in one step:
`i + x` where: `i + x < arr.length` and `0 < x <= d`.

`i - x` where: `i - x >= 0` and `0 < x <= d`.

Also, you can only jump from index `i` to index `k` if `arr[i] > arr[j]` and `arr[i] > arr[k]` for all indices `k` between `i` j` ` and `j` (more formally `min(i, j) < k < max(i, j)`).

You can pick any index of the array and start jumping. Returns the maximum number of indices you can access.

Note that you cannot jump out of the array at any time.


Example 1:
Input: arr = [6,4,14,6,8,13,9,7,10,6,12], d = 2
Output: 4
Instructions: You can start at index 10. You can jump 10 --> 8 --> 6 --> 7 as shown.

Note that if you start at index 6, you can only jump to index 7. You cannot jump to index 5 because 13 > 9. You can't jump to index 4 because index 5 is between index 4 and 6 and 13 > 9.

Likewise, you cannot jump from index 3 to index 2 or index 1.


Example 2:
Input: arr = [3,3,3,3,3], d = 3
Output: 1
Explanation: You can start with any index. You can't always jump to any index.


Example 3:
Input: arr = [7,6,5,4,3,2,1], d = 1
Output: 7
Explanation: Starts at index 0. You can access all indexes.

Example 4:
Input: arr = [7,1,7,1,7,1], d = 2
Output: 2

Example 5:
Input: arr = [66], d = 1
Output: 1

constraint:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 10^5`
`1 <= d <= arr.length`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a non-negative integer num , return the number of steps to reduce it to zero. If the current number is even, it must be divided by 2, otherwise, 1 must be subtracted from it.


Example 1:
Input: num = 14
Output: 6
explain:
Step 1) 14 is even; divide by 2 to get 7.
Step 2) 7 is odd; subtract 1 to get 6.

Step 3) 6 is even; divide by 2 to get 3.
Step 4) 3 is odd; subtract 1 to get 2.
Step 5) 2 is even; divide by 2 to get 1.
Step 6) 1 is odd; subtract 1 to get 0.


Example 2:
Input: num = 8
Output: 4
explain:
Step 1) 8 is even; divide by 2 to get 4.
Step 2) 4 is even; divide by 2 to get 2.
Step 3) 2 is even; divide by 2 to get 1.
Step 4) 1 is odd; subtract 1 to get 0.


Example 3:
Input: num = 123
Output: 12

constraint:
`0 <= num <= 10^6`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr and two integers k and threshold.

Returns the number of subarrays of size 'k' with mean greater than or equal to 'threshold'.


Example 1:
Input: arr = [2,2,2,2,5,5,5,8], k = 3, threshold = 4
Output: 3
Explanation: The subarrays [2,5,5], [5,5,5], and [5,5,8] have mean values ​​of 4, 5, and 6, respectively. All other subarrays of size 3 have a mean less than 4 (threshold).


Example 2:
Input: arr = [1,1,1,1,1], k = 1, threshold = 0
Output: 5

Example 3:
Input: arr = [11,13,17,23,29,31,7,5,2,3], k = 3, threshold = 5
Output: 6
Explanation: The average of the first 6 subarrays of size 3 is greater than 5. Note that the mean is not an integer.


Example 4:
Input: arr = [7,7,7,7,7,7,7], k = 7, threshold = 7
Output: 1

Example 5:
Input: arr = [4,4,4,4], k = 4, threshold = 1
Output: 1

constraint:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^4`
`1 <= k <= arr.length`
`0 <= threshold <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two numbers, ""hour"" and ""minute"". Returns the minor angle (in degrees) formed between the Hour Hand and the Minute Hand.


Example 1:
Input: Hours = 12, Minutes = 30
Output: 165

Example 2:
Input: hours = 3, minutes = 30
Output: 75

Example 3:
Input: hours = 3, minutes = 15
Output: 7.5

Example 4:
Input: Hours = 4, Minutes = 50
Output: 155

Example 5:
Input: hours = 12, minutes = 0
output: 0

constraint:
`1 <= hours <= 12`
`0 <= minutes <= 59`
Answers within 10^-5 of the actual value will be considered correct.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array arr of integers, you are initially located at the first index of the array.

You can jump from index ""i"" to index in one step:
`i + 1` where: `i + 1 < arr.length`.

`i - 1` where: `i - 1 >= 0`.

`j` where: `arr[i] == arr[j]` and `i != j`.

Returns the minimum number of steps to reach the last index of the array.

Note that you cannot jump out of the array at any time.


Example 1:
Input: arr = [100,-23,-23,404,100,23,23,23,3,404]
Output: 3
Explanation: You need to jump three times from index 0 --> 4 --> 3 --> 9. Note that index 9 is the last index of the array.


Example 2:
Input: arr = [7]
output: 0
Explanation: The start index is the last index. You don't need to jump.


Example 3:
Input: arr = [7,6,9,6,9,6,9,7]
Output: 1
Explanation: You can jump directly from index 0 to index 7, which is the last index of the array.


Example 4:
Input: arr = [6,1,9]
Output: 2

Example 5:
Input: arr = [11,22,7,7,7,7,7,7,7,22,13]
Output: 3

constraint:
`1 <= arr.length <= 5 * 104`
`-108 <= arr[i] <= 108`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""arr"", check whether there are two integers ""N"" and ""M"" such that ""N"" is twice as large as ""M"" (i.e. ""N = 2 * M"").

A more formal check for the existence of two indices `i` and `j` such that:
`I! = j`
`0 <= i, j < arr.length`
`arr[i] == 2 * arr[j]`

Example 1:
Input: arr = [10,2,5,3]
output: true
Explanation: N` = 10` is twice M` = 5`, ie 10 = 2 * 5`.


Example 2:
Input: arr = [7,1,14,11]
output: true
Explanation: N` = 14` is twice as large as M` = 7`, i.e. 14 = 2 * 7`.


Example 3:
Input: arr = [3,1,7,11]
output: error
Explanation: N and M do not exist in this case such that N = 2 * M.


constraint:
`2 <= arr.length <= 500`
`-10^3 <= arr[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s"" and ""t"" of equal size. In one step, you can select any character of `t` and replace it with another character.

Returns the minimum number of steps to make an anagram of ""t"" into ""s"".

An anagram of a string is a string containing the same characters in a different (or the same) order.


Example 1:
Input: s = ""bab"", t = ""aba""
Output: 1
Explanation: Replace the first 'a' in t with b, t = ""bba"" This is an anagram of s.


Example 2:
Input: s = ""leetcode"", t = ""practice""
Output: 5
Explanation: Replace 'p', 'r', 'a', 'i' and 'c' in t with the appropriate characters to make t an anagram of s.


Example 3:
Input: s = ""anagram"", t = ""mangaar""
output: 0
Explanation: ""anagram"" and ""mangaar"" are anagrams.

Example 4:
Input: s = ""xxyyzz"", t = ""xxyyzz""
output: 0

Example 5:
Input: s = ""friends"", t = ""family""
Output: 4

constraint:
`1 <= s.length <= 50000`
`s.length == t.length`
`s` and `t` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A social media company attempted to monitor activity on its website by analyzing the number of tweets that appeared during a specific time period. These periods of time can be divided into smaller chunks of time based on a specific frequency (every minute, hour, or day).

For example, the period ""[10, 10000]"" (in seconds) would be divided into the following time blocks with these frequencies:
Every minute (60 second blocks): `[10,69]`, `[70,129]`, `[130,189]`, `...`, `[9970,10000]`
Hourly (3600 second blocks): `[10,3609]`, `[3610,7209]`, `[7210,10000]`
Every day (blocks of 86400 seconds): `[10,10000]`
Note that the last block may be shorter than the block size for the specified frequency, and will always end with the period's end time (""10000"" in the example above).

Design and implement APIs to help companies with analytics.

Implement the ""TweetCounts"" class:
`TweetCounts()` initializes a `TweetCounts` object.

`void recordTweet(String tweetName, int time)` stores `tweetName` at the `time` (in seconds) of the record.

`List<Integer> getTweetCountsPerFrequency(String freq, String tweetName, int startTime, int endTime)` returns a list of integers representing the number of tweets with `tweetName` in each time chunk for the given time period `[startTime, endTime ]` (in seconds) and frequency `freq`.


`freq` is one of `""minute""`, `""hour""`, or `""day"", representing the frequency per minute, hour, or day, respectively.


example:
enter
[""TweetCounts"",""recordTweet"",""recordTweet"",""recordTweet"",""getTweetCountsPerFrequency"",""getTweetCountsPerFrequency"",""recordTweet"",""getTweetCountsPerFrequency""]
[[],[""tweet3"",0],[""tweet3"",60],[""tweet3"",10],[""minute"",""tweet3"",0,59],[""minute"",""tweet3"" ,0,60],[""tweet3"",120],[""hour"", ""tweet3"",0,210]]
output
[null,null,null,null,[2],[2,1],null,[4]]
explain
TweetCounts tweetCounts = new TweetCounts();
tweetCounts.recordTweet(""tweet3"", 0); // new tweet ""tweet3"" at time 0
tweetCounts.recordTweet(""tweet3"", 60); // new tweet ""tweet3"" at time 60
tweetCounts.recordTweet(""tweet3"", 10); // new tweet ""tweet3"" at time 10
tweetCounts.getTweetCountsPerFrequency(""minute"", ""tweet3"", 0, 59); // returns [2]; chunk [0,59] has 2 tweets
tweetCounts.getTweetCountsPerFrequency(""minute"", ""tweet3"", 0, 60); // returns [2,1]; block [0,59] has 2 tweets, block [60,60] has 1 tweet
tweetCounts.recordTweet(""tweet3"", 120); // new tweet ""tweet3"" at time 120
tweetCounts.getTweetCountsPerFrequency(""hour"", ""tweet3"", 0, 210); // returns [4]; chunk [0,210] has 4 tweets

constraint:
`0 <= time, start time, end time <= 109`
`0 <= endTime - startTime <= 104`
The total number of calls to `recordTweet` and `getTweetCountsPerFrequency` is up to 104.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m * n"" matrix ""seats"" representing the distribution of seats in a classroom. If the seat is broken, it is represented by a ""#"" character, otherwise it is represented by a ""."" character.

The student can see the answers of the students sitting next to left, right, top left, and top right, but he cannot see the answers of the students sitting in front or behind him. Returns the maximum number of students that can take an exam together without cheating.

Students must be seated in good condition.


Example 1:
Input: seat = [[""#"",""."",""#"",""#"",""."",""#""],
                ["". "",""#"",""#"",""#"",""#"","".""],
                [""#"",""."",""#"",""#"",""."",""#""]]
Output: 4
Instructions: The teacher can seat 4 students in available seats so they don't cheat on the test.

Example 2:
Input: seat = [[""."",""#""],
                [""#"",""#""],
                [""#"","".""],
                [""#"",""#""],
                [""."",""#""]]
Output: 3
Explanation: Place all students in available seats.

Example 3:
Input: seat = [[""#"",""."",""."",""."",""#""],
                ["". "",""#"",""."",""#"","".""],
                [""."",""."",""#"",""."","".""],
                ["". "",""#"",""."",""#"","".""],
                [""#"",""."",""."",""."",""#""]]
Output: 10
Explanation: Place students in available seats in columns 1, 3, and 5.


constraint:
`seats` only contain the characters `'.' and ``'#'. `
`m == seats. length`
`n == seats[i].length`
`1 <= m <= 8`
`1 <= n <= 8`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an m x n matrix grid sorted in non-increasing order of rows and columns, return the number of negative numbers in the grid.


Example 1:
Input: grid = [[4,3,2,-1],[3,2,1,-1],[1,1,-1,-2],[-1,-1,-2,- 3]]
Output: 8
Explanation: There are 8 negative numbers in the matrix.


Example 2:
Input: Grid = [[3,2],[1,0]]
output: 0

Example 3:
Input: grid = [[1,-1],[-1,-1]]
Output: 3

Example 4:
Input: Grid = [[-1]]
Output: 1

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 100`
`-100 <= grid[i][j] <= 100`
Follow up: Can you find a `O(n + m)` solution?",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement a class ""ProductOfNumbers"" that supports two methods:
1. `add(integer)`
Appends the number ""num"" to the end of the current list of numbers.

2. `getProduct(int k)`
Returns the product of the last ""k"" numbers in the current list.

You can assume that the current list will always have at least ""k"" numbers.

At any point, the product of any sequence of consecutive numbers will fit into a single 32-bit integer without overflow.


example:
enter
[""ProductOfNumbers"",""add"",""add"",""add"",""add"",""add"",""getProduct"",""getProduct"",""getProduct"",""add"",""getProduct""]
[[],[3],[0],[2],[5],[4],[2],[3],[4],[8],[2]]
output
[null,null,null,null,null,null,20,40,0,null,32]
explain
ProductOfNumbers productOfNumbers = new ProductOfNumbers();
productOfNumbers. add(3); // [3]
productOfNumbers. add(0); // [3,0]
productOfNumbers. add(2); // [3,0,2]
productOfNumbers. add(5); // [3,0,2,5]
productOfNumbers. add(4); // [3,0,2,5,4]
productOfNumbers. getProduct(2); // returns 20. The product of the last 2 numbers is 5 * 4 = 20
productOfNumbers. getProduct(3); // returns 40. The product of the last 3 numbers is 2 * 5 * 4 = 40
productOfNumbers. getProduct(4); // returns 0. The product of the last 4 numbers is 0 * 2 * 5 * 4 = 0
productOfNumbers.add(8); // [3,0,2,5,4,8]
productOfNumbers. getProduct(2); // returns 32. The product of the last 2 numbers is 4 * 8 = 32

constraint:
Considering add and getProduct, there will be up to 40000 operations.

`0 <= number <= 100`
`1 <= k <= 40000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an events array, where events[i] = [startDayi, endDayi]. Each event ""i"" starts with ""startDayi"" and ends with ""endDayi"".

You can attend event `i` on any day `d` where `startTimei <= d <= endTimei`. Note that you can only ""d"" participate in one activity at any time.

Returns the maximum number of events you can participate in.


Example 1:
Input: Event = [[1,2],[2,3],[3,4]]
Output: 3
Instructions: You can participate in all three activities.

One way to participate in all these activities is shown in the picture.

Participate in the first event of the first day.

Join the second activity on Day 2.

Join the third event on Day 3.


Example 2:
Input: event = [[1,2],[2,3],[3,4],[1,2]]
Output: 4

Example 3:
Input: Event = [[1,4],[4,4],[2,2],[3,4],[1,1]]
Output: 4

Example 4:
Input: Events = [[1,100000]]
Output: 1

Example 5:
Input: Event = [[1,1],[1,2],[1,3],[1,4],[1,5],[1,6],[1,7]]
Output: 7

constraint:
`1 <= events.length <= 105`
`events[i].length == 2`
`1 <= startDayi <= endDayi <= 105`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""target"". Starting with a starting array ""A"" of all 1s, you can do the following:
Let `x` be the sum of all elements currently in the array.

Select index `i` such that `0 <= i < target.size` and set the value of `A` at index `i` to `x`.

You can repeat this process as many times as needed.

Return True if the ""target"" array can be constructed from ""A"", False otherwise.


Example 1:
Input: target = [9,3,5]
output: true
Explanation: start from [1, 1, 1]
[1, 1, 1], sum = 3 selects index 1
[1, 3, 1], sum = 5 selects index 2
[1, 3, 5], sum = 9 selects index 0
[9, 3, 5] done

Example 2:
Input: target = [1,1,1,2]
output: error
Explanation: Unable to create destination array from [1,1,1,1].


Example 3:
Input: target = [8,5]
output: true

constraint:
`N == target. length`
`1 <= target.length <= 5 * 10^4`
`1 <= target[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr . You must sort the integers in the array in ascending order by the number of 1s in their binary representation, and if two or more integers have the same number of 1s, they must be sorted in ascending order.

Returns the sorted array.


Example 1:
Input: arr = [0,1,2,3,4,5,6,7,8]
Output: [0,1,2,4,8,3,5,6,7]
Explanation: [0] is the only integer with 0 bits.

[1,2,4,8] are all 1 bits.

[3,5,6] has 2 bits.

[7] Has 3 digits.

The bitwise array is [0,1,2,4,8,3,5,6,7]

Example 2:
Input: arr = [1024,512,256,128,64,32,16,8,4,2,1]
Output: [1,2,4,8,16,32,64,128,256,512,1024]
Explanation: All integers have 1 bit in their binary representation, you should sort them in ascending order.


Example 3:
Input: arr = [10000,10000]
Output: [10000,10000]

Example 4:
Input: arr = [2,3,5,7,11,13,17,19]
Output: [2,3,5,17,7,11,13,19]

Example 5:
Input: arr = [10,100,1000,10000]
Output: [10,100,10000,1000]

constraint:
`1 <= arr.length <= 500`
`0 <= arr[i] <= 10^4`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a discount in the supermarket, and there is a discount for every n customers.

There are some products in the supermarket. The id of the i-th product is products[i], and the unit price of this product is prices[i].

The system will count the number of customers and when the ""nth"" customer arrives, he/she will get a ""discount"" on the bill. (i.e., if the cost is `x`, the new cost is `x - (discount * x) / 100`). The system will then start counting the number of customers again.

A customer ordered a certain amount of each product, where ""product[i]"" is the ID of the ""i-th"" product that the customer ordered, and ""amount[i]"" is the number of units of that product that the customer ordered.

Implement the ""cashier"" class:
`Cashier(int n, int discount, int[] products, int[] prices)` initializes an object with `n`, `discount`, `products` and their `prices`.

`double getBill(int[] product, int[] amount)` returns the value of the bill and applies a discount if needed. Answers within 10^-5 of the actual value will be considered correct.


Example 1:
enter
[""cashier"", ""getBill"", ""getBill"", ""getBill"", ""getBill"", ""getBill"", ""getBill"", ""getBill""]
[[3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]],[[1,2],[1,2]],[[3,7],[10 ,10]],[[1,2,3,4,5,6,7],[1,1,1,1,1,1,1]],[[4],[10]],[ [7,3],[10,10]],[[7,5,3,1,6,4,2],[10,10,10,9,9,9,7]],[[2 ,3,5],[5,3,2]]]
output
[null,500.0,4000.0,800.0,4000.0,4000.0,7350.0,2500.0]
explain
Cashier cashier = new Cashier(3,50,[1,2,3,4,5,6,7],[100,200,300,400,300,200,100]);
cashier.getBill([1,2],[1,2]); // returns 500.0, bill = 1 * 100 + 2 * 200 = 500.

cashier.getBill([3,7],[10,10]); // returns 4000.0
cashier.getBill([1,2,3,4,5,6,7],[1,1,1,1,1,1,1]); // returns 800.0, the bill is 1600.0 but since this is the Three customers and he has a 50% discount, which means his bill is only 1600 - 1600 * (50 / 100) = 800.

cashier.getBill([4],[10]); // returns 4000.0
cashier.getBill([7,3],[10,10]); // returns 4000.0
cashier.getBill([7,5,3,1,6,4,2],[10,10,10,9,9,9,7]); // return 7350.0, Bill is 14700.0 but because the system calculated Three more customers, he will get a 50% discount and the bill becomes 7350.0
cashier.getBill([2,3,5],[5,3,2]); // returns 2500.0

constraint:
`1 <= n <= 10^4`
`0 <= Discount <= 100`
`1 <= products.length <= 200`
`1 <= product[i] <= 200`
There are no duplicate elements in the array ""products"".

`prices.length == products.length`
`1 <= price[i] <= 1000`
`1 <= product.length <= products.length`
`product[i]` exists in `products`.

`quantity.length == product.length`
`1 <= count[i] <= 1000`
Up to 1000 calls to getBill will be made.

Answers within 10^-5 of the actual value will be considered correct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s consisting only of the characters a, b, and c.

Returns the number of substrings containing at least one occurrence of all of the characters a, b, and c.


Example 1:
Input: s = ""abcabc""
Output: 10
Explanation: A substring containing at least one occurrence of the characters a, b, and c is ""abc"", ""abca"", ""abcab"", ""abcabc"", ""bca"", ""bcab"", ""bcabc"", ""cab"", ""cabc "" and ""abc"" (again).

Example 2:
Input: s = ""aaacb""
Output: 3
Explanation: The substrings containing at least one occurrence of the characters a, b, and c are ""aaacb"", ""aacb"", and ""acb"".

Example 3:
Input: s = ""abc""
Output: 1

constraint:
`3 <= s.length <= 5 x 10^4`
`s` consists of only a, b, or c characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given n orders, each order includes pickup and delivery services.
Calculate all valid pickup/delivery possible sequences such that delivery (i) is always after pickup (i).
Since the answer might be too large, return it modulo 10^9 + 7.


Example 1:
Input: n = 1
Output: 1
Explanation: Unique order (P1, D1), Delivery 1 is always after Pickup 1.


Example 2:
Input: n = 2
Output: 6
Explanation: All possible sequences:
(P1,P2,D1,D2), (P1,P2,D2,D1), (P1,D1,P2,D2), (P2,P1,D1,D2), (P2,P1,D2,D1) and (P2, D2, P1, D1).

This is an invalid order (P1,D2,P2,D1) because pickup 2 comes after delivery 2.


Example 3:
Input: n = 3
Output: 90

constraint:
`1 <= n <= 500`",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have `n` binary tree nodes numbered from `0` to `n - 1`, where node `i` has two children `leftChild[i]` and `rightChild[i]`, return `true` if and Only if all given nodes exactly form a valid binary tree.

If node ""i"" has no left child, then ""leftChild[i]"" will be equal to ""-1"", and similarly for the right child.

Note that nodes don't have values, we just use node numbers in this problem.


Example 1:
Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,-1,-1,-1]
output: true

Example 2:
Input: n = 4, leftChild = [1,-1,3,-1], rightChild = [2,3,-1,-1]
output: error

Example 3:
Input: n = 2, leftChild = [1,0], rightChild = [-1,-1]
output: error

Example 4:
Input: n = 6, leftChild = [1,-1,-1,4,-1,-1], rightChild = [2,-1,-1,5,-1,-1]
output: error

constraint:
`1 <= n <= 104`
`leftChild.length == rightChild.length == n`
`-1 <= leftChild[i], rightChild[i] <= n - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""num"", find the two integers whose absolute difference is closest, whose product is equal to ""num + 1"" or ""num + 2"".

Returns two integers in any order.


Example 1:
Input: num = 8
Output: [3,3]
Explanation: For num + 1 = 9, the closest factors are 3 and 3, and for num + 2 = 10, the closest factors are 2 and 5, so 3 and 3 are chosen.


Example 2:
Input: num = 123
Output: [5,25]

Example 3:
Input: num = 999
Output: [40,25]

constraint:
`1 <= num <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of 'numbers' integers, return the largest multiple of three that can be formed by concatenating some of the given numbers in any order.

Since the answer may not fit in an integer data type, the answer is returned as a string.

Returns an empty string if there is no answer.


Example 1:
Input: number = [8,1,9]
Output: ""981""

Example 2:
Input: number = [8,6,7,1,0]
Output: ""8760""

Example 3:
Input: number = [1]
Output: """"

Example 4:
Input: number = [0,0,0,0,0,0]
Output: ""0""

constraint:
`1 <= digits.length <= 10^4`
`0 <= number[i] <= 9`
The returned answer must not contain unnecessary leading zeros.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums`, for each `nums[i]`, find how many numbers in the array are smaller than it. That is, for each `nums[i]`, you must count the number of valid `j's` such that `j != i` and `nums[j] < nums[i]`.

Return the answers in an array.


Example 1:
Input: nums = [8,1,2,2,3]
Output: [4,0,1,1,3]
explain:
For nums[0]=8, there are four smaller numbers (1, 2, 2, and 3).
Because nums[1]=1 there is no number smaller than it.

For nums[2]=2, there exists a smaller number (1).
For nums[3]=2, there exists a smaller number (1).
For nums[4]=3, there are three smaller numbers (1, 2, and 2).


Example 2:
Input: nums = [6,5,4,8]
Output: [2,1,0,3]

Example 3:
Input: nums = [7,7,7,7]
output: [0,0,0,0]

constraint:
`2 <= nums.length <= 500`
`0 <= nums[i] <= 100`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a special ranking system, each voter ranks all participating teams from highest to lowest.

The order of the teams is determined by whoever gets the most number one votes. If two or more teams are tied on the first position, we will consider the second position to resolve the conflict, and if they are tied again, we will continue the process until the tie is resolved. If after considering all positions there are still two or more teams tied, we will alphabetize them based on their team letter.

Given a string array ""votes"", which is the votes of all voters in the ranking system. All teams are sorted according to the above ranking system.

Returns a string of all teams sorted by the ranking system.


Example 1:
Input: vote = [""ABC"",""ACB"",""ABC"",""ACB"",""ACB""]
Output: ""ACB""
Explanation: Team A ranks first with 5 voters. No other team was selected for first place, so Team A is the first team.

Team B ranked second with 2 votes and third with 3 votes.

Team C ranked second with 3 votes and third with 2 votes.

Since the majority of voters ranked C second, team C is second and team B is third.


Example 2:
Input: Poll = [""WXYZ"",""XYZW""]
Output: ""XWYZ""
Explanation: X is the winner due to the tie rule. X has the same number of votes as W in the first position, but X has one vote in the second position and W does not have any votes in the second position.

Example 3:
Input: Poll = [""ZMNAGUEDSJYLBOPHRQICWFXTVK""]
Output: ""ZMNAGUEDSJYLBOPHRQICWFXTVK""
Explanation: There is only one voter, so his vote is used for ranking.


Example 4:
Input: vote = [""BCA"",""CAB"",""CBA"",""ABC"",""ACB"",""BAC""]
Output: ""ABC""
explain:
Team A is ranked 1st with 2 voters, 2nd with 2 voters and 3rd with 2 voters.

Team B ranked first with 2 votes, ranked second with 2 votes, and ranked third with 2 votes.

Team C ranked first with 2 votes, ranked second with 2 votes, and ranked third with 2 votes.

There is a tie and we rank the teams based on their ID.


Example 5:
Input: Votes = [""M"",""M"",""M"",""M""]
Output: ""M""
Explanation: Only team M plays, so it ranks first.


constraint:
`1 <= votes.length <= 1000`
`1 <= votes[i].length <= 26`
`votes[i].length == votes[j].length` for `0 <= i, j < votes.length`.

`votes[i][j]` are English capital letters.

All characters of `votes[i]` are unique.

All characters that appear in `votes[0]` also appear in `votes[j]`, where `1 <= j < votes.length`.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree ""root"" and a linked list with ""head"" as the first node.
Return True if all elements in the linked list starting at head correspond to some downward path connected in the binary tree, otherwise return False.

In this context, a downward path means a path that starts at a node and moves downward.


Example 1:
Input: head = [4,2,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3]
output: true
Explanation: The blue nodes form a subpath in the binary tree.

Example 2:
Input: head = [1,4,2,6], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1,3 ]
output: true

Example 3:
Input: head = [1,4,2,6,8], root = [1,4,4,null,2,2,null,1,null,6,8,null,null,null,null,1 ,3]
output: error
Explanation: No path in the binary tree contains all elements of the linked list starting from `head`.


constraint:
The number of nodes in the tree will be in the range ""[1, 2500]"".

The number of nodes in the list will be in the range ""[1, 100]"".

`1 <= Node.val <= 100` for each node in linked lists and binary trees.",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an m x n `grid`. Each cell of the ""grid"" has a flag pointing to the next cell you should visit if you are currently in that cell. The notation for `grid[i][j]` can be:
1 means go to the cell to the right. (i.e. from `grid[i][j]` to `grid[i][j + 1]`)
2 means go to the cell to the left. (i.e. from `grid[i][j]` to `grid[i][j - 1]`)
3 means go to the lower cell. (i.e. from `grid[i][j]` to `grid[i + 1][j]`)
4 means go to the upper cell. (i.e. from `grid[i][j]` to `grid[i - 1][j]`)
Note that there may be some invalid symbols on Grid cells pointing outside the Grid.

You will initially start with the upper left cell ""(0,0)"". A valid path in the grid is the path starting from the upper left cell ""(0,0)"" to the lower right cell ""(m - 1, n - 1)"" and following the symbols on the grid. A valid path is not necessarily the shortest.

You can modify the sign on the cell with ""cost=1"". You can modify the symbol on a cell only once.

Returns the minimum cost to make the grid have at least one valid path.


Example 1:
Input: grid = [[1,1,1,1],[2,2,2,2],[1,1,1,1],[2,2,2,2]]
Output: 3
Explanation: You will start at point (0, 0).

The path of (3, 3) is as follows. (0, 0) --> (0, 1) --> (0, 2) --> (0, 3) change arrow to down, cost = 1 --> (1, 3) --> ( 1, 2) --> (1, 1) --> (1, 0) change arrow to down, cost = 1 --> (2, 0) --> (2, 1) --> (2 , 2) --> (2, 3) change arrow to down, cost = 1 --> (3, 3)
Total cost = 3.


Example 2:
Input: Grid = [[1,1,3],[3,2,2],[1,1,4]]
output: 0
Explanation: You can follow the path from (0, 0) to (2, 2).


Example 3:
Input: Grid = [[1,2],[4,3]]
Output: 1

Example 4:
Input: Grid = [[2,2,2],[2,2,2]]
Output: 3

Example 5:
Input: Grid = [[4]]
output: 0

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 100`",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s. You should use the following algorithm to reorder the strings:
Select the smallest character from s and append it to the result.

Select the smallest character from s that is greater than the last character appended to the result and append it.

Repeat step 2 until no more characters can be selected.

Select the largest character from s and append it to the result.

Select the largest character from s that is less than the last appended character in the result and append it.

Repeat step 5 until you can select no more characters.

Repeat steps 1 to 6 until all characters from s are selected.

At each step, if the smallest or largest character occurs more than once, you can select any occurrence and append it to the result.

Returns the resulting string after sorting s using this algorithm.


Example 1:
Input: s = ""aaaabbbbcccc""
Output: ""abccbaabccba""
Explanation: After steps 1, 2 and 3 of the first iteration, result = ""abc""
After steps 4, 5 and 6 of the first iteration, result = ""abccba""
The first iteration is complete. Now s = ""aabbcc"" we go back to step 1
After steps 1, 2 and 3 of the second iteration, result = ""abccbaabc""
After steps 4, 5 and 6 of the second iteration, result = ""abccbaabccba""

Example 2:
Input: s = ""mouse""
Output: ""art""
Explanation: After reordering with the above algorithm, the word ""rat"" becomes ""art"".


Example 3:
Input: s = ""leetcode""
Output: ""cdelotee""

Example 4:
Input: s = ""gggggggg""
Output: ""gggggggg""

Example 5:
Input: s = ""spo""
Output: ""Operation""

constraint:
`1 <= s.length <= 500`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s , return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', ​​'i', 'o' and 'u' must appear an even number of times.


Example 1:
Input: s = ""eleetminicoworoep""
Output: 13
Explanation: The longest substring is ""leetminicowor"", which contains two vowels: e, i, and o and zero vowels: a and u.


Example 2:
Input: s = ""leetcodeisgreat""
Output: 5
Explanation: The longest substring is ""leetc"" containing two e's.


Example 3:
Input: s = ""bcbcbc""
Output: 6
Explanation: In this case, the given string ""bcbcbc"" is the longest because all the vowels: a, e, i, o, and u occur zero times.


constraint:
`1 <= s.length <= 5 x 10^5`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get the ""root"" of the binary tree.

The ZigZag path of a binary tree is defined as follows:
Select any node and direction (right or left) in the binary tree.

If the current direction is right, move to the right child of the current node; otherwise, move to the left child.

Change direction right to left or left to right.

Repeat steps two and three until you can no longer move in the tree.

The zigzag length is defined as the number of nodes visited - 1. (A single node has length 0).

Returns the longest ZigZag path contained in this tree.


Example 1:
Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1,null,1]
Output: 3
Explanation: The longest ZigZag path among blue nodes (right -> left -> right).


Example 2:
Input: root = [1,1,1,null,1,null,null,1,1,null,1]
Output: 4
Explanation: longest ZigZag path among blue nodes (left -> right -> left -> right).


Example 3:
input: root = [1]
output: 0

constraint:
The number of nodes in the tree is in the range ""[1, 5 * 104]"".

`1 <= Node.val <= 100`",0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree ""root"", the task is to return the maximum sum of all keys of any subtree, which is also a binary search tree (BST).

Suppose a BST is defined as follows:
A node's left subtree contains only nodes whose keys are less than the node's key.

A node's right subtree contains only nodes whose keys are greater than the node's key.

The left and right subtrees must also be binary search trees.


Example 1:
Input: root = [1,4,3,2,4,2,5,null,null,null,null,null,null,4,6]
Output: 20
Explanation: The maximum sum in a valid binary search tree is obtained with key equal to 3 in the root node.


Example 2:
Input: root = [4,3,null,1,2]
Output: 2
Explanation: The largest sum in an efficient binary search tree is obtained at a single root node with key equal to 2.


Example 3:
Input: root = [-4,-2,-5]
output: 0
Explanation: All values ​​are negative. Returns an empty BST.


Example 4:
Input: root = [2,1,3]
Output: 6

Example 5:
Input: root = [5,4,8,3,null,6,3]
Output: 7

constraint:
A given binary tree will have ""1"" to ""40000"" nodes.

The value of each node is between `[-4 * 10^4 , 4 * 10^4]`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"Given an integer ""n"", return a string containing ""n"" characters such that each character in the string occurs an odd number of times.

The returned string must contain only lowercase English letters. If there are multiple valid strings, any one of them is returned.

Example 1:
Input: n = 4
Output: ""pppz""
Explanation: ""pppz"" is a valid string because the character ""p"" occurs three times and the character ""z"" occurs once. Note that there are many other valid strings, such as ""ohhh"" and ""love"".


Example 2:
Input: n = 2
Output: ""xy""
Explanation: ""xy"" is a valid string because the characters ""x"" and ""y"" occur once. Note that there are many other valid strings, such as ""ag"" and ""ur"".


Example 3:
Input: n = 7
Output: ""holasss""

constraint:
`1 <= n <= 500`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a room with n light bulbs, numbered from 1 to n, arranged in a row from left to right. Initially, all bulbs are off.

At time k (k goes from ""0"" to ""n - 1""), we turn on the ""light[k]"" bulb. A light bulb changes color to blue only when it is turned on, and all previous light bulbs (on the left) are also turned on.

Returns the number of times that all light bulbs that are on are blue.


Example 1:
Input: Light = [2,1,3,5,4]
Output: 3
Explanation: All light bulbs that are on, at times 1, 2 and 4 are blue.


Example 2:
Input: Light = [3,2,4,1,5]
Output: 2
Explanation: All light bulbs that are on, at times 3 and 4 (index 0) are blue.


Example 3:
Input: Light = [4,1,2,3]
Output: 1
Explanation: All turned on bulbs are blue at time 3 (index 0).

Bulb 4 turns blue at time 3.


Example 4:
Input: light = [2,1,4,3,6,5]
Output: 3

Example 5:
Input: Light = [1,2,3,4,5,6]
Output: 6

constraint:
`n == light.length`
`1 <= n <= 5 * 10^4`
`light` is a sequence of `[1, 2, ..., n]`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A company has ""n"" employees, and each employee has a unique ID from ""0"" to ""n - 1"". The head of the company is the person with ""headID"".

Each employee has a direct manager given in the ""manager"" array, where ""manager[i]"" is the direct manager of the ""i-th"" employee and ""manager[headID] = -1"". Furthermore, the dependency relationship is guaranteed to have a tree structure.

The leader of the company wants to inform all employees of the company about an urgent message. He would notify his direct reports, who would notify their subordinates, and so on, until all employees were aware of the urgent news.

The `i-th` employee needs `informTime[i]` minutes to notify all his direct reports (i.e. after informTime[i] minutes all his direct reports can start spreading the message).

Returns the number of minutes required to notify all employees of an emergency message.


Example 1:
Input: n = 1, headID = 0, manager = [-1], informTime = [0]
output: 0
Explanation: The person in charge of the company is the only employee of the company.


Example 2:
Input: n = 6, headID = 2, manager = [2,2,-1,2,2,2], informTime = [0,0,1,0,0,0]
Output: 1
Explanation: The person in charge of the company with id = 2 is the direct manager of all employees in the company, and it takes 1 minute to notify all employees.

Shows the tree structure of the company's employees.


Example 3:
Input: n = 7, headID = 6, manager = [1,2,3,4,5,6,-1], informTime = [0,6,5,4,3,2,1]
Output: 21
Explanation: The principal has id = 6. He will notify employee with id = 5 within 1 minute.

Employee with id = 5 will notify employee with id = 4 within 2 minutes.

Employee with id = 4 will notify employee with id = 3 within 3 minutes.

Employee with id = 3 will notify employee with id = 2 within 4 minutes.

Employee with id = 2 will notify employee with id = 1 within 5 minutes.

Employee with id = 1 will notify employee with id = 0 within 6 minutes.

Time required = 1 + 2 + 3 + 4 + 5 + 6 = 21.


Example 4:
Input: n = 15, headID = 0, manager = [-1,0,0,1,1,2,2,3,3,4,4,5,5,6,6], informTime = [1, 1,1,1,1,1,1,0,0,0,0,0,0,0,0]
Output: 3
Explanation: Employees 1 and 2 are notified in the first minute.

They will notify employees 3, 4, 5 and 6 in the second minute.

In the third minute, they will notify the rest of the staff.


Example 5:
Input: n = 4, headID = 2, manager = [3,3,-1,2], informTime = [0,0,162,914]
Output: 1076

constraint:
`1 <= n <= 105`
`0 <= headID < n`
`manager.length == n`
`0 <= managers[i] < n`
`manager[headID] == -1`
`informTime. length == n`
`0 <= informTime[i] <= 1000`
`informTime[i] == 0` if employee `i` has no subordinates.

Ensure that all employees are notified.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected tree consisting of ""n"" vertices numbered ""1"" to ""n"". A frog starts jumping from vertex 1. In one second, the frog jumps from its current vertex to another unvisited vertex (if they are directly connected). A frog cannot jump back to a visited vertex. If the frog can jump to multiple vertices, it will randomly jump to one of them with equal probability. Otherwise, when the frog cannot jump to any unvisited vertex, it will jump to the same vertex forever.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] indicates that there is an edge connecting vertices ai and bi.

Returns the probability that the frog will be on the vertex ""target"" after ""t"" seconds.


Example 1:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 2, target = 4
Output: 0.16666666666666666
Explanation: The above figure shows the given graph. The frog starts at vertex 1, jumps to vertex 2 with probability 1/3 after 1 second, and jumps to vertex 4 with probability 1/2 after 2 seconds. So the probability of the frog reaching vertex 4 after 2 seconds is 1/3 * 1/2 = 1/6 = 0.16666666666666666.

Example 2:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 1, target = 7
Output: 0.3333333333333333
Explanation: The above figure shows the given graph. The frog starts at vertex 1 and jumps to vertex 7 after 1 second with probability 1/3 = 0.3333333333333333.

Example 3:
Input: n = 7, edges = [[1,2],[1,3],[1,7],[2,4],[2,6],[3,5]], t = 20, target = 6
Output: 0.16666666666666666

constraint:
`1 <= n <= 100`
`edges. length == n - 1`
`edge[i].length == 2`
`1 <= ai, bi <= n`
`1 <= t <= 50`
`1 <= target <= n`
Answers within 10-5 of the actual value will be considered correct.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two binary trees ""original"" and ""clone"", and give a reference to the node ""target"" in the original tree.

A ""clone"" tree is a copy of the ""original"" tree.

Returns a reference to the same node in the ""clone"" tree.

Note that you must not change either tree or the ""target"" node, the answer must be a reference to a node in the ""clone"" tree.

Follow-up: Fix the issue if duplicate values ​​are allowed on the tree.


Example 1:
Input: tree = [7,4,3,null,null,6,19], target = 3
Output: 3
Explanation: In all examples, the original tree and the cloned tree are shown. The target node is the green node from the original tree. The answer is the yellow node in the clone tree.


Example 2:
Input: tree = [7], target = 7
Output: 7

Example 3:
Input: tree = [8,null,6,null,5,null,4,null,3,null,2,null,1], target = 4
Output: 4

Example 4:
Input: tree = [1,2,3,4,5,6,7,8,9,10], target = 5
Output: 5

Example 5:
Input: tree = [1,2,null,3], target = 2
Output: 2

constraint:
The number of nodes in `tree` is in the range `[1, 10^4]`.

The value of a ""tree"" node is unique.

The `target` node is a node from the `original` tree, not `null`.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m * n"" matrix of distinct numbers, return all lucky numbers in the matrix in any order.

The lucky number is an element of the matrix which is the smallest element in the row and the largest in the column.


Example 1:
Input: Matrix = [[3,7,8],[9,11,13],[15,16,17]]
Output: [15]
Explanation: 15 is the only lucky number because it is the minimum value in the row and the maximum value in the column

Example 2:
Input: Matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
Output: [12]
Explanation: 12 is the only lucky number because it is the minimum value in its row and the maximum value in its column.


Example 3:
Input: Matrix = [[7,8],[1,2]]
Output: [7]

constraint:
`m == mat.length`
`n == mat[i].length`
`1 <= n, m <= 50`
`1 <= matrix[i][j] <= 10^5`.

All elements in the matrix are distinct.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a stack that supports the following operations.

Implement the ""CustomStack"" class:
`CustomStack(int maxSize)` initializes the object with `maxSize`, which is the maximum number of elements in the stack, or does nothing if the stack reaches `maxSize`.

`void push(int x)` If the stack has not reached `maxSize`, add `x` to the top of the stack.

`int pop()` pops and returns the top of the stack, or -1 if the stack is empty.

`void inc(int k, int val)` increments `k` elements at the bottom of the stack by `val`. If there are fewer than `k` elements in the stack, simply increment all elements in the stack.


Example 1:
enter
[""CustomStack"", ""push"", ""push"", ""pop"", ""push"", ""push"", ""push"", ""increment"", ""increment"", ""pop"", ""pop"", ""pop"" ,Pop music""]
[[3],[1],[2],[],[2],[3],[4],[5,100],[2,100],[],[],[],[]]
output
[null,null,null,2,null,null,null,null,null,103,202,201,-1]
explain
CustomStack customStack = new CustomStack(3); // stack is empty []
customStack.push(1); // stack becomes [1]
customStack.push(2); // stack becomes [1, 2]
customStack.pop(); // return 2 --> Return to the top 2 of the stack, and the stack becomes [1]
customStack.push(2); // stack becomes [1, 2]
customStack.push(3); // stack becomes [1, 2, 3]
customStack.push(4); // stack still [1, 2, 3], don't add other elements because size is 4
customStack.increment(5, 100); // stack becomes [101, 102, 103]
customStack.increment(2, 100); // stack becomes [201, 202, 103]
customStack.pop(); // return 103 --> return to the top of the stack 103, the stack becomes [201, 202]
customStack.pop(); // return 202 --> return to the top of the stack 102, the stack becomes [201]
customStack.pop(); // return 201 --> return to the top of the stack 101, the stack becomes []
customStack.pop(); // return -1 --> return -1 if the stack is empty.


constraint:
`1 <= max size <= 1000`
`1 <= x <= 1000`
`1 <= k <= 1000`
`0 <= value <= 100`
Up to 1000 calls to each method of `increment`, `push`, and `pop` respectively.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary search tree, return a balanced binary search tree with the same node values.

A binary search tree is balanced if and only if the depths of the two subtrees of each node differ by no more than 1.

If there are multiple answers, return any of them.


Example 1:
Input: root = [1,null,2,null,3,null,4,null,null]
Output: [2,1,3,null,null,null,4]
Explanation: This is not the only correct answer, [3,1,4,null,2,null,null] is also correct.


constraint:
The number of nodes in the tree is between ""1"" and ""10^4"".

Tree nodes will have distinct values ​​between ""1"" and ""10^5"".",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0
"There are n engineers, numbered from 1 to n, and there are two arrays: speed and efficiency, where speed[i] and efficiency[i] represent the speed and efficiency of the i-th engineer respectively. Returns the maximum performance for a team of at most `k` engineers, since the answer can be a huge number, return this modulo 10^9 + 7.

A team's performance is the sum of its engineer's velocity multiplied by its engineer's minimum efficiency.

Example 1:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 2
Output: 60
explain:
We get the maximum performance of the team by choosing Engineer 2 (Speed ​​= 10 and Efficiency = 4) and Engineer 5 (Speed ​​= 5 and Efficiency = 7). That is, performance = (10 + 5) * min(4, 7) = 60.


Example 2:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 3
Output: 68
explain:
This is the same as the first example, but with k = 3. We can choose Engineer 1, Engineer 2 and Engineer 5 to get the maximum performance of the team. That is, performance = (2 + 10 + 5) * min(5, 4, 7) = 68.


Example 3:
Input: n = 6, speed = [2,10,3,1,5,8], efficiency = [5,4,3,9,7,2], k = 4
Output: 72

constraint:
`1 <= n <= 10^5`
`speed. length == n`
`efficiency. length == n`
`1 <= velocity[i] <= 10^5`
`1 <= efficiency[i] <= 10^8`
`1 <= k <= n`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A movie theater has n rows of seats, numbered from 1 to n, and each row has 10 seats, labeled 1 to 10, as shown in the figure above.

Given an array ""reservedSeats"" containing the number of reserved seats, for example, ""reservedSeats[i] = [3,8]"" means that the seat at row 3 marked 8 is reserved.

Returns the maximum number of groups of four that you can allocate in cinema seats. Groups of four occupy four adjacent seats in a row. Seats that span an aisle (such as [3,3] and [3,4]) are not considered adjacent, but there is a special case where an aisle divides a group of four, in which case the aisle divides the middle Group of four means two people on each side.


Example 1:
Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
Output: 4
Explanation: The figure above shows the optimal allocation of four groups, where the seats marked in blue are reserved and the adjacent seats in orange form a group.


Example 2:
Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
Output: 2

Example 3:
Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
Output: 4

constraint:
`1 <= n <= 10^9`
`1 <= reservedSeats. length <= min(10*n, 10^4)`
`reservedSeats[i].length == 2`
`1 <= reservedSeats[i][0] <= n`
`1 <= reservedSeats[i][1] <= 10`
All `reservedSeats[i]` are distinct.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The power of an integer ""x"" is defined as the number of steps required to convert ""x"" to ""1"" using the following steps:
If `x` is even then `x = x / 2`
If `x` is odd, then `x = 3 * x + 1`
For example, x = 3 to the power of 7 because 3 takes 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1 ).

Given three integers ""lo"", ""hi"" and ""k"". The task is to sort all integers in the interval ""[lo, hi]"" in ascending order of power value, or in ascending order if two or more integers have the same power value.

Returns the kth integer in the range [lo, hi] sorted by power value.

Note that for any integer `x` `(lo <= x <= hi)` it is guaranteed that converting `x` to `1` using these steps and powers of `x` will fit in a 32-bit signed integer.


Example 1:
Input: lo = 12, hi = 15, k = 2
Output: 13
Explanation: 12 to the 9th power (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)
13 to the power of 9
14 to the power of 17
15 to the power of 17
Intervals [12,13,14,15] sorted by power value. For k = 2, the answer is the second element, which is 13.

Note that 12 and 13 have the same power value and we sort them in ascending order. The same goes for 14 and 15.


Example 2:
Input: lo = 1, hi = 1, k = 1
Output: 1

Example 3:
Input: lo = 7, hi = 11, k = 4
Output: 7
Explanation: The power array corresponding to the interval [7,8,9,10,11] is [16,3,19,6,14].

The interval sorted by power is [8, 10, 11, 7, 9].

The fourth number in the sorted array is 7.


Example 4:
Input: lo = 10, hi = 20, k = 5
Output: 13

Example 5:
Input: lo = 1, hi = 1000, k = 777
Output: 570

constraint:
`1 <= lo <= hi <= 1000`
`1 <= k <= hi - lo + 1`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a pizza with 3n slices of different sizes, you and your friends will take pizza slices as follows:
You will choose any slice of pizza.

Your friend Alice will choose the next slice in a counterclockwise direction of your choice.
Your friend Bob will choose the next slice in a clockwise direction of your choice.

Repeat until there are no pizza slices left.

The size of the pizza slice is represented by the clockwise circular array ""slices"".

Returns the largest possible sum of slice sizes you can have.


Example 1:
Input: slice = [1,2,3,4,5,6]
Output: 10
Explanation: Choosing a pizza slice of size 4, Alice and Bob will choose pizza slices of size 3 and 5, respectively. Then slices of size 6 are selected, and finally Alice and Bob will select slices of size 2 and 1 respectively. Total = 4 + 6.


Example 2:
Input: slice = [8,9,8,6,1,1]
output: 16
Output: Pizza slices of size 8 are selected each round. If you choose a slice of size 9, your partner will choose a slice of size 8.

Example 3:
Input: slice = [4,1,2,5,8,3,1,9,7]
Output: 21

Example 4:
Input: slice = [3,1,2]
Output: 3

constraint:
`1 <= slice length <= 500`
`slices. length % 3 == 0`
`1 <= slice[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays ""nums"" and ""index"". Your task is to create the target array according to the following rules:
Initially the target array is empty.

Read nums[i] and index[i] from left to right, at index index[i] insert the value nums[i] in the destination array.

Repeat the previous step until there are no more elements to read in `nums` and `index.`.
Returns the target array.

Guarantees that the insert operation is valid.


Example 1:
Input: nums = [0,1,2,3,4], index = [0,1,2,2,1]
Output: [0,4,1,3,2]
explain:
nums index target
0 0 [0]
1 1 [0,1]
2 2 [0,1,2]
3 2 [0,1,3,2]
4 1 [0,4,1,3,2]

Example 2:
Input: nums = [1,2,3,4,0], index = [0,1,2,3,0]
Output: [0,1,2,3,4]
explain:
nums index target
1 0 [1]
2 1 [1,2]
3 2 [1,2,3]
4 3 [1,2,3,4]
0 0 [0,1,2,3,4]

Example 3:
Input: nums = [1], index = [0]
output: [1]

constraint:
`1 <= nums.length, index.length <= 100`
`nums.length == index.length`
`0 <= nums[i] <= 100`
`0 <= index[i] <= i`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of integers, return the sum of the divisors of the integers in the array that have exactly four divisors.

Returns ""0"" if there is no such integer in the array.


Example 1:
Input: nums = [21,4,7]
Output: 32
explain:
21 has 4 divisors: 1, 3, 7, 21
4 has 3 divisors: 1, 2, 4
7 has 2 divisors: 1, 7
The answer is simply the sum of the divisors of 21.


constraint:
`1 <= nums.length <= 10^4`
`1 <= nums[i] <= 10^5`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an m x n `grid`. Each cell of the ""grid"" represents a street. The streets of `grid[i][j]` can be:
1 means the street connecting the left and right cells.

2 represents the street connecting the upper and lower cells.

3 represents the street connecting the left cell to the cell below.

4 represents the street connecting the right cell and the lower cell.

5 represents the street connecting the left cell and the upper cell.

6 represents the street connecting the right cell and the upper cell.

You will initially start with the street in the top left cell ""(0,0)"". A valid path in the grid is the path starting at the top left cell ""(0,0)"" and ending at the bottom right cell ""(m - 1, n - 1)"". Paths should only follow streets.

Note that you may not change any streets.

Returns true if a valid path exists in the grid, false otherwise.


Example 1:
Input: Grid = [[2,4,3],[6,5,2]]
output: true
Explanation: As shown, you can start at cell (0, 0) and visit all cells of the grid to reach (m - 1, n - 1).


Example 2:
Input: Grid = [[1,2,1],[1,2,1]]
output: error
Explanation: As shown, the street of cell (0, 0) is not connected to any street of any other cell, you will be stuck at cell (0, 0)

Example 3:
Input: Grid = [[1,1,2]]
output: error
Explanation: You will be stuck at cell (0, 1) and cannot reach cell (0, 2).


Example 4:
Input: Grid = [[1,1,1,1,1,1,3]]
output: true

Example 5:
Input: grid = [[2],[2],[2],[2],[2],[2],[6]]
output: true

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 300`
`1 <= grid[i][j] <= 6`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is called a happy prefix if it is a non-empty prefix which is also a suffix (excluding itself).

Given a string s. Return the longest happy prefix of s.

If no such prefix exists, an empty string is returned.


Example 1:
Input: s = ""level""
Output: ""l""
Explanation: s contains 4 prefixes (""l"", ""le"", ""lev"", ""leve"") and suffixes (""l"", ""el"", ""vel"", ""evel""). The largest prefix that is also a suffix is ​​given by ""l"".


Example 2:
Input: s = ""ababab""
Output: ""abab""
Explanation: ""abab"" is the largest prefix and suffix. They can overlap in the original string.


Example 3:
Input: s = ""leetcodeleet""
Output: ""leet""

Example 4:
Input: s = ""a""
Output: """"

constraint:
`1 <= s.length <= 10^5`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array arr of integers, the lucky integer is an integer whose frequency in the array is equal to its value.

Returns the lucky integer in the array. If there are multiple lucky integers, the largest one is returned. Returns -1 if there are no lucky integers.


Example 1:
Input: arr = [2,2,3,4]
Output: 2
Explanation: The only lucky number in the array is 2, because frequency[2] == 2.


Example 2:
Input: arr = [1,2,2,3,3,3]
Output: 3
Explanation: 1, 2, and 3 are all lucky numbers, return the largest one among them.


Example 3:
Input: arr = [2,2,2,3,3]
Output: -1
Explanation: There are no lucky numbers in the array.


Example 4:
Input: arr = [5]
Output: -1

Example 5:
Input: arr = [7,7,7,7,7,7,7]
Output: 7

constraint:
`1 <= arr.length <= 500`
`1 <= arr[i] <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n soldiers standing in a row. Each soldier is assigned a unique ""rating"" value.

You must form a party of 3 soldiers according to the following rules:
Select 3 soldiers with indices (`i`, `j`, `k`) and ratings (`rating[i]`, `rating[j]`, `rating[k]`).

A team is valid if: (`rating[i] < rating[j] < rating[k]`) or (`rating[i] > rating[j] > rating[k]`) where (`0 <= i < j < k < n`).

Returns the number of teams you can form given the conditions. (Soldiers can be part of multiple teams).


Example 1:
Input: Ratings = [2,5,3,4,1]
Output: 3
Explanation: Given the conditions, we can form three teams. (2,3,4), (5,4,1), (5,3,1).

Example 2:
Input: Ratings = [2,1,3]
output: 0
Explanation: We are unable to form any teams under the given conditions.


Example 3:
Input: Ratings = [1,2,3,4]
Output: 4

constraint:
`n == rating. length`
`3 <= n <= 1000`
`1 <= score[i] <= 105`
All integers in `rating` are unique.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Underground Railroad system is tracking customer travel times between different stations. They are using this data to calculate the average time it takes to get from one station to another.

Implement the `UndergroundSystem` class:
`void checkIn(int id, string stationName, int t)`

A customer with a card ID equal to ""id"" checks in at the station ""stationName"" at time ""t"".

A customer can only stay in one place at a time.

`void checkOut(int id, string stationName, int t)`

Customer with card ID equal to ""id"" checks out from station ""stationName"" at time ""t"".

`double getAverageTime(string startStation, string endStation)`

Returns the average time taken from ""startStation"" to ""endStation"".

The average time is calculated based on all travel time from ""startStation"" to ""endStation"" that occurred directly before, meaning check-in at ""startStation"" and check-out from ""endStation"".

The time required from ""startStation"" to ""endStation"" may be different from the time required from ""endStation"" to ""startStation"".

At least one customer will go from startStation to endStation before calling getAverageTime.

You can assume that all calls to the `checkIn` and `checkOut` methods are consistent. If a customer checks in at time ""t1"" and then checks out at time ""t2"", then ""t1 < t2"". All events occur in chronological order.


Example 1:
enter
[""UndergroundSystem"",""checkIn"",""checkIn"",""checkIn"",""checkOut"",""checkOut"",""checkOut"",""getAverageTime"",""getAverageTime"",""checkIn"",""getAverageTime"",""checkOut"","" Get average time""]
[[],[45,""Leyton"",3],[32,""Paradise"",8],[27,""Leyton"",10],[45,""Waterloo"",15],[27,"" Waterloo"" ,20],[32,""Cambridge"",22],[""Paradise"",""Cambridge""],[""Leyton"",""Waterloo""],[10,""Leyton"",24],["" Leiden"",""Waterloo""],[10,""Waterloo"",38],[""Leyton"",""Waterloo""]]
output
[null,null,null,null,null,null,null,14.00000,11.00000,null,11.00000,null,12.00000]
explain
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(45, ""Leyton"", 3);
undergroundSystem.checkIn(32, ""Paradise"", 8);
undergroundSystem.checkIn(27, ""Leyton"", 10);
undergroundSystem.checkOut(45, ""Waterloo"", 15); // Customer 45 ""Leyton"" -> ""Waterloo"" in 15-3 = 12
undergroundSystem.checkOut(27, ""Waterloo"", 20); // customer 27 ""Leyton"" -> ""Waterloo"" in 20-10 = 10
undergroundSystem.checkOut(32, ""Cambridge"", 22); // Customer 32 ""Paradise"" -> ""Cambridge"" in 22-8 = 14
undergroundSystem.getAverageTime(""Paradise"", ""Cambridge""); // returns 14.00000. One trip ""Paradise"" -> ""Cambridge"", (14) / 1 = 14
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo""); // returns 11.00000. Twice ""Leyton"" -> ""Waterloo"", (10 + 12) / 2 = 11
undergroundSystem.checkIn(10, ""Leyton"", 24);
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo""); // returns 11.00000
undergroundSystem.checkOut(10, ""Waterloo"", 38); // customer 10 ""Leyton"" -> ""Waterloo"" in 38-24 = 14
undergroundSystem.getAverageTime(""Leyton"", ""Waterloo""); // returns 12.00000. Three trips ""Leyton"" -> ""Waterloo"", (10 + 12 + 14) / 3 = 12

Example 2:
enter
[""UndergroundSystem"",""checkIn"",""checkOut"",""getAverageTime"",""checkIn"",""checkOut"",""getAverageTime"",""checkIn"",""checkOut"",""getAverageTime""]
[[],[10,""Leyton"",3],[10,""Heaven"",8],[""Leyton"",""Heaven""],[5,""Leyton"",10],[5, ""Paradise"",16],[""Leyton"",""Paradise""],[2,""Leyton"",21],[2,""Paradise"",30],[""Leyton"",""Paradise""]]
output
[null,null,null,5.00000,null,null,5.50000,null,null,6.66667]
explain
UndergroundSystem undergroundSystem = new UndergroundSystem();
undergroundSystem.checkIn(10, ""Leyton"", 3);
undergroundSystem.checkOut(10, ""Paradise"", 8); // Customer 10 ""Leyton"" -> ""Paradise"" in 8-3 = 5
undergroundSystem.getAverageTime(""Leiden"", ""Paradise""); // returns 5.00000, (5) / 1 = 5
undergroundSystem.checkIn(5, ""Leyton"", 10);
undergroundSystem.checkOut(5, ""Paradise"", 16); // Customer 5 ""Leyton"" -> ""Paradise"" in 16-10 = 6
undergroundSystem.getAverageTime(""Leiden"", ""Paradise""); // returns 5.50000, (5 + 6) / 2 = 5.5
undergroundSystem.checkIn(2, ""Leyton"", 21);
undergroundSystem.checkOut(2, ""Paradise"", 30); // Client 2 ""Leyton""->""Paradise"" at 30-21 = 9
undergroundSystem.getAverageTime(""Leiden"", ""Paradise""); // returns 6.66667, (5 + 6 + 9) / 3 = 6.66667

constraint:
`1 <= id, t <= 106`
`1 <= stationName.length, startStation.length, endStation.length <= 10`
All strings are composed of uppercase and lowercase English letters and numbers.

In total there will be at most 2 * 104 calls to `checkIn`, `checkOut` and `getAverageTime`.

Answers within 10-5 of the actual value will be accepted.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the strings s1 and s2 of size n, and the string evil. Returns the number of good strings.

A good string is of size ""n"", alphabetically greater than or equal to ""s1"", alphabetically less than or equal to ""s2"", and does not contain the string ""evil"" as a substring. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: n = 2, s1 = ""aa"", s2 = ""da"", evil = ""b""
Output: 51
Explanation: There are 25 good strings starting with 'a': ""aa"", ""ac"", ""ad"",...,""az"". Then there are 25 good strings starting with 'c': ""ca"", ""cc"", ""cd"",...,""cz"" and finally one good string starting with 'd': ""da"".

Example 2:
Input: n = 8, s1 = ""leetcode"", s2 = ""leetgoes"", evil = ""leet""
output: 0
Explanation: All strings greater than or equal to s1 and less than or equal to s2 start with the prefix ""leet"", therefore, there aren't any good strings.


Example 3:
Input: n = 2, s1 = ""gx"", s2 = ""gz"", evil = ""x""
Output: 2

constraint:
`s1.length == n`
`s2. length == n`
`s1 <= s2`
`1 <= n <= 500`
`1 <= evil. length <= 50`
All strings consist of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"". Each number from ""1"" to ""n"" is grouped according to the sum of its digits.
Returns the number of groups of maximum size.


Example 1:
Input: n = 13
Output: 4
Description: There are 9 groups in total, grouped by the sum of digits from 1 to 13:
[1,10], [2,11], [3,12], [4,13], [5], [6], [7], [8], [9]. There are 4 largest groups.


Example 2:
Input: n = 2
Output: 2
Explanation: There are 2 groups [1], [2] of size 1.


Example 3:
Input: n = 15
Output: 6

Example 4:
Input: n = 24
Output: 5

constraint:
`1 <= n <= 10^4`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and an integer k. You should construct `k` non-empty palindromic string using all characters in `s`.

Return True if k palindromic strings can be constructed using all characters in s, otherwise return False.


Example 1:
Input: s = ""Annabelle"", k = 2
output: true
Explanation: You can construct two palindromes using all the characters in s.

Some possible structures ""anna"" + ""elble"", ""anbna"" + ""elle"", ""anellena"" + ""b""

Example 2:
Input: s = ""leetcode"", k = 3
output: error
Explanation: It is impossible to construct 3 palindromes with all characters of s.


Example 3:
Input: s = ""true"", k = 4
output: true
Explanation: The only possible solution is to put each character in a separate string.


Example 4:
Input: s = ""yzyzyzyzyzyzyzy"", k = 2
output: true
Explanation: You can simply put all z's in one string and all y's in another string. Both strings are palindromes.


Example 5:
Input: s = ""cr"", k = 7
output: error
Explanation: We don't have enough characters in s to construct 7 palindromes.


constraint:
`1 <= s.length <= 10^5`
All characters in s are lowercase English letters.

`1 <= k <= 10^5`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a circle denoted by (`radius`, `x_center`, `y_center`) and an axis-aligned rectangle denoted by (`x1`, `y1`, `x2`, `y2`), where (`x1 `, `y1`) are the coordinates of the lower left corner of the rectangle, and (`x2`, `y2`) are the coordinates of the upper right corner of the rectangle.

Returns True if the circle and rectangle overlap, False otherwise.

In other words, check if any point (xi, yi) belongs to both circle and rectangle.


Example 1:
Input: radius = 1, x_center = 0, y_center = 0, x1 = 1, y1 = -1, x2 = 3, y2 = 1
output: true
Explanation: circle and rectangle share point (1,0)

Example 2:
Input: radius = 1, x_center = 0, y_center = 0, x1 = -1, y1 = 0, x2 = 0, y2 = 1
output: true

Example 3:
Input: radius = 1, x_center = 1, y_center = 1, x1 = -3, y1 = -3, x2 = 3, y2 = 3
output: true

Example 4:
Input: radius = 1, x_center = 1, y_center = 1, x1 = 1, y1 = -3, x2 = 2, y2 = -1
output: error

constraint:
`1 <= radius <= 2000`
`-10^4 <= x_center, y_center, x1, y1, x2, y2 <= 10^4`
`x1 < x2`
`y1 < y2`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A chef collects data about the level of ""satisfaction"" of his ""n"" dishes. The chef can cook any dish in 1 unit of time.

The liking time coefficient of a dish is defined as the time spent cooking this dish, including previous dishes multiplied by its satisfaction level, ie `time[i]`*`satisfaction[i]`
Returns the maximum sum of Like-time coefficients a cook can obtain after a dish is ready.

Dishes can be prepared in any order, and chefs can drop some dishes for maximum value.


Example 1:
Input: Satisfaction = [-1,-8,0,5,-9]
Output: 14
Explanation: After removing the second and last dish, the maximum total like time coefficient will be equal to (-1*1 + 0*2 + 5*3 = 14). Each dish is ready in one unit of time.


Example 2:
Input: Satisfaction = [4,3,2]
Output: 20
Explanation: Dishes can be prepared in any order, (2*1 + 3*2 + 4*3 = 20)

Example 3:
Input: Satisfaction = [-1,-4,-5]
output: 0
Explanation: People don't like these dishes. There is no prepared dish.


Example 4:
Input: Satisfaction = [-2,5,-1,0,3,-3]
Output: 35

constraint:
`n == satisfaction. length`
`1 <= n <= 500`
`-10^3 <= satisfaction[i] <= 10^3`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"", gets a subsequence of the array whose sum is strictly greater than the sum of elements not contained in the subsequence.
If there are multiple solutions, the subsequence with the smallest length is returned, and if there are more than one solution, the subsequence with the largest sum of all its elements is returned. A subsequence of an array can be obtained by removing some (possibly zero) elements from the array.
Note that a solution with the given constraints is guaranteed to be unique. Also returns answers sorted in non-increasing order.


Example 1:
Input: nums = [4,3,10,9,8]
Output: [10,9]
Explanation: The subsequences [10,9] and [10,8] are the smallest, so the sum of their elements is strictly greater than the sum of the elements not included, but the largest sum of the subsequence [10,9] is its elements.

Example 2:
Input: nums = [4,4,7,6,7]
Output: [7,7,6]
Explanation: The sum of the elements of the subsequence [7,7] is equal to 14, which is not strictly greater than the sum of the excluded elements (14 = 4 + 4 + 6). Therefore, the subsequence [7,6,7] is the smallest subsequence that satisfies the condition. Note that subsequences must be returned in non-decreasing order.

Example 3:
input: nums = [6]
Output: [6]

constraint:
`1 <= nums.length <= 500`
`1 <= nums[i] <= 100`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a number s in binary representation. Returns the number of steps to reduce it to 1 according to the following rules:
If the current number is even, it must be divided by 2.

If the current number is odd, it must be incremented by 1.

You are guaranteed to always find one for all test cases.


Example 1:
Input: s = ""1101""
Output: 6
Explanation: ""1101"" corresponds to the number 13 in decimal notation.

Step 1) 13 is odd, add 1 to get 14.
Step 2) 14 is an even number, divide by 2 to get 7.

Step 3) 7 is an odd number, add 1 to get 8.

Step 4) 8 is an even number, divide by 2 to get 4.
Step 5) 4 is an even number, divide by 2 to get 2.
Step 6) 2 is an even number, divide by 2 to get 1.

Example 2:
Input: s = ""10""
Output: 1
Explanation: ""10"" corresponds to the number 2 in decimal notation.

Step 1) 2 is an even number, divide by 2 to get 1.

Example 3:
Input: s = ""1""
output: 0

constraint:
`1 <= s.length <= 500`
`s` consists of the characters ""0"" or ""1""
`s[0] == '1'`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is said to be happy if it does not have any of the strings ""aaa"", ""bbb"", or ""ccc"" as substrings.

Given three integers ""a"", ""b"" and ""c"", return any string ""s"" that satisfies the following conditions:
`s` is happy and the longest.

`s` contains at most `a` occurrences of the letter `a', at most `b` occurrences of the letter `b', and at most `c` occurrences of the letter `c'.

`s` will contain only `'a'`, `'b'` and `'c'` letters.

If there is no such string `s` returns the empty string `""""`.


Example 1:
Input: a = 1, b = 1, c = 7
Output: ""ccaccbcc""
Explanation: ""ccbccacc"" is also the correct answer.


Example 2:
Input: a = 2, b = 2, c = 1
Output: ""aabbc""

Example 3:
Input: a = 7, b = 1, c = 0
Output: ""aabaa""
Explanation: This is the only correct answer in this example.


constraint:
`0 <= a, b, c <= 100`
`a + b + c > 0`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob continue their game with a pile of stones. There are several stones arranged in a row, and each stone has an associated value which is an integer given in the array ""stoneValue"".

Alice and Bob take turns, with Alice starting first. On each player's turn, that player may take 1, 2 or 3 stones from the first remaining stones in the row.

Each player's score is the sum of the values ​​of the pieces taken. Each player's score is initially 0.

The object of the game is to end with the highest score, the player with the highest score wins, a tie may occur. The game continues until all pieces have been taken.

Suppose Alice and Bob are playing optimally.

Returns ""Alice"" if Alice wins, ""Bob"" if Bob wins, and ""Tie"" if they end the game with the same score.


Example 1:
Input: value = [1,2,3,7]
Output: ""Bob""
Explanation: Alice always loses. Her best move is to take three piles and the score becomes 6. Bob's score is now 7, and Bob wins.


Example 2:
Input: value = [1,2,3,-9]
Output: ""Alice""
Explanation: Alice must choose all three piles in the first step to win, while Bob has a negative score.

If Alice chooses a bunch, her score will be 1, and next step Bob's score becomes 5. Next Alice will take the pile with value = -9 and lose.

If Alice chooses two piles, her score will be 3, and next step Bob's score becomes 3. Next, Alice will take the pile with value = -9, but also loses.

Remember, both work best, so here Alice will choose the scenario that makes her win.


Example 3:
Input: value = [1,2,3,6]
Output: ""tie""
Explanation: Alice cannot win the game. If she decides to pick all the top three piles, she can end the game in a draw, otherwise she loses.


Example 4:
Input: value = [1,2,3,-1,-2,-3,7]
Output: ""Alice""

Example 5:
Input: value = [-1,-2,-3]
Output: ""tie""

constraint:
`1 <= values.length <= 50000`
`-1000 <= value[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array ""words"". Returns all strings in words that are substrings of another word in any order.
The string words[i] is a substring of words[j] if some characters to the left and/or right of words[j] can be removed.


Example 1:
Input: words = [""mass"",""as"",""hero"",""superhero""]
output: [""as"", ""hero""]
Explanation: ""as"" is a substring of ""mass"", and ""hero"" is a substring of ""superhero"".

[""hero"",""as""] is also a valid answer.


Example 2:
Input: words = [""leetcode"",""et"",""code""]
output: [""etc"", ""code""]
Explanation: ""et"" and ""code"" are substrings of ""leetcode"".


Example 3:
Input: words = [""blue"",""green"",""bu""]
output: []

constraint:
`1 <= words.length <= 100`
`1 <= word[i].length <= 30`
`words[i]` contains only lowercase English letters.

`words[i]` is guaranteed to be unique.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `queries` of positive integers between `1` and `m`, you must follow the following rules:
In the beginning, you have the permutation `P=[1,2,3,...,m]`.

For the current `i`, find the position of `queries[i]` in the permutation `P` (indexed from 0), and move it to the beginning of the permutation `P`. Note that `queries[ i]` in `P` is the result of `queries[i]`.

Returns an array containing the results of the given ""query"".


Example 1:
Input: queries = [3,1,2,1], m = 5
Output: [2,1,2,1]
Description: The query is processed as follows:
For i=0: queries[i]=3, P=[1,2,3,4,5], the position of 3 in P is 2, then we move 3 to the beginning of P to get P=[3, 1,2,4,5].
For i=1: queries[i]=1, P=[3,1,2,4,5], the position of 1 in P is 1, then we move 1 to the beginning of P to get P=[1 , 3,2,4,5].
For i=2: queries[i]=2, P=[1,3,2,4,5], the position of 2 in P is 2, then we move 2 to the beginning of P resulting in P=[2, 1,3,4,5].
For i=3: queries[i]=1, P=[2,1,3,4,5], the position of 1 in P is 1, then we move 1 to the beginning of P to get P=[1 , 2,3,4,5].
Therefore, the array containing the results is [2,1,2,1].

Example 2:
Input: queries = [4,1,2,2], m = 4
Output: [3,1,2,0]

Example 3:
Input: queries = [7,5,5,8,3], m = 8
Output: [6,5,0,7,5]

constraint:
`1 <= m <= 10^3`
`1 <= queries.length <= m`
`1 <= query[i] <= m`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The HTML entity parser is a parser that takes HTML code as input and replaces all entities of special characters with the characters themselves.

HTML's special characters and their entities are:
Quotation marks: `""` for entities and `""` for symbol characters.

Single quotes: the entity is `'`, and the symbol character is `'`.

& symbol: The entity is ""&"", and the symbol character is ""&"".

Greater than sign: the entity is `>`, and the symbol character is `>`.

Less than sign: the entity is `<`, and the symbol character is `<`.

Slash: `⁄` for entities and `/` for symbol characters.

Given an input ""text"" string for an HTML parser, you must implement an entity resolver.

Returns text after replacing entities with special characters.


Example 1:
Input: text = ""& is an HTML entity, but &ambassador; is not.""
Output: ""& is an HTML entity, but &ambassador; is not.""
Explanation: The parser will replace & entities with &

Example 2:
Input: text = ""and I quote: ""...""""
Output: ""I quote: \""...\""""

Example 3:
Input: text = ""Stay home! Practice on Leetcode :)""
Output: ""Stay home! Practice on Leetcode :)""

Example 4:
Input: text = ""x > y && x < y is always false""
Output: ""x > y && x < y is always false""

Example 5:
Input: text = ""leetcode.com⁄problemset⁄all""
Output: ""leetcode.com/problemset/all""

constraint:
`1 <= text.length <= 10^5`
The string may contain any possible character from all 256 ASCII characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a ""grid"" of size ""n x 3"", and you want to paint each cell of the grid with exactly one of three colors: red, yellow, or green, while making sure that no two adjacent Cells have the same color (that is, no two cells that share a vertical or horizontal edge have the same color).

Given the number of rows ""n"" of a grid, returns the number of ways to draw this ""grid"". Since the answer may become larger, the answer must be calculated modulo ""109 + 7"".


Example 1:
Input: n = 1
Output: 12
Explanation: There are 12 possible ways to draw the grid as shown.


Example 2:
Input: n = 2
Output: 54

Example 3:
Input: n = 3
Output: 246

Example 4:
Input: n = 7
Output: 106494

Example 5:
Input: n = 5000
Output: 30228214

constraint:
`n == grid. length`
`grid[i].length == 3`
`1 <= n <= 5000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", you start with an initial positive value startValue.

In each iteration, you compute startValue plus the progressive sum of elements in `nums` (from left to right).

Returns the smallest positive value of startValue such that the stepwise sum is never less than 1.


Example 1:
Input: nums = [-3,2,-3,4,2]
Output: 5
Explanation: If you choose startValue = 4, the sum of your steps is less than 1 in the third iteration.

                step by step summary
                start value = 4 | start value = 5 | number
                  (4 -3 ) = 1 | (5 -3 ) = 2 | -3
                  (1 +2 ) = 3 | (2 +2 ) = 4 | 2
                  (3 -3 ) = 0 | (4 -3 ) = 1 | -3
                  (0 +4 ) = 4 | (1 +4 ) = 5 | 4
                  (4 +2 ) = 6 | (5 +2 ) = 7 | 2

Example 2:
Input: nums = [1,2]
Output: 1
Explanation: The minimum starting value should be a positive number.

Example 3:
Input: nums = [1,-2,-3]
Output: 5

constraint:
`1 <= nums.length <= 100`
`-100 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""k"", return the minimum number of Fibonacci numbers whose sum equals ""k"". The same Fibonacci number can be used multiple times.

The Fibonacci sequence is defined as:
`F1 = 1`
`F2 = 1`
`Fn = Fn-1 + Fn-2` for `n > 2.`
It is guaranteed that for a given constraint, we can always find the Fibonacci numbers that sum to ""k"".


Example 1:
Input: k = 7
Output: 2
Explanation: The Fibonacci sequence is: 1, 1, 2, 3, 5, 8, 13, ...
For k = 7, we can use 2 + 5 = 7.


Example 2:
Input: k = 10
Output: 2
Explanation: For k = 10, we can use 2 + 8 = 10.


Example 3:
Input: k = 19
Output: 3
Explanation: For k = 19, we can use 1 + 5 + 13 = 19.


constraint:
`1 <= k <= 10^9`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A happy string is a string:
Contains only letters from the set ""['a', 'b', 'c']"".

`s[i] != s[i + 1]` for all values ​​of `i` from `1` to `s.length - 1` (strings are 1-indexed).

For example, the strings ""abc"", ""ac"", ""b"", and ""abcbabcbcb"" are all happy strings, while the strings ""aa"", ""baa"", and ""ababbc"" are not.

Given two integers ""n"" and ""k"", consider a lexicographically sorted list of all happy strings of length ""n"".

Returns the kth string of this list, or the empty string if there are fewer than ""k"" happy strings of length ""n"".


Example 1:
Input: n = 1, k = 3
Output: ""c""
Explanation: The list [""a"", ""b"", ""c""] contains all happy strings of length 1. The third string is ""c"".


Example 2:
Input: n = 1, k = 4
Output: """"
Explanation: There are only 3 happy strings of length 1.


Example 3:
Input: n = 3, k = 9
Output: ""cab""
Explanation: There are 12 different happy strings of length 3 [""aba"", ""abc"", ""aca"", ""acb"", ""bab"", ""bac"", ""bca"", ""bcb"", ""cab"" , ""cac"", ""cba"", ""cbc""]. You will find the 9th string = ""cab""

Example 4:
Input: n = 2, k = 7
Output: """"

Example 5:
Input: n = 10, k = 100
Output: ""abacbabacb""

constraint:
`1 <= n <= 10`
`1 <= k <= 100`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A program should print an array of integers. The program forgets to print spaces, the array is printed as a string of numbers, all we know is that all integers in the array are in the range ""[1, k]"" and there are no leading zeros in the array.

Given a string s and an integer k. There are several ways to recover an array.

Returns the number of possible arrays that can be printed as the string s using the above program.

The number of ways can be very large, so return it modulo `10^9 + 7`

Example 1:
Input: s = ""1000"", k = 10000
Output: 1
Explanation: The only possible array is [1000]

Example 2:
Input: s = ""1000"", k = 10
output: 0
Explanation: It is impossible to have an array printed like this with all integers >= 1 and <= 10.


Example 3:
Input: s = ""1317"", k = 2000
Output: 8
Explanation: The possible arrays are [1317], [131,7], [13,17], [1,317], [13,1,7], [1,31,7], [1,3,17], [1,3,1,7]

Example 4:
Input: s = ""2020"", k = 30
Output: 1
Explanation: The only possible array is [20,20]. [2020] is invalid because 2020 > 30. [2,020] is invalid because 020 contains leading zeros.


Example 5:
Input: s = ""1234567890"", k = 90
Output: 34

constraint:
`1 <= s.length <= 10^5`.

`s` contains only digits, without leading zeros.

`1 <= k <= 10^9`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an alphanumeric string s. (An alphanumeric string is a string of lowercase English letters and numbers).

You have to find permutations of strings where no letter is followed by another letter and no number is followed by another number. That is, no two adjacent characters have the same type.

Returns the reformatted string, or an empty string if the string could not be reformatted.


Example 1:
Input: s = ""a0b1c2""
Output: ""0a1b2c""
Explanation: No two adjacent characters in ""0a1b2c"" have the same type. ""a0b1c2"", ""0a1b2c"", ""0c2a1b"" are also valid permutations.


Example 2:
Input: s = ""leetcode""
Output: """"
Explanation: ""leetcode"" has only characters, so we cannot separate them with numbers.


Example 3:
Input: s = ""1229857369""
Output: """"
Explanation: ""1229857369"" has only numbers and cannot be separated by characters.


Example 4:
Input: s = ""covid2019""
Output: ""c2o0v1i9d""

Example 5:
Input: s = ""ab123""
Output: ""1a2b3""

constraint:
`1 <= s.length <= 500`
`s` contains only lowercase English letters and/or numbers.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array orders , it represents the orders that customers have fulfilled at the restaurant. More specifically, `orders[i]=[customerNamei,tableNumberi,foodItemi]` where `customerNamei` is the name of the customer, `tableNumberi` is the table the customer is sitting at, and `foodItemi` is the item the customer ordered.

Return the restaurant's ""display stand"". The ""display table"" is a table with row entries representing the quantity of each food item ordered by each table. The first column is the table number, and the remaining columns correspond to each food item in alphabetical order. The first row should be a header with the first column being ""table"" and then the name of the food item. Note that customer names are not part of the table. Also, the rows should be sorted in increasing numerical order.


Example 1:
Input: orders = [[""David"",""3"",""Ceviche""],[""Corina"",""10"",""Beef Burrito""],[""David"",""3"",""Fried Chicken""],[ ""Kara"", ""5"", ""Water""], [""Kara"", ""5"", ""Ceviche""], [""Rouse"", ""3"", ""Ceviche""]]
Output: [[""Table"",""Beef Burrito"",""Ceviche"",""Fried Chicken"",""Water""],[""3"",""0"",""2"",""1"",""0""],[ ""5"",""0"",""1"",""0"",""1""],[""10"",""1"",""0"",""0"",""0""]]
explain:
The display table looks like this:
dinner table, beef burrito, ceviche, fried chicken, water
3,0,2,1,0
5 ,0 ,1 ,0 ,1
10 ,1 ,0 ,0 ,0
For Table 3: David ordered ""Ceviche"" and ""Fried Chicken"" and Rous ordered ""Ceviche"".

For table 5: Kara ordered ""water"" and ""ceviche"".

For Table 10: Corina ordered the ""Beef Burrito"".

Example 2:
Input: orders = [[""James"",""12"",""Fried Chicken""],[""Ratesh"",""12"",""Fried Chicken""],[""Amadeus"",""12"",""Fried Chicken""], [""Adam"", ""1"", ""Canadian Waffles""], [""Brianna"", ""1"", ""Canadian Waffles""]]
Output: [[""Table"",""Canadian Waffles"",""Fried Chicken""],[""1"",""2"",""0""],[""12"",""0"",""3""]]
explain:
For Table 1: Adam and Brianna ordered the ""Canadian Waffle"".

For table 12: James, Ratesh and Amadeus ordered ""fried chicken"".


Example 3:
Input: orders = [[""Laura"",""2"",""Bean Burrito""],[""Jhon"",""2"",""Beef Burrito""],[""Melissa"",""2"",""Soda""]]
Output: [[""Table"",""Bean Burrito"",""Beef Burrito"",""Soda""],[""2"",""1"",""1"",""1""]]

constraint:
`1 <= orders.length <= 5 * 10^4`
`Orders[i].length == 3`
`1 <= customerNamei.length, foodItem.length <= 20`
`customerNamei` and `foodItemi` consist of uppercase and lowercase English letters and spaces.

`tableNumberi` is a valid integer between `1` and `500`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the string `croakOfFrogs`, which represents the combination of the string ""croak"" from different frogs, that is, multiple frogs can croak at the same time, so multiple ""croaks"" are mixed together. Returns the minimum number of distinct frogs that complete all frogs in the given string.

A valid ""croak"" means that the frog prints the 5 letters ""c"", ""r"", ""o"", ""a"", ""k"" in sequence. The frog must print all five letters to croak. Returns -1 if the given string is not a valid combination of ""croak"".


Example 1:
Input: croakOfFrogs = ""croakcroak""
Output: 1
Explanation: A frog croaked twice.


Example 2:
Input: croakOfFrogs = ""crcoakroak""
Output: 2
Explanation: The minimum number of frogs is two.
The first frog will yell ""crcoakroak"".

The second frog can yell ""crcoakroak"" later.


Example 3:
Input: croakOfFrogs = ""croakcrook""
Output: -1
Explanation: The given string is an invalid combination of ""croak"" from different frogs.


Example 4:
Input: croakOfFrogs = ""croakcroa""
Output: -1

constraint:
`1 <= croakOfFrogs.length <= 10^5`
All characters in the string are: ""c"", ""r"", ""o"", ""a"", or ""k"".",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given three integers ""n"", ""m"" and ""k"". Consider the following algorithm to find the largest element of an array of positive integers:
You should build the array arr with the following properties:
`arr` has exactly `n` integers.

`1 <= arr[i] <= m` where `(0 <= i < n)`.

After applying the above algorithm to arr, the value of search_cost is equal to k.

Returns the number of ways to build the array arr under the above conditions. Since the answer may become larger, the answer must be calculated modulo ""10^9 + 7"".


Example 1:
Input: n=2, m=3, k=1
Output: 6
Explanation: The possible arrays are [1, 1], [2, 1], [2, 2], [3, 1], [3, 2] [3, 3]

Example 2:
Input: n=5, m=2, k=3
output: 0
Explanation: There is no possible array that satisfies the above conditions.


Example 3:
Input: n=9, m=1, k=1
Output: 1
Explanation: The only possible array is [1, 1, 1, 1, 1, 1, 1, 1, 1]

Example 4:
Input: n=50, m=100, k=25
Output: 34549172
Explanation: Don't forget to calculate the answer modulo 1000000007

Example 5:
Input: n=37, m=17, k=7
Output: 418930126

constraint:
`1 <= n <= 50`
`1 <= meters <= 100`
`0 <= k <= n`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s consisting of 0s and 1s, return the maximum score after splitting the string into two non-empty substrings (i.e. left and right substrings).

The score after splitting the string is the number of zeros in the left substring plus the number of zeros in the right substring.


Example 1:
Input: s = ""011101""
Output: 5
explain:
All possible ways to split s into two non-empty substrings are:
Left = ""0"", Right = ""11101"", Score = 1 + 4 = 5
Left = ""01"", Right = ""1101"", Score = 1 + 3 = 4
Left = ""011"", Right = ""101"", Score = 1 + 2 = 3
left = ""0111"" and right = ""01"", score = 1 + 1 = 2
Left = ""01110"", Right = ""1"", Score = 2 + 1 = 3

Example 2:
Input: s = ""00111""
Output: 5
Explanation: When left = ""00"" and right = ""111"" we get maximum score = 2 + 3 = 5

Example 3:
Input: s = ""1111""
Output: 3

constraint:
`2 <= s.length <= 500`
The string s consists only of the characters ""0"" and ""1"".",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are several cards arranged in a row, and each card has an associated point, which is given in the integer array ""cardPoints"".

In one step, you can take a card from the beginning or end of the row. You must take exactly `k` cards.

Your score is the sum of the points of the cards you have dealt.

Given an integer array ""cardPoints"" and an integer ""k"", return the maximum number of points you can get.


Example 1:
Input: cardPoints = [1,2,3,4,5,6,1], k = 3
Output: 12
Explanation: After the first step, your score will always be 1. However, choosing the rightmost card first will maximize your total score. The best strategy is to take the three cards to the right, for a final score of 1+6+5=12.


Example 2:
Input: cardPoints = [2,2,2], k = 2
Output: 4
Explanation: No matter which two cards you take, your score is always 4.


Example 3:
Input: cardPoints = [9,7,7,9,7,7,9], k = 7
Output: 55
Explanation: You must take all the cards. Your score is the sum of the scores of all cards.


Example 4:
Input: cardPoints = [1,1000,1], k = 1
Output: 1
Explanation: You cannot take the middle card. Your best score is 1.

Example 5:
Input: cardPoints = [1,79,80,1,1,1,200,1], k = 3
Output: 202

constraint:
`1 <= cardPoints. length <= 10^5`
`1 <= cardPoints[i] <= 10^4`
`1 <= k <= cardPoints.length`",1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a list of integers `nums`, return all elements of `nums` in diagonal order as shown in the following figure.


Example 1:
Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]

Example 2:
Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]

Example 3:
Input: nums = [[1,2,3],[4],[5,6,7],[8],[9,10,11]]
Output: [1,4,2,5,3,8,6,9,7,10,11]

Example 4:
Input: nums = [[1,2,3,4,5,6]]
Output: [1,2,3,4,5,6]

constraint:
`1 <= nums.length <= 10^5`
`1 <= nums[i].length <= 10^5`
`1 <= nums[i][j] <= 10^9`
There will be at most `10^5` elements in `nums`.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"", returns the largest sum of non-empty subsequences of that array such that for every two consecutive integers in the subsequence, ""nums[i]"" and ""nums[j] ""`, where `i < j`, satisfy the condition `j - i <= k`.

A subsequence of an array is obtained by removing a certain number of elements (which can be zero) from the array, leaving the remaining elements in their original order.


Example 1:
Input: nums = [10,2,-10,5,20], k = 2
Output: 37
Explanation: The subsequence is [10, 2, 5, 20].


Example 2:
Input: nums = [-1,-2,-3], k = 1
Output: -1
Explanation: The subsequence must be non-empty, so we choose the largest number.


Example 3:
Input: nums = [10,-2​​,-10,-5,20], k = 2
Output: 23
Explanation: The subsequence is [10, -2, -5, 20].


constraint:
`1 <= k <= nums.length <= 105`
`-104 <= nums[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"", count how many elements ""x"" are in it such that ""x+1"" is also in ""arr"". If there are duplicates in arr, count them separately.


Example 1:
Input: arr = [1,2,3]
Output: 2
Explanation: 1 and 2 are counted because 2 and 3 are in arr.


Example 2:
Input: arr = [1,1,3,3,5,5,7,7]
output: 0
Explanation: No numbers are counted because there are no 2, 4, 6 or 8 in arr.


Example 3:
Input: arr = [1,3,2,3,5,0]
Output: 3
Explanation: 0, 1 and 2 are counted because 1, 2 and 3 are in arr.


Example 4:
Input: arr = [1,1,2,2]
Output: 2
Explanation: Two 1s are counted because 2 is in arr.


Example 5:
Input: arr = [1,1,2]
Output: 2
Explanation: Both 1's are counted because 2's are in the array.


constraint:
`1 <= arr.length <= 1000`
`0 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" containing lowercase English letters and a matrix ""shift"" where ""shift[i] = [direction, amount]"":
`direction` can be `0` (move left) or 1 (move right).
`amount` is the amount by which the string `s` is to be moved.

Shifting left by 1 means removing the first character of s and appending it to the end.

Similarly, shifting right by 1 means removing the last character of s and adding it to the beginning.

Returns the final string after all operations.


Example 1:
Input: s = ""abc"", shift = [[0,1],[1,2]]
Output: ""cab""
explain:
[0,1] means move left by 1. ""abc"" -> ""bca""
[1,2] means shift right by 2. ""bca"" -> ""cab""

Example 2:
Input: s = ""abcdefg"", shift = [[1,1],[1,1],[0,2],[1,3]]
Output: ""efgabcd""
explain:
[1,1] means shift right by 1. ""abcdefg"" -> ""gabcdef""
[1,1] means shift right by 1. ""gabcdef"" -> ""fgabcde""
[0,2] means move left by 2. ""fgabcde"" -> ""abcdefg""
[1,3] means shift right by 3. ""abcdefg"" -> ""efgabcd""

constraint:
`1 <= s.length <= 100`
`s` contains only lowercase English letters.

`1 <= shift.length <= 100`
`shift[i].length == 2`
`0 <= shift[i][0] <= 1`
`0 <= shift[i][1] <= 100`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"(This question is an interactive question.)
A row-sorted binary matrix means that all elements are either ""0"" or ""1"", and each row of the matrix is ​​sorted in non-decreasing order.

Given a row-sorted binary matrix ""binaryMatrix"", return the index (indexed from 0) of the leftmost column containing 1's. Returns ""-1"" if such an index does not exist.

You cannot access binary matrices directly. You can only access matrices using the `BinaryMatrix` interface:
`BinaryMatrix.get(row, col)` returns the matrix element at index `(row, col)` (0-based).

`BinaryMatrix.dimensions()` returns the dimensions of the matrix as a list of 2 elements `[rows, cols]`, which means the matrix is ​​`rows x cols`.

Commits with more than `1000` calls to `BinaryMatrix.get` will be judged as wrong answers. Additionally, any settlement attempting to circumvent the judge will result in disqualification.

For custom testing purposes, the input will be the entire binary matrix ""mat"". You won't have direct access to binary matrices.


Example 1:
Input: mat = [[0,0],[1,1]]
output: 0

Example 2:
Input: mat = [[0,0],[0,1]]
Output: 1

Example 3:
Input: mat = [[0,0],[0,0]]
Output: -1

Example 4:
Input: mat = [[0,0,0,1],[0,0,1,1],[0,1,1,1]]
Output: 1

constraint:
`line == mat.length`
`cols == mat[i].length`
`1 <= rows, columns <= 100`
`mat[i][j]` is either `0` or `1`.

`mat[i]` sorts in non-descending order.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a queue of integers and you need to retrieve the first unique integer in the queue.

Implement the ""FirstUnique"" class:
`FirstUnique(int[] nums)` initializes the object with the numbers in the queue.

`int showFirstUnique()` returns the value of the first unique integer in the queue, or -1 if there is no such integer.

`void add(int value)` Inserts a value into the queue.


Example 1:
enter:
[""FirstUnique"",""showFirstUnique"",""add"",""showFirstUnique"",""add"",""showFirstUnique"",""add"",""showFirstUnique""]
[[[2,3,5]],[],[5],[],[2],[],[3],[]]
output:
[empty,2,empty,2,empty,3,empty,-1]
explain:
FirstUnique firstUnique = new FirstUnique([2,3,5]);
firstUnique.showFirstUnique(); // returns 2
firstUnique.add(5); // queue is now [2,3,5,5]
firstUnique.showFirstUnique(); // returns 2
firstUnique.add(2); // queue is now [2,3,5,5,2]
firstUnique.showFirstUnique(); // returns 3
firstUnique.add(3); // queue is now [2,3,5,5,2,3]
firstUnique.showFirstUnique(); // returns -1

Example 2:
enter:
[""FirstUnique"",""showFirstUnique"",""add"",""add"",""add"",""add"",""add"",""showFirstUnique""]
[[[7,7,7,7,7,7]],[],[7],[3],[3],[7],[17],[]]
output:
[empty, -1, empty, empty, empty, empty, empty, 17]
explain:
FirstUnique firstUnique = new FirstUnique([7,7,7,7,7,7]);
firstUnique.showFirstUnique(); // returns -1
firstUnique.add(7); // queue is now [7,7,7,7,7,7,7]
firstUnique.add(3); // queue is now [7,7,7,7,7,7,7,3]
firstUnique.add(3); // queue is now [7,7,7,7,7,7,7,3,3]
firstUnique.add(7); // queue is now [7,7,7,7,7,7,7,3,3,7]
firstUnique.add(17); // The queue is now [7,7,7,7,7,7,7,3,3,7,17​​]
firstUnique.showFirstUnique(); // returns 17

Example 3:
enter:
[""FirstUnique"",""showFirstUnique"",""add"",""showFirstUnique""]
[[[809]],[],[809],[]]
output:
[null,809,null,-1]
explain:
FirstUnique firstUnique = new FirstUnique([809]);
firstUnique.showFirstUnique(); // returns 809
firstUnique.add(809); // queue is now [809,809]
firstUnique.showFirstUnique(); // returns -1

constraint:
`1 <= nums.length <= 10^5`
`1 <= nums[i] <= 10^8`
`1 <= value <= 10^8`
There will be at most 50000 calls to showFirstUnique and add.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree where every path from the root to any leaf forms a valid sequence, check if the given string is a valid sequence in that binary tree.
We get the given string from the concatenation of the integer array arr, and the concatenation of all values ​​of the nodes along the path results in the sequence in the given binary tree.


Example 1:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,0,1]
output: true
explain:
The path 0 -> 1 -> 0 -> 1 is a valid sequence (green in the diagram).
Other valid sequences are:
0 -> 1 -> 1 -> 0
0 -> 0 -> 0

Example 2:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,0,1]
output: error
Explanation: The path 0 -> 0 -> 1 doesn't exist, so it's not even a sequence.


Example 3:
Input: root = [0,1,0,0,1,0,null,null,1,0,0], arr = [0,1,1]
output: error
Explanation: The path 0 -> 1 -> 1 is a sequence, but it is not a valid sequence.


constraint:
`1 <= arr.length <= 5000`
`0 <= arr[i] <= 9`
Each node has a value between [0 - 9].",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""candies"" and an integer ""extraCandies"", where ""candies[i]"" represents the number of candies the ith child has.

For each child, check if there is a way to distribute ""extraCandies"" among the children so that he or she can get the maximum amount of candies. Note that multiple children can have the most candies.


Example 1:
Input: candies = [2,3,5,1,3], extraCandies = 3
Output: [true,true,true,false,true]
explain:
Child 1 has 2 candies, and if he or she receives all the extra candies, (3) will have 5 candies --- the child with the most candies.
Child 2 has 3 candies, and the child has the most candies if he or she receives at least 2 additional candies.
Child 3 has 5 candies, which is already the largest number of candies among children.
Child 4 has 1 candy, and only has 4 candies even if he or she receives all the extra candies.
Child 5 has 3 candies, and if he or she receives at least 2 additional candies, then he or she will have the most candies among the children.

Example 2:
Input: candies = [4,2,1,1,2], extraCandies = 1
Output: [true, false, false, false, false]
Explanation: There is only 1 extra candy, so no matter who takes the extra candy, only child 1 has the most candies.


Example 3:
Input: candies = [12,1,12], extraCandies = 10
Output: [true, false, true]

constraint:
`2 <= candies.length <= 100`
`1 <= candies[i] <= 100`
`1 <= extraCandies <= 50`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer ""num"". You will apply the following steps exactly twice:
Pick a number `x (0 <= x <= 9)`.

Choose another number ""y (0 <= y <= 9)"". The number ""y"" can be equal to ""x"".

Replace all occurrences of x in the decimal representation of num with y .

The new integer cannot have any leading zeros, nor can the new integer be 0.

Let ""a"" and ""b"" be the result of applying the operation to ""num"" for the first and second time, respectively.

Returns the maximum difference between `a` and `b`.


Example 1:
Input: num = 555
Output: 888
Explanation: First choose x = 5 and y = 9 and store the new integers in a.

The second time selects x = 5 and y = 1 and stores the new integer in b.

We now have a = 999 and b = 111 and max difference = 888

Example 2:
Input: num = 9
Output: 8
Explanation: first choose x = 9 and y = 9 and store the new integer in a.

The second time selects x = 9 and y = 1 and stores the new integer in b .

We now have a = 9 and b = 1, max difference = 8

Example 3:
Input: num = 123456
Output: 820000

Example 4:
Input: num = 10000
Output: 80000

Example 5:
Input: num = 9288
Output: 8700

constraint:
`1 <= num <= 10^8`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings: s1 and s2 of the same size, check whether some permutations of string s1 can destroy certain permutations of string s2 and vice versa. In other words, `s2` can destroy `s1` and vice versa.

If `x[i] >= y[i]` (in alphabetical order) for `0` and `n- 1`.


Example 1:
Input: s1 = ""abc"", s2 = ""xya""
output: true
Explanation: ""ayx"" is a permutation of s2=""xya"", which can be decomposed into the string ""abc"", which is a permutation of s1=""abc"".


Example 2:
Input: s1 = ""abe"", s2 = ""acd""
output: error
Explanation: All permutations of s1=""abe"" are: ""abe"", ""aeb"", ""bae"", ""bea"", ""eab"" and ""eba"" and all permutations of s2=""acd"" are: ""acd"", ""adc"", ""cad"", ""cda"", ""dac"", and ""dca"". However, no permutation from s1 can destroy some permutation from s2 and vice versa.


Example 3:
Input: s1 = ""leetcodee"", s2 = ""interview""
output: true

constraint:
`s1.length == n`
`s2. length == n`
`1 <= n <= 10^5`
All strings consist of lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n people and 40 hats labeled 1 to 40.

Given a list hats of integers, where hats[i] is a list of all hats liked by person i.

Returns the number of ways n people can wear different hats to each other.

Since the answer may be too large, return modulo 10^9 + 7 .


Example 1:
Input: hat = [[3,4],[4,5],[5]]
Output: 1
Explanation: Given the conditions, there is only one way to choose a hat.
The first person chooses hat 3, the second person chooses hat 4, and the last person chooses hat 5.


Example 2:
Input: hat = [[3,5,1],[3,5]]
Output: 4
Description: There are 4 ways to choose a hat
(3,5), (5,3), (1,3) and (1,5)

Example 3:
Input: hat = [[1,2,3,4],[1,2,3,4],[1,2,3,4],[1,2,3,4]]
Output: 24
Explanation: Everyone can choose a hat labeled 1 to 4.

Number of permutations of (1,2,3,4) = 24.


Example 4:
Input: hat = [[1,2,3],[2,3,5,6],[1,3,7,9],[1,8,9],[2,5,7]]
Output: 111

constraint:
`n == hats. length`
`1 <= n <= 10`
`1 <= hat[i].length <= 40`
`1 <= hat[i][j] <= 40`
`hats[i]` contains a list of unique integers.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""paths"", where ""paths[i] = [cityAi, cityBi]"" indicates that there is a direct path from ""cityAi"" to ""cityBi"". Returns the destination city, that is, the city without any outbound routes.

It is guaranteed that the route graph forms a line without any loops, therefore, there will be exactly one destination city.


Example 1:
Input: paths = [[""London"",""New York""],[""New York"",""Lima""],[""Lima"",""Sao Paulo""]]
Output: ""Saint Paul""
Explanation: Starting from the city ""London"", you will arrive at the destination city ""São Paulo"". Your itinerary includes: ""London"" -> ""New York"" -> ""Lima"" -> ""Sao Paulo"".


Example 2:
Input: Path = [[""B"",""C""],[""D"",""B""],[""C"",""A""]]
Output: ""A""
Explanation: All possible itineraries are:
""D"" -> ""B"" -> ""C"" -> ""A"".
""B"" -> ""C"" -> ""A"".
""C"" -> ""A"".
""A"".
Obviously the destination city is ""A"".


Example 3:
Input:Path = [[""A"",""Z""]]
Output: ""Z""

constraint:
`1 <= paths.length <= 100`
`path[i].length == 2`
`1 <= cityAi.length, cityBi.length <= 10`
`cityAi != cityBi`
All strings consist of uppercase and lowercase English letters and space characters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of 0s and 1s and an integer ""k"", return ""True"" if all 1s are at least ""k"" positions away from each other, else return ""False"".


Example 1:
Input: nums = [1,0,0,0,1,0,0,1], k = 2
output: true
Explanation: Every 1 is at least 2 positions apart.


Example 2:
Input: nums = [1,0,0,1,0,1], k = 2
output: error
Explanation: There is only one difference between the second 1 and the third 1.


Example 3:
Input: nums = [1,1,1,1,1], k = 0
output: true

Example 4:
Input: nums = [0,1,0,1], k = 1
output: true

constraint:
`1 <= nums.length <= 105`
`0 <= k <= nums.length`
`nums[i]` is either `0` or `1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""limit"", return the size of the longest non-empty subarray such that the absolute difference between any two elements of this subarray is less than or equal to ""limit"".


Example 1:
Input: nums = [8,2,4,7], limit = 4
Output: 2
Explanation: All subarrays are:
[8] has the largest absolute difference |8-8| = 0 <= 4.

[8,2] has the largest absolute difference |8-2| = 6 > 4.
[8,2,4] has the largest absolute difference |8-2| = 6 > 4.

[8,2,4,7] has the largest absolute difference |8-2| = 6 > 4.

[2] with maximum absolute difference |2-2| = 0 <= 4.

[2,4] has the largest absolute difference |2-4| = 2 <= 4.

[2,4,7] has the largest absolute difference |2-7| = 5 > 4.

[4] has the largest absolute difference |4-4| = 0 <= 4.

[4,7] has the largest absolute difference |4-7| = 3 <= 4.

[7] has the largest absolute difference |7-7| = 0 <= 4.
Therefore, the longest subarray has size 2.


Example 2:
Input: nums = [10,1,2,4,7,2], limit = 5
Output: 4
Explanation: The subarray [2,4,7,2] is the longest because the maximum absolute difference is |2-7| = 5 <= 5.


Example 3:
Input: nums = [4,2,2,2,4,4,2,2], limit = 0
Output: 3

constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`0 <= limit <= 109`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m * n"" matrix, ""mat"", and an integer ""k"", its rows are sorted in non-decreasing order.

You can choose exactly 1 element from each row to form an array. Returns the Kth smallest array sum among all possible arrays.


Example 1:
Input: mat = [[1,3,11],[2,4,6]], k = 5
Output: 7
Explanation: Select an element from each row, and the top k smallest sums are:
[1,2], [1,4], [3,2], [3,4], [1,6]. The 5th sums to 7.

Example 2:
Input: mat = [[1,3,11],[2,4,6]], k = 9
Output: 17

Example 3:
Input: mat = [[1,10,10],[1,4,5],[2,3,6]], k = 7
Output: 9
Explanation: Select an element from each row, and the top k smallest sums are:
[1,1,2], [1,1,3], [1,4,2], [1,4,3], [1,1,6], [1,5,2], [1 ,5,3]. Where the 7th sums to 9.

Example 4:
Input: mat = [[1,1,10],[2,2,9]], k = 7
Output: 12

constraint:
`m == mat.length`
`n == mat. length[i]`
`1 <= meters, n <= 40`
`1 <= k <= min(200, n^m)`
`1 <= pad[i][j] <= 5000`
`mat[i]` is a non-decreasing array.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""target"" and an integer ""n"". In each iteration, you will read a number from `list = {1,2,3..., n}`.

Build the ""target"" array with the following operations:
Push: Read a new element from the beginning of the list and push it into the array.

Pop: Deletes the last element of the array.

Stop reading more elements if the destination array has already been constructed.

Returns the operation that builds the target array. You guarantee that the answer is unique.


Example 1:
Input: target = [1,3], n = 3
output: [""push"", ""push"", ""pop"", ""push""]
explain:
read number 1 and automatically push into array -> [1]
Read the number 2 and automatically push it into the array and then pop it -> [1]
Read the number 3 and automatically push into the array -> [1,3]

Example 2:
Input: target = [1,2,3], n = 3
output: [""push"", ""push"", ""push""]

Example 3:
Input: target = [1,2], n = 4
output: [""push"", ""push""]
Explanation: You just need to read the first 2 numbers and stop.


Example 4:
Input: target = [2,3,4], n = 4
Output: [""Push"",""Pop"",""Push"",""Push"",""Push""]

constraint:
`1 <= target.length <= 100`
`1 <= target[i] <= n`
`1 <= n <= 100`
`target` is strictly increasing.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected tree consisting of ""n"" vertices numbered ""0"" to ""n-1"" with some apples among its vertices. It takes you 1 second to walk across an edge of the tree. Returns the minimum time in seconds required to collect all apples from the tree starting at vertex 0 and returning to that vertex.

The edges of the undirected tree are given in the array edges, where edges[i] = [ai, bi] indicates that there is an edge connecting vertices ai and bi. Additionally, there is a boolean array `hasApple`, where `hasApple[i] = true` means that vertex `i` has an apple; otherwise, it does not have any apples.


Example 1:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false , false, true, false, true, true, false]
Output: 8
Explanation: The above graph represents the given tree where the red vertex has an apple. The green arrows show the best path to collect all apples.

Example 2:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false ,false,true,false,false,true,false]
Output: 6
Explanation: The above graph represents the given tree where the red vertex has an apple. The green arrows show the best path to collect all apples.

Example 3:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], hasApple = [false , false, false, false, false, false, false]
output: 0

constraint:
`1 <= n <= 10^5`
`edges. length == n - 1`
`edge[i].length == 2`
`0 <= ai < bi <= n - 1`
`fromi < toi`
`hasApple.length == n`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a rectangular pizza, represented as a ""row x column"" matrix containing the following characters: ""A"" (an apple) and ""."" (an empty cell), and given an integer ""k"". You have to use a ""k-1"" knife to cut the pizza into ""k"" pieces.
For each cut, you choose the direction: vertical or horizontal, then you choose a cut position on the cell border and cut the pizza into two pieces. If you cut the pizza vertically, give the left side of the pizza to one person. If you cut the pizza crosswise, give the top half of the pizza to one person. Give the last slice of pizza to the last person.

Returns the number of ways to slice the pizza such that each slice contains at least one apple. Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: pizza = [""A.."",""AAA"",""...""], k = 3
Output: 3
Instructions: The image above shows three ways to slice a pizza. Note that each entry must contain at least one apple.


Example 2:
Input: pizza = [""A.."",""AA."",""...""], k = 3
Output: 1

Example 3:
Input: pizza = [""A.."",""A.."",""...""], k = 1
Output: 1

constraint:
`1 <= rows, columns <= 50`
`rows == pizza. length`
`cols == pizza[i].length`
`1 <= k <= 10`
`pizza` consists only of the characters `'A'` and `'.'.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, the power of this string is the maximum length of a non-empty substring containing only one unique character.

Returns the power of a string.


Example 1:
Input: s = ""leetcode""
Output: 2
Explanation: The substring ""ee"" has length 2 and only has the character ""e"".


Example 2:
Input: s = ""abbcccddddeeeeeedcba""
Output: 5
Explanation: The substring ""eeeee"" has length 5 and only has the character ""e"".


Example 3:
Input: s = ""triplepilloooooow""
Output: 5

Example 4:
Input: s = ""hooraaaaaaaaaaay""
Output: 11

Example 5:
Input: s = ""Visitor""
Output: 1

constraint:
`1 <= s.length <= 500`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return a list of all reduced fractions between 0 and 1 (exclusive) such that the denominator is less than or equal to ""n"". Scores can be in any order.


Example 1:
Input: n = 2
Output: [""1/2""]
Explanation: ""1/2"" is the only fraction with a denominator less than or equal to 2.


Example 2:
Input: n = 3
Output: [""1/2"",""1/3"",""2/3""]

Example 3:
Input: n = 4
Output: [""1/2"",""1/3"",""1/4"",""2/3"",""3/4""]
Explanation: ""2/4"" is not a simplified fraction because it can be simplified to ""1/2"".


Example 4:
Input: n = 1
output: []

constraint:
`1 <= n <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree ""root"", a node X in the tree is named good if there is no node with a value greater than X in the path from the root to X.

Returns the number of good nodes in the binary tree.


Example 1:
Input: root = [3,1,4,3,null,1,5]
Output: 4
Explanation: Blue nodes are good.

The root node (3) is always a good node.

Node 4 -> (3,4) is the maximum value in the path from the root.

Node 5 -> (3,4,5) is the maximum value in the path
Node 3 -> (3,1,3) is the maximum value in the path.


Example 2:
Input: root = [3,3,null,4,2]
Output: 3
Explanation: Node 2 -> (3, 3, 2) is bad because ""3"" is higher than it.


Example 3:
input: root = [1]
Output: 1
Explanation: Roots are considered good.


constraint:
The number of nodes in a binary tree is in the range ""[1, 10^5]"".

The value of each node is between ""[-10^4, 10^4]"".",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""cost"" and an integer ""target"". Returns the largest integer you can plot according to the following rules:
The cost of drawing a number (i+1) is given by ""cost[i]"" (0 indexed).

The total cost used must be equal to ""Target"".

Integers have no digit 0.

Since the answer may be too large, it is returned as a string.

Returns '0' if no integer can be drawn under the given conditions.


Example 1:
Input: Cost = [4,3,2,5,6,7,2,5,5], Target = 9
Output: ""7772""
Explanation: The cost of drawing the number ""7"" is 2, while the number ""2"" is 3. Then cost(""7772"") = 2*3+ 3*1 = 9. You can also draw ""977"", but ""7772"" is the largest number.

digital cost
  1 -> 4
  2 -> 3
  3 -> 2
  4 -> 5
  5 -> 6
  6 -> 7
  7 -> 2
  8 -> 5
  9 -> 5

Example 2:
Input: Cost = [7,6,5,5,5,6,8,7,8], Target = 12
Output: ""85""
Explanation: The cost of drawing the number '8' is 7, and the number '5' is 5. Then cost(""85"") = 7 + 5 = 12.


Example 3:
Input: Cost = [2,4,6,2,4,6,4,4,4], Target = 5
Output: ""0""
Explanation: It is not possible to plot any integer whose total cost is equal to the target.


Example 4:
Input: Cost = [6,10,15,40,40,40,40,40,40], Target = 47
Output: ""32211""

constraint:
`cost. length == 9`
`1 <= cost[i] <= 5000`
`1 <= target <= 5000`",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a sentence ""text"" of the following format (a sentence is a string of words separated by spaces):
Capitalize the first letter.

Each word in `text` is separated by a space.

Your task is to rearrange the words in the text so that all words are rearranged in order of increasing length. If two words are of the same length, they are placed in the original order.

Returns the new text in the format shown above.


Example 1:
Input: text = ""Leetcode is cool""
Output: ""cool leetcode""
Explanation: There are 3 words, ""Leetcode"" of length 8, ""is"" of length 2 and ""cool"" of length 4.

The output is sorted by length, with new first words starting with a capital letter.

Example 2:
Input: text = ""keep calm and keep coding""
Output: ""Open and keep calm code""
Explanation: The output sequence is as follows:
""Up"" 2 letters.

""and"" 3 letters.

""Reserve"" 4 letters in case of sorting by position in the original text.

""Calm"" 4 letters.

""Code"" 4 letters.


Example 3:
Input: text = ""to be or not to be""
Output: ""Yes or No""

constraint:
`text` begins with an uppercase letter, then contains lowercase letters and single spaces between words.

`1 <= text.length <= 10^5`",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `favoriteCompanies`, where `favoriteCompanies[i]` is a list of the ith person's favorite companies (indexed from 0).

Returns an index of persons whose favorite business list is not a subset of any other favorite business list. You must return the indices in increasing order.


Example 1:
Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""google"",""microsoft""],[""google"",""facebook""],[""google""],[""amazon""] ]
Output: [0,1,4]
explain:
People with index=2 have favoriteCompanies[2]=[""google"",""facebook""] which is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] corresponding to index 0 people.
People with index=3 have favoriteCompanies[3]=[""google""] which is favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] and favoriteCompanies[1]=[""google"",""microsoft ""].
The list of other favorite companies is not a subset of the other list, so the answer is [0,1,4].


Example 2:
Input: favoriteCompanies = [[""leetcode"",""google"",""facebook""],[""leetcode"",""amazon""],[""facebook"",""google""]]
output: [0,1]
Explanation: In this case, favoriteCompanies[2]=[""facebook"",""google""] is a subset of favoriteCompanies[0]=[""leetcode"",""google"",""facebook""] so the answer is [0 , 1].


Example 3:
Input: favoriteCompanies = [[""leetcode""],[""google""],[""facebook""],[""amazon""]]
Output: [0,1,2,3]

constraint:
`1 <= favoriteCompanies.length <= 100`
`1 <= favoriteCompanies[i].length <= 500`
`1 <= favoriteCompanies[i][j].length <= 20`
All strings in `favoriteCompanies[i]` are distinct.

All favorite companies lists are distinct, that is, if we sort each list alphabetically, ""favoriteCompanies[i] != favoriteCompanies[j]"".
All strings consist of lowercase English letters only.",0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a very large square wall and a round dartboard placed on the wall. You are asked to throw darts into the board blindfolded. A dart thrown at a wall is represented as an array of ""points"" on a 2D plane.
Returns the maximum number of points within or on any circular dartboard of radius ""r"".


Example 1:
Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 2
Output: 4
Explanation: A dartboard with center at (0,0) and radius = 2 contains all points.


Example 2:
Input: points = [[-3,0],[3,0],[2,6],[5,4],[0,9],[7,8]], r = 5
Output: 5
Explanation: A circular dart with center (0,4) and radius = 5 contains all points except point (7,8).


Example 3:
Input: points = [[-2,0],[2,0],[0,2],[0,-2]], r = 1
Output: 1

Example 4:
Input: points = [[1,2],[3,5],[1,-1],[2,3],[4,1],[1,3]], r = 2
Output: 4

constraint:
`1 <= points. length <= 100`
`points[i].length == 2`
`-10^4 <= point[i][0], point[i][1] <= 10^4`
`1 <= r <= 5000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""sentence"" consisting of words separated by a single space and a ""searchWord"".

You have to check if `searchWord` is a prefix of any word in `sentence`.

Returns the index of the word in `sentence`, where `searchWord` is the prefix of the word (1-based indexing).

If `searchWord` is a prefix of multiple words, return the index of the first word (the smallest index). Returns -1 if there is no such word.

The string ""S"" is prefixed with any leading consecutive substrings of ""S"".


Example 1:
Input: sentence = ""i love eating burger"", searchWord = ""burg""
Output: 4
Explanation: ""burg"" is a prefix of the 4th word ""burger"" in the sentence.


Example 2:
Input: sentence = ""this problem is an easy problem"", searchWord = ""pro""
Output: 2
Explanation: ""pro"" is a prefix of the 2nd and 6th word ""problem"" in the sentence, but we return 2 because it is the smallest index.


Example 3:
Input: sentence = ""i am tired"", searchWord = ""you""
Output: -1
Explanation: ""you"" is not a prefix of any word in the sentence.


Example 4:
Input: sentence = ""i use triple pillow"", searchWord = ""pill""
Output: 4

Example 5:
Input: sentence = ""hello from the other side"", searchWord = ""they""
Output: -1

constraint:
`1 <= sentence.length <= 100`
`1 <= searchWord.length <= 10`
`sentence` consists of lowercase English letters and spaces.

`searchWord` consists of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and an integer k.

Returns the maximum number of vowels in any substring of ""s"" of length ""k"".

The vowels in English are (a, e, i, o, u).


Example 1:
Input: s = ""abciiidef"", k = 3
Output: 3
Explanation: The substring ""iii"" contains 3 vowels.


Example 2:
Input: s = ""aeiou"", k = 2
Output: 2
Explanation: Any substring of length 2 contains 2 vowels.


Example 3:
Input: s = ""leetcode"", k = 3
Output: 2
Explanation: ""lee"", ""eet"" and ""ode"" contain 2 vowels.


Example 4:
Input: s = ""rhythm"", k = 4
output: 0
Explanation: We can see that s does not have any vowels.


Example 5:
Input: s = ""tryhard"", k = 4
Output: 1

constraint:
`1 <= s.length <= 10^5`
`s` consists of lowercase English letters.

`1 <= k <= s.length`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree where node values ​​are numbers from 1 to 9. A path in a binary tree is said to be a pseudo-palindrome if at least one permutation of node values ​​in the path is a palindrome.

Returns the number of pseudo-palindromic paths from the root node to the leaf nodes.


Example 1:
Input: root = [2,3,1,3,1,null,1]
Output: 2
Explanation: The above figure represents the given binary tree. There are 3 paths from root node to leaf node: red path [2,3,3], green path [2,1,1] and path [2,3,1]. Among these paths, only the red path and the green path are pseudo-palindromic paths, because the red path [2,3,3] can be rearranged (palindromic) in [3,2,3], and the green path [2,1 ,1] can be rearranged in [1,2,1] (palindrome).


Example 2:
Input: root = [2,1,1,1,3,null,null,null,null,null,1]
Output: 1
Explanation: The above figure represents the given binary tree. There are 3 paths from root node to leaf node: green path[2,1,1], path[2,1,3,1] and path[2,1]. Of these paths, only the green path is a pseudo-palindromic path, since [2,1,1] can be rearranged (palindromic) in [1,2,1].


Example 3:
Input: root = [9]
Output: 1

constraint:
The number of nodes in the tree is in the range '[1, 105]'.

`1 <= Node.val <= 9`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays `nums1` and `nums2`.

Returns the maximum dot product between non-empty subsequences of nums1 and nums2 with the same length.

A subsequence of an array is a new array formed from the original array by removing some (optional) characters, without disturbing the relative positions of the remaining characters. (ie, ""[2,3,5]"" is a subsequence of ""[1,2,3,4,5]"", while ""[1,5,3]"" is not).


Example 1:
Input: nums1 = [2,1,-2,5], nums2 = [3,0,-6]
Output: 18
Explanation: Take the subsequence [2,-2] from nums1 and take the subsequence [3,-6] from nums2.

Their dot product is (2*3 + (-2)*(-6)) = 18.


Example 2:
Input: nums1 = [3,-2], nums2 = [2,-6,7]
Output: 21
Explanation: Take subsequence [3] from nums1 and subsequence [7] from nums2.

Their dot product is (3*7) = 21.


Example 3:
Input: nums1 = [-1,-1], nums2 = [1,1]
Output: -1
Explanation: Take subsequence [-1] from nums1 and subsequence [1] from nums2.

Their dot product is -1.


constraint:
`1 <= nums1.length, nums2.length <= 500`
`-1000 <= nums1[i], nums2[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays ""target"" and ""arr"" of equal length.

In one step, you can select any non-empty subarray of arr and invert it. You can do any number of steps.

Return True if arr can be made equal to target, otherwise return False.


Example 1:
Input: target = [1,2,3,4], arr = [2,4,1,3]
output: true
Explanation: You can convert arr to target as follows:
1- Invert subarray [2,4,1], arr becomes [1,4,2,3]
2- Invert the subarray [4,2], arr becomes [1,2,4,3]
3- Invert subarray [4,3], arr becomes [1,2,3,4]
There are multiple ways to convert arr to target, it's not the only way.


Example 2:
Input: target = [7], arr = [7]
output: true
Explanation: arr is equal to target, without any inversion.


Example 3:
Input: target = [1,12], arr = [12,1]
output: true

Example 4:
Input: target = [3,7,9], arr = [3,7,11]
output: error
Explanation: arr has no value 9, it can never be converted to target.


Example 5:
Input: target = [1,1,1,1,1], arr = [1,1,1,1,1]
output: true

constraint:
`target.length == arr.length`
`1 <= target.length <= 1000`
`1 <= target[i] <= 1000`
`1 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string ""s"" and an integer ""k"".

Returns `true` if every binary code of length `k` is a substring of `s`. Otherwise, return ""false"".


Example 1:
Input: s = ""00110110"", k = 2
output: true
Explanation: The binary codes with a length of 2 are ""00"", ""01"", ""10"", and ""11"". They can all be found as substrings at indices 0, 1, 3, and 2, respectively.


Example 2:
Input: s = ""00110"", k = 2
output: true

Example 3:
Input: s = ""0110"", k = 1
output: true
Explanation: The binary codes with a length of 1 are ""0"" and ""1"", which obviously exist as substrings.

Example 4:
Input: s = ""0110"", k = 2
output: error
Explanation: The binary code ""00"" has a length of 2 and does not exist in the array.


Example 5:
Input: s = ""0000000001011100"", k = 4
output: error

constraint:
`1 <= s.length <= 5 * 105`
`s[i]` is either `'0'` or `'1'`.

`1 <= k <= 20`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a total of n courses to study, labeled from 0 to n-1.

Some courses may have immediate prerequisites, for example, to take course 0, you must first take course 1, represented as a pair: `[1,0]`
Given a total number of courses ""n"", a list of immediate ""prerequisite"" pairs, and a list of ""query"" pairs.

You should answer for each queries[i] whether class queries[i][0] is a prerequisite of class queries[i][1] .

Returns a list of boolean values, the answers to the given ""query"".

Note that if course a is a prerequisite for course b, and course b is a prerequisite for course c, then course a is a prerequisite for course c.


Example 1:
Input: n = 2, Preconditions = [[1,0]], Query = [[0,1],[1,0]]
output: [false, true]
Explanation: Course 0 is not a prerequisite for Course 1 and vice versa.


Example 2:
Input: n = 2, Preconditions = [], Query = [[1,0],[0,1]]
output: [false, false]
Instructions: There are no prerequisites and each course is self-contained.


Example 3:
Input: n = 3, Preconditions = [[1,2],[1,0],[2,0]], Query = [[1,0],[1,2]]
output: [true,true]

Example 4:
Input: n = 3, Preconditions = [[1,0],[2,0]], Query = [[0,1],[2,0]]
output: [false, true]

Example 5:
Input: n = 5, Preconditions = [[0,1], [1,2], [2,3], [3,4]], Query = [[0,4], [4,0], [ 1,3],[3,0]]
Output: [true, false, true, false]

constraint:
`2 <= n <= 100`
`0 <= prerequisite. length <= (n * (n - 1) / 2)`
`0 <= preconditions[i][0], preconditions[i][1] < n`
`preconditions[i][0] != preconditions[i][1]`
The prerequisite graph has no cycles.

Prerequisite graph has no repeated edges.

`1 <= queries.length <= 10^4`
`query[i][0] != query[i][1]`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""row x column"" matrix ""grid"" representing a field of cherries. Each cell in `grid` represents the number of cherries you can collect.

You have two bots that collect cherries for you, bot #1 is at the top left corner of the grid at (0,0) and bot #2 is at the top right corner of the grid at (0, cols-1) .

Returns the maximum number of cherries collected with two robots according to the following rules:
Starting at cell (i,j), the robot can move to cells (i+1, j-1), (i+1, j) or (i+1, j+1).

When any robot passes by a cell, it picks up all the cherries and the cell becomes an empty cell (0).

When both robots stayed in the same cell, only one robot took the cherry.

Neither robot can move out of the grid at any time.

Both robots should reach the bottom row in the ""grid"".


Example 1:
Input: grid = [[3,1,1],[2,5,1],[1,5,5],[2,1,1]]
Output: 24
Explanation: The paths of #1 and #2 robots are depicted in green and blue, respectively.

Cherries picked by robot #1, (3 + 2 + 5 + 2) = 12.

Cherries picked by robot #2, (1 + 5 + 5 + 1) = 12.

Total number of cherries: 12 + 12 = 24.


Example 2:
Input: Grid = [[1,0,0,0,0,0,1],[2,0,0,0,0,3,0],[2,0,9,0,0,0 , 0],[0,3,0,5,4,0,0],[1,0,2,3,0,0,6]]
Output: 28
Explanation: The paths of #1 and #2 robots are depicted in green and blue, respectively.

Cherries picked by robot #1, (1 + 9 + 5 + 2) = 17.

Cherries picked by robot #2, (1 + 3 + 4 + 3) = 11.

Total number of cherries: 17 + 11 = 28.


Example 3:
Input: grid = [[1,0,0,3],[0,0,0,3],[0,0,3,3],[9,0,3,3]]
Output: 22

Example 4:
Input: Grid = [[1,1],[1,1]]
Output: 4

constraint:
`rows == grid.length`
`cols == grid[i].length`
`2 <= rows, columns <= 70`
`0 <= grid[i][j] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of integers ""nums"", you will choose two different indices ""i"" and ""j"" of that array. Returns the maximum value of `(nums[i]-1)*(nums[j]-1)`.


Example 1:
Input: nums = [3,4,5,2]
Output: 12
Explanation: If you choose index i=1 and j=2 (indexing from 0), you will get the maximum value, i.e. (nums[1]-1)*(nums[2]-1) = (4 -1)* (5-1) = 3*4 = 12.

Example 2:
Input: nums = [1,5,4,5]
output: 16
Explanation: Choose indices i=1 and j=3 (0-based indexing), you will get the maximum value of (5-1)*(5-1) = 16.


Example 3:
Input: nums = [3,7]
Output: 12

constraint:
`2 <= nums.length <= 500`
`1 <= nums[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a rectangular cake with height ""h"" and width ""w"", and two integer arrays ""horizontalCuts"" and ""verticalCuts"", where ""horizontalCuts[i]"" is the top to bottom of the rectangular cake Distance of the ith horizontal plane Similarly, `verticalCuts[j]` is the distance from the left side of the rectangular cake to the jth vertical cut.

Returns the maximum area of ​​a piece of cake after cutting at each horizontal and vertical position provided in the arrays ""horizontalCuts"" and ""verticalCuts"". Since the answer can be a huge number, return this modulo 10^9 + 7.


Example 1:
Input: h = 5, w = 4, horizontalCuts = [1,2,4], verticalCuts = [1,3]
Output: 4
Explanation: The picture above represents the given rectangular cake. Red lines are horizontal and vertical cuts. After cutting the cake, the green cake has the largest area.


Example 2:
Input: h = 5, w = 4, horizontalCuts = [3,1], verticalCuts = [1]
Output: 6
Explanation: The picture above represents the given rectangular cake. Red lines are horizontal and vertical cuts. After cutting the cake, the green and yellow cake pieces have the largest area.


Example 3:
Input: h = 5, w = 4, horizontalCuts = [3], verticalCuts = [3]
Output: 9

constraint:
`2 <= h, w <= 10^9`
`1 <= horizontalCuts.length < min(h, 10^5)`
`1 <= verticalCuts.length < min(w, 10^5)`
`1 <= horizontalCuts[i] < h`
`1 <= verticalCuts[i] < w`
All elements in horizontalCuts are guaranteed to be distinct.

All elements in ""verticalCuts"" are guaranteed to be distinct.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities numbered from `0` to `n-1` and `n-1` roads such that there is only one way of travel between two different cities (this network forms a tree). Last year, the Department of Transportation decided to orient the roads in one direction because they were too narrow.

Roads are represented by ""connections"", where ""connections[i] = [a, b]"" represents a road from city ""a"" to ""b"".

This year, a big event happened in the capital (city 0), and many people want to travel to this city.

Your task consists of redirecting some roads so that every city can visit city 0. Returns the minimum number of edges changed.

It is guaranteed that each city can reach city 0 after reordering.


Example 1:
Input: n = 6, number of connections = [[0,1],[1,3],[2,3],[4,0],[4,5]]
Output: 3
Explanation: Reorient the edges shown in red so that every node reaches node 0 (the capital).


Example 2:
Input: n = 5, number of connections = [[1,0],[1,2],[3,2],[3,4]]
Output: 2
Explanation: Reorient the edges shown in red so that every node reaches node 0 (the capital).


Example 3:
Input: n = 3, number of connections = [[1,0],[2,0]]
output: 0

constraint:
`2 <= n <= 5 * 10^4`
`connections. length == n-1`
`connection[i].length == 2`
`0 <= connections[i][0], connections[i][1] <= n-1`
`connection[i][0] != connection[i][1]`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In a binary tree, a lonely node is the only child of its parent. The root of the tree is not alone, as it has no parent.

Given the ""root"" of a binary tree, return an array containing the values ​​of all orphan nodes in the tree. Return the list in any order.


Example 1:
Input: root = [1,2,3,null,4]
output: [4]
Explanation: The light blue node is the only lonely node.

Node 1 is the root and is not alone.

Nodes 2 and 3 have the same parent and are not alone.


Example 2:
Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2]
Output: [6,2]
Explanation: Light blue nodes are lonely nodes.

Remember the order doesn't matter, [2,6] is also an accepted answer.


Example 3:
Input: root = [11,99,88,77,null,null,66,55,null,null,44,33,null,null,22]
Output: [77,55,33,66,44,22]
Explanation: Nodes 99 and 88 share the same parent node. Node 11 is the root.

All other nodes are lonely.


Example 4:
Input: root = [197]
output: []

Example 5:
Input: root = [31,null,78,null,28]
Output: [78,28]

constraint:
The number of nodes in the ""tree"" is in the range ""[1, 1000]"".
The value of each node is between ""[1, 10^6]"".",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The given array nums consists of 2n elements in the form `[x1,x2,...,xn,y1,y2,...,yn]`.

Returns an array in the form '[x1,y1,x2,y2,...,xn,yn]'.


Example 1:
Input: nums = [2,5,1,3,4,7], n = 3
Output: [2,3,5,4,1,7]
Explanation: Since x1=2, x2=5, x3=1, y1=3, y2=4, y3=7 then the answer is [2,3,5,4,1,7].


Example 2:
Input: nums = [1,2,3,4,4,3,2,1], n = 4
Output: [1,4,2,3,3,2,4,1]

Example 3:
Input: nums = [1,1,2,2], n = 2
Output: [1,2,1,2]

constraint:
`1 <= n <= 500`
`nums.length == 2n`
`1 <= nums[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" and an integer ""k"".

A value arr[i] is considered stronger than an arr[j] if `|arr[i] - m| > |arr[j] - m|` where `m` is the median value of the array.

If `|arr[i] - m| == |arr[j] - m|`, arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].

Returns a list of the strongest 'k' values ​​in the array. Return answers in any order.

The median is the middle value in an ordered list of integers. More formally, if the list is of length n, the median is the element at position ""((n - 1) / 2)"" in the sorted list (indexed from 0).

For ""arr = [6, -3, 7, 2, 11]"", ""n = 5"", the median is obtained by combining the array ""arr = [-3, 2, 6, 7, 11]"" and the median The number is ""arr[m]"", where ""m = ((5 - 1) / 2) = 2"". The median is ""6"".

For arr = [-7, 22, 17, 3], n = 4 and the median is obtained by sorting the array arr = [-7, 3, 17, 22], the median is arr [m]` where `m = ((4 - 1) / 2) = 1`. The median is ""3"".


Example 1:
Input: arr = [1,2,3,4,5], k = 2
Output: [5,1]
Explanation: The median is 3, and the elements of the array are sorted by the strongest [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also the accepted answer.

Note that although |5 - 3| == |1 - 3|, 5 is stronger than 1 because 5 > 1.


Example 2:
Input: arr = [1,1,3,5,5], k = 2
Output: [5,5]
Explanation: The median is 3, and the elements of the array are sorted by the strongest [5,5,1,1,3]. The strongest 2 elements are [5, 5].


Example 3:
Input: arr = [6,7,11,7,6,8], k = 5
Output: [11,8,6,6,7]
Explanation: The median is 7, and the elements of the array are sorted by the strongest [11,8,6,6,7,7].

Any permutation of [11,8,6,6,7] is accepted.


Example 4:
Input: arr = [6,-3,7,2,11], k = 3
Output: [-3,11,2]

Example 5:
Input: arr = [-7,22,17,3], k = 2
Output: [22,17]

constraint:
`1 <= arr.length <= 10^5`
`-10^5 <= arr[i] <= 10^5`
`1 <= k <= arr.length`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a tabbed browser, and from the ""home page"" you can visit another ""url"", go back to the history of ""steps"" or move forward through the history of ""steps"".

Implement the ""BrowserHistory"" class:
`BrowserHistory(string homepage)` initializes the object with the browser's `homepage`.

`void visit(string url)` Visit `url` from current page. It clears all retweet history.

`string back(int steps)` moves `steps` back into history. If you can only go back `x` steps in history and `steps > x`, you will only go back `x` steps. Returns the current `url` after at most `steps` of history.

`string forward(int steps)` moves forward steps in history. If you can only forward `x` steps in history and `steps > x`, you will only forward `x` steps. Returns the current url after at most steps history forwarding.


example:
enter:
[""BrowserHistory"",""visit"",""visit"",""visit"",""back"",""back"",""forward"",""visit"",""forward"",""back"",""back""]
[[""leetcode.com""],[""google.com""],[""facebook.com""],[""youtube.com""],[1],[1],[1],[""linkedin.com"" ""],[2],[2],[7]]
output:
[null,null,null,null,""facebook.com"",""google.com"",""facebook.com"",null,""linkedin.com"",""google.com"",""leetcode.com""]
explain:
BrowserHistory browserHistory = new BrowserHistory(""leetcode.com"");
browserHistory.visit(""google.com""); // You are in ""leetcode.com"". Visit ""google.com""
browserHistory.visit(""facebook.com""); // You are in ""google.com"". Visit ""facebook.com""
browserHistory.visit(""youtube.com""); // You are in ""facebook.com"". Visit ""youtube.com""
browserHistory.back(1); // You are at ""youtube.com"", back to ""facebook.com"" returns ""facebook.com""
browserHistory.back(1); // You are at ""facebook.com"", back to ""google.com"" returns ""google.com""
browserHistory.forward(1); // You are at ""google.com"", forward to ""facebook.com"" Return to ""facebook.com""
browserHistory.visit(""linkedin.com""); // You are in ""facebook.com"". Visit ""linkedin.com""
browserHistory.forward(2); // You are in ""linkedin.com"", you cannot forward any steps.

browserHistory.back(2); // You are in ""linkedin.com"", move back two steps to ""facebook.com"" and then to ""google.com"". returns ""google.com""
browserHistory.back(7); // You are on ""google.com"", you can only go back one step to ""leetcode.com"". return ""leetcode.com""

constraint:
`1 <= homepage.length <= 20`
`1 <= url.length <= 20`
`1 <= steps <= 100`
`homepage` and `url` consist of '.' or lowercase English letters.

At most `5000` calls to `visit`, `back` and `forward` will be made.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A small city has a row of `m` houses, each of which must be painted in one of `n` colors (labeled from `1` to `n`), some houses painted last summer should not be painted again painted

A neighborhood is the largest contiguous group of houses painted the same color.

For example: `houses = [1,2,2,3,3,2,1,1]` contains `5` blocks` [{1}, {2,2}, {3,3}, {2} , {1,1}]`.

Given an array ""houses"", an ""m x n"" matrix ""cost"" and an integer ""target"" where:
`houses[i]`: is the color of house `i`, or `0` if the house has not been painted.

`cost[i][j]`: is the cost of painting house `i` with `j + 1` color.

Return the minimum cost to paint all remaining houses in such a way that the ""target"" block exists at all. Returns ""-1"" if not possible.


Example 1:
Input: house = [0,0,0,0,0], cost = [[1,10], [10,1], [10,1], [1,10], [5,1]], m = 5, n = 2, target = 3
Output: 9
Explanation: Paint the house this way [1,2,2,1,1]
The array contains target = 3 neighborhoods, [{1}, {2,2}, {1,1}].

The cost of painting all houses is (1 + 1 + 1 + 1 + 5) = 9.


Example 2:
Input: house = [0,2,1,2,0], cost = [[1,10],[10,1],[10,1],[1,10],[5,1]], m = 5, n = 2, target = 3
Output: 11
Explanation: some houses have been painted, paint the house in this way [2,2,1,2,2]
The array contains target = 3 neighborhoods, [{2,2}, {1}, {2,2}].
The cost of painting the first and last house is (10 + 1) = 11.


Example 3:
Input: house = [0,0,0,0,0], cost = [[1,10], [10,1], [1,10], [10,1], [1,10]], m = 5, n = 2, target = 5
Output: 5

Example 4:
Input: house = [3,1,2,3], cost = [[1,1,1],[1,1,1],[1,1,1],[1,1,1]], m = 4, n = 3, target = 3
Output: -1
Explanation: The house has painted a total of 4 different blocks [{3},{1},{2},{3}], target = 3.


constraint:
`m == houses. length == cost. length`
`n == cost[i].length`
`1 <= meters <= 100`
`1 <= n <= 20`
`1 <= target <= m`
`0 <= house[i] <= n`
`1 <= cost[i][j] <= 10^4`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a linked list and two integers ""m"" and ""n"". Traverse the linked list and delete some nodes by:
Start with head as the current node.

Keep the first `m` nodes starting from the current node.

remove the next `n` nodes
Repeat steps 2 and 3 until you reach the end of the list.

Returns the head of the modification list after removing the mentioned node.

Follow up question: How can I fix this by modifying the list in-place?

Example 1:
Input: head = [1,2,3,4,5,6,7,8,9,10,11,12,13], m = 2, n = 3
Output: [1,2,6,7,11,12]
Explanation: Keep the first (m = 2) nodes from the head of the linked list (1 -> 2) shown as black nodes.

Delete the next (n = 3) nodes (3 -> 4 -> 5) shown in Read Nodes.

Continue the same process until you reach the end of the linked list.

Returns the head of the linked list after deleting the node.


Example 2:
Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 1, n = 3
Output: [1,5,9]
Description: Return the head of the linked list after deleting the node.


Example 3:
Input: head = [1,2,3,4,5,6,7,8,9,10,11], m = 3, n = 1
Output: [1,2,3,5,6,7,9,10,11]

Example 4:
Input: head = [9,3,7,7,9,10,8,2], m = 1, n = 2
Output: [9,7,8]

constraint:
The given linked list will contain nodes between ""1"" and ""10^4"".

The value of each node in the linked list will be in the range [1, 10^6] .

`1 <= m,n <= 1000`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `prices`, where `prices[i]` are the prices of `ith` items in the store. Items in the store have special discounts, if you buy the `ith`th item, then you will get a discount equivalent to `prices[j]`, where `j` is the smallest index satisfying `j > i` and `prices [j] <= prices[i]`, otherwise, you won't get any discount at all.

Returns an array where the `ith` element is the final price you will pay for the `ith` item in the store, taking into account the special discount.


Example 1:
Input: Price = [8,4,6,2,3]
Output: [4,2,4,2,3]
explain:
For item 0 at price[0]=8, you will get a discount equivalent to price[1]=4, so the final price you will pay is 8 - 4 = 4.
For item 1 at price[1]=4, you will get a discount equivalent to price[3]=2, so the final price you will pay is 4 - 2 = 2.
For item 2 at price[2]=6, you will get a discount equal to price[3]=2, so the final price you will pay is 6 - 2 = 4.
For items 3 and 4, you will not receive any discount.


Example 2:
Input: Price = [1,2,3,4,5]
Output: [1,2,3,4,5]
Explanation: In this case, you will not receive any discount for all items.


Example 3:
Input: Price = [10,1,1,6]
Output: [9,0,1,6]

constraint:
`1 <= prices.length <= 500`
`1 <= price[i] <= 10^3`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implements the class `SurectangleQueries`, which receives a `rows x cols` rectangle as an integer matrix in the constructor, and supports two methods:
1. `updateSubrectangle(int row1, int col1, int row2, int col2, int newValue)`
Update all values ​​with newValue in the sub-rectangle whose upper-left coordinates are (row1,col1) and lower-right coordinates are (row2,col2).

2. `getValue(int row, int col)`
Returns the current value of the coordinates ""(row,col)"" from the rectangle.


Example 1:
enter
[""SubrectangleQueries"",""getValue"",""updateSubrectangle"",""getValue"",""getValue"",""updateSubrectangle"",""getValue"",""getValue""]
[[[[1,2,1],[4,3,4],[3,2,1],[1,1,1]]],[0,2],[0,0,3, 2,5],[0,2],[3,1],[3,0,3,2,10],[3,1],[0,2]]
output
[empty,1,empty,5,5,empty,10,5]
explain
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,2,1],[4,3,4],[3,2,1],[1,1,1]]);
// The initial rectangle (4x3) looks like this:
// 1 2 1
// 4 3 4
// 3 2 1
// 1 1 1
subrectangleQueries.getValue(0, 2); // returns 1
subrectangleQueries. updateSubrectangle(0, 0, 3, 2, 5);
// The updated rectangle looks like this:
// 5 5 5
// 5 5 5
// 5 5 5
// 5 5 5
subrectangleQueries.getValue(0, 2); // returns 5
subrectangleQueries.getValue(3, 1); // returns 5
subrectangleQueries. updateSubrectangle(3, 0, 3, 2, 10);
// The updated rectangle looks like this:
// 5 5 5
// 5 5 5
// 5 5 5
// 10 10 10
subrectangleQueries.getValue(3, 1); // returns 10
subrectangleQueries.getValue(0, 2); // returns 5

Example 2:
enter
[""SubrectangleQueries"",""getValue"",""updateSubrectangle"",""getValue"",""getValue"",""updateSubrectangle"",""getValue""]
[[[[1,1,1],[2,2,2],[3,3,3]]],[0,0],[0,0,2,2,100],[0,0] ,[2,2],[1,1,2,2,20],[2,2]]
output
[null,1,null,100,100,null,20]
explain
SubrectangleQueries subrectangleQueries = new SubrectangleQueries([[1,1,1],[2,2,2],[3,3,3]]);
subrectangleQueries.getValue(0, 0); // returns 1
subrectangleQueries. updateSubrectangle(0, 0, 2, 2, 100);
subrectangleQueries.getValue(0, 0); // returns 100
subrectangleQueries.getValue(2, 2); // returns 100
subrectangleQueries. updateSubrectangle(1, 1, 2, 2, 20);
subrectangleQueries.getValue(2, 2); // returns 20

constraint:
There will be up to 500 operations considering these two methods: `updateSubrectangle` and `getValue`.

`1 <= rows, columns <= 100`
`rows == rectangle.length`
`cols == rectangle[i].length`
`0 <= row1 <= row2 < rows`
`0 <= col1 <= col2 < cols`
`1 <= newValue, rectangle[i][j] <= 10^9`
`0 <= rows < rows`
`0 <= col < cols`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" and an integer ""target"".

You must find two non-overlapping subarrays of arr that sum to `target`. There may be more than one answer, so you have to find the answer that has the smallest sum of lengths of the two subarrays.

Returns the minimum of the sum of the lengths of the two desired subarrays, or -1 if no such two subarrays are found.


Example 1:
Input: arr = [3,2,2,4,3], target = 3
Output: 2
Explanation: The sum of only two subarrays = 3 ([3] and [3]). The sum of their lengths is 2.


Example 2:
Input: arr = [7,3,4,7], target = 7
Output: 2
Explanation: Although we have three non-overlapping subarrays sum = 7 ([7], [3,4] and [7]), we will choose the first and third subarrays because the sum of their lengths is 2.


Example 3:
Input: arr = [4,3,2,6,2,3,4], target = 6
Output: -1
Explanation: We have only one subarray with sum = 6.


Example 4:
Input: arr = [5,5,4,4,5], target = 3
Output: -1
Explanation: We cannot find a subarray with sum = 3.


Example 5:
Input: arr = [3,1,1,1,5,1,2,1], target = 3
Output: 3
Explanation: Note that the subarrays [1,2] and [2,1] cannot be the answer because they overlap.


constraint:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 1000`
`1 <= target <= 10^8`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""houses"" and an integer ""k"". where `houses[i]` is the location of the i-th house on the street, and your task is to assign `k` mailboxes on the street.

Returns the minimum total distance between each house and its nearest mailbox.

The answer is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: houses = [1,4,8,10,20], k = 3
Output: 5
Explanation: Mailboxes are allocated at positions 3, 9, and 20.

The minimum total distance from each house to the nearest mailbox is |3-1| + |4-3| + |9-8| + |10-9| + |20-20| = 5

Example 2:
Input: houses = [2,3,5,12,18], k = 2
Output: 9
Explanation: Mailboxes are allocated at positions 3 and 14.

The minimum total distance from each house to the nearest mailbox is |2-3| + |3-3| + |5-3| + |12-14| + |18-14| = 9.


Example 3:
Input: House = [7,4,6​​,1], k = 1
Output: 8

Example 4:
Input: houses = [3,6,14,10], k = 4
output: 0

constraint:
`n == houses. length`
`1 <= n <= 100`
`1 <= house[i] <= 10^4`
`1 <= k <= n`
The array ""houses"" contains unique integers.",0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array nums. We define the running sum of an array as ""runningSum[i] = sum(nums[0]...nums[i])"".

Return the running sum of `nums`.


Example 1:
Input: nums = [1,2,3,4]
Output: [1,3,6,10]
Explanation: Running the sum gives the following: [1, 1+2, 1+2+3, 1+2+3+4].


Example 2:
Input: nums = [1,1,1,1,1]
Output: [1,2,3,4,5]
Explanation: Running the sum gives the following: [1, 1+1, 1+1+1, 1+1+1+1, 1+1+1+1+1].


Example 3:
Input: nums = [3,1,2,10,1]
Output: [3,4,6,16,17]

constraint:
`1 <= nums.length <= 1000`
`-10^6 <= nums[i] <= 10^6`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" and an integer ""k"". Find the fewest number of unique integers after removing exactly `k` elements.


Example 1:
Input: arr = [5,5,4], k = 1
Output: 1
Explanation: Remove the single 4, leaving only the 5.


Example 2:
Input: arr = [4,3,1,1,3,3,2], k = 3
Output: 2
Explanation: Removes 4, 2 and one of two 1s or three 3s. will leave 1 and 3.


constraint:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^9`
`0 <= k <= arr.length`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""bloomDay"", an integer ""m"" and an integer ""k"".

We need to make `m` bouquets. To make a bouquet, you need to use ""k"" adjacent flowers from your garden.

The garden consists of `n` flowers, `ith` flowers will bloom on `bloomDay[i]`, which can then be used in a bouquet.

Returns the minimum number of days you need to wait before making ""m"" bouquets from the garden. Returns -1 if it is impossible to make `m` bouquets.


Example 1:
Input: bloomDay = [1,10,3,10,2], m = 3, k = 1
Output: 3
Explanation: Let's see what happened in the first three days. x means the flower is open and _ means there is no flower in the garden.

We need 3 bouquets, each bouquet should contain 1 flower.

After day 1: [x, _, _, _, _] // We can only make one bunch.

After day 2: [x, _, _, _, x] // We can only make two bouquets.

After day 3: [x, _, x, _, x] // We can make 3 bouquets. The answer is 3.


Example 2:
Input: bloomDay = [1,10,3,10,2], m = 3, k = 2
Output: -1
Explanation: We need 3 bouquets, each bouquet has 2 flowers, which means we need 6 flowers. We only have 5 flowers, so it is impossible to get the desired bouquet, we return -1.


Example 3:
Input: bloomDay = [7,7,7,7,12,7,7], m = 2, k = 3
Output: 12
Explanation: We need 2 bouquets, each bouquet should have 3 flowers.

Here's the garden after 7 and 12 days:
After day 7: [x, x, x, x, _, x, x]
We can make a bouquet from the first three flowers to bloom. We cannot use the three most recent blooms to make another bouquet because they are not adjacent.

After day 12: [x, x, x, x, x, x, x]
Obviously, we can make two bouquets in different ways.


Example 4:
Input: bloomDay = [1000000000,1000000000], m = 1, k = 1
Output: 1000000000
Explanation: You need to wait 1000000000 days for a flower to be ready for a bouquet.


Example 5:
Input: bloomDay = [1,10,2,9,3,8,4,7,5,6], m = 4, k = 2
Output: 9

constraint:
`bloomDay. length == n`
`1 <= n <= 10^5`
`1 <= bloomDay[i] <= 10^9`
`1 <= m <= 10^6`
`1 <= k <= n`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a tree with `n` nodes numbered from `0` to `n-1` in the form of an array of parents, where `parent[i]` is the parent of node `i`. The root of the tree is node ""0"".

Implement the function getKthAncestor(int node, int k) to return the kth ancestor of a given node. Returns ""-1"" if there is no such ancestor.

The kth ancestor of a tree node is the kth node in the path from that node to the root.


example:
enter:
[""TreeAncestor"", ""getKthAncestor"", ""getKthAncestor"", ""getKthAncestor""]
[[7,[-1,0,0,1,1,2,2]],[3,1],[5,2],[6,3]]
output:
[null,1,0,-1]
explain:
TreeAncestor treeAncestor = new TreeAncestor(7, [-1, 0, 0, 1, 1, 2, 2]);
treeAncestor.getKthAncestor(3, 1); // returns 1, which is the parent of 3
treeAncestor.getKthAncestor(5, 2); // returns 0, which is the grandparent of 5
treeAncestor.getKthAncestor(6, 3); // returns -1 because there is no such ancestor

constraint:
`1 <= k <= n <= 5*10^4`
`parent[0] == -1` means that `0` is the root node.

`0 <= parent[i] < n` for all `0 < i < n`
`0 <= nodes < n`
There will be at most `5*10^4` queries.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree such that each node contains an additional random pointer which can point to any node in the tree or null.

Return a deep copy of the tree.

The tree is represented in the same input/output fashion as a normal binary tree, where each node is represented as a pair ""[val, random_index]"", where:
`val`: Integer representing `Node.val`
`random_index`: The index of the node (in the input) pointed to by the random pointer, or `null` if it does not point to any node.

You will get tree in class `Node` and you should return cloned tree in class `NodeCopy`. The `NodeCopy` class is just a clone of the `Node` class with the same properties and constructor.


Example 1:
Input: root = [[1,null],null,[4,3],[7,0]]
Output: [[1,null],null,[4,3],[7,0]]
Explanation: The original binary tree is [1, null, 4, 7].

The random pointer of node one is empty, so it is expressed as [1, null].

The random pointer for node 4 is node 7, so it is represented as [4, 3] where 3 is the index of node 7 in the array representing the tree.

The random pointer for node 7 is node 1, so it is represented as [7, 0], where 0 is the index of node 1 in the array representing the tree.


Example 2:
Input: root = [[1,4],null,[1,0],null,[1,5],[1,5]]
Output: [[1,4],null,[1,0],null,[1,5],[1,5]]
Explanation: A node's random pointer can be the node itself.


Example 3:
Input: root = [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]
Output: [[1,6],[2,5],[3,4],[4,3],[5,2],[6,1],[7,0]]

Example 4:
input: root = []
output: []

Example 5:
Input: root = [[1,null],null,[2,null],null,[1,null]]
Output: [[1,null],null,[2,null],null,[1,null]]

constraint:
The number of nodes in the ""tree"" is in the range ""[0, 1000]"".
The value of each node is between ""[1, 10^6]"".",0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"" and an integer ""start"".

Define an array `nums` where `nums[i] = start + 2*i` (0-indexed) and `n == nums.length`.

Returns the bitwise exclusive-or of all elements of `nums`.


Example 1:
Input: n = 5, start = 0
Output: 8
Explanation: The array nums is equal to [0, 2, 4, 6, 8], where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.

where ""^"" corresponds to the bitwise XOR operator.


Example 2:
Input: n = 4, start = 3
Output: 8
Explanation: The array nums is equal to [3, 5, 7, 9], where (3 ^ 5 ^ 7 ^ 9) = 8.


Example 3:
Input: n = 1, start = 7
Output: 7

Example 4:
Input: n = 10, start = 5
Output: 2

constraint:
`1 <= n <= 1000`
`0 <= start <= 1000`
`n == nums. length`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string array ""names"" of size ""n"". You will create ""n"" number of folders in the filesystem, so that at ""ith"" minute a folder named ""names[i]"" will be created.

Since two files cannot have the same name, if you enter a previously used folder name, the system will add the suffix `(k)` to the name, where `k` is the smallest positive integer obtained in this way Names are still unique.

Returns an array of strings of length `n`, where `ans[i]` is the actual name the system assigned to the `ith` folder when you created the folder.


Example 1:
Input: names = [""pes"",""fifa"",""gta"",""pes(2019)""]
Output: [""pes"",""fifa"",""gta"",""pes(2019)""]
Explanation: Let's see how the file system creates folder names:
""pes"" --> no previous assignment, still ""pes""
""fifa"" --> not assigned before, still ""fifa""
""gta"" --> was not assigned before, still ""gta""
""pes(2019)"" --> No assignment before, still ""pes(2019)""

Example 2:
Input: names = [""gta"",""gta(1)"",""gta"",""avalon""]
Output: [""gta"",""gta(1)"",""gta(2)"",""avalon""]
Explanation: Let's see how the file system creates folder names:
""gta"" --> was not assigned before, still ""gta""
""gta(1)"" --> was not assigned before, still ""gta(1)""
""gta"" --> This name is reserved, the system adds (k), because ""gta(1)"" is also reserved, the system sets k = 2. It becomes ""gta(2)""
""avalon"" --> no assignment before, still ""avalon""

Example 3:
Input: names = [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece""]
Output: [""onepiece"",""onepiece(1)"",""onepiece(2)"",""onepiece(3)"",""onepiece(4)""]
Explanation: When creating the last folder, the minimum positive and effective k is 4, which becomes ""onepiece(4)"".


Example 4:
Input: name = [""wano"",""wano"",""wano"",""wano""]
Output: [""wano"", ""wano(1)"", ""wano(2)"", ""wano(3)""]
Explanation: Just increase the value of k each time the folder ""wano"" is created.


Example 5:
Input: names = [""kaido"",""kaido(1)"",""kaido"",""kaido(1)""]
output: [""kaido"", ""kaido(1)"", ""kaido(2)"", ""kaido(1)(1)""]
Explanation: Note that the system adds the suffix (k) to the current name even though it previously contained the same suffix.


constraint:
`1 <= names.length <= 5 * 10^4`
`1 <= name[i].length <= 20`
`names[i]` consists of lowercase English letters, numbers and/or parentheses.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are countless lakes in your country. Initially, all lakes are empty, but when it rains on the nth lake, the nth lake is filled with water. If it rains on a lake full of water, a flood will occur. Your goal is to avoid any lakes from flooding.

Given an integer array ""rains"" where:
`rains[i] > 0` means that lake `rains[i]` will rain.

`rains[i] == 0` means that there is no rain on this day, you can choose a lake on this day and dry it.

Returns an array ans where:
`ans.length == rains.length`
`ans[i] == -1` if `rains[i] > 0`.

If rains[i] == 0 , ans[i] is the lake you choose to dry up on ith day.

If there are multiple valid answers, any one of them is returned. Returns an empty array if flooding cannot be avoided.

Note that if you choose to dry a full lake, it becomes empty, but if you choose to dry an empty lake, nothing changes. (see example 4)

Example 1:
Input: rain = [1,2,3,4]
Output: [-1,-1,-1,-1]
Explanation: After the first day the lake is full of [1]
After the second day, the full lake is [1,2]
After the third day, the full lake is [1,2,3]
After the fourth day, the full lake is [1,2,3,4]
No lake ever runs dry for a day, no lake ever floods.


Example 2:
Input: Rain = [1,2,0,0,2,1]
Output: [-1,-1,2,1,-1,-1]
Explanation: After the first day the lake is full of [1]
After the second day, the full lake is [1,2]
After the third day, we dried up 2 lakes. The lake is full of [1]
After the fourth day, we dried up 1 lake. The lake is not full.

After the fifth day, the lake is full [2].

After the sixth day, the full lake is [1,2].

This situation is easy without flooding. [-1,-1,1,2,-1,-1] is another acceptable scenario.


Example 3:
Input: rain = [1,2,0,1,2]
output: []
Explanation: After the second day, the full lake is [1,2]. On the third day, we will dry a lake.

Afterwards, the lake will rain [1,2]. It is easy to prove that whichever lake you choose dries up on day 3, the other lake will flood.


Example 4:
Input: Rain = [69,0,0,0,69]
Output: [-1,69,1,1,-1]
Explanation: Any solution of the form [-1,69,x,y,-1], [-1,x,69,y,-1], or [-1,x,y,69,-1] in 1 <= x,y <= 10^9 is acceptable

Example 5:
Input: rain = [10,20,20]
output: []
Explanation: Lake 20 will rain for two days in a row. No chance of drying up any lakes.


constraint:
`1 <= rains.length <= 105`
`0 <= rain[i] <= 109`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a weighted undirected connected graph, where ""n"" vertices are numbered from ""0"" to ""n - 1"", and an array ""edges"", where ""edges[i] = [ai, bi, weighti]"" represents Bidirectionally weighted edges are between nodes ""ai"" and ""bi"". A minimum spanning tree (MST) is a subset of edges of a graph that connects all vertices without cycles and has the smallest possible total edge weight.

Finds all critical and pseudo-critical edges in the minimum spanning tree (MST) of a given graph. MST edges whose removal from the graph causes the MST weight to increase are called critical edges. On the other hand, pseudocritical edges can appear in some but not all MSTs.

Note that you can return the indices of the edges in any order.


Example 1:
Input: n = 5, edges = [[0,1,1],[1,2,1],[2,3,2],[0,3,2],[0,4,3],[ 3,4,3],[1,4,6]]
Output: [[0,1],[2,3,4,5]]
Explanation: The figure above describes the graph.

The following figure shows all possible MSTs:
Note that the two edges 0 and 1 appear in all MSTs, so they are critical edges, so we return them in the first list of the output.

Edges 2, 3, 4, and 5 are only part of some MST, so they are considered pseudocritical edges. We add them to the second list in the output.


Example 2:
Input: n = 4, sides = [[0,1,1],[1,2,1],[2,3,1],[0,3,1]]
Output: [[],[0,1,2,3]]
Explanation: We can observe that since all 4 edges have the same weight, choosing any 3 edges from the given 4 edges will result in MST. All 4 edges are therefore pseudocritical.


constraint:
`2 <= n <= 100`
`1 <= edges.length <= min(200, n * (n - 1) / 2)`
`edge[i].length == 3`
`0 <= ai < bi < n`
`1 <= weight <= 1000`
All pairs `(ai, bi)` are distinct.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of an N-ary tree, return a deep copy (clone) of that tree.

Each node in an n-ary tree contains a val (`int`) and a list of its children (`List[Node]`).

class node {
    public integer value;
    public list <node> children;
}
Nary-Tree input serialization representations are traversed in their level order, with each set of children separated by a null value (see example).

Follow up: Does your solution solve the graphics problem?

Example 1:
Input: root = [1,null,3,2,4,null,5,6]
Output: [1,null,3,2,4,null,5,6]

Example 2:
Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null ,empty,14]
Output: [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null ,14]

constraint:
The depth of the n-ary tree is less than or equal to '1000'.

The total number of nodes is between ""[0, 10^4]"".",0,0,0,0,1,1,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of unique integers ""salary"", where ""salary[i]"" is the salary of employee ""i"".

Returns the average salary of employees, excluding minimum and maximum salaries.


Example 1:
Input: Salary = [4000,3000,1000,2000]
Output: 2500.00000
Explanation: The minimum wage and maximum wage are 1000 and 4000 respectively.

Average salary excluding minimum and maximum salary is (2000+3000)/2= 2500

Example 2:
Input: Salary = [1000,2000,3000]
Output: 2000.00000
Explanation: The minimum wage and maximum wage are 1000 and 3000 respectively.

Average salary excluding minimum and maximum salary is (2000)/1= 2000

Example 3:
Input: salary=[6000,5000,4000,3000,2000,1000]
Output: 3500.00000

Example 4:
Input: salary=[8000,9000,2000,3000,6000,1000]
Output: 4750.00000

constraint:
`3 <= salary.length <= 100`
`10^3 <= salary[i] <= 10^6`
`salary[i]` is unique.

Answers within 10^-5 of the actual value will be considered correct.",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two positive integers ""n"" and ""k"".

A factor of an integer ""n"" is defined as an integer ""i"" where ""n % i == 0"".

Consider a list of all factors of n sorted in ascending order, return the kth factor in this list, or -1 if n has fewer than k factors.


Example 1:
Input: n = 12, k = 3
Output: 3
Explanation: The list of factors is [1, 2, 3, 4, 6, 12] and the 3rd factor is 3.


Example 2:
Input: n = 7, k = 2
Output: 7
Explanation: The list of factors is [1, 7] and the second factor is 7.


Example 3:
Input: n = 4, k = 4
Output: -1
Explanation: The list of factors is [1, 2, 4] with only 3 factors. We should return -1.


Example 4:
Input: n = 1, k = 1
Output: 1
Explanation: The list of factors is [1] and the first factor is 1.


Example 5:
Input: n = 1000, k = 3
Output: 4
Explanation: The list of factors is [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000].


constraint:
`1 <= k <= n <= 1000`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary array `nums`, you should remove an element from it.

Returns the size of the longest non-empty subarray containing only 1s in the resulting array.

Returns 0 if there is no such subarray.


Example 1:
Input: nums = [1,1,0,1]
Output: 3
Explanation: After deleting the number at position 2, there are 3 numbers with a value of 1 in [1,1,1].


Example 2:
Input: nums = [0,1,1,1,0,1,1,0,1]
Output: 5
Explanation: After deleting the number at position 4, the longest subarray with a value of 1 in [0,1,1,1,1,1,0,1] is [1,1,1,1,1].


Example 3:
Input: nums = [1,1,1]
Output: 2
Explanation: You must delete an element.


Example 4:
Input: nums = [1,1,0,0,1,1,1,0,1]
Output: 4

Example 5:
Input: nums = [0,0,0]
output: 0

constraint:
`1 <= nums.length <= 10^5`
`nums[i]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer n representing the number of courses marked from 1 to n in a certain university, the array dependencies where dependencies[i] = [xi, yi] represents the prerequisite relationship, that is, course `xi` must be studied before course `yi`. Also, you get the integer ""k"".

In a semester, you may take up to ""k"" courses as long as you have completed all prerequisites for the course you are taking.

Returns the minimum number of semesters in which all courses are taken. You are guaranteed to learn all the lessons in one way or another.


Example 1:
Input: n = 4, dependencies = [[2,1],[3,1],[1,4]], k = 2
Output: 3
Explanation: The above graph represents the given graph. In this case, we can take course 2 and course 3 in the first semester, then take course 1 in the second semester, and finally take course 4 in the third semester.


Example 2:
Input: n = 5, dependencies = [[2,1],[3,1],[4,1],[1,5]], k = 2
Output: 4
Explanation: The above graph represents the given graph. In this case, the best way to take all courses is to take courses 2 and 3 in the first semester, take course 4 in the second semester, then take course 1 in the third semester, and finally take course 5 in the fourth semester.


Example 3:
Input: n = 11, dependencies = [], k = 2
Output: 6

constraint:
`1 <= n <= 15`
`1 <= k <= n`
`0 <= dependencies.length <= n * (n-1) / 2`
`dependencies[i].length == 2`
`1 <= xi, yi <= n`
`xi != yi`
All prerequisite relationships are distinct, i.e. ""dependencies[i] != dependencies[j]"".

The given graph is a directed acyclic graph.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string path where path[i] = 'N' , 'S' , 'E' , or ''W' , each represents movement one unit north, south, east, or west, respectively. You start at the origin ""(0, 0)"" on the 2D plane and walk along the path specified by ""Path"".

Returns ""True"" if the path intersects itself at any point, i.e. if you are at any point in a location you have visited before. Otherwise return ""False"".


Example 1:
Input: path = ""NES""
output: error
Explanation: Note that the path does not pass through any point more than once.


Example 2:
Input: path = ""NESWW""
output: true
Explanation: Note that the path visits the origin twice.


constraint:
`1 <= path.length <= 10^4`
`path` will only contain characters in `{'N', 'S', 'E', 'W}`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr of length even n and an integer k.

We want to divide the array into exactly `n / 2` pairs such that the sum of each pair is divisible by `k`.

Return True if you can find a method, False otherwise.


Example 1:
Input: arr = [1,2,3,4,5,10,6,7,8,9], k = 5
output: true
Explanation: The pairs are (1,9), (2,8), (3,7), (4,6) and (5,10).


Example 2:
Input: arr = [1,2,3,4,5,6], k = 7
output: true
Explanation: The pairs are (1,6), (2,5) and (3,4).


Example 3:
Input: arr = [1,2,3,4,5,6], k = 10
output: error
Explanation: You can try all possible pairs and find that arr cannot be divided into 3 pairs whose sum is divisible by 10.


Example 4:
Input: arr = [-10,10], k = 2
output: true

Example 5:
Input: arr = [-1,1,-2,2,-3,3,-4,4], k = 3
output: true

constraint:
`arr.length == n`
`1 <= n <= 105`
`n` is an even number.

`-109 <= arr[i] <= 109`
`1 <= k <= 105`",1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""target"".

Returns the number of non-empty subsequences of `nums` such that the sum of the smallest and largest elements on it is less than or equal to `target`. Since the answer might be too large, return it modulo 109 + 7.


Example 1:
Input: nums = [3,5,6,7], target = 9
Output: 4
Explanation: There are 4 subsequences that satisfy the condition.

[3] -> min + max <= target (3 + 3 <= 9)
[3,5] -> (3 + 5 <= 9)
[3,5,6] -> (3 + 6 <= 9)
[3,6] -> (3 + 6 <= 9)

Example 2:
Input: nums = [3,3,6,8], target = 10
Output: 6
Explanation: There are 6 subsequences that satisfy the condition. (nums can have repeated numbers).

[3] , [3] , [3,3], [3,6] , [3,6] , [3,3,6]

Example 3:
Input: nums = [2,3,3,4,6,7], target = 12
Output: 61
Explanation: There are 63 non-empty subsequences, two of which do not satisfy the condition ([6,7], [7]).

Number of valid subsequences (63 - 2 = 61).


Example 4:
Input: nums = [5,2,4,1,7,6,8], target = 16
Output: 127
Explanation: All non-empty subsets satisfy the condition (2^7 - 1) = 127

constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 106`
`1 <= target <= 106`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""points"" containing coordinates of points on a two-dimensional plane, sorted by x-value, where ""points[i] = [xi, yi]"" such that ""xi < xj"" < j for all ""1 <= i"" <= points. length`. You also get an integer ""k"".

Find the maximum of the equation `yi + yj + |xi - xj|`, where `|xi - xj| <= k` and 1 <= i < j <= points.length`. It is guaranteed that there exists at least one pair of points satisfying the constraint `|xi - xj| <= k`.


Example 1:
Input: points = [[1,3],[2,0],[5,10],[6,-10]], k = 1
Output: 4
Explanation: The first two points satisfy the condition |xi - xj| <= 1 If we calculate the equation, we get 3 + 0 + |1 - 2| = 4. The third and fourth points also satisfy the condition, giving the value is 10 + -10 + |5 - 6| = 1.

No other pair satisfies the condition, so we return the maximum of 4 and 1.


Example 2:
Input: points = [[0,0],[3,0],[9,2]], k = 3
Output: 3
Explanation: Only the first two points have an absolute difference of x-values ​​less than or equal to 3, and give a value of 0 + 0 + |0 - 3| = 3.


constraint:
`2 <= points.length <= 10^5`
`points[i].length == 2`
`-10^8 <= point[i][0], point[i][1] <= 10^8`
`0 <= k <= 2 * 10^8`
`points[i][0] < points[j][0]` for all `1 <= i < j <= points.length`
`xi` forms a strictly increasing sequence.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We will use a file sharing system to share a very large file consisting of `m` small chunks with IDs from `1` to `m`.

When a user joins the system, the system should assign them a unique ID. The unique ID should be used once for each user, but can be used again when the user leaves the system.

A user can request a block of a file, and the system should return a list of IDs of all users who own that block. If the user receives a non-empty list of IDs, they will successfully receive the requested block.

Implement the `FileSharing` class:
`FileSharing(int m)` initializes an object with a file containing `m` chunks.

`int join(int[] ownedChunks)`: A new user joins the system and owns some chunks of the file, the system should assign the user an id which is the smallest positive integer not occupied by any other user. Returns the assigned id.

`void leave(int userID)`: The user with `userID` will leave the system, you can no longer take file blocks from them.

`int[] request(int userID, int chunkID)`: User `userID` requested a chunk with `chunkID`. Returns a list of IDs of all users who own this block, sorted in ascending order.

follow up:
What happens if the system identifies users by their IP address instead of their unique ID, and the user disconnects and connects from the system using the same IP?
Will your solution still work if users in the system frequently join and leave the system without requesting any blocks?
Will your solution still work if each user joins the system once, requests all files and leaves?
If the system will be used to share `n` files where the `ith` files consist of `m[i]`, what changes do you need to make?

example:
enter:
[""fileshare"", ""join"", ""join"", ""join"", ""request"", ""request"", ""leave"", ""request"", ""leave"", ""join""]
[[4],[[1,2]],[[2,3]],[[4]],[1,3],[2,2],[1],[2,1],[ 2],[[]]]
output:
[null,1,2,3,[2],[1,2],null,[],null,1]
explain:
File Sharing fileSharing = new fileSharing(4); // We use the system to share a 4-block file.

fileSharing.join([1, 2]); // A user with chunks [1,2] joined the system, assign them id = 1 and return 1.

fileSharing.join([2, 3]); // A user with chunks [2,3] joined the system, assign them id = 2 and return 2.

fileshare.join([4]); // A user with chunk[4] joined the system, assign them id = 3 and return 3.

FileShareRequest(1, 3); // user with id = 1 requested the third file block, since only user with id = 2 owns the file, return [2] . Note that user 1 now has blocks [1,2,3].

FileShareRequest(2, 2); // user with id = 2 requested the second file block, user with id [1,2] has this block, so we return [1,2].

fileshare.leave(1); // user with id = 1 has left the system, all file blocks are no longer available to other users.

FileShareRequest(2, 1); // user with id = 2 requested the first file chunk, no one in the system has this chunk, we return empty list[].

fileshare.leave(2); // User with id = 2 has left the system.

fileshare.join([]); // A user without any chunk joins the system, assign them id = 1 and return 1. Note that id 1 and 2 are free, we can reuse them.


constraint:
`1 <= m <= 10^5`
`0 <= ownedChunks.length <= min(100, m)`
`1 <= ownedChunks[i] <= m`
The value of `ownedChunks` is unique.

`1 <= chunkID <= m`
If you assign IDs correctly, you are guaranteed that `userID` is a user in the system.
Will call join, leave and request up to 10^4 times.

Every call to leave will have a matching call to join.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a numeric array arr . If the difference between any two consecutive elements is the same, it is called an arithmetic progression.

Returns ""true"" if the array can be rearranged to form an arithmetic progression, otherwise returns ""false"".


Example 1:
Input: arr = [3,5,1]
output: true
Explanation: We can reorder the elements as [1,3,5] or [5,3,1] with the difference between each successive element being 2 and -2 respectively.


Example 2:
Input: arr = [1,2,4]
output: error
Explanation: Arithmetic series cannot be obtained by reordering elements.


constraint:
`2 <= arr.length <= 1000`
`-10^6 <= arr[i] <= 10^6`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have a board of length ""n"" units. A number of ants are walking on a wooden board, each moving at a speed of 1 unit per second. Some ants move to the left, others to the right.

When two ants moving in two different directions meet at a certain point, they change direction and continue moving again. Assume that changing direction doesn't take any extra time.

When an ant reaches one end of the plank at time ""t"", it immediately falls off the plank.

Given an integer `n` and two integer arrays `left` and `right`, the position of the ant to move left and right. Returns the moment when the last ant fell off the board.


Example 1:
Input: n = 4, left = [4,3], right = [0,1]
Output: 4
Explanation: In the image above:
- The ant at index 0 is named A and moves to the right.

- The ant with index 1 is named B and walks to the right.

- The ant at index 3 is named C and moves left.

- The ant at index 4 is named D and moves left.

Note that the last moment the ant was on the board was t = 4 seconds, after which it immediately fell off the board. (i.e. we can say that at t = 4.0000000001 there are no ants on the board).


Example 2:
Input: n = 7, left = [], right = [0,1,2,3,4,5,6,7]
Output: 7
Explanation: All ants go to the right, and the ant with index 0 takes 7 seconds to descend.


Example 3:
Input: n = 7, left = [0,1,2,3,4,5,6,7], right = []
Output: 7
Explanation: All ants go left, and the ant with index 7 takes 7 seconds to fall.


Example 4:
Input: n = 9, left = [5], right = [4]
Output: 5
Explanation: At t = 1 second, the two ants will be in the same initial position, but in different directions.


Example 5:
Input: n = 6, left = [6], right = [0]
Output: 6

constraint:
`1 <= n <= 10^4`
`0 <= left.length <= n + 1`
`0 <= left[i] <= n`
`0 <= right.length <= n + 1`
`0 <= right[i] <= n`
`1 <= left.length + right.length <= n + 1`
All values ​​for `left` and `right` are unique, and each value can only appear in one of the two arrays.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""rows by columns"" matrix ""mat"" of 1s and 0s, return how many submatrices are all 1s.


Example 1:
Input: mat = [[1,0,1],
              [1,1,0],
              [1,1,0]]
Output: 13
explain:
There are 6 rectangles of side length 1x1.

There are 2 rectangles with side length 1x2.

There are 3 rectangles with side length 2x1.

There is 1 rectangle with side length 2x2.
There is 1 rectangle with side length 3x1.

Total number of rectangles = 6 + 2 + 3 + 1 + 1 = 13.


Example 2:
Input: mat = [[0,1,1,0],
              [0,1,1,1],
              [1,1,1,0]]
Output: 24
explain:
There are 8 rectangles of side length 1x1.

There are 5 rectangles of side length 1x2.

There are 2 rectangles with side length 1x3.
There are 4 rectangles of side length 2x1.

There are 2 rectangles with side length 2x2.
There are 2 rectangles with side length 3x1.
There is 1 rectangle with side length 3x2.
Total number of rectangles = 8 + 5 + 2 + 4 + 2 + 2 + 1 = 24.


Example 3:
Input: mat = [[1,1,1,1,1,1]]
Output: 21

Example 4:
Input: mat = [[1,0,1],[0,1,0],[1,0,1]]
Output: 5

constraint:
`1 <= rows <= 150`
`1 <= columns <= 150`
`0 <= pad[i][j] <= 1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string num representing a number of very large integers and an integer k.

You can swap any two adjacent digits of an integer up to `k` times.

Returns the smallest integer you can get also as a string.


Example 1:
Input: num = ""4321"", k = 4
Output: ""1342""
Explanation: Shows the steps to get the smallest integer from 4321 and 4 adjacent exchanges.


Example 2:
Input: num = ""100"", k = 1
Output: ""010""
Explanation: It is okay for the output to have leading zeros, but the input is guaranteed not to have any leading zeros.


Example 3:
Input: num = ""36789"", k = 1000
Output: ""36789""
Explanation: We can keep the numbers without doing any swaps.


Example 4:
Input: num = ""22"", k = 22
Output: ""22""

Example 5:
Input: num = ""9438957234785635408"", k = 23
Output: ""0345989723478563548""

constraint:
`1 <= num.length <= 30000`
`num` contains only numbers, without leading zeros.

`1 <= k <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""date"" string in the format ""Day Month Year"" where:
`Day` is in the set `{""1st"", ""2nd"", ""3rd"", ""4th"", ..., ""30th"", ""31st""}`.

`Month` in the collection `{""Jan"", ""Feb"", ""Mar"", ""Apr"", ""May"", ""Jun"", ""Jul"", ""Aug"", ""Sep"", ""Oct"", ""October month"", ""December""}`.

`Year` is in the range `[1900, 2100]`.

Convert a date string to ""YYYY-MM-DD"" format, where:
`YYYY` represents a 4-digit year.

`MM` means 2-digit month.

`DD` represents a 2-digit date.


Example 1:
Input: date = ""October 20, 2052""
Output: ""2052-10-20""

Example 2:
Input: Date = ""June 6, 1933""
Output: ""1933-06-06""

Example 3:
Input: date = ""May 26, 1960""
Output: ""1960-05-26""

constraint:
The given date is guaranteed to be valid, so no error handling is required.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array nums consisting of n positive integers. You calculated the sum of all non-empty contiguous subarrays in the array, then sorted them in non-decreasing order, creating a new array containing `n * (n + 1) / 2` numbers.

Returns the sum of the numbers from index ""left"" to index ""right"" (1-based indexing) in the new array. Since the answer can be a huge number, it is returned modulo 10^9 + 7.


Example 1:
Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13
Explanation: The sum of all subarrays is 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting in non-descending order, we get the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13.

Example 2:
Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.


Example 3:
Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50

constraint:
`1 <= nums.length <= 10^3`
`nums. length == n`
`1 <= nums[i] <= 100`
`1 <= left <= right <= n * (n + 1) / 2`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums`, you can select one element of `nums` and change it to any value at a time.

After performing at most 3 moves, return the smallest difference between the maximum and minimum values ​​of `nums`.


Example 1:
Input: nums = [5,3,2,4]
output: 0
Explanation: Change the array [5,3,2,4] to [2,2,2,2].

The difference between the maximum and minimum values ​​is 2-2 = 0.


Example 2:
Input: nums = [1,5,0,10,14]
Output: 1
Explanation: Change the array [1,5,0,10,14] to [1,1,0,1,1].
The difference between the maximum and minimum values ​​is 1-0 = 1.


Example 3:
Input: nums = [6,6,0,1,1,4,6]
Output: 2

Example 4:
Input: nums = [1,5,6,14,15]
Output: 1

constraint:
`1 <= nums.length <= 10^5`
`-10^9 <= nums[i] <= 10^9`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing the game, with Alice starting first.

Initially, there are n stones in a pile. On each player's turn, that player makes a move, consisting of removing any non-zero square number of stones in the pile.

Also, if a player fails to take an action, he/she will lose the game.

Given a positive integer ""n"". Returns ""True"" if and only if Alice wins the game, otherwise returns ""False"", assuming both players played best.


Example 1:
Input: n = 1
output: true
Explanation: Alice can win the game by removing 1 pawn because Bob has no moves.


Example 2:
Input: n = 2
output: error
Explanation: Alice can only remove 1 stone, after that Bob removes the last stone that wins the game (2 -> 1 -> 0).


Example 3:
Input: n = 4
output: true
Explanation: n is already a perfect square, Alice can win in one move, removing 4 stones (4 -> 0).


Example 4:
Input: n = 7
output: error
Explanation: Alice cannot win the game if Bob plays the optimal strategy.

If Alice starts removing 4 stones, Bob will remove 1 stone, then Alice should remove only 1 stone, and finally Bob removes the last stone (7 -> 3 -> 2 -> 1 -> 0).
If Alice starts removing 1 stone, Bob will remove 4 stones, then Alice can only remove 1 stone, and finally Bob removes the last stone (7 -> 6 -> 2 -> 1 -> 0).


Example 5:
Input: n = 17
output: error
Explanation: Alice cannot win the game if Bob plays the optimal strategy.


constraint:
`1 <= n <= 10^5`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums`.

A pair `(i,j)` is said to be good if `nums[i]` == `nums[j]` and `i` < `j`.

Returns the number of good pairs.


Example 1:
Input: nums = [1,2,3,1,1,3]
Output: 4
Explanation: There are 4 good pairs (0,3), (0,4), (3,4), (2,5) 0-indexed.


Example 2:
Input: nums = [1,1,1,1]
Output: 6
Explanation: Every pair in the array is good.


Example 3:
Input: nums = [1,2,3]
output: 0

constraint:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string s (a string consisting only of ""0""s and ""1s"").

Returns the number of substrings in which all characters are 1.

Since the answer might be too large, return it modulo 10^9 + 7.


Example 1:
Input: s = ""0110111""
Output: 9
Explanation: There are 9 substrings in total, only 1 character.

""1"" -> 5 times.

""11"" -> 3 times.

""111"" -> 1 time.


Example 2:
Input: s = ""101""
Output: 2
Explanation: The substring ""1"" occurs 2 times in s.


Example 3:
Input: s = ""111111""
Output: 21
Explanation: Each substring contains only 1 characters.


Example 4:
Input: s = ""000""
output: 0

constraint:
`s[i] == '0'` or `s[i] == '1'`
`1 <= s.length <= 10^5`",0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected weighted graph containing `n` nodes (indexed from 0), represented by a list of edges, where `edges[i] = [a, b]` is the edge connecting nodes `a` and `b` An undirected edge has the probability succProb[i] of successfully traversing the edge.

Given two nodes ""start"" and ""end"", find the path from ""start"" to ""end"" with the highest probability of success and return its probability of success.

Returns 0 if there is no path from start to end. Your answer will be accepted if it is within at most 1e-5 of the correct answer.


Example 1:
Input: n = 3, edges = [[0,1],[1,2],[0,2]], succProb = [0.5,0.5,0.2], start = 0, end = 2
Output: 0.25000
Explanation: There are two paths from start to finish, one with probability of success = 0.2 and another with probability of success of 0.5 * 0.5 = 0.25.


Example 2:
Input: n = 3, edges = [[0,1], [1,2], [0,2]], succProb = [0.5,0.5,0.3], start = 0, end = 2
Output: 0.30000

Example 3:
Input: n = 3, edges = [[0,1]], succProb = [0.5], start = 0, end = 2
Output: 0.00000
Explanation: There is no path between 0 and 2.


constraint:
`2 <= n <= 10^4`
`0 <= start, end < n`
`Start! = end`
`0 <= a, b < n`
`a != b`
`0 <= succProb.length == edges.length <= 2*10^4`
`0 <= succProb[i] <= 1`
There is at most one edge between every two nodes.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A courier company wants to build a new service center in a new city. The company knows the locations of all customers in the city on a two-dimensional map, and wants to build a new center at the location with the smallest sum of Euclidean distances to all customers.

Given an array positions, where positions[i] = [xi, yi] is the position of the ith customer on the map, return the minimum sum of the Euclidean distances of all customers.

In other words, you need to choose the location of the service center `[xcentre, ycentre]` such that the following formula is minimized:
Answers within 10^-5 of the actual value will be accepted.


Example 1:
Input: positions = [[0,1],[1,0],[1,2],[2,1]]
Output: 4.00000
Explanation: As shown in the figure, it can be seen that choosing [xcentre, ycentre] = [1, 1] will make the distance to each customer = 1, and the sum of all distances is 4, which is the minimum value we can achieve.


Example 2:
Input: positions = [[1,1],[3,3]]
Output: 2.82843
Explanation: Smallest possible sum of distances = sqrt(2) + sqrt(2) = 2.82843

Example 3:
Input: positions = [[1,1]]
Output: 0.00000

Example 4:
Input: positions = [[1,1],[0,0],[2,0]]
Output: 2.73205
Explanation: At first glance, you might think that positioning the center at [1, 0] would achieve the minimum sum, but positioning it at [1, 0] would make the sum of the distances = 3.

Try centering at [1.0, 0.5773502711] and you'll see that the sum of the distances is 2.73205.

Be careful with precision!

Example 5:
Input: positions = [[0,1],[3,2],[4,5],[7,6],[8,9],[11,1],[2,12]]
Output: 32.94036
Explanation: You can use [4.3460852395, 4.9813795505] as the position of the center of the circle.


constraint:
`1 <= positions. length <= 50`
`positions[i].length == 2`
`0 <= positions[i][0], positions[i][1] <= 100`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of an N-ary tree with unique values, and two nodes ""p"" and ""q"" of the tree.

You should move the subtree of node ""p"" to be a direct child of node ""q"". If `p` is already a direct child of `q`, do not change anything. Node ""p"" must be the last child node in the child list of node ""q"".

Returns the root of the tree after adjustment.

There are 3 cases for nodes p and q:
Node q is in the subtree of node p.

Node ""p"" is in the subtree of node ""q"".

Node ""p"" is not in the subtree of node ""q"", nor is node ""q"" in the subtree of node ""p"".

In cases 2 and 3 you just move `p` (and its subtrees) to be subtrees of `q`, but in case 1 the tree might be disconnected so you need to reconnect the tree. Before tackling this problem, please read the examples carefully.

Nary-Tree input serialization representations are traversed in their level order, with each set of children separated by a null value (see example).

For example the above tree is serialized as [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,empty , 13, empty, empty, 14].


Example 1:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 4, q = 1
Output: [1,null,2,3,4,null,5,null,6,null,7,8]
Explanation: This example follows the second case, since node p is in the subtree of node q. We move node p and its subtrees to be immediate children of node q.

Note that node 4 is the last child of node 1.


Example 2:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 7, q = 4
Output: [1,null,2,3,null,4,5,null,6,null,7,8]
Explanation: Node 7 is already a direct child of node 4. We don't make any changes.


Example 3:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 3, q ​​= 8
Output: [1,null,2,null,4,5,null,7,8,null,null,null,3,null,6]
Explanation: This example follows case 3 because node p is not in node q's subtree and vice versa. We can move node 3 and its subtree to be children of node 8.


Example 4:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 2, q = 7
Output: [1,null,7,3,null,2,null,6,null,4,5,null,null,8]
Explanation: Node q is in the subtree of node p, so this is case 1.

In the first step, we move node p (and all of its subtrees except node q) and add it as a child node to node q.

We will then see that the tree is broken and node q needs to be reconnected to replace node p as shown.


Example 5:
Input: root = [1,null,2,3,null,4,5,null,6,null,7,8], p = 1, q = 2
Output: [2,null,4,5,1,null,7,8,null,null,3,null,null,null,6]
Explanation: Node q is in the subtree of node p, so this is case 1.

In the first step, we move node p (and all of its subtrees except node q) and add it as a child node to node q.

Since node p is the root of the tree, node q replaces it and becomes the root of the tree.


constraint:
The total number of nodes is between ""[2, 1000]"".

Each node has a unique value.

`p != null`
`q != null`
`p` and `q` are two distinct nodes (i.e. `p != q`).",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `numBottles` full water bottles, you can exchange `numExchange` empty water bottles for one full water bottle.

The action of drinking a full water bottle turns it into an empty bottle.

Returns the maximum number of water bottles you can drink from.


Example 1:
Input: numBottles = 9, numExchange = 3
Output: 13
Description: You can exchange 3 empty bottles for 1 full water bottle.

Number of water bottles you can drink from: 9 + 3 + 1 = 13.


Example 2:
Input: numBottles = 15, numExchange = 4
Output: 19
Description: You can exchange 4 empty bottles for 1 full water bottle.
Number of water bottles you can drink from: 15 + 3 + 1 = 19.


Example 3:
Input: numBottles = 5, numExchange = 5
Output: 6

Example 4:
Input: numBottles = 2, numExchange = 3
Output: 2

constraint:
`1 <= numBottles <= 100`
`2 <= numExchange <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a tree (i.e. a connected undirected graph without cycles) consisting of ""n"" nodes numbered from ""0"" to ""n - 1"" and exactly ""n - 1"" ""edges"". The root of the tree is node ""0"", and each node of the tree has a label, which is the lowercase characters given in the string ""labels"" (i.e. the node numbered ""i"" has the label ""labels""[i] `).

The edges array is given in the form edges[i] = [ai, bi], which means there is an edge between nodes ai and bi in the tree.

Returns an array of size n where ans[i] is the number of nodes in the ith node's subtree that have the same label as node i.

A subtree of a tree ""T"" is a tree consisting of a node in ""T"" and all its descendant nodes.


Example 1:
Input: n = 7, edges = [[0,1],[0,2],[1,4],[1,5],[2,3],[2,6]], labels = ""abaedcd ""
Output: [2,1,1,1,1,1,1]
Explanation: Node 0 has label ""a"", and its subtree also has node 2 with label ""a"", so the answer is 2. Note that any node is part of its subtree.

Node 1 has label ""b"". Node 1's subtree contains nodes 1, 4, and 5, and because nodes 4 and 5 have different labels than node 1, the answer is just 1 (the node itself).


Example 2:
Input: n = 4, edges = [[0,1],[1,2],[0,3]], labels = ""bbbb""
Output: [4,2,1,1]
Explanation: The subtree of node 2 contains only node 2, so the answer is 1.

The subtree of node 3 contains only node 3, so the answer is 1.

Node 1's subtree contains nodes 1 and 2, both of which have label 'b', so the answer is 2.

Node 0's subtree contains nodes 0, 1, 2, and 3, all with label 'b', so the answer is 4.


Example 3:
Input: n = 5, edges = [[0,1],[0,2],[1,3],[0,4]], labels = ""aabab""
Output: [3,2,1,1,1]

Example 4:
Input: n = 6, edges = [[0,1],[0,2],[1,3],[3,4],[4,5]], labels = ""cbabaa""
Output: [1,2,1,1,2,1]

Example 5:
Input: n = 7, edges = [[0,1],[1,2],[2,3],[3,4],[4,5],[5,6]], labels = ""aaabaaa ""
Output: [6,5,4,1,3,2,1]

constraint:
`1 <= n <= 10^5`
`edges. length == n - 1`
`edge[i].length == 2`
`0 <= ai, bi < n`
`ai != bi`
`labels.length == n`
`labels` consists of lowercase English letters only.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s consisting of lowercase letters, you need to find the maximum number of non-empty substrings of s that satisfy the following conditions:
The substrings do not overlap, that is, for any two substrings s[i..j] and s[k..l], either j < k or `i > l` is true.

A substring containing the specific character ""c"" must also contain all occurrences of ""c"".

Find the maximum number of substrings satisfying the above conditions. If there are multiple solutions with the same number of substrings, the one with the smallest total length is returned. It can be shown that there is a unique solution of minimum total length.

Note that you can return substrings in any order.


Example 1:
Input: s = ""adefaddaccc""
Output: [""e"",""f"",""ccc""]
Explanation: The following are all possible substrings that satisfy the condition:
[
  ""adefaddaccc""
  ""Adfada"",
  ""EF"",
  ""electronic"",
  ""F"",
  ""cc"",
]
If we pick the first string, we can't pick any other string, we just get 1. If we choose ""adefadda"", we are left with ""ccc"", which is the only string that does not overlap, thus obtaining 2 substrings. Also note that choosing ""ef"" is not optimal as it can be split in two. So the best way is to choose [""e"",""f"",""ccc""] which gives us 3 substrings. No other solution exists for the same number of substrings.


Example 2:
Input: s = ""abbaccd""
Output: [""d"",""bb"",""cc""]
Explanation: Note that although the substring set [""d"",""abba"",""cc""] also has length 3, it is considered incorrect because its total length is greater.


constraint:
`1 <= s.length <= 10^5`
`s` contains only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Winston got the mysterious function ""func"" above. He has an integer array ""arr"" and an integer ""target"", and he wants to find the values ​​""l"" and ""r"" that minimize the value ""|func(arr, l, r) - target|"".

Return the smallest possible value of `|func(arr, l, r) - target|`.

Note that `func` should be called with values ​​`l` and `r`, where `0 <= l, r < arr.length`.


Example 1:
Input: arr = [9,12,3,7,15], target = 5
Output: 2
Explanation: call func with all pairs of [l,r] = [[0,0],[1,1],[2,2],[3,3],[4,4],[0,1] ],[1,2],[2,3],[3,4],[0,2],[1,3],[2,4],[0,3],[1,4], [0,4]], Winston got the following result [9,12,3,7,15,8,0,3,7,0,0,3,0,0,0]. The closest values ​​to 5 are 7 and 3, so the smallest difference is 2.


Example 2:
Input: arr = [1000000,1000000,1000000], target = 1
Output: 999999
Explanation: Winston calls the function with all possible values ​​of [l,r], he always gets 1000000, so the minimum difference is 999999.


Example 3:
Input: arr = [1,2,4,8,16], target = 0
output: 0

constraint:
`1 <= arr.length <= 105`
`1 <= arr[i] <= 106`
`0 <= target <= 107`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two non-negative integers ""low"" and ""high"". Returns an odd number between ""low"" and ""high"", inclusive.


Example 1:
Input: low = 3, high = 7
Output: 3
Explanation: The odd numbers between 3 and 7 are [3,5,7].


Example 2:
Input: Low = 8, High = 10
Output: 1
Explanation: The odd number between 8 and 10 is [9].


constraint:
`0 <= low <= high <= 10^9`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr . Returns the number of subarrays whose sum is an odd number.

Since the answer may become larger, the answer must be calculated modulo ""10^9 + 7"".


Example 1:
Input: arr = [1,3,5]
Output: 4
Explanation: All subarrays are [[1],[1,3],[1,3,5],[3],[3,5],[5]]
All subarray sums are [1,4,9,3,8,5].

The odd sum is [1,9,3,5], so the answer is 4.


Example 2:
Input: arr = [2,4,6]
output: 0
Explanation: All subarrays are [[2],[2,4],[2,4,6],[4],[4,6],[6]]
The sum of all subarrays is [2,6,12,4,10,6].

The sum of all subarrays is even and the answer is 0.


Example 3:
Input: arr = [1,2,3,4,5,6,7]
output: 16

Example 4:
Input: arr = [100,100,99,99]
Output: 4

Example 5:
Input: arr = [7]
Output: 1

constraint:
`1 <= arr.length <= 10^5`
`1 <= arr[i] <= 100`",1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, splitting is called good if you can split s into 2 non-empty strings p and q where its concatenation is equal to s and the number of distinct letters `p` and `q` it's the same.

Return the number of good splits you can make in `s`.


Example 1:
Input: s = ""aacaba""
Output: 2
Instructions: There are 5 ways to split ""aacaba"", 2 of which are good.
(""a"", ""acaba"") The left and right strings contain 1 and 3 different letters, respectively.

(""aa"", ""caba"") The left and right strings contain 1 and 3 different letters, respectively.

(""aac"", ""aba"") left and right strings contain 2 and 2 different letters respectively (split well).

(""aaca"", ""ba"") left and right strings contain 2 and 2 different letters respectively (split well).

(""aacab"", ""a"") The left and right strings contain 3 and 1 different letters, respectively.


Example 2:
Input: s = ""abcd""
Output: 1
Explanation: Split the string as follows (""ab"", ""cd"").


Example 3:
Input: s = ""aaaaa""
Output: 4
Explanation: All possible splits are good.


Example 4:
Input: s = ""acbadbaada""
Output: 2

constraint:
`s` contains only lowercase English letters.

`1 <= s.length <= 10^5`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""target"" of positive integers and an array ""initial"" of the same size and all zeros.

Return the minimum number of operands to form the `target` array from initial if allowed to:
Select any subarray from ""initial"" and increment each value by 1.

The answer is guaranteed to be within the range of a 32-bit signed integer.


Example 1:
Input: target = [1,2,3,2,1]
Output: 3
Explanation: We need at least 3 operations to form the destination array from the initial array.

[0,0,0,0,0] Incremented by 1 from index 0 to 4, inclusive.

[1,1,1,1,1] Increments by 1 from index 1 to 3, inclusive.

[1,2,2,2,1] increments by 1 at index 2.

[1,2,3,2,1] The target array is formed.


Example 2:
Input: target = [3,1,1,2]
Output: 4
Explanation: (initial) [0,0,0,0] -> [1,1,1,1] -> [1,1,1,2] -> [2,1,1,2] -> [ 3,1,1,2] (target).


Example 3:
Input: target = [3,1,5,4,2]
Output: 7
Explanation: (initial) [0,0,0,0,0] -> [1,1,1,1,1] -> [2,1,1,1,1] -> [3,1,1 ,1,1]
                                  -> [3,1,2,2,2] -> [3,1,3,3,2] -> [3,1,4,4,2] -> [3,1,5,4, 2] (Target).


Example 4:
Input: target = [1,1,1,1]
Output: 1

constraint:
`1 <= target.length <= 10^5`
`1 <= target[i] <= 10^5`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and an integer array indices of the same length.

The string s will be shuffled such that the character at ith position is moved to indices[i] in the shuffled string.

Returns the scrambled string.


Example 1:
Input: s = ""codeleet"", `indices` = [4,5,6,7,0,2,1,3]
Output: ""leetcode""
Explanation: As shown in the figure, ""codeleet"" becomes ""leetcode"" after shuffling.


Example 2:
Input: s = ""abc"", `indices` = [0,1,2]
Output: ""abc""
Explanation: After shuffling, each character stays in place.


Example 3:
Input: s = ""aiohn"", `indices` = [3,1,4,2,0]
Output: ""Hello""

Example 4:
Input: s = ""aaiougrt"", `indices` = [4,0,2,6,7,3,1,5]
Output: ""arigatou""

Example 5:
Input: s = ""art"", `indices` = [1,0,2]
Output: ""mouse""

constraint:
`s.length == indices.length == n`
`1 <= n <= 100`
`s` contains only lowercase English letters.

`0 <= index[i] < n`
All values ​​of `indices` are unique (i.e. `indices` is a permutation of integers from `0` to `n - 1`).",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a room with n bulbs, numbered from '0' to 'n-1', arranged in a row from left to right. Initially all bulbs are off.

Your task is to get the configuration represented by ""target"", where ""target[i]"" is ""1"" when the i-th light bulb is on, and ""0"" when it is off.

You have a switch that flips the state of a light bulb, and a flip operation is defined as follows:
Selects any bulb currently configured (index ""i"").

Flip each bulb from index ""i"" to ""n-1"".

When flipping any bulb, it means if it is 0 it becomes 1, if it is 1 it becomes 0.

Returns the minimum number of flips required to form ""target"".


Example 1:
input:target=""10111""
Output: 3
Description: The initial configuration is ""00000"".

Flip from third bulb: ""00000"" -> ""00111""
Flip from first bulb: ""00111"" -> ""11000""
Flip from second bulb: ""11000"" -> ""10111""
We need at least 3 flip operations to form the target.


Example 2:
input:target=""101""
Output: 3
Explanation: ""000"" -> ""111"" -> ""100"" -> ""101"".


Example 3:
input:target=""00000""
output: 0

Example 4:
Input: target = ""001011101""
Output: 5

constraint:
`1 <= target.length <= 10^5`
`target[i] == '0'` or `target[i] == '1'`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree with a ""root"" and an integer ""distance"". A pair of two distinct leaf nodes of a binary tree is said to be good if the length of the shortest path between them is less than or equal to the ""distance"".

Returns the number of good leaf node pairs in the tree.


Example 1:
Input: root = [1,2,3,null,4], distance = 3
Output: 1
Explanation: The leaf nodes of the tree are 3 and 4, and the shortest path length between them is 3. This is the only pair.


Example 2:
Input: root = [1,2,3,4,5,6,7], distance = 3
Output: 2
Explanation: Good pairs are [4,5] and [6,7], shortest path = 2. Not good for [4,6] because the length of the shortest path between them is 4.


Example 3:
Input: root = [7,1,4,6,null,5,3,null,null,null,null,null,2], distance = 3
Output: 1
Explanation: The only good pair is [2,5].


Example 4:
Input: root = [100], distance = 1
output: 0

Example 5:
Input: root = [1,1,1], distance = 2
Output: 1

constraint:
The number of nodes in the ""tree"" is in the range ""[1, 2^10]"".
The value of each node is between ""[1, 100]"".

`1 <= distance <= 10`",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Run-length encoding is a string compression method that works by replacing consecutive identical characters (repeated 2 or more times) with the concatenation of the character and a number marking the character count (run length). For example, to compress the string ""aabccc"", we replace ""aa"" with ""a2"" and ""ccc"" with ""c3"". So the compressed string becomes ""a2bc3"".

Note that in this question we didn't add ""1"" after a single character.

Given a string s and an integer k. You need to remove at most k characters from s so that the run-length encoded version of s has a minimum length.

Find the minimum length of the run-length encoded version of `s` after removing at most `k` characters.


Example 1:
Input: s = ""aaabcccd"", k = 2
Output: 4
Explanation: Compressing s without deleting anything will result in ""a3bc3d"" of length 6. Deleting any character ""a"" or ""c"" will reduce the length of the compressed string to at most 5, e.g. delete 2 'a' then we will have s = ""abcccd"" compressed to abc3d. Therefore, the optimal way is to delete 'b' and 'd', then the compressed version of s will be ""a3c3"" of length 4.


Example 2:
Input: s = ""aabbaa"", k = 2
Output: 2
Explanation: If we remove the two ""b"" characters, the resulting compressed string will be ""a4"" of length 2.


Example 3:
Input: s = ""aaaaaaaaaaa"", k = 0
Output: 3
Explanation: Since k is zero, we cannot delete anything. The compressed string is ""a11"" of length 3.


constraint:
`1 <= s.length <= 100`
`0 <= k <= s.length`
`s` contains only lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an array ""arr"" of integers, where all integers in ""arr"" are equal except one integer which is bigger than the rest. You won't have direct access to the array, instead you will have an API `ArrayReader` with the following functions:
`int compareSub(int l, int r, int x, int y)`: where `0 <= l, r, x, y < ArrayReader.length()`, `l <= r and` `x <= y `. This function compares the sum of the subarray ""arr[l..r]"" with the sum of the subarray ""arr[x..y]"" and returns:

1 if arr[l]+arr[l+1]+...+arr[r] > arr[x]+arr[x+1]+...+arr[y].

0 if arr[l]+arr[l+1]+...+arr[r] == arr[x]+arr[x+1]+...+arr[y].

-1 if ""arr[l]+arr[l+1]+...+arr[r] < arr[x]+arr[x+1]+...+arr[y]"".

`int length()`: Returns the size of the array.

You can call compareSub() up to 20 times. You can assume that both functions work in `O(1)` time.

Returns the index of the array arr with the largest integer.

follow up:
What if two numbers in arr are bigger than all others?
What if one number is greater than the other numbers and one number is smaller than the others?

Example 1:
Input: arr = [7,7,7,7,10,7,7,7]
Output: 4
Explanation: The following calls to the API
reader.compareSub(0, 0, 1, 1) // returns 0 This is a query that compares subarray (0, 0) with subarray (1, 1), (i.e. compares arr[0] with arr[1]) .

So we know that arr[0] and arr[1] do not contain the largest element.

reader.compareSub(2, 2, 3, 3) // returns 0, we can exclude arr[2] and arr[3].

reader.compareSub(4, 4, 5, 5) // returns 1, so we can be sure that arr[4] is the largest element in the array.

Note that we only made 3 calls, so the answer is valid.


Example 2:
Input: nums = [6,6,12]
Output: 2

constraint:
`2 <= arr.length <= 5 * 10^5`
`1 <= arr[i] <= 100`
All elements of `arr` are equal except for one element which is greater than all others.",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" and three integers ""a"", ""b"" and ""c"". You need to find the number of good triplets.

A triple ""(arr[i], arr[j], arr[k])"" is good if:
`0 <= i < j < k < arr.length`
`|arr[i] - arr[j]| <= a`
`|arr[j] - arr[k]| <= b`
`|arr[i] - arr[k]| <= c`
where `|x|` represents the absolute value of `x`.

Returns the number of good triplets.


Example 1:
Input: arr = [3,0,1,1,9,7], a = 7, b = 2, c = 3
Output: 4
Explanation: There are 4 good triples: [(3,0,1), (3,0,1), (3,1,1), (0,1,1)].


Example 2:
Input: arr = [1,1,2,2,3], a = 0, b = 0, c = 1
output: 0
Explanation: No triple satisfies all conditions.


constraint:
`3 <= arr.length <= 100`
`0 <= arr[i] <= 1000`
`0 <= a, b, c <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""arr"" of distinct integers and an integer ""k"".

The game will be played between the first two elements of the array (i.e. ""arr[0]"" and ""arr[1]""). In each round of the game, we compare arr[0] with arr[1], the larger integer wins and stays at position 0, and the smaller integer moves to the end of the array. The game ends when an integer wins ""k"" rounds in a row.

Returns the integer that will win the game.

There is sure to be a winner in this game.


Example 1:
Input: arr = [2,1,3,5,4,6,7], k = 2
Output: 5
Instructions: Let's look at the rounds of the game:
round | reach | winner | win_count
  1 | [2,1,3,5,4,6,7] | 2 | 1
  2 | [2,3,5,4,6,7,1] | 3 | 1
  3|[3,5,4,6,7,1,2]|5|1
  4 | [5,4,6,7,1,2,3] | 5 | 2
So we can see that 4 rounds will be played and 5 is the winner because it won 2 in a row.


Example 2:
Input: arr = [3,2,1], k = 10
Output: 3
Explanation: 3 will win the first 10 rounds in a row.


Example 3:
Input: arr = [1,9,8,2,3,7,6,4,5], k = 7
Output: 9

Example 4:
Input: arr = [1,11,22,33,44,55,66,77,88,99], k = 1000000000
Output: 99

constraint:
`2 <= arr.length <= 10^5`
`1 <= arr[i] <= 10^6`
`arr` contains distinct integers.

`1 <= k <= 10^9`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""n x n"" binary ""grid"", you can select two adjacent rows of the grid and swap them in one step.

A grid is said to be valid if all cells above the main diagonal are zero.

Returns the minimum number of steps required to make the grid valid, or -1 if the grid is invalid.

The main diagonal of the grid is the diagonal starting at cell ""(1, 1)"" and ending at cell ""(n, n)"".


Example 1:
Input: Grid = [[0,0,1],[1,1,0],[1,0,0]]
Output: 3

Example 2:
Input: grid = [[0,1,1,0],[0,1,1,0],[0,1,1,0],[0,1,1,0]]
Output: -1
Explanation: All rows are similar, swapping has no effect on the grid.


Example 3:
Input: Grid = [[1,0,0],[1,1,0],[1,1,1]]
output: 0

constraint:
`n == grid. length`
`n == grid[i].length`
`1 <= n <= 200`
`grid[i][j]` is `0` or `1`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sorted arrays ""nums1"" and ""nums2"" of distinct integers.
Valid paths are defined as follows:
Select the array nums1 or nums2 to traverse (starting at index 0).

Traverse the current array from left to right.

If you are reading whatever values ​​exist in `nums1` and `nums2`, you can change the path to another array. (Only one duplicate value is considered in a valid path).

A score is defined as the sum of unique values ​​in a valid path.

Return the maximum score of all possible valid paths you can get.

Since the answer might be too large, return it modulo 10^9 + 7.


Example 1:
Input: nums1 = [2,4,5,8,10], nums2 = [4,6,8,9]
Output: 30
Description: Valid paths:
[2,4,5,8,10], [2,4,5,8,9], [2,4,6,8,9], [2,4,6,8,10], (start from nums1)
[4,6,8,9], [4,5,8,10], [4,5,8,9], [4,6,8,10] (from nums2)
The maximum value is obtained by the green path [2,4,6,8,10].


Example 2:
Input: nums1 = [1,3,5,7,9], nums2 = [3,5,100]
Output: 109
Explanation: Get the maximum sum over the path [1,3,5,100].


Example 3:
Input: nums1 = [1,2,3,4,5], nums2 = [6,7,8,9,10]
Output: 40
Explanation: There are no common elements between nums1 and nums2.

The maximum sum is obtained by the path [6,7,8,9,10].


Example 4:
Input: nums1 = [1,4,5,8,9,11,19], nums2 = [2,3,4,11,12]
Output: 61

constraint:
`1 <= nums1.length <= 10^5`
`1 <= nums2.length <= 10^5`
`1 <= nums1[i], nums2[i] <= 10^7`
`nums1` and `nums2` are strictly increasing.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of positive integers in strictly increasing order and an integer ""k"".

Find the ""kth"" positive integer missing from this array.


Example 1:
Input: arr = [2,3,4,7,11], k = 5
Output: 9
Explanation: The missing positive integers are [1,5,6,8,9,10,12,13,...]. The 5th missing positive integer is 9.


Example 2:
Input: arr = [1,2,3,4], k = 2
Output: 6
Explanation: The missing positive integers are [5,6,7,...]. The second missing positive integer is 6.


constraint:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 1000`
`1 <= k <= 1000`
`arr[i] < arr[j]` for `1 <= i < j <= arr.length`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, your goal is to convert `s` to `t` in `k` steps or less.

During `ith` (`1 <= i <= k`) moves, you can:
Select any index j from s (indexed from 1) such that 1 <= j <= s.length and j has not been selected in any previous move, then move the character at that index i `times.

Did not do anything.

Shifting a character means replacing it with the next letter in the alphabet (wrapping so that ""z"" becomes ""a""). Shifting a character ""i"" means applying the shift operation ""i"" times.

Remember that any index j can only be selected at most once.

Return `true` if `s` can be converted to `t` in no more than `k` moves, `false` otherwise.


Example 1:
Input: s = ""input"", t = ""output"", k = 9
output: true
Explanation: In step 6, we shift 'i' 6 times to get 'o'. In step 7, we shift 'n' to get 'u'.


Example 2:
Input: s = ""abc"", t = ""bcd"", k = 10
output: error
Explanation: We need to shift each character in s by one to convert it to t. We can move 'a' to 'b' in the first step. However, there is no way to move other characters in the remaining moves to get t from s.


Example 3:
Input: s = ""aab"", t = ""bbb"", k = 27
output: true
Explanation: In the first step, we shift the first 'a' by 1 to get 'b'. In step 27 we shift the second 'a' 27 times to get 'b'.


constraint:
`1 <= s.length, t.length <= 10^5`
`0 <= k <= 10^9`
`s`, `t` contain only lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a parenthesized string `s` containing only the characters `'('` and `')'`. A parenthesized string is balanced if:
Any opening bracket `'('` must have a corresponding two consecutive closing brackets `'))'`.

An opening parenthesis `'('` must be placed before the corresponding two consecutive closing parentheses `'))'.

In other words, we treat `'('` as an opening parenthesis and `'))'` as a closing parenthesis.

For example `""())""`, `""())(())))""` and `""(())())))""` are balanced, `"")()""`, ` "" ()))""` and `""(()))""` are unbalanced.

You can insert the characters `'('` and `')' anywhere in the string to balance it, if desired.

Returns the minimum number of insertions required to bring s into balance.


Example 1:
Input: s = ""(()))""
Output: 1
Explanation: The second '(' has two matching '))', but the first '(' has only ')' matching. We need to add another ')' at the end of the string to become the balanced ""(())))"".


Example 2:
Input: s = ""())""
output: 0
Explanation: The string has been balanced.


Example 3:
Input: s = ""))())(""
Output: 3
Explanation: add '(' to match the first '))', add '))' to match the last '('.


Example 4:
Input: s = ""(((((((""
Output: 12
Explanation: Add 12 ')' to balance the string.


Example 5:
Input: s = "")))))))""
Output: 5
Explanation: Add 4 '(' at the beginning of the string and a ')' at the end. The string becomes ""(((())))))))"".


constraint:
`1 <= s.length <= 10^5`
`s` consists only of `'('` and `')'.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s. A great substring is a non-empty substring of s, so that we can do any number of swaps to make it a palindrome.

Returns the length of the maximum length awesome substring of s.


Example 1:
Input: s = ""3242415""
Output: 5
Explanation: ""24241"" is the longest awesome substring we can form the palindrome ""24142"" with some swaps.


Example 2:
Input: s = ""12345678""
Output: 1

Example 3:
Input: s = ""213123""
Output: 6
Explanation: ""213123"" is the longest awesome substring we can form the palindrome ""231132"" with some swaps.


Example 4:
Input: s = ""00""
Output: 2

constraint:
`1 <= s.length <= 10^5`
`s` consists of numbers only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s consisting of lowercase and uppercase English letters.

A good string is one without two adjacent characters `s[i]` and `s[i + 1]`, where:
`0 <= i <= s.length - 2`
`s[i]` is a lowercase letter, and `s[i + 1]` is the same letter but uppercase, and vice versa.

To make a string good, you pick two adjacent characters that make the string bad and remove them. You can keep doing this until the string is fine.

Returns the string when done. Under the given constraints, the answer is guaranteed to be unique.

Note that an empty string is also fine.


Example 1:
Input: s = ""leEeetcode""
Output: ""leetcode""
Explanation: In the first step, you choose i = 1 or i = 2, both will cause ""leEeetcode"" to be reduced to ""leetcode"".


Example 2:
Input: s = ""abBAcC""
Output: """"
Explanation: We have many possible scenarios, and all of them lead to the same answer. For example:
""abBAcC"" --> ""aAcC"" --> ""cC"" --> """"
""abBAcC"" --> ""abBA"" --> ""aA"" --> """"

Example 3:
Input: s = ""s""
Output: ""s""

constraint:
`1 <= s.length <= 100`
`s` contains only lowercase and uppercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two positive integers ""n"" and ""k"", the binary string ""Sn"" is formed as follows:
`S1 = ""0""`
`Si = Si-1 + ""1"" + reverse(invert(Si-1))` for `i > 1`
where `+` represents the concatenation operation, `reverse(x)` returns the reversed string x, and `invert(x)` inverts all the bits in x (0 becomes 1, 1 becomes 0).

For example, the first 4 strings in the sequence above are:
`S1 = ""0""`
`S2 = ""011""`
`S3 = ""0111001""`
`S4 = ""011100110110001""`
Return the `kth` bits in `Sn`. Guarantee that `k` is valid for the given `n`.


Example 1:
Input: n = 3, k = 1
Output: ""0""
Explanation: S3 is ""0111001"". The first digit is ""0"".


Example 2:
Input: n = 4, k = 11
Output: ""1""
Explanation: S4 is ""011100110110001"". The 11th bit is ""1"".


Example 3:
Input: n = 1, k = 1
Output: ""0""

Example 4:
Input: n = 2, k = 3
Output: ""1""

constraint:
`1 <= n <= 20`
`1 <= k <= 2n - 1`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" and an integer ""target"".

Returns the maximum number of non-empty non-overlapping subarrays such that the sum of the values ​​in each subarray is equal to ""target"".


Example 1:
Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] whose sum is equal to target(2).


Example 2:
Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays whose sum is equal to 6.

([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 do not overlap.


Example 3:
Input: nums = [-2,6,6,3,5,4,1,2,8], target = 10
Output: 3

Example 4:
Input: nums = [0,0,0], target = 0
Output: 3

constraint:
`1 <= nums.length <= 10^5`
`-10^4 <= nums[i] <= 10^4`
`0 <= target <= 10^6`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a stick of length n units. Sticks are labeled from ""0"" to ""n"". For example, a stick of length 6 is marked as follows:
Given an integer array `cuts`, where `cuts[i]` represents where you should perform the cut.

You should make the cuts in order, you can change the order of the cuts if you want.

The cost of one cut is the length of the stick to be cut, and the total cost is the sum of all cut costs. When you cut a stick, it is split into two smaller sticks (i.e. the sum of their lengths is the length of the stick before cutting). See the first example for a better explanation.

Returns the minimum total cost of a cut.


Example 1:
Input: n = 7, cuts = [1,3,4,5]
output: 16
Explanation: Using cuts order = [1, 3, 4, 5] on the input results in the following:
The first cut is made to a rod of length 7, so the cost is 7. The second cut is made on a rod of length 6 (that is, the second part of the first cut), the third cut is made on a rod of length 4, and the last cut is a rod of length 3. The total cost is 7 + 6 + 4 + 3 = 20.

For example, rearranging the cuts to [3, 5, 1, 4] would result in a scenario with total cost = 16 (as shown in the example photo 7 + 4 + 3 + 2 = 16).


Example 2:
Input: n = 9, cuts = [5,6,1,4,2]
Output: 22
Explanation: If you try the given cut, the cost will be 25.

There are many orderings with total cost <= 25, e.g. order [4, 6, 5, 2, 1] has total cost = 22, which is the minimum possible.


constraint:
`2 <= n <= 10^6`
`1 <= cuts. length <= min(n - 1, 100)`
`1 <= cuts[i] <= n - 1`
All integers in the `cuts` array are distinct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` cities and `m` bidirectional `roads`, where `roads[i] = [ai, bi]` connects city `ai` to city `bi`. Each city has a name consisting of exactly 3 uppercase English letters given in the string array names . Starting from any city `x`, you can reach any city `y` where `y != x` (i.e. cities and roads form an undirected connected graph).

You will get an array of strings ""targetPath"". You should find a path in the graph that is the same length as ""targetPath"" and has the shortest edit distance.

You need to return the order of the nodes with the minimum edit distance in the path, which should be the same length as `targetPath` and should be valid (i.e. there should be a direct path between `ans[i]` and `ans[i]` [i+1]`). If there are multiple answers, please return any of them.

The edit distance is defined as follows:
Follow-up: If each node in the path can only be visited once, what should change in your solution?

Example 1:
Input: n = 5, roads = [[0,2],[0,3],[1,2],[1,3],[1,4],[2,4]], names = ["" ATL"",""PEK"",""LAX"",""DXB"",""HND""], targetPath = [""ATL"",""DXB"",""HND"",""LAX""]
Output: [0,2,4,2]
Explanation: [0,2,4,2], [0,3,0,2], and [0,3,1,2] are acceptable answers.

[0,2,4,2] is equivalent to [""ATL"",""LAX"",""HND"",""LAX""] with edit distance = 1, targetPath.

[0,3,0,2] is equivalent to [""ATL"",""DXB"",""ATL"",""LAX""] with edit distance = 1, targetPath.

[0,3,1,2] is equivalent to [""ATL"",""DXB"",""PEK"",""LAX""] with edit distance = 1, targetPath.


Example 2:
Input: n = 4, roads = [[1,0],[2,0],[3,0],[2,1],[3,1],[3,2]], names = ["" ATL"",""PEK"",""LAX"",""DXB""], targetPath = [""ABC"",""DEF"",""GHI"",""JKL"",""MNO"",""PQR"",""STU"",""VWX"" ]
Output: [0,1,0,1,0,1,0,1]
Explanation: Any path in this graph has edit distance = 8 and targetPath.


Example 3:
Input: n = 6, roads = [[0,1],[1,2],[2,3],[3,4],[4,5]], names = [""ATL"",""PEK"" ""LAX"",""ATL"",""DXB"",""HND""], targetPath = [""ATL"",""DXB"",""HND"",""DXB"",""ATL"",""LAX"",""PEK""]
Output: [3,4,5,4,3,2,1]
Explanation: [3,4,5,4,3,2,1] is the only path with edit distance 0 and targetPath.

It is equivalent to [""ATL"",""DXB"",""HND"",""DXB"",""ATL"",""LAX"",""PEK""]

constraint:
`2 <= n <= 100`
`m == roads. length`
`n - 1 <= m <= (n * (n - 1) / 2)`
`0 <= ai, bi <= n - 1`
`ai != bi`
The graph is guaranteed to be connected such that each pair of nodes has at most one direct path.

`names. length == n`
`name[i].length == 3`
`names[i]` consists of uppercase English letters.

There can be two cities with the same name.

`1 <= targetPath.length <= 100`
`targetPath[i].length == 3`
`targetPath[i]` consists of uppercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr , returns true if there are three consecutive odd numbers in the array. Otherwise, return ""false"".


Example 1:
Input: arr = [2,6,4,1]
output: error
Explanation: There are no three consecutive odds.


Example 2:
Input: arr = [1,2,34,3,4,5,7,23,12]
output: true
Explanation: [5,7,23] are three consecutive odds.


constraint:
`1 <= arr.length <= 1000`
`1 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an array `arr` of length `n`, where `arr[i] = (2 * i) + 1` represents all valid values ​​of `i` (i.e. `0 <= i < n`).

In one operation, you can select two indices `x` and `y` where `0 <= x, y < n` and subtract `1` from `arr[x]` and add `1` to `arr[y]` (i.e. execute `arr[x] -=1` and `arr[y] += 1`). The goal is to make all elements of the array equal. It is guaranteed that some operation can be used to make all elements of an array equal.

Given an integer ""n"", the length of the array. Returns the minimum number of operations required to make all elements of arr equal.


Example 1:
Input: n = 3
Output: 2
Explanation: arr = [1, 3, 5]
The first operation selects x = 2 and y = 0, which results in arr being [2, 3, 4]
Again x = 2 and y = 0 are chosen in the second operation, so arr = [3, 3, 3].


Example 2:
Input: n = 6
Output: 9

constraint:
`1 <= n <= 10^4`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"In Universe Earth C-137, Rick discovered a special form of magnetism if two balls were placed in his newly invented basket. Rick has n empty baskets, the ith basket is at position[i] , and Morty has m balls, which need to be distributed among the baskets so that the minimum magnetic force between any two balls is maximized.

Rick states that the magnetic force between two different balls at positions ""x"" and ""y"" is ""|x - y|"".

Given an integer array ""position"" and an integer ""m"". Returns the desired force.


Example 1:
Input: position = [1,2,3,4,7], m = 3
Output: 3
Explanation: Assigning 3 balls to baskets 1, 4, and 7 creates a magnetic force between the ball pair [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a minimum magnetic force greater than 3.


Example 2:
Input: position = [5,4,3,2,1,1000000000], m = 2
Output: 999999999
Explanation: We can use basket 1 and 1000000000.


constraint:
`n == position. length`
`2 <= n <= 10^5`
`1 <= position[i] <= 10^9`
All integers in `position` are distinct.

`2 <= m <= position.length`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n oranges in the kitchen, and you decide to eat some of them every day, as follows:
eat an orange.

If the number of remaining oranges (`n`) is divisible by 2, then you can eat n/2 oranges.

If the number of remaining oranges (`n`) is divisible by 3, then you can eat 2*(n/3) oranges.

Only one action can be selected per day.

Returns the minimum number of days to eat `n` oranges.


Example 1:
Input: n = 10
Output: 4
Explanation: You have 10 oranges.

Day 1: Eat 1 orange, 10 - 1 = 9.
Day 2: Eat 6 oranges, 9 - 2*(9/3) = 9 - 6 = 3. (because 9 is divisible by 3)
Day 3: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1.
Day 4: Eat the last orange 1 - 1 = 0.

You need at least 4 days to eat all 10 oranges.


Example 2:
Input: n = 6
Output: 3
Explanation: You have 6 oranges.

Day 1: Eat 3 oranges, 6 - 6/2 = 6 - 3 = 3. (because 6 is divisible by 2).

Day 2: Eat 2 oranges, 3 - 2*(3/3) = 3 - 2 = 1. (because 3 is divisible by 3)
Day 3: Eat the last orange 1 - 1 = 0.

You need at least 3 days to eat 6 oranges.


Example 3:
Input: n = 1
Output: 1

Example 4:
Input: n = 56
Output: 6

constraint:
`1 <= n <= 2*10^9`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a directed acyclic graph with ""n"" vertices numbered from ""0"" to ""n-1"", and an array ""edges"", where ""edges[i] = [fromi, toi]"" means from node Directed edge `fromi` to node `toi`.

Find the smallest set of vertices reachable by all nodes in the graph. A unique solution is guaranteed to exist.

Note that you can return vertices in any order.


Example 1:
Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
output: [0,3]
Explanation: It is impossible to reach all nodes from a vertex. From 0 we can go to [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].


Example 2:
Input: n = 5, sides = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Note that vertices 0, 3 and 2 are not reachable from any other nodes, so we have to include them. Also, any of these vertices can reach nodes 1 and 4.


constraint:
`2 <= n <= 10^5`
`1 <= edges.length <= min(10^5, n * (n - 1) / 2)`
`edge[i].length == 2`
`0 <= fromi, toi < n`
All pairs `(fromi, toi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your task is to form an integer array nums from an initial zero array arr of the same size as nums .

Returns the minimum number of function calls to generate nums from arr.

The answer is guaranteed to fit in a 32-bit signed integer.


Example 1:
Input: nums = [1,5]
Output: 5
Explanation: Increment by 1 (the second element): [0, 0] gets [0, 1] (1 operation).

Double all elements: [0, 1] -> [0, 2] -> [0, 4] (2 operations).

Increment by 1 (two elements) [0, 4] -> [1, 4] -> [1, 5] (2 operations).

Total number of operations: 1 + 2 + 2 = 5.


Example 2:
Input: nums = [2,2]
Output: 3
Explanation: Increment by 1 (two elements) [0, 0] -> [0, 1] -> [1, 1] (2 operations).

Double all elements: [1, 1] -> [2, 2] (1 operation).

Total number of operations: 2 + 1 = 3.


Example 3:
Input: nums = [4,2,5]
Output: 6
Explanation: (initial) [0,0,0] -> [1,0,0] -> [1,0,1] -> [2,0,2] -> [2,1,2] -> [4,2,4] -> [4,2,5] (numbers).


Example 4:
Input: nums = [3,2,2,4]
Output: 7

Example 5:
Input: nums = [2,4,8,16]
Output: 8

constraint:
`1 <= nums.length <= 10^5`
`0 <= nums[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional character array ""grid"" of size ""m x n"", you need to find whether there is any cycle consisting of the same value in ""grid"".

A cycle is a path in the grid of length 4 or more that starts and ends in the same cell. From a given cell, you can move to one of the cells adjacent to it - in one of four directions (up, down, left or right), if it has the same value as the current cell.

Also, you cannot move to a cell that was visited the last time you moved. For example, the loop ""(1, 1) -> (1, 2) -> (1, 1)"" is invalid because from ""(1, 2)"" we access ""(1, 1)"", which is The last cell visited.

Returns `true` if there is any cycle of the same value in the `grid`, otherwise returns `false`.


Example 1:
Input: grid = [[""a"",""a"",""a"",""a""],[""a"",""b"",""b"",""a""],[""a"",""b"", ""b"",""a""],[""a"",""a"",""a"",""a""]]
output: true
Explanation: In the image below there are two valid cycles of different colors:

Example 2:
Input: grid = [[""c"",""c"",""c"",""a""],[""c"",""d"",""c"",""c""],[""c"",""c"", ""e"",""c""],[""f"",""c"",""c"",""c""]]
output: true
Explanation: Only one active period is highlighted in the image below:

Example 3:
Input: grid = [[""a"",""b"",""b""],[""b"",""z"",""b""],[""b"",""b"",""a""]]
output: error

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters <= 500`
`1 <= n <= 500`
`grid` contains only lowercase English letters.",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"" and an integer array ""rounds"". We have a circular orbit which consists of ""n"" sectors labeled ""1"" to ""n"". The marathon will be held on this track, and the marathon consists of ""m"" rounds. The ith round starts at sector rounds[i - 1] and ends at sector rounds[i]. For example, round 1 starts at sector ""rounds[0]"" and ends at sector ""rounds[1]""
Returns an array of the most accessed sectors sorted in ascending order.

Note that you cycle through the tracks in ascending order of sector number counterclockwise (see first example).


Example 1:
Input: n = 4, rounds = [1,3,1,2]
output: [1,2]
Explanation: Marathon starts from sector 1, and the order of visiting sectors is as follows:
1 --> 2 --> 3 (end of first round) --> 4 --> 1 (end of second round) --> 2 (end of third round and marathon)
We can see that both sector 1 and sector 2 are accessed twice, which are the most accessed sectors. Sector 3 and sector 4 are only accessed once.


Example 2:
Input: n = 2, rounds = [2,1,2,1,2,1,2,1,2]
output: [2]

Example 3:
Input: n = 7, rounds = [1,3,5,7]
Output: [1,2,3,4,5,6,7]

constraint:
`2 <= n <= 100`
`1 <= meters <= 100`
`rounds. length == m + 1`
`1 <= rounds[i] <= n`
`rounds[i] != rounds[i + 1]` for `0 <= i < m`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" which represents the permutation of numbers from ""1"" to ""n"". You have a binary string of size ""n"" with all its bits initially set to zero.

At each step i from 1 to n (assuming both the binary string and arr are 1-indexed), the bit at position arr[i] is set to 1. Given an integer ""m"", you need to find the last step where there exists a set of length ""m"". A set of 1's is a contiguous substring of 1's, so it cannot expand in any direction.

Returns the last step for which there exists a set of length exactly ""m"". Returns ""-1"" if no such group exists.


Example 1:
Input: arr = [3,5,1,2,4], m = 1
Output: 4
explain:
Step 1: ""00100"", Group: [""1""]
Step 2: ""00101"", grouping: [""1"", ""1""]
Step 3: ""10101"", grouping: [""1"", ""1"", ""1""]
Step 4: ""11101"", grouping: [""111"", ""1""]
Step 5: ""11111"", group: [""11111""]
The most recent step for which there exists a set of size 1 is step 4.


Example 2:
Input: arr = [3,1,5,4,2], m = 2
Output: -1
explain:
Step 1: ""00100"", Group: [""1""]
Step 2: ""10100"", Group: [""1"", ""1""]
Step 3: ""10101"", grouping: [""1"", ""1"", ""1""]
Step 4: ""10111"", grouping: [""1"", ""111""]
Step 5: ""11111"", group: [""11111""]
No groups of size 2 exist at any step.


Example 3:
Input: arr = [1], m = 1
Output: 1

Example 4:
Input: arr = [2,1], m = 2
Output: 2

constraint:
`n == arr.length`
`1 <= n <= 10^5`
`1 <= arr[i] <= n`
All integers in `arr` are distinct.

`1 <= m <= arr.length`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two arrays of positive integers, `boxes` and `warehouse`, representing respectively the heights of some unit-width boxes and the heights of `n` rooms in the warehouse. The rooms of the warehouse are labeled from ""0"" to ""n - 1"" from left to right, where ""warehouse[i]"" (starting from 0) is the height of the ith room.

Boxes are put into the warehouse according to the following rules:
Chests cannot be stacked.

You can rearrange the insertion order of boxes.

Boxes can only be pushed into the warehouse from left to right.

If the height of a room in the warehouse is less than the height of a box, then that box and all other boxes behind it will stop before that room.

Returns the maximum number of boxes you can put in the warehouse.


Example 1:
Input: boxes = [4,3,4,1], warehouse = [5,3,3,4,1]
Output: 3
explain:
We can first place the box of height 1 in room 4. We can then place boxes of height 3 in any of rooms 1, 2 or 3. Finally, we can place a box of height 4 in room 0.

It is impossible for us to fit all 4 boxes into the warehouse.


Example 2:
Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
Output: 3
explain:
Note that a chest of height 4 cannot be put into the warehouse because it cannot pass through the first room of height 3.

Also, for the last two rooms 2 and 3, only boxes of height 1 can be accommodated.

As shown above, we can accommodate up to 3 boxes. The yellow box can also be placed in room 2.

Swapping the orange and green boxes is also valid, or swapping one of them with a red box.


Example 3:
Input: boxes = [1,2,3], warehouse = [1,2,3,4]
Output: 1
Explanation: Since the first room in the warehouse has a height of 1, we can only place boxes of height 1.


Example 4:
Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
output: 0

constraint:
`n == warehouse. length`
`1 <= boxes.length, warehouse.length <= 10^5`
`1 <= boxes[i], warehouse[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of positive integers, find a pattern of length ""m"" that repeats ""k"" or more times.

A pattern is a subarray (contiguous subsequence) of one or more values, repeated multiple times consecutively without overlapping. A pattern is defined by its length and number of repetitions.

Returns ""true"" if there is a pattern of length ""m"" repeated ""k"" or more times, otherwise returns ""false"".


Example 1:
Input: arr = [1,2,4,4,4,4], m = 1, k = 3
output: true
Explanation: The pattern (4) of length 1 is repeated 4 consecutive times. Note that the pattern can be repeated k times or more, but not less.


Example 2:
Input: arr = [1,2,1,2,1,1,1,3], m = 2, k = 2
output: true
Explanation: The pattern (1,2) of length 2 is repeated 2 consecutive times. Another valid pattern (2,1) is also repeated 2 times.


Example 3:
Input: arr = [1,2,1,2,1,3], m = 2, k = 3
output: error
Explanation: The pattern (1,2) has length 2, but it is repeated only 2 times. There is no pattern of length 2 repeated 3 or more times.


Example 4:
Input: arr = [1,2,3,1,2], m = 2, k = 2
output: error
Explanation: Note that the pattern (1,2) occurs twice but not consecutively, so it doesn't count.


Example 5:
Input: arr = [2,2,2,2], m = 2, k = 3
output: error
Explanation: The only pattern of length 2 is (2,2), but it is repeated only twice. Note that we do not count overlapping duplicates.


constraint:
`2 <= arr.length <= 100`
`1 <= arr[i] <= 100`
`1 <= meters <= 100`
`2 <= k <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"", find the maximum length of a subarray whose product of all elements is positive.

A subarray of an array is a contiguous sequence of zero or more values ​​taken from that array.

Returns the maximum length of a subarray with a positive product.


Example 1:
Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product 24.


Example 2:
Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] whose product is 6.

Note that we cannot include 0s in the subarrays, as this would make the product 0 non-positive.


Example 3:
Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].


Example 4:
Input: nums = [-1,2]
Output: 1

Example 5:
Input: nums = [1,2,3,5,-6,4,0,10]
Output: 4

constraint:
`1 <= nums.length <= 10^5`
`-10^9 <= nums[i] <= 10^9`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional ""grid"" of ""1s"" (land) and ""0s"" (water). An island is a group of 1 connected in a maximum of 4 directions (horizontal or vertical).

If we have only one island, the grid is said to be connected, otherwise it is called disconnected.

In one day, we can change any single land cell ""(1)"" to a water cell ""(0)"".

Returns the minimum number of days disconnected from the grid.


Example 1:
Input: Grid = [[0,1,1,0],[0,1,1,0],[0,0,0,0]]
Output: 2
Instructions: We need at least 2 days to get broken grids.

Change land grid[1][1] and grid[0][2] to water and get 2 disconnected islands.


Example 2:
Input: Grid = [[1,1]]
Output: 2
Explanation: The full water grid is also disconnected ([[1,1]] -> [[0,0]]), 0 islands.


Example 3:
Input: Grid = [[1,0,1,0]]
output: 0

Example 4:
Input: Grid = [[1,1,0,1,1],
               [1,1,1,1,1],
               [1,1,0,1,1],
               [1,1,0,1,1]]
Output: 1

Example 5:
Input: Grid = [[1,1,0,1,1],
               [1,1,1,1,1],
               [1,1,0,1,1],
               [1,1,1,1,1]]
Output: 2

constraint:
`1 <= grid.length, grid[i].length <= 30`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" which represents permutations of integers from ""1"" to ""n"". We'll build a binary search tree (BST) by sequentially inserting elements of `nums` into an initially empty BST. Find out the number of different ways to reorder `nums` so that the constructed BST is identical to that formed from the original array `nums`.

For example, given `nums = [2,1,3]`, we have 2 as the root, 1 as the left child, and 3 as the right child. The array ""[2,3,1]"" also produces the same BST, but ""[3,2,1]"" produces a different BST.

Returns the number of ways to reorder `nums` such that the resulting BST is identical to the original BST formed from `nums`.

Since the answer can be very large, it is returned modulo 10^9 + 7.


Example 1:
Input: nums = [2,1,3]
Output: 1
Explanation: We can reorder nums to [2,3,1], which will produce the same BST. There is no other way to reorder nums to produce the same BST.


Example 2:
Input: nums = [3,4,5,1,2]
Output: 5
Explanation: The following 5 arrays will produce the same BST:
[3,1,2,4,5]
[3,1,4,2,5]
[3,1,4,5,2]
[3,4,1,2,5]
[3,4,1,5,2]

Example 3:
Input: nums = [1,2,3]
output: 0
Explanation: No other ordering of nums produces the same BST.


Example 4:
Input: nums = [3,1,2,5,4,6]
Output: 19

Example 5:
Input: nums = [9,4,2,1,3,6,5,7,8,14,11,10,12,13,16,15,17,18]
Output: 216212978
Explanation: The number of ways to reorder nums to obtain the same BST is 3216212999. Taking this number modulo 10^9 + 7 gives 216212978.


constraint:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= nums.length`
All integers in `nums` are distinct.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sparse vectors, compute their dot product.

Implementing class `SparseVector`:
`SparseVector(nums)` initializes an object with the vector `nums`
`dotProduct(vec)` computes the dot product of a SparseVector instance and `vec`
A sparse vector is a vector with mostly zero values, you should efficiently store the sparse vector and compute the dot product between two SparseVector .

Follow-up: What if only one vector is sparse?

Example 1:
Input: nums1 = [1,0,0,2,3], nums2 = [0,3,0,4,0]
Output: 8
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 1*0 + 0*3 + 0*0 + 2*4 + 3*0 = 8

Example 2:
Input: nums1 = [0,1,0,0,0], nums2 = [0,0,0,0,2]
output: 0
Explanation: v1 = SparseVector(nums1) , v2 = SparseVector(nums2)
v1.dotProduct(v2) = 0*0 + 1*0 + 0*0 + 0*0 + 0*2 = 0

Example 3:
Input: nums1 = [0,1,0,0,2,0,0], nums2 = [1,0,0,0,3,0,4]
Output: 6

constraint:
`n == nums1.length == nums2.length`
`1 <= n <= 10^5`
`0 <= nums1[i], nums2[i] <= 100`",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a square matrix ""mat"", return the sum of the diagonals of the matrix.

Include only the sum of all elements on the main diagonal and all elements on the secondary diagonal that are not part of the main diagonal.


Example 1:
Input: mat = [[1,2,3],
              [4,5,6],
              [7,8,9]]
Output: 25
Explanation: Diagonal sum: 1 + 5 + 9 + 3 + 7 = 25
Note that the element mat[1][1] = 5 is only evaluated once.


Example 2:
Input: mat = [[1,1,1,1],
              [1,1,1,1],
              [1,1,1,1],
              [1,1,1,1]]
Output: 8

Example 3:
Input: mat = [[5]]
Output: 5

constraint:
`n == mat.length == mat[i].length`
`1 <= n <= 100`
`1 <= pad[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string s (a string consisting only of ""0"" and ""1""), we can split s into 3 non-empty strings s1, s2, s3 (s1+ s2+ s3 = s).

Return the number of ways s can be split such that the number of characters ""1"" is the same in s1, s2, and s3.

Since the answer might be too large, return it modulo 10^9 + 7.


Example 1:
Input: s = ""10101""
Output: 4
Explanation: There are four ways to split s into 3 parts, each containing the same number of letters ""1"".

""1|010|1""
""1|01|01""
""10|10|1""
""10|1|01""

Example 2:
Input: s = ""1001""
output: 0

Example 3:
Input: s = ""0000""
Output: 3
Explanation: There are three ways to split s into 3 parts.

""0|0|00""
""0|00|0""
""00|0|0""

Example 4:
Input: s = ""100100010100110""
Output: 12

constraint:
`3 <= s.length <= 10^5`
`s[i]` is either `'0'` or `'1'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array arr, remove a subarray (which may be empty) from arr such that the remaining elements in arr are not decremented.

A subarray is a contiguous subsequence of an array.

Returns the length of the shortest subarray to remove.


Example 1:
Input: arr = [1,2,3,10,4,2,3,5]
Output: 3
Explanation: The shortest subarray we can delete is [10,4,2] of length 3. The remaining elements after that will be [1,2,3,3,5], which are sorted.

Another correct solution is to delete the subarray [3,10,4].


Example 2:
Input: arr = [5,4,3,2,1]
Output: 4
Explanation: Since arrays are strictly descending, we can only keep one element. So we need to delete subarrays of length 4, [5,4,3,2] or [4,3,2,1].


Example 3:
Input: arr = [1,2,3]
output: 0
Explanation: The array is already non-decreasing. We don't need to remove any elements.


Example 4:
input: arr = [1]
output: 0

constraint:
`1 <= arr.length <= 10^5`
`0 <= arr[i] <= 10^9`",1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a distinct set of positive integer locations, where locations[i] represents the location of city i. You also get the integers ""start"", ""finish"", and ""fuel"", representing the starting city, ending city, and the initial amount of fuel you have, respectively.

At each step, if you are in city ""i"", you can choose any city ""j"" such that ""j != i"" and ""0 <= j < locations.length"", then move to city ""j"". Moving from city `i` to city `j` reduces the amount of fuel by `|locations[i] - locations[j]|`. Note that `|x|` means the absolute value of `x`.

Note that `fuel` cannot become negative at any point in time, and you can visit any city multiple times (including `start` and `finish`).

Returns a count of all possible paths from ""start"" to ""finish"".

Since the answer may be too large, return modulo 10^9 + 7 .


Example 1:
Input: position = [2,3,6,8,4], start = 1, end = 3, fuel = 5
Output: 4
Explanation: Here are all possible routes, each using 5 units of fuel:
1 -> 3
1 -> 2 -> 3
1 -> 4 -> 3
1 -> 4 -> 2 -> 3

Example 2:
Input: position = [4,3,1], start = 1, finish = 0, fuel = 6
Output: 5
Explanation: Here are all possible routes:
1 -> 0, used fuel = 1
1 -> 2 -> 0, fuel used = 5
1 -> 2 -> 1 -> 0, fuel used = 5
1 -> 0 -> 1 -> 0, fuel used = 3
1 -> 0 -> 1 -> 0 -> 1 -> 0, fuel used = 5

Example 3:
Input: position = [5,2,1], start = 0, finish = 2, fuel = 3
output: 0
Explanation: Going from 0 to 2 with only 3 units of fuel is impossible because the shortest route requires 4 units of fuel.


Example 4:
Input: position = [2,1,5], start = 0, finish = 0, fuel = 3
Output: 2
Explanation: There are two possible routes, 0 and 0 -> 1 -> 0.


Example 5:
Input: position = [1,2,3], start = 0, finish = 2, fuel = 40
Output: 615088286
Explanation: The total number of possible routes is 2615088300. Taking this number modulo 10^9 + 7 gives 615088286.


constraint:
`2 <= locations. length <= 100`
`1 <= position[i] <= 10^9`
All integers in `locations` are distinct.

`0 <= start, end < locations.length`
`1 <= Fuel <= 200`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s containing only lowercase English letters and '?' characters, convert all '? ' characters are converted to lowercase so that the final string does not contain any consecutive repeating characters. You cannot modify non-'?' characters.

Guarantees that there are no consecutive repeated characters in the given string except '?'.

Returns the final string after all conversions (possibly zero). If there are multiple solutions, return any of them. It can be shown that, given the constraints, the answer is always possible.


Example 1:
Input: s = ""?zs""
Output: ""azs""
Explanation: There are 25 solutions to this problem. Valid from ""azs"" to ""yzs"". Only ""z"" is an invalid modification, since the string will consist of consecutive repeating characters in ""zzs"".


Example 2:
Input: s = ""ubv?w""
Output: ""ubvaw""
Explanation: There are 24 solutions to this problem. Only ""v"" and ""w"" are invalid modifications, because the string will consist of consecutive repetitions of the characters in ""ubvvw"" and ""ubvww"".


Example 3:
Input: s = ""j?qg??b""
Output: ""jaqgacb""

Example 4:
Input: s = ""??yw?ipkj?""
Output: ""acywaipkja""

constraint:
`1 <= s.length <= 100`
`s` contains only lowercase English letters and `'?'`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s and an integer array cost, where cost[i] is the cost of removing the ith character in s.

Returns the minimum cost of deletion such that no two identical letters are adjacent to each other.

Note that you will delete the selected characters at the same time, that is to say, after deleting a character, the cost of deleting other characters will not change.


Example 1:
Input: s = ""abaac"", cost = [1,2,3,4,5]
Output: 3
Explanation: Remove the letter ""a"" with a cost of 3 to get ""abac"" (no two adjacent strings of the same letter).


Example 2:
Input: s = ""abc"", cost = [1,2,3]
output: 0
Explanation: You don't need to delete any characters, because there are no adjacent identical letters.


Example 3:
Input: s = ""aabaa"", cost = [1,2,3,4,1]
Output: 2
Explanation: Delete the first and last characters to get the string (""aba"").


constraint:
`s.length == cost.length`
`1 <= s.length, cost.length <= 10^5`
`1 <= cost[i] <= 10^4`
`s` contains only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob have an undirected graph with ""n"" nodes and 3 kinds of edges:
Type 1: Can only be traversed by Alice.

Type 2: Can only be traversed by Bob.

Type 3: Both Alice and Bob can pass.

Given an array ""edges"" where ""edges[i] = [typei, ui, vi]"" represents bidirectional edges of type ""typei"" between nodes ""ui"" and ""vi"", find the maximum number of edges that can be removed , so that after removing the edge, Alice and Bob can still fully traverse the graph. Alice and Bob completely traverse the graph if starting at any node they can reach all other nodes.

Returns the maximum number of edges you can remove, or ""-1"" if it is impossible for Alice and Bob to fully traverse the graph.


Example 1:
Input: n = 4, edges = [[3,1,2],[3,2,3],[1,1,3],[1,2,4],[1,1,2],[ 2,3,4]]
Output: 2
Explanation: If we delete 2 edges [1,1,2] and [1,1,3]. Alice and Bob can still fully traverse the graph. Removing any extra edges doesn't make it happen. So the maximum number of edges we can remove is 2.


Example 2:
Input: n = 4, sides = [[3,1,2],[3,2,3],[1,1,4],[2,1,4]]
output: 0
Explanation: Note that removing any edge does not allow Alice and Bob to fully traverse the graph.


Example 3:
Input: n = 4, sides = [[3,2,3],[1,1,2],[2,3,4]]
Output: -1
Explanation: Alice cannot reach node 4 from other nodes in the current graph. Likewise, Bob cannot reach 1 either. It is thus impossible to make the graph fully traversable.


constraint:
`1 <= n <= 10^5`
`1 <= edges.length <= min(10^5, 3 * n * (n-1) / 2)`
`edge[i].length == 3`
`1 <= edge[i][0] <= 3`
`1 <= edges[i][1] < edges[i][2] <= n`
All tuples ""(typei, ui, vi)"" are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given two arrays of positive integers, `boxes` and `warehouse`, representing respectively the heights of some unit-width boxes and the heights of `n` rooms in the warehouse. The rooms of the warehouse are labeled from ""0"" to ""n - 1"" from left to right, where ""warehouse[i]"" (starting from 0) is the height of the ith room.

Boxes are put into the warehouse according to the following rules:
Chests cannot be stacked.

You can rearrange the insertion order of boxes.

Boxes can be pushed into the warehouse from either side (left or right)
If the height of a room in the warehouse is less than the height of a box, then that box and all other boxes behind it will stop before that room.

Returns the maximum number of boxes you can put in the warehouse.


Example 1:
Input: boxes = [1,2,2,3,4], warehouse = [3,4,1,2]
Output: 4
explain:
We can store boxes in the following order:
1- Put the yellow box into room 2 from left or right.

2- Put the orange box in room 3 from the right.

3- Put the green box in room 1 from the left.

4- Place the red square in room 0 from the left.

Note that there are other efficient ways to place 4 boxes, such as swapping red and green boxes or red and orange boxes.


Example 2:
Input: boxes = [3,5,5,2], warehouse = [2,1,3,4,5]
Output: 3
explain:
It is not possible to put two boxes of height 5 into the warehouse because there is only 1 room with height >= 5.

Other valid solutions are to put the green box in room 2, or put the orange box in room 2 first, then the green and red boxes.


Example 3:
Input: boxes = [1,2,3], warehouse = [1,2,3,4]
Output: 3

Example 4:
Input: boxes = [4,5,6], warehouse = [3,3,3,3,3]
output: 0

constraint:
`n == warehouse. length`
`1 <= boxes.length, warehouse.length <= 105`
`1 <= boxes[i], warehouse[i] <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""row x column"" matrix ""mat"", where ""mat[i][j]"" is either ""0"" or ""1"", return the number of particular positions in ""mat"".

If `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are 0-indexed).


Example 1:
Input: mat = [[1,0,0],
              [0,0,1],
              [1,0,0]]
Output: 1
Explanation: (1,2) is a special position because mat[1][2] == 1 and all other elements in row 1 and column 2 are 0.


Example 2:
Input: mat = [[1,0,0],
              [0,1,0],
              [0,0,1]]
Output: 3
Explanation: (0,0), (1,1) and (2,2) are special positions.

Example 3:
Input: mat = [[0,0,0,1],
              [1,0,0,0],
              [0,1,1,0],
              [0,0,0,0]]
Output: 2

Example 4:
Input: mat = [[0,0,0,0,0],
              [1,0,0,0,0],
              [0,1,0,0,0],
              [0,0,1,0,0],
              [0,0,0,1,1]]
Output: 3

constraint:
`line == mat.length`
`cols == mat[i].length`
`1 <= rows, columns <= 100`
`mat[i][j]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a ""preference"" list of ""n"" friends, where ""n"" is always even.

For each person ""i"", ""preferences[i]"" contains a list of friends ordered by preference. In other words, friends who are higher on the list are more popular than friends who are lower on the list. Friends in each list are represented by integers from ""0"" to ""n-1"".

All friends are divided into two pairs. The pairs are given in the list ""pairs"", where ""pairs[i] = [xi, yi]"" means that ""xi"" is paired with ""yi"", and ""yi"" is paired with ""xi"".

However, such a combination may cause some small partners to be unhappy. Friend x is unhappy if x is paired with y and there is a friend u paired with v, but:
`x` prefers `u` over `y`, and
`u` prefers `x` over `v`.

Returns the number of unhappy friends.


Example 1:
Input: n = 4, preferences = [[1, 2, 3], [3, 2, 0], [3, 1, 0], [1, 2, 0]], pairs = [[0, 1] , [twenty three]]
Output: 2
explain:
Friend 1 is unhappy because:
- 1 pairs with 0, but prefers 3 over 0, and
- 3 prefer 1 to 2.

Friend 3 is unhappy because:
- 3 is paired with 2, but prefers 1 to 2, and
- 1 prefers 3 to 0.

Friends 0 and 2 are happy.


Example 2:
Input: n = 2, preference = [[1], [0]], pair = [[1, 0]]
output: 0
Explanation: Friends 0 and 1 are both happy.


Example 3:
Input: n = 4, preference = [[1, 3, 2], [2, 3, 0], [1, 3, 0], [0, 2, 1]], pair = [[1, 3] , [0, 2]]
Output: 4

constraint:
`2 <= n <= 500`
`n` is an even number.

`preferences. length == n`
`preferences[i].length == n - 1`
`0 <= preference[i][j] <= n - 1`
`preferences[i]` does not contain `i`.

All values ​​in `preferences[i]` are unique.

`pairs. length == n/2`
`pairs[i].length == 2`
`xi != yi`
`0 <= xi, yi <= n - 1`
Everyone is included in exactly one pair.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""points"" representing the integer coordinates of some points on a two-dimensional plane, where ""points[i] = [xi, yi]"".

The cost of connecting two points ""[xi, yi]"" and ""[xj, yj]"" is the Manhattan distance between them: ""|xi - xj|"" + |yi - yj|`, where `|val|` Indicates the absolute value of `val`.

Returns the minimum cost to connect all points. All points are connected if there is only one simple path between any two points.


Example 1:
Input: points = [[0,0],[2,2],[3,10],[5,2],[7,0]]
Output: 20
explain:
We can connect the points as shown above to get a minimum cost of 20.

Note that there is a unique path between each pair of points.


Example 2:
Input: points = [[3,12],[-2,5],[-4,1]]
Output: 18

Example 3:
Input: Points = [[0,0],[1,1],[1,0],[-1,1]]
Output: 4

Example 4:
Input: points = [[-1000000,-1000000],[1000000,1000000]]
Output: 4000000

Example 5:
Input: Points = [[0,0]]
output: 0

constraint:
`1 <= points.length <= 1000`
`-106 <= xi, yi <= 106`
All pairs `(xi, yi)` are distinct.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, you want to convert the string `s` to the string `t` any number of times using the following operation:
Selects a non-empty substring in s and sorts it in-place so that the characters are in ascending order.

For example, applying an operation to the underlined substring in ""14234"" results in ""12344"".

Returns ""true"" if the string ""s"" can be converted to the string ""t"". Otherwise, return ""false"".

A substring is a contiguous sequence of characters in a string.


Example 1:
Input: s = ""84532"", t = ""34852""
output: true
Explanation: You can convert s to t using the following sort operation:
""84532"" (from index 2 to 3) -> ""84352""
""84352"" (from index 0 to 2) -> ""34852""

Example 2:
Input: s = ""34521"", t = ""23415""
output: true
Explanation: You can convert s to t using the following sort operation:
""34521"" -> ""23451""
""23451"" -> ""23415""

Example 3:
Input: s = ""12345"", t = ""12435""
output: error

Example 4:
Input: s = ""1"", t = ""2""
output: error

constraint:
`s.length == t.length`
`1 <= s.length <= 105`
`s` and `t` only contain numbers from '0' to '9'.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Implement the `BSTIerator` class representing an inorder traversal iterator for a binary search tree (BST):
`BSTIerator(TreeNode root)` initializes an object of class `BSTIerator`. The ""root"" of the BST is given as part of the constructor. The pointer should be initialized to a non-existing number that is less than any element in the BST.

`boolean hasNext()` returns `true` if there is a number to the right of the pointer, otherwise returns `false`.

`int next()` moves the pointer to the right and returns the number at the pointer.

`boolean hasPrev()` returns `true` if there is a number to the left of the pointer, otherwise returns `false`.

`int prev()` moves the pointer to the left and returns the number at the pointer.

Note that the first call to `next()` will return the smallest element in the BST by initializing the pointer to a non-existing smallest number.

You can assume that `next()` and `prev()` calls will always work. That is, when calling `next()`/`prev()`, the in-order traversal will have at least one next/previous number.


Example 1:
enter
[""BSTIerator"", ""next"", ""next"", ""prev"", ""next"", ""hasNext"", ""next"", ""next"", ""next"", ""hasNext"", ""hasPrev"", ""prev"", "" Previous""]
[[[7, 3, 15, null, null, 9, 20]], [null], [null], [null], [null], [null], [null], [null], [null] , [empty], [empty], [empty], [empty]]
output
[empty, 3, 7, 3, 7, true, 9, 15, 20, false, true, 15, 9]
explain
// The underlined element is where the pointer is currently located.

BSTIerator bSTIterator = new BSTIerator([7, 3, 15, null, null, 9, 20]); // state is [3, 7, 9, 15, 20]
bSTIterator.next(); // state changes to [3, 7, 9, 15, 20], returns 3
bSTIterator.next(); // state changes to [3, 7, 9, 15, 20], returns 7
bSTIterator.prev(); // state changes to [3, 7, 9, 15, 20], returns 3
bSTIterator.next(); // state changes to [3, 7, 9, 15, 20], returns 7
bSTIterator.hasNext(); // return true
bSTIterator.next(); // state changes to [3, 7, 9, 15, 20], returns 9
bSTIterator.next(); // state changes to [3, 7, 9, 15, 20], returns 15
bSTIterator.next(); // state changes to [3, 7, 9, 15, 20], returns 20
bSTIterator.hasNext(); // returns false
bSTIterator.hasPrev(); // return true
bSTIterator.prev(); // state changes to [3, 7, 9, 15, 20], returns 15
bSTIterator.prev(); // state changes to [3, 7, 9, 15, 20], returns 9

constraint:
The number of nodes in the tree is in the range '[1, 105]'.

`0 <= Node.val <= 106`
At most `105` calls will be made to `hasNext`, `next`, `hasPrev` and `prev`.

Follow up: Can you solve this without precomputing the values ​​of the tree?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array arr of positive integers, compute the sum of all possible odd-length subarrays.

A subarray is a contiguous subsequence of an array.

Returns the sum of all odd-length subarrays of arr.


Example 1:
Input: arr = [1,4,2,5,3]
Output: 58
Explanation: The odd-length subarrays of arr and their sums are:
[1] = 1
[4] = 4
[2] = 2
[5] = 5
[3] = 3
[1,4,2] = 7
[4,2,5] = 11
[2,5,3] = 10
[1,4,2,5,3] = 15
If we add all these together we get 1 + 4 + 2 + 5 + 3 + 7 + 11 + 10 + 15 = 58

Example 2:
Input: arr = [1,2]
Output: 3
Explanation: There are only 2 subarrays of odd length, [1] and [2]. Their sum is 3.


Example 3:
Input: arr = [10,11,12]
Output: 66

constraint:
`1 <= arr.length <= 100`
`1 <= arr[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have an integer array `nums` and a `requests` array, where `requests[i] = [starti, endi]`. `ith` requests the sum of `nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]`. Both `starti` and `endi` are indexed from 0.

Returns the maximum sum of all requests across all permutations of `nums`.

Since the answer might be too large, return it modulo 109 + 7.


Example 1:
Input: nums = [1,2,3,4,5], request = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5], the result is as follows:
request[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
request[1] -> nums[0] + nums[1] = 2 + 1 = 3
Sum: 8 + 3 = 11.

The higher sum permutation is [3,5,4,2,1] and the result is:
request[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
request[1] -> nums[0] + nums[1] = 3 + 5 = 8
Sum: 11 + 8 = 19, which is the best you can do.


Example 2:
Input: nums = [1,2,3,4,5,6], request = [[0,1]]
Output: 11
Explanation: The permutation with the largest sum is [6,5,4,3,2,1], asking for the sum [11].


Example 3:
Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
Output: 47
Explanation: The permutation with the largest sum is [4,10,5,3,2,1] and the requested sum is [19,18,10].


constraint:
`n == nums. length`
`1 <= n <= 105`
`0 <= nums[i] <= 105`
`1 <= requests.length <= 105`
`request[i].length == 2`
`0 <= start <= end < n`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of positive integers, remove the smallest (possibly empty) subarray such that the sum of the remaining elements is divisible by ""p"". Deleting an entire array is not allowed.

Returns the length of the smallest subarray you need to delete, or ""-1"" if not possible.

A subarray is defined as a contiguous block of elements in the array.


Example 1:
Input: nums = [3,1,4,2], p = 6
Output: 1
Explanation: The sum of the elements in nums is 10, which cannot be divisible by 6. We can remove the subarray [4], and the sum of the remaining elements is 6, which is not divisible by 6.


Example 2:
Input: nums = [6,3,5,2], p = 9
Output: 2
Explanation: We cannot remove individual elements to obtain sums divisible by 9. The best way is to delete the subarray [5,2], leaving [6,3] which sums to 9.


Example 3:
Input: nums = [1,2,3], p = 3
output: 0
Explanation: The sum here is 6. It is already divisible by 3. So we don't need to delete anything.


Example 4:
Input: nums = [1,2,3], p = 7
Output: -1
Explanation: There is no way to get a sum divisible by 7 by deleting subarrays.


Example 5:
Input: nums = [1000000000,1000000000,1000000000], p = 3
output: 0

constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`1 <= p <= 109`",1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"I have a strange printer with the following two special requirements:
With each revolution, the printer prints a pattern of solid rectangles of a single color on the grid. This will mask the existing color in the rectangle.

Once a printer has used a color for the above operations, it cannot use the same color again.

Given an ""m x n"" matrix ""targetGrid"", where ""targetGrid[row][col]"" is the color at grid position ""(row, col)"".

Returns ""true"" if the matrix ""targetGrid"" can be printed, otherwise returns ""false"".


Example 1:
Input: targetGrid = [[1,1,1,1],[1,2,2,1],[1,2,2,1],[1,1,1,1]]
output: true

Example 2:
Input: targetGrid = [[1,1,1,1],[1,1,3,3],[1,1,3,4],[5,5,1,4]]
output: true

Example 3:
Input: targetGrid = [[1,2,1],[2,1,2],[1,2,1]]
output: error
Explanation: The targetGrid cannot be formed because alternate printing of the same color is not allowed.


Example 4:
Input: targetGrid = [[1,1,1],[3,1,3]]
output: error

constraint:
`m == targetGrid. length`
`n == targetGrid[i].length`
`1 <= meters, n <= 60`
`1 <= targetGrid[row][column] <= 60`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""text"" consisting of words that are separated by a certain number of spaces. Each word consists of one or more lowercase English letters and is separated by at least one space. Ensure that `text` contains at least one word.

Rearrange the spaces so that the number of spaces between each pair of adjacent words is equal and that number is maximized. If you can't redistribute all spaces evenly, put the extra spaces at the end, which means the returned string should be the same length as text .

Returns the string after rearranging the spaces.


Example 1:
Input: text = ""This is a sentence""
Output: ""This is a sentence""
Explanation: There are 9 spaces and 4 words in total. We can divide the 9 spaces between words equally: 9 / (4-1) = 3 spaces.


Example 2:
Input: text = ""Practice makes perfect""
Output: ""Practice makes perfect""
Explanation: There are 7 spaces and 3 words in total. 7 / (3-1) = 3 spaces plus 1 extra space. We put this extra space at the end of the string.


Example 3:
Input: text = ""hello world""
Output: ""Hello world""

Example 4:
Input: text = ""Walk udp packets into bar a""
Output: ""Walking udp packets into bar a""

Example 5:
Input: text = ""a""
output: ""one""

constraint:
`1 <= text.length <= 100`
`text` consists of lowercase English letters and `' '`.

`text` contains at least one word.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, returns the maximum number of unique substrings the given string can be split into.

You can split the string s into any non-empty list of substrings, where the concatenation of the substrings forms the original string. However, you have to split the substrings so they are all unique.

A substring is a contiguous sequence of characters in a string.


Example 1:
Input: s = ""ababccc""
Output: 5
Explanation: One way of maximal division is ['a', 'b', 'ab', 'c', 'cc']. A split like ['a', 'b', 'a', 'b', 'c', 'cc'] is invalid because you have 'a' and 'b' multiple times.


Example 2:
Input: s = ""aba""
Output: 2
Explanation: One way to max split is ['a', 'ba'].


Example 3:
Input: s = ""aa""
Output: 1
Explanation: No further splitting of the string was possible.


constraint:
`1 <= s.length <= 16`
`s` contains only lowercase English letters.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll end up with a ""row x column"" matrix ""grid"". Initially, you are located at the upper left `(0, 0)`, and at each step, you can only move right or down in the matrix.

Among all possible paths starting at ""(0, 0)"" in the upper left corner and ending at ""(rows - 1, cols - 1)"" in the lower right corner, find the path with the largest non-negative product. The product of a path is the product of all integers in the grid cells visited along the path.

Returns the largest nonnegative product modulo ""109 + 7"". Returns ""-1"" if the maximum product is negative.

Note that the modulo operation is performed after obtaining the maximum product.


Example 1:
Input: Grid = [[-1,-2,-3],
               [-2,-3,-3],
               [-3,-3,-2]]
Output: -1
Explanation: The path from (0, 0) to (2, 2) cannot have a non-negative product, so -1 is returned.


Example 2:
Input: Grid = [[1,-2,1],
               [1,-2,1],
               [3,-4,1]]
Output: 8
Explanation: The largest non-negative product is shown in bold (1 * 1 * -2 * -4 * 1 = 8).


Example 3:
Input: Grid = [[1, 3],
               [0,-4]]
output: 0
Explanation: The largest non-negative product is shown in bold (1 * 0 * -4 = 0).


Example 4:
Input: Grid = [[ 1, 4, 4, 0],
               [-2, 0, 0, 1],
               [ 1,-1,1,1]]
Output: 2
Explanation: The largest non-negative product is shown in bold (1 * -2 * 1 * -1 * 1 * 1 = 2).


constraint:
`1 <= rows, columns <= 15`
`-4 <= grid[i][j] <= 4`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two sets of points, the first set of points is ""size1"" points, the second set of points is ""size2"" points, and ""size1 >= size2"".

The ""cost"" of a connection between any two points is given in a ""size1 x size2"" matrix, where ""cost[i][j]"" is the cost of connecting point ""i"" of the first set with point ""j"" of the second set . Groups are connected if each point in two groups is connected to one or more points in the opposite group. In other words, every point in the first set must be connected to at least one point in the second set, and every point in the second set must be connected to at least one point in the first set.

Returns the minimum cost required to join two sets.


Example 1:
Input: Cost = [[15, 96], [36, 2]]
Output: 17
Explanation: The best way to connect groups is:
1--A
2--B
This results in a total cost of 17.


Example 2:
Input: Cost = [[1, 3, 5], [4, 1, 1], [1, 5, 3]]
Output: 4
Explanation: The best way to connect groups is:
1--A
2--B
2--C
3--A
This results in a total cost of 4.

Note that there are multiple points connected to point 2 in the first set and point A in the second set. It doesn't matter because there is no limit to the number of points that can be connected. We only care about the smallest total cost.


Example 3:
Input: Cost = [[2, 5, 1], [3, 4, 7], [8, 1, 2], [6, 2, 4], [3, 8, 8]]
Output: 10

constraint:
`size1 == cost. length`
`size2 == cost[i].length`
`1 <= size1, size2 <= 12`
`size1 >= size2`
`0 <= cost[i][j] <= 100`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary expression tree is a type of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has zero or two child nodes. Leaf nodes (nodes with 0 children) correspond to operands (numbers), internal nodes (nodes with 2 children) correspond to operators ""+"" (addition), ""-"" (subtraction), ""*""` (multiplication ) and `'/'` (division).

For each internal node with operator o, the infix expression it represents is (A o B) , where A is the expression represented by the left subtree and B is the expression represented by the right subtree.

Given a string ""s"", an infix expression containing operands, the above operators, and parentheses ""("" and """")"".

Return any valid binary expression tree whose inorder traversal reproduces s after omitting parentheses (see example below).

Note that the order of operations applies to `s`. That is, expressions in parentheses are evaluated first, and multiplication and division occur before addition and subtraction.

The operands must also appear in the same order in s and in the inorder traversal of the tree.


Example 1:
Input: s = ""3*4-2*5""
Output: [-,*,*,3,4,2,5]
Explanation: The tree above is the only valid tree in which an in-order traversal yields s.


Example 2:
Input: s = ""2-3/(5*2)+1""
Output: [+,-,1,2,/,null,null,null,null,3,*,null,null,5,2]
Explanation: The in-order traversal of the above tree is 2-3/5*2+1, which is the same as the s with the brackets removed. This tree also produces the correct result, and its operands are in the same order as they appear in s .

The following tree is also a valid binary expression tree with the same inorder traversal as s , but it is not a valid answer because it evaluates differently.

The third tree below is also invalid. While it produces the same result and is equivalent to the above tree, its inorder traversal does not produce s and its operands are not in the same order as s.


Example 3:
Input: s = ""1+2+3+4+5""
Output: [+,+,5,+,4,null,null,+,3,null,null,1,2]
Explanation: The tree [+,+,5,+,+,null,null,1,2,3,4] is also one of many other valid trees.


constraint:
`1 <= s.length <= 1000`
`s` consists of numbers and characters ""+"", ""-"", ""*"" and ""/"".

The operands in s are exactly 1-digit numbers.

`s` is guaranteed to be a valid expression.",0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The Leetcode file system keeps a log every time a user performs a change folder operation.

The operating instructions are as follows:
`""../""` : Move to the parent folder of the current folder. (If you are already in the main folder, please stay in the same folder).

`""./""` : stay in the same folder.

`""x/""` : Move to a subfolder named `x` (this folder is guaranteed to always exist).

You will get a list of string logs, where logs[i] is the action performed by the user at ith step.

The file system starts from the main folder and then executes the operations in logs.

Returns the minimum number of operations required to return to the home folder after a change folder operation.


Example 1:
Input: logs = [""d1/"",""d2/"",""../"",""d21/"",""./""]
Output: 2
Explanation: Use this to change the folder operation ""../"" 2 times, and then go back to the main folder.


Example 2:
Input: logs = [""d1/"",""d2/"",""./"",""d3/"",""../"",""d31/""]
Output: 3

Example 3:
Input: logs = [""d1/"", ""../"", ""../"", ""../""]
output: 0

constraint:
`1 <= logs.length <= 103`
`2 <= logs[i].length <= 10`
`logs[i]` contains lowercase English letters, numbers, `'.'` and `'/'`.

`logs[i]` follows the format described in the statement.

Folder names consist of lowercase English letters and numbers.",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are the operator of a Centennial Wheel with four gondolas, each of which can accommodate up to four people. You can spin the gondola counterclockwise, which will cost you ""runningCost"" dollars.

Given an array `customers` of length `n`, where `customers[i]` is the number of new customers that arrived just before `ith` rotation (with index 0). This means you have to spin the wheel `i` times before `customers[i]` customers arrive. You can't keep customers waiting if the gondola has room. Each customer pays ""Boarding Cost"" dollars when boarding the gondola closest to the ground, and exits after the gondola reaches the surface again.

You can stop the wheel at any time, including before servicing all customers. If you decide to stop serving customers, all subsequent rotations are free to keep all customers safe. Note that if there are more than four customers currently on the waiting list, only four will board the gondola and the rest will wait for the next rotation.

Returns the minimum number of spins you need to perform to maximize your profit. If there is no positive profit scenario, return -1.


Example 1:
Input: customers = [8,3], boardingCost = 5, runningCost = 6
Output: 3
Explanation: The number written on the gondola is the current number of people there.

1. 8 guests arrive, 4 board the boat, 4 wait for the next gondola, and the wheels turn. The current profit is 4 * $5 - 1 * $6 = $14.

2. 3 customers arrive, 4 wait to board the roulette, another 3 wait, and the roulette spins. The current profit is 8 * $5 - 2 * $6 = $28.

3. The last 3 guests board the gondola and the wheels turn. The current profit is 11 * $5 - 3 * $6 = $37.

The maximum profit after spinning the wheel 3 times is $37.


Example 2:
Input: customers = [10,9,6], boardingCost = 6, runningCost = 4
Output: 7
explain:
1. 10 guests arrive, 4 board the boat, 6 wait for the next gondola, and the wheels turn. The current profit is 4 * $6 - 1 * $4 = $20.

2. 9 guests arrive, 4 board the plane, 11 wait (the original 2 wait, 9 new wait), the wheel spins. The current profit is 8 * $6 - 2 * $4 = $40.

3. Finally 6 guests arrive, 4 board the plane, 13 wait, and the wheels turn. The current profit is 12 * $6 - 3 * $4 = $60.

4, 4 boards 9 etc., the wheels turn. The current profit is 16 * $6 - 4 * $4 = $80.

5, 4 plates, 5 etc., the wheels turn. The current profit is 20 * $6 - 5 * $4 = $100.

6. 4 boards 1 etc., the wheels turn. The current profit is 24 * $6 - 6 * $4 = $120.

7. 1 board, the wheels turn. The current profit is 25 * $6 - 7 * $4 = $122.

After spinning the wheel 7 times, the maximum profit is $122.


Example 3:
Input: Customer = [3,4,0,5,1], Boarding Cost = 1, Running Cost = 92
Output: -1
explain:
1. 3 passengers arrive, 3 board 0, etc., rotation. The current profit is 3 * $1 - 1 * $92 = -$89.

2. 4 customers arrive, 4 board, 0 wait, and the wheels turn. The current profit is 7 * $1 - 2 * $92 = -$177.

3. 0 passenger arrival, 0 boarding, 0 waiting, rotation. The current profit is 7 * $1 - 3 * $92 = -$269.

4. 5 customers arrive, 4 board the plane, 1 waits, and the wheels turn. The current profit is 11 * $1 - 4 * $92 = -$357.

5. 1 customer arrival, 2 boarding, 0 etc., rotation. The current profit is 13 * $1 - 5 * $92 = -$447.

Profit is never positive, so -1 is returned.


Example 4:
Input: Customers = [10,10,6,4,7], Boarding Cost = 3, Running Cost = 8
Output: 9
explain:
1. 10 customers arrive, 4 board and 6 wait, rotation. The current profit is 4 * $3 - 1 * $8 = $4.

2. 10 customers arrive, 4 board, 12 wait, and the wheels turn. The current profit is 8 * $3 - 2 * $8 = $8.

3. 6 customers arrive, 4 board, 14 wait, and the wheels turn. The current profit is 12 * $3 - 3 * $8 = $12.

4. 4 customers arrive, 4 board, 14 wait, and the wheels turn. The current profit is 16 * $3 - 4 * $8 = $16.

5. 7 customers arrive, 4 board, 17 wait, and the wheels turn. The current profit is 20 * $3 - 5 * $8 = $20.

6, 4 boards 13 etc., the wheels rotate. The current profit is 24 * $3 - 6 * $8 = $24.

7. 4 boards 9 etc., the wheels turn. The current profit is 28 * $3 - 7 * $8 = $28.

8. 4 boards 5 etc., the wheels turn. The current profit is 32 * $3 - 8 * $8 = $32.

9. 4 boards 1 etc., the wheels turn. The current profit is 36 * $3 - 9 * $8 = $36.

10. 1 board 0 wait, the wheel turns. The current profit is 37 * $3 - 10 * $8 = $31.

After spinning the wheel 9 times, the maximum profit is $36.


constraint:
`n == customers. length`
`1 <= n <= 105`
`0 <= customers[i] <= 50`
`1 <= boardingCost, runningCost <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A kingdom consists of a king, his children, grandsons, etc. Every once in a while, someone in the family dies or a child is born.

Kingdoms have a clear order of succession, with the king being the first member. Let's define a recursive function `Successor(x, curOrder)` that, given a person `x` and the current succession order, returns who should be the next person after `x` in the succession order.

successor(x, curOrder):
    If x has no children or all of x's children are in curOrder:
        Returns null if x is king
        Otherwise return the successor (parent of x, curOrder)
    Otherwise returns the oldest child of x not in curOrder
For example, suppose we have a kingdom consisting of a king, his children Alice and Bob (Alice is older than Bob), and Alice's son Jack.

Initially, `curOrder` will be `[""king""]`.

Calling `Successor(king, curOrder)` will return Alice, so we append to `curOrder` to get `[""king"", ""Alice""]`.

Calling `Successor(Alice, curOrder)` will return Jack, so we append to `curOrder` to get `[""king"", ""Alice"", ""Jack""]`.

Calling `Successor(Jack, curOrder)` will return Bob, so we append to `curOrder` to get `[""king"", ""Alice"", ""Jack"", ""Bob""]`.

Calling ""Successor(Bob, curOrder)"" will return ""null"". So the inheritance order will be `[""king"", ""Alice"", ""Jack"", ""Bob""]`.

Using the above function, we always get a unique inheritance order.

Implement the ""Throne Inheritance"" class:
`ThroneInheritance(string kingName)` initializes an object of class `ThroneInheritance`. The king's name is given as part of the constructor.

`void birth(string parentName, string childName)` means `parentName` gave birth to `childName`.

`void death(string name)` indicates the death of `name`. The person's death does not affect the ""Heir"" feature, nor does it affect the current order of succession. You can think of it as just marking the person as dead.

`string[] getInheritanceOrder()` returns a list representing the current inheritance order, excluding dead ones.


Example 1:
enter
[""ThroneInheritance"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""birth"", ""getInheritanceOrder"", ""death"", ""getInheritanceOrder""]
[[""King""], [""King"", ""Andy""], [""King"", ""Bob""], [""King"", ""Catherine""], [""Andy"", ""Matthew""] , [""bob"""", ""alex""], [""bob"", ""asha""], [null], [""bob""], [null]]
output
[null, null, null, null, null, null, null, [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""], null, [""king "", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]]
explain
ThroneInheritance t= new ThroneInheritance(""King""); // Order: King
t.birth(""King"", ""Andy""); // Order: King > Andy
t.birth(""King"", ""Bob""); // Order: King > Andy > Bob
t.birth(""King"", ""Catherine""); // Order: King > Andy > Bob > Catherine
t.birth(""Andy"", ""Matthew""); // order: king > andy > matthew > bob > catherine
t.birth(""Bob"", ""Alex""); // order: king > andy > matthew > bob > alex > catherine
t.birth(""Bob"", ""Asha""); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // returns [""king"", ""andy"", ""matthew"", ""bob"", ""alex"", ""asha"", ""catherine""]
t.death(""Bob""); // order: king > andy > matthew > bob > alex > asha > catherine
t.getInheritanceOrder(); // returns [""king"", ""andy"", ""matthew"", ""alex"", ""asha"", ""catherine""]

constraint:
`1 <= kingName.length, parentName.length, childName.length, name.length <= 15`
`kingName`, `parentName`, `childName` and `name` contain only lowercase English letters.

All parameters `childName` and `kingName` are different.

All `name` arguments to `death` will be passed first to the constructor or as `childName` to `birth`.

Every time birth(parentName, childName) is called, parentName is guaranteed to be alive.

At most ""105"" calls will be made to ""birth"" and ""death"".

There will be at most 10 calls to getInheritanceOrder.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` buildings numbered from `0` to `n - 1`. Each building has some employees. It's relocation season, and some employees want to change buildings where they live.

Given an array ""requests"", where ""requests[i] = [fromi, toi]"" represents requests for employees to transfer from building ""fromi"" to building ""toi"".

All buildings are full, so the request list can only be implemented if, for each building, the net change in employee transfers is zero. This means that the number of employees leaving is equal to the number of employees moving in. For example, if ""n = 3"" and two employees leave building ""0"", one leaves building ""1"" and one leaves building ""2""`, there should be two employees moving to building ""0"", one employee Moved to ""1"" floor and one employee moved to ""2"" floor.

Returns the maximum number of requests that can be fulfilled.


Example 1:
Input: n = 5, requests = [[0,1],[1,0],[0,1],[1,2],[2,0],[3,4]]
Output: 5
Explanation: Let's look at the request:
Starting in building 0, we have employees x and y, who both want to move to building 1.

Starting in building 1, we have employees a and b who want to move to building 2 and building 0 respectively.

Starting in building 2, we have employee z, who wants to move to building 0.

From building 3 we have employee c and they want to move to building 4.

From building 4, we didn't have any requests.

We can fulfill user x and b's request by swapping places.

We can fulfill the request of users y, a and z by swapping the locations of the 3 buildings.


Example 2:
Input: n = 3, request = [[0,0],[1,2],[2,1]]
Output: 3
Explanation: Let's look at the request:
Starting in building 0, we have employee x, who want to stay in the same building 0.

From building 1, we have employee y, who wants to move to building 2.

From building 2 we have employee z who wants to move to building 1.

We can fulfill all requirements.

Example 3:
Input: n = 4, requests = [[0,3],[3,1],[1,2],[2,0]]
Output: 4

constraint:
`1 <= n <= 20`
`1 <= requests.length <= 16`
`request[i].length == 2`
`0 <= fromi, toi < n`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree and a node ""u"" in the tree, return the closest node at the same level to the right of ""u"", or ""null"" if ""u"" is the rightmost node in it level.


Example 1:
Input: root = [1,2,3,null,4,5,6], u = 4
Output: 5
Explanation: The closest peer node to the right of node 4 is node 5.


Example 2:
Input: root = [3,null,4,2], u = 2
output: empty
Explanation: 2 has no nodes on the right.


Example 3:
Input: root = [1], u = 1
output: empty

Example 4:
Input: root = [3,4,2,null,null,null,1], u = 4
Output: 2

constraint:
The number of nodes in the tree is in the range '[1, 105]'.

`1 <= Node.val <= 105`
All values ​​in the tree are distinct.

`u` is a node in the binary tree rooted by `root`.",0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design parking systems for parking lots. There are three types of parking spaces in the parking lot: large, medium and small, and the number of each type of parking space is fixed.

Implement the ""ParkingSystem"" class:
`ParkingSystem(int big, int medium, int small)` initializes an object of class `ParkingSystem`. The number of parking spaces for each parking space is given as part of the constructor.

`bool addCar(int carType)` checks if there is a parking space of `carType` for the car about to enter the parking lot. `carType` can be divided into three types: large, medium, and small, represented by `1`, `2`, and `3` respectively. Cars can only be parked in their ""carType"" parking spaces. If there is no space available, return ""false"", otherwise park the car in a space of that size and return ""true"".


Example 1:
enter
[""ParkingSystem"", ""addCar"", ""addCar"", ""addCar"", ""addCar""]
[[1, 1, 0], [1], [2], [3], [1]]
output
[empty, true, true, false, false]
explain
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // returns true because there is 1 available slot for a large car
parkingSystem.addCar(2); // returns true because there is 1 available slot for a medium car
parkingSystem.addCar(3); // returns false because no car spaces are available
parkingSystem.addCar(1); // returns false because there are no car slots available. It's already taken.


constraint:
`0 <= large, medium, small <= 1000`
`carType` is `1`, `2` or `3`
There will be at most 1000 calls to addCar",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"LeetCode employees use key cards to unlock office doors. Each time an employee uses a key card, the security system saves the employee's name and time of use. If any worker uses the key card three or more times within an hour, the system will sound an alarm.

You'll get a list of strings `keyName` and `keyTime`, where `[keyName[i], keyTime[i]]` corresponds to a person's name and the time of day their keycard was used.

Access times are given in 24-hour time format ""HH:MM"", such as ""23:51"" and ""09:49"".

Returns a list of unique worker names who received alerts for frequent keycard use. Sort names in ascending alphabetical order.

Note that `""10:00""` - `""11:00""` are considered to be within an hour, while `""22:51""` - `""23:52""` are not considered to be within an hour an hour's time.


Example 1:
Input: keyName = [""daniel"",""daniel"",""daniel"",""luis"",""luis"",""luis"",""luis""],keyTime = [""10:00"",""10:40"","" 11:00"",""09:00"",""11:00"",""13:00"",""15:00""]
Output: [""Daniel""]
Explanation: ""Daniel"" uses the key card 3 times in one hour (""10:00"", ""10:40"", ""11:00"").


Example 2:
Input: keyName = [""alice"",""alice"",""alice"",""bob"",""bob"",""bob"",""bob""], keyTime = [""12:01"",""12:00"","" 18:00"",""21:00"",""21:20"",""21:30"",""23:00""]
Output: [""Bob""]
Explanation: ""bob"" used the key card 3 times in one hour (""21:00"", ""21:20"", ""21:30"").


Example 3:
Input: keyName = [""john"",""john"",""john""], keyTime = [""23:58"",""23:59"",""00:01""]
output: []

Example 4:
Input: keyName = [""leslie"",""leslie"",""leslie"",""clare"",""clare"",""clare"",""clare""], keyTime = [""13:00"",""13:20"","" 14:00"",""18:00"",""18:51"",""19:30"",""19:49""]
Output: [""Claire"", ""Leslie""]

constraint:
`1 <= keyName.length, keyTime.length <= 105`
`keyName.length == keyTime.length`
`keyTime[i]` has the format ""HH:MM"".

`[keyName[i], keyTime[i]]` is unique.

`1 <= keyName[i].length <= 10`
`keyName[i] contains only lowercase English letters. `",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays of non-negative integers rowSum and colSum, where rowSum[i] is the sum of elements in row ith and colSum[j] is the sum of elements in row i and column j of a two-dimensional matrix. In other words, you don't know the elements of the matrix, but you know the sum of each row and column.

Finds any matrix of nonnegative integers of size rowSum.length x colSum.length that satisfy the requirements of rowSum and colSum.

Returns a two-dimensional array representing any matrix that satisfies the requirements. It is guaranteed that at least one matrix satisfying the requirement exists.


Example 1:
Input: rowSum = [3,8], colSum = [4,7]
Output: [[3,0],
         [1,7]]
explain:
Row 0: 3 + 0 = 3 == rowSum[0]
First row: 1 + 7 = 8 == rowSum[1]
Column 0: 3 + 1 = 4 == colSum[0]
First column: 0 + 7 = 7 == colSum[1]
The row and column sums match, and all matrix elements are nonnegative.

Another possible matrix is: [[1,2],
                             [3,5]]

Example 2:
Input: rowSum = [5,7,10], colSum = [8,6,8]
Output: [[0,5,0],
         [6,1,0],
         [2,0,8]]

Example 3:
Input: rowSum = [14,9], colSum = [6,9,8]
Output: [[0,9,5],
         [6,0,3]]

Example 4:
Input: rowSum = [1,0], colSum = [1]
output: [[1],
         [0]]

Example 5:
Input: rowSum = [0], colSum = [0]
output: [[0]]

constraint:
`1 <= rowSum.length, colSum.length <= 500`
`0 <= rowSum[i], colSum[i] <= 108`
`sum(row) == sum(column)`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have ""k"" servers numbered ""0"" through ""k-1"" that handle multiple requests concurrently. Each server has unlimited computing power, but cannot handle more than one request at a time. Requests are allocated to servers according to a certain algorithm:
The ith (indexed from 0) request arrives.

If all servers are busy, the request is dropped (not processed at all).

If the (i % k)th server is available, the request is assigned to that server.

Otherwise, assign the request to the next available server (wrapping around the server list and starting at 0 if necessary). For example, if the ith server is busy, try to distribute the request to the (i+1)th server, then the (i+2)th server, and so on.

Given a strictly increasing array of positive integers arrival, where arrival[i] represents the arrival time of the ith request, and another array load, where load[i] represents the load of the ith request (the time it takes to complete). Your goal is to find the busiest server. A server is considered busiest if it successfully handles the most requests among all servers.

Returns a list containing the IDs (indexed from 0) of the busiest servers. You can return IDs in any order.


Example 1:
Input: k = 3, reach = [1,2,3,4,5], load = [5,2,3,3,3]
output: [1]
explain:
All servers are available to start with.

The first 3 requests are processed sequentially by the first 3 servers.

Request 3 comes in. Server 0 is busy, so it is assigned to the next available server, which is 1.

Request 4 came in and was discarded because all servers were busy and couldn't handle it.

Servers 0 and 2 each handle one request, while server 1 handles two requests. Therefore, Server 1 is the busiest server.


Example 2:
Input: k = 3, reach = [1,2,3,4], load = [1,2,1,2]
output: [0]
explain:
The first 3 requests are handled by the first 3 servers.

Request 3 comes in. It is handled by server 0 because the server is available.

Server 0 handled two requests, while servers 1 and 2 each handled one request. So server 0 is the busiest server.


Example 3:
Input: k = 3, reach = [1,2,3], load = [10,12,11]
Output: [0,1,2]
Explanation: Each server handles one request, so they are all considered the busiest.


Example 4:
Input: k = 3, reach = [1,2,3,4,8,9,10], load = [5,2,10,3,1,2,2]
output: [1]

Example 5:
Input: k = 1, arrival = [1], load = [1]
output: [0]

constraint:
`1 <= k <= 105`
`1 <= arrival.length, load.length <= 105`
`arrival.length == load.length`
`1 <= arrival[i], load[i] <= 109`
`arrival` is strictly increasing.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" consisting of non-negative integers. `nums` is considered special if there exists a number `x` such that there are exactly `x` numbers in `nums` greater than or equal to `x`.

Note that ""x"" is not necessarily an element in ""nums"".

Return `x` if the array is special, `-1` otherwise. It can be shown that if `nums` is special, then the value of `x` is unique.


Example 1:
Input: nums = [3,5]
Output: 2
Explanation: There are 2 values ​​(3 and 5) greater than or equal to 2.


Example 2:
Input: nums = [0,0]
Output: -1
Explanation: No number matches the condition of x.

If x = 0, there should be 0 numbers >= x, but there are 2.

If x = 1, there should be 1 number >= x, but there are 0.

If x = 2, there should be 2 numbers >= x, but there are 0.

x cannot be larger because there are only 2 numbers in nums.


Example 3:
Input: nums = [0,4,3,0,4]
Output: 3
Explanation: There are 3 values ​​greater than or equal to 3.


Example 4:
Input: nums = [3,6,7,7,0]
Output: -1

constraint:
`1 <= nums.length <= 100`
`0 <= nums[i] <= 1000`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary tree is named Even-Odd if the following conditions are met:
The root of a binary tree is at level index ""0"", its children are at level index ""1"", their children are at level index ""2"", and so on.

For each even-indexed level, all nodes at that level have odd integer values ​​in strictly increasing order (left to right).

For each odd-indexed level, all nodes at that level have even integer values ​​in strictly decreasing order (left to right).

Given the ""root"" of a binary tree, return ""true"" if the binary tree is an odd-even tree, or ""false"" otherwise.


Example 1:
Input: root = [1,10,4,3,null,7,9,12,8,6,null,null,2]
output: true
Explanation: The node value of each layer is:
Level 0: [1]
Level 1: [10,4]
Level 2: [3,7,9]
Level 3: [12,8,6,2]
Since levels 0 and 2 are both odd and increasing, and levels 1 and 3 are both even and decreasing, the tree is an odd-even tree.


Example 2:
Input: root = [5,4,2,3,3,7]
output: error
Explanation: The node value of each layer is:
Level 0: [5]
Level 1: [4,2]
Level 2: [3,3,7]
Node values ​​in level 2 must be in strictly increasing order, so this tree is not an odd-even tree.


Example 3:
Input: root = [5,9,1,3,5,7]
output: error
Explanation: Tier 1 node values ​​should be even.


Example 4:
input: root = [1]
output: true

Example 5:
Input: root = [11,8,6,1,3,9,11,30,20,18,16,12,10,4,2,17]
output: true

constraint:
The number of nodes in the tree is in the range '[1, 105]'.

`1 <= Node.val <= 106`",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""points"", an integer ""angle"" and your ""location"", where ""location = [posx, posy]"" and ""points[i] = [xi, yi]"" both represent the X-Y plane.

Initially, you are facing east from your position. You can't leave your position, but you can rotate. In other words, `posx` and `posy` cannot be changed. Your field of view (measured in degrees) is represented by ""angles"", which determine how wide you can see from any given viewing direction. Let ""d"" be the degree of counterclockwise rotation. Then, your field of view is the inclusive range of angles `[d - angle/2, d + angle/2]`.

Your browser does not support the video tag or the video format.

You can see a set of points if, for each point, the angle formed by that point, your position, and the direction directly east from your position is in your field of view.

A coordinate can have multiple points. Where you are may have points that you will always see regardless of your rotation. Dots do not obstruct your view of other dots.

Returns the maximum number of points you can see.


Example 1:
Input: points = [[2,1],[2,2],[3,3]], angle = 90, location = [1,1]
Output: 3
Explanation: The shaded area represents your field of view. All points are visible in your view, including [3,3], even though [2,2] is in front and within the same view.


Example 2:
Input: points = [[2,1],[2,2],[3,4],[1,1]], angle = 90, location = [1,1]
Output: 4
Description: All points can be displayed in your field of view, including the point at your location.


Example 3:
Input: points = [[1,0],[2,1]], angle = 13, location = [1,1]
Output: 1
Explanation: You can only see one of the two dots, as pictured above.


constraint:
`1 <= points.length <= 105`
`points[i].length == 2`
`location. length == 2`
`0 <= angle < 360`
`0 <= posx, posy, xi, yi <= 100`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", you have to convert it to ""0"" multiple times using:
Change the rightmost (0th) bit in the binary representation of n.

If bit (i-1) is set to 1 and bits (i-2) through 0 are set, change the ith bit 0` in the binary representation of n.

Returns the minimum number of operations to convert ""n"" to ""0"".


Example 1:
Input: n = 0
output: 0

Example 2:
Input: n = 3
Output: 2
Explanation: The binary representation of 3 is ""11"".

""11"" -> ""01"" does the second operation because bit 0 is 1.

""01"" -> ""00"" with the first operation.


Example 3:
Input: n = 6
Output: 4
Explanation: The binary representation of 6 is ""110"".

""110"" -> ""010"" does the second operation because bit 1 is 1 and bits 0 through 0 are 0.

""010"" -> ""011"" with the first operation.

""011"" -> ""001"" does the second operation because bit 0 is 1.

""001"" -> ""000"" with the first operation.


Example 4:
Input: n = 9
Output: 14

Example 5:
Input: n = 333
Output: 393

constraint:
`0 <= n <= 109`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A binary expression tree is a type of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has zero or two child nodes. Leaf nodes (nodes with 0 children) correspond to operands (variables), and internal nodes (nodes with two children) correspond to operators. In this problem, we only consider the ""+"" operator (i.e. addition).

Given the roots of two binary expression trees, ""root1"" and ""root2"". Returns true if the two binary expression trees are equivalent. Otherwise, return ""false"".

Two binary expression trees are equivalent if they evaluate to the same value, regardless of what the variable is set to.

Follow up: If the tree also supported the ""-"" operator (i.e. subtraction), what would you change in your solution?

Example 1:
Input: root1 = [x], root2 = [x]
output: true

Example 2:
Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,c]
output: true
Explanation: `a + (b + c) == (b + c) + a`

Example 3:
Input: root1 = [+,a,+,null,null,b,c], root2 = [+,+,a,b,d]
output: error
Explanation: `a + (b + c) != (b + d) + a`

constraint:
The number of nodes in both trees is equal, odd and in the range ""[1, 4999]"".

`Node.val` is `'+'` or a lowercase English letter.

Guarantees that the given tree is a valid binary expression tree.",0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string is a valid bracketed string (indicated as VPS) if the string satisfies one of the following conditions:
It is an empty string `""""`, or a single character not equal to `""(""` or `"")""`,
It can be written as `AB` (`A` connected to `B`), where `A` and `B` are VPSs, or
It can be written `(A)`, where `A` is a VPS.

We can similarly define the nesting depth `depth(S)` of any VPS `S` as follows:
`depth("""") = 0`
`depth(C) = 0`, where `C` is a string where a single character is not equal to `""(""` or `"")""`.

`depth(A + B) = max(depth(A), depth(B))`, where `A` and `B` are VPS.

`depth(""("" + A + "")"") = 1 + depth(A)`, where `A` is the VPS.

For example, `""""`, `""()()""`, and `""()(()())""` are VPSs (with nesting depths of 0, 1, and 2), while `"")("" ` and `""(()""` is not a VPS.

Given a VPS represented as a string s, return the nesting depth of s.


Example 1:
Input: s = ""(1+(2*3)+((8)/4))+1""
Output: 3
Explanation: The number 8 is within 3 nested parentheses in the string.


Example 2:
Input: s = ""(1)+((2))+(((3)))""
Output: 3

Example 3:
Input: s = ""1+(2*3)/(2-1)""
Output: 1

Example 4:
Input: s = ""1""
output: 0

constraint:
`1 <= s.length <= 100`
`s` consists of the digits `0-9` and the characters `'+'`, `'-'`, `'*'`, `'/'`, `'('`, and `')'`.

A parenthesized expression s is guaranteed to be a VPS.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are ""n"" cities with infrastructure, and there are some ""roads"" connecting these cities. Each roads[i] = [ai, bi] means that there is a two-way road between cities ai and bi.

The network rank of two different cities is defined as the total number of roads directly connected to either city. If a road connects directly to two cities, it is only counted once.

The maximum network level of the infrastructure is the maximum network level of all pairs of different cities.

Given an integer ""n"" and an array ""roads"", return the maximum network grade for the entire infrastructure.


Example 1:
Input: n = 4, roads = [[0,1],[0,3],[1,2],[1,3]]
Output: 4
Explanation: City 0 and 1 have network class 4 because there are 4 roads connected to 0 or 1. Roads between 0 and 1 are only counted once.


Example 2:
Input: n = 5, roads = [[0,1],[0,3],[1,2],[1,3],[2,3],[2,4]]
Output: 5
Explanation: There are 5 roads connecting to city 1 or 2.


Example 3:
Input: n = 8, roads = [[0,1],[1,2],[2,3],[2,4],[5,6],[5,7]]
Output: 5
Explanation: The network rank of 2 and 5 is 5. Note that it is not necessary to connect all cities.


constraint:
`2 <= n <= 100`
`0 <= roads.length <= n * (n - 1) / 2`
`roads[i].length == 2`
`0 <= ai, bi <= n-1`
`ai != bi`
Each pair of cities has at most one road connecting them.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""a"" and ""b"" of the same length. Pick an index and split two strings at the same index, split ""a"" into two strings: ""aprefix"" and ""asuffix"", where ""a = aprefix + asuffix"", and split ""b"" Split into two strings: ""bprefix"" and ""bsuffix` where `b = bprefix + bsuffix`. Check whether `aprefix+bsuffix` or `bprefix+asuffix` form a palindrome.

When splitting the string s into ssuffix and ssuffix, either ssuffix or ssuffix is ​​allowed to be empty. For example, if `s = ""abc""`, then `"""" + ""abc""`, `""a"" + ""bc""`, `""ab"" + ""c""`, and `""abc"" + """"` are Effective split.

Returns true if a palindrome can be formed, false otherwise.

Note that ""x + y"" means the concatenation of the strings ""x"" and ""y"".


Example 1:
Input: a = ""x"", b = ""y""
output: true
Explanation: The answer is true if a or b is a palindrome, because you can split as follows:
prefix = """", suffix = ""x""
bprefix = """", bsuffix = ""y""
Then, aprefix + bsuffix = """" + ""y"" = ""y"", is a palindrome.


Example 2:
Input: a = ""abdef"", b = ""fecab""
output: true

Example 3:
Input: a = ""ulacfd"", b = ""jizalu""
output: true
Explanation: Split them at index 3:
prefix = ""ula"", suffix = ""cfd""
bprefix = ""jiz"", bsuffix = ""alu""
Then, aprefix + bsuffix = ""ula"" + ""alu"" = ""ulaalu"", is a palindrome.


Example 4:
Input: a = ""xbdef"", b = ""xecab""
output: error

constraint:
`1 <= a.length, b.length <= 105`
`a.length == b.length`
`a` and `b` consist of lowercase English letters",0,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are `n` cities numbered from `1` to `n`. Given an array ""edges"" of size ""n-1"", where ""edges[i] = [ui, vi]"" represents the bidirectional edges between cities ""ui"" and ""vi"". There is a unique path between each pair of cities. In other words, the city forms a tree.

A subtree is a subset of cities where each city is reachable from every other city in the subset, where the path between each pair passes only through the cities in the subset. If a city is present in one subtree but not in the other, the two subtrees are different.

For each ""d"" from ""1"" to ""n-1"", find the number of subtrees in which the maximum distance between any two cities is equal to ""d"".

Returns an array of size ""n-1"", where the ""dth"" element (indexed from 1) is the number of subtrees whose maximum distance between any two cities is equal to ""d"".

Note that the distance between two cities is the number of edges in the path between them.


Example 1:
Input: n = 4, sides = [[1,2],[2,3],[2,4]]
Output: [3,4,0]
explain:
A subtree with subsets {1,2}, {2,3}, and {2,4} has a maximum distance of 1.

A subtree with subsets {1,2,3}, {1,2,4}, {2,3,4}, and {1,2,3,4} has a maximum distance of 2.

No subtree has two nodes with a maximum distance of 3 between them.


Example 2:
Input: n = 2, sides = [[1,2]]
output: [1]

Example 3:
Input: n = 3, sides = [[1,2],[2,3]]
output: [2,1]

constraint:
`2 <= n <= 15`
`edges. length == n-1`
`edge[i].length == 2`
`1 <= ui, vi <= n`
All pairs `(ui, vi)` are different.",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string ""text"". We want to display text on the screen with width w and height h. You can choose any font size from the array ""fonts"", which contains the available font sizes in ascending order.

You can use the `FontInfo` interface to get the width and height of any character at any available font size.

The `FontInfo` interface is defined as follows:
interface font information {
  // Returns the on-screen width of the character ch using the font size fontSize.

  // O(1) per call
  public int getWidth(int fontSize, char ch);
  // Returns the height of any character on the screen using the font size fontSize.

  // O(1) per call
  public int getHeight(int fontSize);
}
The computed width of `text` for some `fontSize` is the sum of each `getWidth(fontSize, text[i])` call, each `0 <= i < text.length` (0 indexed). The computed height of `text` for some `fontSize` is `getHeight(fontSize)`. Note that `text` is displayed on one line.

If you call getHeight or getWidth with the same parameters, FontInfo is guaranteed to return the same value.

Also guaranteed for any font size of ""fontSize"" and any character ""ch"":
`getHeight(fontSize) <= getHeight(fontSize+1)`
`getWidth(fontSize, ch) <= getWidth(fontSize+1, ch)`
Returns the largest font size that can be used to display ""text"" on the screen. Returns `-1` if `text` cannot fit on a display with any font size.


Example 1:
Input: text = ""helloworld"", w = 80, h = 20, fonts = [6,8,10,12,14,16,18,24,36]
Output: 6

Example 2:
Input: text = ""leetcode"", w = 1000, h = 50, fonts = [1,2,4]
Output: 4

Example 3:
Input: text = ""easyquestion"", w = 100, h = 100, fonts = [10,15,20,25]
Output: -1

constraint:
`1 <= text.length <= 50000`
`text` contains only lowercase English letters.

`1 <= w <= 107`
`1 <= h <= 104`
`1 <= fonts.length <= 105`
`1 <= font[i] <= 105`
`fonts` are sorted in ascending order, without duplicates.",0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" of integers, return the average of the remaining integers after removing the smallest ""5%"" and largest ""5%"" elements.

Answers with actual answers within 10-5 will be considered accepted.


Example 1:
Input: arr = [1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3]
Output: 2.00000
Explanation: After erasing the minimum and maximum values ​​of this array, all elements are equal to 2, so the mean is 2.


Example 2:
Input: arr = [6,2,7,5,1,2,0,3,10,2,5,0,5,5,0,8,7,6,8,0]
Output: 4.00000

Example 3:
Input: arr = [6,0,7,0,7,5,7,8,3,4,0,7,8,1,6,8,1,1,2,4,8,1,9 ,5,4,3,8,5,10,8,6,6,1,0,6,10,8,2,3,4]
Output: 4.77778

Example 4:
Input: arr = [9,7,8,7,7,8,4,4,6,8,8,7,6,8,8,9,2,6,0,0,1,10,8 ,6,3,3,5,1,10,9,0,7,10,0,10,4,1,10,6,9,3,6,0,0,2,7,0,6 ,7,2,9,7,7,3,0,1,6,1,10,3]
Output: 5.27778

Example 5:
Input: arr = [4,8,4,10,0,7,1,3,7,8,8,3,4,1,6,2,1,1,8,0,9,8,0 ,3,9,10,3,10,1,10,7,3,2,1,4,9,10,7,6,4,0,8,5,1,2,1,6,2 ,5,0,7,10,9,10,3,7,10,5,8,5,7,6,7,6,10,9,5,10,5,5,7,2,10 ,7,7,8,2,0,1,1]
Output: 5.29167

constraint:
`20 <= arr.length <= 1000`
`arr.length` is a multiple of `20`.

`0 <= arr[i] <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array of network towers ""towers"" and an integer ""radius"", where ""towers[i] = [xi, yi, qi]"" represents the ""i-th"" network tower at position ""(xi, yi)"", And the figure of merit `qi`. All coordinates are integral coordinates on the X-Y plane, and the distance between two coordinates is the Euclidean distance.

The integer ""radius"" represents the maximum distance that can be reached from the tower. If the distance is less than or equal to ""radius"", the tower can be reached. Beyond that distance, the signal gets confused, and the tower can't reach it.

The signal quality of an `ith` tower at coordinate `(x, y)` is calculated using the formula `⌊qi / (1 + d)⌋`, where `d` is the distance between the tower and the coordinate. The network quality at a coordinate is the sum of the signal quality of all reachable towers.

Returns the integral coordinates of the maximum network quality. If there are multiple coordinates with the same network quality, the coordinate with the smallest lexicographical order is returned.

notes:
A coordinate `(x1, y1)` is lexicographically less than `(x2, y2)` if `x1 < x2` or `x1 == x2` and `y1 < y2`.

`⌊val⌋` is the largest integer less than or equal to `val` (the floor function).


Example 1:
Input: tower = [[1,2,5],[2,1,7],[3,1,9]], radius = 2
output: [2,1]
explain:
At coordinates (2, 1) the total mass is 13
- a mass of 7 from (2, 1) results in ⌊7 / (1 + sqrt(0)⌋ = ⌊7⌋ = 7
- A mass of 5 from (1, 2) results in ⌊5 / (1 + sqrt(2)⌋ = ⌊2.07⌋ = 2
- a mass of 9 from (3, 1) results in ⌊9 / (1 + sqrt(1)⌋ = ⌊4.5⌋ = 4
No other coordinate is of higher quality.


Example 2:
Input: tower = [[23,11,21]], radius = 9
Output: [23,11]

Example 3:
Input: tower = [[1,2,13],[2,1,7],[0,1,9]], radius = 2
output: [1,2]

Example 4:
Input: tower = [[2,1,9],[0,1,9]], radius = 2
output: [0,1]
Explanation: (0, 1) and (2, 1) are both qualitatively optimal, but (0, 1) is lexicographically smallest.


constraint:
`1 <= towers. length <= 50`
`tower[i].length == 3`
`0 <= xi, yi, qi <= 50`
`1 <= radius <= 50`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given ""n"" points on a 1D plane where the ""i-th"" point (from ""0"" to ""n-1"") lies at ""x = i"", find out how we can plot ""k"" exactly Count non-overlapping line segments, each covering two or more points. The endpoints of each segment must have integer coordinates. `k` line segments do not have to cover all `n` points, they can share endpoints.

Returns the number of ways we can draw ""k"" non-overlapping line segments. Since this number can be large, it is returned modulo 109 + 7.


Example 1:
Input: n = 4, k = 2
Output: 5
explain:
The two line segments are shown in red and blue.

The image above shows 5 different ways {(0,2),(2,3)}, {(0,1),(1,3)}, {(0,1),(2,3)} , {(1,2),(2,3)}, {(0,1),(1,2)}.


Example 2:
Input: n = 3, k = 1
Output: 3
Explanation: The 3 ways are {(0,1)}, {(0,2)}, {(1,2)}.


Example 3:
Input: n = 30, k = 7
Output: 796297179
Explanation: The total number of possible ways to draw 7 line segments is 3796297200. Taking this number modulo 109 + 7 gives 796297179.


Example 4:
Input: n = 5, k = 3
Output: 7

Example 5:
Input: n = 3, k = 2
Output: 1

constraint:
`2 <= n <= 1000`
`1 <= k <= n-1`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Write an API that generates fancy sequences using `append`, `addAll` and `multAll` operations.

Implement the `Fancy` class:
`Fancy()` initializes the object with an empty sequence.

`void append(val)` appends an integer `val` at the end of the sequence.

`void addAll(inc)` increments all existing values ​​in the sequence by the integer `inc`.

`void multAll(m)` Multiplies all existing values ​​in the sequence by the integer `m`.

`int getIndex(idx)` Gets the current value at index `idx` (0-indexed) of the sequence modulo `109 + 7`. Returns ""-1"" if the index is greater than or equal to the length of the sequence.


Example 1:
enter
[""Fancy"", ""append"", ""addAll"", ""append"", ""multAll"", ""getIndex"", ""addAll"", ""append"", ""multAll"", ""getIndex"", ""getIndex"", ""getIndex""]
[[], [2], [3], [7], [2], [0], [3], [10], [2], [0], [1], [2]]
output
[empty, empty, empty, empty, empty, 10, empty, empty, empty, 26, 34, 20]
explain
Fancy Fancy = new Fancy();
fancy append(2); // fancy sequence: [2]
fancy.addAll(3); // fancy sequence: [2+3] -> [5]
fancy append(7); // fancy sequence: [5, 7]
fancy.multAll(2); // fancy sequence: [5*2, 7*2] -> [10, 14]
fancy.getIndex(0); // returns 10
fancy.addAll(3); // fancy sequence: [10+3, 14+3] -> [13, 17]
fancy append(10); // fancy sequence: [13, 17, 10]
fancy.multAll(2); // fancy sequence: [13*2, 17*2, 10*2] -> [26, 34, 20]
fancy.getIndex(0); // returns 26
fancy. getIndex(1); // returns 34
fancy.getIndex(2); // returns 20

constraint:
`1 <= val, inc, m <= 100`
`0 <= idx <= 105`
Up to a total of 105 calls to append, addAll, multAll and getIndex will be made.",0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string s of even length consisting of the digits 0 to 9 and two integers a and b.

You can apply one of the following two operations on `s` any number of times in any order:
Add `a` to all odd indices (starting from 0) of `s`. Numbers after ""9"" cycle back to ""0"". For example, if `s = ""3456""` and `a = 5`, then `s` becomes `""3951""`.

Rotate s right by b position. For example, if `s = ""3456""` and `b = 1`, then `s` becomes `""6345""`.

Returns the lexicographically smallest string obtainable by applying the above operations to s any number of times.

The string `a` is lexicographically smaller than the string `b` (of the same length). If in the first position where `a` and `b` differ, the letter of the string `a` occurs earlier in the alphabet than The corresponding letter in `b`. For example, ""0158"" is lexicographically smaller than ""0190"" because the first position they differ is the third letter, and ""5"" comes before ""9"".


Example 1:
Input: s = ""5525"", a = 9, b = 2
Output: ""2050""
Explanation: We can apply the following operations:
start: ""5525""
rotation: ""2555""
Add: ""2454""
Add: ""2353""
Rotation: ""5323""
Add: ""5222""
Add: ""5121""
Rotation: ""2151""
Add: ""2050""
Unable to get strings lexicographically less than '2050'.


Example 2:
Input: s = ""74"", a = 5, b = 1
Output: ""24""
Explanation: We can apply the following operations:
start: ""74""
Rotation: ""47""
Add: ""42""
Rotation: ""24""
Unable to get strings lexicographically less than '24'.


Example 3:
Input: s = ""0011"", a = 4, b = 2
Output: ""0011""
Explanation: No sequence of operations can give a lexicographic string smaller than ""0011"".


Example 4:
Input: s = ""43987654"", a = 7, b = 3
Output: ""00553311""

constraint:
`2 <= s.length <= 100`
`s.length` is an even number.

`s` contains only numbers from `0` to `9`.

`1 <= a <= 9`
`1 <= b <= s.length - 1`",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are the manager of the basketball team. For an upcoming tournament, you want to select the team with the highest total points. A team's score is the sum of the scores of all players on the team.

However, basketball teams do not allow conflicts. If the younger player's score is strictly higher than the older player's, then there is a conflict. There will be no conflicts between players of the same age.

Given two lists, `scores` and `ages`, where each `scores[i]` and `ages[i]` represent the score and age of the ith player respectively, return the highest total scoring team of all possible basketballs .


Example 1:
Input: Score = [1,3,5,10,15], Age = [1,2,3,4,5]
Output: 34
Explanation: You can select all players.


Example 2:
Input: Score = [4,5,6,5], Age = [2,1,2,1]
output: 16
Explanation: It is best to choose the last 3 players. Note that you can select multiple peers.


Example 3:
Input: Score = [1,2,3,5], Age = [8,9,10,1]
Output: 6
Explanation: It is best to choose the top 3 players.

constraint:
`1 <= scores.length, ages.length <= 1000`
`scores.length == ages.length`
`1 <= score[i] <= 106`
`1 <= age[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"We have `n` cities, labeled from `1` to `n`. Two distinct cities with labels ""x"" and ""y"" are directly connected by a bidirectional road if and only if ""x"" and ""y"" share a common divisor strictly greater than some ""threshold"". More formally, there is a road between cities with labels ""x"" and ""y"" if there exists an integer z and all of the following conditions are met:
`x % z == 0`,
`y % z == 0`, and
`z > threshold`.

Given two integers ""n"" and ""threshold"" and an array of ""queries"", you have to determine for each ""queries[i] = [ai, bi]"" whether the cities ""ai"" and ""bi"" are directly connected or indirectly land. (i.e. there are some paths between them).

returns an array `answer` where `answer.length == queries.length` and `answer[i]` is `true` If there is a path between `ai` and `bi` for query `ith`, Or answer[i] is false if there is no path.


Example 1:
Input: n = 6, threshold = 2, query = [[1,4],[2,5],[3,6]]
output: [false, false, true]
Explanation: The divisor of each number:
1:1
2: 1, 2
3: 1, 3
4: 1, 2, 4
5: 1, 5
6: 1, 2, 3, 6
Using the underlined factors above the threshold, only cities 3 and 6 have a common divisor, so they are
Only directly connected ones. Result for each query:
[1,4] 1 is not connected to 4
[2,5] 2 is not connected to 5
[3,6] 3 is connected to 6 via the path 3--6

Example 2:
Input: n = 6, threshold = 0, query = [[4,5],[3,4],[3,2],[2,6],[1,3]]
Output: [true,true,true,true,true]
Explanation: The divisor of each number is the same as the previous example. However, since the threshold is 0,
All divisors can be used. Since all numbers divisor by 1, all cities are connected.


Example 3:
Input: n = 5, threshold = 1, query = [[4,5],[4,5],[3,2],[2,3],[3,4]]
Output: [false, false, false, false, false]
Explanation: Only cities 2 and 4 have a common divisor 2 strictly greater than the threshold 1, so they are the only cities that are directly connected.

Note that there can be multiple queries for the same pair of nodes [x, y], and querying [x, y] is equivalent to querying [y, x].


constraint:
`2 <= n <= 104`
`0 <= threshold <= n`
`1 <= queries.length <= 105`
`query[i].length == 2`
`1 <= ai, bi <= cities`
`ai != bi`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a ""suffix"" token for an arithmetic expression, build and return a binary expression tree representing that expression.

Postfix notation is a notation for writing arithmetic expressions in which the operands (numbers) appear before their operators. For example, the postfix marker for the expression 4*(5-(7+2)) represents ""-"",""* in the array postfix = [""4"",""5"",""7"",""2"",""+"" ""]`.

The `Node` class is the interface you should use to implement a binary expression tree. The returned tree will be tested with the ""evaluate"" function, which should evaluate the value of the tree. You should not delete the `Node` class; however, you can modify it as needed and define other classes to implement it as needed.

A binary expression tree is a type of binary tree used to represent arithmetic expressions. Each node of a binary expression tree has zero or two child nodes. Leaf nodes (nodes with 0 children) correspond to operands (numbers), internal nodes (nodes with two children) correspond to operators ""+"" (addition), ""-"" (subtraction), ""*""` (multiplication ) and `'/'` (division).

It is guaranteed that no subtree will produce a value whose absolute value exceeds ""109"", and that all operations are valid (i.e. no division by zero).

Follow up: Can you make the expression tree more modular? For example, can your design support other operators without changing the existing ""evaluate"" implementation?

Example 1:
Input: s = [""3"",""4"",""+"",""2"",""*"",""7"",""/""]
Output: 2
Explanation: The calculation result of this expression is the above binary tree, the expression is (`(3+4)*2)/7) = 14/7 = 2.`

Example 2:
Input: s = [""4"",""5"",""7"",""2"",""+"",""-"",""*""]
Output: -16
Explanation: The calculation result of this expression is the above binary tree, and the expression is 4*(5-`(2+7)) = 4*(-4) = -16.`

Example 3:
Input: s = [""4"",""2"",""+"",""3"",""5"",""1"",""-"",""*"",""+""]
Output: 18

Example 4:
Input: s = [""100"",""200"",""+"",""2"",""/"",""5"",""*"",""7"",""+""]
Output: 757

constraint:
`1 <= s.length < 100`
`s.length` is odd.

`s` consists of numbers and characters ""+"", ""-"", ""*"" and ""/"".

If s[i] is a number, its integer representation does not exceed 105.

`s` is guaranteed to be a valid expression.

The absolute value of the result and the intermediate value will not exceed `109`.

It is guaranteed that no expression will divide by zero.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0
"To test a newly designed keyboard, the tester pressed a series of ""n"" keys, one at a time.

Given a string keysPressed of length n, where keysPressed[i] is the ith-th key pressed in the test sequence, and a sorted list releaseTimes, where releaseTimes[i] is the time when the ith-th key was released. Both arrays are 0-indexed. The 0th key is pressed at time 0, and each subsequent key is pressed at the exact time the previous key was released.

Testers want to know the key press that lasted the longest. The duration of the ith keypress is releaseTimes[i] - releaseTimes[i - 1], and the duration of the 0th keypress is releaseTimes[0].

Note that the same key may be pressed multiple times during the test, and that multiple presses of the same key may have different durations.

Returns the key of the longest pressed key. If there are more than one such key, the lexicographically largest key among the keys is returned.


Example 1:
Input: releaseTimes = [9,29,49,50], keysPressed = ""cbcd""
Output: ""c""
Explanation: The keys are as follows:
'c' has a key duration of 9 (pressed at time 0 and released at time 9).

'b' has a keypress duration of 29 - 9 = 20 (pressed at time 9 and released at time 29 immediately after releasing the previous character).

'c' has a keypress duration of 49 - 29 = 20 (time 29 pressed immediately after releasing the previous character, and released at time 49).

'd' has a keypress duration of 50 - 49 = 1 (pressed at time 49 and released at time 50 immediately after releasing the previous character).

The longest of these is the keystroke of ""b"" and the second keystroke of ""c"", both with a duration of 20.

'c' is lexicographically greater than 'b', so the answer is 'c'.


Example 2:
Input: releaseTimes = [12,23,36,46,62], keysPressed = ""spuda""
output: ""one""
Explanation: The keys are as follows:
's' has a keypress duration of 12.

The keypress duration for 'p' is 23 - 12 = 11.

The keypress duration for 'u' is 36 - 23 = 13.

'd' has a keypress duration of 46 - 36 = 10.

The keypress duration for 'a' is 62 - 46 = 16.

The longest of these is the ""a"" keystroke with a duration of 16.


constraint:
`releaseTimes. length == n`
`keysPressed.length == n`
`2 <= n <= 1000`
`1 <= releaseTimes[i] <= 109`
`releaseTimes[i] < releaseTimes[i+1]`
`keysPressed` contains only lowercase English letters.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"If a sequence of numbers consists of at least two elements and the difference between every two consecutive elements is the same, it is called an arithmetic sequence. More formally, a sequence s is arithmetic iff s[i+1] - s[i] == s[1] - s[0] for all valid i .

For example, these are arithmetic sequences:
1, 3, 5, 7, 9
7, 7, 7, 7
3, -1, -5, -9
The following sequences are not arithmetic sequences:
1, 1, 2, 5, 7
Given an array ""nums"" of ""n"" integers, and two arrays ""l"" and ""r"" of ""m"" integers each, representing ""m"" range queries, where the ""ith"" A query is the range `[l[​​i], r[i]]`. All arrays are 0-indexed.

Returns a list of `boolean` elements `answer`, where `answer[i]` is `true` if the subarray `nums[l[i]], nums[l[i]+1], ... , nums [ r[i]]` can be rearranged to form an arithmetic progression, otherwise `false`.


Example 1:
Input: nums = `[4,6,5,9,3,7]`, l = `[0,0,2]`, r = `[2,3,5]`
Output: `[true,false,true]`
explain:
In query 0, the subarray is [4,6,5]. This can be rearranged to [6,5,4], which is an arithmetic progression.

In the first query, the subarray is [4,6,5,9]. This cannot be rearranged as an arithmetic progression.

In the second query, the subarray is `[5,9,3,7]. This ` can be rearranged as `[3,5,7,9]`, which is an arithmetic progression.


Example 2:
Input: nums = [-12,-9,-3,-12,-6,15,20,-25,-20,-15,-10], l = [0,1,6,4,8, 7], r = [4,4,9,7,9,10]
Output: [false, true, false, false, true, true]

constraint:
`n == nums. length`
`m == l.length`
`m == r.length`
`2 <= n <= 500`
`1 <= meters <= 500`
`0 <= l[i] < r[i] < n`
`-105 <= nums[i] <= 105`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are a hiker preparing for an upcoming hike. Given `heights`, which is a 2D array of size `rows x columns`, where `heights[row][col]` represents the height of the cell `(row, col)`. You are at the top left cell ""(0, 0)"" and you want to move to the bottom right cell ""(rows-1, columns-1)"" (ie 0 indexed). You can move up, down, left, or right, and you want to find a route with the least effort.

The effort of a route is the maximum absolute height difference between two consecutive cells of the route.

Returns the minimum force required to travel from the upper left cell to the lower right cell.


Example 1:
Input: Height = [[1,2,2],[3,8,2],[5,3,5]]
Output: 2
Explanation: The path of [1,3,5,3,5] has a maximum absolute difference of 2 in consecutive cells.

This is better than the route [1,2,2,2,5] where the maximum absolute difference is 3.


Example 2:
Input: Height = [[1,2,3],[3,8,4],[5,3,5]]
Output: 1
Explanation: The route of [1,2,3,4,5] has a maximum absolute difference of 1 in consecutive cells, which is better than the route [1,3,5,3,5].


Example 3:
Input: Height = [[1,2,1,1,1],[1,2,1,2,1],[1,2,1,2,1],[1,2,1,2, 1],[1,1,1,2,1]]
output: 0
Instructions: This route requires no effort.


constraint:
`line == height.length`
`column == height[i].length`
`1 <= rows, columns <= 100`
`1 <= height[i][j] <= 106`",0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an ""m x n"" ""matrix"", return a new matrix ""answer"" where ""answer[row][col]"" is the rank of ""matrix[row][col]"".

Rank is an integer indicating how large an element is compared to other elements. It is calculated using the following rules:
Rank is an integer starting from ""1"".

If two elements ""p"" and ""q"" are in the same row or column, then:

If `p < q` then `rank(p) < rank(q)`
If `p == q` then `rank(p) == rank(q)`
If `p > q` then `rank(p) > rank(q)`
rank should be as small as possible.

Guarantees that `answer` is unique under the given rule.


Example 1:
Input: matrix = [[1,2],[3,4]]
Output: [[1,2],[2,3]]
explain:
matrix[0][0] has rank 1 because it is the smallest integer in its row and column.

matrix[0][1] has rank 2 because matrix[0][1] > matrix[0][0] and matrix[0][0] is rank 1.

matrix[1][0] has rank 2 because matrix[1][0] > matrix[0][0] and matrix[0][0] is rank 1.

matrix[1][1] has rank 3 because matrix[1][1] > matrix[0][1], matrix[1][1] > matrix[1][0], and matrix[0]] [1] and matrix[1][0] are rank 2.


Example 2:
Input: matrix = [[7,7],[7,7]]
Output: [[1,1],[1,1]]

Example 3:
Input: Matrix = [[20,-21,14],[-19,4,19],[22,-47,24],[-19,4,19]]
Output: [[4,2,3],[1,3,4],[5,1,6],[1,3,4]]

Example 4:
Input: Matrix = [[7,3,6],[1,4,5],[9,8,2]]
Output: [[5,1,4],[1,2,3],[6,3,1]]

constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 500`
`-109 <= matrix[row][column] <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A polynomial linked list is a special type of linked list in which each node represents an item in a polynomial expression.

Each node has three properties:
`coefficient`: An integer representing the multiplier for the term. The term ""9x4"" has a factor of ""9"".

`power`: An integer representing the power. The power of the term ""9x4"" is ""4"".

`next`: pointer to the next node in the list, or `null` if it is the last node of the list.

For example, the polynomial 5x3 + 4x - 7 is represented by a linked list of polynomials as follows:
A linked list of polynomials must be in its canonical form: the polynomials must be in strictly descending order by their ""power"" values. In addition, items whose ""coefficient"" is ""0"" are omitted.

Given two polynomial linked list heads, `poly1` and `poly2`, add the polynomials and return the head of the polynomial sum.

`PolyNode` format:
The input/output format is a list of ""n"" nodes, where each node is represented as its ""[coefficient, power]"". For example, the polynomial ""5x3 + 4x - 7"" would be represented as: ""[[5,3],[4,1],[-7,0]]"".


Example 1:
Input: poly1 = [[1,1]], poly2 = [[1,0]]
Output: [[1,1],[1,0]]
Explanation: poly1 = x. poly2 = 1. The sum is x + 1.


Example 2:
Input: poly1 = [[2,2],[4,1],[3,0]], poly2 = [[3,2],[-4,1],[-1,0]]
Output: [[5,2],[2,0]]
Explanation: poly1 = 2x2 + 4x + 3. poly2 = 3x2 - 4x - 1. The sum is 5x2 + 2. Note that we omitted the ""0x"" term.


Example 3:
Input: poly1 = [[1,2]], poly2 = [[-1,2]]
output: []
Explanation: The sum is 0. We return an empty list.


constraint:
`0 <= n <= 104`
`-109 <= PolyNode.coefficient <= 109`
`PolyNode.coefficient != 0`
`0 <= PolyNode.power <= 109`
`PolyNode.power > PolyNode.next.power`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of integers, sort the array in ascending order based on the frequency of occurrence of the values. If multiple values ​​have the same frequency, they are sorted in descending order.

Returns the sorted array.


Example 1:
Input: nums = [1,1,2,2,2,3]
Output: [3,1,1,2,2,2]
Explanation: The frequency of ""3"" is 1, the frequency of ""1"" is 2, and the frequency of ""2"" is 3.


Example 2:
Input: nums = [2,3,1,3,2]
Output: [1,3,3,2,2]
Explanation: '2' and '3' both have a frequency of 2, so they are sorted in descending order.


Example 3:
Input: nums = [-1,1,-6,4,5,-6,1,4,1]
Output: [5,-1,4,4,-6,-6,1,1,1]

constraint:
`1 <= nums.length <= 100`
`-100 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` `points` on a 2D plane, where `points[i] = [xi, yi]`, returns the widest vertical region between two points such that there are no points within the region.

A vertical region is a region of fixed width that extends infinitely along the y-axis (i.e. infinite height). The widest vertical region is the region with the largest width.

Note that points at the edge of a vertical region are not considered included in the region.


Example 1:
of
Input: points = [[8,7],[9,9],[7,4],[9,7]]
Output: 1
Explanation: Both red and blue regions are optimal.


Example 2:
Input: points = [[3,1],[9,0],[1,0],[1,4],[5,3],[8,8]]
Output: 3

constraint:
`n == points. length`
`2 <= n <= 105`
`points[i].length == 2`
`0 <= xi, yi <= 109`",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings `s` and `t`, find the ways in which you can choose a non-empty substring of `s` and replace a single character with a different character such that the resulting substring is a substring of `t` quantity. In other words, find the number of substrings in s that differ from a substring in t by exactly one character.

For example, the underlined substrings in `""computer""` and `""computation""` only differ on `'e'`/`'a', so this is an efficient way to do it.

Returns the number of substrings satisfying the above conditions.

A substring is a contiguous sequence of characters in a string.


Example 1:
Input: s = ""aba"", t = ""baba""
Output: 6
Explanation: The following are pairs of substrings in s and t that differ by exactly 1 character:
(""Aba"", ""Baba"")
(""Aba"", ""Baba"")
(""Aba"", ""Baba"")
(""Aba"", ""Baba"")
(""Aba"", ""Baba"")
(""Aba"", ""Baba"")
The underlined part is a substring selected from s and t.


Example 2:
Input: s = ""ab"", t = ""bb""
Output: 3
Explanation: The following are pairs of substrings in s and t that differ by 1 character:
(""ab"", ""bb"")
(""ab"", ""bb"")
(""ab"", ""bb"")
The underlined part is a substring selected from s and t.


Example 3:
Input: s = ""a"", t = ""a""
output: 0

Example 4:
Input: s = ""abe"", t = ""bbc""
Output: 10

constraint:
`1 <= s.length, t.length <= 100`
`s` and `t` consist of lowercase English letters only.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0
"You will get a list of strings ""words"" and a string ""target"" of the same length.

Your task is to form a ""goal"" using the given ""words"" according to the following rules:
`target` should be formed from left to right.

To form the `ith` characters of `target` (starting from 0), you select the `kth` characters of the `jth` string in `words` if `target[i] = words[j][k]` .

Once you have used the `kth` character of the `jth` string of `words`, you can no longer use the `xth` character of any string in `words` where `x <= k`. In other words, all characters to the left of or at index ""k"" become unavailable for each string.

This process is repeated until the string ""target"" is formed.

Note that you can use multiple characters from the same string in `words` if the above conditions are met.

Returns the number of ways to form `target` from `words`. Since the answer might be too large, return it modulo 109 + 7.


Example 1:
Input: words = [""acca"",""bbbb"",""caca""], target = ""aba""
Output: 6
Instructions: There are 6 ways to form a goal.

""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""caca"")
""aba"" -> index 0 (""acca""), index 1 (""bbbb""), index 3 (""acca"")
""aba"" -> index 0 (""acca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""acca"")
""aba"" -> index 1 (""caca""), index 2 (""bbbb""), index 3 (""caca"")

Example 2:
Input: words = [""abba"",""baab""], target = ""bab""
Output: 4
Explanation: There are 4 ways to form a goal.

""bab"" -> index 0 (""baab""), index 1 (""baab""), index 2 (""abba"")
""bab"" -> index 0 (""baab""), index 1 (""baab""), index 3 (""baab"")
""bab"" -> index 0 (""baab""), index 2 (""baab""), index 3 (""baab"")
""bab"" -> index 1 (""abba""), index 2 (""baab""), index 3 (""baab"")

Example 3:
Input: words = [""abcd""], target = ""abcd""
Output: 1

Example 4:
Input: words = [""abab"",""baba"",""abba"",""baab""], target = ""abba""
output: 16

constraint:
`1 <= words.length <= 1000`
`1 <= word[i].length <= 1000`
All strings in `words` have the same length.

`1 <= target.length <= 1000`
`words[i]` and `target` contain only lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""arr"" consisting of distinct integers and an array ""pieces"" of integers where the integers in ""pieces"" are distinct. Your goal is to form ""arr"" by concatenating the arrays in ""fragments"" in arbitrary order. However, reordering of the integers in each array ""pieces[i]"" is not allowed.

Returns true if the array arr can be formed from pieces. Otherwise, return ""false"".


Example 1:
Input: arr = [85], pieces = [[85]]
output: true

Example 2:
Input: arr = [15,88], pieces = [[88],[15]]
output: true
Explanation: concatenate `[15]` then `[88]`

Example 3:
Input: arr = [49,18,16], pieces = [[16,18,49]]
output: error
Explanation: We cannot reorder pieces[0] even if the numbers match.


Example 4:
Input: arr = [91,4,64,78], pieces = [[78],[4,64],[91]]
output: true
Explanation: concatenate `[91]` then `[4,64]` then `[78]`

Example 5:
Input: arr = [1,3,5,7], pieces = [[2,4,6,8]]
output: error

constraint:
`1 <= pieces.length <= arr.length <= 100`
`sum(pieces[i].length) == arr.length`
`1 <= pieces[i].length <= arr.length`
`1 <= arr[i], pieces[i][j] <= 100`
The integers in `arr` are distinct.

The integers in `pieces` are distinct (i.e., if we flatten the pieces in a 1D array, all integers in that array are distinct).",1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return a string of length ""n"" consisting of only vowels (""a"", ""e"", ""i"", ""o"", ""u"") sorted lexicographically quantity.

If ""s[i]"" is the same as or precedes ""s[i+1]"" in the alphabet for all valid ""i"", the string ""s"" is lexicographically Sort.


Example 1:
Input: n = 1
Output: 5
Explanation: The 5 collating strings consisting only of vowels are `[""a"",""e"",""i"",""o"",""u""].

Example 2:
Input: n = 2
Output: 15
Explanation: The sorted 15 vowel-only strings are
[""aa"",""ae"",""ai"",""ao"",""au"",""ee"",""ei"",""eo"",""eu"",""ii"",""io"",""iu"","" oo"", ""ou"", ""uu""].

Note that ""ea"" is not a valid string because ""e"" comes after ""a"" in the alphabet.


Example 3:
Input: n = 33
Output: 66045

constraint:
`1 <= n <= 50`",0,1,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""heights"" representing the heights of buildings, some ""bricks"" and some ""ladders"".

You start your journey from building ""0"" and may use bricks or ladders to move to the next building.

When moving from building ""i"" to building ""i+1"" (0 indexed),
If the height of the current building is greater than or equal to the height of the next building, no ladders or bricks are required.

If the height of the current building is less than the height of the next building, you can use a ladder or ""(h[i+1] - h[i])"" bricks.

Returns the farthest building index (0 index) you can reach if you use the given ladder and brick optimally.


Example 1:
Input: Heights = [4,2,7,6,9,14,12], Bricks = 5, Ladders = 1
Output: 4
Explanation: Starting from Building 0, you can follow these steps:
- Since 4 >= 2, go to building 1 without using ladders or bricks.

- Use 5 blocks to go to building 2. You have to use bricks or ladders because 2 < 7.

- Since 7 >= 6, go to building 3 without using ladders or bricks.

- Use the only ladder to go to building 4. You have to use bricks or ladders because 6 < 9.

Getting past building 4 is impossible because you have no more bricks or ladders.


Example 2:
Input: Heights = [4,12,2,7,3,18,20,3,19], Bricks = 10, Ladders = 2
Output: 7

Example 3:
Input: height = [14,3,19,3], bricks = 17, ladder = 0
Output: 3

constraint:
`1 <= heights. length <= 105`
`1 <= height[i] <= 106`
`0 <= bricks <= 109`
`0 <= ladder <= heights.length`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Bob is standing at the cell ""(0, 0)"" and he wants to reach the ""destination"": ""(row, column)"". He can only move right and down. You will help Bob by giving directions to get him to his ""destination"".

These instructions are represented as a string where each character is:
`'H'`, meaning move horizontally (go right), or
`'V'`, meaning move vertically (down).

Multiple instructions will direct Bob to his ""destination"". For example, if ""Destination"" is ""(2, 3)"", then ""HHHVV"" and ""HVHVH"" are both valid instructions.

However, Bob is very picky. Bob has a lucky number ""k"" and he wants the ""kth"" lexicographically smallest instruction to lead him to his ""destination"". `k` is 1-indexed.

Given an array of integers ""destination"" and an integer ""k"", return the lexicographically smallest ""kth"" instruction that takes Bob to ""destination"".


Example 1:
Input: destination = [2,3], k = 1
Output: ""HHHVV""
Explanation: All instructions reaching (2, 3) are in lexicographical order as follows:
[""HHHVV"", ""HHVHV"", ""HHVVH"", ""HVHHV"", ""HVHVH"", ""HVVHH"", ""VHHHV"", ""VHHVH"", ""VHVHH"", ""VVHHH""].


Example 2:
Input: destination = [2,3], k = 2
Output: ""HHVHV""

Example 3:
Input: Destination = [2,3], k = 3
Output: ""HHVVH""

constraint:
`destination.length == 2`
`1 <= rows, columns <= 15`
`1 <= k <= nCr(row + column, row)`, where `nCr(a, b)` means that `a` selects `b`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" of a binary tree, returns the lowest common ancestor (LCA) of two given nodes ""p"" and ""q"". Returns ""null"" if node ""p"" or ""q"" does not exist in the tree. All values ​​of nodes in the tree are unique.

According to the definition of LCA on Wikipedia: ""The lowest common ancestor of two nodes `p` and `q` in a binary tree `T` is the lowest node that has `p` and `q` as descendants (we allow a node to be its own offspring)"". A descendant of node ""x"" is node ""y"", which is on the path from node ""x"" to some leaf node.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: Nodes 5 and 1 have an LCA of 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: Nodes 5 and 4 have an LCA of 5. According to the definition of LCA, a node can be a descendant of itself.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 10
output: empty
Explanation: Node 10 does not exist in the tree, so returns null.


constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
Follow up: Can you find the LCA for traversing the tree without checking if the node exists?",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string s is said to be good if no two distinct characters in s have the same frequency.

Given a string s, return the minimum number of characters that need to be removed to make s valid.

The frequency of a character in a string is the number of times it occurs in the string. For example, in the string ""aab"", ""a"" has a frequency of ""2"" and ""b"" has a frequency of ""1"".


Example 1:
Input: s = ""aab""
output: 0
Explanation: `s` is already good.


Example 2:
Input: s = ""aaabbbcc""
Output: 2
Explanation: You can remove the two 'b's to get the correct string ""aaabcc"".

Another way is to remove a 'b' and a 'c', resulting in the nice string ""aaabbc"".


Example 3:
Input: s = ""ceabaacb""
Output: 2
Explanation: You can remove the two 'c's to get the correct string ""eabaab"".

Note that we only care about characters that are still in the string at the end (i.e. ignore the frequency of 0 ).


constraint:
`1 <= s.length <= 105`
`s` contains only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have an ""inventory"" of balls of different colors, and you have a customer who wants to ""order"" balls of any color.

Customers comment on colored balls strangely. The value of each colored ball is the number of balls of that color you currently have in your ""inventory"". For example, if you have ""6"" yellow balls, the customer will pay ""6"" for the first yellow ball. After the transaction, there are only ""5"" yellow balls left, so the value of the next yellow ball is ""5"" (i.e., the value of the balls decreases with the number you sell to customers).

You are given an integer array ""inventory"", where ""inventory[i]"" represents the number of balls of color ""it"" that you initially owned. You'll also get an integer ""order"" representing the total number of balls the customer wants. You can sell the balls in any order.

Returns the maximum total value that can be obtained after selling the ""Order"" ball. Since the answer might be too large, return it modulo 109 + 7 .


Example 1:
Input: Inventory = [2,5], Order = 4
Output: 14
Explanation: 1 sell (2) for the first color and 3 sells (5 + 4 + 3) for the second color.

The maximum total is 2 + 5 + 4 + 3 = 14.


Example 2:
Input: Inventory = [3,5], Order = 6
Output: 19
Explanation: The first color sells 2 times (3 + 2), the second color sells 4 times (5 + 4 + 3 + 2).

The maximum total is 3 + 2 + 5 + 4 + 3 + 2 = 19.


Example 3:
Input: Inventory = [2,8,4,10,6], Order = 20
Output: 110

Example 4:
Input: Inventory = [1000000000], Order = 1000000000
Output: 21
Explanation: Sell the first color 1000000000 times for a total value of 500000000500000000. 500000000500000000 modulo 109 + 7 = 21.


constraint:
`1 <= inventory.length <= 105`
`1 <= stock[i] <= 109`
`1 <= order <= min(sum(inventory[i]), 109)`",0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""instructions"", you are asked to create a sorted array based on the elements in ""instructions"". You start with an empty container `nums`. For each element from left to right in ""instructions"", insert it into ""nums"". The cost per insertion is the minimum of:
The number of elements currently in `nums` that is strictly less than `instructions[i]`.

The number of elements currently in `nums` strictly greater than `instructions[i]`.

For example, if element ""3"" is inserted into ""nums = [1,2,3,5]"", the insertion cost is ""min(2, 1)"" (elements ""1"" and ""2"" are less than ""3`, element `5` is greater than `3`) and `nums` will become `[1,2,3,3,5]`.

Returns the total cost of inserting all elements from `instructions` into `nums`. Since the answer may be large, return it modulo `109 + 7`

Example 1:
Input: command = [1,5,6,2]
Output: 1
Explanation: Start with nums = [].

Insert 1, cost min(0, 0) = 0, now nums = [1].

Insert 5, cost min(1, 0) = 0, now nums = [1,5].

Insert 6, cost min(2, 0) = 0, now nums = [1,5,6].

Insert 2, cost min(1, 2) = 1, now nums = [1,2,5,6].

The total cost is 0 + 0 + 0 + 1 = 1.


Example 2:
Input: command = [1,2,3,6,5,4]
Output: 3
Explanation: Start with nums = [].

Insert 1, cost min(0, 0) = 0, now nums = [1].

Insert 2, cost min(1, 0) = 0, now nums = [1,2].

Insert 3, cost min(2, 0) = 0, now nums = [1,2,3].

Insert 6, cost min(3, 0) = 0, now nums = [1,2,3,6].

Insert 5, cost min(3, 1) = 1, now nums = [1,2,3,5,6].

Insert 4, cost min(3, 2) = 2, now nums = [1,2,3,4,5,6].

The total cost is 0 + 0 + 0 + 0 + 1 + 2 = 3.


Example 3:
Input: command = [1,3,3,3,2,4,2,1,2]
Output: 4
Explanation: Start with nums = [].

Insert 1, cost min(0, 0) = 0, now nums = [1].

Insert 3, cost min(1, 0) = 0, now nums = [1,3].

Insert 3, cost min(1, 0) = 0, now nums = [1,3,3].

Insert 3, cost min(1, 0) = 0, now nums = [1,3,3,3].

Insert 2, cost min(1, 3) = 1, now nums = [1,2,3,3,3].

Insert 4, cost min(5, 0) = 0, now nums = [1,2,3,3,3,4].

Insert 2, cost min(1, 4) = 1, now nums = [1,2,2,3,3,3,4].

Insert 1, cost min(0, 6) = 0, now nums = [1,1,2,2,3,3,3,4].

Insert 2, cost min(2, 4) = 2, now nums = [1,1,2,2,2,3,3,3,4].

The total cost is 0 + 0 + 0 + 0 + 1 + 0 + 1 + 0 + 2 = 4.


constraint:
`1 <= instructions. length <= 105`
`1 <= instruction[i] <= 105`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two nodes ""p"" and ""q"" of a binary tree, return their lowest common ancestor (LCA).

Each node will refer to its parent node. `Node` is defined as follows:
class node {
    public integer value;
    public node leaves;
    public node rights;
    public node parent node;
}
According to the definition of LCA on Wikipedia: ""The lowest common ancestor of two nodes p and q in a tree T is the lowest node that has p and q as descendants (we allow a node to be a descendant of itself).""

Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
Explanation: Nodes 5 and 1 have an LCA of 3.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
Output: 5
Explanation: The LCA of nodes 5 and 4 is 5 because a node can be a descendant of itself by the LCA definition.


Example 3:
Input: root = [1,2], p = 1, q = 2
Output: 1

constraint:
The number of nodes in the tree is in the range '[2, 105]'.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`p != q`
`p` and `q` exist in the tree.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string s consisting only of the characters ""a"" and ""b"".

You can remove any number of characters in s to make s balanced. `s` is balanced if there is no index pair `(i,j)` such that `i < j` and `s[i] = 'b'` and `s[j] = 'a' exist.

Returns the minimum number of deletions required to bring s into balance.


Example 1:
Input: s = ""aababbab""
Output: 2
Instructions: You can:
delete the characters at index 2 and 6 of 0 (""aababbab"" -> ""aaabbb""), or
Delete characters at 0 index positions 3 and 6 (""aababbab"" -> ""aabbbb"").


Example 2:
Input: s = ""bbaaaaabb""
Output: 2
Explanation: The only solution is to delete the first two characters.


constraint:
`1 <= s.length <= 105`
`s[i]` is either `'a'` or `'b'`.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" containing ""n"" integers, there are at most ""50"" unique values ​​in the array. You'll also get an array ""quantity"" containing the quantities ordered by the ""m"" customers, where ""quantity[i]"" is the integer quantity ordered by the ""i-th"" customer. Determines whether `nums` can be distributed like this:
the ith client gets exactly quantity[i] integers,
The integers received by the ith client are all equal, and
Every customer is very satisfied.

Returns `true` if `nums` can be assigned according to the above conditions.


Example 1:
Input: nums = [1,2,3,4], number = [2]
output: error
Explanation: Customer 0 cannot be given two different integers.


Example 2:
Input: nums = [1,2,3,3], number = [2]
output: true
Explanation: Given the 0th customer [3,3]. The integer [1,2] is not used.


Example 3:
Input: nums = [1,1,2,2], number = [2,2]
output: true
Explanation: Given the 0th customer [1,1], given the 1st customer [2,2].


Example 4:
Input: nums = [1,1,2,3], number = [2,2]
output: error
Explanation: Although [1,1] can be given to the 0th customer, the 1st customer cannot be satisfied.


Example 5:
Input: nums = [1,1,1,1,1], number = [2,3]
output: true
Explanation: Given the 0th customer [1,1], given the 1st customer [1,1,1].


constraint:
`n == nums. length`
`1 <= n <= 105`
`1 <= nums[i] <= 1000`
`m == number.length`
`1 <= m <= 10`
`1 <= number[i] <= 105`
There are at most 50 unique values ​​in `nums`.",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a stream of n (idKey, value) convections arriving in arbitrary order, where idKey is an integer between 1 and n and value is a string. No two pairs have the same ""id"".

Design a stream that returns values ​​in increasing order by ID by returning a block (list) of values ​​after each insertion. The concatenation of all blocks should produce a sorted list of values.

Implement the `OrderedStream` class:
`OrderedStream(int n)` constructs a stream to get `n` values.

`String[] insert(int idKey, String value)` inserts the pair `(idKey, value)` into the stream, then returns the largest possible chunk of the next occurrence of the currently inserted value in order.


example:
enter
[""OrderedStream"", ""Insert"", ""Insert"", ""Insert"", ""Insert"", ""Insert""]
[[5], [3, ""ccccc""], [1, ""aaaaa""], [2, ""bbbbb""], [5, ""eeeee""], [4, ""ddddd""]]
output
[null, [], [""aaaaa""], [""bbbbb"", ""ccccc""], [], [""ddddd"", ""eeeee""]]
explain
// Note that the values ​​sorted by ID are [""aaaaa"", ""bbbbb"", ""ccccc"", ""ddddd"", ""eeeee""].

OrderedStream os = new OrderedStream(5);
os.insert(3, ""ccccc""); // Insert (3, ""ccccc""), return [].

os.insert(1, ""aaaaa""); // Insert (1, ""aaaaa""), return [""aaaaa""].

os.insert(2, ""bbbbb""); // Insert (2, ""bbbbb""), return [""bbbbb"", ""ccccc""].

os.insert(5, ""eeeeee""); // Insert (5, ""eeeee""), return [].

os.insert(4, ""dddd""); // Insert (4, ""ddddd""), return [""dddddd"", ""eeeee""].

// Concatenate all returned blocks:
// [] + [""aaaaa""] + [""bbbbb"", ""ccccc""] + [] + [""dddddd"", ""eeeee""] = [""aaaaa"", ""bbbbb"", ""ccccc"", ""dddd"" , ""eeeee""]
// Results are in the same order as above.


constraint:
`1 <= n <= 1000`
`1 <= id <= n`
`value.length == 5`
`value` consists of lowercase letters only.

Each call to ""insert"" will have a unique ""id"".
Exactly `n` calls to `insert` will be made.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Two strings are considered close if you can get one string from another using the following operations:
Operation 1: Swap any two existing characters.


For example, `abcde -> aecdb`
Operation 2: Convert each occurrence of an existing character to another existing character, and do the same for the other character.


For example, `aacabb -> bbcbaa` (all `a` become `b`, all `b` become `a`)
You can use these operations on any string as many times as you want.

Given two strings, `word1` and `word2`, return `true` if `word1` and `word2` are close, otherwise return `false`.


Example 1:
Input: word1 = ""abc"", word2 = ""bca""
output: true
Explanation: You can get word2 from word1 in 2 operations.

Apply operation 1: ""abc"" -> ""acb""
Apply operation 1: ""acb"" -> ""bca""

Example 2:
Input: word1 = ""a"", word2 = ""aa""
output: error
Explanation: Getting word2 from word1 and vice versa is not possible in any number of operations.


Example 3:
Input: word1 = ""cabbba"", word2 = ""abbccc""
output: true
Explanation: You can get word2 from word1 in 3 operations.

Apply operation 1: ""cabbba"" -> ""caabbb""
`Apply operation 2: ""`caabbb"" -> ""baaccc""
Apply operation 2: ""baaccc"" -> ""abbccc""

Example 4:
Input: word1 = ""cabbba"", word2 = ""aabbss""
output: error
Explanation: It is not possible to get word2 from word1 and vice versa in any number of operations.


constraint:
`1 <= word1.length, word2.length <= 105`
`word1` and `word2` contain only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""x"". In one operation, you can remove the leftmost or rightmost element from the array ""nums"" and then subtract its value from ""x"". Note that this modifies the array for future operations.

Returns the smallest operand that reduces `x` exactly to `0` if possible, otherwise returns `-1`.


Example 1:
Input: nums = [1,1,4,2,3], x = 5
Output: 2
Explanation: The optimal solution is to drop the last two elements to zero x.


Example 2:
Input: nums = [5,6,7,8,9], x = 4
Output: -1

Example 3:
Input: nums = [3,2,20,1,1,3], x = 10
Output: 5
Explanation: The optimal solution is to remove the last three elements and the first two elements (a total of 5 operations) to return x to zero.


constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`
`1 <= x <= 109`",0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given four integers, `m`, `n`, `introvertsCount` and `extrovertsCount`. You have an ""m x n"" grid, and you have two types of people: introverts and extroverts. There are `introvertsCount` for introverts and `extrovertsCount` for extraverts.

You should decide how many people you want to live in the grid and assign each of them a grid cell. Note that you don't have to have all of them live on the grid.

The happiness of each person is calculated as follows:
Introverts start with ""120"" happiness and then lose ""30"" happiness for each neighbor (introvert or extrovert).

Extroverts start with ""40"" happiness and gain ""20"" happiness for each neighbor (introverted or extroverted).

Neighbors live in cells directly adjacent to the north, east, south, and west of one's cell.

Grid happiness is the sum of everyone's happiness. Returns the maximum possible grid happiness.


Example 1:
Input: m=2, n=3, introvertsCount=1, extrovertsCount=2
Output: 240
Explanation: Assume the grid is indexed with coordinates (row, column) at 1.

We could put the introvert in cell (1,1) and the extrovert in cells (1,3) and (2,3).

- at (1,1) happy introvert: 120 (starting happy) - (0 * 30) (0 neighbors) = 120
- Extroverted at (1,3) happy: 40 (start happy) + (1 * 20) (1 neighbor) = 60
- Extroverted at (2,3) happy: 40 (start happy) + (1 * 20) (1 neighbor) = 60
Grid happiness is 120 + 60 + 60 = 240.

The image above shows the grid and each person's happiness for this example. Introverts live in light green cells, while extroverts live in light purple cells.


Example 2:
Input: m = 3, n = 1, introvertsCount = 2, extrovertsCount = 1
Output: 260
Explanation: Put the two introverts in (1,1) and (3,1) and the extrovert in (2,1).

- Introverted (1,1) happiness: 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
- outgoing when (2,1) happy: 40 (start happy) + (2 * 20) (2 neighbors) = 80
- Introvert happiness at (3,1): 120 (starting happiness) - (1 * 30) (1 neighbor) = 90
Grid happiness is 90 + 80 + 90 = 260.


Example 3:
Input: m=2, n=2, introvertsCount=4, extrovertsCount=0
Output: 240

constraint:
`1 <= m, n <= 5`
`0 <= introvertsCount, extrovertsCount <= min(m * n, 6)`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a binary tree with a small flaw. There is only one invalid node whose right child incorrectly points to another node at the same depth but to the right of the invalid node.

Given the root of a binary tree with this defect, ""root"", return the root of the binary tree after removing this invalid node and every node below it (minus the node it wrongly points to).

Custom tests:
Test input is read as 3 lines:
`tree node root`
`int fromNode` (not applicable to `correctBinaryTree`)
`int toNode` (not applicable to `correctBinaryTree`)
After parsing the binary tree rooted at root, the right child pointer of the `TreeNode` whose value is `fromNode` will point to the `TreeNode` whose value is `toNode`. Then, `root` is passed to `correctBinaryTree`.


Example 1:
Input: root = [1,2,3], fromNode = 2, toNode = 3
Output: [1,null,3]
Explanation: A node with a value of 2 is invalid, so it was removed.


Example 2:
Input: root = [8,3,1,7,null,9,4,2,null,null,null,5,6], fromNode = 7, toNode = 4
Output: [8,3,1,null,null,9,4,null,null,5,6]
Explanation: The node with value 7 is invalid, so delete it and the node below it, node 2.


constraint:
The number of nodes in the tree is in the range '[3, 104]'.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`fromNode != toNode`
`fromNode` and `toNode` will exist in the tree and be at the same depth.

`toNode` is to the right of `fromNode`.

`fromNode.right` is `null` in the initial tree from the test data.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two string arrays ""word1"" and ""word2"", return ""true"" if these two arrays represent the same string, else return ""false"".

A string is represented by an array if elements of the array concatenated in sequence form a string.


Example 1:
Input: word1 = [""ab"", ""c""], word2 = [""a"", ""bc""]
output: true
explain:
word1 represents the string ""ab"" + ""c"" -> ""abc""
word2 represents the string ""a"" + ""bc"" -> ""abc""
The strings are the same, so return true.


Example 2:
Input: word1 = [""a"", ""cb""], word2 = [""ab"", ""c""]
output: error

Example 3:
Input: word1 = [""abc"", ""d"", ""defg""], word2 = [""abcddefg""]
output: true

constraint:
`1 <= word1.length, word2.length <= 103`
`1 <= word1[i].length, word2[i].length <= 103`
`1 <= sum(word1[i].length), sum(word2[i].length) <= 103`
`word1[i]` and `word2[i]` consist of lowercase letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The value of a lowercase character is defined by its position in the alphabet `(1-indexed)`, so `a` has the value `1`, `b` has the value `2`, and the value `c` has the value ` 3`, and so on.

The numeric value of a string of lowercase characters is defined as the sum of the numeric values ​​of its characters. For example, the numeric value of the string ""abe"" is equal to ""1 + 2 + 5 = 8"".

Given two integers ""n"" and ""k"". Returns the lexicographically smallest string with length equal to ""n"" and value equal to ""k"".

Note that a string `x` is lexicographically less than a string `y` if `x` lexicographically precedes `y`, that is, either `x` is a prefix of `y`, or `i` is the first position such that `x[i] != y[i]`, then `x[i]` comes alphabetically before `y[i]`.


Example 1:
Input: n = 3, k = 27
Output: ""ah""
Explanation: The numeric value of the string is 1 + 1 + 25 = 27, which is the smallest string with that numeric value and length equal to 3.


Example 2:
Input: n = 5, k = 73
Output: ""aaszz""

constraint:
`1 <= n <= 105`
`n <= k <= 26 * n`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. You can just select an index (0-based indexing) and delete that element. Note that the index of an element may change after deletion.

For example, if `nums = [6,1,7,4,1]`:
Selecting delete index ""1"" results in ""nums = [6,7,4,1]"".

Selecting delete index ""2"" results in ""nums = [6,1,4,1]"".

Selecting delete index ""4"" results in ""nums = [6,1,7,4]"".

An array is fair if the sum of the odd indexed values ​​is equal to the sum of the even indexed values.

Returns the number of indices you can choose so that after deletion, `nums` is fair.

Example 1:
Input: nums = [2,1,6,4]
Output: 1
explain:
Delete index 0: [1,6,4] -> even sum: 1 + 4 = 5. Odd sum: 6. unfair.

Delete index 1: [2,6,4] -> even sum: 2 + 4 = 6. Odd sum: 6. fair.

Delete index 2: [2,1,4] -> even sum: 2 + 4 = 6. Odd sum: 1. unfair.

Delete index 3: [2,1,6] -> even sum: 2 + 6 = 8. Odd sum: 1. unfair.

You can drop 1 index to make nums fair.


Example 2:
Input: nums = [1,1,1]
Output: 3
Explanation: You can drop any index and the remaining array is fair.


Example 3:
Input: nums = [1,2,3]
output: 0
Explanation: You cannot create a fair array after dropping any indices.


constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`",0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `tasks` where `tasks[i] = [actuali, minimumi]`:
`actuali` is the actual energy you spent completing the ith task.

`minimumi` is the minimum amount of energy required to start the ith task.

For example, if the quest is `[10, 12]` and your current energy is `11`, you cannot start the quest. However, if your current energy is '13', you can complete this task, and your energy will be '3' after completion.

You can complete the tasks in any order you like.

Returns the minimum initial energy required to complete all tasks.


Example 1:
Input: task = [[1,2],[2,4],[4,8]]
Output: 8
explain:
Starting with 8 energy, we complete tasks in the following order:
    - The third mission. Now Energy = 8 - 4 = 4.

    - Second mission. Now energy = 4 - 2 = 2.

    - The first mission. Now energy = 2 - 1 = 1.

Note that even if we have energy left, starting with 7 energy won't work because we won't be able to complete the 3rd mission.


Example 2:
Input: Tasks = [[1,3],[2,4],[10,11],[10,12],[8,9]]
Output: 32
explain:
Starting at 32 energy, we complete tasks in the following order:
    - The first mission. Now energy = 32 - 1 = 31.

    - Second mission. Now Energy = 31 - 2 = 29.

    - The third mission. Now Energy = 29 - 10 = 19.

    - 4th mission. Now Energy = 19 - 10 = 9.

    - 5th mission. Now Energy = 9 - 8 = 1.


Example 3:
Input: Tasks = [[1,7],[2,8],[3,9],[4,10],[5,11],[6,12]]
Output: 27
explain:
Starting at 27 energy, we complete tasks in the following order:
    - 5th mission. Now Energy = 27 - 5 = 22.

    - Second mission. Now Energy = 22 - 2 = 20.

    - The third mission. Now Energy = 20 - 3 = 17.

    - The first mission. Now Energy = 17 - 1 = 16.

    - 4th mission. Now Energy = 16 - 4 = 12.

    - 6th mission. Now Energy = 12 - 6 = 6.


constraint:
`1 <= tasks.length <= 105`
`1 <= actual i <= min <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""root"" and ""leaf"" nodes of a binary tree, regenerate the root of the tree such that the ""leaf"" becomes the new root.

You can regenerate the root of the tree for each node ""cur"" on the path from ""leaf"" to ""root"" with the following steps. You may also encounter cases from ""leaf"" to ""root"" (except the root).
If cur has a left child, that child becomes cur's right child.

The original parent of `cur` becomes the left child of `cur`. Note that in the process, the original parent's pointer to cur becomes null, making it have at most one child.

Return the new root of the rerooted tree.

NOTE: Make sure your solution correctly sets the `Node.parent` pointer after rerooting, otherwise you will get a ""wrong answer"".


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 7
Output: [7,2,null,5,4,3,6,null,null,null,1,null,null,0,8]

Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], leaf = 0
Output: [0,1,null,3,8,5,null,null,null,6,2,null,null,7,4]

constraint:
The number of nodes in the tree is in the range '[2, 100]'.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

`leaf` exists in the tree.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"For the string ""sequence"", if ""word"" concatenated ""k"" times is a substring of ""sequence"", then the string ""word"" is ""k"" repeated. Maximum `k` repetitions of `word` is the maximum `k` of `k` repetitions of `word` in `sequence`. If ""word"" is not a substring of ""sequence"", the maximum ""k"" repetition value of ""word"" is ""0"".

Given the strings ""sequence"" and ""word"", return the largest number of ""k"" repetitions of ""word"" in ""sequence"".


Example 1:
Input: sequence = ""ababc"", word = ""ab""
Output: 2
Explanation: ""abab"" is a substring in ""ababc"".


Example 2:
Input: sequence = ""ababc"", word = ""ba""
Output: 1
Explanation: ""ba"" is a substring in ""ababc"". ""baba"" is not a substring in ""ababc"".


Example 3:
Input: sequence = ""ababc"", word = ""ac""
output: 0
Explanation: ""ac"" is not a substring in ""ababc"".

constraint:
`1 <= sequence.length <= 100`
`1 <= word.length <= 100`
`sequence` and `word` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two linked lists: `list1` and `list2`, with sizes `n` and `m` respectively.

Move the nodes of list1 from ath node to bth node and place list2 in their place.

The blue edges and nodes in the diagram below represent the result:
Build the resulting list and return its head.


Example 1:
Input: list1 = [0,1,2,3,4,5], a = 3, b = 4, list2 = [1000000,1000001,1000002]
Output: [0,1,2,1000000,1000001,1000002,5]
Explanation: We delete nodes 3 and 4 and put the whole list2 in their place. The blue edges and nodes in the diagram above represent the results.


Example 2:
Input: list1 = [0,1,2,3,4,5,6], a = 2, b = 5, list2 = [1000000,1000001,1000002,1000003,1000004]
Output: [0,1,1000000,1000001,1000002,1000003,1000004,6]
Explanation: The blue edges and nodes in the figure above indicate the result.


constraint:
`3 <= list1.length <= 104`
`1 <= a <= b < list1.length - 1`
`1 <= list2.length <= 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Design a queue that supports front, middle and back `push` and `pop` operations.

Implement the ""FrontMiddleBack"" class:
`FrontMiddleBack()` initializes the queue.

`void pushFront(int val)` adds `val` to the front of the queue.

`void pushMiddle(int val)` adds `val` to the middle of the queue.

`void pushBack(int val)` adds `val` to the back of the queue.

`int popFront()` removes the front element of the queue and returns it. Returns ""-1"" if the queue is empty.

`int popMiddle()` removes the middle element of the queue and returns it. Returns ""-1"" if the queue is empty.

`int popBack()` removes the element at the back of the queue and returns it. Returns ""-1"" if the queue is empty.

Note that when there are two intermediate position selections, the operation is performed on the frontmost intermediate position selection. For example:
Pushing ""6"" into the middle of ""[1,2,3,4,5]"" gives ""[1,2,6,3,4,5]"".

Popping intermediate values ​​from ""[1, 2, 3, 4, 5, 6]"" returns ""3"" and results in ""[1, 2, 4, 5, 6]"".


Example 1:
enter:
[""FrontMiddleBackQueue"", ""pushFront"", ""pushBack"", ""pushMiddle"", ""pushMiddle"", ""popFront"", ""popMiddle"", ""popMiddle"", ""popBack"", ""popFront""]
[[], [1], [2], [3], [4], [], [], [], [], []]
output:
[empty, empty, empty, empty, empty, 1, 3, 4, 2, -1]
explain:
FrontMiddleBackQueue q = new FrontMiddleBackQueue();
q. pushFront(1); // [1]
q.pushBack(2); // [1, 2]
q.pushMiddle(3); // [1, 3, 2]
q.pushMiddle(4); // [1, 4, 3, 2]
q.popFront(); // returns 1 -> [4, 3, 2]
q.popMiddle(); // returns 3 -> [4, 2]
q.popMiddle(); // returns 4 -> [2]
q.popBack(); // return 2 -> []
q.popFront(); // return -1 -> [] (queue is empty)

constraint:
`1 <= value <= 109`
At most 1000 calls will be made to `pushFront`, `pushMiddle`, `pushBack`, `popFront`, `popMiddle` and `popBack`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"You may recall that the array arr is a mountain array if and only if:
`arr.length >= 3`
There exists some index ""i"" (starting at 0) where ""0 < i < arr.length - 1"" such that:

`arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`
`arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`
Given an integer array `nums`, return the minimum number of elements to remove such that `nums` becomes a mountain array.


Example 1:
Input: nums = [1,3,1]
output: 0
Explanation: The array itself is a mountain array, so we don't need to delete any elements.


Example 2:
Input: nums = [2,1,1,5,6,2,3,1]
Output: 3
Explanation: One solution is to delete elements at indices 0, 1 and 5 such that the array nums = [1,5,6,3,1].


Example 3:
Input: nums = [4,3,2,1,1,2,3,1]
Output: 4

Example 4:
Input: nums = [1,2,3,4,4,3,2,1]
Output: 1

constraint:
`3 <= nums.length <= 1000`
`1 <= nums[i] <= 109`
Guaranteed you can make an array of mountains with `nums`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an `m x n` integer grid `accounts`, where `accounts[i][j]` is the wealth owned by the richest customer returned by the i-th customer at the j-th bank.

A client's wealth is the amount they have in all their bank accounts. The wealthiest clients are the ones with the greatest wealth.


Example 1:
Input: Account = [[1,2,3],[3,2,1]]
Output: 6
explain:
`First customer's wealth = 1 + 2 + 3 = 6
``Second Customer's Wealth = 3 + 2 + 1 = 6
`Both clients are considered to be the richest, and each client's wealth is 6, so return 6.


Example 2:
Input: Account = [[1,5],[7,3],[3,5]]
Output: 10
explain:
First client has wealth = 6
Second client has wealth = 10
The third customer has wealth = 8
The second customer is the richest with a fortune of 10.


Example 3:
Input: Account = [[2,8,7],[7,1,3],[1,9,5]]
Output: 17

constraint:
`m == accounts. length`
`n == accounts[i].length`
`1 <= meters, n <= 50`
`1 <= account[i][j] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and a positive integer ""k"", return the most competitive subsequence of ""nums"" of size ""k"".

A subsequence of an array is the resulting sequence obtained by removing some (possibly zero) elements from the array.

We define subsequence `a` to be more competitive than subsequence `b` (of the same length), if at the first position where `a` and `b` differ, the number of subsequence `a` is less than the corresponding number in ""b"". For example, `[1,3,4]` is more competitive than `[1,3,5]` because the first position they differ is the last digit, and `4` is smaller than `5`.


Example 1:
Input: nums = [3,5,2,6], k = 2
Output: [2,6]
Explanation: In the set of each possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] are the most competitive.


Example 2:
Input: nums = [2,4,3,3,5,4,9,6], k = 4
Output: [2,3,3,4]

constraint:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`
`1 <= k <= nums.length`",0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums of length n and an integer limit. In one step, you can replace any integer in `nums` with another integer between `1` and `limit`, both inclusive.

The array ""nums"" is complementary if ""nums[i] + nums[n - 1 - i]"" equals the same number for all indices ""i"" (0-indexed). For example, the array ""[1,2,3,4]"" is complementary because ""nums[i] + nums[n - 1 - i] = 5"" for all indices ""i"".

Returns the minimum number of moves required to make nums complementary.


Example 1:
Input: nums = [1,2,4,3], limit = 4
Output: 1
Explanation: In 1 step, you can change nums to [1,2,2,3] (underlined elements are changed).

number[0] + number[3] = 1 + 3 = 4.

number[1] + number[2] = 2 + 2 = 4.

number[2] + number[1] = 2 + 2 = 4.

number[3] + number[0] = 3 + 1 = 4.

Therefore, for each i, nums[i] + nums[n-1-i] = 4, so nums are complementary.


Example 2:
Input: nums = [1,2,2,1], limit = 2
Output: 2
Explanation: In 2 moves, you can change nums to [2,2,2,2]. You can't change any number to 3, because 3 > limit.


Example 3:
Input: nums = [1,2,1,2], limit = 2
output: 0
Explanation: nums is already complementary.


constraint:
`n == nums. length`
`2 <= n <= 105`
`1 <= nums[i] <= limit <= 105`
`n` is an even number.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` containing `n` positive integers.

There are two types of operations you can perform any number of times on any element of an array:
If the element is even, it is divided by ""2"".


For example, if the array is ""[1,2,3,4]"" then you can do this for the last element and the array will be ""[1,2,3,2]"".
If the element is odd, it is multiplied by ""2"".


For example, if the array is ""[1,2,3,4]"" then you can do this for the first element and the array will be ""[2,2,3,4]"".
The skew of an array is the maximum difference between any two elements in the array.

Returns the minimum skew an array can have after performing some operations.


Example 1:
Input: nums = [1,2,3,4]
Output: 1
Explanation: The array can be transformed into [1,2,3,2], and then transformed into [2,2,3,2], then the deviation is 3 - 2 = 1.


Example 2:
Input: nums = [4,1,5,20,3]
Output: 3
Explanation: The array after two operations can be transformed into [4,2,5,5,3], then the deviation is 5 - 2 = 3.


Example 3:
Input: nums = [2,10,8]
Output: 3

constraint:
`n == nums. length`
`2 <= n <= 105`
`1 <= nums[i] <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary tree 'root' and an array of 'TreeNode' objects 'nodes', return the lowest common ancestor (LCA) of all nodes in 'nodes'. All nodes will exist in the tree and all values ​​of tree nodes will be unique.

Extending the definition of LCA on Wikipedia: ""The lowest common ancestor of the `n` nodes `p1`, `p2`, ..., `pn` in a binary tree T is the lowest node with each `pi` as each valid A descendant of ""i"" (we allow a node to be a descendant of itself). A descendant of node ""x"" is node ""y"", which is on the path from node ""x"" to some leaf node.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], node = [4,7]
Output: 2
Explanation: The lowest common ancestor of nodes 4 and 7 is node 2.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], node = [1]
Output: 1
Explanation: The lowest common ancestor of a single node is the node itself.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], node = [7,6,2,4]
Output: 5
Explanation: The lowest common ancestor of nodes 7, 6, 2, and 4 is node 5.


Example 4:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], node = [0,1,2,3,4,5,6,7,8]
Output: 3
Explanation: The lowest common ancestor of all nodes is the root node.


constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`-109 <= Node.val <= 109`
All `Node.val` are unique.

All `nodes[i]` will exist in the tree.

All `nodes[i]` are distinct.",0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"".

In one operation, you can select two numbers from the array that sum to ""k"" and remove them from the array.

Returns the maximum number of operations you can perform on an array.


Example 1:
Input: nums = [1,2,3,4], k = 5
Output: 2
Explanation: Start with nums = [1,2,3,4]:
- remove numbers 1 and 4, then nums = [2,3]
- remove numbers 2 and 3, then nums = []
There are no more pairs that sum to 5, so there are 2 operations in total.


Example 2:
Input: nums = [3,1,3,4,3], k = 6
Output: 1
Explanation: Starting with nums = [3,1,3,4,3]:
- remove the first two 3's, then nums = [1,4,3]
There are no more pairs that sum to 6, so there is a total of 1 operation.


constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 109`
`1 <= k <= 109`",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", returns the decimal value of the binary string formed by sequentially concatenating the binary representations of ""1"" through ""n"", modulo ""109 + 7"".


Example 1:
Input: n = 1
Output: 1
Explanation: ""1"" in binary corresponds to 1 in decimal.

Example 2:
Input: n = 3
Output: 27
Explanation: In binary, 1, 2, and 3 correspond to ""1"", ""10"", and ""11"" respectively.

After concatenating them, we get ""11011"", which corresponds to the decimal value 27.


Example 3:
Input: n = 12
Output: 505379714
Explanation: The concatenation result is ""1101110010111011110001001101010111100"".

Its decimal value is 118505380540.

Modulo 109 + 7, the result is 505379714.


constraint:
`1 <= n <= 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `nums` and an integer `k`. You need to distribute this array into ""k"" subsets of equal size so that no two elements are equal in the same subset.

The incompatibility of a subset is the difference between the largest and smallest elements in that array.

Returns the smallest possible sum of incompatibilities for the `k` subset after optimally allocating the array, or `-1` if not possible.

A subset is a set of integers that appear in an array, in no particular order.


Example 1:
Input: nums = [1,2,1,4], k = 2
Output: 4
Explanation: The optimal distributions for the subsets are [1,2] and [1,4].

The incompatibility is (2-1) + (4-1) = 4.

Note that [1,1] and [2,4] produce smaller sums, but the first subset contains 2 equal elements.


Example 2:
Input: nums = [6,3,8,1,3,1,2,2], k = 4
Output: 6
Explanation: The optimal distributions for the subsets are [1,2], [2,3], [6,8] and [1,3].

The incompatibility is (2-1) + (3-2) + (8-6) + (3-1) = 6.


Example 3:
Input: nums = [5,3,3,6,3,3], k = 3
Output: -1
Explanation: It is not possible to distribute nums into 3 subsets where no two elements in the same subset are equal.


constraint:
`1 <= k <= nums.length <= 16`
`nums.length` is divisible by `k`
`1 <= nums[i] <= nums.length`",0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A subsequence of the string s is considered to be a good palindromic subsequence if:
It is a subsequence of s.

It is a palindrome (has the same value if reversed).

It is uniform in length.

No two consecutive characters are equal, except for two intermediate characters.

For example, if `s = ""abcabcabb""`, then `""abba""` is considered a good palindromic subsequence, while `""bcb""` (not of even length) and `""bbbb""` (with equal consecutive characters )no.

Given a string s, return the length of the longest good palindromic subsequence in s.


Example 1:
Input: s = ""bbabab""
Output: 4
Explanation: The longest good palindromic subsequence of s is ""baab"".


Example 2:
Input: s = ""dcbccacdb""
Output: 4
Explanation: The longest good palindromic subsequence of s is ""dccd"".


constraint:
`1 <= s.length <= 250`
`s` consists of lowercase English letters.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a string ""allowed"" consisting of different characters and an array of strings ""words"". A string is consistent if all characters in the string occur in the string ""allowed"".

Returns the number of consistent strings in the array words.


Example 1:
Input: allowed = ""ab"", words = [""ad"",""bd"",""aaab"",""baa"",""badab""]
Output: 2
Explanation: The strings ""aaab"" and ""baa"" are identical because they contain only the characters ""a"" and ""b"".


Example 2:
Input: allowed = ""abc"", words = [""a"",""b"",""c"",""ab"",""ac"",""bc"",""abc""]
Output: 7
Explanation: All strings are consistent.


Example 3:
Input: allowed = ""cad"", words = [""cc"",""acd"",""b"",""ba"",""bac"",""bad"",""ac"",""d""]
Output: 4
Explanation: The strings ""cc"", ""acd"", ""ac"", ""d"" are consistent.


constraint:
`1 <= words.length <= 104`
`1 <= allowed.length <= 26`
`1 <= word[i].length <= 10`
The characters in 'allowed' are different.

`words[i]` and `allowed` contain only lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing the game, with Alice starting first.

There are n stones in a pile. On each player's turn, they can remove a stone from the pile and earn points based on the stone's value. Alice and Bob may value the stones differently.

Given two integer arrays of length ""n"", ""aliceValues"" and ""bobValues"". Each aliceValues[i] and bobValues[i] represents how Alice and Bob valued the ith stone, respectively.

The winner is the one with the most points after all stones have been picked. If both players have the same number of points, the game is a draw. Both players will be at their best. Players on both sides know the other's values.

determine the outcome of the match, and:
If Alice won, return 1.

If Bob wins, return `-1`.

Returns ""0"" if the game result is a draw.


Example 1:
Input: aliceValues ​​= [1,3], bobValues ​​= [2,1]
Output: 1
explain:
If Alice takes stone 1 first (with index 0), Alice gets 3 points.

Bob can only choose stone number 0, and will only get 2 points.

Alice won.


Example 2:
Input: aliceValues ​​= [1,2], bobValues ​​= [3,1]
output: 0
explain:
If Alice takes stone 0 and Bob takes stone 1, they both get 1 point.

painting.


Example 3:
Input: aliceValues ​​= [2,4,3], bobValues ​​= [1,6,7]
Output: -1
explain:
No matter how Alice plays, Bob can get more points than Alice.

For example, if Alice takes stone 1, Bob can take stone 2, Alice takes stone 0, Alice has 6 points, and Bob has 7 points.

Bob won.


constraint:
`n == aliceValues.length == bobValues.length`
`1 <= n <= 105`
`1 <= aliceValues[i], bobValues[i] <= 100`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Your task is to deliver some boxes from warehouse to port using only one ship. However, the ship has restrictions on the number of boxes and the total weight it can carry.

Given an array ""boxes"" where ""boxes[i] = [ports i , weighti]"" and three integers ""portsCount"", ""maxBoxes"" and ""maxWeight"".

`ports i` is the port where you need to ship the ith box, and `weightsi` is the weight of the ith box.

`portsCount` is the number of ports.

`maxBoxes` and `maxWeight` are the box and weight limits of the ship, respectively.

Boxes need to be delivered in the order given. The ship will follow the following steps:
The ship will take a certain number of boxes from the boxes queue without violating the maxBoxes and maxWeight constraints.

For each box loaded in sequence, the ship will go to the port where the box needs to be delivered and deliver. If the ship is already in the correct port, there is no need to travel and the box can be delivered immediately.

The ship then returns to the warehouse to take more boxes from the queue.

After all boxes have been delivered, the ship must end up in storage.

The minimum travel required for return ships to deliver all boxes to their respective ports.


Example 1:
Input: boxes = [[1,1],[2,1],[1,1]], portsCount = 2, maxBoxes = 3, maxWeight = 3
Output: 4
Explanation: The optimal strategy is as follows:
- The ship takes all the boxes in the queue, goes first to port 1, then to port 2, then to port 1, then back to the warehouse. 4 trips.

So the total number of trips is 4.

Note that the first and third crates cannot be delivered together, as the crates need to be delivered in order (i.e. the second crate needs to be delivered at port 2 before the third crate).


Example 2:
Input: boxes = [[1,2],[3,3],[3,1],[3,1],[2,4]], portsCount = 3, maxBoxes = 3, maxWeight = 6
Output: 6
Explanation: The optimal strategy is as follows:
- The ship takes the first chest, goes to port 1, and returns to the warehouse. 2 trips.

- The ship takes the 2nd, 3rd and 4th crates, goes to port 3, and returns to the warehouse. 2 trips.

- The ship takes the fifth chest, sails to port 3, and returns to the warehouse. 2 trips.

So the total number of trips is 2 + 2 + 2 = 6.


Example 3:
Input: boxes = [[1,4],[1,2],[2,1],[2,1],[3,2],[3,4]], portsCount = 3, maxBoxes = 6, Max Weight = 7
Output: 6
Explanation: The optimal strategy is as follows:
- The ship takes the first and second crates, goes to port 1, and returns to the warehouse. 2 trips.

- The ship takes the third and fourth boxes, goes to port 2, and returns to the warehouse. 2 trips.

- The ship takes the 5th and 6th crates, goes to port 3, and returns to the warehouse. 2 trips.

So the total number of trips is 2 + 2 + 2 = 6.


Example 4:
Input: boxes = [[2,4],[2,5],[3,1],[3,2],[3,7],[3,1],[4,4],[1, 3], [5,2]], portsCount = 5, maxBoxes = 5, maxWeight = 7
Output: 14
Explanation: The optimal strategy is as follows:
- The ship takes the first chest, goes to port 2, and stores. 2 trips.

- The ship takes the second chest, goes to port 2, and stores it. 2 trips.

- The ship takes the third and fourth chests, goes to port 3, and stores them. 2 trips.

- The ship takes the fifth chest, goes to port 3, and stores it. 2 trips.

- The ship takes the sixth and seventh chests, goes to port 3, then port 4, then storage. 3 trips.
- The ship takes the eighth and ninth chests, goes to port 1, then port 5, then stores. 3 trips.

So the total number of trips is 2 + 2 + 2 + 2 + 3 + 3 = 14.


constraint:
`1 <= boxes.length <= 105`
`1 <= portsCount, maxBoxes, maxWeight <= 105`
`1 <= ports i <= portsCount`
`1 <= weightsi <= maxWeight`",0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"A decimal number is called a decimal number if every digit of the number is either ""0"" or ""1"" without any leading zeros. For example, `101` and `1100` are decimal, while `112` and `3001` are not.

Given a string ""n"" representing a positive decimal integer, return the minimum number of positive decimal binary digits required such that they sum to ""n"".


Example 1:
Input: n = ""32""
Output: 3
Explanation: 10 + 11 + 11 = 32

Example 2:
Input: n = ""82734""
Output: 8

Example 3:
Input: n = ""27346209830709182346""
Output: 9

constraint:
`1 <= n.length <= 105`
`n` consists of numbers only.

`n` does not contain any leading zeros and represents a positive integer.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Alice and Bob take turns playing the game, with Alice starting first.

There are `n` stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive a score equal to the sum of the values ​​of the remaining stones in the row. When there are no stones left to remove, the winner is the one with the higher score.

Bob finds that he always loses the game (poor Bob, he always loses), so he decides to minimize the difference in scores. Alice's goal is to maximize the difference in scores.

Given an integer array `stones`, where `stones[i]` represents the value of the ith stone from the left, return the difference in score between Alice and Bob (if they both played best).


Example 1:
Input: Stone = [5,3,1,4,2]
Output: 6
explain:
- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, Stone = [5,3,1,4].

- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, Stone = [3,1,4].

- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, Stone = [1,4].

- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, Stone = [4].

- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, Stone = [].

The difference is 18 - 12 = 6.


Example 2:
Input: Stone = [7,90,5,1,100,10,10,2]
Output: 122

constraint:
`n == stones. length`
`2 <= n <= 1000`
`1 <= stones[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `n` `cuboids`, where `ith` cuboid has dimensions `cuboids[i] = [widthi, lengthi, heighti]` (with index 0). Select a subset of the ""box"" and put them together.

Box i can be placed on box j if widthi <= widthj and lengthi <= lengthj and heighti <= heightj . You can rearrange the dimensions of any box by rotating it to place it on top of another box.

Returns the maximum height of the stacked ""cuboids"".


Example 1:
Input: Cuboid = [[50,45,20],[95,37,53],[45,23,12]]
Output: 190
explain:
Box 1 is placed on the bottom, 53x37 side down, with a height of 95.

Next place box 0 with its 45x20 side down and a height of 50.

Next place Box 2 with its 23x12 side down and a height of 45.

The total height is 95+50+45=190.


Example 2:
Input: Cuboid = [[38,25,45],[76,35,3]]
Output: 76
explain:
You cannot place any cuboid on top of another cuboid.

We select box 1 and rotate it so that the 35x3 side is facing down and its height is 76.


Example 3:
Input: cuboid = [[7,11,17],[7,17,11],[11,7,17​​],[11,17,7],[17,7,11],[17, 11, 7]]
Output: 102
explain:
After rearranging the cuboids, you can see that all the cuboids have the same dimensions.

You can put the 11x7 side down on all the cuboids so they have a height of 17.

The maximum height of the stacked cuboids is 6 * 17 = 102.


constraint:
`n == cuboids. length`
`1 <= n <= 100`
`1 <= widthi, lengthi, heighti <= 100`",0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n unique candies (labeled ""1"" to ""n"") and ""k"" bags. You are asked to distribute all the candies into bags so that each bag contains at least one candy.

Candy can be dispensed in a number of ways. Two ways are considered different if the candy in one bag in the first way is not in the same bag in the second way. The order of the bags and the order of the candies in each bag does not matter.

For example, `(1), (2,3)` and `(2), (1,3)` are considered different because the candies `2` and `3` in the bag `(2,3)` The first way is not in the same package as the second way (they are split between packages `(2)` and `(1,3)`). However, `(1), (2,3)` and `(3,2), (1)` are considered the same, because the candy in each bag is in the same bag in both cases.

Given two integers ""n"" and ""k"", return the number of different ways to distribute candy. Since the answer might be too large, return it modulo 109 + 7 .


Example 1:
Input: n = 3, k = 2
Output: 3
Instructions: You can divide the 3 candies into the 2 bags in three ways:
(1), (2,3)
(1,2), (3)
(1,3), (2)

Example 2:
Input: n = 4, k = 2
Output: 7
Explanation: You can divide 4 candies into 2 bags in 7 ways:
(1), (2,3,4)
(1,2), (3,4)
(1,3), (2,4)
(1,4), (2,3)
(1,2,3), (4)
(1,2,4), (3)
(1,3,4), (2)

Example 3:
Input: n = 20, k = 5
Output: 206085257
Explanation: You can divide 20 candies into 5 bags in 1881780996 ways. 1881780996 mod 109 + 7 = 206085257.


constraint:
`1 <= k <= n <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get a phone number as string ""number"". `number` consists of digits, spaces `' '` and/or dashes `'-'`.

You want to reformat the phone number somehow. First, remove all spaces and dashes. Then, the numbers are grouped from left to right into blocks of length 3 until there are 4 or fewer numbers. Then group the final numbers as follows:
2 numbers: a single block of length 2.

3 bits: A single block of length 3.

4 digits: two blocks, each of length 2.

Then connect the blocks with dashes. Note that the reformatting process should not produce any length-1 chunks, and at most two length-2 chunks.

Returns the phone number after formatting.


Example 1:
input: number = ""1-23-45 6""
Output: ""123-456""
Explanation: The number is ""123456"".

Step 1: More than 4 digits, so group next 3 digits. The first block is ""123"".

Step 2: There are 3 numbers left, so put them in a block of length 3. The 2nd block is ""456"".

Joining the blocks gives ""123-456"".


Example 2:
Input: number=""123 4-567""
Output: ""123-45-67""
Explanation: The number is ""1234567"".

Step 1: More than 4 digits, so group next 3 digits. The first block is ""123"".

Step 2: There are 4 numbers left, divide them into two blocks of length 2. The blocks are ""45"" and ""67"".

Joining the blocks gives ""123-45-67"".


Example 3:
Input: number = ""123 4-5678""
Output: ""123-456-78""
Explanation: The number is ""12345678"".

Step 1: The first block is ""123"".

Step 2: The second block is ""456"".

Step 3: There are 2 numbers left, so put them in a block of length 2. The 3rd block is ""78"".

Joining the blocks gives ""123-456-78"".


Example 4:
input:number=""12""
Output: ""12""

Example 5:
Input: number=""--17-5 229 35-39475""
Output: ""175-229-353-94-75""

constraint:
`2 <= number.length <= 100`
`number` consists of digits and the characters `'-'` and `' '`.

There must be at least two digits in `number`.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" of positive integers, and wish to erase subarrays containing unique elements. Erasing a subarray yields a score equal to the sum of its elements.

Returns the maximum score that can be obtained by erasing exactly one subarray.

An array ""b"" is called a subarray of ""a"" if it forms a contiguous subsequence of ""a"", i.e. it is equal to ""a[l],a[l+1],...,a[r] ` For some `(l,r)`.


Example 1:
Input: nums = [4,2,4,5,6]
Output: 17
Explanation: The optimal subarray here is [2,4,5,6].


Example 2:
Input: nums = [5,2,1,2,5,2,1,2,5]
Output: 8
Explanation: The optimal subarray here is [5,2,1] or [1,2,5].


constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a 0-indexed integer array ""nums"" and an integer ""k"".

You are initially standing at index ""0"". In one move, you can jump at most `k` steps forward without going beyond the bounds of the array. That is, you can jump from index ""i"" to any index in the range ""[i + 1, min(n - 1, i + k)]"".

You want to reach the last index of the array (index `n - 1`). Your score is the sum of all nums[j] for each index j you visit in the array.

Returns the highest score you can get.


Example 1:
Input: nums = [1,-1,-2,4,-7,3], k = 2
Output: 7
Explanation: You can choose your jumps to form the subsequence [1,-1,4,3] (underlined). The sum is 7.


Example 2:
Input: nums = [10,-5,-2,4,0,3], k = 3
Output: 17
Explanation: You can choose your jumps to form the subsequence [10,4,3] (underlined). The sum is 17.


Example 3:
Input: nums = [1,-5,-20,4,-1,3,-6,-3], k = 2
output: 0

constraint:
 `1 <= nums.length, k <= 105`
`-104 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` represents the edge between nodes `ui` and `vi` with distance `disi` . Note that multiple edges may exist between two nodes.

Given an array ""queries"" where ""queries[j] = [pj, qj, limitj]"", your task is to determine for each ""queries[j]"" whether there is path, ie the distance of each edge on the path is strictly less than limitj.

Returns a Boolean array `answer` where `answer.length == queries.length` and `jth` of `answer` is `true` if there is a path to `queries[j]`, otherwise ` false`.


Example 1:
Input: n = 3, edgeList = [[0,1,2],[1,2,4],[2,0,8],[1,0,16]], queries = [[0,1, 2],[0,2,5]]
output: [false, true]
Explanation: The figure above shows the given graph. Note that there are two overlapping edges between 0 and 1 with distances 2 and 16.

For the first query, there are no paths between 0 and 1 with each distance less than 2, so we return false for that query.

For the second query, there is a path (0 -> 1 -> 2) with two edges whose distance is less than 5, so we return true for that query.


Example 2:
Input: n = 5, edgeList = [[0,1,10],[1,2,5],[2,3,9],[3,4,13]], queries = [[0,4, 14],[1,4,13]]
output: [true, false]
Explanation: The above figure shows the given graph.


constraint:
`2 <= n <= 105`
`1 <= edgeList.length, queries.length <= 105`
`edgeList[i].length == 3`
`query[j].length == 3`
`0 <= ui, vi, pj, qj <= n - 1`
`ui != vi`
`pj != qj`
`1 <= disi, limitj <= 109`
There may be multiple edges between two nodes.",0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return the number of distinct substrings of s.

Obtains a substring of a string by removing any number of characters (possibly zero) from the front of the string and any number of characters (possibly zero) from the back of the string.


Example 1:
Input: s = ""aabbaba""
Output: 21
Explanation: The collection of different strings is [""a"",""b"",""aa"",""bb"",""ab"",""ba"",""aab"",""abb"",""bab"",""bba"","" aba"",""aabb"",""abba"",""bbab"",""baba"",""aabba"",""abbab"",""bbaba"",""aabbab"",""abbaba"",""aabbaba""]

Example 2:
Input: s = ""abcdefg""
Output: 28

constraint:
`1 <= s.length <= 500`
`s` consists of lowercase English letters.

Follow up: Can you solve this problem in `O(n)` time complexity?",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0
"School cafeterias serve round and square sandwiches during lunch breaks, denoted by the numbers ""0"" and ""1"" respectively. All students line up in a row. Every student loves a square or round sandwich.

The number of sandwiches in the cafeteria is equal to the number of students. Sandwiches stacked together. At each step:
If the students at the front of the line prefer the sandwich on top of the pile, they take it and leave the queue.

Otherwise, they leave it and go to the end of the queue.

This continues until no student in the queue wants the top sandwich and therefore cannot eat.

Given two integer arrays `students` and `sandwiches`, where `sandwiches[i]` is the type of the ith sandwich in the stack (`i = 0` is the stack) and `students[j]` is the type of sandwich in the initial queue The preference of the jth student (`j = 0` is the front of the queue). Returns the number of students unable to eat.


Example 1:
Input: student = [1,1,0,0], sandwich = [0,1,0,1]
output: 0
explain:
- The previous student leaves the top sandwich and returns to the end of the row, making student = [1,0,0,1].

- The previous student leaves the topmost sandwich and returns to the end of the row such that student = [0,0,1,1].

- The student at the front takes the top sandwich and leaves the line so that student = [0,1,1] and sandwich = [1,0,1].

- The previous student leaves the top sandwich and returns to the end of the row making student = [1,1,0].

- The student at the front takes the top sandwich and leaves the line so that student = [1,0] and sandwich = [0,1].

- The previous student leaves the top sandwich and returns to the end of the row making student = [0,1].

- The student at the front takes the top sandwich and leaves the line so that student = [1] and sandwich = [1].

- The student at the front takes the top sandwich and leaves the line so that student = [] and sandwich = [].

Therefore, all students can eat.


Example 2:
Input: Student = [1,1,1,0,0,1], Sandwich = [1,0,0,0,1,1]
Output: 3

constraint:
`1 <= students.length, sandwiches.length <= 100`
`students.length == sandwiches.length`
`sandwiches[i]` is either `0` or `1`.

`students[i]` is either `0` or `1`.",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a restaurant with only one chef. Given an array `customers`, where `customers[i] = [arrivali, timei]:`
`arrivali` is the arrival time of the ith customer. Arrival times are listed in non-descending order.

`timei` is the time it takes to prepare the ith customer's order.

When the guest comes, he gives the order to the chef, who prepares it as soon as he is free. The customer waits until the chef is ready with his order. Chefs will not prepare food for more than one customer at a time. The chef prepares the food for the customers in the order given in the input.

Returns the average wait time for all customers. Solutions within 10-5 of the actual answer were considered accepted.


Example 1:
Input: Customer = [[1,2],[2,5],[4,3]]
Output: 5.00000
explain:
1) The first customer arrives at time 1, the chef takes his order at time 1 and starts preparing it immediately, and finishes it at time 3, so the waiting time for the first customer is 3 - 1 = 2.

2) The second customer arrives at time 2, the chef takes his order and starts preparing it at time 3, and finishes it at time 8, so the waiting time for the second customer is 8 - 2 = 6.

3) The third customer arrives at time 4, the chef takes his order at time 8 and starts preparing it, and finishes it at time 11, so the waiting time for the third customer is 11 - 4 = 7.

So average waiting time = (2 + 6 + 7) / 3 = 5.


Example 2:
Input: Customer = [[5,2],[5,4],[10,3],[20,1]]
Output: 3.25000
explain:
1) The first customer arrives at time 5, the chef takes his order and starts preparing it immediately at time 5, and finishes it at time 7, so the waiting time for the first customer is 7 - 5 = 2.

2) The second customer arrives at time 5, the cook takes his order at time 7 and starts preparing it, and finishes it at time 11, so the waiting time for the second customer is 11 - 5 = 6.

3) The third customer arrives at time 10, the cook takes his order at time 11 and starts preparing it, and finishes it at time 14, so the waiting time for the third customer is 14 - 10 = 4.

4) The fourth customer arrives at time 20, the chef takes his order at time 20 and starts preparing it immediately, and finishes it at time 21, so the waiting time for the fourth customer is 21 - 20 = 1.

So average wait time = (2 + 6 + 4 + 1) / 4 = 3.25.


constraint:
`1 <= customers.length <= 105`
`1 <= arrivali, timei <= 104`
`arrival <= arrivali+1`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a binary string ""binary"" which only contains ""0"" or ""1"". You can apply each of the following operations multiple times:
Operation 1: If the number contains the substring ""00"", it can be replaced with ""10"".


For example, `""00010"" -> ""10010`""
Operation 2: If the number contains the substring ""10"", it can be replaced with ""01"".


For example, `""00010"" -> ""00001""`
Returns the largest binary string obtainable after any number of operations. A binary string ""x"" is greater than a binary string ""y"" if the decimal representation of ""x"" is greater than the decimal representation of ""y"".


Example 1:
input: binary=""000110""
Output: ""111011""
Explanation: Valid conversion sequences can be:
""000110"" -> ""000101""
""000101"" -> ""100101""
""100101"" -> ""110101""
""110101"" -> ""110011""
""110011"" -> ""111011""

Example 2:
input: binary=""01""
Output: ""01""
Explanation: ""01"" can no longer be converted.


constraint:
`1 <= binary.length <= 105`
`binary` consists of `'0'` and `'1'`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""k"". `nums` contains only `0` and `1`. You can select two adjacent indices and swap their values ​​in one step.

Return the minimum number of moves required so that `nums` has `k` consecutive `1`s.


Example 1:
Input: nums = [1,0,0,1,0,1], k = 2
Output: 1
Explanation: In 1 step, nums can be [1,0,0,0,1,1] and have 2 consecutive 1s.


Example 2:
Input: nums = [1,0,0,0,0,0,1,1], k = 3
Output: 5
Explanation: In 5 steps, the leftmost 1 can be shifted right until nums = [0,0,0,0,0,1,1,1].


Example 3:
Input: nums = [1,1,0,1], k = 2
output: 0
Explanation: nums already has 2 consecutive 1s.


constraint:
`1 <= nums.length <= 105`
`nums[i]` is either `0` or `1`.

`1 <= k <= sum(nums)`",0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a special apple tree that bears apples every day for `n` consecutive days. On the `ith` day, the tree grows `apples[i]` apples, which will rot after `days[i]` days, that is, the apples on the `i + days[i]` day will rot and cannot be eaten. Some days, the apple tree does not grow any apples, denoted by apples[i] == 0 and days[i] == 0.

You decide to eat at most one apple a day (to keep the doctor away). Note that you can continue to eat after the first n days.

Given two integer arrays ""days"" and ""apples"" of length ""n"", return the maximum number of apples you can eat.


Example 1:
Input: Apples = [1,2,3,5,2], Days = [3,2,1,4,2]
Output: 7
Explanation: You can eat 7 apples:
- On the first day, you eat an apple that grew on the first day.

- The next day, you eat an apple that grows the next day.

- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rotted.

- From the fourth day to the seventh day, eat the apple grown on the fourth day.


Example 2:
Input: Apples = [3,0,0,0,0,2], Days = [3,0,0,0,0,2]
Output: 5
Explanation: You can eat 5 apples:
- Eat the apples grown on the first day from the first day to the third day.

- Do nothing on the fourth and fifth days.

- On the sixth and seventh days, you eat the apples that grew on the sixth day.


constraint:
`apples. length == n`
`days. length == n`
`1 <= n <= 2 * 104`
`0 <= apples[i], days[i] <= 2 * 104`
`days[i] = 0` if and only if `apples[i] = 0`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a 2D ""grid"" of size ""m x n"", representing a box, and you have ""n"" balls. The top and bottom of the box are open.

Each cell in the box has a slant across the cell's two corners that redirects the ball to the right or left.

The board that redirects the ball to the right runs from top left to bottom right, represented as ""1"" in the grid.

Redirect the ball to the left side of the board from top right to bottom left, denoted as ""-1"" in the grid.

We put a ball on top of each column of the box. Every ball can get stuck in the box or fall off the bottom. If the ball hits the ""V"" pattern between the two boards, or if the boards redirect the ball to either wall of the box, the ball will get stuck.

Returns an array `answer` of size `n`, where `answer[i]` is the column where the ball fell from the bottom if the ball fell from the top `ith` column, or `-1` if the ball is stuck in the box .


Example 1:
Input: grid = [[1,1,1,-1,-1],[1,1,1,-1,-1],[-1,-1,-1,1,1],[1 ,1,1,1,-1],[-1,-1,-1,-1,-1]]
Output: [1,-1,-1,-1,-1]
Explanation: This example is shown in the figure.

Ball b0 falls in column 0 and out of the box in column 1.

Ball b1 lands in column 1 and will get stuck in the box between columns 2 and 3 and row 1.

Ball b2 lands in column 2 and will get stuck on the box between columns 2 and 3 and row 0.

Ball b3 lands in column 3 and will be stuck on the box between columns 2 and 3 and row 0.

Ball b4 lands in column 4 and will get stuck on the box between columns 2 and 3 and row 1.


Example 2:
Input: Grid = [[-1]]
output: [-1]
Explanation: The ball is stuck on the left wall.


Example 3:
Input: grid = [[1,1,1,1,1,1],[-1,-1,-1,-1,-1,-1],[1,1,1,1,1, 1],[-1,-1,-1,-1,-1,-1]]
Output: [0,1,2,3,4,-1]

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 100`
`grid[i][j]` is either `1` or `-1`.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" consisting of non-negative integers. You also get an array of ""queries"" where ""queries[i] = [xi, mi]"".

The answer to the `ith` query is the largest bitwise `XOR` value of `xi` with any elements in `nums` not exceeding `mi`. In other words, for all j such that nums[j] <= mi, the answer is max(nums[j] XOR xi). If all elements in `nums` are greater than `mi`, the answer is `-1`.

Returns an integer array ""answer"" where ""answer.length == queries.length"" and ""answer[i]"" are the answers to the ""ith"" query.


Example 1:
Input: nums = [0,1,2,3,4], query = [[3,1],[1,3],[5,6]]
Output: [3,3,7]
explain:
1) 0 and 1 are the only two integers not greater than 1. 0 XOR 3 = 3 and 1 XOR 3 = 2. The larger of the two is 3.

2) 1 XOR 2 = 3.

3) 5 XOR 2 = 7.


Example 2:
Input: nums = [5,2,4,6,6,3], query = [[12,4],[8,1],[6,3]]
Output: [15,-1,5]

constraint:
`1 <= nums.length, queries.length <= 105`
`query[i].length == 2`
`0 <= nums[j], xi, mi <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An array `A` is greater than some array `B` if for the first index `i` where `A[i] != B[i]`, `A[i] > B[i]`.

For example, consider the ""0"" index:
`[1,3,2,4] > [1,2,2,4]` because at index `1`, `3 > 2`.

`[1,4,4,4] < [2,1,1,1]` because at index `0`, `1 < 2`.

A subarray is a contiguous subsequence of an array.

Given an integer array ""nums"" consisting of distinct integers, return the largest subarray of ""nums"" of length ""k"".


Example 1:
Input: nums = [1,4,5,2,3], k = 3
Output: [5,2,3]
Explanation: The subarrays of size 3 are: [1,4,5], [4,5,2] and [5,2,3].

Among them, [5,2,3] is the largest.


Example 2:
Input: nums = [1,4,5,2,3], k = 4
Output: [4,5,2,3]
Explanation: The subarrays of size 4 are: [1,4,5,2] and [4,5,2,3].

Among them, [4,5,2,3] is the largest.


Example 3:
Input: nums = [1,4,5,2,3], k = 1
Output: [5]

constraint:
`1 <= k <= nums.length <= 105`
`1 <= nums[i] <= 109`
All integers in `nums` are unique.

Follow up: what if the integers in `nums` are not distinct?",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are assigned to put a certain number of boxes on a truck. Given a two-dimensional array ""boxTypes"" where ""boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]"":
`numberOfBoxesi` is the number of boxes of type `i`.

`numberOfUnitsPerBoxi` is the number of units in each box of type `i`.

You also get an integer `truckSize`, which is the maximum number of boxes that can be placed on the truck. You can choose any box to put on the truck as long as the number of boxes does not exceed `truckSize`.

Returns the maximum total number of units that can be placed on the truck.


Example 1:
Input: boxTypes = [[1,3],[2,2],[3,1]], truckSize = 4
Output: 8
Explanation: There are:
- 1 box of the first type containing 3 units.

- 2 boxes of the second type, each containing 2 units.

- 3 boxes of the third category, each containing 1 unit.

You can take all boxes of the first and second types, and one box of the third type.

Total number of units = (1 * 3) + (2 * 2) + (1 * 1) = 8.


Example 2:
Input: boxTypes = [[5,10],[2,5],[4,7],[3,9]], truckSize = 10
Output: 91

constraint:
`1 <= boxTypes. length <= 1000`
`1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`
`1 <= truck size <= 106`",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A good meal is one that contains exactly two different foods and the sum of deliciousness is a power of 2.

You can choose any two different foods to make a great meal.

Given an integer array `deliciousness`, where `deliciousness[i]` is the deliciousness of the `i -th food`, return the number of different delicacies you have eaten modulo 109 + 7 from this list.

Note that items with different indices are considered different even if they have the same delicious value.


Example 1:
Input: Delicious = [1,3,5,7,9]
Output: 4
Explanation: Good meals are (1,3), (1,7), (3,5) and (7,9).

Their respective sums are 4, 8, 8, and 16, which are all powers of 2.


Example 2:
Input: Delicious = [1,1,1,3,3,3,7]
Output: 15
Explanation: A good meal is (1,1) 3 ways, (1,3) 9 ways, (1,7) 3 ways.


constraint:
`1 <= deliciousness. length <= 105`
`0 <= tasty[i] <= 220`",1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Splitting an array of integers is good if:
The array is divided into three non-empty contiguous sub-arrays - named ""left"", ""mid"", ""right"" from left to right.

The sum of `left` elements is less than or equal to the sum of `mid` elements, and the sum of `mid` elements is less than or equal to the sum of `right` elements.

Given `nums`, an array of non-negative integers, return the number of good ways to split `nums`. Since the number may be too large, return it modulo 109 + 7 .


Example 1:
Input: nums = [1,1,1]
Output: 1
Explanation: The only good way to split nums is [1][1][1].


Example 2:
Input: nums = [1,2,2,2,5,0]
Output: 3
Explanation: There are 3 good ways to split nums:
[1] [2] [2,2,5,0]
[1] [2,2] [2,5,0]
[1,2] [2,2] [5,0]

Example 3:
Input: nums = [3,2,1]
output: 0
Explanation: There is no good way to split nums.


constraint:
`3 <= nums.length <= 105`
`0 <= nums[i] <= 104`",0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""target"" of distinct integers and another array ""arr"" of integers that can be repeated.

You can insert any integer anywhere in arr in one operation. For example, if arr = [1,4,1,2], you can add 3 in the middle, making it [1,4,3,1,2]. Note that you can insert integers at the very beginning or end of the array.

Return the minimum number of operations required to make ""target"" a subsequence of ""arr"".

A subsequence of an array is a new array generated from the original array by removing some elements (possibly none) without changing the relative order of the remaining elements. For example, ""[2,7,4]"" is a subsequence of ""[4,2,3,7,2,1,4]"" (the underlined element), and ""[2,4,2]"" is no.


Example 1:
Input: target = [5,1,3], `arr` = [9,4,2,3,4]
Output: 2
Explanation: You can add 5 and 1 such that `arr` = [5,9,4,1,2,3,4], then target will be a subsequence of `arr`.


Example 2:
Input: target = [6,4,8,1,3,2], `arr` = [4,7,6,2,3,8,6,1]
Output: 3

constraint:
`1 <= target.length, arr.length <= 105`
`1 <= target[i], arr[i] <= 109`
`target` contains no duplicates.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Hussey wants to save up for his first car. He deposits money into Leetcode Bank every day.

He first puts in ""$1"" on Monday of the first day. Every day from Tuesday to Sunday, he puts in ""$1"" more than the previous day. On each subsequent Monday, he puts in $1 more than on the previous Monday.
Given `n`, return his total amount in Leetcode bank at the end of day `n`.


Example 1:
Input: n = 4
Output: 10
Explanation: After day 4, the total is 1 + 2 + 3 + 4 = 10.


Example 2:
Input: n = 10
Output: 37
Explanation: After day 10, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Note that on the 2nd Monday, Hercy only puts in $2.


Example 3:
Input: n = 20
Output: 96
Explanation: After day 20, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.


constraint:
`1 <= n <= 1000`",0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" and two integers ""x"" and ""y"". You can perform both types of operations multiple times.

Remove the substring ""ab"" and get ""x"" points.


For example, when ""ab"" is removed from ""cabxbae"", it becomes ""cxbae"".

Remove the substring ""ba"" and get y points.


For example, when ""ba"" is removed from ""cabxbae"", it becomes ""cabxe"".

Returns the maximum score that can be obtained after applying the above operations to `s`.


Example 1:
Input: s = ""cdbcbbaaabab"", x = 4, y = 5
Output: 19
explain:
- Remove the underlined ""ba"" in ""cdbcbbaaabab"". Now, s = ""cdbcbbaaab"" and the score is increased by 5 points.

- Remove the underlined ""ab"" in ""cdbcbbaaab"". Now, s = ""cdbcbbaa"" and the score is increased by 4 points.

- Remove the underlined ""ba"" in ""cdbcbbaa"". Now, s = ""cdbcba"" and the score is increased by 5 points.

- Remove the underlined ""ba"" in ""cdbcba"". Now, s = ""cdbc"" and the score is incremented by 5 points.

Total score = 5 + 4 + 5 + 5 = 19.


Example 2:
Input: s = ""aabbaaxybbaabb"", x = 5, y = 4
Output: 20

constraint:
`1 <= s.length <= 105`
`1 <= x, y <= 104`
`s` consists of lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", find the sequence that satisfies all of the following conditions:
The integer ""1"" occurs once in the sequence.

Each integer between `2` and `n` appears twice in the sequence.

For each integer ""i"" between ""2"" and ""n"", the distance between two occurrences of ""i"" is exactly ""i"".

The distance between two numbers ""a[i]"" and ""a[j]"" on the sequence is the absolute difference of their indices ""|j - i|"".

Returns the lexicographically largest sequence. It is guaranteed that under the given constraints, there is always a solution.
A sequence a is greater than a sequence b (of the same length) if a number in sequence a is greater than the corresponding number in b at the first position where a and b differ. For example, ""[0,1,9,0]"" is lexicographically greater than ""[0,1,5,6]"" because the first position they differ is the third digit, and ""9"" is greater than "" 5” `.


Example 1:
Input: n = 3
Output: [3,1,2,3,2]
Explanation: [2,3,2,1,3] is also a valid sequence, but [3,1,2,3,2] is the lexicographically largest valid sequence.


Example 2:
Input: n = 5
Output: [5,3,1,4,3,5,2,4,2]

constraint:
`1 <= n <= 20`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array pairs, where pairs[i] = [xi, yi], and:
There are no duplicates.

`xi < yi`
Let ways be the number of rooted trees that satisfy the following conditions:
The tree consists of nodes whose values ​​occur in pairs.

A pair `[xi, yi]` exists in `pairs` if and only if `xi` is an ancestor of `yi` or `yi` is an ancestor of `xi`.

Note: The tree does not have to be a binary tree.

Two ways are considered different if at least one node has a different parent in both ways.

return:
`0` if `ways == 0`
`1` if `ways == 1`
`2` if `ways > 1`
A rooted tree is a tree with a single root node and all edges are directed outward from the root.

A node's ancestors are any nodes on the path from the root to that node (excluding the node itself). Roots have no ancestors.


Example 1:
Input: pair = [[1,2],[2,3]]
Output: 1
Explanation: There is only one valid rooted tree, as shown above.


Example 2:
Input: pair = [[1,2],[2,3],[1,3]]
Output: 2
Explanation: There are multiple valid rooted trees. Three of them are shown in the image above.


Example 3:
Input: pair = [[1,2],[2,3],[2,4],[1,5]]
output: 0
Explanation: There is no valid rooted tree.


constraint:
`1 <= pairs.length <= 105`
`1 <= xi < yi <= 500`
Elements in `pairs` are unique.",0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the ""head"" of a linked list and an integer ""k"".

Returns the head of the linked list after swapping the values ​​of the kth node from the beginning and the kth node from the end (lists are indexed from 1).


Example 1:
Input: head = [1,2,3,4,5], k = 2
Output: [1,4,3,2,5]

Example 2:
Input: head = [7,9,6,6,7,8,3,0,9,5], k = 5
Output: [7,9,6,6,8,7,3,0,9,5]

Example 3:
Input: head = [1], k = 1
output: [1]

Example 4:
Input: head = [1,2], k = 1
output: [2,1]

Example 5:
Input: head = [1,2,3], k = 2
Output: [1,2,3]

constraint:
The number of nodes in the list is ""n"".

`1 <= k <= n <= 105`
`0 <= Node.val <= 100`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays, `source` and `target`, both of length `n`. You also get an array allowedSwaps, where each allowedSwaps[i] = [ai, bi] means that you can swap the source of elements at index ai and index bi (starting from 0) of the array`. Note that you can swap elements at a particular index pair multiple times, in any order.

The Hamming distance of two arrays ""source"" and ""destination"" of the same length is the number of positions at which the elements differ. Formally, it is the number of indices `i` where `0 <= i <= n-1`, where `source[i] != target[i]` (0-indexed).

After performing any number of swap operations on the array ""source"", returns the minimum Hamming distance between ""source"" and ""target"".


Example 1:
Input: source = [1,2,3,4], target = [2,1,4,5], allowedSwaps = [[0,1],[2,3]]
Output: 1
Explanation: A source can be transformed by:
- Swap indices 0 and 1: source = [2,1,3,4]
- Swap indices 2 and 3: source = [2,1,4,3]
The source and target have a Hamming distance of 1 because they differ in 1 position: index 3.


Example 2:
Input: source = [1,2,3,4], target = [1,3,2,4], allowedSwaps = []
Output: 2
Explanation: No exchange allowed.

The source and target have a Hamming distance of 2 because they differ in 2 locations: index 1 and index 2.


Example 3:
Input: source = [5,1,2,4,3], target = [1,5,4,2,3], allowedSwaps = [[0,4],[4,2],[1,3] ,[1,4]]
output: 0

constraint:
`n == source.length == target.length`
`1 <= n <= 105`
`1 <= source[i], target[i] <= 105`
`0 <= allowedSwaps.length <= 105`
`allowedSwaps[i].length == 2`
`0 <= ai, bi <= n - 1`
`ai != bi`",0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""jobs"", where ""jobs[i]"" is the time taken to complete the ""ith""th job.

You can assign jobs to `k` workers. Each job should be assigned to a worker. A worker's working time is the sum of the time required to complete all the jobs assigned to them. Your goal is to design an optimal assignment that minimizes the maximum working time of any worker.

Returns the smallest possible maximum work time for any assignment.

Example 1:
Input: jobs = [3,2,3], k = 3
Output: 3
Explanation: By assigning each person a job, the maximum time is 3.


Example 2:
Input: jobs = [1,2,4,7,8], k = 2
Output: 11
Instructions: Assign assignments as follows:
Worker 1: 1, 2, 8 (working hours=1+2+8=11)
Worker 2: 4, 7 (working hours = 4 + 7 = 11)
The maximum working hours is 11.


constraint:
`1 <= k <= jobs.length <= 12`
`1 <= jobs[i] <= 107`",0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"An undirected graph of `n` nodes is defined by `edgeList`, where `edgeList[i] = [ui, vi, disi]` represents the edge between nodes `ui` and `vi` with distance `disi` . Note that there may be multiple edges between two nodes and the graph may not be connected.

Implement the ""DistanceLimitedPathsExist"" class:
`DistanceLimitedPathsExist(int n, int[][] edgeList)` initializes the class with an undirected graph.

`boolean query(int p, int q, int limit)` returns `true` if there is a path from `p` to `q` and the distance of each edge on the path is strictly less than `limit`, otherwise `false` `.


Example 1:
enter
[""DistanceLimitedPathsExist"", ""query"", ""query"", ""query"", ""query""]
[[6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]]], [2, 3, 2], [1, 3, 3], [2, 0, 3], [0, 5, 6]]
output
[null,true,false,true,false]
explain
DistanceLimitedPathsExist distanceLimitedPathsExist = new DistanceLimitedPathsExist(6, [[0, 2, 4], [0, 3, 2], [1, 2, 3], [2, 3, 1], [4, 5, 5]] );
distanceLimitedPathsExist.query(2, 3, 2); // returns true. There is a side between 2 and 3 with distance 1 less than 2.

distanceLimitedPathsExist.query(1, 3, 3); // returns false. It is not possible to go from 1 to 3 when the distance is strictly less than 3.

distanceLimitedPathsExist.query(2, 0, 3); // returns true. There is a way to go from 2 to 0 with a distance < 3: 2 to 3 to 0.

distanceLimitedPathsExist.query(0, 5, 6); // returns false. There is no path from 0 to 5.


`Constraints:`
`2 <= n <= 104`
`0 <= edgeList.length <= 104`
`edgeList[i].length == 3`
`0 <= ui, vi, p, q <= n-1`
`ui != vi`
`p != q`
`1 <= disi, limit <= 109`
At most 104 calls to query will be made.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `rectangles`, where `rectangles[i] = [li, wi]` represents the ith-th rectangle of length li and width wi.

If both `k <= li` and `k <= wi` are satisfied, you can cut the `ith`th rectangle to form a square of side length `k`. For example, if you have a rectangle ""[4,6]"", you can cut it into a square whose side length is at most ""4"".

Let `maxLen` be the side length of the largest square you can get from any given rectangle.

Returns the number of rectangles that can form a square of side length ""maxLen"".


Example 1:
Input: Rectangle = [[5,8],[3,9],[5,12],[16,5]]
Output: 3
Explanation: The length of the largest square that can be obtained from each rectangle is [5,3,5,5].

The largest possible square has length 5, which you can get from 3 rectangles.


Example 2:
Input: Rectangle = [[2,3],[3,7],[4,3],[3,7]]
Output: 3

constraint:
`1 <= rectangles.length <= 1000`
`rectangle[i].length == 2`
`1 <= li, wi <= 109`
`li != wi`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" containing distinct positive integers, return the number of tuples ""(a, b, c, d)"" that satisfy ""a * b = c * d"", where ""a"", ""b"", ""c"" and `d` are elements of `nums` and `a != b != c != d`.


Example 1:
Input: nums = [2,3,4,6]
Output: 8
Explanation: There are 8 valid tuples:
(2,6,3,4) , (2,6,4,3) , (6,2,3,4) , (6,2,4,3)
(3,4,2,6) , (4,3,2,6) , (3,4,6,2) , (4,3,6,2)

Example 2:
Input: nums = [1,2,4,5,10]
output: 16
Explanation: There are 16 valid tuples:
(1,10,2,5) , (1,10,5,2) , (10,1,2,5) , (10,1,5,2)
(2,5,1,10) , (2,5,10,1) , (5,2,1,10) , (5,2,10,1)
(2,10,4,5) , (2,10,5,4) , (10,2,4,5) , (10,2,4,5)
(4,5,2,10) , (4,5,10,2) , (5,4,2,10) , (5,4,10,2)

Example 3:
Input: nums = [2,3,4,6,8,12]
Output: 40

Example 4:
Input: nums = [2,3,5,7]
output: 0

constraint:
`1 <= nums.length <= 1000`
`1 <= nums[i] <= 104`
All elements in `nums` are distinct.",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary matrix ""matrix"" of size ""m x n"", you can rearrange the columns of ""matrix"" in any order.

Returns the area of ​​the largest submatrix in `matrix` where each element of the submatrix is ​​`1` after optimally reordering the columns.


Example 1:
Input: Matrix = [[0,0,1],[1,1,1],[1,0,1]]
Output: 4
Note: You can rearrange the columns as shown above.

The largest 1-submatrix (bold) has an area of ​​4.


Example 2:
Input: Matrix = [[1,0,1,0,1]]
Output: 3
Note: You can rearrange the columns as shown above.

The largest 1-submatrix (bold) has an area of ​​3.


Example 3:
Input: Matrix = [[1,1,0],[1,0,1]]
Output: 2
Explanation: Note that you have to rearrange the entire column, and you cannot make a submatrix of 1 larger than the area of ​​2.


Example 4:
Input: matrix = [[0,0],[0,0]]
output: 0
Explanation: Since there is no 1, a submatrix of 1 cannot be formed, and the area is 0.


constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= m * n <= 105`
`matrix[i][j]` is either `0` or `1`.",0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A cat and a mouse played a game called cat and mouse.

The environment is represented by a ""grid"" of size ""row x column"", where each element is either a wall, floor, player (cat, mouse), or food.

Players are represented by the characters ""C"" (cat), ""M"" (mouse).

Floors are represented by the character ""."" and can be walked on.

Walls are represented by the character ""#"" and cannot be walked on.

Food is represented by the character ""F"" and can be walked on.

Only one of each character `'C'`, `'M'` and `'F' in `grid`.

The mouse and the cat play according to the following rules:
The mouse moves first, then they take turns moving.

In each round, the cat and mouse can jump in one of four directions (left, right, up, down). They cannot jump over walls, nor jump off the ""grid"".

`catJump, mouseJump` are respectively the maximum length that Cat and Mouse can jump at one time. Cat and mouse jumps cannot exceed the maximum length.

The same posture is allowed.

Mice can jump over cats.

The game can end in 4 ways:
If Cat occupies the same position as Mouse, Cat wins.

If Cat reaches the food first, Cat wins.

If the mouse reaches the food first, the mouse wins.

If the Mouse cannot reach the food within 1000 rounds, the Cat wins.

Given a rows x cols matrix grid and two integers catJump and mouseJump, return true if both Cat and Mouse play best and Mouse can win the game, otherwise return false.


Example 1:
Input: grid = [""####F"",""#C..."",""M....""], catJump = 1, mouseJump = 2
output: true
Explanation: The cat cannot catch the mouse before it is the mouse's turn, nor can it get the food before the mouse.


Example 2:
Input: grid = [""M.C...F""], catJump = 1, mouseJump = 4
output: true

Example 3:
Input: grid = [""M.C...F""], catJump = 1, mouseJump = 3
output: error

Example 4:
Input: grid = [""C...#"",""...#F"",""....#"",""M....""], catJump = 2, mouseJump = 5
output: error

Example 5:
Input: grid = ["".M..."",""..#.."",""#..#."",""C#.#."",""...#F""], catJump = 3, mouseJump = 1
output: true

constraint:
`rows == grid.length`
`cols = grid[i].length`
`1 <= rows, columns <= 8`
`grid[i][j]` consists only of the characters `'C'`, `'M'`, `'F'`, `'.'` and `'#'`.

Only one of each character `'C'`, `'M'` and `'F' in `grid`.

`1 <= catJump, mouseJump <= 8`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You're starving and you want to eat as quickly as possible. You want to find the shortest path to any food cell.

Given an ""m x n"" character matrix ""grid"" consisting of these different types of cells:
`'*'` is your location. There is only one ""*"" cell.

`'#'` are food cells. There may be multiple food cells.

""O"" is free space, you can travel through these cells.

""X"" is an obstacle, you cannot go through these cells.

If there are no obstacles, you can go to any adjacent cell north, east, south or west of your current position.

Returns the length of the shortest path to any food cell. If there is no path to get you to food, return `-1`.


Example 1:
Input: grid = [[""X"",""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""O"",""O"",""O "",""X""],[""X"",""O"",""O"",""#"",""O"",""X""],[""X"",""X"",""X"",""X"", ""X"",""X""]]
Output: 3
Explanation: It takes 3 steps to get to the food.


Example 2:
Input: grid = [[""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""X"",""O"",""X""],[ ""X"",""O"",""X"",""#"",""X""],[""X"",""X"",""X"",""X"",""X""]]
Output: -1
Explanation: Inability to reach food.


Example 3:
Input: grid = [[""X"",""X"",""X"",""X"",""X"",""X"",""X"",""X""],[""X"",""*"",""O "",""X"",""O"",""#"",""O"",""X""],[""X"",""O"",""O"",""X"",""O"",""O"",""X "",""X""],[""X"",""O"",""O"",""O"",""O"",""#"",""O"",""X""],[""X"",""X"", ""X"",""X"",""X"",""X"",""X"",""X""]]
Output: 6
Explanation: There can be multiple food cells. It only takes 6 steps to get to the bottom food.


Example 4:
Input: grid = [[""O"",""*""],[""#"",""O""]]
Output: 2

Example 5:
Input: grid = [[""X"",""*""],[""#"",""X""]]
Output: -1

constraint:
`m == grid. length`
`n == grid[i].length`
`1 <= meters, n <= 200`
`grid[row][col]` is `'*'`, `'X'`, `'O'`, or `'#'`.

`grid` contains only one `'*'`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"On a social network consisting of m users and some friendship between users, two users can communicate with each other if they know a common language.

Given an integer ""n"", an array ""languages"" and an array ""friendships"" where:
There are `n` languages, numbered `1` to `n`,
`languages[i]` is the set of languages ​​known to the `i th` user, and
`friendships[i] = [u i , v i]` means friendship between users `u i` and `vi`.

You can choose a language and teach it to some users so all your friends can communicate with each other. Returns the minimum number of users you need to teach.

Note that friendship is not transitive, meaning that if `x` is a friend of `y` and `y` is a friend of `z`, this does not guarantee that `x` is a friend of `z`.


Example 1:
Input: n = 2, language = [[1], [2], [1,2]], friendship = [[1,2], [1,3], [2,3]]
Output: 1
Instructions: You can teach User 1 a second language or User 2 a first language.


Example 2:
Input: n = 3, language = [[2], [1,3], [1,2], [3]], friendship = [[1,4], [1,2], [3,4] ,[2,3]]
Output: 2
Explanation: To teach a third language to users 1 and 3, generate two users to teach.


constraint:
`2 <= n <= 500`
`languages.length == m`
`1 <= meters <= 500`
`1 <= language[i].length <= n`
`1 <= language[i][j] <= n`
`1 <= u i < v i <= languages.length`
`1 <= friendships.length <= 500`
All tuples `(u i, v i)` are unique
`languages[i]` contains only unique values",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an integer array perm which is the permutation of the first n positive integers, where n is always odd.

It is encoded into another integer array ""encoded"" of length ""n - 1"" such that ""encoded[i] = perm[i] XOR perm[i + 1]"". For example, if perm = [1,3,2], then encoded = [2,1].

Given an `encoded` array, return the original array `perm`. The answer is guaranteed to exist and be unique.


Example 1:
Input: encoding = [3,1]
Output: [1,2,3]
Explanation: If perm = [1,2,3], then encoded = [1 XOR 2,2 XOR 3] = [3,1]

Example 2:
Input: encoding = [6,5,4,6]
Output: [2,4,1,5,3]

constraint:
`3 <= n < 105`
`n` is an odd number.

`encoded.length == n - 1`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given a two-dimensional array of integers, `queries`. For each queries[i], where queries[i] = [ni, ki], find the number of different ways to put a positive integer into an array of size ni such that the product of the integers is `ki`. Since the number of methods may be too large, the answer to the ith query is the number of methods modulo 109 + 7.

Returns an integer array answer where answer.length == queries.length and answer[i] is the answer to the ith query.


Example 1:
Input: query = [[2,6],[5,1],[73,660]]
Output: [4,1,50734910]
Explanation: Each query is independent.

[2,6]: There are 4 ways to fill an array of size 2 by 6: [1,6], [2,3], [3,2], [6,1].

[5,1]: There is 1 way to fill an array of size 5 that is multiplied by 1: [1,1,1,1,1].

[73,660]: There are 1050734917 ways to fill an array of size 73, times 660. 1050734917 modulo 109 + 7 = 50734910.


Example 2:
Input: query = [[1,1],[2,2],[3,3],[4,4],[5,5]]
Output: [1,2,3,10,5]

constraint:
`1 <= queries.length <= 104`
`1 <= ni, ki <= 104`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string `time` of the form `hh:mm` with some digits (denoted by `?`) hidden in the string.

Valid times are times between ""00:00"" and ""23:59"", inclusive.

Returns the latest valid time you can get from time by substituting hidden numbers.


Example 1:
Input: time = ""2?:?0""
Output: ""23:50""
Explanation: The latest hour starting with the number ""2"" is 23, and the latest minute ending with the number ""0"" is 50.


Example 2:
input:time=""0?:3?""
Output: ""09:39""

Example 3:
input:time=""1?:22""
Output: ""19:22""

constraint:
`time` is in `hh:mm` format.

Guaranteed that you can generate a valid time from the given string.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""a"" and ""b"" consisting of lowercase letters. You can change any character in `a` or `b` to any lowercase letter in one operation.

Your goal is to meet one of the following three conditions:
In the alphabet, every letter in ""a"" is strictly smaller than every letter in ""b"".

In the alphabet, every letter in ""b"" is strictly smaller than every letter in ""a"".

`a` and `b` both contain only one different letter.

Returns the minimum number of operations required to achieve the goal.


Example 1:
Input: a = ""aba"", b = ""caa""
Output: 2
Explanation: Consider the best way to make each condition true:
1) 2 operations change b to ""ccc"", then every letter in a is smaller than every letter in b.

2) Three operations turn a into bbb and b into aaa, then each letter in b is smaller than each letter in a.

3) Change a to ""aaa"" and b to ""aaa"" twice, then a and b are composed of a different letter.

The best way is to do it in 2 operations (condition 1 or condition 3).


Example 2:
Input: a = ""dabadd"", b = ""cda""
Output: 3
Explanation: The best way is to make condition 1 true by changing b to ""eee"".


constraint:
`1 <= a.length, b.length <= 105`
`a` and `b` consist of lowercase letters only.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional ""matrix"" of size ""m x n"", consisting of non-negative integers. You also get an integer ""k"".

The value of the coordinate `(a, b)` of the matrix is ​​the XOR of all `matrix[i][j]`, where `0 <= i <= a < m` and `0 <= j <= b < n `(0 index).

Find the maximum `kth` of all coordinates of `matrix` (indexed from 1).


Example 1:
Input: matrix = [[5,2],[1,6]], k = 1
Output: 7
Explanation: The value of coordinate (0,1) is 5 XOR 2 = 7, which is the maximum value.


Example 2:
Input: matrix = [[5,2],[1,6]], k = 2
Output: 5
Explanation: The value of coordinate (0,0) is 5 = 5, which is the second largest value.


Example 3:
Input: matrix = [[5,2],[1,6]], k = 3
Output: 4
Explanation: The value of coordinate (1,0) is 5 XOR 1 = 4, which is the 3rd largest value.


Example 4:
Input: matrix = [[5,2],[1,6]], k = 4
output: 0
Explanation: The value of coordinate (1,1) is 5 XOR 2 XOR 1 XOR 6 = 0, which is the 4th largest value.


constraint:
`m == matrix.length`
`n == matrix[i].length`
`1 <= meters, n <= 1000`
`0 <= matrix[i][j] <= 106`
`1 <= k <= m * n`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have a cubic storage room where the width, length and height of the room are all equal to ""n"" units. You are asked to place n boxes in this room, each box is a cube of unit side length. However, there are some rules for placing boxes:
You can place the box anywhere on the floor.

If box 'x' is placed on top of box 'y', then each of the four vertical sides of box 'y' must be adjacent to another box or adjacent to a wall.

Given an integer ""n"", return the smallest possible number of boxes touching the floor.


Example 1:
Input: n = 3
Output: 3
Explanation: The picture above shows the placement of the three boxes.

The boxes are placed in the corner of the room, with the corner on the left.


Example 2:
Input: n = 4
Output: 3
Explanation: The picture above shows the placement of the four boxes.

The boxes are placed in the corner of the room, with the corner on the left.


Example 3:
Input: n = 10
Output: 6
Explanation: The picture above shows the placement of the ten boxes.

The boxes are placed in the corner of the room with the corner on the back.


constraint:
`1 <= n <= 109`",0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given the root of a binary tree and two integers ""p"" and ""q"", return the distance between nodes with value ""p"" and value ""q"" in the tree.

The distance between two nodes is the number of edges on the path from one node to another.


Example 1:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 0
Output: 3
Explanation: There are 3 edges between 5 and 0: 5-3-1-0.


Example 2:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 7
Output: 2
Explanation: There are 2 edges between 5 and 7: 5-2-7.


Example 3:
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 5
output: 0
Explanation: A node has a distance of 0 from itself.


constraint:
The number of nodes in the tree is in the range '[1, 104]'.

`0 <= Node.val <= 109`
All `Node.val` are unique.

`p` and `q` are values ​​in the tree.",0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You work in a ball factory where there are n balls, numbered from lowLimit to highLimit inclusive (ie, n == highLimit - lowLimit + 1), and an infinite number of boxes, numbered from 1` to `infinity`.

Your job in this factory is to put each ball into a box with a number equal to the sum of the digits of the ball numbers. For example, ball number ""321"" will go into bin number ""3+2+1=6"" and ball number ""10"" will go into bin number ""1+0=1"".

Given two integers ""lowLimit"" and ""highLimit"", return the ball with the highest number of balls in the box.


Example 1:
Input: lowLimit = 1, highLimit = 10
Output: 2
explain:
Box number: 1 2 3 4 5 6 7 8 9 10 11 ...

Number of balls: 2 1 1 1 1 1 1 1 1 0 0 ...

Box 1 has the most balls with 2 balls.


Example 2:
Input: lowLimit = 5, highLimit = 15
Output: 2
explain:
Box number: 1 2 3 4 5 6 7 8 9 10 11 ...

Number of balls: 1 1 1 1 2 2 1 1 1 0 0 ...

Squares 5 and 6 have the most balls, 2 balls each.


Example 3:
Input: lowLimit = 19, highLimit = 28
Output: 2
explain:
Box No.: 1 2 3 4 5 6 7 8 9 10 11 12 ...

Number of balls: 0 1 1 1 1 1 1 1 1 2 0 0 ...

Box 10 has the most balls, with 2 balls.


constraint:
`1 <= lowLimit <= highLimit <= 105`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an integer array nums consisting of n unique elements, but you forgot about it. However, you do remember every pair of adjacent elements in `nums`.

Given a two-dimensional integer array ""adjacentPairs"" of size ""n - 1"", where each ""adjacentPairs[i] = [ui, vi]"" indicates that elements ""ui"" and ""vi"" are adjacent in ""nums"" .

Guarantees that every pair of adjacent elements `nums[i]` and `nums[i+1]` will exist in `adjacentPairs`, either `[nums[i], nums[i+1]]` or ` [nums[i+1], nums[i]]`. These pairs can appear in any order.

Return the original array `nums`. If there are multiple solutions, return any of them.


Example 1:
Input: adjacentPairs = [[2,1],[3,4],[3,2]]
Output: [1,2,3,4]
Explanation: All adjacent pairs of this array are in adjacentPairs.

Note that adjacentPairs[i] may not be in left-to-right order.


Example 2:
Input: adjacentPairs = [[4,-2],[1,4],[-3,1]]
Output: [-2,4,1,-3]
Explanation: There can be negative numbers.

Another solution is [-3,1,4,-2] which is also acceptable.


Example 3:
Input: adjacentPairs = [[100000,-100000]]
Output: [100000,-100000]

constraint:
`nums. length == n`
`adjacentPairs. length == n - 1`
`adjacentPairs[i].length == 2`
`2 <= n <= 105`
`-105 <= nums[i], ui, vi <= 105`
There exist some nums with adjacentPairs as their pairs.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get a (0-based index) array `candiesCount` of positive integers, where `candiesCount[i]` represents the number of candies of type `ith` you have. You also get a 2D array ""queries"" where ""queries[i] = [favoriteTypei, favoriteDayi, dailyCapi]"".

You play the game according to the following rules:
You start eating candy on day 0.

You cannot eat any candy of type `i` unless you have eaten all candies of type `i - 1`.

You must eat at least one candy per day until you have eaten all the candies.

Construct a Boolean array `answer` such that `answer.length == queries.length` and `answer[i]` is `true` If you can eat `favoriteTypei` type of candy on `favoriteDayi` without eating more than any The `dailyCapi` candy for the day, otherwise `false`. Note that you can eat different types of candy on the same day, provided you follow rule 2.

Returns the constructed array ""answer"".


Example 1:
Input: candiesCount = [7,4,5,3,8], query = [[0,2,2],[4,2,4],[2,13,1000000000]]
Output: [true, false, true]
explain:
1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, then you will eat one candy on day 2.

2- You can eat up to 4 candies per day.

   If you eat 4 candies per day, then you will eat 4 candies on day 0 (type 0) and 4 candies on day 1 (type 0 and type 1).

   Only 4 candies (type 1 and 2) can be eaten on day 2, so no 4 candies on day 2.

3- If you eat 1 candy per day, you will eat a type 2 candy on day 13.


Example 2:
Input: candiesCount = [5,2,6,4,1], query = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1, 3,1]]
Output: [false, true, true, false, false]

constraint:
`1 <= candiesCount. length <= 105`
`1 <= candiesCount[i] <= 105`
`1 <= queries.length <= 105`
`query[i].length == 3`
`0 <= favoriteTypei < candiesCount.length`
`0 <= favoriteDay <= 109`
`1 <= dailyCapi <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, returns true if the string s can be split into three non-empty palindromic substrings. Otherwise return `false`.
A string is said to be a palindrome if it is the same string when reversed.


Example 1:
Input: s = ""abcbdd""
output: true
Explanation: ""abcbdd"" = ""a"" + ""bcb"" + ""dd"", the three substrings are palindrome.


Example 2:
Input: s = ""bcbddxy""
output: error
Explanation: s cannot be divided into 3 palindromes.


constraint:
`3 <= s.length <= 2000`
`s` consists of lowercase English letters only.",0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. You have to perform an operation where you replace an element `nums[i]` with `nums[i] * nums[i]`.
Return the largest possible sum of subarrays in one operation. Subarray must be non-empty.


Example 1:
Input: nums = [2,-1,-4,-3]
Output: 17
Explanation: You can operate on index 2 (starting from 0) such that nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.


Example 2:
Input: nums = [1,-1,1,1,-1,-1,1]
Output: 4
Explanation: You can perform operations on index 1 (starting from 0) such that nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.


constraint:
`1 <= nums.length <= 105`
`-104 <= nums[i] <= 104`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an integer array `nums`. A unique element of an array is an element that occurs only once in the array.

Returns the sum of all unique elements of `nums`.


Example 1:
Input: nums = [1,2,3,2]
Output: 4
Explanation: The only element is [1,3], and the sum is 4.


Example 2:
Input: nums = [1,1,1,1,1]
output: 0
Explanation: There are no unique elements and the sum is 0.


Example 3:
Input: nums = [1,2,3,4,5]
Output: 15
Explanation: The only elements are [1,2,3,4,5], and the sum is 15.


constraint:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string ""s"" consisting only of the characters ""a"", ""b"" and ""c"". You need to apply the following algorithm to the string multiple times:
Select a non-empty prefix from the string s where all characters in the prefix are equal.

Select a non-empty suffix from the string s where all characters in the suffix are equal.

Prefix and suffix should not intersect at any index.

The characters in the prefix and suffix must be the same.

Remove prefixes and suffixes.

Returns the minimum length of s after performing the above operations any number of times (possibly zero).


Example 1:
Input: s = ""ca""
Output: 2
Explanation: You cannot delete any characters, so the string remains as it is.


Example 2:
Input: s = ""cabaabac""
output: 0
Explanation: The optimal order of operations is:
- Take prefix = ""c"" and suffix = ""c"" and remove them, s = ""abaaba"".

- Take prefix = ""a"" and suffix = ""a"" and delete them, s = ""baab"".

- Take prefix = ""b"" and suffix = ""b"" and delete them, s = ""aa"".

- Take prefix = ""a"" and suffix = ""a"" and remove them, s = """".


Example 3:
Input: s = ""aabccabba""
Output: 3
Explanation: The optimal order of operations is:
- Take prefix = ""aa"" and suffix = ""a"" and delete them, s = ""bccabb"".

- Take prefix = ""b"" and suffix = ""bb"" and remove them, s = ""cca"".


constraint:
`1 <= s.length <= 105`
`s` consists only of the characters `'a'`, `'b'`, and `'c'.",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get an array of ""events"" where ""events[i] = [startDayi, endDayi, valuei]"". The ith event starts from startDayi and ends at endDayi. If you participate in this event, you will get a value of valuei. You'll also be given an integer ""k"" representing the maximum number of events you can participate in.

You can only participate in one activity at a time. If you choose to participate in an event, you must attend the entire event. Note that end dates are inclusive: that is, you cannot attend events where one starts and the other ends on the same day.

Returns the maximum value sum you can get by participating in an event.


Example 1:
Input: events = [[1,2,4],[3,4,3],[2,3,1]], k = 2
Output: 7
Explanation: Selecting green events 0 and 1 (0 indexed), the total value is 4 + 3 = 7.


Example 2:
Input: events = [[1,2,4],[3,4,3],[2,3,10]], k = 2
Output: 10
Explanation: Select event 2 with a total value of 10.

Note that you can't join any other events because they overlap, and you don't have to be in k events.


Example 3:
Input: Events = [[1,1,1],[2,2,2],[3,3,3],[4,4,4]], k = 3
Output: 9
Note: Although the events do not overlap, you can only participate in 3 events. Choose the three with the highest value.


constraint:
`1 <= k <= events.length`
`1 <= k * events.length <= 106`
`1 <= startDayi <= endDayi <= 109`
`1 <= valuei <= 106`",0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"", return ""true"" if the array is initially sorted in non-decreasing order and then rotated by some position (including zero). Otherwise, return ""false"".

There may be duplicates in the original array.

Note: Array `A` rotated by `x` positions will get an array `B` with the same length so that `A[i] == B[(i+x) % A.length]`, where `%` is modulo operation.


Example 1:
Input: nums = [3,4,5,1,2]
output: true
Explanation: [1,2,3,4,5] is the original sorted array.

You can rotate the array by x = 3 positions to start with the element with value 3: [3,4,5,1,2].


Example 2:
Input: nums = [2,1,3,4]
output: error
Explanation: There is no sorted array that can generate nums after rotation.


Example 3:
Input: nums = [1,2,3]
output: true
Explanation: [1,2,3] is the original sorted array.

You can rotate the array by x = 0 positions (i.e. no rotation) to generate nums.


Example 4:
Input: nums = [1,1,1]
output: true
Explanation: [1,1,1] is the original sorted array.

You can rotate any number of positions to make numbers.


Example 5:
Input: nums = [2,1]
output: true
Explanation: [1,2] is the original sorted array.

You can rotate the array by x = 5 positions to start with the element with value 2: [2,1].


constraint:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are playing a card game with three piles of sizes `a`, `b`, and `c`. Each round you choose two different non-empty piles, take a stone from each pile, and add ""1"" to your score. The game stops when there are less than two non-empty piles (meaning no more moves are available).

Given three integers `a`, `b`, and `c`, return the maximum score you can get.


Example 1:
Input: a = 2, b = 4, c = 6
Output: 6
Explanation: The starting state is (2, 4, 6). An optimal set of actions is:
- fetched from piles 1 and 3, state is now (1, 4, 5)
- fetched from piles 1 and 3, state is now (0, 4, 4)
- fetched from piles 2 and 3, state is now (0, 3, 3)
- fetched from piles 2 and 3, state is now (0, 2, 2)
- fetched from piles 2 and 3, state is now (0, 1, 1)
- fetched from piles 2 and 3, state is now (0, 0, 0)
There are fewer than two non-empty heaps, so the game ends. Total score: 6 points.


Example 2:
Input: a = 4, b = 4, c = 6
Output: 7
Explanation: The starting state is (4, 4, 6). An optimal set of actions is:
- Taken from pile 1 and pile 2, state is now (3, 3, 6)
- fetched from piles 1 and 3, state is now (2, 3, 5)
- fetched from piles 1 and 3, state is now (1, 3, 4)
- fetched from piles 1 and 3, state is now (0, 3, 3)
- fetched from piles 2 and 3, state is now (0, 2, 2)
- fetched from piles 2 and 3, state is now (0, 1, 1)
- fetched from piles 2 and 3, state is now (0, 0, 0)
There are fewer than two non-empty heaps, so the game ends. Total score: 7 points.


Example 3:
Input: a = 1, b = 8, c = 8
Output: 8
Explanation: An optimal set of moves is to take 8 turns from piles 2 and 3 until they are empty.

After that, if there are less than two non-empty piles, the game ends.


constraint:
`1 <= a, b, c <= 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""word1"" and ""word2"". You want to construct a string `merge` as follows: When `word1` or `word2` is non-empty, choose one of the following options:
If word1 is not empty, append the first character in word1 to merge and remove it from word1.


For example, if `word1 = ""abc""` and `merge = ""dv""`, then after selecting this operation, `word1 = ""bc""` and `merge = ""dva""`.

If word2 is not empty, appends the first character in word2 to merge and removes it from word2.


For example, if `word2 = ""abc""` and `merge = """"`, then after selecting this operation, `word2 = ""bc""` and `merge = ""a""`.

Return the lexicographically largest ""merge"" you can construct.

The string a is lexicographically greater than the string b (of the same length) if at the first position where a and b differ, a character of a is strictly greater than the corresponding character in b`. For example, `""abcd""` is lexicographically greater than `""abcc""` because the first position where they differ is the fourth character, and `d` is greater than `c`.


Example 1:
Input: word1 = ""cabaa"", word2 = ""bcaaa""
Output: ""cbcabaaaaa""
Explanation: One way to get a lexicographic maximal merge is:
- Taken from word1: merge = ""c"", word1 = ""abaa"", word2 = ""bcaaa""
- Taken from word2: merge = ""cb"", word1 = ""abaa"", word2 = ""caaa""
- Taken from word2: merge = ""cbc"", word1 = ""abaa"", word2 = ""aaa""
- Taken from word1: merge = ""cbca"", word1 = ""baa"", word2 = ""aaa""
- Taken from word1: merge = ""cbcab"", word1 = ""aa"", word2 = ""aaa""
- Append the remaining 5 a's from word1 and word2 at the end of the merge.


Example 2:
Input: word1 = ""abcabc"", word2 = ""abdcaba""
Output: ""abdcabcabcaba""

constraint:
`1 <= word1.length, word2.length <= 3000`
`word1` and `word2` contain only lowercase English letters.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0
"Given an integer array ""nums"" and an integer ""goal"".

You want to choose the subsequence of `nums` whose sum of elements is closest to `goal`. That is, if the sum of the subsequence elements is ""sum"", then you want to minimize the absolute difference ""abs(sum - goal)"".

Returns the smallest possible value of abs(sum - goal).

Note that a subsequence of an array is an array formed by removing some elements (possibly all or none) of the original array.


Example 1:
Input: nums = [5,-7,3,5], target = 6
output: 0
Explanation: Select the entire array as a subsequence whose sum is 6.

This is equal to the target, so the absolute difference is 0.


Example 2:
Input: nums = [7,-9,15,-2], goal = -5
Output: 1
Explanation: Select the subsequence [7,-9,-2] whose sum is -4.

The absolute difference is abs(-4 - (-5)) = abs(1) = 1, which is the minimum value.


Example 3:
Input: nums = [1,2,3], target = -7
Output: 7

constraint:
`1 <= nums.length <= 40`
`-107 <= nums[i] <= 107`
`-109 <= target <= 109`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1
"Design a queue-like data structure that moves the most recently used element to the end of the queue.

Implement the `MRUQueue` class:
`MRUQueue(int n)` constructs `MRUQueue` with `n` elements: `[1,2,3,...,n]`.

`fetch(int k)` moves the kth element (indexed from 1) to the end of the queue and returns it.


Example 1:
enter:
[""MRUQueue"", ""get"", ""get"", ""get"", ""get""]
[[8], [3], [5], [2], [8]]
output:
[empty, 3, 6, 2, 2]
explain:
MRUQueue mRUQueue = new MRUQueue(8); // Initialize the queue to [1,2,3,4,5,6,7,8].

mRUQueue.fetch(3); // Move the 3rd element (3) to the end of the queue to become [1,2,4,5,6,7,8,3] and return it.

mRUQueue.fetch(5); // Move the 5th element (6) to the end of the queue to become [1,2,4,5,7,8,3,6] and return it.

mRUQueue.fetch(2); // Move the second element (2) to the end of the queue, becoming [1,4,5,7,8,3,6,2] and return it.

mRUQueue.fetch(8); // The 8th element (2) is already at the end of the queue so just return it.


constraint:
`1 <= n <= 2000`
`1 <= k <= n`
At most `2000` calls to `fetch` will be made.

Follow up: It's a bit easier to find an `O(n)` algorithm for each `fetch`. Can you find a more complex algorithm for each `fetch` call?",1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0
"Given a string ""s"" consisting only of the characters ""0"" and ""1"". In one operation, you can change any ""0"" to a ""1"" and vice versa.

If no two adjacent characters are equal, the string is called an alternate string. For example, the string ""010"" is alternated, but the string ""0100"" is not.

Return the minimum number of operations required to alternate s.


Example 1:
Input: s = ""0100""
Output: 1
Explanation: If you change the last character to '1', then s will be '0101', which is alternate.


Example 2:
Input: s = ""10""
output: 0
Explanation: s has been alternated.


Example 3:
Input: s = ""1111""
Output: 2
Explanation: You need two operations to get to ""0101"" or ""1010"".


constraint:
`1 <= s.length <= 104`
`s[i]` is either `'0'` or `'1'`.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s, return the number of identical substrings of s. Since the answer might be too large, return it modulo 109 + 7.

A string is homogeneous if all its characters are the same.

A substring is a contiguous sequence of characters in a string.


Example 1:
Input: s = ""abbcccaa""
Output: 13
Explanation: The isomorphic substring is as follows:
""a"" occurs 3 times.

""aa"" occurs 1 time.

""b"" occurs 2 times.

""bb"" occurs 1 time.

""c"" occurs 3 times.

""cc"" occurs 2 times.

""ccc"" occurs 1 time.

3 + 1 + 2 + 1 + 3 + 2 + 1 = 13.


Example 2:
Input: s = ""xy""
Output: 2
Explanation: The homoproton strings are ""x"" and ""y"".


Example 3:
Input: s = ""zzzzz""
Output: 15

constraint:
`1 <= s.length <= 105`
`s` consists of lowercase letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array nums where the ith bag contains nums[i] balls. You also get an integer ""maxOperations"".

You can perform the following operations at most `maxOperations` times:
Take a bag of balls and divide it into two new bags, each with a positive number of balls.


For example, a bag of ""5"" balls can be turned into two new bags of ""1"" and ""4"" balls, or two new bags of ""2"" and ""3"" balls.

Your penalty is the maximum number of balls in the bag. You want to minimize your penalty after the action.

Returns the smallest possible penalty after performing an operation.


Example 1:
Input: nums = [9], maxOperations = 2
Output: 3
explain:
- Divide the bag with 9 balls into two bags of size 6 and 3. [9] -> [6,3].

- Divide the bag with 6 balls into two bags of size 3 and 3. [6,3] -> [3,3,3].

The bag with the most balls has 3 balls in it, so your penalty is 3 and you should pay back 3.


Example 2:
Input: nums = [2,4,8,2], maxOperations = 4
Output: 2
explain:
- Divide the bag with 8 balls into two bags of size 4 and 4. [2,4,8,2] -> [2,4,4,4,2].

- Divide the bag with 4 balls into two bags of size 2 and 2. [2,4,4,4,2] -> [2,2,2,4,4,2].

- Divide the bag with 4 balls into two bags of size 2 and 2. [2,2,2,4,4,2] -> [2,2,2,2,2,4,2].

- Divide the bag with 4 balls into two bags of size 2 and 2. [2,2,2,2,2,4,2] -> [2,2,2,2,2,2,2,2] .

The bag with the most balls has 2 balls in it, so your penalty is 2 and you should return 2.


Example 3:
Input: nums = [7,17], maxOperations = 2
Output: 7

constraint:
`1 <= nums.length <= 105`
`1 <= maxOperations, nums[i] <= 109`",0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an undirected graph. Given an integer `n` which is the number of nodes in the graph and an array `edges`, where each `edges[i] = [ui, vi]` is represented at `ui` and `vi`.

A connected trio is a set of three nodes where there is an edge between each pair of nodes.

The degree of a connecting triad is the number of edges with one endpoint in the triad and the other not in the triad.

Returns the minimum degree of a connected triad in the graph, or ""-1"" if there are no connected trios in the graph.


Example 1:
Input: n = 6, edges = [[1,2],[1,3],[3,2],[4,1],[5,2],[3,6]]
Output: 3
Explanation: There is only one triple, namely [1,2,3]. The edges forming its degree are shown in bold in the image above.


Example 2:
Input: n = 7, edges = [[1,3],[4,1],[4,3],[2,5],[5,6],[6,7],[7,5] ,[2,6]]
output: 0
Explanation: There are exactly three trios:
1) [1,4,3] degree is 0.

2) [2,5,6] has degree 2.

3) [5,6,7] has degree 2.


constraint:
`2 <= n <= 400`
`edge[i].length == 2`
`1 <= edges.length <= n * (n-1) / 2`
`1 <= ui, vi <= n`
`ui != vi`
There are no duplicate edges.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n buildings in a row. You will get an integer array heights of size n which represents the heights of the buildings in the row.

The ocean is to the right of the building. A building is an ocean view if it has an unobstructed view of the ocean. Formally, a building has an ocean view if all buildings to the right of the building are of smaller height.

Returns a list of indices (0 indexed) of buildings with ocean views, sorted in increasing order.


Example 1:
Input: Height = [4,2,3,1]
Output: [0,2,3]
Explanation: Building 1 (0 index) has no ocean view because Building 2 is taller.


Example 2:
Input: Height = [4,3,2,1]
Output: [0,1,2,3]
Description: All buildings have ocean views.


Example 3:
Input: Height = [1,3,2,4]
Output: [3]
Note: Only Building 3 has an ocean view.


Example 4:
Input: Height = [2,2,2,2]
Output: [3]
Explanation: If there is a building of the same height on the right, the building cannot see the ocean.


constraint:
`1 <= heights. length <= 105`
`1 <= height[i] <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A string s is fine if, for every letter of the alphabet contained in s, it appears in both uppercase and lowercase. For example, ""abABB"" is fine because ""A"" and ""a"" occur, as well as ""B"" and ""b"". However, `""abA""` is not due to the occurrence of `'b'`, but the absence of `'B'`.

Given a string s, return the longest nice substring in s. If there are more than one, return the earliest occurrence of the substring. If not, an empty string is returned.


Example 1:
Input: s = ""Yazaay""
Output: ""aAa""
Explanation: ""aAa"" is a good string because 'A/a' is the only letter in s and both 'A' and 'a' occur.

""aAa"" is the longest nice substring.


Example 2:
Input: s = ""Bb""
Output: ""Bb""
Explanation: ""Bb"" is a good string because both 'B' and 'b' occur. The entire string is a substring.


Example 3:
Input: s = ""c""
Output: """"
Explanation: There are no good substrings.


Example 4:
Input: s = ""dDzeE""
Output: ""dd""
Explanation: ""dD"" and ""eE"" are both the longest nice substrings.

Since there are multiple longest nice substrings, return ""dD"" because it occurs earlier.


constraint:
`1 <= s.length <= 100`
`s` consists of uppercase and lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional integer array ""groups"" of length ""n"". You also get an integer array ""nums"".

You will be asked if you can choose n disjoint subarrays from the array nums such that the ith subarray is equal to groups[i] (starting from 0), if i > 0, then the (i-1)th`th subarray Appears before the `ith` subarray in `nums` (ie the subarrays must be in the same order as `groups`).

Returns ""true"" if you can complete the task, otherwise returns ""false"".

Note that subarrays are disjoint if and only if there is no index 'k' such that 'nums[k]' belongs to more than one subarray. A subarray is a contiguous sequence of elements in an array.


Example 1:
Input: groups = [[1,-1,-1],[3,-2,0]], nums = [1,-1,0,1,-1,-1,3,-2,0]
output: true
Explanation: You can choose the 0th subarray as [1,-1,0,1,-1,-1,3,-2,0] and the 1st subarray as [1,-1,0,1,-1 , -1,3,-2,0].

These subarrays are disjoint because they have no nums[k] elements in common.


Example 2:
Input: groups = [[10,-2​​],[1,2,3,4]], nums = [1,2,3,4,10,-2​​]
output: error
Explanation: Note that it is incorrect to select the subarrays [1,2,3,4,10,-2​​] and [1,2,3,4,10,-2​​] because their order Different from the order in the group.

[10,-2​​] must come before [1,2,3,4].


Example 3:
Input: groups = [[1,2,3],[3,4]], nums = [7,7,1,2,3,4,7,7]
output: error
Explanation: Note that the selection subarrays [7,7,1,2,3,4,7,7] and [7,7,1,2,3,4,7,7] are invalid because they are disjoint.

They share a common element nums[4] (starting at 0).


constraint:
`groups. length == n`
`1 <= n <= 103`
`1 <= groups[i].length, sum(groups[i].length) <= 103`
`1 <= nums.length <= 103`
`-107 <= groups[i][j], nums[k] <= 107`",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get an integer matrix ""isWater"" of size ""m x n"" which represents a map of land and water cells.

If isWater[i][j] == 0, cell (i, j) is a land cell.

If ""isWater[i][j] == 1"", then cell ""(i, j)"" is a water cell.

You must assign each cell a height according to the following rules:
The height of each cell must be non-negative.

If the cell is a water cell, its height must be ""0"".

The absolute height difference between any two adjacent cells is at most ""1"". A cell is adjacent to another cell if it is due north, east, south, or west of another cell (i.e. their edges touch).

Find a height assignment that maximizes the largest height in the matrix.

Returns an integer matrix `height` of size `m x n`, where `height[i][j]` is the height of cell `(i, j)`. If there are multiple solutions, return any of them.


Example 1:
Input: isWater = [[0,1],[0,0]]
Output: [[1,0],[2,1]]
Explanation: The image shows the specified height of each cell.

Blue cells are water cells and green cells are land cells.


Example 2:
Input: isWater = [[0,0,1],[1,0,0],[0,0,0]]
Output: [[1,1,0],[0,1,1],[1,2,2]]
Explanation: A height of 2 is the maximum possible height for any assignment.

Any height assignment with a maximum height of 2 that still complies with the rules will also be accepted.


constraint:
`m == isWater. length`
`n == isWater[i].length`
`1 <= meters, n <= 1000`
`isWater[i][j]` is either `0` or `1`.

At least one water cell.",0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a tree (i.e. a connected undirected graph without cycles) consisting of ""n"" nodes numbered ""0"" to ""n - 1"" and having exactly ""n - 1"" edges. Each node has a value associated with it, and the root of the tree is node ""0"".

To represent this tree, you will be given an integer array ""nums"" and a 2D array ""edges"". Each nums[i] represents the value of the ith node, and each edges[j] = [uj, vj] represents an edge between nodes uj and vj in the tree.

Two values ​​x and y are coprime if gcd(x, y) == 1, where gcd(x, y) is the greatest common divisor of x and y.

The ancestors of node ""i"" are any other nodes on the shortest path from node ""i"" to the root. A node is not considered an ancestor of itself.

Return an array ans of size n, where ans[i] is the closest ancestor to node i such that nums[i] and nums[ans[i]] are coprime, or `-1` if there is no such ancestor.


Example 1:
Input: nums = [2,3,3,2], edges = [[0,1],[1,2],[1,3]]
Output: [-1,0,0,1]
Explanation: In the image above, the value of each node is in parentheses.

- Node 0 has no coprime ancestors.

- Node 1 has only one ancestor, node 0. Their values ​​are relatively prime (gcd(2,3) == 1).

- Node 2 has two ancestors, nodes 1 and 0. The value of node 1 is not coprime (gcd(3,3) == 3), but the value of node 0
  The value is (gcd(2,3) == 1), so node 0 is the closest valid ancestor.

- Node 3 has two ancestors, nodes 1 and 0. It is relatively prime to node 1 (gcd(3,2) == 1), so node 1 is its
  The nearest valid ancestor.


Example 2:
Input: nums = [5,6,10,2,3,6,15], edges = [[0,1],[0,2],[1,3],[1,4],[2, 5],[2,6]]
Output: [-1,0,-1,0,0,0,-1]

constraint:
`nums. length == n`
`1 <= nums[i] <= 50`
`1 <= n <= 105`
`edges. length == n - 1`
`edge[j].length == 2`
`0 <= uj, vj < n`
`uj != vj`",0,0,0,1,1,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""word1"" and ""word2"". Merge strings by adding letters in alternating order, starting with ""word1"". If one string is longer than the other, extra letters are appended to the end of the combined string.

Return the merged string.


Example 1:
Input: word1 = ""abc"", word2 = ""pqr""
Output: ""apbqcr""
Explanation: The merged strings will be merged as follows:
Word 1: a b c
word2: p q r
Merge: a p b q c r

Example 2:
Input: word1 = ""ab"", word2 = ""pqrs""
Output: ""apbqrs""
Explanation: Note that ""rs"" is appended to the end since word2 is longer.

Word 1: a b
Word 2: p q r s
Merge: a p b q r s

Example 3:
Input: word1 = ""abcd"", word2 = ""pq""
Output: ""apbqcd""
Explanation: Note that ""cd"" is appended to the end because word1 is longer.

Word 1: a b c d
Word 2: p q
Merge: a p b q c d

constraint:
`1 <= word1.length, word2.length <= 100`
`word1` and `word2` consist of lowercase English letters.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You have n boxes. Given a binary string boxes of length n, boxes[i] is 0 if the ith box is empty, and 1 if it contains a ball.

In one operation, you can move a ball from one box to the adjacent box. Box `i` is adjacent to box `j` if abs(i - j) == 1. Note that after doing this, there may be more than one ball in some boxes.

Returns an array `answer` of size `n`, where `answer[i]` is the minimum number of operations required to move all balls to the `ith` box.

Each answer[i] is computed based on the initial state of the box.


Example 1:
Input: boxes = ""110""
Output: [1,1,3]
Explanation: The answer to each box is as follows:
1) First box: You have to move a ball from the second box to the first box in one operation.

2) Second box: You have to move a ball from the first box to the second box in one operation.

3) The third box: You need two operations to move a ball from the first box to the third box, and one operation to move a ball from the second box to the third box.


Example 2:
Input: boxes = ""001011""
Output: [11,8,5,4,3,4]

constraint:
`n == boxes. length`
`1 <= n <= 2000`
`boxes[i]` is either `'0'` or `'1'`.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays ""nums"" and ""multipliers"" of size ""n"" and ""m"" respectively, where ""n >= m"". Arrays are indexed starting from 1.

You start with a score of ""0"". You want to do exactly what `m` does. In the ith operation (starting at 1), you will:
Select an integer ""x"" from the beginning or end of the array ""nums"".

Add `multipliers[i] * x` to your score.

Remove ""x"" from the array ""nums"".

Returns the maximum score after performing the ""m"" operation.


Example 1:
Input: nums = [1,2,3], multiplier = [3,2,1]
Output: 14
Explanation: An optimal solution is as follows:
- Pick [1,2,3] from the end, adding 3 * 3 = 9 to the score.

- Select [1,2] from the end, adding 2 * 2 = 4 to the score.

- Select [1] from the end to add 1 * 1 = 1 to the score.

The total score is 9 + 4 + 1 = 14.


Example 2:
Input: nums = [-5,-3,-3,-2,7,1], multiplier = [-10,-5,3,4,6]
Output: 102
Explanation: An optimal solution is as follows:
- Select [-5,-3,-3,-2,7,1] from scratch, adding -5 * -10 = 50 to the score.

- Select [-3,-3,-2,7,1] from scratch, adding -3 * -5 = 15 to the score.

- Select [-3,-2,7,1] from scratch, adding -3 * 3 = -9 to the score.

- Pick [-2,7,1] from the end, adding 1 * 4 = 4 to the score.

- Select [-2,7] from the end, adding 7 * 6 = 42 to the score.
The total score is 50 + 15 - 9 + 4 + 42 = 102.


constraint:
`n == nums. length`
`m == multipliers. length`
`1 <= m <= 103`
`m <= n <= 105`` `
`-1000 <= nums[i], multipliers[i] <= 1000`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings, `word1` and `word2`. You want to construct a string in the following way:
Select some non-empty subsequence ""subsequence1"" from ""word1"".

Select some non-empty subsequence ""subsequence2"" from ""word2"".

Connecting subsequences: `subsequence1 + subsequence2`, forming a string.

Returns the length of the longest palindrome that can be constructed in the described manner. Returns ""0"" if the palindrome cannot be constructed.

A subsequence of the string s is a string that can be generated by removing some (possibly none) characters from s without changing the order of the remaining characters.

A palindrome is a string that reads the same forward and backward.


Example 1:
Input: word1 = ""cacb"", word2 = ""cbba""
Output: 5
Explanation: Select ""ab"" from word1 and select ""cba"" from word2 to form ""abcba"", which is a palindrome.


Example 2:
Input: word1 = ""ab"", word2 = ""ab""
Output: 3
Explanation: Select ""ab"" from word1 and select ""a"" from word2 to form ""aba"", which is a palindrome.


Example 3:
Input: word1 = ""aa"", word2 = ""bb""
output: 0
Explanation: You cannot construct a palindrome from the described method, so return 0.


constraint:
`1 <= word1.length, word2.length <= 1000`
`word1` and `word2` consist of lowercase English letters.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get a string array `features`, where `features[i]` is a word representing the feature name of the latest product you're working on. You conduct a survey in which users report their favorite features. You'll get an array of strings ""responses"" where each ""responses[i]"" is a string containing space-separated words.

The popularity of a feature is the number of ""responses[i]"" that contain that feature. You want to sort the features by popularity in non-increasing order. If two features have the same popularity, they are sorted by their original index in 'features'. Note that a response may contain the same feature multiple times; this feature is only counted once in its popularity.

Return features in sorted order.


Example 1:
Input: features = [""cooler"",""lock"",""touch""], responses = [""i like cooler cooler"",""lock touch cool"",""locker like touch""]
Output: [""touch"",""cooler"",""lock""]
Explanation: appearances(""cooler"") = 1, appearances(""lock"") = 1, appearances(""touch"") = 2. Since both ""cooler"" and ""lock"" have 1 occurrence, ""cooler"" comes first because ""cooler"" "" comes first in the feature array.


Example 2:
Input: features = [""a"", ""aa"", ""b"", ""c""], responses = [""a"", ""a aa"", ""a a a a"", ""b a""]
Output: [""a"",""aa"",""b"",""c""]

constraint:
`1 <= features.length <= 104`
`1 <= features[i].length <= 10`
`features` contains no duplicates.

`features[i]` consists of lowercase letters.

`1 <= responses.length <= 102`
`1 <= response[i].length <= 103`
`responses[i]` consists of lowercase letters and spaces.

`responses[i]` does not contain two consecutive spaces.

`responses[i]` has no leading or trailing spaces.",0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array items, where each items[i] = [typei, colori, namei] describes the type, color and name of the ith item. You also get a rule represented by two strings, ""ruleKey"" and ""ruleValue"".

The ith item is said to match a rule if one of the following is true:
`ruleKey == ""type""` and `ruleValue == typei`.

`ruleKey == ""color""` and `ruleValue == colori`.

`ruleKey == ""name""` and `ruleValue == namei`.

Returns the number of items matching the given rule.


Example 1:
Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""lenovo""],[""phone"",""gold"",""iphone""]], ruleKey = ""color"", ruleValue = ""Silver""
Output: 1
Explanation: Only one item matches the given rule, namely [""computer"",""silver"",""lenovo""].


Example 2:
Input: items = [[""phone"",""blue"",""pixel""],[""computer"",""silver"",""phone""],[""phone"",""gold"",""iphone""]], ruleKey = ""Type"", ruleValue = ""Phone""
Output: 2
Explanation: There are only two items that match the given rule, they are [""phone"",""blue"",""pixel""] and [""phone"",""gold"",""iphone""]. Note that the items [""computer"",""silver"",""phone""] do not match.


constraint:
`1 <= items.length <= 104`
`1 <= typei.length, colori.length, namei.length, ruleValue.length <= 10`
`ruleKey` is equal to `""type""`, `""color""`, or `""name""`.

All strings consist of lowercase letters only.",1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You want to make desserts and are about to buy ingredients. You have `n` ice cream flavors and `m` toppings to choose from. The following rules must be observed when making desserts:
There must be only one ice cream base.

You can add one or more types of toppings or no toppings at all.

There are up to two of each topping.

You will be given three inputs:
`baseCosts`, an array of integers of length `n`, where each `baseCosts[i]` represents the price of an `ith` ice cream base.

`toppingCosts`, an array of integers of length `m`, where each `toppingCosts[i]` is the price of one of the `ith` toppings.

`target`, an integer representing your target price for dessert.

You want to make a dessert whose total cost is as close to the ""target"" as possible.

Return the closest cost of dessert to ""target"". If there are more than one, return the lower one.


Example 1:
Input: baseCosts = [1,7], toppingCosts = [3,4], target = 10
Output: 10
Explanation: Consider the following combination (all indices are 0):
- Choose base 1: cost 7
- Take 1 out of top 0: cost 1 x 3 = 3
- Take 0 from top 1: cost 0 x 4 = 0
Total: 7 + 3 + 0 = 10.


Example 2:
Input: baseCosts = [2,3], toppingCosts = [4,5,100], target = 18
Output: 17
Explanation: Consider the following combination (all indices are 0):
- Choose base 1: cost 3
- Take 1 from top 0: cost 1 x 4 = 4
- Take 2 from topping 1: cost 2 x 5 = 10
- Take 0 from top 2: cost 0 x 100 = 0
Total: 3 + 4 + 10 + 0 = 17. You cannot make a dessert with a total cost of 18.


Example 3:
Input: baseCosts = [3,10], toppingCosts = [2,5], target = 9
Output: 8
Explanation: Desserts can be made with a cost of 8 and 10. Returns 8 because it has a lower cost.


Example 4:
Input: baseCosts = [10], toppingCosts = [1], target = 1
Output: 10
Explanation: Note that you don't have to have any toppings, but you do have to have exactly one base.


constraint:
`n == baseCosts. length`
`m == toppingCosts. length`
`1 <= n, m <= 10`
`1 <= baseCosts[i], toppingCosts[i] <= 104`
`1 <= target <= 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integer arrays `nums1` and `nums2`, which may have different lengths. The values ​​in the array are between ""1"" and ""6"", inclusive.

In one operation, you can change any integer value in any array to any value between ""1"" and ""6"", inclusive.

Returns the minimum number of operations required to make the sum of the values ​​in `nums1` equal to the sum of the values ​​in `nums2`. Return `-1` if it is not possible to make the sum of the two arrays equal.


Example 1:
Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
Output: 3
Explanation: You can make the sum of nums1 and nums2 equal in 3 operations. All indices are 0-indexed.

- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].

- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].

- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].


Example 2:
Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
Output: -1
Explanation: There is no way to decrease the sum of nums1 or increase the sum of nums2 to make them equal.


Example 3:
Input: nums1 = [6,6], nums2 = [1]
Output: 3
Explanation: You can make the sum of nums1 and nums2 equal in 3 operations. All indices are 0-indexed.
- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].

- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].

- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].


constraint:
`1 <= nums1.length, nums2.length <= 105`
`1 <= nums1[i], nums2[i] <= 6`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n cars traveling in the same direction along a single lane at different speeds. Given an array cars of length n, where cars[i] = [positioni, speedi] means:
`positioni` is the distance in meters between the `ith` car and the start of the road. It is guaranteed that positioni < positioni+1 .

`speedi` is the initial speed of the ith car in meters per second.

For simplicity, think of the car as a point moving along the number axis. Two vehicles collided while occupying the same position. Once one car collides with another, they join forces to form a convoy. The cars in the formed convoy will have the same position and the same speed, which is the initial speed of the slowest car in the convoy.

Return an array `answer`, where `answer[i]` is the time (in seconds) when the ith car collided with the next car, or if this car did not collide with the next car, return `-1`. Answers within 10-5 of the actual answer are accepted.


Example 1:
Input: cars = [[1,2],[2,1],[4,3],[7,2]]
Output: [1.00000,-1.00000,3.00000,-1.00000]
Explanation: After exactly one second, the first car will collide with the second car and form a caravan with a speed of 1 m/s. After exactly 3 seconds, the third car will collide with the fourth car and form a caravan with a speed of 2 m/s.


Example 2:
Input: cars = [[3,4],[5,4],[6,3],[9,1]]
Output: [2.00000, 1.00000, 1.50000, -1.00000]

constraint:
`1 <= cars.length <= 105`
`1 <= positioni, speedi <= 106`
`positioni < positioni+1`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is an interaction problem.

There is a robot in a hidden grid and you are trying to move it from a start cell to a target cell in that grid. The size of the grid is ""m x n"", and each cell in the grid is either empty or block. Ensure that the starting cell and the target cell are different and will not be blocked.

You want to find the minimum distance to the target cell. However, you don't know the dimensions of the grid, the starting cell or the destination cell. You can only ask queries to the `GridMaster` object.

The `GridMaster` class has the following functions:
`boolean canMove(char direction)` returns `true` if the robot can move in that direction. Otherwise, it returns ""false"".

`void move(char direction)` moves the robot in that direction. If this move would move the robot into a blocked cell or off the grid, the move will be ignored and the robot will remain in the same position.

`boolean isTarget()` returns `true` if the robot is currently on the target cell. Otherwise, it returns ""false"".

Note that `direction` in the above function should be a character in `{'U','D','L','R'}`, representing up, down, left, and right directions respectively.

Returns the minimum distance between the robot's initial start cell and the goal cell. Returns ""-1"" if there is no valid path between cells.

Custom tests:
The test input is read as a two-dimensional matrix ""grid"" of size ""m x n"", where:
`grid[i][j] == -1` means the robot is in cell `(i, j)` (the starting cell).

`grid[i][j] == 0` means cell `(i, j)` is blocked.

`grid[i][j] == 1` means cell `(i, j)` is empty.

`grid[i][j] == 2` means cell `(i, j)` is the target cell.

There is only one `-1` and `2` in `grid`. Remember, this information will not be included in your code.


Example 1:
Input: Grid = [[1,2],[-1,0]]
Output: 2
Explanation: One possible interaction is described as follows:
The robot initially stands on cell (1, 0), denoted by -1.

- master.canMove('U') returns true.

- master.canMove('D') returns false.

- master.canMove('L') returns false.

- master.canMove('R') returns false.

- master.move('U') moves the robot to cell (0, 0).

- master.isTarget() returns false.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns false.

- master.canMove('R') returns true.

- master.move('R') moves the robot to cell (0, 1).

- master.isTarget() returns true.
We now know that the target is cell (0, 1) and the shortest path to the target cell is 2.


Example 2:
Input: grid = [[0,0,-1],[1,1,1],[2,0,0]]
Output: 4
Explanation: The minimum distance between the robot and the target cell is 4.


Example 3:
Input: Grid = [[-1,0],[0,2]]
Output: -1
Explanation: There is no path from the robot to the target cell.


constraint:
`1 <= n, m <= 500`
`m == grid. length`
`n == grid[i].length`
`grid[i][j]` is `-1`, `0`, `1` or `2`.

There is exactly one `-1` in `grid`.

There is exactly one `2` in `grid`.",0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""x"" and ""y"", which represent your current position in a Cartesian grid: ""(x, y)"". You also get an array ""points"" where each ""points[i] = [ai, bi]"" represents a point that exists at ""(ai, bi)"". A point is valid if it shares the same x-coordinate or the same y-coordinate as your location.

Returns the index (0 indexed) of a valid point with the smallest Manhattan distance from your current location. If there are more than one, return the valid point with the smallest index. Returns ""-1"" if there are no valid points.

The Manhattan distance between two points ""(x1, y1)"" and ""(x2, y2)"" is ""abs(x1 - x2) + abs(y1 - y2)"".


Example 1:
Input: x = 3, y = 4, points = [[1,2],[3,1],[2,4],[2,3],[4,4]]
Output: 2
Explanation: Of all the points, only [3,1], [2,4] and [4,4] are valid. Of the valid points, [2,4] and [4,4] have the smallest Manhattan distance of 1 from your current location. [2,4] has the smallest index, so 2 is returned.


Example 2:
Input: x = 3, y = 4, points = [[3,4]]
output: 0
Instructions: Allow answers to be the same as your current location.


Example 3:
Input: x = 3, y = 4, points = [[2,3]]
Output: -1
Explanation: There are no valid points.


constraint:
`1 <= points.length <= 104`
`points[i].length == 2`
`1 <= x, y, ai, bi <= 104`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer ""n"", return ""true"" if ""n"" can be expressed as a sum of three different powers. Otherwise, return ""false"".

An integer y is a power of 3 if there exists an integer x such that y == 3x.


Example 1:
Input: n = 12
output: true
Explanation: 12 = 31 + 32

Example 2:
Input: n = 91
output: true
Explanation: 91 = 30 + 32 + 34

Example 3:
Input: n = 21
output: error

constraint:
`1 <= n <= 107`",0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"The beauty of strings is the difference in frequency between the most and least frequently occurring characters.

For example, the beauty of `""abaacc""` is `3 - 1 = 2`.

Given a string s, return the sum of the beauty of all its substrings.


Example 1:
Input: s = ""aabcb""
Output: 5
Explanation: The substrings with a non-zero aesthetic are [""aab"",""aabc"",""aabcb"",""abcb"",""bcb""], each with an aesthetic equal to 1.


Example 2:
Input: s = ""aabcbaa""
Output: 17

constraint:
`1 <= s.length <= 500`
`s` contains only lowercase English letters.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an undirected graph, denoted by an integer ""n"", ""n"" is the number of nodes, ""edges"" means ""edges[i] = [ui, vi]"", indicating that there are undirected edges between ""ui""` and `vi`. You also get an integer array ""queries"".

The answer to the ""jth"" query is the number of pairs of nodes ""(a, b)"" that satisfy the following conditions:
`a < b`
`cnt` is strictly greater than `queries[j]`, where `cnt` is the number of edges incident to `a` or `b`.

Returns an array answers such that answers.length == queries.length and answers[j] is the answer to the jth query.

Note that there can be duplicate edges.


Example 1:
Input: n = 4, edges = [[1,2],[2,4],[1,3],[2,3],[2,1]], query = [2,3]
Output: [6,5]
Explanation: The number of edges incident to at least one of each pair is given above.


Example 2:
Input: n = 5, edges = [[1,5],[1,5],[3,4],[2,5],[1,3],[5,1],[2,3] ,[2,5]], query = [1,2,3,4,5]
Output: [10,10,9,8,6]

constraint:
`2 <= n <= 2 * 104`
`1 <= edges.length <= 105`
`1 <= ui, vi <= n`
`ui != vi`
`1 <= queries.length <= 20`
`0 <= queries[j] < edges.length`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a binary string `s` without leading zeros, return `true` if `s` contains at most one consecutive 1 segment. Otherwise, return ""false"".


Example 1:
Input: s = ""1001""
output: error
Explanation: These do not constitute contiguous segments.


Example 2:
Input: s = ""110""
output: true

constraint:
`1 <= s.length <= 100`
`s[i]` is either ""0"" or ""1"".

`s[0]` is `'1'`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" and two integers ""limit"" and ""goal"". The array `nums` has an interesting property `abs(nums[i]) <= limit`.

Returns the minimum number of elements that need to be added to make the sum of the array equal to ""target"". The array must maintain its abs(nums[i]) <= limit property.

Note that `abs(x)` is equal to `x` if `x >= 0`, and `-x` otherwise.


Example 1:
Input: nums = [1,-1,1], limit = 3, goal = -4
Output: 2
Explanation: -2 and -3 can be added, the sum of the array will be 1 - 1 + 1 - 2 - 3 = -4.


Example 2:
Input: nums = [1,-10,9,1], limit = 100, target = 0
Output: 1

constraint:
`1 <= nums.length <= 105`
`1 <= limit <= 106`
`-limit <= nums[i] <= limit`
`-109 <= target <= 109`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There exists an undirected weighted connected graph. Given a positive integer ""n"", indicating that there are ""n"" nodes in the graph, labeled ""1"" to ""n"", and an array ""edges"", where each ""edges[i] = [ui, vi, weighti]”` means that there is an edge between nodes ui and vi, whose weight is equal to weighti.

A path from node ""start"" to node ""end"" is a sequence of nodes ""[z0, z1, z2, ..., zk]"" such that ""z0 = start"" and ""zk = end"" and has an edge at "" zi"" and ""zi+1"", where ""0 <= i <= k-1"".

The distance of a path is the sum of the weights on the edges of the path. Let distanceToLastNode(x) denote the shortest distance of the path between node n and node x. A restricted path is a path that also satisfies ""distanceToLastNode(zi) > distanceToLastNode(zi+1)"", where ""0 <= i <= k-1"".

Returns the number of restricted paths from node ""1"" to node ""n"". Since the number might be too large, return it modulo 109 + 7 .


Example 1:
Input: n = 5, edges = [[1,2,3],[1,3,3],[2,3,1],[1,4,2],[5,2,2],[ 3,5,1],[5,4,10]]
Output: 3
Explanation: Each circle contains the node number in black and the `distanceToLastNode value in blue. `The three restricted paths are:
1) 1 --> 2 --> 5
2) 1 --> 2 --> 3 --> 5
3) 1 --> 3 --> 5

Example 2:
Input: n = 7, edges = [[1,3,1],[4,1,2],[7,3,4],[2,5,3],[5,6,1],[ 6,7,2],[7,5,3],[2,6,4]]
Output: 1
Explanation: Each circle contains the node number in black and the `distanceToLastNode value in blue. `The only restricted path is 1 --> 3 --> 7.


constraint:
`1 <= n <= 2 * 104`
`n - 1 <= edges.length <= 4 * 104`
`edge[i].length == 3`
`1 <= ui, vi <= n`
`ui != vi`
`1 <= weight <= 105`
There is at most one edge between any two nodes.

There is at least one path between any two nodes.",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You are given an array `nums` and an integer `k`. XOR of the segment `[left, right]`, where `left <= right` is the `XOR` of all elements with indices between `left` and `right`, including: `nums[left] XOR nums[left + 1] XOR ... XOR nums[right]`.

Returns the minimum number of elements in the array to be changed such that the `XOR` of all segments of size `k` equals zero.


Example 1:
Input: nums = [1,2,0,3,0], k = 1
Output: 3
Explanation: Modify the array from [1,2,0,3,0] to [0,0,0,0,0].


Example 2:
Input: nums = [3,4,5,2,1,7,3,4,7], k = 3
Output: 3
Explanation: Modify the array from [3,4,5,2,1,7,3,4,7] to [3,4,7,3,4,7,3,4,7].


Example 3:
Input: nums = [1,2,4,1,2,5,1,2,6], k = 3
Output: 3
Explanation: Modify the array from [1,2,4,1,2,5,1,2,6] to [1,2,3,1,2,3,1,2,3].


constraint:
`1 <= k <= nums.length <= 2000`
` 0 <= nums[i] < 210`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a garden with n flowers, each of which has an integer beauty value. Flowers lined up. Given an integer array flowers of size n, each flowers[i] represents the beauty of the ith flower.

Gardens are valid if they meet the following criteria:
There are at least two flowers in the garden.

The first and last flower of a garden have the same beauty value.

As the designated gardener, you can remove any (or none) flowers from your garden. You want to remove the flowers in a way that makes the rest of the garden work. The beauty of the garden is the sum of the beauty of all remaining flowers.

Returns the maximum possible beauty of a valid garden after removing any (possibly none) flowers.


Example 1:
Input: flower = [1,2,3,1,2]
Output: 8
Explanation: You can generate valid gardens [2,3,1,2] such that their total beauty is 2 + 3 + 1 + 2 = 8.


Example 2:
Input: flower = [100,1,1,-3,1]
Output: 3
Explanation: You can generate valid gardens [1,1,1] such that their total beauty is 1 + 1 + 1 = 3.


Example 3:
Input: flower = [-1,-2,0,-1]
Output: -2
Explanation: You can generate valid gardens [-1,-1] such that their total beauty is -1 + -1 = -2.


constraint:
`2 <= flowers.length <= 105`
`-104 <= flower[i] <= 104`
An effective garden can be created by removing some (possibly none) of the flowers.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""s1"" and ""s2"" of equal length. A string swap is an operation where you select two indices (not necessarily different) in a string and swap the characters at those indices.

Returns ""true"" if two strings can be made equal by performing at most one string swap on one of the strings. Otherwise, return ""false"".


Example 1:
Input: s1 = ""bank"", s2 = ""kanb""
output: true
Explanation: For example, swap the first and last characters of s2 to get ""bank"".


Example 2:
Input: s1 = ""attack"", s2 = ""defend""
output: error
Explanation: It is not possible to make them equal with a single string swap.


Example 3:
Input: s1 = ""kelb"", s2 = ""kelb""
output: true
Explanation: The two strings are already equal, so there is no need for a string swap operation.


Example 4:
Input: s1 = ""abcd"", s2 = ""dcba""
output: error

constraint:
`1 <= s1.length, s2.length <= 100`
`s1.length == s2.length`
`s1` and `s2` consist of lowercase English letters only.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an undirected star graph consisting of ""n"" nodes labeled ""1"" to ""n"". A star graph is a graph that has a central node and exactly ""n - 1"" edges connecting the central node to all other nodes.

Given a two-dimensional integer array ""edges"", where each ""edges[i] = [ui, vi]"" represents an edge between nodes ""ui"" and ""vi"". Returns the center of the given star map.


Example 1:
Input: edges = [[1,2],[2,3],[4,2]]
Output: 2
Explanation: As shown in the diagram above, node 2 is connected to all other nodes, so 2 is the center.


Example 2:
Input: edges = [[1,2],[5,1],[1,3],[1,4]]
Output: 1

constraint:
`3 <= n <= 105`
`edges. length == n - 1`
`edge[i].length == 2`
`1 <= ui, vi <= n`
`ui != vi`
A given ""edge"" represents a valid star map.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a school that has classes of students and each class will have a final exam. Given a two-dimensional array of integers ""classes"", where ""classes[i] = [passi, totali]"". You know in advance that in the ith class, there are total `totali` students, but only `passi` students will pass the exam.

You also get an integer ""extraStudents"". There is another `extraStudents` of outstanding students who are guaranteed to pass the exams of any class they are assigned to. You want to assign each `extraStudents` student to a class in a way that maximizes the average pass rate across all classes.

The pass rate for a class is equal to the number of students in the class who passed the exam divided by the total number of students in the class. The average pass rate is the sum of the pass rates for all classes divided by the number of classes.

Returns the maximum possible average pass rate after assigning extraStudents students. Answers within 10-5 of the actual answer will be accepted.


Example 1:
Input: classes = [[1,2],[3,5],[2,2]], `extraStudents` = 2
Output: 0.78333
Instructions: You can assign these two additional students to the first class. The average pass rate will be equal to (3/4 + 3/5 + 2/2) / 3 = 0.78333.


Example 2:
Input: classes = [[2,4],[3,9],[4,5],[2,10]], `extraStudents` = 4
Output: 0.53485

constraint:
`1 <= classes.length <= 105`
`class[i].length == 2`
`1 <= passi <= totalli <= 105`
`1 <= extraStudents <= 105`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array ""nums"" (starting at 0) and an integer ""k"".

The score of the subarray ""(i, j)"" is defined as ""min(nums[i], nums[i+1], ..., nums[j]) * (j - i + 1)"". A good subarray is one where `i <= k <= j`.

Return the largest possible score for a good subarray.


Example 1:
Input: nums = [1,4,3,7,4,5], k = 3
Output: 15
Explanation: The optimal subarray is (1, 5), and the score is min(4,3,7,4,5) * (5-1+1) = 3 * 5 = 15.

Example 2:
Input: nums = [5,5,4,5,4,1,1,1], k = 0
Output: 20
Explanation: The optimal subarray is (0, 4), and the score is min(5,5,4,5,4) * (4-0+1) = 4 * 5 = 20.


constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 2 * 104`
`0 <= k < nums.length`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two strings ""firstString"" and ""secondString"", which are indexed from 0 and consist of lowercase English letters only. Count the number of index quadruples `(i,j,a,b)` that satisfy the following conditions:
`0 <= i <= j < firstString.length`
`0 <= a <= b < secondString.length`
The substring in `firstString` starting at the ith character and ending at the jth character (inclusive) is equal to the substring in `secondString` starting at the ath character and ending at the `bth` character (inclusive).

`j - a` is the smallest possible value among all four-tuples satisfying the preceding conditions.

Return the number of such quadruples.


Example 1:
Input: firstString = ""abcd"", secondString = ""bccda""
Output: 1
Explanation: The quadruple (0,0,4,4) is the only one that satisfies all conditions and minimizes j - a.


Example 2:
Input: firstString = ""ab"", secondString = ""cd""
output: 0
Explanation: There is no quadruple that satisfies all conditions.


constraint:
`1 <= firstString.length, secondString.length <= 2 * 105`
Both strings contain only lowercase English letters.",0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an alphanumeric string s, return the second largest number that occurs in s, or -1 if it does not exist.

Alphanumeric strings are strings of lowercase English letters and numbers.


Example 1:
Input: s = ""dfa12321afd""
Output: 2
Explanation: The numbers appearing in s are [1, 2, 3]. The second largest number is 2.


Example 2:
Input: s = ""abc1111""
Output: -1
Explanation: The number appearing in s is [1]. There is no second largest number.

constraint:
`1 <= s.length <= 500`
`s` contains only lowercase English letters and/or numbers.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is an authentication system that uses authentication tokens. For each session, the user will receive a new auth token which will expire `timeToLive` seconds after `currentTime`. If the token is renewed, the expiration time will be extended to `timeToLive` seconds after the (possibly different) `currentTime`.

Implement the ""AuthenticationManager"" class:
`AuthenticationManager(int timeToLive)` constructs `AuthenticationManager` and sets `timeToLive`.

`generate(string tokenId, int currentTime)` generates a new token with the given `tokenId` at the given `currentTime` in seconds.

`renew(string tokenId, int currentTime)` renews the non-expired token with the given `tokenId` at the given currentTime in seconds. If there is no unexpired token for the given `tokenId`, the request will be ignored and nothing will happen.

`countUnexpiredTokens(int currentTime)` returns the number of unexpired tokens given currentTime.

Note that if a token expires at time `t`, and another operation occurs at time `t` (`renew` or `countUnexpiredTokens`), the expiration occurs before the other operation.


Example 1:
enter
[""AuthenticationManager"", ""`renew`"", ""generate"", ""`countUnexpiredTokens`"", ""generate"", ""`renew`"", ""`renew`"", ""`countUnexpiredTokens`""]
[[5], [""aaa"", 1], [""aaa"", 2], [6], [""bbb"", 7], [""aaa"", 8], [""bbb"", 10], [ 15]]
output
[empty, empty, empty, 1, empty, empty, empty, 0]
explain
AuthenticationManager authenticationManager = new AuthenticationManager(5); // Construct AuthenticationManager with `timeToLive` = 5 seconds.

authenticationManager.`renew`(""aaa"", 1); // There is no token with tokenId ""aaa"" at time 1, so nothing happens.

authenticationManager.generate(""aaa"", 2); // Generate a new token with tokenId ""aaa"" at time 2.

authenticationManager.`countUnexpiredTokens`(6); // The token whose tokenId is ""aaa"" is the only one that has not expired at the 6th moment, so it returns 1.

authenticationManager.generate(""bbb"", 7); // Generate a new token with tokenId ""bbb"" at time 7.

authenticationManager.`renew`(""aaa"", 8); // The token whose tokenId is ""aaa"" expires at time 7, and 8 >= 7, so the `renew` request is ignored at time 8, and nothing happens.

authenticationManager.`renew`(""bbb"", 10); // The token with tokenId ""bbb"" did not expire at time 10, so the `renew` request is complete and the token will now expire at time 15.

authenticationManager.`countUnexpiredTokens`(15); // The token whose tokenId is ""bbb"" expires at the 15th moment, and the token whose tokenId is ""aaa"" expires at the 7th moment, so there is currently no unexpired token, so return 0.


constraint:
`1 <= time to live <= 108`
`1 <= current time <= 108`
`1 <= tokenId.length <= 5`
`tokenId` consists of lowercase letters only.

All calls to `generate` will include a unique value for `tokenId`.

The value of currentTime will be strictly incremented in all function calls.

Up to 2000 calls will be made to all combined functions.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an integer array `coins` of length `n` representing the `n` coins you own. The value of the ith coin is coins[i]. If you can choose some of your `n` coins such that their sum of value is `x`, you create some value `x`.

Returns the maximum number of consecutive integer values ​​you can generate with coins starting at and including ""0"".

Note that you may own multiple coins of the same value.


Example 1:
Input: coins = [1,3]
Output: 2
Description: You can set the following values:
- 0: take []
- 1: Take [1]
You can make 2 consecutive integer values ​​starting from 0.


Example 2:
Input: coins = [1,1,1,4]
Output: 8
Description: You can set the following values:
- 0: take []
- 1: Take [1]
- 2: take [1,1]
- 3: take [1,1,1]
- 4: Take [4]
- 5: take [4,1]
- 6: Take [4,1,1]
- 7: Take [4,1,1,1]
You can create 8 consecutive integer values ​​starting from 0.


Example 3:
Input: nums = [1,4,10,3,1]
Output: 20

constraint:
`coins.length == n`
`1 <= n <= 4 * 104`
`1 <= coins[i] <= 4 * 104`",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given `nums`, which is an array of positive integers of size `2 * n`. You must perform ""n"" operations on this array.

In the ith operation (starting at 1), you will:
Selects two elements, `x` and `y`.

Obtain the score of `i * gcd(x, y)`.

Remove `x` and `y` from `nums`.

Returns the highest score that can be obtained after performing 'n' operations.

The function `gcd(x, y)` is the greatest common divisor of `x` and `y`.


Example 1:
Input: nums = [1,2]
Output: 1
Explanation: The optimal choice of operation is:
(1 * gcd(1, 2)) = 1

Example 2:
Input: nums = [3,4,6,8]
Output: 11
Explanation: The optimal choice of operation is:
(1 * gcd(3, 6)) + (2 * gcd(4, 8)) = 3 + 8 = 11

Example 3:
Input: nums = [1,2,3,4,5,6]
Output: 14
Explanation: The optimal choice of operation is:
(1 * gcd(1, 5)) + (2 * gcd(2, 4)) + (3 * gcd(3, 6)) = 1 + 4 + 9 = 14

constraint:
`1 <= n <= 7`
`nums.length == 2 * n`
`1 <= nums[i] <= 106`",0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array `nums` of positive integers, return the largest possible sum of the ascending subarrays in `nums`.

A subarray is defined as a contiguous sequence of numbers in the array.

The subarray ""[numsl, numsl+1, ..., numsr-1, numsr]"" is ascending if for all ""i"" where ""l <= i < r"", ""numsi < numsi+1"". Note that subarrays of size ""1"" are in ascending order.


Example 1:
Input: nums = [10,20,30,5,10,50]
Output: 65
Explanation: [5,10,50] is an ascending subarray with a maximum sum of 65.


Example 2:
Input: nums = [10,20,30,40,50]
Output: 150
Explanation: [10,20,30,40,50] is an ascending subarray whose maximum sum is 150.


Example 3:
Input: nums = [12,17,15,13,10,11,12]
Output: 33
Explanation: [10,11,12] is an ascending subarray with a maximum sum of 33.


Example 4:
Input: nums = [100,10,1]
Output: 100

constraint:
`1 <= nums.length <= 100`
`1 <= nums[i] <= 100`",0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a two-dimensional array of integers ""orders"", each of which ""orders[i] = [pricei, amounti, orderTypei]"" indicates that an order ""amounti"" of type ""orderTypei"" has been placed at price ""pricei"". `orderTypei` is:
`0` for a batch of `buy` orders, or
`1` if it is a batch of `sell` orders.

Note that `orders[i]` represents a batch of `amounti` independent orders with the same price and order type. For all valid `i`, all orders represented by `orders[i]` will be placed before all orders represented by `orders[i+1]`.

There is a backlog of orders that has not yet been executed. The backlog is initially empty. When an order is placed, the following happens:
If the order is a ""buy"" order, look at the lowest priced ""sell"" order in the backlog. If the price of this ""sell"" order is less than or equal to the price of the current ""buy"" order, they will be matched and executed, and the ""sell"" order will be removed from the backlog. Otherwise, a ""buy"" order is added to the backlog.

Vice versa, if the order is a ""sell"" order, look at the highest priced ""buy"" order in the backlog. If the price of this ""buy"" order is greater than or equal to the price of the current ""sell"" order, they will be matched and executed, and the ""buy"" order will be removed from the order backlog. Otherwise, a ""sell"" order will be added to the backlog.

After all orders have been placed from the input, return the total number of orders in the backlog. Since this number can be large, it is returned modulo 109 + 7.


Example 1:
Input: Order = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
Output: 6
Explanation: Here's what happens with the order:
- 5 buy type orders with a price of 10 are placed. There are no sell orders, so 5 orders are added to the pending orders.

- 2 sell orders at a price of 15 are placed. There are no buy orders with a price greater than or equal to 15, so 2 orders are added to the pending orders.

- 1 sell order at price 25 is placed. There is no buy order with a price greater than or equal to 25 in the pending order, so add this order to the pending order.

- Placed 4 buy type orders with a price of 30. The first 2 orders are matched with the 2 sell orders with the lowest price, which is 15, and these 2 sell orders are removed from the backlog. The 3rd order matches the lowest priced sell order at 25, which is removed from the backlog. Then, there are no more sell orders in the backlog, so a 4th order is added to the backlog.

Finally, there are 5 buy orders at price 10 and 1 buy order at price 30 in the backlog. So the total number of orders in the backlog is 6.


Example 2:
Input: Order = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
Output: 999999984
Explanation: Here's what happens with the order:
- 109 sell orders at price 7 are placed. There is no buy order, so 109 orders are added to the pending orders.

- 3 buy type orders with a price of 15 are placed. They match the 3 lowest priced sell orders, which is 7, and remove these 3 sell orders from the backlog.

- 999999995 buy type orders at price 5 are placed. The minimum price for a sell order is 7, so 999999995 orders are added to the pending order.

- 1 sell order at price 5 is placed. It matches the buy order with the highest price, which is 5, and that buy order is removed from the backlog.

Finally, the backlog has (1000000000-3) sell orders at price 7, and (999999995-1) buy orders at price 5. So the total number of orders = 1999999991, which equals 999999984 % (109 + 7).


constraint:
`1 <= orders.length <= 105`
`Orders[i].length == 3`
`1 <= pricei, amount <= 109`
`orderTypei` is `0` or `1`.",0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given three positive integers: `n`, `index` and `maxSum`. You want to construct an array `nums` (0-indexed) that satisfies the following conditions:
`nums. length == n`
`nums[i]` is a positive integer where `0 <= i < n`.

`abs(nums[i] - nums[i+1]) <= 1` where `0 <= i < n-1`.

The sum of all elements of `nums` does not exceed `maxSum`.

`nums[index]` is maximized.

Return `nums[index]` of the constructed array.

Note that `abs(x)` is equal to `x` if `x >= 0`, and `-x` otherwise.


Example 1:
Input: n = 4, index = 2, maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is an array that satisfies all conditions.

There is no array that satisfies all conditions and nums[2] == 3, so 2 is the maximum value of nums[2].


Example 2:
Input: n = 6, index = 1, maxSum = 10
Output: 3

constraint:
`1 <= n <= maxSum <= 109`
`0 <= index < n`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a (0-indexed) integer array ""nums"" and two integers ""low"" and ""high"", return the number of nice pairs.

A good pair is a pair `(i, j)` where `0 <= i < j < nums.length` and `low <= (nums[i] XOR nums[j]) <= high`.


Example 1:
Input: nums = [1,4,2,7], low = 2, high = 6
Output: 6
Explanation: All nice pairs (i, j) are as follows:
    - (0, 1): nums[0] XOR nums[1] = 5
    - (0, 2): nums[0] XOR nums[2] = 3
    - (0, 3): nums[0] XOR nums[3] = 6
    - (1, 2): nums[1] XOR nums[2] = 6
    - (1, 3): nums[1] XOR nums[3] = 3
    - (2, 3): nums[2] XOR nums[3] = 5

Example 2:
Input: nums = [9,8,4,2,1], low = 5, high = 14
Output: 8
Explanation: All nice pairs (i, j) are as follows:
- (0, 2): nums[0] XOR nums[2] = 13
    - (0, 3): nums[0] XOR nums[3] = 11
    - (0, 4): nums[0] XOR nums[4] = 8
    - (1, 2): nums[1] XOR nums[2] = 12
    - (1, 3): nums[1] XOR nums[3] = 10
    - (1, 4): nums[1] XOR nums[4] = 9
    - (2, 3): nums[2] XOR nums[3] = 6
    - (2, 4): nums[2] XOR nums[4] = 5

constraint:
`1 <= nums.length <= 2 * 104`
`1 <= nums[i] <= 2 * 104`
`1 <= low <= high <= 2 * 104`",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"gives you an even number `n`. You initially have a permutation `perm` of size `n` where `perm[i] == i` (starting at 0).

In one operation, you create a new array ""arr"", and for each ""i"":
If `i % 2 == 0`, then `arr[i] = perm[i / 2]`.

If `i % 2 == 1`, then `arr[i] = perm[n / 2 + (i - 1) / 2]`.

You would then assign `arr` to `perm`.

Returns the minimum number of non-zero operations you need to perform on perm to return the permutation to its initial value.


Example 1:
Input: n = 2
Output: 1
Explanation: Initially perm = [0,1].

After the first operation, perm = [0,1]
So only 1 operation is required.


Example 2:
Input: n = 4
Output: 2
Explanation: Initially perm = [0,1,2,3].

After the first operation, perm = [0,2,1,3]
After the second operation, perm = [0,1,2,3]
So only 2 operations are required.


Example 3:
Input: n = 6
Output: 4

constraint:
`2 <= n <= 1000`
`n` is an even number.",1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a string s containing some parenthesis pairs, each pair containing a non-null key.

For example, in the string ""(name)is(age)yearsold"", there are two parenthesis pairs containing the keys ""name"" and ""age"".

You know the values ​​for various keys. This is represented by the two-dimensional string array ""knowledge"", where each ""knowledge[i] = [keyi, valuei]"" represents the value ""valuei"" for the key ""keyi"".

Your task is to evaluate all pairs of brackets. When you evaluate a parenthesis pair containing some key `keyi`, you will:
Replace the keyi and parenthesis pair with the valuei corresponding to the key.

If you don't know the value of the key, replace the `keyi` and parenthesis pair with a question mark `""?"" (without quotes).

Each key appears at most once in your ""knowledge"". s will not have any nested parentheses.

Returns the resulting string after evaluating all parenthesis pairs.


Example 1:
Input: s = ""(name)is(age)yearsold"", knowledge = [[""name"",""bob""],[""age"",""two""]]
Output: ""bobistwoyearsold""
explain:
The value of the key ""name"" is ""bob"", so replace ""(name)"" with ""bob"".

The key ""age"" has a value of ""two"", so replace ""(age)"" with ""two"".


Example 2:
Input: s = ""hi(name)"", knowledge = [[""a"",""b""]]
Output: ""Hi?""
Explanation: Since you don't know the value of the key ""name"", replace ""(name)"" with ""?"".


Example 3:
Input: s = ""(a)(a)(a)aaa"", knowledge = [[""a"",""yes""]]
Output: ""yesyesyesaaa""
Explanation: The same key can appear multiple times.

The value of key ""a"" is ""yes"", so replace all occurrences of ""(a)"" with ""yes"".

Note that ""a"" not within a pair of parentheses is not evaluated.


Example 4:
Input: s = ""(a)(b)"", knowledge = [[""a"",""b""],[""b"",""a""]]
Output: ""ba""

constraint:
`1 <= s.length <= 105`
`0 <= knowledge length <= 105`
`knowledge[i].length == 2`
`1 <= keyi.length, valuei.length <= 10`
`s` consists of lowercase English letters and parentheses `'('` and `')'`.

Each opening parenthesis `'('` in `s` will have a corresponding closing parenthesis `')'`.

The key s within each bracket pair will be non-null.

s will not have any nested parenthesis pairs.

`keyi` and `valuei` consist of lowercase English letters.

Each `keyi` in `knowledge` is unique.",0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given a positive integer `primeFactors`. You need to construct a positive integer ""n"" that satisfies the following conditions:
The number of prime factors of `n` (not necessarily distinct) is at most `primeFactors`.

The nice factor of `n` is maximized. Note that it is good if the divisor of `n` is divisible by every prime factor of `n`. For example, if `n = 12`, then its prime factors are `[2,2,3]`, then `6` and `12` are good divisors, but `3` and `4` are not.

Returns a nice divisor of n. Since that number might be too large, it is returned modulo 109 + 7.

Note that a prime number is a natural number greater than ""1"", which is not the product of two smaller natural numbers. The prime factors of a number ""n"" are a list of prime numbers whose product equals ""n"".


Example 1:
Input: primeFactors = 5
Output: 6
Explanation: 200 is a valid value for n.

It has 5 prime factors: [2,2,2,5,5] and it has 6 good divisors: [10,20,40,50,100,200].

No other value of n has at most 5 prime factors and more good divisors.


Example 2:
Input: primeFactors = 8
Output: 18

constraint:
`1 <= primeFactors <= 109`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"This is an interaction problem.

There is a robot in a hidden grid and you are trying to move it from a start cell to a target cell in that grid. The size of the grid is ""m x n"", and each cell in the grid is either empty or block. Ensure that the starting cell and the target cell are different and will not be blocked.

Each cell has a cost that you pay every time you move to that cell. The cost of the starting cell is not applied until the robot moves.

You want to find the minimum total cost of moving the robot to the target cell. However, you don't know the dimensions of the grid, the starting cell or the destination cell. You can only ask queries to the `GridMaster` object.

The `GridMaster` class has the following functions:
`boolean canMove(char direction)` returns `true` if the robot can move in that direction. Otherwise, it returns ""false"".

`int move(char direction)` moves the robot in that direction and returns the cost of moving to that cell. If this move would move the robot into a blocked cell or off the grid, the move will be ignored, the robot will stay in the same position, and the function will return ""-1"".

`boolean isTarget()` returns `true` if the robot is currently on the target cell. Otherwise, it returns ""false"".

Note that `direction` in the above function should be a character in `{'U','D','L','R'}`, representing up, down, left, and right directions respectively.

Returns the minimum total cost to get the robot from its initial start cell to the goal cell. Returns ""-1"" if there is no valid path between cells.

Custom tests:
The test input is read as a two-dimensional matrix ""grid"" of size ""m x n"" and four integers ""r1"", ""c1"", ""r2"" and ""c2"", where:
`grid[i][j] == 0` means cell `(i, j)` is blocked.

`grid[i][j] >= 1` means cell `(i, j)` is empty, and `grid[i][j]` is the cost of moving to that cell.

`(r1, c1)` is the starting cell of the robot.

`(r2, c2)` is the target cell for the robot.

Remember, this information will not be included in your code.


Example 1:
Input: grid = [[2,3],[1,1]], r1 = 0, c1 = 1, r2 = 1, c2 = 0
Output: 2
Explanation: One possible interaction is described as follows:
The robot initially stands on cell (0, 1), denoted by 3.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns true.

- master.canMove('R') returns false.

- master.move('L') moves the robot to cell (0, 0) and returns 2.

- master.isTarget() returns false.

- master.canMove('U') returns false.

- master.canMove('D') returns true.

- master.canMove('L') returns false.

- master.canMove('R') returns true.

- master.move('D') moves the robot to cell (1, 0) and returns 1.

- master.isTarget() returns true.

- master.move('L') does not move the robot and returns -1.

- master.move('R') moves the robot to cell (1, 1) and returns 1.

We now know that the goal is cell (0, 1) and the minimum total cost to reach it is 2.

Example 2:
Input: grid = [[0,3,1],[3,4,2],[1,2,0]], r1 = 2, c1 = 0, r2 = 0, c2 = 2
Output: 9
Explanation: The minimum cost path is (2,0) -> (2,1) -> (1,1) -> (1,2) -> (0,2).


Example 3:
Input: grid = [[1,0],[0,1]], r1 = 0, c1 = 0, r2 = 1, c2 = 1
Output: -1
Explanation: There is no path from the robot to the target cell.


constraint:
`1 <= n, m <= 100`
`m == grid. length`
`n == grid[i].length`
`0 <= grid[i][j] <= 100`",0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You'll get ""coordinates"", which is a string representing the coordinates of the chessboard square. Below is a chessboard for your reference.

Returns ""true"" if the square is white, and ""false"" if the square is black.

This coordinate will always represent a valid checkerboard. Coordinates are always letters first and numbers last.


Example 1:
input: coordinates = ""a1""
output: error
Explanation: From the above chessboard, the square with the coordinate ""a1"" is black, so return false.


Example 2:
input: coordinates = ""h3""
output: true
Explanation: From the above chessboard, the square with the coordinate ""h3"" is white, so return true.


Example 3:
input: coordinates = ""c7""
output: error

constraint:
`coordinates.length == 2`
`'a' <= coordinates[0] <= 'h'`
`'1' <= coordinates[1] <= '8'`",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sentence is a list of words separated by single spaces, with no leading or trailing spaces. For example `""Hello World""`, `""HELLO""`, `""hello world hello world""` are all sentences. Words consist only of uppercase and lowercase English letters.

Two sentences ""sentence1"" and ""sentence2"" are similar if an arbitrary sentence (possibly empty) can be inserted into one of the sentences such that the two sentences become equal. For example, `sentence1 = ""Hello my name is Jane""` and `sentence2 = ""Hello Jane""` can be equal to sentence 2 by inserting `""my name is""` between `""Hello""` and `""Jane""` .

Given two sentences ""sentence1"" and ""sentence2"", return ""true"" if ""sentence1"" and ""sentence2"" are similar. Otherwise, return ""false"".


Example 1:
Input: sentence1 = ""My name is Haley"", sentence2 = ""My Haley""
output: true
Explanation: Inserting ""name is"" between ""My"" and ""Haley"" can turn sentence2 into sentence1.


Example 2:
Input: sentence1 = ""of"", sentence2 = ""many words""
output: error
Explanation: A sentence cannot be inserted into one of the sentences to make it equal to another sentence.


Example 3:
Input: sentence1 = ""eat now"", sentence2 = ""eat""
output: true
Explanation: sentence2 can be converted into sentence1 by inserting ""right now"" at the end of the sentence.


Example 4:
Input: sentence1 = ""Luky"", sentence2 = ""Luccky""
output: error

constraint:
`1 <= sentence1.length, sentence2.length <= 100`
`sentence1` and `sentence2` consist of lowercase and uppercase English letters and spaces.

Words in `sentence1` and `sentence2` are separated by a space.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" consisting of non-negative integers. Let's define `rev(x)` to be the reciprocal of the non-negative integer `x`. For example, `rev(123) = 321` and `rev(120) = 21`. A pair of indices `(i, j)` is good if it satisfies all of the following conditions:
`0 <= i < j < nums.length`
`nums[i] + rev(nums[j]) == nums[j] + rev(nums[i])`
Returns the number of nice index pairs. Since that number might be too large, it is returned modulo 109 + 7.


Example 1:
Input: nums = [42,11,1,97]
Output: 2
Explanation: The two pairs are:
 -(0,3) : 42 + rev(97) = 42 + 79 = 121, 97 + rev(42) = 97 + 24 = 121.

 - (1,2) : 11 + rev(1) = 11 + 1 = 12, 1 + rev(11) = 1 + 11 = 12.


Example 2:
Input: nums = [13,10,35,24,76]
Output: 4

constraint:
`1 <= nums.length <= 105`
`0 <= nums[i] <= 109`",1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a donut shop that bakes donuts in batches of `batchSize`. They have a rule that they have to serve all the donuts from one batch before serving any donuts from the next batch. Given an integer `batchSize` and an integer array `groups`, where `groups[i]` indicates that there is a set of `groups[i]` customers that will visit the store. Every customer gets a donut.

When a group visits the store, all customers of that group must be served before serving any of the following groups. A group will be happy if they all get fresh donuts. That is, the first customer in the group does not receive the remaining donuts from the previous group.

You can freely rearrange the order of the groups. Returns the maximum possible number of happy groups after rearranging the groups.


Example 1:
Input: batchSize=3, groups=[1,2,3,4,5,6]
Output: 4
Explanation: You can arrange the groups as [6,2,4,5,1,3]. Then groups 1, 2, 4, and 6 will be happy.


Example 2:
Input: batchSize = 4, groups = [1,3,2,5,2,2,1,6]
Output: 4

constraint:
`1 <= batchSize <= 9`
`1 <= groups. length <= 30`
`1 <= group[i] <= 109`",0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"A sentence is a list of words separated by single spaces, with no leading or trailing spaces. Each word consists only of uppercase and lowercase English letters (no punctuation marks).

For example, ""Hello World"", ""HELLO"", ""hello world hello world"" are all sentences.

You are given a sentence `s` and an integer `k`. You want to truncate `s` to only contain the first `k` words. Return `s` after truncating.


Example 1:
Input: s = ""Hello how are you Contestant"", k = 4
Output: ""Hello, how are you""
explain:
The words in s are [""Hello"", ""how"" ""are"", ""you"", ""Contestant""].

The first 4 words are [""Hello"", ""how"", ""are"", ""you""].

So you should return ""Hi, how are you"".


Example 2:
Input: s = ""What is the solution to this problem"", k = 4
Output: ""What is the solution""
explain:
The words in s are [""What"", ""is"" ""the"", ""solution"", ""to"", ""this"", ""problem""].

The first 4 words are [""What"", ""is"", ""the"", ""solution""].

So you should return ""what is the solution"".


Example 3:
Input: s = ""chopper is not a tanuki"", k = 5
Output: ""chopper is not a tanuki""

constraint:
`1 <= s.length <= 500`
`k` in the range `[1, number of words in s]`.

`s` consists only of lowercase and uppercase English letters and spaces.

Words in s are separated by a space.

No leading or trailing spaces.",0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"You will get the user's operation log on LeetCode, and an integer ""k"". Logs are represented by a two-dimensional array of integers ""logs"", where each ""logs[i] = [IDi, timei]"" represents an action performed by a user with ""IDi"" at ""timei"" minutes.

Multiple users can perform operations at the same time, and one user can perform multiple operations in the same minute.

User Active Minutes (UAM) for a given user is defined as the number of unique minutes the user performs actions on LeetCode. A minute can only be counted once, even if multiple actions occurred during that time.

You want to compute a 1-indexed array `answer` of size `k` such that for each `j` (`1 <= j <= k`), `answer[j]` is the number of users whose UAM is equal to` j`.

Returns the array ""answer"" as above.


Example 1:
Input: logs = [[0,5],[1,2],[0,2],[0,5],[1,3]], k = 5
Output: [0,2,0,0,0]
explain:
User with ID=0 performed the action again at minutes 5, 2, 5. Therefore, they have a UAM of 2 (only counted once for the 5th minute).

User with ID=1 performed an action in minutes 2 and 3. Therefore, their UAM is 2.

Since both users have a UAM of 2, answer[2] is 2 and the remaining answer[j] values ​​are 0.


Example 2:
Input: logs = [[1,1],[2,2],[2,3]], k = 4
Output: [1,1,0,0]
explain:
User with ID=1 performed an action in the 1st minute. Therefore, their UAM is 1.

User with ID=2 performed an action in minutes 2 and 3. Therefore, their UAM is 2.

There is a user with UAM 1 and a user with UAM 2.

Therefore, answer[1] = 1, answer[2] = 1, and the rest are 0.


constraint:
`1 <= logs.length <= 104`
`0 <= IDi <= 109`
`1 <= time <= 105`
`k` in the range `[user's max UAM, 105]`.",0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two arrays ""nums1"" and ""nums2"" of positive integers, both of length ""n"".

The absolute sum difference of the arrays ""nums1"" and ""nums2"" is defined as the sum of ""|nums1[i] - nums2[i]|"" for each ""0 <= i < n"" (starting from 0).

You can replace at most one element of `nums1` with any other element in `nums1` to minimize the absolute sum difference.

Returns the smallest absolute sum difference after replacing at most one element in the array `nums1`. Since the answer can be large, return it modulo 109 + 7.

`|x|` is defined as:
`x` if `x >= 0`, or
`-x` if `x < 0`.


Example 1:
Input: nums1 = [1,7,5], nums2 = [2,3,5]
Output: 3
Explanation: There are two possible optimal solutions:
- replace the second element with the first: [1,7,5] => [1,1,5], or
- Replace the second element with the third: [1,7,5] => [1,5,5].

Both produce the absolute sum difference of `|1-2| + (|1-3| or |5-3|) + |5-5| = `3.


Example 2:
Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]
output: 0
Explanation: nums1 is equal to nums2, so no substitution is needed. This will result in
The absolute sum and difference is 0.


Example 3:
Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]
Output: 20
Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].

This yields an absolute sum difference of `|10-9|. + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20`

constraint:
`n == nums1. length`
`n == nums2. length`
`1 <= n <= 105`
`1 <= nums1[i], nums2[i] <= 105`",0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given an array ""nums"" consisting of positive integers.

The GCD of a sequence is defined as the largest integer that divides all the numbers in the sequence.

For example, the sequence ""[4,6,16]"" has a GCD of ""2"".

A subsequence of an array is a sequence that can be formed by removing some (possibly none) of the elements of the array.

For example, ""[2,5,10]"" is a subsequence of ""[1,2,1,2,4,1,5,10]"".

Returns the number of distinct GCDs in all non-empty subsequences of `nums`.


Example 1:
Input: nums = [6,10,3]
Output: 5
Explanation: The figure shows all non-empty subsequences and their GCDs.

The different GCDs are 6, 10, 3, 2 and 1.


Example 2:
Input: nums = [5,15,40,5,6]
Output: 7

constraint:
`1 <= nums.length <= 105`
`1 <= nums[i] <= 2 * 105`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are m boys and n girls in a class attending an upcoming party.

Given an ""m x n"" integer matrix ""grid"", where ""grid[i][j]"" is equal to ""0"" or ""1"". If `grid[i][j] == 1`, it means that the ith boy can invite the jth girl to the party. A boy can invite at most one girl, and a girl can accept at most one boy's invitation.

Returns the maximum possible number of accepted invitations.


Example 1:
Input: Grid = [[1,1,1],
               [1,0,1],
               [0,0,1]]
Output: 3
Instructions: Invitations are sent as follows:
- The first boy invites the second girl.

- The second boy invites the first girl.

- The third boy invites the third girl.


Example 2:
Input: Grid = [[1,0,1,0],
               [1,0,0,0],
               [0,0,1,0],
               [1,1,1,0]]
Output: 3
Instructions: Invitations are sent as follows:
- The first boy invites the third girl.

- The second boy invites the first girl.

- The third boy didn't invite anyone.

- The fourth boy invites the second girl.


constraint:
`grid.length == m`
`grid[i].length == n`
`1 <= meters, n <= 200`
`grid[i][j]` is either `0` or `1`.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a function signFunc(x) that returns:
1 if `x` is positive.

`-1` if `x` is negative.

`0` if `x` is equal to `0`.

You are given an integer array `nums`. Let `product` be the product of all the values ​​in the array `nums`.

Return `signFunc(product)`.


Example 1:
Input: nums = [-1,-2,-3,-4,3,2,1]
Output: 1
Explanation: The product of all values ​​in the array is 144, and signFunc(144) = 1

Example 2:
Input: nums = [1,5,0,2,-3]
output: 0
Explanation: The product of all values ​​in the array is 0, and signFunc(0) = 0

Example 3:
Input: nums = [-1,1,-1,1,-1]
Output: -1
Explanation: The product of all values ​​in the array is -1, signFunc(-1​​) = -1

constraint:
`1 <= nums.length <= 1000`
`-100 <= nums[i] <= 100`",0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There are n friends playing the game. Friends sit in a circle and are numbered clockwise from ""1"" to ""n"". More formally, move clockwise from the ith friend to the (i+1)th friend with 1 <= i < n, and move clockwise from the nth friend to the 1st friend.

The rules of the game are as follows:
Start with the ""first"" friend.

Count down `k` friends clockwise, including the one you started with. Count in circles, possibly counting some friends more than once.

The last friend you count leaves the circle and loses the game.

If there is more than one friend in the circle, return to step ""2"", start from the friend who just lost clockwise, and repeat.

Otherwise, the last friend in the circle wins the game.

Given the number of friends ""n"" and an integer ""k"", return the winner of the game.


Example 1:
Input: n = 5, k = 2
Output: 3
Description: The game steps are as follows:
1) Start with friend 1.

2) Count 2 friends clockwise, friend 1 and friend 2 respectively.

3) Friend 2 leaves the circle. The next start is friend 3.

4) Count 2 friends clockwise, they are friends 3 and 4.

5) Friend 4 leaves the circle. The next start is friend 5.

6) Count 2 friends clockwise, namely friends 5 and 1.

7) Friend 1 leaves the circle. The next start is friend 3.

8) Count 2 friends clockwise, friend 3 and friend 5 respectively.

9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winners.


Example 2:
Input: n = 6, k = 5
Output: 1
Explanation: The order in which the friends leave is: 5, 4, 6, 2, 3. The winner is a friend 1.


constraint:
`1 <= k <= n <= 500`",1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"There is a 3-lane road of length ""n"", consisting of ""n + 1"" points labeled ""0"" to ""n"". A frog starts at point ""0"" in the second lane and wants to jump to point ""n"". However, there may be obstacles along the way.

Given an array `obstacles` of length `n + 1`, where each `obstacles[i]` (ranging from 0 to 3) describes an obstacle at point `i` on lane `obstacles[i]`. If `obstacles[i] == 0`, then there are no obstacles at point `i`. The 3 lanes have at most one obstacle at each point.

For example, if obstacles[2] == 1 , then point 2 on lane 1 has an obstacle.

The frog can only travel from point `i` to point `i+1` on the same lane if there are no obstacles in the lane of point `i+1`. To avoid obstacles, the frog can also perform a side hop at the same point to jump to another lane (even if they are not adjacent) if there are no obstacles in the new lane.

For example, a frog can jump from track 3 at point 3 to track 1 at point 3.

Returns the minimum number of side hops required for a frog to reach any lane at point n starting from lane ""2"" at point 0.

Note: There will be no obstacles on points 0 and n.


Example 1:
Input: Obstacles = [0,1,2,3,0]
Output: 2
Explanation: The optimal solution is shown by the upper arrow. There are 2 side jumps (red arrows).

Note that the frog can only jump over obstacles when performing side hops (as shown in point 2).


Example 2:
Input: Obstacles = [0,1,1,3,3,0]
output: 0
Explanation: There is no obstacle in lane 2. No need to jump sideways.


Example 3:
Input: Obstacles = [0,2,1,0,3,0]
Output: 2
Explanation: The optimal solution is shown by the upper arrow. There are 2 side jumps.


constraint:
`obstacles. length == n + 1`
`1 <= n <= 5 * 105`
`0 <= obstacles[i] <= 3`
`obstacles[0] == obstacles[n] == 0`",0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
"Given two integers ""m"" and ""k"", and a stream of integers. Your task is to implement a data structure that computes the MKAverage of streams.

MKAverage can be calculated using the following steps:
MKAverage shall be treated as ""-1"" if the number of elements in the stream is less than ""m"". Otherwise, the last 'm' elements of the stream are copied into separate containers.

Removes the smallest `k` elements and the largest `k` elements from the container.

Calculates the average of the remaining elements, rounded to the nearest integer.

Implement the ""MKAverage"" class:
`MKAverage(int m, int k)` initializes an MKAverage object with an empty stream and two integers `m` and `k`.

`void addElement(int num)` Inserts new element `num` into the stream.

`int calculateMKAverage()` Calculates and returns the MKAverage for the current stream, rounded to the nearest integer.


Example 1:
enter
[""MKAverage"", ""addElement"", ""addElement"", ""calculateMKAverage"", ""addElement"", ""calculateMKAverage"", ""addElement"", ""addElement"", ""addElement"", ""calculateMKAverage""]
[[3, 1], [3], [1], [], [10], [], [5], [5], [5], []]
output
[empty, empty, empty, -1, empty, 3, empty, empty, empty, 5]
explain
MKAverage obj = new MKAverage(3, 1);
obj.addElement(3); // current element is [3]
obj.addElement(1); // current element is [3,1]
obj.calculateMKAverage(); // returns -1 because m = 3 and only 2 elements exist.

obj.addElement(10); // current element is [3,1,10]
obj.calculateMKAverage(); // The last 3 elements are [3,1,10].

                          // After removing the smallest and largest 1 elements, the container will be `[3].

                          // The mean of [3] equals 3/1 = 3, returns 3
obj.addElement(5); // current element is [3,1,10,5]
obj.addElement(5); // current element is [3,1,10,5,5]
obj.addElement(5); // current element is [3,1,10,5,5,5]
obj.calculateMKAverage(); // The last 3 elements are [5,5,5].

                          // After removing the smallest and largest 1 elements, the container will be `[5].

                          // The average of [5] equals 5/1 = 5, returns 5
``

constraint:
`3 <= meters <= 105`
`1 <= k*2 < m`
`1 <= num <= 105`
There will be at most 105 calls to addElement and calculateMKAverage.",0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
